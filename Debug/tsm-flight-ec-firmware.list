
tsm-flight-ec-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a650  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a830  0800a830  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a830  0800a830  0001a830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a838  0800a838  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f0  200001e4  0800aa24  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022d4  0800aa24  000222d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000210c4  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb1  00000000  00000000  000412d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00044f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  000463f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251be  00000000  00000000  000476a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001941e  00000000  00000000  0006c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9d0f  00000000  00000000  00085c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005570  00000000  00000000  0015f9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e4 	.word	0x200001e4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a800 	.word	0x0800a800

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e8 	.word	0x200001e8
 8000204:	0800a800 	.word	0x0800a800

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96e 	b.w	8000e88 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	4604      	mov	r4, r0
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8083 	bne.w	8000cda <__udivmoddi4+0x116>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d947      	bls.n	8000c6a <__udivmoddi4+0xa6>
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	b142      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000be0:	f1c2 0020 	rsb	r0, r2, #32
 8000be4:	fa24 f000 	lsr.w	r0, r4, r0
 8000be8:	4091      	lsls	r1, r2
 8000bea:	4097      	lsls	r7, r2
 8000bec:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf0:	4094      	lsls	r4, r2
 8000bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bfc:	fa1f fe87 	uxth.w	lr, r7
 8000c00:	fb08 c116 	mls	r1, r8, r6, ip
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f10e 	mul.w	r1, r6, lr
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x60>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 8119 	bcs.w	8000e4c <__udivmoddi4+0x288>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 8116 	bls.w	8000e4c <__udivmoddi4+0x288>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	443b      	add	r3, r7
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x8c>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	f080 8105 	bcs.w	8000e50 <__udivmoddi4+0x28c>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f240 8102 	bls.w	8000e50 <__udivmoddi4+0x28c>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	443c      	add	r4, r7
 8000c50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c54:	eba4 040e 	sub.w	r4, r4, lr
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa0>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xaa>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d150      	bne.n	8000d18 <__udivmoddi4+0x154>
 8000c76:	1bcb      	subs	r3, r1, r7
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	2601      	movs	r6, #1
 8000c82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c86:	0c21      	lsrs	r1, r4, #16
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb08 f30c 	mul.w	r3, r8, ip
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xe4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0xe2>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f200 80e9 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1ac9      	subs	r1, r1, r3
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x10c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x10a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80d9 	bhi.w	8000e80 <__udivmoddi4+0x2bc>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e7bf      	b.n	8000c5a <__udivmoddi4+0x96>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d909      	bls.n	8000cf2 <__udivmoddi4+0x12e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <__udivmoddi4+0x282>
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cea:	4630      	mov	r0, r6
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	fab3 f683 	clz	r6, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d14a      	bne.n	8000d90 <__udivmoddi4+0x1cc>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0x140>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 80b8 	bhi.w	8000e74 <__udivmoddi4+0x2b0>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0a8      	beq.n	8000c64 <__udivmoddi4+0xa0>
 8000d12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d20:	4097      	lsls	r7, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2a:	40d9      	lsrs	r1, r3
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d40:	fb06 f108 	mul.w	r1, r6, r8
 8000d44:	4299      	cmp	r1, r3
 8000d46:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x19c>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d52:	f080 808d 	bcs.w	8000e70 <__udivmoddi4+0x2ac>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 808a 	bls.w	8000e70 <__udivmoddi4+0x2ac>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	443b      	add	r3, r7
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b281      	uxth	r1, r0
 8000d64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb00 f308 	mul.w	r3, r0, r8
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1c4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7e:	d273      	bcs.n	8000e68 <__udivmoddi4+0x2a4>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d971      	bls.n	8000e68 <__udivmoddi4+0x2a4>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4439      	add	r1, r7
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8e:	e778      	b.n	8000c82 <__udivmoddi4+0xbe>
 8000d90:	f1c6 0c20 	rsb	ip, r6, #32
 8000d94:	fa03 f406 	lsl.w	r4, r3, r6
 8000d98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da2:	fa01 f306 	lsl.w	r3, r1, r6
 8000da6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	0c3b      	lsrs	r3, r7, #16
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fa1f f884 	uxth.w	r8, r4
 8000dba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x220>
 8000dd2:	1861      	adds	r1, r4, r1
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d248      	bcs.n	8000e6c <__udivmoddi4+0x2a8>
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	d946      	bls.n	8000e6c <__udivmoddi4+0x2a8>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	4421      	add	r1, r4
 8000de4:	eba1 010a 	sub.w	r1, r1, sl
 8000de8:	b2bf      	uxth	r7, r7
 8000dea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df6:	fb00 f808 	mul.w	r8, r0, r8
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x24a>
 8000dfe:	19e7      	adds	r7, r4, r7
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d22e      	bcs.n	8000e64 <__udivmoddi4+0x2a0>
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d92c      	bls.n	8000e64 <__udivmoddi4+0x2a0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4427      	add	r7, r4
 8000e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e12:	eba7 0708 	sub.w	r7, r7, r8
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	454f      	cmp	r7, r9
 8000e1c:	46c6      	mov	lr, r8
 8000e1e:	4649      	mov	r1, r9
 8000e20:	d31a      	bcc.n	8000e58 <__udivmoddi4+0x294>
 8000e22:	d017      	beq.n	8000e54 <__udivmoddi4+0x290>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x27a>
 8000e26:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e32:	40f2      	lsrs	r2, r6
 8000e34:	ea4c 0202 	orr.w	r2, ip, r2
 8000e38:	40f7      	lsrs	r7, r6
 8000e3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	462e      	mov	r6, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fd      	b.n	8000c50 <__udivmoddi4+0x8c>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d2e5      	bcs.n	8000e24 <__udivmoddi4+0x260>
 8000e58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e60:	3801      	subs	r0, #1
 8000e62:	e7df      	b.n	8000e24 <__udivmoddi4+0x260>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e7d2      	b.n	8000e0e <__udivmoddi4+0x24a>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	e78d      	b.n	8000d88 <__udivmoddi4+0x1c4>
 8000e6c:	4681      	mov	r9, r0
 8000e6e:	e7b9      	b.n	8000de4 <__udivmoddi4+0x220>
 8000e70:	4666      	mov	r6, ip
 8000e72:	e775      	b.n	8000d60 <__udivmoddi4+0x19c>
 8000e74:	4630      	mov	r0, r6
 8000e76:	e74a      	b.n	8000d0e <__udivmoddi4+0x14a>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	4439      	add	r1, r7
 8000e7e:	e713      	b.n	8000ca8 <__udivmoddi4+0xe4>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	e724      	b.n	8000cd0 <__udivmoddi4+0x10c>
 8000e86:	bf00      	nop

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <init_autosequence_timings>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_timings() {
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	// Valve timings read from flash
	// PID start delay read from flash
	// Film cooling start time read from flash
	// hotfire duration read from flash

	autosequence.post_vent_on_time_ms = 1000;  // TODO: update
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <init_autosequence_timings+0x28>)
 8000e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e96:	615a      	str	r2, [r3, #20]
	autosequence.post_vent_off_time_ms = 2000;  // TODO: update
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <init_autosequence_timings+0x28>)
 8000e9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e9e:	619a      	str	r2, [r3, #24]
	autosequence.post_purge_off_time_ms = 10000;  // TODO: update
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <init_autosequence_timings+0x28>)
 8000ea2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ea6:	61da      	str	r2, [r3, #28]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000055c 	.word	0x2000055c

08000eb8 <handle_abort_case_actuations>:

/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 */
void handle_abort_case_actuations() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	// TODO: check normally open/normally closed on ALL these valves

	// Close MPVs
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2006      	movs	r0, #6
 8000ec0:	f004 fc70 	bl	80057a4 <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f004 fc6c 	bl	80057a4 <set_valve_channel>
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f004 fc68 	bl	80057a4 <set_valve_channel>

	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2008      	movs	r0, #8
 8000ed8:	f004 fc64 	bl	80057a4 <set_valve_channel>

	// Close control valves
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f004 fc60 	bl	80057a4 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f004 fc5c 	bl	80057a4 <set_valve_channel>

	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2009      	movs	r0, #9
 8000ef0:	f004 fc58 	bl	80057a4 <set_valve_channel>

	// Open vent valves
	set_valve_channel(FUEL_TANK_VENT_VALVE_CH, VALVE_ON);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f004 fc54 	bl	80057a4 <set_valve_channel>
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f004 fc50 	bl	80057a4 <set_valve_channel>

	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2004      	movs	r0, #4
 8000f08:	f004 fc4c 	bl	80057a4 <set_valve_channel>

	// Close motors (needle valves), 0 degrees should be closed.
	L6470_goto_motor_pos(&(tanks[LOX_TANK_NUM].motor), 0);
 8000f0c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000f34 <handle_abort_case_actuations+0x7c>
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <handle_abort_case_actuations+0x80>)
 8000f12:	f004 fe94 	bl	8005c3e <L6470_goto_motor_pos>
	L6470_goto_motor_pos(&(tanks[FUEL_TANK_NUM].motor), 0);
 8000f16:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000f34 <handle_abort_case_actuations+0x7c>
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <handle_abort_case_actuations+0x84>)
 8000f1c:	f004 fe8f 	bl	8005c3e <L6470_goto_motor_pos>

	// Stop TPC (not an actuation)
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <handle_abort_case_actuations+0x88>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <handle_abort_case_actuations+0x88>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	00000000 	.word	0x00000000
 8000f38:	20000458 	.word	0x20000458
 8000f3c:	200004dc 	.word	0x200004dc
 8000f40:	2000055c 	.word	0x2000055c

08000f44 <manual_state_transition>:
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);

	// TODO: go back to Manual?
}

void manual_state_transition(uint8_t next_state) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]

	// Aborts work in any state
	if (next_state == Abort) {
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d108      	bne.n	8000f66 <manual_state_transition+0x22>
		STATE = Abort;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <manual_state_transition+0xf8>)
 8000f56:	2206      	movs	r2, #6
 8000f58:	701a      	strb	r2, [r3, #0]
		handle_abort_case_actuations();
 8000f5a:	f7ff ffad 	bl	8000eb8 <handle_abort_case_actuations>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f003 faa8 	bl	80044b4 <set_status_flag>
		return;
 8000f64:	e067      	b.n	8001036 <manual_state_transition+0xf2>
	}

	// Check current state to determine next state transition
	if (STATE == Manual) {
 8000f66:	4b35      	ldr	r3, [pc, #212]	; (800103c <manual_state_transition+0xf8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <manual_state_transition+0x38>
		if (next_state == Armed) {
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d160      	bne.n	8001036 <manual_state_transition+0xf2>
			STATE = Armed;
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <manual_state_transition+0xf8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e05c      	b.n	8001036 <manual_state_transition+0xf2>
		}
	}
	else if (STATE == Armed) {
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <manual_state_transition+0xf8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10d      	bne.n	8000fa0 <manual_state_transition+0x5c>
		if (next_state == Manual) {
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <manual_state_transition+0x4e>
			STATE = Manual;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <manual_state_transition+0xf8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e051      	b.n	8001036 <manual_state_transition+0xf2>
		}
		else if (next_state == AutoPress) {
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d14e      	bne.n	8001036 <manual_state_transition+0xf2>
			STATE = AutoPress;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <manual_state_transition+0xf8>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e04a      	b.n	8001036 <manual_state_transition+0xf2>
			// TODO: handle Autopress transition here?
		}
	}
	else if (STATE == AutoPress) {
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <manual_state_transition+0xf8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d10d      	bne.n	8000fc4 <manual_state_transition+0x80>
		if (next_state == Manual) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <manual_state_transition+0x72>
			STATE = Safe;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <manual_state_transition+0xf8>)
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e03f      	b.n	8001036 <manual_state_transition+0xf2>
		}
		else if (next_state == AutoPress) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d13c      	bne.n	8001036 <manual_state_transition+0xf2>
			STATE = Startup;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <manual_state_transition+0xf8>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e038      	b.n	8001036 <manual_state_transition+0xf2>
		}
		// TODO: manual override into Startup (not sure about timing or command)
	}
	else if (STATE == Startup) {
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <manual_state_transition+0xf8>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d11a      	bne.n	8001002 <manual_state_transition+0xbe>
		if (next_state == Manual) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <manual_state_transition+0x96>
			STATE = Safe;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <manual_state_transition+0xf8>)
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e02d      	b.n	8001036 <manual_state_transition+0xf2>
		}
		else if (next_state == Ignition) {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d12a      	bne.n	8001036 <manual_state_transition+0xf2>
			STATE = Ignition;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <manual_state_transition+0xf8>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	701a      	strb	r2, [r3, #0]
			autosequence.ignition_start_time_ms = SYS_MILLIS;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <manual_state_transition+0xfc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <manual_state_transition+0x100>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	099b      	lsrs	r3, r3, #6
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <manual_state_transition+0x104>)
 8000ff6:	6253      	str	r3, [r2, #36]	; 0x24
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f004 fbd2 	bl	80057a4 <set_valve_channel>
 8001000:	e019      	b.n	8001036 <manual_state_transition+0xf2>
		}
	}
	else if (STATE == IgnitionFail) {
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <manual_state_transition+0xf8>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b09      	cmp	r3, #9
 8001008:	d10b      	bne.n	8001022 <manual_state_transition+0xde>
		if (next_state == Manual && autosequence.ignition_failure_shutdown_flag) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d112      	bne.n	8001036 <manual_state_transition+0xf2>
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <manual_state_transition+0x104>)
 8001012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00d      	beq.n	8001036 <manual_state_transition+0xf2>
			STATE = Manual;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <manual_state_transition+0xf8>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e009      	b.n	8001036 <manual_state_transition+0xf2>
		}
	}
	else if (STATE == Abort) {
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <manual_state_transition+0xf8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b06      	cmp	r3, #6
 8001028:	d105      	bne.n	8001036 <manual_state_transition+0xf2>
		if (next_state == Manual) {
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <manual_state_transition+0xf2>
			STATE = Manual;  // Operator must dismiss Abort condition
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <manual_state_transition+0xf8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000348 	.word	0x20000348
 8001040:	20000638 	.word	0x20000638
 8001044:	10624dd3 	.word	0x10624dd3
 8001048:	2000055c 	.word	0x2000055c

0800104c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d103      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
		periodic_flag_50ms = 1;
	}
	else if (htim == &TIM_100MS) {
		periodic_flag_100ms = 1;
	}
}
 8001062:	e00e      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_50MS) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d103      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	e006      	b.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_100MS) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d102      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x36>
		periodic_flag_100ms = 1;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200007d8 	.word	0x200007d8
 8001094:	20000590 	.word	0x20000590
 8001098:	200005ec 	.word	0x200005ec
 800109c:	20000c8c 	.word	0x20000c8c
 80010a0:	20000964 	.word	0x20000964
 80010a4:	20000634 	.word	0x20000634

080010a8 <HAL_UART_RxCpltCallback>:
volatile uint16_t telem_buffer_sz = 0;
uint8_t telem_buffer[255];
uint8_t eof_received = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if (huart == &COM_UART) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_UART_RxCpltCallback+0x48>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d117      	bne.n	80010e8 <HAL_UART_RxCpltCallback+0x40>
		HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <HAL_UART_RxCpltCallback+0x4c>)
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <HAL_UART_RxCpltCallback+0x48>)
 80010be:	f008 fd64 	bl	8009b8a <HAL_UART_Receive_IT>
		telem_buffer[telem_buffer_sz++] = last_byte_uart;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_UART_RxCpltCallback+0x50>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	b291      	uxth	r1, r2
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_UART_RxCpltCallback+0x50>)
 80010ce:	8011      	strh	r1, [r2, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_UART_RxCpltCallback+0x4c>)
 80010d4:	7819      	ldrb	r1, [r3, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_UART_RxCpltCallback+0x54>)
 80010d8:	5499      	strb	r1, [r3, r2]
		if (last_byte_uart == 0) {
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_UART_RxCpltCallback+0x4c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_UART_RxCpltCallback+0x40>
			eof_received = 1;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_UART_RxCpltCallback+0x58>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000820 	.word	0x20000820
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000450 	.word	0x20000450
 80010fc:	20000b80 	.word	0x20000b80
 8001100:	20000452 	.word	0x20000452

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f006 f8e0 	bl	80072cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f8f8 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 fb1e 	bl	8001750 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001114:	f000 f960 	bl	80013d8 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001118:	f000 fa00 	bl	800151c <MX_SPI4_Init>
  MX_SPI2_Init();
 800111c:	f000 f992 	bl	8001444 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001120:	f000 f9c6 	bl	80014b0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001124:	f000 faea 	bl	80016fc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001128:	f000 fa2e 	bl	8001588 <MX_TIM5_Init>
  MX_TIM10_Init();
 800112c:	f000 fa7a 	bl	8001624 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001130:	f000 fa9c 	bl	800166c <MX_TIM11_Init>
  MX_TIM13_Init();
 8001134:	f000 fabe 	bl	80016b4 <MX_TIM13_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8001138:	4856      	ldr	r0, [pc, #344]	; (8001294 <main+0x190>)
 800113a:	f007 ffb1 	bl	80090a0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 800113e:	4856      	ldr	r0, [pc, #344]	; (8001298 <main+0x194>)
 8001140:	f008 f816 	bl	8009170 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8001144:	4855      	ldr	r0, [pc, #340]	; (800129c <main+0x198>)
 8001146:	f008 f813 	bl	8009170 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 800114a:	4855      	ldr	r0, [pc, #340]	; (80012a0 <main+0x19c>)
 800114c:	f008 f810 	bl	8009170 <HAL_TIM_Base_Start_IT>

  // UART DMA
  HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	4954      	ldr	r1, [pc, #336]	; (80012a4 <main+0x1a0>)
 8001154:	4854      	ldr	r0, [pc, #336]	; (80012a8 <main+0x1a4>)
 8001156:	f008 fd18 	bl	8009b8a <HAL_UART_Receive_IT>


  // Watchdog

  // Read variables from flash: this must be called very early in initialization!
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	4a53      	ldr	r2, [pc, #332]	; (80012ac <main+0x1a8>)
 8001160:	4953      	ldr	r1, [pc, #332]	; (80012b0 <main+0x1ac>)
 8001162:	4854      	ldr	r0, [pc, #336]	; (80012b4 <main+0x1b0>)
 8001164:	f005 fdc9 	bl	8006cfa <init_flash>
  read_nonvolatile_variables();
 8001168:	f000 fbf6 	bl	8001958 <read_nonvolatile_variables>
  // Board-specific hardware
  //init_spi_peripherals();  // Set chip selects high and initialize

  //init_adcs();
  //init_thermocouples();
  init_serial_data(&buffer_info);
 800116c:	4852      	ldr	r0, [pc, #328]	; (80012b8 <main+0x1b4>)
 800116e:	f003 f897 	bl	80042a0 <init_serial_data>

  init_board(FLIGHT_EC_ADDR);  // Comms
 8001172:	2002      	movs	r0, #2
 8001174:	f004 fdde 	bl	8005d34 <init_board>

  init_autosequence_timings();
 8001178:	f7ff fe88 	bl	8000e8c <init_autosequence_timings>


  // Motor stress test
  motor.hspi = &SPI_MOTOR;
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <main+0x1b8>)
 800117e:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <main+0x1bc>)
 8001180:	601a      	str	r2, [r3, #0]
  motor.cs_base = MTR0_CS_GPIO_Port;
 8001182:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <main+0x1b8>)
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <main+0x1c0>)
 8001186:	605a      	str	r2, [r3, #4]
  motor.cs_pin = MTR0_CS_Pin;
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <main+0x1b8>)
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	811a      	strh	r2, [r3, #8]
  motor.busy_base = MTR0_BUSY_GPIO_Port;
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <main+0x1b8>)
 8001192:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <main+0x1c0>)
 8001194:	60da      	str	r2, [r3, #12]
  motor.busy_pin = MTR0_BUSY_Pin;
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <main+0x1b8>)
 8001198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119c:	821a      	strh	r2, [r3, #16]

  L6470_init_motor(&motor, L6470_FULL_STEP_MODE, 1.8);
 800119e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80012c8 <main+0x1c4>
 80011a2:	2100      	movs	r1, #0
 80011a4:	4845      	ldr	r0, [pc, #276]	; (80012bc <main+0x1b8>)
 80011a6:	f004 fd29 	bl	8005bfc <L6470_init_motor>
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  // TODO: call autosequence functions
	  //execute_autosequence();
	  flash_mem = get_bytes_remaining(&flash);
 80011aa:	4842      	ldr	r0, [pc, #264]	; (80012b4 <main+0x1b0>)
 80011ac:	f006 f805 	bl	80071ba <get_bytes_remaining>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a46      	ldr	r2, [pc, #280]	; (80012cc <main+0x1c8>)
 80011b4:	6013      	str	r3, [r2, #0]



	  if (periodic_flag_50ms) {
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <main+0x1cc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d016      	beq.n	80011ee <main+0xea>
		  periodic_flag_50ms = 0;
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <main+0x1cc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <main+0x1d0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d10f      	bne.n	80011ee <main+0xea>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <main+0x1d4>)
 80011d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <main+0xda>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 80011d8:	4840      	ldr	r0, [pc, #256]	; (80012dc <main+0x1d8>)
 80011da:	f003 fc21 	bl	8004a20 <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <main+0x1d4>)
 80011e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <main+0xea>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 80011e8:	483d      	ldr	r0, [pc, #244]	; (80012e0 <main+0x1dc>)
 80011ea:	f003 fc19 	bl	8004a20 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <main+0x1e0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d026      	beq.n	8001246 <main+0x142>
		  periodic_flag_5ms = 0;
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <main+0x1e0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <main+0x1d0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d105      	bne.n	8001212 <main+0x10e>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 8001206:	4835      	ldr	r0, [pc, #212]	; (80012dc <main+0x1d8>)
 8001208:	f003 fbd5 	bl	80049b6 <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 800120c:	4834      	ldr	r0, [pc, #208]	; (80012e0 <main+0x1dc>)
 800120e:	f003 fbd2 	bl	80049b6 <tank_autopress_bang_bang>
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <main+0x1d0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d10f      	bne.n	800123a <main+0x136>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <main+0x1d4>)
 800121c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <main+0x126>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 8001224:	482d      	ldr	r0, [pc, #180]	; (80012dc <main+0x1d8>)
 8001226:	f003 fc9d 	bl	8004b64 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <main+0x1d4>)
 800122c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <main+0x136>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 8001234:	482a      	ldr	r0, [pc, #168]	; (80012e0 <main+0x1dc>)
 8001236:	f003 fc95 	bl	8004b64 <tank_check_control_valve_threshold>
			  }
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <main+0x1e4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <main+0x142>
			  save_flash_packet();
 8001242:	f003 f8b7 	bl	80043b4 <save_flash_packet>
	  }



	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <main+0x1e8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00d      	beq.n	800126c <main+0x168>
		  periodic_flag_100ms = 0;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <main+0x1e8>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

		  if (!telem_disabled) {
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <main+0x1ec>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <main+0x168>
			  send_telem_packet(SERVER_ADDR);
 800125e:	2007      	movs	r0, #7
 8001260:	f003 f886 	bl	8004370 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8001264:	2101      	movs	r1, #1
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <main+0x1a8>)
 8001268:	f006 fbf3 	bl	8007a52 <HAL_GPIO_TogglePin>

	  }

	  //HAL_UART_Receive(&COM_UART, rx_buffer, 13, HAL_MAX_DELAY);

	  if (eof_received) {
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <main+0x1f0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d09a      	beq.n	80011aa <main+0xa6>
		  receive_data(&COM_UART, telem_buffer, telem_buffer_sz);
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <main+0x1f4>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	491f      	ldr	r1, [pc, #124]	; (80012fc <main+0x1f8>)
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <main+0x1a4>)
 8001280:	f004 fe8a 	bl	8005f98 <receive_data>
		  eof_received = 0;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <main+0x1f0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
		  telem_buffer_sz = 0;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <main+0x1f4>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
	  flash_mem = get_bytes_remaining(&flash);
 8001290:	e78b      	b.n	80011aa <main+0xa6>
 8001292:	bf00      	nop
 8001294:	20000638 	.word	0x20000638
 8001298:	200007d8 	.word	0x200007d8
 800129c:	200005ec 	.word	0x200005ec
 80012a0:	20000964 	.word	0x20000964
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000820 	.word	0x20000820
 80012ac:	40020800 	.word	0x40020800
 80012b0:	200009ac 	.word	0x200009ac
 80012b4:	20000d94 	.word	0x20000d94
 80012b8:	20000fac 	.word	0x20000fac
 80012bc:	20000b50 	.word	0x20000b50
 80012c0:	20000680 	.word	0x20000680
 80012c4:	40020000 	.word	0x40020000
 80012c8:	3fe66666 	.word	0x3fe66666
 80012cc:	20000384 	.word	0x20000384
 80012d0:	20000c8c 	.word	0x20000c8c
 80012d4:	20000348 	.word	0x20000348
 80012d8:	2000055c 	.word	0x2000055c
 80012dc:	20000454 	.word	0x20000454
 80012e0:	200004d8 	.word	0x200004d8
 80012e4:	20000590 	.word	0x20000590
 80012e8:	20000388 	.word	0x20000388
 80012ec:	20000634 	.word	0x20000634
 80012f0:	20000453 	.word	0x20000453
 80012f4:	20000452 	.word	0x20000452
 80012f8:	20000450 	.word	0x20000450
 80012fc:	20000b80 	.word	0x20000b80

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	; 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2234      	movs	r2, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f009 f9e8 	bl	800a6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <SystemClock_Config+0xd0>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <SystemClock_Config+0xd0>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <SystemClock_Config+0xd0>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <SystemClock_Config+0xd4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <SystemClock_Config+0xd4>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <SystemClock_Config+0xd4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001378:	235a      	movs	r3, #90	; 0x5a
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fdf1 	bl	8007f74 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001398:	f000 fad8 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2101      	movs	r1, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f006 fb66 	bl	8007a88 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013c2:	f000 fac3 	bl	800194c <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	; 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x64>)
 800140c:	2218      	movs	r2, #24
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_SPI1_Init+0x64>)
 800142a:	f007 f841 	bl	80084b0 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f000 fa8a 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000af8 	.word	0x20000af8
 8001440:	40013000 	.word	0x40013000

08001444 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI2_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_SPI2_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001454:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI2_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001464:	2202      	movs	r2, #2
 8001466:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI2_Init+0x64>)
 800146a:	2201      	movs	r2, #1
 800146c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001478:	2218      	movs	r2, #24
 800147a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI2_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI2_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001490:	220a      	movs	r2, #10
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001496:	f007 f80b 	bl	80084b0 <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 fa54 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000594 	.word	0x20000594
 80014ac:	40003800 	.word	0x40003800

080014b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_SPI3_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_SPI3_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI3_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI3_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI3_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI3_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI3_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI3_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI3_Init+0x64>)
 80014e4:	2218      	movs	r2, #24
 80014e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_SPI3_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI3_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_SPI3_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI3_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_SPI3_Init+0x64>)
 8001502:	f006 ffd5 	bl	80084b0 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 fa1e 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000680 	.word	0x20000680
 8001518:	40003c00 	.word	0x40003c00

0800151c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI4_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_SPI4_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI4_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI4_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI4_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI4_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI4_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI4_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI4_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI4_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI4_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI4_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI4_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI4_Init+0x64>)
 800156e:	f006 ff9f 	bl	80084b0 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001578:	f000 f9e8 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200009ac 	.word	0x200009ac
 8001584:	40013400 	.word	0x40013400

08001588 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM5_Init+0x94>)
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <MX_TIM5_Init+0x98>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45 - 1;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM5_Init+0x94>)
 80015ac:	222c      	movs	r2, #44	; 0x2c
 80015ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM5_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM5_Init+0x94>)
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM5_Init+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM5_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM5_Init+0x94>)
 80015cc:	f007 fd18 	bl	8009000 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80015d6:	f000 f9b9 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM5_Init+0x94>)
 80015e8:	f007 ff3a 	bl	8009460 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f000 f9ab 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_TIM5_Init+0x94>)
 8001604:	f008 f952 	bl	80098ac <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800160e:	f000 f99d 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000638 	.word	0x20000638
 8001620:	40000c00 	.word	0x40000c00

08001624 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_TIM10_Init+0x40>)
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <MX_TIM10_Init+0x44>)
 800162c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000 - 1;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MX_TIM10_Init+0x40>)
 8001630:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001634:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_TIM10_Init+0x40>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50 - 1;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_TIM10_Init+0x40>)
 800163e:	2231      	movs	r2, #49	; 0x31
 8001640:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_TIM10_Init+0x40>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_TIM10_Init+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM10_Init+0x40>)
 8001650:	f007 fcd6 	bl	8009000 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800165a:	f000 f977 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200005ec 	.word	0x200005ec
 8001668:	40014400 	.word	0x40014400

0800166c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_TIM11_Init+0x40>)
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <MX_TIM11_Init+0x44>)
 8001674:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 45000 - 1;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MX_TIM11_Init+0x40>)
 8001678:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800167c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_TIM11_Init+0x40>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100 - 1;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_TIM11_Init+0x40>)
 8001686:	2263      	movs	r2, #99	; 0x63
 8001688:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_TIM11_Init+0x40>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_TIM11_Init+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM11_Init+0x40>)
 8001698:	f007 fcb2 	bl	8009000 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016a2:	f000 f953 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000964 	.word	0x20000964
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <MX_TIM13_Init+0x44>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000 - 1;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016c0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80016c4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5 - 1;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM13_Init+0x40>)
 80016e0:	f007 fc8e 	bl	8009000 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80016ea:	f000 f92f 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200007d8 	.word	0x200007d8
 80016f8:	40001c00 	.word	0x40001c00

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART1_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001734:	f008 f94a 	bl	80099cc <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173e:	f000 f905 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000820 	.word	0x20000820
 800174c:	40011000 	.word	0x40011000

08001750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <MX_GPIO_Init+0x1e4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a71      	ldr	r2, [pc, #452]	; (8001934 <MX_GPIO_Init+0x1e4>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <MX_GPIO_Init+0x1e4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <MX_GPIO_Init+0x1e4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <MX_GPIO_Init+0x1e4>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b68      	ldr	r3, [pc, #416]	; (8001934 <MX_GPIO_Init+0x1e4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b64      	ldr	r3, [pc, #400]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a63      	ldr	r2, [pc, #396]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b61      	ldr	r3, [pc, #388]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b56      	ldr	r3, [pc, #344]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a55      	ldr	r2, [pc, #340]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <MX_GPIO_Init+0x1e4>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <MX_GPIO_Init+0x1e4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f24e 0110 	movw	r1, #57360	; 0xe010
 8001814:	4848      	ldr	r0, [pc, #288]	; (8001938 <MX_GPIO_Init+0x1e8>)
 8001816:	f006 f903 	bl	8007a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 800181a:	2200      	movs	r2, #0
 800181c:	f246 31ff 	movw	r1, #25599	; 0x63ff
 8001820:	4846      	ldr	r0, [pc, #280]	; (800193c <MX_GPIO_Init+0x1ec>)
 8001822:	f006 f8fd 	bl	8007a20 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f241 5104 	movw	r1, #5380	; 0x1504
 800182c:	4844      	ldr	r0, [pc, #272]	; (8001940 <MX_GPIO_Init+0x1f0>)
 800182e:	f006 f8f7 	bl	8007a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 8001832:	2200      	movs	r2, #0
 8001834:	f241 4107 	movw	r1, #5127	; 0x1407
 8001838:	4842      	ldr	r0, [pc, #264]	; (8001944 <MX_GPIO_Init+0x1f4>)
 800183a:	f006 f8f1 	bl	8007a20 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 41be 	mov.w	r1, #24320	; 0x5f00
 8001844:	4840      	ldr	r0, [pc, #256]	; (8001948 <MX_GPIO_Init+0x1f8>)
 8001846:	f006 f8eb 	bl	8007a20 <HAL_GPIO_WritePin>
                          |en_vlv9_Pin|ADC0_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC2_EOC_Pin */
  GPIO_InitStruct.Pin = ADC2_EOC_Pin;
 800184a:	2308      	movs	r3, #8
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC2_EOC_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4836      	ldr	r0, [pc, #216]	; (8001938 <MX_GPIO_Init+0x1e8>)
 800185e:	f005 ff4b 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_CS_Pin en_vlv0_Pin en_vlv1_Pin en_vlv2_Pin */
  GPIO_InitStruct.Pin = ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin;
 8001862:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <MX_GPIO_Init+0x1e8>)
 800187c:	f005 ff3c 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin EEPROM_CS_Pin LED_0_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin TC_MUX_EN_Pin TC_MUX_A3_Pin
                           ADC1_CS_Pin en_vlv10_Pin en_vlv11_Pin en_vlv12_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001880:	f246 33ff 	movw	r3, #25599	; 0x63ff
 8001884:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_GPIO_Init+0x1ec>)
 800189a:	f005 ff2d 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_EOC_Pin MTR0_BUSY_Pin MTR1_BUSY_Pin */
  GPIO_InitStruct.Pin = ADC3_EOC_Pin|MTR0_BUSY_Pin|MTR1_BUSY_Pin;
 800189e:	f640 2302 	movw	r3, #2562	; 0xa02
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4823      	ldr	r0, [pc, #140]	; (8001940 <MX_GPIO_Init+0x1f0>)
 80018b4:	f005 ff20 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_CS_Pin en_vlv13_Pin MTR0_CS_Pin MTR1_CS_Pin */
  GPIO_InitStruct.Pin = ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin;
 80018b8:	f241 5304 	movw	r3, #5380	; 0x1504
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	481b      	ldr	r0, [pc, #108]	; (8001940 <MX_GPIO_Init+0x1f0>)
 80018d2:	f005 ff11 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_MUX_A2_Pin TC_MUX_A1_Pin TC_MUX_A0_Pin en_vlv3_Pin
                           en_vlv4_Pin */
  GPIO_InitStruct.Pin = TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 80018d6:	f241 4307 	movw	r3, #5127	; 0x1407
 80018da:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4815      	ldr	r0, [pc, #84]	; (8001944 <MX_GPIO_Init+0x1f4>)
 80018f0:	f005 ff02 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv5_Pin en_vlv6_Pin en_vlv7_Pin en_vlv8_Pin
                           en_vlv9_Pin ADC0_CS_Pin */
  GPIO_InitStruct.Pin = en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 80018f4:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 80018f8:	61fb      	str	r3, [r7, #28]
                          |en_vlv9_Pin|ADC0_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	480e      	ldr	r0, [pc, #56]	; (8001948 <MX_GPIO_Init+0x1f8>)
 800190e:	f005 fef3 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_EOC_Pin ADC1_EOC_Pin */
  GPIO_InitStruct.Pin = ADC0_EOC_Pin|ADC1_EOC_Pin;
 8001912:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <MX_GPIO_Init+0x1f8>)
 8001928:	f005 fee6 	bl	80076f8 <HAL_GPIO_Init>

}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020800 	.word	0x40020800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400
 8001948:	40020c00 	.word	0x40020c00

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 800195e:	23fe      	movs	r3, #254	; 0xfe
 8001960:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001962:	2100      	movs	r1, #0
 8001964:	4894      	ldr	r0, [pc, #592]	; (8001bb8 <read_nonvolatile_variables+0x260>)
 8001966:	f005 fc64 	bl	8007232 <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 800196a:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <read_nonvolatile_variables+0x1e>
		return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e22f      	b.n	8001dd6 <read_nonvolatile_variables+0x47e>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001976:	4b8f      	ldr	r3, [pc, #572]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 800197c:	4b8d      	ldr	r3, [pc, #564]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 800197e:	789b      	ldrb	r3, [r3, #2]
 8001980:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001982:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001bbc <read_nonvolatile_variables+0x264>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001994:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001996:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 800199a:	4b86      	ldr	r3, [pc, #536]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80019a6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b0:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001bbc <read_nonvolatile_variables+0x264>
 80019b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 80019ba:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 80019c0:	795b      	ldrb	r3, [r3, #5]
 80019c2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80019c4:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 80019c6:	799b      	ldrb	r3, [r3, #6]
 80019c8:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80019ca:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001bbc <read_nonvolatile_variables+0x264>
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 80019de:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80019e2:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 80019e4:	79db      	ldrb	r3, [r3, #7]
 80019e6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 80019ea:	7a1b      	ldrb	r3, [r3, #8]
 80019ec:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80019ee:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001bbc <read_nonvolatile_variables+0x264>
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001a02:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a08:	7a5b      	ldrb	r3, [r3, #9]
 8001a0a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8001a0c:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a0e:	7a9b      	ldrb	r3, [r3, #10]
 8001a10:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001a12:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001bbc <read_nonvolatile_variables+0x264>
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001a26:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001a2a:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a2c:	7adb      	ldrb	r3, [r3, #11]
 8001a2e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001a30:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001a36:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001bbc <read_nonvolatile_variables+0x264>
 8001a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001a48:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001a4a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a50:	7b5b      	ldrb	r3, [r3, #13]
 8001a52:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8001a54:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a56:	7b9b      	ldrb	r3, [r3, #14]
 8001a58:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001a5a:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a5e:	7bdb      	ldrb	r3, [r3, #15]
 8001a60:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8001a62:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a66:	7c1b      	ldrb	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001a6a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001bbc <read_nonvolatile_variables+0x264>
 8001a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001a7e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a84:	7c5b      	ldrb	r3, [r3, #17]
 8001a86:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a8a:	7c9b      	ldrb	r3, [r3, #18]
 8001a8c:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001a8e:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a92:	7cdb      	ldrb	r3, [r3, #19]
 8001a94:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8001a96:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001a9a:	7d1b      	ldrb	r3, [r3, #20]
 8001a9c:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8001a9e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bbc <read_nonvolatile_variables+0x264>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001ab2:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001ab8:	7d5b      	ldrb	r3, [r3, #21]
 8001aba:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8001abc:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001abe:	7d9b      	ldrb	r3, [r3, #22]
 8001ac0:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001ac2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001acc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001ad6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001adc:	7ddb      	ldrb	r3, [r3, #23]
 8001ade:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001ae2:	7e1b      	ldrb	r3, [r3, #24]
 8001ae4:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001ae6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001afa:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b00:	7f5b      	ldrb	r3, [r3, #29]
 8001b02:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b06:	7f9b      	ldrb	r3, [r3, #30]
 8001b08:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001b0a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b14:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001b1e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b24:	7fdb      	ldrb	r3, [r3, #31]
 8001b26:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2e:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001b30:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <read_nonvolatile_variables+0x268>)
 8001b44:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	e02c      	b.n	8001ba8 <read_nonvolatile_variables+0x250>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3325      	adds	r3, #37	; 0x25
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3326      	adds	r3, #38	; 0x26
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001b66:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	3327      	adds	r3, #39	; 0x27
 8001b70:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001b76:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <read_nonvolatile_variables+0x25c>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001b84:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001b90:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <read_nonvolatile_variables+0x26c>)
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b13      	cmp	r3, #19
 8001bac:	d9cf      	bls.n	8001b4e <read_nonvolatile_variables+0x1f6>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	e036      	b.n	8001c22 <read_nonvolatile_variables+0x2ca>
 8001bb4:	20000c94 	.word	0x20000c94
 8001bb8:	20000d94 	.word	0x20000d94
 8001bbc:	42c80000 	.word	0x42c80000
 8001bc0:	20000454 	.word	0x20000454
 8001bc4:	20000200 	.word	0x20000200
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3375      	adds	r3, #117	; 0x75
 8001bce:	4a84      	ldr	r2, [pc, #528]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3376      	adds	r3, #118	; 0x76
 8001bda:	4a81      	ldr	r2, [pc, #516]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001be0:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3377      	adds	r3, #119	; 0x77
 8001bea:	497d      	ldr	r1, [pc, #500]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001bf0:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	331e      	adds	r3, #30
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4979      	ldr	r1, [pc, #484]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001bfe:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001c08:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001c0a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001c12:	4a74      	ldr	r2, [pc, #464]	; (8001de4 <read_nonvolatile_variables+0x48c>)
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	71bb      	strb	r3, [r7, #6]
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d9cf      	bls.n	8001bc8 <read_nonvolatile_variables+0x270>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c2a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <read_nonvolatile_variables+0x490>)
 8001c30:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 8001c32:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c34:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <read_nonvolatile_variables+0x490>)
 8001c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Autosequence timings
	autosequence.hotfire_complete_time_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001c3e:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c40:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001c44:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8001c46:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c4c:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_complete_time_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001c4e:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8001c50:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001c56:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8001c58:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c5c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001c60:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8001c62:	4313      	orrs	r3, r2
 8001c64:	461a      	mov	r2, r3
	autosequence.hotfire_complete_time_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001c68:	611a      	str	r2, [r3, #16]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c6c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001c70:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001c78:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001c84:	801a      	strh	r2, [r3, #0]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c88:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001c8c:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001c90:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001c94:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001ca0:	805a      	strh	r2, [r3, #2]

	autosequence.hotfire_fuel_mpv_opening_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8001ca2:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001ca4:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001caa:	711a      	strb	r2, [r3, #4]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001cb2:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cb6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001cba:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001cc6:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cca:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001cce:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cd2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8001cd6:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <read_nonvolatile_variables+0x494>)
 8001ce2:	811a      	strh	r2, [r3, #8]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001ce6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001cea:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001cf2:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001cf4:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001cf8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001cfc:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001cfe:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d02:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001d06:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8001d08:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d12:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001df0 <read_nonvolatile_variables+0x498>
 8001d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <read_nonvolatile_variables+0x49c>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	717b      	strb	r3, [r7, #5]
 8001d24:	e053      	b.n	8001dce <read_nonvolatile_variables+0x476>
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d26:	797b      	ldrb	r3, [r7, #5]
 8001d28:	335c      	adds	r3, #92	; 0x5c
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	335c      	adds	r3, #92	; 0x5c
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	021b      	lsls	r3, r3, #8
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d40:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d4a:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d4c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <read_nonvolatile_variables+0x4a0>)
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d5e:	797b      	ldrb	r3, [r7, #5]
 8001d60:	3348      	adds	r3, #72	; 0x48
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d6a:	797b      	ldrb	r3, [r7, #5]
 8001d6c:	3348      	adds	r3, #72	; 0x48
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	021b      	lsls	r3, r3, #8
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d78:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d82:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001d84:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <read_nonvolatile_variables+0x4a4>)
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8001d96:	797b      	ldrb	r3, [r7, #5]
 8001d98:	3370      	adds	r3, #112	; 0x70
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] << 8));
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	3370      	adds	r3, #112	; 0x70
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <read_nonvolatile_variables+0x488>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	021b      	lsls	r3, r3, #8
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8001db0:	ea41 0203 	orr.w	r2, r1, r3
 8001db4:	797b      	ldrb	r3, [r7, #5]
 8001db6:	ee07 2a90 	vmov	s15, r2
 8001dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <read_nonvolatile_variables+0x4a8>)
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	717b      	strb	r3, [r7, #5]
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	2b13      	cmp	r3, #19
 8001dd2:	d9a8      	bls.n	8001d26 <read_nonvolatile_variables+0x3ce>
	}

	// Successful read
	return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000c94 	.word	0x20000c94
 8001de4:	20000250 	.word	0x20000250
 8001de8:	20000454 	.word	0x20000454
 8001dec:	2000055c 	.word	0x2000055c
 8001df0:	461c4000 	.word	0x461c4000
 8001df4:	20000378 	.word	0x20000378
 8001df8:	20000258 	.word	0x20000258
 8001dfc:	200002a8 	.word	0x200002a8
 8001e00:	200002f8 	.word	0x200002f8

08001e04 <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 8001e0a:	4bcb      	ldr	r3, [pc, #812]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 8001e10:	4bca      	ldr	r3, [pc, #808]	; (800213c <save_nonvolatile_variables+0x338>)
 8001e12:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001e16:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4bc3      	ldr	r3, [pc, #780]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001e2c:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 8001e2e:	4bc3      	ldr	r3, [pc, #780]	; (800213c <save_nonvolatile_variables+0x338>)
 8001e30:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001e34:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e40:	ee17 3a90 	vmov	r3, s15
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4bba      	ldr	r3, [pc, #744]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001e4e:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8001e50:	4bba      	ldr	r3, [pc, #744]	; (800213c <save_nonvolatile_variables+0x338>)
 8001e52:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e56:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e62:	ee17 3a90 	vmov	r3, s15
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4bb3      	ldr	r3, [pc, #716]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001e6c:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 8001e6e:	4bb3      	ldr	r3, [pc, #716]	; (800213c <save_nonvolatile_variables+0x338>)
 8001e70:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e74:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e80:	ee17 3a90 	vmov	r3, s15
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4baa      	ldr	r3, [pc, #680]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001e8e:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8001e90:	4baa      	ldr	r3, [pc, #680]	; (800213c <save_nonvolatile_variables+0x338>)
 8001e92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e96:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 3a90 	vmov	r3, s15
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4ba3      	ldr	r3, [pc, #652]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001eac:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 8001eae:	4ba3      	ldr	r3, [pc, #652]	; (800213c <save_nonvolatile_variables+0x338>)
 8001eb0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001eb4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec0:	ee17 3a90 	vmov	r3, s15
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001ece:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8001ed0:	4b9a      	ldr	r3, [pc, #616]	; (800213c <save_nonvolatile_variables+0x338>)
 8001ed2:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8001ed6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee2:	ee17 3a90 	vmov	r3, s15
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b93      	ldr	r3, [pc, #588]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001eec:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 8001eee:	4b93      	ldr	r3, [pc, #588]	; (800213c <save_nonvolatile_variables+0x338>)
 8001ef0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8001ef4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f00:	ee17 3a90 	vmov	r3, s15
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001f0e:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 8001f10:	4b8a      	ldr	r3, [pc, #552]	; (800213c <save_nonvolatile_variables+0x338>)
 8001f12:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8001f16:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f22:	ee17 3a90 	vmov	r3, s15
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b83      	ldr	r3, [pc, #524]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001f2c:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 8001f2e:	4b83      	ldr	r3, [pc, #524]	; (800213c <save_nonvolatile_variables+0x338>)
 8001f30:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8001f34:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f40:	ee17 3a90 	vmov	r3, s15
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001f4e:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8001f50:	4b7a      	ldr	r3, [pc, #488]	; (800213c <save_nonvolatile_variables+0x338>)
 8001f52:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001f56:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 3a90 	vmov	r3, s15
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001f6c:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 8001f6e:	4b73      	ldr	r3, [pc, #460]	; (800213c <save_nonvolatile_variables+0x338>)
 8001f70:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001f74:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f80:	ee17 3a90 	vmov	r3, s15
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001f8e:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <save_nonvolatile_variables+0x338>)
 8001f92:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001f96:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fa6:	793a      	ldrb	r2, [r7, #4]
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001faa:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <save_nonvolatile_variables+0x338>)
 8001fae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001fb2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbe:	ee17 3a90 	vmov	r3, s15
 8001fc2:	121b      	asrs	r3, r3, #8
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001fc8:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 8001fca:	4b5c      	ldr	r3, [pc, #368]	; (800213c <save_nonvolatile_variables+0x338>)
 8001fcc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001fd0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	141b      	asrs	r3, r3, #16
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b54      	ldr	r3, [pc, #336]	; (8002138 <save_nonvolatile_variables+0x334>)
 8001fe6:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8001fe8:	4b54      	ldr	r3, [pc, #336]	; (800213c <save_nonvolatile_variables+0x338>)
 8001fea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001fee:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002140 <save_nonvolatile_variables+0x33c>
 8001ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ffa:	ee17 3a90 	vmov	r3, s15
 8001ffe:	161b      	asrs	r3, r3, #24
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <save_nonvolatile_variables+0x334>)
 8002004:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 8002006:	4b4d      	ldr	r3, [pc, #308]	; (800213c <save_nonvolatile_variables+0x338>)
 8002008:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800200c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002140 <save_nonvolatile_variables+0x33c>
 8002010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002018:	edc7 7a01 	vstr	s15, [r7, #4]
 800201c:	793a      	ldrb	r2, [r7, #4]
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <save_nonvolatile_variables+0x334>)
 8002020:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <save_nonvolatile_variables+0x338>)
 8002024:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002028:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002140 <save_nonvolatile_variables+0x33c>
 800202c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002034:	ee17 3a90 	vmov	r3, s15
 8002038:	121b      	asrs	r3, r3, #8
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <save_nonvolatile_variables+0x334>)
 800203e:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 8002040:	4b3e      	ldr	r3, [pc, #248]	; (800213c <save_nonvolatile_variables+0x338>)
 8002042:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002046:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002140 <save_nonvolatile_variables+0x33c>
 800204a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	141b      	asrs	r3, r3, #16
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <save_nonvolatile_variables+0x334>)
 800205c:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <save_nonvolatile_variables+0x338>)
 8002060:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002064:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002140 <save_nonvolatile_variables+0x33c>
 8002068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	161b      	asrs	r3, r3, #24
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <save_nonvolatile_variables+0x334>)
 800207a:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <save_nonvolatile_variables+0x338>)
 800207e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002082:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208e:	ee17 3a90 	vmov	r3, s15
 8002092:	b21b      	sxth	r3, r3
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <save_nonvolatile_variables+0x334>)
 8002098:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <save_nonvolatile_variables+0x338>)
 800209c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80020a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ac:	ee17 3a90 	vmov	r3, s15
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	121b      	asrs	r3, r3, #8
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <save_nonvolatile_variables+0x334>)
 80020ba:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <save_nonvolatile_variables+0x338>)
 80020be:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80020c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ce:	ee17 3a90 	vmov	r3, s15
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <save_nonvolatile_variables+0x334>)
 80020d8:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <save_nonvolatile_variables+0x338>)
 80020dc:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80020e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	121b      	asrs	r3, r3, #8
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <save_nonvolatile_variables+0x334>)
 80020fa:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <save_nonvolatile_variables+0x338>)
 80020fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002102:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	b21b      	sxth	r3, r3
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <save_nonvolatile_variables+0x334>)
 8002118:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <save_nonvolatile_variables+0x338>)
 800211c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002120:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
 8002130:	b21b      	sxth	r3, r3
 8002132:	121b      	asrs	r3, r3, #8
 8002134:	e006      	b.n	8002144 <save_nonvolatile_variables+0x340>
 8002136:	bf00      	nop
 8002138:	20000c94 	.word	0x20000c94
 800213c:	20000454 	.word	0x20000454
 8002140:	42c80000 	.word	0x42c80000
 8002144:	b21b      	sxth	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <save_nonvolatile_variables+0x448>)
 800214a:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <save_nonvolatile_variables+0x44c>)
 800214e:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8002152:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215e:	ee17 3a90 	vmov	r3, s15
 8002162:	b21b      	sxth	r3, r3
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <save_nonvolatile_variables+0x448>)
 8002168:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <save_nonvolatile_variables+0x44c>)
 800216c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8002170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	b21b      	sxth	r3, r3
 8002182:	121b      	asrs	r3, r3, #8
 8002184:	b21b      	sxth	r3, r3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <save_nonvolatile_variables+0x448>)
 800218a:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e055      	b.n	8002240 <save_nonvolatile_variables+0x43c>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <save_nonvolatile_variables+0x450>)
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	3325      	adds	r3, #37	; 0x25
 80021b6:	7939      	ldrb	r1, [r7, #4]
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <save_nonvolatile_variables+0x448>)
 80021ba:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <save_nonvolatile_variables+0x450>)
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d4:	ee17 3a90 	vmov	r3, s15
 80021d8:	121a      	asrs	r2, r3, #8
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	3326      	adds	r3, #38	; 0x26
 80021e0:	b2d1      	uxtb	r1, r2
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <save_nonvolatile_variables+0x448>)
 80021e4:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <save_nonvolatile_variables+0x450>)
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fe:	ee17 3a90 	vmov	r3, s15
 8002202:	141a      	asrs	r2, r3, #16
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	3327      	adds	r3, #39	; 0x27
 800220a:	b2d1      	uxtb	r1, r2
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <save_nonvolatile_variables+0x448>)
 800220e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <save_nonvolatile_variables+0x450>)
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002228:	ee17 3a90 	vmov	r3, s15
 800222c:	161a      	asrs	r2, r3, #24
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	330a      	adds	r3, #10
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	b2d1      	uxtb	r1, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <save_nonvolatile_variables+0x448>)
 8002238:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b13      	cmp	r3, #19
 8002244:	d9a6      	bls.n	8002194 <save_nonvolatile_variables+0x390>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	73bb      	strb	r3, [r7, #14]
 800224a:	e05b      	b.n	8002304 <save_nonvolatile_variables+0x500>
 800224c:	20000c94 	.word	0x20000c94
 8002250:	20000454 	.word	0x20000454
 8002254:	20000200 	.word	0x20000200
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	4a84      	ldr	r2, [pc, #528]	; (800246c <save_nonvolatile_variables+0x668>)
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002270:	edc7 7a01 	vstr	s15, [r7, #4]
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3375      	adds	r3, #117	; 0x75
 800227a:	7939      	ldrb	r1, [r7, #4]
 800227c:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <save_nonvolatile_variables+0x66c>)
 800227e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	4a7a      	ldr	r2, [pc, #488]	; (800246c <save_nonvolatile_variables+0x668>)
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002298:	ee17 3a90 	vmov	r3, s15
 800229c:	121a      	asrs	r2, r3, #8
 800229e:	7bbb      	ldrb	r3, [r7, #14]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3376      	adds	r3, #118	; 0x76
 80022a4:	b2d1      	uxtb	r1, r2
 80022a6:	4a72      	ldr	r2, [pc, #456]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80022a8:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	4a6f      	ldr	r2, [pc, #444]	; (800246c <save_nonvolatile_variables+0x668>)
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c2:	ee17 3a90 	vmov	r3, s15
 80022c6:	141a      	asrs	r2, r3, #16
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3377      	adds	r3, #119	; 0x77
 80022ce:	b2d1      	uxtb	r1, r2
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80022d2:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	4a65      	ldr	r2, [pc, #404]	; (800246c <save_nonvolatile_variables+0x668>)
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ec:	ee17 3a90 	vmov	r3, s15
 80022f0:	161a      	asrs	r2, r3, #24
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	331e      	adds	r3, #30
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	b2d1      	uxtb	r1, r2
 80022fa:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80022fc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	3301      	adds	r3, #1
 8002302:	73bb      	strb	r3, [r7, #14]
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d9a6      	bls.n	8002258 <save_nonvolatile_variables+0x454>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 800230a:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <save_nonvolatile_variables+0x670>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b57      	ldr	r3, [pc, #348]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002312:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <save_nonvolatile_variables+0x670>)
 8002318:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002320:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_complete_time_ms)) >> 0;
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <save_nonvolatile_variables+0x674>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <save_nonvolatile_variables+0x66c>)
 800232c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_complete_time_ms)) >> 8;
 8002330:	4b51      	ldr	r3, [pc, #324]	; (8002478 <save_nonvolatile_variables+0x674>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <save_nonvolatile_variables+0x66c>)
 800233a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_complete_time_ms)) >> 16;
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <save_nonvolatile_variables+0x674>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_complete_time_ms)) >> 24;
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <save_nonvolatile_variables+0x674>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	0e1b      	lsrs	r3, r3, #24
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002356:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <save_nonvolatile_variables+0x674>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002364:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 8002368:	4b43      	ldr	r3, [pc, #268]	; (8002478 <save_nonvolatile_variables+0x674>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <save_nonvolatile_variables+0x674>)
 800237c:	885b      	ldrh	r3, [r3, #2]
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002384:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <save_nonvolatile_variables+0x674>)
 800238a:	885b      	ldrh	r3, [r3, #2]
 800238c:	b29b      	uxth	r3, r3
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002396:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_opening_delay_ms;
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <save_nonvolatile_variables+0x674>)
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80023a2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <save_nonvolatile_variables+0x674>)
 80023a8:	88db      	ldrh	r3, [r3, #6]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80023b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <save_nonvolatile_variables+0x674>)
 80023b6:	88db      	ldrh	r3, [r3, #6]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80023c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 80023c6:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <save_nonvolatile_variables+0x674>)
 80023c8:	891b      	ldrh	r3, [r3, #8]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80023d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <save_nonvolatile_variables+0x674>)
 80023d6:	891b      	ldrh	r3, [r3, #8]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <save_nonvolatile_variables+0x66c>)
 80023e2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <save_nonvolatile_variables+0x678>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002480 <save_nonvolatile_variables+0x67c>
 80023f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80023fc:	793a      	ldrb	r2, [r7, #4]
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002400:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <save_nonvolatile_variables+0x678>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002480 <save_nonvolatile_variables+0x67c>
 800240e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002416:	ee17 3a90 	vmov	r3, s15
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002420:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <save_nonvolatile_variables+0x678>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002480 <save_nonvolatile_variables+0x67c>
 800242e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002436:	ee17 3a90 	vmov	r3, s15
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002440:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <save_nonvolatile_variables+0x678>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002480 <save_nonvolatile_variables+0x67c>
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	0e1b      	lsrs	r3, r3, #24
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <save_nonvolatile_variables+0x66c>)
 8002460:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	737b      	strb	r3, [r7, #13]
 8002468:	e08e      	b.n	8002588 <save_nonvolatile_variables+0x784>
 800246a:	bf00      	nop
 800246c:	20000250 	.word	0x20000250
 8002470:	20000c94 	.word	0x20000c94
 8002474:	20000454 	.word	0x20000454
 8002478:	2000055c 	.word	0x2000055c
 800247c:	20000378 	.word	0x20000378
 8002480:	461c4000 	.word	0x461c4000
		// Lower output voltage
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 0;
 8002484:	7b7b      	ldrb	r3, [r7, #13]
 8002486:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <save_nonvolatile_variables+0x7ac>)
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249c:	ee17 3a90 	vmov	r3, s15
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	7b7b      	ldrb	r3, [r7, #13]
 80024a4:	335c      	adds	r3, #92	; 0x5c
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	b2d1      	uxtb	r1, r2
 80024aa:	4a42      	ldr	r2, [pc, #264]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 80024ac:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 8;
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <save_nonvolatile_variables+0x7ac>)
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c6:	ee17 3a90 	vmov	r3, s15
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	7b7b      	ldrb	r3, [r7, #13]
 80024d2:	335c      	adds	r3, #92	; 0x5c
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2d1      	uxtb	r1, r2
 80024da:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 80024dc:	54d1      	strb	r1, [r2, r3]

		// Upper output voltage
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 0;
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <save_nonvolatile_variables+0x7b4>)
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f6:	ee17 3a90 	vmov	r3, s15
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	7b7b      	ldrb	r3, [r7, #13]
 80024fe:	3348      	adds	r3, #72	; 0x48
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	b2d1      	uxtb	r1, r2
 8002504:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 8002506:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 8;
 8002508:	7b7b      	ldrb	r3, [r7, #13]
 800250a:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <save_nonvolatile_variables+0x7b4>)
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	ee17 3a90 	vmov	r3, s15
 8002524:	b29b      	uxth	r3, r3
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29a      	uxth	r2, r3
 800252a:	7b7b      	ldrb	r3, [r7, #13]
 800252c:	3348      	adds	r3, #72	; 0x48
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	3301      	adds	r3, #1
 8002532:	b2d1      	uxtb	r1, r2
 8002534:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 8002536:	54d1      	strb	r1, [r2, r3]

		// Pressure range
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 0;
 8002538:	7b7b      	ldrb	r3, [r7, #13]
 800253a:	4a20      	ldr	r2, [pc, #128]	; (80025bc <save_nonvolatile_variables+0x7b8>)
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	b29a      	uxth	r2, r3
 800254e:	7b7b      	ldrb	r3, [r7, #13]
 8002550:	3370      	adds	r3, #112	; 0x70
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	b2d1      	uxtb	r1, r2
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 8002558:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 8;
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <save_nonvolatile_variables+0x7b8>)
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	b29b      	uxth	r3, r3
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b29a      	uxth	r2, r3
 8002574:	7b7b      	ldrb	r3, [r7, #13]
 8002576:	3370      	adds	r3, #112	; 0x70
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	3301      	adds	r3, #1
 800257c:	b2d1      	uxtb	r1, r2
 800257e:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 8002580:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	3301      	adds	r3, #1
 8002586:	737b      	strb	r3, [r7, #13]
 8002588:	7b7b      	ldrb	r3, [r7, #13]
 800258a:	2b13      	cmp	r3, #19
 800258c:	f67f af7a 	bls.w	8002484 <save_nonvolatile_variables+0x680>
	}

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <save_nonvolatile_variables+0x7bc>)
 8002592:	f004 fe67 	bl	8007264 <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8002596:	23fe      	movs	r3, #254	; 0xfe
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <save_nonvolatile_variables+0x7b0>)
 800259a:	2100      	movs	r1, #0
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <save_nonvolatile_variables+0x7bc>)
 800259e:	f004 fe26 	bl	80071ee <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 80025a2:	f7ff f9d9 	bl	8001958 <read_nonvolatile_variables>

	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000258 	.word	0x20000258
 80025b4:	20000c94 	.word	0x20000c94
 80025b8:	200002a8 	.word	0x200002a8
 80025bc:	200002f8 	.word	0x200002f8
 80025c0:	20000d94 	.word	0x20000d94

080025c4 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Tue Aug  3 04:34:56 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 80025cc:	4bc5      	ldr	r3, [pc, #788]	; (80028e4 <pack_telem_data+0x320>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 80025d4:	4bc4      	ldr	r3, [pc, #784]	; (80028e8 <pack_telem_data+0x324>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80028ec <pack_telem_data+0x328>
 80025de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e6:	ee17 3a90 	vmov	r3, s15
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 80025f4:	4bbc      	ldr	r3, [pc, #752]	; (80028e8 <pack_telem_data+0x324>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ed9f 7abc 	vldr	s14, [pc, #752]	; 80028ec <pack_telem_data+0x328>
 80025fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002606:	ee17 3a90 	vmov	r3, s15
 800260a:	b21b      	sxth	r3, r3
 800260c:	121b      	asrs	r3, r3, #8
 800260e:	b21a      	sxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3302      	adds	r3, #2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 8002618:	4bb5      	ldr	r3, [pc, #724]	; (80028f0 <pack_telem_data+0x32c>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80028ec <pack_telem_data+0x328>
 8002622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262a:	ee17 3a90 	vmov	r3, s15
 800262e:	b21a      	sxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3303      	adds	r3, #3
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 8002638:	4bad      	ldr	r3, [pc, #692]	; (80028f0 <pack_telem_data+0x32c>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80028ec <pack_telem_data+0x328>
 8002642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264a:	ee17 3a90 	vmov	r3, s15
 800264e:	b21b      	sxth	r3, r3
 8002650:	121b      	asrs	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 800265c:	4ba5      	ldr	r3, [pc, #660]	; (80028f4 <pack_telem_data+0x330>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3305      	adds	r3, #5
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 8002668:	4ba2      	ldr	r3, [pc, #648]	; (80028f4 <pack_telem_data+0x330>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0a1a      	lsrs	r2, r3, #8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3306      	adds	r3, #6
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 8002676:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <pack_telem_data+0x330>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0c1a      	lsrs	r2, r3, #16
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3307      	adds	r3, #7
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 8002684:	4b9b      	ldr	r3, [pc, #620]	; (80028f4 <pack_telem_data+0x330>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e1a      	lsrs	r2, r3, #24
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3308      	adds	r3, #8
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 8002692:	4b99      	ldr	r3, [pc, #612]	; (80028f8 <pack_telem_data+0x334>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80028ec <pack_telem_data+0x328>
 800269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a4:	ee17 3a90 	vmov	r3, s15
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3309      	adds	r3, #9
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 80026b2:	4b91      	ldr	r3, [pc, #580]	; (80028f8 <pack_telem_data+0x334>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80028ec <pack_telem_data+0x328>
 80026bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c4:	ee17 3a90 	vmov	r3, s15
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	121b      	asrs	r3, r3, #8
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	330a      	adds	r3, #10
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <pack_telem_data+0x338>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80028ec <pack_telem_data+0x328>
 80026e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e8:	ee17 3a90 	vmov	r3, s15
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	330b      	adds	r3, #11
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <pack_telem_data+0x338>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80028ec <pack_telem_data+0x328>
 8002700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 3a90 	vmov	r3, s15
 800270c:	b21b      	sxth	r3, r3
 800270e:	121b      	asrs	r3, r3, #8
 8002710:	b21a      	sxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	330c      	adds	r3, #12
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 800271a:	4b79      	ldr	r3, [pc, #484]	; (8002900 <pack_telem_data+0x33c>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80028ec <pack_telem_data+0x328>
 8002724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	330d      	adds	r3, #13
 800272c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002730:	edc7 7a00 	vstr	s15, [r7]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <pack_telem_data+0x340>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80028ec <pack_telem_data+0x328>
 8002744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	330e      	adds	r3, #14
 800274c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002750:	edc7 7a00 	vstr	s15, [r7]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 800275a:	4b6b      	ldr	r3, [pc, #428]	; (8002908 <pack_telem_data+0x344>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	330f      	adds	r3, #15
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 8002766:	4b68      	ldr	r3, [pc, #416]	; (8002908 <pack_telem_data+0x344>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0a1a      	lsrs	r2, r3, #8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3310      	adds	r3, #16
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <pack_telem_data+0x344>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0c1a      	lsrs	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3311      	adds	r3, #17
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 8002782:	4b61      	ldr	r3, [pc, #388]	; (8002908 <pack_telem_data+0x344>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e1a      	lsrs	r2, r3, #24
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3312      	adds	r3, #18
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <pack_telem_data+0x348>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800279a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027a2:	edc7 7a00 	vstr	s15, [r7]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3313      	adds	r3, #19
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 80027b0:	4b56      	ldr	r3, [pc, #344]	; (800290c <pack_telem_data+0x348>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c2:	ee17 3a90 	vmov	r3, s15
 80027c6:	121a      	asrs	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3314      	adds	r3, #20
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <pack_telem_data+0x348>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e2:	ee17 3a90 	vmov	r3, s15
 80027e6:	141a      	asrs	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3315      	adds	r3, #21
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <pack_telem_data+0x348>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 3a90 	vmov	r3, s15
 8002806:	161a      	asrs	r2, r3, #24
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3316      	adds	r3, #22
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <pack_telem_data+0x348>)
 8002812:	edd3 7a01 	vldr	s15, [r3, #4]
 8002816:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800281a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002822:	edc7 7a00 	vstr	s15, [r7]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3317      	adds	r3, #23
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <pack_telem_data+0x348>)
 8002832:	edd3 7a01 	vldr	s15, [r3, #4]
 8002836:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800283a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002842:	ee17 3a90 	vmov	r3, s15
 8002846:	121a      	asrs	r2, r3, #8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3318      	adds	r3, #24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <pack_telem_data+0x348>)
 8002852:	edd3 7a01 	vldr	s15, [r3, #4]
 8002856:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800285a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002862:	ee17 3a90 	vmov	r3, s15
 8002866:	141a      	asrs	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3319      	adds	r3, #25
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <pack_telem_data+0x348>)
 8002872:	edd3 7a01 	vldr	s15, [r3, #4]
 8002876:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800287a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002882:	ee17 3a90 	vmov	r3, s15
 8002886:	161a      	asrs	r2, r3, #24
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	331a      	adds	r3, #26
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <pack_telem_data+0x348>)
 8002892:	edd3 7a02 	vldr	s15, [r3, #8]
 8002896:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a2:	edc7 7a00 	vstr	s15, [r7]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	331b      	adds	r3, #27
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <pack_telem_data+0x348>)
 80028b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c2:	ee17 3a90 	vmov	r3, s15
 80028c6:	121a      	asrs	r2, r3, #8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	331c      	adds	r3, #28
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <pack_telem_data+0x348>)
 80028d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e2:	e015      	b.n	8002910 <pack_telem_data+0x34c>
 80028e4:	20000348 	.word	0x20000348
 80028e8:	2000034c 	.word	0x2000034c
 80028ec:	42c80000 	.word	0x42c80000
 80028f0:	20000350 	.word	0x20000350
 80028f4:	20000354 	.word	0x20000354
 80028f8:	20000358 	.word	0x20000358
 80028fc:	2000035c 	.word	0x2000035c
 8002900:	20000360 	.word	0x20000360
 8002904:	20000364 	.word	0x20000364
 8002908:	20000368 	.word	0x20000368
 800290c:	2000038c 	.word	0x2000038c
 8002910:	ee17 3a90 	vmov	r3, s15
 8002914:	141a      	asrs	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	331d      	adds	r3, #29
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = TELEM_ITEM_30;
 800291e:	4bd3      	ldr	r3, [pc, #844]	; (8002c6c <pack_telem_data+0x6a8>)
 8002920:	edd3 7a02 	vldr	s15, [r3, #8]
 8002924:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002930:	ee17 3a90 	vmov	r3, s15
 8002934:	161a      	asrs	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	331e      	adds	r3, #30
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 800293e:	4bcb      	ldr	r3, [pc, #812]	; (8002c6c <pack_telem_data+0x6a8>)
 8002940:	edd3 7a03 	vldr	s15, [r3, #12]
 8002944:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800294c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002950:	edc7 7a00 	vstr	s15, [r7]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	331f      	adds	r3, #31
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 800295e:	4bc3      	ldr	r3, [pc, #780]	; (8002c6c <pack_telem_data+0x6a8>)
 8002960:	edd3 7a03 	vldr	s15, [r3, #12]
 8002964:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002970:	ee17 3a90 	vmov	r3, s15
 8002974:	121a      	asrs	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3320      	adds	r3, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 800297e:	4bbb      	ldr	r3, [pc, #748]	; (8002c6c <pack_telem_data+0x6a8>)
 8002980:	edd3 7a03 	vldr	s15, [r3, #12]
 8002984:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002990:	ee17 3a90 	vmov	r3, s15
 8002994:	141a      	asrs	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3321      	adds	r3, #33	; 0x21
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 800299e:	4bb3      	ldr	r3, [pc, #716]	; (8002c6c <pack_telem_data+0x6a8>)
 80029a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b0:	ee17 3a90 	vmov	r3, s15
 80029b4:	161a      	asrs	r2, r3, #24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3322      	adds	r3, #34	; 0x22
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 80029be:	4bab      	ldr	r3, [pc, #684]	; (8002c6c <pack_telem_data+0x6a8>)
 80029c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80029c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d0:	edc7 7a00 	vstr	s15, [r7]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3323      	adds	r3, #35	; 0x23
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 80029de:	4ba3      	ldr	r3, [pc, #652]	; (8002c6c <pack_telem_data+0x6a8>)
 80029e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80029e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f0:	ee17 3a90 	vmov	r3, s15
 80029f4:	121a      	asrs	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3324      	adds	r3, #36	; 0x24
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 80029fe:	4b9b      	ldr	r3, [pc, #620]	; (8002c6c <pack_telem_data+0x6a8>)
 8002a00:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a10:	ee17 3a90 	vmov	r3, s15
 8002a14:	141a      	asrs	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3325      	adds	r3, #37	; 0x25
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8002a1e:	4b93      	ldr	r3, [pc, #588]	; (8002c6c <pack_telem_data+0x6a8>)
 8002a20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	161a      	asrs	r2, r3, #24
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3326      	adds	r3, #38	; 0x26
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	; (8002c6c <pack_telem_data+0x6a8>)
 8002a40:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a50:	edc7 7a00 	vstr	s15, [r7]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3327      	adds	r3, #39	; 0x27
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8002a5e:	4b83      	ldr	r3, [pc, #524]	; (8002c6c <pack_telem_data+0x6a8>)
 8002a60:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a70:	ee17 3a90 	vmov	r3, s15
 8002a74:	121a      	asrs	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3328      	adds	r3, #40	; 0x28
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8002a7e:	4b7b      	ldr	r3, [pc, #492]	; (8002c6c <pack_telem_data+0x6a8>)
 8002a80:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a90:	ee17 3a90 	vmov	r3, s15
 8002a94:	141a      	asrs	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3329      	adds	r3, #41	; 0x29
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <pack_telem_data+0x6a8>)
 8002aa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aa4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab0:	ee17 3a90 	vmov	r3, s15
 8002ab4:	161a      	asrs	r2, r3, #24
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	332a      	adds	r3, #42	; 0x2a
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <pack_telem_data+0x6a8>)
 8002ac0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad0:	edc7 7a00 	vstr	s15, [r7]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	332b      	adds	r3, #43	; 0x2b
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <pack_telem_data+0x6a8>)
 8002ae0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ae4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af0:	ee17 3a90 	vmov	r3, s15
 8002af4:	121a      	asrs	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	332c      	adds	r3, #44	; 0x2c
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <pack_telem_data+0x6a8>)
 8002b00:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b10:	ee17 3a90 	vmov	r3, s15
 8002b14:	141a      	asrs	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	332d      	adds	r3, #45	; 0x2d
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <pack_telem_data+0x6a8>)
 8002b20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b30:	ee17 3a90 	vmov	r3, s15
 8002b34:	161a      	asrs	r2, r3, #24
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	332e      	adds	r3, #46	; 0x2e
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <pack_telem_data+0x6a8>)
 8002b40:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	edc7 7a00 	vstr	s15, [r7]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	332f      	adds	r3, #47	; 0x2f
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <pack_telem_data+0x6a8>)
 8002b60:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b70:	ee17 3a90 	vmov	r3, s15
 8002b74:	121a      	asrs	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3330      	adds	r3, #48	; 0x30
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <pack_telem_data+0x6a8>)
 8002b80:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b90:	ee17 3a90 	vmov	r3, s15
 8002b94:	141a      	asrs	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3331      	adds	r3, #49	; 0x31
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <pack_telem_data+0x6a8>)
 8002ba0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ba4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb0:	ee17 3a90 	vmov	r3, s15
 8002bb4:	161a      	asrs	r2, r3, #24
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3332      	adds	r3, #50	; 0x32
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <pack_telem_data+0x6a8>)
 8002bc0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd0:	edc7 7a00 	vstr	s15, [r7]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3333      	adds	r3, #51	; 0x33
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <pack_telem_data+0x6a8>)
 8002be0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002be4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf0:	ee17 3a90 	vmov	r3, s15
 8002bf4:	121a      	asrs	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3334      	adds	r3, #52	; 0x34
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <pack_telem_data+0x6a8>)
 8002c00:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c10:	ee17 3a90 	vmov	r3, s15
 8002c14:	141a      	asrs	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3335      	adds	r3, #53	; 0x35
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <pack_telem_data+0x6a8>)
 8002c20:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c30:	ee17 3a90 	vmov	r3, s15
 8002c34:	161a      	asrs	r2, r3, #24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3336      	adds	r3, #54	; 0x36
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <pack_telem_data+0x6a8>)
 8002c40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	edc7 7a00 	vstr	s15, [r7]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3337      	adds	r3, #55	; 0x37
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8002c5e:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <pack_telem_data+0x6a8>)
 8002c60:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c68:	e002      	b.n	8002c70 <pack_telem_data+0x6ac>
 8002c6a:	bf00      	nop
 8002c6c:	2000038c 	.word	0x2000038c
 8002c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c78:	ee17 3a90 	vmov	r3, s15
 8002c7c:	121a      	asrs	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8002c86:	4bd4      	ldr	r3, [pc, #848]	; (8002fd8 <pack_telem_data+0xa14>)
 8002c88:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c98:	ee17 3a90 	vmov	r3, s15
 8002c9c:	141a      	asrs	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3339      	adds	r3, #57	; 0x39
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8002ca6:	4bcc      	ldr	r3, [pc, #816]	; (8002fd8 <pack_telem_data+0xa14>)
 8002ca8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb8:	ee17 3a90 	vmov	r3, s15
 8002cbc:	161a      	asrs	r2, r3, #24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	333a      	adds	r3, #58	; 0x3a
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8002cc6:	4bc4      	ldr	r3, [pc, #784]	; (8002fd8 <pack_telem_data+0xa14>)
 8002cc8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ccc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd8:	edc7 7a00 	vstr	s15, [r7]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	333b      	adds	r3, #59	; 0x3b
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8002ce6:	4bbc      	ldr	r3, [pc, #752]	; (8002fd8 <pack_telem_data+0xa14>)
 8002ce8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf8:	ee17 3a90 	vmov	r3, s15
 8002cfc:	121a      	asrs	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	333c      	adds	r3, #60	; 0x3c
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8002d06:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <pack_telem_data+0xa14>)
 8002d08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	141a      	asrs	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	333d      	adds	r3, #61	; 0x3d
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8002d26:	4bac      	ldr	r3, [pc, #688]	; (8002fd8 <pack_telem_data+0xa14>)
 8002d28:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	161a      	asrs	r2, r3, #24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	333e      	adds	r3, #62	; 0x3e
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8002d46:	4ba4      	ldr	r3, [pc, #656]	; (8002fd8 <pack_telem_data+0xa14>)
 8002d48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	edc7 7a00 	vstr	s15, [r7]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	333f      	adds	r3, #63	; 0x3f
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8002d66:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <pack_telem_data+0xa14>)
 8002d68:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d78:	ee17 3a90 	vmov	r3, s15
 8002d7c:	121a      	asrs	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8002d86:	4b94      	ldr	r3, [pc, #592]	; (8002fd8 <pack_telem_data+0xa14>)
 8002d88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	141a      	asrs	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3341      	adds	r3, #65	; 0x41
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8002da6:	4b8c      	ldr	r3, [pc, #560]	; (8002fd8 <pack_telem_data+0xa14>)
 8002da8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002dac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	161a      	asrs	r2, r3, #24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3342      	adds	r3, #66	; 0x42
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <pack_telem_data+0xa14>)
 8002dc8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002dcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd8:	edc7 7a00 	vstr	s15, [r7]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3343      	adds	r3, #67	; 0x43
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8002de6:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <pack_telem_data+0xa14>)
 8002de8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002dec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df8:	ee17 3a90 	vmov	r3, s15
 8002dfc:	121a      	asrs	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3344      	adds	r3, #68	; 0x44
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <pack_telem_data+0xa14>)
 8002e08:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002e0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e18:	ee17 3a90 	vmov	r3, s15
 8002e1c:	141a      	asrs	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3345      	adds	r3, #69	; 0x45
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <pack_telem_data+0xa14>)
 8002e28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002e2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e38:	ee17 3a90 	vmov	r3, s15
 8002e3c:	161a      	asrs	r2, r3, #24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3346      	adds	r3, #70	; 0x46
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 8002e46:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <pack_telem_data+0xa14>)
 8002e48:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002e4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e58:	edc7 7a00 	vstr	s15, [r7]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3347      	adds	r3, #71	; 0x47
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 8002e66:	4b5c      	ldr	r3, [pc, #368]	; (8002fd8 <pack_telem_data+0xa14>)
 8002e68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002e6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e78:	ee17 3a90 	vmov	r3, s15
 8002e7c:	121a      	asrs	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3348      	adds	r3, #72	; 0x48
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 8002e86:	4b54      	ldr	r3, [pc, #336]	; (8002fd8 <pack_telem_data+0xa14>)
 8002e88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002e8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e98:	ee17 3a90 	vmov	r3, s15
 8002e9c:	141a      	asrs	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3349      	adds	r3, #73	; 0x49
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <pack_telem_data+0xa14>)
 8002ea8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002eac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb8:	ee17 3a90 	vmov	r3, s15
 8002ebc:	161a      	asrs	r2, r3, #24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	334a      	adds	r3, #74	; 0x4a
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <pack_telem_data+0xa14>)
 8002ec8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002ecc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	edc7 7a00 	vstr	s15, [r7]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	334b      	adds	r3, #75	; 0x4b
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <pack_telem_data+0xa14>)
 8002ee8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002eec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef8:	ee17 3a90 	vmov	r3, s15
 8002efc:	121a      	asrs	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	334c      	adds	r3, #76	; 0x4c
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <pack_telem_data+0xa14>)
 8002f08:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002f0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 3a90 	vmov	r3, s15
 8002f1c:	141a      	asrs	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	334d      	adds	r3, #77	; 0x4d
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <pack_telem_data+0xa14>)
 8002f28:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002f2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f38:	ee17 3a90 	vmov	r3, s15
 8002f3c:	161a      	asrs	r2, r3, #24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	334e      	adds	r3, #78	; 0x4e
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <pack_telem_data+0xa14>)
 8002f48:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002f4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f58:	edc7 7a00 	vstr	s15, [r7]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	334f      	adds	r3, #79	; 0x4f
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <pack_telem_data+0xa14>)
 8002f68:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002f6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f78:	ee17 3a90 	vmov	r3, s15
 8002f7c:	121a      	asrs	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3350      	adds	r3, #80	; 0x50
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <pack_telem_data+0xa14>)
 8002f88:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002f8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f98:	ee17 3a90 	vmov	r3, s15
 8002f9c:	141a      	asrs	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3351      	adds	r3, #81	; 0x51
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <pack_telem_data+0xa14>)
 8002fa8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002fac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb8:	ee17 3a90 	vmov	r3, s15
 8002fbc:	161a      	asrs	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3352      	adds	r3, #82	; 0x52
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <pack_telem_data+0xa14>)
 8002fc8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002fcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd4:	e002      	b.n	8002fdc <pack_telem_data+0xa18>
 8002fd6:	bf00      	nop
 8002fd8:	2000038c 	.word	0x2000038c
 8002fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe0:	edc7 7a00 	vstr	s15, [r7]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3353      	adds	r3, #83	; 0x53
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 8002fee:	4bd0      	ldr	r3, [pc, #832]	; (8003330 <pack_telem_data+0xd6c>)
 8002ff0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002ff4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003000:	ee17 3a90 	vmov	r3, s15
 8003004:	121a      	asrs	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3354      	adds	r3, #84	; 0x54
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 800300e:	4bc8      	ldr	r3, [pc, #800]	; (8003330 <pack_telem_data+0xd6c>)
 8003010:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003014:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003020:	ee17 3a90 	vmov	r3, s15
 8003024:	141a      	asrs	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3355      	adds	r3, #85	; 0x55
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 800302e:	4bc0      	ldr	r3, [pc, #768]	; (8003330 <pack_telem_data+0xd6c>)
 8003030:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003034:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003040:	ee17 3a90 	vmov	r3, s15
 8003044:	161a      	asrs	r2, r3, #24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3356      	adds	r3, #86	; 0x56
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 800304e:	4bb8      	ldr	r3, [pc, #736]	; (8003330 <pack_telem_data+0xd6c>)
 8003050:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003054:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003060:	edc7 7a00 	vstr	s15, [r7]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3357      	adds	r3, #87	; 0x57
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 800306e:	4bb0      	ldr	r3, [pc, #704]	; (8003330 <pack_telem_data+0xd6c>)
 8003070:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003074:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800307c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	121a      	asrs	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3358      	adds	r3, #88	; 0x58
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 800308e:	4ba8      	ldr	r3, [pc, #672]	; (8003330 <pack_telem_data+0xd6c>)
 8003090:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003094:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a0:	ee17 3a90 	vmov	r3, s15
 80030a4:	141a      	asrs	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3359      	adds	r3, #89	; 0x59
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 80030ae:	4ba0      	ldr	r3, [pc, #640]	; (8003330 <pack_telem_data+0xd6c>)
 80030b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80030b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c0:	ee17 3a90 	vmov	r3, s15
 80030c4:	161a      	asrs	r2, r3, #24
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	335a      	adds	r3, #90	; 0x5a
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 80030ce:	4b98      	ldr	r3, [pc, #608]	; (8003330 <pack_telem_data+0xd6c>)
 80030d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80030d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e0:	edc7 7a00 	vstr	s15, [r7]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	335b      	adds	r3, #91	; 0x5b
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 80030ee:	4b90      	ldr	r3, [pc, #576]	; (8003330 <pack_telem_data+0xd6c>)
 80030f0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80030f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003100:	ee17 3a90 	vmov	r3, s15
 8003104:	121a      	asrs	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	335c      	adds	r3, #92	; 0x5c
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <pack_telem_data+0xd6c>)
 8003110:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003114:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003120:	ee17 3a90 	vmov	r3, s15
 8003124:	141a      	asrs	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	335d      	adds	r3, #93	; 0x5d
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 800312e:	4b80      	ldr	r3, [pc, #512]	; (8003330 <pack_telem_data+0xd6c>)
 8003130:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003134:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800313c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003140:	ee17 3a90 	vmov	r3, s15
 8003144:	161a      	asrs	r2, r3, #24
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	335e      	adds	r3, #94	; 0x5e
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 800314e:	4b78      	ldr	r3, [pc, #480]	; (8003330 <pack_telem_data+0xd6c>)
 8003150:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003154:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003160:	edc7 7a00 	vstr	s15, [r7]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	335f      	adds	r3, #95	; 0x5f
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <pack_telem_data+0xd6c>)
 8003170:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003174:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003180:	ee17 3a90 	vmov	r3, s15
 8003184:	121a      	asrs	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 800318e:	4b68      	ldr	r3, [pc, #416]	; (8003330 <pack_telem_data+0xd6c>)
 8003190:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003194:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a0:	ee17 3a90 	vmov	r3, s15
 80031a4:	141a      	asrs	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3361      	adds	r3, #97	; 0x61
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 80031ae:	4b60      	ldr	r3, [pc, #384]	; (8003330 <pack_telem_data+0xd6c>)
 80031b0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80031b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c0:	ee17 3a90 	vmov	r3, s15
 80031c4:	161a      	asrs	r2, r3, #24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3362      	adds	r3, #98	; 0x62
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <pack_telem_data+0xd70>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3363      	adds	r3, #99	; 0x63
 80031e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e4:	edc7 7a00 	vstr	s15, [r7]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <pack_telem_data+0xd70>)
 80031f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3364      	adds	r3, #100	; 0x64
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	edc7 7a00 	vstr	s15, [r7]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 800320e:	4b49      	ldr	r3, [pc, #292]	; (8003334 <pack_telem_data+0xd70>)
 8003210:	edd3 7a02 	vldr	s15, [r3, #8]
 8003214:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3365      	adds	r3, #101	; 0x65
 8003220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003224:	edc7 7a00 	vstr	s15, [r7]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <pack_telem_data+0xd70>)
 8003230:	edd3 7a03 	vldr	s15, [r3, #12]
 8003234:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3366      	adds	r3, #102	; 0x66
 8003240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003244:	edc7 7a00 	vstr	s15, [r7]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <pack_telem_data+0xd70>)
 8003250:	edd3 7a04 	vldr	s15, [r3, #16]
 8003254:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3367      	adds	r3, #103	; 0x67
 8003260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003264:	edc7 7a00 	vstr	s15, [r7]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <pack_telem_data+0xd70>)
 8003270:	edd3 7a05 	vldr	s15, [r3, #20]
 8003274:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3368      	adds	r3, #104	; 0x68
 8003280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003284:	edc7 7a00 	vstr	s15, [r7]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <pack_telem_data+0xd70>)
 8003290:	edd3 7a06 	vldr	s15, [r3, #24]
 8003294:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3369      	adds	r3, #105	; 0x69
 80032a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a4:	edc7 7a00 	vstr	s15, [r7]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <pack_telem_data+0xd70>)
 80032b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80032b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	336a      	adds	r3, #106	; 0x6a
 80032c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c4:	edc7 7a00 	vstr	s15, [r7]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <pack_telem_data+0xd70>)
 80032d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80032d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	336b      	adds	r3, #107	; 0x6b
 80032e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e4:	edc7 7a00 	vstr	s15, [r7]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <pack_telem_data+0xd70>)
 80032f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	336c      	adds	r3, #108	; 0x6c
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	edc7 7a00 	vstr	s15, [r7]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <pack_telem_data+0xd70>)
 8003310:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003314:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	336d      	adds	r3, #109	; 0x6d
 8003320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003324:	edc7 7a00 	vstr	s15, [r7]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e003      	b.n	8003338 <pack_telem_data+0xd74>
 8003330:	2000038c 	.word	0x2000038c
 8003334:	200003dc 	.word	0x200003dc
	*(dst + 110) = TELEM_ITEM_110;
 8003338:	4bc9      	ldr	r3, [pc, #804]	; (8003660 <pack_telem_data+0x109c>)
 800333a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800333e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	336e      	adds	r3, #110	; 0x6e
 800334a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334e:	edc7 7a00 	vstr	s15, [r7]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 8003358:	4bc1      	ldr	r3, [pc, #772]	; (8003660 <pack_telem_data+0x109c>)
 800335a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800335e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	336f      	adds	r3, #111	; 0x6f
 800336a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800336e:	edc7 7a00 	vstr	s15, [r7]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 8003378:	4bb9      	ldr	r3, [pc, #740]	; (8003660 <pack_telem_data+0x109c>)
 800337a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800337e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3370      	adds	r3, #112	; 0x70
 800338a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338e:	edc7 7a00 	vstr	s15, [r7]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 8003398:	4bb2      	ldr	r3, [pc, #712]	; (8003664 <pack_telem_data+0x10a0>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003668 <pack_telem_data+0x10a4>
 80033a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033aa:	ee17 3a90 	vmov	r3, s15
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3371      	adds	r3, #113	; 0x71
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 80033b8:	4baa      	ldr	r3, [pc, #680]	; (8003664 <pack_telem_data+0x10a0>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003668 <pack_telem_data+0x10a4>
 80033c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	ee17 3a90 	vmov	r3, s15
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3372      	adds	r3, #114	; 0x72
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 80033dc:	4ba1      	ldr	r3, [pc, #644]	; (8003664 <pack_telem_data+0x10a0>)
 80033de:	edd3 7a01 	vldr	s15, [r3, #4]
 80033e2:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003668 <pack_telem_data+0x10a4>
 80033e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ee:	ee17 3a90 	vmov	r3, s15
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3373      	adds	r3, #115	; 0x73
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 80033fc:	4b99      	ldr	r3, [pc, #612]	; (8003664 <pack_telem_data+0x10a0>)
 80033fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003402:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003668 <pack_telem_data+0x10a4>
 8003406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800340e:	ee17 3a90 	vmov	r3, s15
 8003412:	b29b      	uxth	r3, r3
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3374      	adds	r3, #116	; 0x74
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 8003420:	4b90      	ldr	r3, [pc, #576]	; (8003664 <pack_telem_data+0x10a0>)
 8003422:	edd3 7a02 	vldr	s15, [r3, #8]
 8003426:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003668 <pack_telem_data+0x10a4>
 800342a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003432:	ee17 3a90 	vmov	r3, s15
 8003436:	b29a      	uxth	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3375      	adds	r3, #117	; 0x75
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 8003440:	4b88      	ldr	r3, [pc, #544]	; (8003664 <pack_telem_data+0x10a0>)
 8003442:	edd3 7a02 	vldr	s15, [r3, #8]
 8003446:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003668 <pack_telem_data+0x10a4>
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003452:	ee17 3a90 	vmov	r3, s15
 8003456:	b29b      	uxth	r3, r3
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3376      	adds	r3, #118	; 0x76
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 8003464:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <pack_telem_data+0x10a0>)
 8003466:	edd3 7a03 	vldr	s15, [r3, #12]
 800346a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003668 <pack_telem_data+0x10a4>
 800346e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003476:	ee17 3a90 	vmov	r3, s15
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3377      	adds	r3, #119	; 0x77
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 8003484:	4b77      	ldr	r3, [pc, #476]	; (8003664 <pack_telem_data+0x10a0>)
 8003486:	edd3 7a03 	vldr	s15, [r3, #12]
 800348a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003668 <pack_telem_data+0x10a4>
 800348e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003496:	ee17 3a90 	vmov	r3, s15
 800349a:	b29b      	uxth	r3, r3
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3378      	adds	r3, #120	; 0x78
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 80034a8:	4b6e      	ldr	r3, [pc, #440]	; (8003664 <pack_telem_data+0x10a0>)
 80034aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80034ae:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003668 <pack_telem_data+0x10a4>
 80034b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ba:	ee17 3a90 	vmov	r3, s15
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3379      	adds	r3, #121	; 0x79
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <pack_telem_data+0x10a0>)
 80034ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80034ce:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003668 <pack_telem_data+0x10a4>
 80034d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034da:	ee17 3a90 	vmov	r3, s15
 80034de:	b29b      	uxth	r3, r3
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	337a      	adds	r3, #122	; 0x7a
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 80034ec:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <pack_telem_data+0x10a0>)
 80034ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80034f2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003668 <pack_telem_data+0x10a4>
 80034f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fe:	ee17 3a90 	vmov	r3, s15
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	337b      	adds	r3, #123	; 0x7b
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 800350c:	4b55      	ldr	r3, [pc, #340]	; (8003664 <pack_telem_data+0x10a0>)
 800350e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003512:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003668 <pack_telem_data+0x10a4>
 8003516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351e:	ee17 3a90 	vmov	r3, s15
 8003522:	b29b      	uxth	r3, r3
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	337c      	adds	r3, #124	; 0x7c
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 8003530:	4b4c      	ldr	r3, [pc, #304]	; (8003664 <pack_telem_data+0x10a0>)
 8003532:	edd3 7a06 	vldr	s15, [r3, #24]
 8003536:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003668 <pack_telem_data+0x10a4>
 800353a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	337d      	adds	r3, #125	; 0x7d
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 8003550:	4b44      	ldr	r3, [pc, #272]	; (8003664 <pack_telem_data+0x10a0>)
 8003552:	edd3 7a06 	vldr	s15, [r3, #24]
 8003556:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003668 <pack_telem_data+0x10a4>
 800355a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	b29b      	uxth	r3, r3
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	337e      	adds	r3, #126	; 0x7e
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <pack_telem_data+0x10a0>)
 8003576:	edd3 7a07 	vldr	s15, [r3, #28]
 800357a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003668 <pack_telem_data+0x10a4>
 800357e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003586:	ee17 3a90 	vmov	r3, s15
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	337f      	adds	r3, #127	; 0x7f
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <pack_telem_data+0x10a0>)
 8003596:	edd3 7a07 	vldr	s15, [r3, #28]
 800359a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003668 <pack_telem_data+0x10a4>
 800359e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a6:	ee17 3a90 	vmov	r3, s15
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3380      	adds	r3, #128	; 0x80
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 80035b8:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <pack_telem_data+0x10a0>)
 80035ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80035be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003668 <pack_telem_data+0x10a4>
 80035c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	ee17 3a90 	vmov	r3, s15
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3381      	adds	r3, #129	; 0x81
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <pack_telem_data+0x10a0>)
 80035da:	edd3 7a08 	vldr	s15, [r3, #32]
 80035de:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003668 <pack_telem_data+0x10a4>
 80035e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ea:	ee17 3a90 	vmov	r3, s15
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3382      	adds	r3, #130	; 0x82
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <pack_telem_data+0x10a0>)
 80035fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003602:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003668 <pack_telem_data+0x10a4>
 8003606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360e:	ee17 3a90 	vmov	r3, s15
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3383      	adds	r3, #131	; 0x83
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <pack_telem_data+0x10a0>)
 800361e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003622:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003668 <pack_telem_data+0x10a4>
 8003626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800362a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362e:	ee17 3a90 	vmov	r3, s15
 8003632:	b29b      	uxth	r3, r3
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3384      	adds	r3, #132	; 0x84
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <pack_telem_data+0x10a0>)
 8003642:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003646:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003668 <pack_telem_data+0x10a4>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3385      	adds	r3, #133	; 0x85
 800365c:	e006      	b.n	800366c <pack_telem_data+0x10a8>
 800365e:	bf00      	nop
 8003660:	200003dc 	.word	0x200003dc
 8003664:	20000414 	.word	0x20000414
 8003668:	42c80000 	.word	0x42c80000
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 8003670:	4bc7      	ldr	r3, [pc, #796]	; (8003990 <pack_telem_data+0x13cc>)
 8003672:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003676:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8003994 <pack_telem_data+0x13d0>
 800367a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003682:	ee17 3a90 	vmov	r3, s15
 8003686:	b29b      	uxth	r3, r3
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3386      	adds	r3, #134	; 0x86
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 8003694:	4bbe      	ldr	r3, [pc, #760]	; (8003990 <pack_telem_data+0x13cc>)
 8003696:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800369a:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8003994 <pack_telem_data+0x13d0>
 800369e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a6:	ee17 3a90 	vmov	r3, s15
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3387      	adds	r3, #135	; 0x87
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 80036b4:	4bb6      	ldr	r3, [pc, #728]	; (8003990 <pack_telem_data+0x13cc>)
 80036b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80036ba:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003994 <pack_telem_data+0x13d0>
 80036be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3388      	adds	r3, #136	; 0x88
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 80036d8:	4bad      	ldr	r3, [pc, #692]	; (8003990 <pack_telem_data+0x13cc>)
 80036da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80036de:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003994 <pack_telem_data+0x13d0>
 80036e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ea:	ee17 3a90 	vmov	r3, s15
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3389      	adds	r3, #137	; 0x89
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 80036f8:	4ba5      	ldr	r3, [pc, #660]	; (8003990 <pack_telem_data+0x13cc>)
 80036fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80036fe:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003994 <pack_telem_data+0x13d0>
 8003702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370a:	ee17 3a90 	vmov	r3, s15
 800370e:	b29b      	uxth	r3, r3
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	338a      	adds	r3, #138	; 0x8a
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 800371c:	4b9e      	ldr	r3, [pc, #632]	; (8003998 <pack_telem_data+0x13d4>)
 800371e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003722:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800372e:	ee17 3a90 	vmov	r3, s15
 8003732:	b21a      	sxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	338b      	adds	r3, #139	; 0x8b
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 800373c:	4b96      	ldr	r3, [pc, #600]	; (8003998 <pack_telem_data+0x13d4>)
 800373e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003742:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800374a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800374e:	ee17 3a90 	vmov	r3, s15
 8003752:	b21b      	sxth	r3, r3
 8003754:	121b      	asrs	r3, r3, #8
 8003756:	b21a      	sxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	338c      	adds	r3, #140	; 0x8c
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 8003760:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <pack_telem_data+0x13d4>)
 8003762:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003766:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800376a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003772:	ee17 3a90 	vmov	r3, s15
 8003776:	b21a      	sxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	338d      	adds	r3, #141	; 0x8d
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 8003780:	4b85      	ldr	r3, [pc, #532]	; (8003998 <pack_telem_data+0x13d4>)
 8003782:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003786:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800378a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003792:	ee17 3a90 	vmov	r3, s15
 8003796:	b21b      	sxth	r3, r3
 8003798:	121b      	asrs	r3, r3, #8
 800379a:	b21a      	sxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	338e      	adds	r3, #142	; 0x8e
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 80037a4:	4b7c      	ldr	r3, [pc, #496]	; (8003998 <pack_telem_data+0x13d4>)
 80037a6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80037aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ae:	ee17 3a90 	vmov	r3, s15
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	338f      	adds	r3, #143	; 0x8f
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 80037bc:	4b76      	ldr	r3, [pc, #472]	; (8003998 <pack_telem_data+0x13d4>)
 80037be:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80037c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c6:	ee17 3a90 	vmov	r3, s15
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3390      	adds	r3, #144	; 0x90
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <pack_telem_data+0x13d4>)
 80037da:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80037de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037e2:	ee17 3a90 	vmov	r3, s15
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3391      	adds	r3, #145	; 0x91
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 80037f0:	4b69      	ldr	r3, [pc, #420]	; (8003998 <pack_telem_data+0x13d4>)
 80037f2:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80037f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fa:	ee17 3a90 	vmov	r3, s15
 80037fe:	b21b      	sxth	r3, r3
 8003800:	121b      	asrs	r3, r3, #8
 8003802:	b21a      	sxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3392      	adds	r3, #146	; 0x92
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 800380c:	4b62      	ldr	r3, [pc, #392]	; (8003998 <pack_telem_data+0x13d4>)
 800380e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003812:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800381a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381e:	ee17 3a90 	vmov	r3, s15
 8003822:	b21a      	sxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3393      	adds	r3, #147	; 0x93
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 800382c:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <pack_telem_data+0x13d4>)
 800382e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003832:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800383e:	ee17 3a90 	vmov	r3, s15
 8003842:	b21b      	sxth	r3, r3
 8003844:	121b      	asrs	r3, r3, #8
 8003846:	b21a      	sxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3394      	adds	r3, #148	; 0x94
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 8003850:	4b51      	ldr	r3, [pc, #324]	; (8003998 <pack_telem_data+0x13d4>)
 8003852:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003856:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800385a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003862:	ee17 3a90 	vmov	r3, s15
 8003866:	b21a      	sxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3395      	adds	r3, #149	; 0x95
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <pack_telem_data+0x13d4>)
 8003872:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003876:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800387a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800387e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003882:	ee17 3a90 	vmov	r3, s15
 8003886:	b21b      	sxth	r3, r3
 8003888:	121b      	asrs	r3, r3, #8
 800388a:	b21a      	sxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3396      	adds	r3, #150	; 0x96
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 8003894:	4b40      	ldr	r3, [pc, #256]	; (8003998 <pack_telem_data+0x13d4>)
 8003896:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800389a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003994 <pack_telem_data+0x13d0>
 800389e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a6:	ee17 3a90 	vmov	r3, s15
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3397      	adds	r3, #151	; 0x97
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <pack_telem_data+0x13d4>)
 80038b6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80038ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003994 <pack_telem_data+0x13d0>
 80038be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c6:	ee17 3a90 	vmov	r3, s15
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3398      	adds	r3, #152	; 0x98
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 80038d8:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <pack_telem_data+0x13d4>)
 80038da:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80038de:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003994 <pack_telem_data+0x13d0>
 80038e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ea:	ee17 3a90 	vmov	r3, s15
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3399      	adds	r3, #153	; 0x99
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <pack_telem_data+0x13d4>)
 80038fa:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80038fe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003994 <pack_telem_data+0x13d0>
 8003902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390a:	ee17 3a90 	vmov	r3, s15
 800390e:	b29b      	uxth	r3, r3
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	339a      	adds	r3, #154	; 0x9a
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 800391c:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <pack_telem_data+0x13d4>)
 800391e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003922:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003994 <pack_telem_data+0x13d0>
 8003926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800392a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392e:	ee17 3a90 	vmov	r3, s15
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	339b      	adds	r3, #155	; 0x9b
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <pack_telem_data+0x13d4>)
 800393e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003942:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003994 <pack_telem_data+0x13d0>
 8003946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 3a90 	vmov	r3, s15
 8003952:	b29b      	uxth	r3, r3
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	339c      	adds	r3, #156	; 0x9c
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <pack_telem_data+0x13d4>)
 8003962:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003966:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003994 <pack_telem_data+0x13d0>
 800396a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800396e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003972:	ee17 3a90 	vmov	r3, s15
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	339d      	adds	r3, #157	; 0x9d
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <pack_telem_data+0x13d4>)
 8003982:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003986:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003994 <pack_telem_data+0x13d0>
 800398a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398e:	e005      	b.n	800399c <pack_telem_data+0x13d8>
 8003990:	20000414 	.word	0x20000414
 8003994:	42c80000 	.word	0x42c80000
 8003998:	20000454 	.word	0x20000454
 800399c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a0:	ee17 3a90 	vmov	r3, s15
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	339e      	adds	r3, #158	; 0x9e
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 80039b2:	4bcd      	ldr	r3, [pc, #820]	; (8003ce8 <pack_telem_data+0x1724>)
 80039b4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80039b8:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8003cec <pack_telem_data+0x1728>
 80039bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c4:	ee17 3a90 	vmov	r3, s15
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	339f      	adds	r3, #159	; 0x9f
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 80039d2:	4bc5      	ldr	r3, [pc, #788]	; (8003ce8 <pack_telem_data+0x1724>)
 80039d4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80039d8:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8003cec <pack_telem_data+0x1728>
 80039dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e4:	ee17 3a90 	vmov	r3, s15
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	33a0      	adds	r3, #160	; 0xa0
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 80039f6:	4bbc      	ldr	r3, [pc, #752]	; (8003ce8 <pack_telem_data+0x1724>)
 80039f8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80039fc:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8003cec <pack_telem_data+0x1728>
 8003a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a08:	ee17 3a90 	vmov	r3, s15
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	33a1      	adds	r3, #161	; 0xa1
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8003a16:	4bb4      	ldr	r3, [pc, #720]	; (8003ce8 <pack_telem_data+0x1724>)
 8003a18:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003a1c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8003cec <pack_telem_data+0x1728>
 8003a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a28:	ee17 3a90 	vmov	r3, s15
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	33a2      	adds	r3, #162	; 0xa2
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8003a3a:	4bab      	ldr	r3, [pc, #684]	; (8003ce8 <pack_telem_data+0x1724>)
 8003a3c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a4c:	ee17 3a90 	vmov	r3, s15
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	33a3      	adds	r3, #163	; 0xa3
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <pack_telem_data+0x1724>)
 8003a5c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a6c:	ee17 3a90 	vmov	r3, s15
 8003a70:	b21b      	sxth	r3, r3
 8003a72:	121b      	asrs	r3, r3, #8
 8003a74:	b21a      	sxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	33a4      	adds	r3, #164	; 0xa4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8003a7e:	4b9a      	ldr	r3, [pc, #616]	; (8003ce8 <pack_telem_data+0x1724>)
 8003a80:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8003a84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a90:	ee17 3a90 	vmov	r3, s15
 8003a94:	b21a      	sxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	33a5      	adds	r3, #165	; 0xa5
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8003a9e:	4b92      	ldr	r3, [pc, #584]	; (8003ce8 <pack_telem_data+0x1724>)
 8003aa0:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8003aa4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab0:	ee17 3a90 	vmov	r3, s15
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	121b      	asrs	r3, r3, #8
 8003ab8:	b21a      	sxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	33a6      	adds	r3, #166	; 0xa6
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8003ac2:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <pack_telem_data+0x1724>)
 8003ac4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003ac8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad4:	ee17 3a90 	vmov	r3, s15
 8003ad8:	b21a      	sxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	33a7      	adds	r3, #167	; 0xa7
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8003ae2:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <pack_telem_data+0x1724>)
 8003ae4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003ae8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af4:	ee17 3a90 	vmov	r3, s15
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	121b      	asrs	r3, r3, #8
 8003afc:	b21a      	sxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	33a8      	adds	r3, #168	; 0xa8
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8003b06:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <pack_telem_data+0x1724>)
 8003b08:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003b0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b18:	ee17 3a90 	vmov	r3, s15
 8003b1c:	b21a      	sxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	33a9      	adds	r3, #169	; 0xa9
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8003b26:	4b70      	ldr	r3, [pc, #448]	; (8003ce8 <pack_telem_data+0x1724>)
 8003b28:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003b2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b38:	ee17 3a90 	vmov	r3, s15
 8003b3c:	b21b      	sxth	r3, r3
 8003b3e:	121b      	asrs	r3, r3, #8
 8003b40:	b21a      	sxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	33aa      	adds	r3, #170	; 0xaa
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <pack_telem_data+0x1724>)
 8003b4c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003b50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b5c:	ee17 3a90 	vmov	r3, s15
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	33ab      	adds	r3, #171	; 0xab
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <pack_telem_data+0x1724>)
 8003b6c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003b70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	b21b      	sxth	r3, r3
 8003b82:	121b      	asrs	r3, r3, #8
 8003b84:	b21a      	sxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	33ac      	adds	r3, #172	; 0xac
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <pack_telem_data+0x1724>)
 8003b90:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003b94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba0:	ee17 3a90 	vmov	r3, s15
 8003ba4:	b21a      	sxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	33ad      	adds	r3, #173	; 0xad
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8003bae:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <pack_telem_data+0x1724>)
 8003bb0:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003bb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	121b      	asrs	r3, r3, #8
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	33ae      	adds	r3, #174	; 0xae
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8003bd2:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <pack_telem_data+0x1724>)
 8003bd4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003bd8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003cec <pack_telem_data+0x1728>
 8003bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be4:	edc7 7a00 	vstr	s15, [r7]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	33af      	adds	r3, #175	; 0xaf
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <pack_telem_data+0x1724>)
 8003bf4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003bf8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003cec <pack_telem_data+0x1728>
 8003bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c04:	ee17 3a90 	vmov	r3, s15
 8003c08:	121a      	asrs	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	33b0      	adds	r3, #176	; 0xb0
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8003c12:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <pack_telem_data+0x1724>)
 8003c14:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003c18:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003cec <pack_telem_data+0x1728>
 8003c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	141a      	asrs	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	33b1      	adds	r3, #177	; 0xb1
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <pack_telem_data+0x1724>)
 8003c34:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003c38:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003cec <pack_telem_data+0x1728>
 8003c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c44:	ee17 3a90 	vmov	r3, s15
 8003c48:	161a      	asrs	r2, r3, #24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	33b2      	adds	r3, #178	; 0xb2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <pack_telem_data+0x1724>)
 8003c54:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003c58:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003cec <pack_telem_data+0x1728>
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c64:	edc7 7a00 	vstr	s15, [r7]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	33b3      	adds	r3, #179	; 0xb3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <pack_telem_data+0x1724>)
 8003c74:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003c78:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003cec <pack_telem_data+0x1728>
 8003c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c84:	ee17 3a90 	vmov	r3, s15
 8003c88:	121a      	asrs	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	33b4      	adds	r3, #180	; 0xb4
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <pack_telem_data+0x1724>)
 8003c94:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003c98:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003cec <pack_telem_data+0x1728>
 8003c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca4:	ee17 3a90 	vmov	r3, s15
 8003ca8:	141a      	asrs	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	33b5      	adds	r3, #181	; 0xb5
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <pack_telem_data+0x1724>)
 8003cb4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003cb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003cec <pack_telem_data+0x1728>
 8003cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc4:	ee17 3a90 	vmov	r3, s15
 8003cc8:	161a      	asrs	r2, r3, #24
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	33b6      	adds	r3, #182	; 0xb6
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <pack_telem_data+0x1724>)
 8003cd4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003cd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce4:	e004      	b.n	8003cf0 <pack_telem_data+0x172c>
 8003ce6:	bf00      	nop
 8003ce8:	20000454 	.word	0x20000454
 8003cec:	42c80000 	.word	0x42c80000
 8003cf0:	ee17 3a90 	vmov	r3, s15
 8003cf4:	b21a      	sxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	33b7      	adds	r3, #183	; 0xb7
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8003cfe:	4bd0      	ldr	r3, [pc, #832]	; (8004040 <pack_telem_data+0x1a7c>)
 8003d00:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d10:	ee17 3a90 	vmov	r3, s15
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	121b      	asrs	r3, r3, #8
 8003d18:	b21a      	sxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	33b8      	adds	r3, #184	; 0xb8
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8003d22:	4bc7      	ldr	r3, [pc, #796]	; (8004040 <pack_telem_data+0x1a7c>)
 8003d24:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d34:	ee17 3a90 	vmov	r3, s15
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	33b9      	adds	r3, #185	; 0xb9
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8003d42:	4bbf      	ldr	r3, [pc, #764]	; (8004040 <pack_telem_data+0x1a7c>)
 8003d44:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d54:	ee17 3a90 	vmov	r3, s15
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	121b      	asrs	r3, r3, #8
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	33ba      	adds	r3, #186	; 0xba
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8003d66:	4bb6      	ldr	r3, [pc, #728]	; (8004040 <pack_telem_data+0x1a7c>)
 8003d68:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003d6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d78:	ee17 3a90 	vmov	r3, s15
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	33bb      	adds	r3, #187	; 0xbb
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8003d86:	4bae      	ldr	r3, [pc, #696]	; (8004040 <pack_telem_data+0x1a7c>)
 8003d88:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003d8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d98:	ee17 3a90 	vmov	r3, s15
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	121b      	asrs	r3, r3, #8
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	33bc      	adds	r3, #188	; 0xbc
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8003daa:	4ba5      	ldr	r3, [pc, #660]	; (8004040 <pack_telem_data+0x1a7c>)
 8003dac:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003db0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dbc:	ee17 3a90 	vmov	r3, s15
 8003dc0:	b21a      	sxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	33bd      	adds	r3, #189	; 0xbd
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8003dca:	4b9d      	ldr	r3, [pc, #628]	; (8004040 <pack_telem_data+0x1a7c>)
 8003dcc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003dd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ddc:	ee17 3a90 	vmov	r3, s15
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	121b      	asrs	r3, r3, #8
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	33be      	adds	r3, #190	; 0xbe
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8003dee:	4b95      	ldr	r3, [pc, #596]	; (8004044 <pack_telem_data+0x1a80>)
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e00:	edc7 7a00 	vstr	s15, [r7]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	33bf      	adds	r3, #191	; 0xbf
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8003e0e:	4b8d      	ldr	r3, [pc, #564]	; (8004044 <pack_telem_data+0x1a80>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e20:	ee17 3a90 	vmov	r3, s15
 8003e24:	121a      	asrs	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	33c0      	adds	r3, #192	; 0xc0
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <pack_telem_data+0x1a80>)
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e40:	ee17 3a90 	vmov	r3, s15
 8003e44:	141a      	asrs	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	33c1      	adds	r3, #193	; 0xc1
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8003e4e:	4b7d      	ldr	r3, [pc, #500]	; (8004044 <pack_telem_data+0x1a80>)
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e60:	ee17 3a90 	vmov	r3, s15
 8003e64:	161a      	asrs	r2, r3, #24
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	33c2      	adds	r3, #194	; 0xc2
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8003e6e:	4b75      	ldr	r3, [pc, #468]	; (8004044 <pack_telem_data+0x1a80>)
 8003e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e80:	edc7 7a00 	vstr	s15, [r7]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	33c3      	adds	r3, #195	; 0xc3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <pack_telem_data+0x1a80>)
 8003e90:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea0:	ee17 3a90 	vmov	r3, s15
 8003ea4:	121a      	asrs	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	33c4      	adds	r3, #196	; 0xc4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <pack_telem_data+0x1a80>)
 8003eb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec0:	ee17 3a90 	vmov	r3, s15
 8003ec4:	141a      	asrs	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	33c5      	adds	r3, #197	; 0xc5
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <pack_telem_data+0x1a80>)
 8003ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ed4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee0:	ee17 3a90 	vmov	r3, s15
 8003ee4:	161a      	asrs	r2, r3, #24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	33c6      	adds	r3, #198	; 0xc6
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <pack_telem_data+0x1a84>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f00:	edc7 7a00 	vstr	s15, [r7]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	33c7      	adds	r3, #199	; 0xc7
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
	*(dst + 200) = TELEM_ITEM_200;
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <pack_telem_data+0x1a84>)
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f20:	ee17 3a90 	vmov	r3, s15
 8003f24:	121a      	asrs	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	33c8      	adds	r3, #200	; 0xc8
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
	*(dst + 201) = TELEM_ITEM_201;
 8003f2e:	4b46      	ldr	r3, [pc, #280]	; (8004048 <pack_telem_data+0x1a84>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f40:	ee17 3a90 	vmov	r3, s15
 8003f44:	141a      	asrs	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	33c9      	adds	r3, #201	; 0xc9
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
	*(dst + 202) = TELEM_ITEM_202;
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <pack_telem_data+0x1a84>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f60:	ee17 3a90 	vmov	r3, s15
 8003f64:	161a      	asrs	r2, r3, #24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	33ca      	adds	r3, #202	; 0xca
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
	*(dst + 203) = TELEM_ITEM_203;
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <pack_telem_data+0x1a88>)
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f80:	edc7 7a00 	vstr	s15, [r7]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	33cb      	adds	r3, #203	; 0xcb
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
	*(dst + 204) = TELEM_ITEM_204;
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <pack_telem_data+0x1a88>)
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	121a      	asrs	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	33cc      	adds	r3, #204	; 0xcc
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
	*(dst + 205) = TELEM_ITEM_205;
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <pack_telem_data+0x1a88>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc0:	ee17 3a90 	vmov	r3, s15
 8003fc4:	141a      	asrs	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	33cd      	adds	r3, #205	; 0xcd
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
	*(dst + 206) = TELEM_ITEM_206;
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <pack_telem_data+0x1a88>)
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe0:	ee17 3a90 	vmov	r3, s15
 8003fe4:	161a      	asrs	r2, r3, #24
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	33ce      	adds	r3, #206	; 0xce
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
	*(dst + 207) = TELEM_ITEM_207;
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <pack_telem_data+0x1a8c>)
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004000:	edc7 7a00 	vstr	s15, [r7]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	33cf      	adds	r3, #207	; 0xcf
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
	*(dst + 208) = TELEM_ITEM_208;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <pack_telem_data+0x1a8c>)
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	121a      	asrs	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	33d0      	adds	r3, #208	; 0xd0
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
	*(dst + 209) = TELEM_ITEM_209;
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <pack_telem_data+0x1a8c>)
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800403c:	e00a      	b.n	8004054 <pack_telem_data+0x1a90>
 800403e:	bf00      	nop
 8004040:	20000454 	.word	0x20000454
 8004044:	20000448 	.word	0x20000448
 8004048:	2000036c 	.word	0x2000036c
 800404c:	20000370 	.word	0x20000370
 8004050:	20000374 	.word	0x20000374
 8004054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004058:	ee17 3a90 	vmov	r3, s15
 800405c:	141a      	asrs	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	33d1      	adds	r3, #209	; 0xd1
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
	*(dst + 210) = TELEM_ITEM_210;
 8004066:	4b84      	ldr	r3, [pc, #528]	; (8004278 <pack_telem_data+0x1cb4>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004078:	ee17 3a90 	vmov	r3, s15
 800407c:	161a      	asrs	r2, r3, #24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	33d2      	adds	r3, #210	; 0xd2
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
	*(dst + 211) = TELEM_ITEM_211;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	33d3      	adds	r3, #211	; 0xd3
 800408a:	4a7c      	ldr	r2, [pc, #496]	; (800427c <pack_telem_data+0x1cb8>)
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
	*(dst + 212) = TELEM_ITEM_212;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	33d4      	adds	r3, #212	; 0xd4
 8004096:	4a79      	ldr	r2, [pc, #484]	; (800427c <pack_telem_data+0x1cb8>)
 8004098:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
	*(dst + 213) = TELEM_ITEM_213;
 80040a0:	4b77      	ldr	r3, [pc, #476]	; (8004280 <pack_telem_data+0x1cbc>)
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	33d5      	adds	r3, #213	; 0xd5
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
	*(dst + 214) = TELEM_ITEM_214;
 80040ac:	4b74      	ldr	r3, [pc, #464]	; (8004280 <pack_telem_data+0x1cbc>)
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	0a1a      	lsrs	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	33d6      	adds	r3, #214	; 0xd6
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
	*(dst + 215) = TELEM_ITEM_215;
 80040ba:	4b71      	ldr	r3, [pc, #452]	; (8004280 <pack_telem_data+0x1cbc>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	0c1a      	lsrs	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	33d7      	adds	r3, #215	; 0xd7
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]
	*(dst + 216) = TELEM_ITEM_216;
 80040c8:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <pack_telem_data+0x1cbc>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	0e1a      	lsrs	r2, r3, #24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	33d8      	adds	r3, #216	; 0xd8
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
	*(dst + 217) = TELEM_ITEM_217;
 80040d6:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <pack_telem_data+0x1cbc>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	33d9      	adds	r3, #217	; 0xd9
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
	*(dst + 218) = TELEM_ITEM_218;
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <pack_telem_data+0x1cbc>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	33da      	adds	r3, #218	; 0xda
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
	*(dst + 219) = TELEM_ITEM_219;
 80040f6:	4b62      	ldr	r3, [pc, #392]	; (8004280 <pack_telem_data+0x1cbc>)
 80040f8:	885b      	ldrh	r3, [r3, #2]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	33db      	adds	r3, #219	; 0xdb
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
	*(dst + 220) = TELEM_ITEM_220;
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <pack_telem_data+0x1cbc>)
 8004106:	885b      	ldrh	r3, [r3, #2]
 8004108:	b29b      	uxth	r3, r3
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	33dc      	adds	r3, #220	; 0xdc
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
	*(dst + 221) = TELEM_ITEM_221;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	33dd      	adds	r3, #221	; 0xdd
 800411a:	4a59      	ldr	r2, [pc, #356]	; (8004280 <pack_telem_data+0x1cbc>)
 800411c:	7912      	ldrb	r2, [r2, #4]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
	*(dst + 222) = TELEM_ITEM_222;
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <pack_telem_data+0x1cbc>)
 8004124:	88db      	ldrh	r3, [r3, #6]
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	33de      	adds	r3, #222	; 0xde
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
	*(dst + 223) = TELEM_ITEM_223;
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <pack_telem_data+0x1cbc>)
 8004132:	88db      	ldrh	r3, [r3, #6]
 8004134:	b29b      	uxth	r3, r3
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	33df      	adds	r3, #223	; 0xdf
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]
	*(dst + 224) = TELEM_ITEM_224;
 8004142:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <pack_telem_data+0x1cbc>)
 8004144:	891b      	ldrh	r3, [r3, #8]
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	33e0      	adds	r3, #224	; 0xe0
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
	*(dst + 225) = TELEM_ITEM_225;
 8004150:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <pack_telem_data+0x1cbc>)
 8004152:	891b      	ldrh	r3, [r3, #8]
 8004154:	b29b      	uxth	r3, r3
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	33e1      	adds	r3, #225	; 0xe1
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
	*(dst + 226) = TELEM_ITEM_226;
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <pack_telem_data+0x1cc0>)
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004288 <pack_telem_data+0x1cc4>
 800416c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004174:	edc7 7a00 	vstr	s15, [r7]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	33e2      	adds	r3, #226	; 0xe2
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
	*(dst + 227) = TELEM_ITEM_227;
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <pack_telem_data+0x1cc0>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004288 <pack_telem_data+0x1cc4>
 800418c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004194:	ee17 3a90 	vmov	r3, s15
 8004198:	121a      	asrs	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	33e3      	adds	r3, #227	; 0xe3
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
	*(dst + 228) = TELEM_ITEM_228;
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <pack_telem_data+0x1cc0>)
 80041a4:	edd3 7a00 	vldr	s15, [r3]
 80041a8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004288 <pack_telem_data+0x1cc4>
 80041ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b4:	ee17 3a90 	vmov	r3, s15
 80041b8:	141a      	asrs	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	33e4      	adds	r3, #228	; 0xe4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
	*(dst + 229) = TELEM_ITEM_229;
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <pack_telem_data+0x1cc0>)
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004288 <pack_telem_data+0x1cc4>
 80041cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d4:	ee17 3a90 	vmov	r3, s15
 80041d8:	161a      	asrs	r2, r3, #24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	33e5      	adds	r3, #229	; 0xe5
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
	*(dst + 230) = TELEM_ITEM_230;
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <pack_telem_data+0x1cc8>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	33e6      	adds	r3, #230	; 0xe6
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
	*(dst + 231) = TELEM_ITEM_231;
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <pack_telem_data+0x1cc8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	121a      	asrs	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	33e7      	adds	r3, #231	; 0xe7
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
	*(dst + 232) = TELEM_ITEM_232;
 80041fc:	4b23      	ldr	r3, [pc, #140]	; (800428c <pack_telem_data+0x1cc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	141a      	asrs	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	33e8      	adds	r3, #232	; 0xe8
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
	*(dst + 233) = TELEM_ITEM_233;
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <pack_telem_data+0x1cc8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	161a      	asrs	r2, r3, #24
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	33e9      	adds	r3, #233	; 0xe9
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
	*(dst + 234) = TELEM_ITEM_234;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	33ea      	adds	r3, #234	; 0xea
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <pack_telem_data+0x1ccc>)
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	701a      	strb	r2, [r3, #0]
	*(dst + 235) = TELEM_ITEM_235;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	33eb      	adds	r3, #235	; 0xeb
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <pack_telem_data+0x1cd0>)
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	701a      	strb	r2, [r3, #0]
	*(dst + 236) = TELEM_ITEM_236;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <pack_telem_data+0x1cd4>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	33ec      	adds	r3, #236	; 0xec
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
	*(dst + 237) = TELEM_ITEM_237;
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <pack_telem_data+0x1cd4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0a1a      	lsrs	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	33ed      	adds	r3, #237	; 0xed
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
	*(dst + 238) = TELEM_ITEM_238;
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <pack_telem_data+0x1cd4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	0c1a      	lsrs	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	33ee      	adds	r3, #238	; 0xee
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
	*(dst + 239) = TELEM_ITEM_239;
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <pack_telem_data+0x1cd4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e1a      	lsrs	r2, r3, #24
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	33ef      	adds	r3, #239	; 0xef
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
	*(dst + 240) = TELEM_ITEM_240;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	33f0      	adds	r3, #240	; 0xf0
 8004266:	4a0d      	ldr	r2, [pc, #52]	; (800429c <pack_telem_data+0x1cd8>)
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000374 	.word	0x20000374
 800427c:	20000454 	.word	0x20000454
 8004280:	2000055c 	.word	0x2000055c
 8004284:	20000378 	.word	0x20000378
 8004288:	461c4000 	.word	0x461c4000
 800428c:	2000037c 	.word	0x2000037c
 8004290:	20000380 	.word	0x20000380
 8004294:	20000381 	.word	0x20000381
 8004298:	20000384 	.word	0x20000384
 800429c:	20000388 	.word	0x20000388

080042a0 <init_serial_data>:

/**
 * Initialize the flash struct and chip.
 * Initialize all the DMA rx buffers.
 */
void init_serial_data(DmaBufferInfo* buffer_info) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	// Flash
	init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 80042a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <init_serial_data+0x80>)
 80042ae:	491d      	ldr	r1, [pc, #116]	; (8004324 <init_serial_data+0x84>)
 80042b0:	481d      	ldr	r0, [pc, #116]	; (8004328 <init_serial_data+0x88>)
 80042b2:	f002 fd22 	bl	8006cfa <init_flash>

	// DMA RX
	buffer_info->curr_circular_buffer_pos = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 29f6 	strh.w	r2, [r3, #2550]	; 0x9f6
	buffer_info->last_telem_packet_pos = 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20

	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	e011      	b.n	80042f0 <init_serial_data+0x50>
		buffer_info->curr_telem_start[i] = 0;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f202 42fc 	addw	r2, r2, #1276	; 0x4fc
 80042d4:	2100      	movs	r1, #0
 80042d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer_info->curr_telem_len[i] = 0;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3301      	adds	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	d9ea      	bls.n	80042cc <init_serial_data+0x2c>
	}

	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 80042f6:	2300      	movs	r3, #0
 80042f8:	81bb      	strh	r3, [r7, #12]
 80042fa:	e008      	b.n	800430e <init_serial_data+0x6e>
		buffer_info->telem_buffer[i] = 0;
 80042fc:	89bb      	ldrh	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2a22 	strb.w	r2, [r3, #2594]	; 0xa22
	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 8004308:	89bb      	ldrh	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	81bb      	strh	r3, [r7, #12]
 800430e:	89bb      	ldrh	r3, [r7, #12]
 8004310:	2bfe      	cmp	r3, #254	; 0xfe
 8004312:	d9f3      	bls.n	80042fc <init_serial_data+0x5c>
	}
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40020800 	.word	0x40020800
 8004324:	200009ac 	.word	0x200009ac
 8004328:	20000d94 	.word	0x20000d94

0800432c <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
	header->origin_addr = FLIGHT_EC_ADDR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	70da      	strb	r2, [r3, #3]
	header->do_cobbs = 1; // enable COBS
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	715a      	strb	r2, [r3, #5]
	header->timestamp = SYS_MICROS;
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <init_packet_header+0x40>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000638 	.word	0x20000638

08004370 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ffd2 	bl	800432c <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	461a      	mov	r2, r3
 800438e:	f04f 31ff 	mov.w	r1, #4294967295
 8004392:	2000      	movs	r0, #0
 8004394:	f001 fce4 	bl	8005d60 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <send_telem_packet+0x40>)
 800439a:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 fd08 	bl	8005db8 <send_data>
}
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000820 	.word	0x20000820

080043b4 <save_flash_packet>:

void save_flash_packet() {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b0c8      	sub	sp, #288	; 0x120
 80043b8:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 80043ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043be:	2107      	movs	r1, #7
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ffb3 	bl	800432c <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 80043c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295
 80043d0:	2000      	movs	r0, #0
 80043d2:	f001 fcc5 	bl	8005d60 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 80043d6:	f107 0310 	add.w	r3, r7, #16
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	3304      	adds	r3, #4
 80043e0:	22f9      	movs	r2, #249	; 0xf9
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f006 f97d 	bl	800a6e4 <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	2200      	movs	r2, #0
 80043ee:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	22fd      	movs	r2, #253	; 0xfd
 80043f4:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	f107 0210 	add.w	r2, r7, #16
 80043fc:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fcd8 	bl	8005db8 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800440e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 8004412:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4619      	mov	r1, r3
 800441c:	4803      	ldr	r0, [pc, #12]	; (800442c <save_flash_packet+0x78>)
 800441e:	f002 fd5c 	bl	8006eda <write_to_flash>
}
 8004422:	bf00      	nop
 8004424:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000d94 	.word	0x20000d94

08004430 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 8004430:	b580      	push	{r7, lr}
 8004432:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8004436:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 8004438:	481c      	ldr	r0, [pc, #112]	; (80044ac <transmit_flash_data+0x7c>)
 800443a:	f002 fe19 	bl	8007070 <finish_flash_write>

	uint32_t page = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <transmit_flash_data+0x7c>)
 8004446:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800444a:	3301      	adds	r3, #1
 800444c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8004450:	4b16      	ldr	r3, [pc, #88]	; (80044ac <transmit_flash_data+0x7c>)
 8004452:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <transmit_flash_data+0x34>
		end_page--;
 800445a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800445e:	3b01      	subs	r3, #1
 8004460:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 8004464:	4811      	ldr	r0, [pc, #68]	; (80044ac <transmit_flash_data+0x7c>)
 8004466:	f002 fe49 	bl	80070fc <reset_flash_read_pointer>
	while (page < end_page) {
 800446a:	e011      	b.n	8004490 <transmit_flash_data+0x60>
	    read_next_2KB_from_flash(&flash, read_buffer);
 800446c:	463b      	mov	r3, r7
 800446e:	4619      	mov	r1, r3
 8004470:	480e      	ldr	r0, [pc, #56]	; (80044ac <transmit_flash_data+0x7c>)
 8004472:	f002 fe51 	bl	8007118 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 8004476:	4639      	mov	r1, r7
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004480:	480b      	ldr	r0, [pc, #44]	; (80044b0 <transmit_flash_data+0x80>)
 8004482:	f005 faf0 	bl	8009a66 <HAL_UART_Transmit>
	    ++page;
 8004486:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800448a:	3301      	adds	r3, #1
 800448c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	while (page < end_page) {
 8004490:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8004494:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8004498:	429a      	cmp	r2, r3
 800449a:	d3e7      	bcc.n	800446c <transmit_flash_data+0x3c>
		//HAL_IWDG_Refresh(&hiwdg);  TODO: re enable this
	}
	reset_flash_read_pointer(&flash);
 800449c:	4803      	ldr	r0, [pc, #12]	; (80044ac <transmit_flash_data+0x7c>)
 800449e:	f002 fe2d 	bl	80070fc <reset_flash_read_pointer>
}
 80044a2:	bf00      	nop
 80044a4:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000d94 	.word	0x20000d94
 80044b0:	20000820 	.word	0x20000820

080044b4 <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 80044bc:	2201      	movs	r2, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <set_status_flag+0x28>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	4a03      	ldr	r2, [pc, #12]	; (80044dc <set_status_flag+0x28>)
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000368 	.word	0x20000368

080044e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_MspInit+0x4c>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4a0f      	ldr	r2, [pc, #60]	; (800452c <HAL_MspInit+0x4c>)
 80044f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f4:	6453      	str	r3, [r2, #68]	; 0x44
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <HAL_MspInit+0x4c>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_MspInit+0x4c>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <HAL_MspInit+0x4c>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_MspInit+0x4c>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b090      	sub	sp, #64	; 0x40
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a65      	ldr	r2, [pc, #404]	; (80046e4 <HAL_SPI_MspInit+0x1b4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12c      	bne.n	80045ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 800455c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004560:	6453      	str	r3, [r2, #68]	; 0x44
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	4b5d      	ldr	r3, [pc, #372]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4a5c      	ldr	r2, [pc, #368]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6313      	str	r3, [r2, #48]	; 0x30
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800458a:	23e0      	movs	r3, #224	; 0xe0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800459a:	2305      	movs	r3, #5
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a2:	4619      	mov	r1, r3
 80045a4:	4851      	ldr	r0, [pc, #324]	; (80046ec <HAL_SPI_MspInit+0x1bc>)
 80045a6:	f003 f8a7 	bl	80076f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80045aa:	e096      	b.n	80046da <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4f      	ldr	r2, [pc, #316]	; (80046f0 <HAL_SPI_MspInit+0x1c0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12d      	bne.n	8004612 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a4a      	ldr	r2, [pc, #296]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b48      	ldr	r3, [pc, #288]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	4b44      	ldr	r3, [pc, #272]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a43      	ldr	r2, [pc, #268]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80045ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004600:	2305      	movs	r3, #5
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004608:	4619      	mov	r1, r3
 800460a:	483a      	ldr	r0, [pc, #232]	; (80046f4 <HAL_SPI_MspInit+0x1c4>)
 800460c:	f003 f874 	bl	80076f8 <HAL_GPIO_Init>
}
 8004610:	e063      	b.n	80046da <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI3)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <HAL_SPI_MspInit+0x1c8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d12d      	bne.n	8004678 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	4a30      	ldr	r2, [pc, #192]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	6413      	str	r3, [r2, #64]	; 0x40
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6313      	str	r3, [r2, #48]	; 0x30
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004654:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465a:	2302      	movs	r3, #2
 800465c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004662:	2303      	movs	r3, #3
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004666:	2306      	movs	r3, #6
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800466a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800466e:	4619      	mov	r1, r3
 8004670:	4822      	ldr	r0, [pc, #136]	; (80046fc <HAL_SPI_MspInit+0x1cc>)
 8004672:	f003 f841 	bl	80076f8 <HAL_GPIO_Init>
}
 8004676:	e030      	b.n	80046da <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI4)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a20      	ldr	r2, [pc, #128]	; (8004700 <HAL_SPI_MspInit+0x1d0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d12b      	bne.n	80046da <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 800468c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80046a8:	f043 0310 	orr.w	r3, r3, #16
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_SPI_MspInit+0x1b8>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80046ba:	2364      	movs	r3, #100	; 0x64
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c6:	2303      	movs	r3, #3
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80046ca:	2305      	movs	r3, #5
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d2:	4619      	mov	r1, r3
 80046d4:	480b      	ldr	r0, [pc, #44]	; (8004704 <HAL_SPI_MspInit+0x1d4>)
 80046d6:	f003 f80f 	bl	80076f8 <HAL_GPIO_Init>
}
 80046da:	bf00      	nop
 80046dc:	3740      	adds	r7, #64	; 0x40
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40013000 	.word	0x40013000
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40020000 	.word	0x40020000
 80046f0:	40003800 	.word	0x40003800
 80046f4:	40020400 	.word	0x40020400
 80046f8:	40003c00 	.word	0x40003c00
 80046fc:	40020800 	.word	0x40020800
 8004700:	40013400 	.word	0x40013400
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_TIM_Base_MspInit+0xe0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a32      	ldr	r2, [pc, #200]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004736:	e052      	b.n	80047de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <HAL_TIM_Base_MspInit+0xe8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d116      	bne.n	8004770 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4a28      	ldr	r2, [pc, #160]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 800474c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004750:	6453      	str	r3, [r2, #68]	; 0x44
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	2101      	movs	r1, #1
 8004762:	2019      	movs	r0, #25
 8004764:	f002 feff 	bl	8007566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004768:	2019      	movs	r0, #25
 800476a:	f002 ff18 	bl	800759e <HAL_NVIC_EnableIRQ>
}
 800476e:	e036      	b.n	80047de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_TIM_Base_MspInit+0xec>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d116      	bne.n	80047a8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004788:	6453      	str	r3, [r2, #68]	; 0x44
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2101      	movs	r1, #1
 800479a:	201a      	movs	r0, #26
 800479c:	f002 fee3 	bl	8007566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047a0:	201a      	movs	r0, #26
 80047a2:	f002 fefc 	bl	800759e <HAL_NVIC_EnableIRQ>
}
 80047a6:	e01a      	b.n	80047de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM13)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <HAL_TIM_Base_MspInit+0xf0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d115      	bne.n	80047de <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_TIM_Base_MspInit+0xe4>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2101      	movs	r1, #1
 80047d2:	202c      	movs	r0, #44	; 0x2c
 80047d4:	f002 fec7 	bl	8007566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80047d8:	202c      	movs	r0, #44	; 0x2c
 80047da:	f002 fee0 	bl	800759e <HAL_NVIC_EnableIRQ>
}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800
 80047f8:	40001c00 	.word	0x40001c00

080047fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_UART_MspInit+0x94>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d133      	bne.n	8004886 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_UART_MspInit+0x98>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_UART_MspInit+0x98>)
 8004828:	f043 0310 	orr.w	r3, r3, #16
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_UART_MspInit+0x98>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_UART_MspInit+0x98>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a14      	ldr	r2, [pc, #80]	; (8004894 <HAL_UART_MspInit+0x98>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_UART_MspInit+0x98>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004856:	23c0      	movs	r3, #192	; 0xc0
 8004858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004862:	2303      	movs	r3, #3
 8004864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004866:	2307      	movs	r3, #7
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	4619      	mov	r1, r3
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <HAL_UART_MspInit+0x9c>)
 8004872:	f002 ff41 	bl	80076f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	2025      	movs	r0, #37	; 0x25
 800487c:	f002 fe73 	bl	8007566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004880:	2025      	movs	r0, #37	; 0x25
 8004882:	f002 fe8c 	bl	800759e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40011000 	.word	0x40011000
 8004894:	40023800 	.word	0x40023800
 8004898:	40020400 	.word	0x40020400

0800489c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <NMI_Handler+0x4>

080048a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048a6:	e7fe      	b.n	80048a6 <HardFault_Handler+0x4>

080048a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048ac:	e7fe      	b.n	80048ac <MemManage_Handler+0x4>

080048ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048b2:	e7fe      	b.n	80048b2 <BusFault_Handler+0x4>

080048b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <UsageFault_Handler+0x4>

080048ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e8:	f002 fd42 	bl	8007370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80048f4:	4802      	ldr	r0, [pc, #8]	; (8004900 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80048f6:	f004 fcab 	bl	8009250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200005ec 	.word	0x200005ec

08004904 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004908:	4802      	ldr	r0, [pc, #8]	; (8004914 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800490a:	f004 fca1 	bl	8009250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000964 	.word	0x20000964

08004918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <USART1_IRQHandler+0x10>)
 800491e:	f005 f965 	bl	8009bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000820 	.word	0x20000820

0800492c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004932:	f004 fc8d 	bl	8009250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200007d8 	.word	0x200007d8

08004940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <SystemInit+0x28>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	4a07      	ldr	r2, [pc, #28]	; (8004968 <SystemInit+0x28>)
 800494c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <SystemInit+0x28>)
 8004956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800495a:	609a      	str	r2, [r3, #8]
#endif
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <actuate_tank_motor_pos>:
/**
 * Small wrapper around motor actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_motor_pos(TPC_Info* tank, float motor_pos) {
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	ed87 0a00 	vstr	s0, [r7]
	if (tank->tank_enable) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	781b      	ldrb	r3, [r3, #0]
		// actuate motor to pos
	}
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	789b      	ldrb	r3, [r3, #2]
 80049a2:	461a      	mov	r2, r3
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fefb 	bl	80057a4 <set_valve_channel>
	}
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <tank_autopress_bang_bang>:
	tank->PID_error_sum = 0;
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
}


void tank_autopress_bang_bang(TPC_Info* tank) {
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c2:	ed93 7a00 	vldr	s14, [r3]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
			+ tank->bang_bang_low_pres_diff)) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 80049d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	d504      	bpl.n	80049ea <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 80049e0:	2101      	movs	r1, #1
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ffd0 	bl	8004988 <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 80049e8:	e015      	b.n	8004a16 <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	ed93 7a00 	vldr	s14, [r3]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
			+ tank->bang_bang_high_pres_diff)) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 8004a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	dc00      	bgt.n	8004a0e <tank_autopress_bang_bang+0x58>
}
 8004a0c:	e003      	b.n	8004a16 <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ffb9 	bl	8004988 <actuate_tank_control_valve>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fd2d 	bl	800048c <__aeabi_ui2d>
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <tank_PID_pressure_control+0x140>)
 8004a38:	f7fb fecc 	bl	80007d4 <__aeabi_ddiv>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	f7fc f856 	bl	8000af4 <__aeabi_d2f>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004a68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004a6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004a86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a8a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	tank->PID_prev_step_error = error;  // store for next D calculation
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9a:	675a      	str	r2, [r3, #116]	; 0x74

	// Apply gains
	float Kp_term = tank->K_p * error;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004aa2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a08 	vstr	s15, [r7, #32]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
	float Kd_term = tank->K_d * slope;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad0:	edc7 7a06 	vstr	s15, [r7, #24]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8004ad4:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ad8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae8:	edc7 7a05 	vstr	s15, [r7, #20]
	// Limit output
	float motor_delta;
	// TODO: define these 2 motor variables somewhere, probably motor struct
	// TODO: change all these variable names when they get decided
	float motor_pos, max_motor_pos;
	float max_motor_delta = max_motor_pos - motor_pos;
 8004aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8004af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af8:	edc7 7a02 	vstr	s15, [r7, #8]
	if (PID_total_output < -motor_pos) {  // Lower bound
 8004afc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b00:	eef1 7a67 	vneg.f32	s15, s15
 8004b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d506      	bpl.n	8004b20 <tank_PID_pressure_control+0x100>
		motor_delta = -motor_pos;
 8004b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b16:	eef1 7a67 	vneg.f32	s15, s15
 8004b1a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004b1e:	e010      	b.n	8004b42 <tank_PID_pressure_control+0x122>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 8004b20:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	dd02      	ble.n	8004b38 <tank_PID_pressure_control+0x118>
		motor_delta = max_motor_delta;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	e004      	b.n	8004b42 <tank_PID_pressure_control+0x122>
	}
	else {
		motor_delta = PID_total_output;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b40:	671a      	str	r2, [r3, #112]	; 0x70
	}

	// Actuate motor to new position
	actuate_tank_motor_pos(tank, motor_pos + motor_delta);
 8004b42:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff0a 	bl	800496c <actuate_tank_motor_pos>

	// Log data
	// TODO: should this go here, or in a different function?
	// Maybe just update some struct variables and log them later
}
 8004b58:	bf00      	nop
 8004b5a:	3738      	adds	r7, #56	; 0x38
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	408f4000 	.word	0x408f4000

08004b64 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	ed93 7a00 	vldr	s14, [r3]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	d504      	bpl.n	8004b8e <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8004b84:	2101      	movs	r1, #1
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fefe 	bl	8004988 <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8004b8c:	e010      	b.n	8004bb0 <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	ed93 7a00 	vldr	s14, [r3]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba4:	dc00      	bgt.n	8004ba8 <tank_check_control_valve_threshold+0x44>
}
 8004ba6:	e003      	b.n	8004bb0 <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff feec 	bl	8004988 <actuate_tank_control_valve>
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	061a      	lsls	r2, r3, #24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	set_valve_channel(vlv_num, state);
 8004bec:	7afb      	ldrb	r3, [r7, #11]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fdd7 	bl	80057a4 <set_valve_channel>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3308      	adds	r3, #8
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	2338      	movs	r3, #56	; 0x38
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3307      	adds	r3, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	4619      	mov	r1, r3
 8004c24:	2330      	movs	r3, #48	; 0x30
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3306      	adds	r3, #6
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	2328      	movs	r3, #40	; 0x28
 8004c36:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3305      	adds	r3, #5
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	2320      	movs	r3, #32
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3303      	adds	r3, #3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3302      	adds	r3, #2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	3201      	adds	r2, #1
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fb fc1a 	bl	80004ac <__aeabi_i2d>
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <set_kp+0xb8>)
 8004c7e:	f7fb fda9 	bl	80007d4 <__aeabi_ddiv>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d80f      	bhi.n	8004cb0 <set_kp+0xb0>
		tanks[motor_num].K_p = gain;  // control
 8004c90:	7dfc      	ldrb	r4, [r7, #23]
 8004c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c96:	f7fb ff2d 	bl	8000af4 <__aeabi_d2f>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <set_kp+0xbc>)
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	015b      	lsls	r3, r3, #5
 8004ca2:	4423      	add	r3, r4
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3358      	adds	r3, #88	; 0x58
 8004caa:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8004cac:	f7fd f8aa 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd90      	pop	{r4, r7, pc}
 8004cb8:	40590000 	.word	0x40590000
 8004cbc:	20000454 	.word	0x20000454

08004cc0 <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2338      	movs	r3, #56	; 0x38
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3307      	adds	r3, #7
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	2330      	movs	r3, #48	; 0x30
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3306      	adds	r3, #6
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	2328      	movs	r3, #40	; 0x28
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3305      	adds	r3, #5
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	4619      	mov	r1, r3
 8004d04:	2320      	movs	r3, #32
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3302      	adds	r3, #2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	3201      	adds	r2, #1
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb fbba 	bl	80004ac <__aeabi_i2d>
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <set_ki+0xb8>)
 8004d3e:	f7fb fd49 	bl	80007d4 <__aeabi_ddiv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d80f      	bhi.n	8004d70 <set_ki+0xb0>
		tanks[motor_num].K_i = gain;  // control
 8004d50:	7dfc      	ldrb	r4, [r7, #23]
 8004d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d56:	f7fb fecd 	bl	8000af4 <__aeabi_d2f>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4907      	ldr	r1, [pc, #28]	; (8004d7c <set_ki+0xbc>)
 8004d5e:	4623      	mov	r3, r4
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	4423      	add	r3, r4
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	335c      	adds	r3, #92	; 0x5c
 8004d6a:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8004d6c:	f7fd f84a 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd90      	pop	{r4, r7, pc}
 8004d78:	40590000 	.word	0x40590000
 8004d7c:	20000454 	.word	0x20000454

08004d80 <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3308      	adds	r3, #8
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	2338      	movs	r3, #56	; 0x38
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3307      	adds	r3, #7
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3306      	adds	r3, #6
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	2328      	movs	r3, #40	; 0x28
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3305      	adds	r3, #5
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3303      	adds	r3, #3
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3302      	adds	r3, #2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	4313      	orrs	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	3201      	adds	r2, #1
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb fb5a 	bl	80004ac <__aeabi_i2d>
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <set_kd+0xb8>)
 8004dfe:	f7fb fce9 	bl	80007d4 <__aeabi_ddiv>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d80f      	bhi.n	8004e30 <set_kd+0xb0>
		tanks[motor_num].K_d = gain;
 8004e10:	7dfc      	ldrb	r4, [r7, #23]
 8004e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e16:	f7fb fe6d 	bl	8000af4 <__aeabi_d2f>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4907      	ldr	r1, [pc, #28]	; (8004e3c <set_kd+0xbc>)
 8004e1e:	4623      	mov	r3, r4
 8004e20:	015b      	lsls	r3, r3, #5
 8004e22:	4423      	add	r3, r4
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3360      	adds	r3, #96	; 0x60
 8004e2a:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8004e2c:	f7fc ffea 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	40590000 	.word	0x40590000
 8004e3c:	20000454 	.word	0x20000454

08004e40 <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fc f876 	bl	8000f44 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 8004e6a:	f7ff fae1 	bl	8004430 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 8004e82:	4803      	ldr	r0, [pc, #12]	; (8004e90 <wipe_flash+0x18>)
 8004e84:	f002 f967 	bl	8007156 <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000d94 	.word	0x20000d94

08004e94 <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <start_logging+0x28>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4805      	ldr	r0, [pc, #20]	; (8004ec0 <start_logging+0x2c>)
 8004eaa:	f002 fdb9 	bl	8007a20 <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 8004eae:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <start_logging+0x30>)
 8004eb0:	f002 f9ee 	bl	8007290 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000388 	.word	0x20000388
 8004ec0:	40020800 	.word	0x40020800
 8004ec4:	20000d94 	.word	0x20000d94

08004ec8 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <stop_logging+0x28>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 8004ed8:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <stop_logging+0x2c>)
 8004eda:	f002 f8c9 	bl	8007070 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <stop_logging+0x30>)
 8004ee4:	f002 fd9c 	bl	8007a20 <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000388 	.word	0x20000388
 8004ef4:	20000d94 	.word	0x20000d94
 8004ef8:	40020800 	.word	0x40020800

08004efc <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	061a      	lsls	r2, r3, #24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3303      	adds	r3, #3
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3302      	adds	r3, #2
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	4313      	orrs	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb fabb 	bl	80004ac <__aeabi_i2d>
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <set_stepper_pos+0x7c>)
 8004f3c:	f7fb fc4a 	bl	80007d4 <__aeabi_ddiv>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fb fdd4 	bl	8000af4 <__aeabi_d2f>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d80c      	bhi.n	8004f70 <set_stepper_pos+0x74>
		L6470_goto_motor_pos(&(tanks[motor_num].motor), position);
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	015b      	lsls	r3, r3, #5
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <set_stepper_pos+0x80>)
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fe67 	bl	8005c3e <L6470_goto_motor_pos>
		// TODO: update packet values
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40590000 	.word	0x40590000
 8004f7c:	20000454 	.word	0x20000454

08004f80 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d80a      	bhi.n	8004fac <set_stepper_zero+0x2c>
		L6470_zero_motor(&(tanks[motor_num].motor));
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <set_stepper_zero+0x34>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fea2 	bl	8005cf0 <L6470_zero_motor>
		// TODO: update position + packet values
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000454 	.word	0x20000454

08004fb8 <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	061a      	lsls	r2, r3, #24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3303      	adds	r3, #3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	3201      	adds	r2, #1
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fa5d 	bl	80004ac <__aeabi_i2d>
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <set_control_target_pressure+0x7c>)
 8004ff8:	f7fb fbec 	bl	80007d4 <__aeabi_ddiv>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	f7fb fd76 	bl	8000af4 <__aeabi_d2f>
 8005008:	4603      	mov	r3, r0
 800500a:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d80b      	bhi.n	800502a <set_control_target_pressure+0x72>
		tanks[tank_num].target_pres = target_pressure;
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	4908      	ldr	r1, [pc, #32]	; (8005038 <set_control_target_pressure+0x80>)
 8005016:	4613      	mov	r3, r2
 8005018:	015b      	lsls	r3, r3, #5
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3340      	adds	r3, #64	; 0x40
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8005026:	f7fc feed 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	408f4000 	.word	0x408f4000
 8005038:	20000454 	.word	0x20000454

0800503c <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e016      	b.n	800507a <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4a0f      	ldr	r2, [pc, #60]	; (800508c <ambientize_pressure_transducers+0x50>)
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	ed93 7a00 	vldr	s14, [r3]
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <ambientize_pressure_transducers+0x54>)
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <ambientize_pressure_transducers+0x54>)
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	3301      	adds	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b13      	cmp	r3, #19
 800507e:	d9e5      	bls.n	800504c <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 8005080:	f7fc fec0 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2000038c 	.word	0x2000038c
 8005090:	20000200 	.word	0x20000200

08005094 <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	061a      	lsls	r2, r3, #24
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3303      	adds	r3, #3
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3302      	adds	r3, #2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4313      	orrs	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	3201      	adds	r2, #1
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb f9ef 	bl	80004ac <__aeabi_i2d>
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <set_low_toggle_percent+0x98>)
 80050d4:	f7fb fb7e 	bl	80007d4 <__aeabi_ddiv>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	f7fb fd08 	bl	8000af4 <__aeabi_d2f>
 80050e4:	4603      	mov	r3, r0
 80050e6:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d819      	bhi.n	8005122 <set_low_toggle_percent+0x8e>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	490f      	ldr	r1, [pc, #60]	; (8005130 <set_low_toggle_percent+0x9c>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	015b      	lsls	r3, r3, #5
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3340      	adds	r3, #64	; 0x40
 80050fe:	ed93 7a00 	vldr	s14, [r3]
 8005102:	7bfa      	ldrb	r2, [r7, #15]
				* lower_threshold_pct;
 8005104:	edd7 7a02 	vldr	s15, [r7, #8]
 8005108:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 800510c:	4908      	ldr	r1, [pc, #32]	; (8005130 <set_low_toggle_percent+0x9c>)
 800510e:	4613      	mov	r3, r2
 8005110:	015b      	lsls	r3, r3, #5
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	334c      	adds	r3, #76	; 0x4c
 800511a:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 800511e:	f7fc fe71 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	408f4000 	.word	0x408f4000
 8005130:	20000454 	.word	0x20000454

08005134 <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	061a      	lsls	r2, r3, #24
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3303      	adds	r3, #3
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3302      	adds	r3, #2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	4313      	orrs	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	3201      	adds	r2, #1
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7fb f99f 	bl	80004ac <__aeabi_i2d>
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <set_high_toggle_percent+0x98>)
 8005174:	f7fb fb2e 	bl	80007d4 <__aeabi_ddiv>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	f7fb fcb8 	bl	8000af4 <__aeabi_d2f>
 8005184:	4603      	mov	r3, r0
 8005186:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d819      	bhi.n	80051c2 <set_high_toggle_percent+0x8e>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 800518e:	7bfa      	ldrb	r2, [r7, #15]
 8005190:	490f      	ldr	r1, [pc, #60]	; (80051d0 <set_high_toggle_percent+0x9c>)
 8005192:	4613      	mov	r3, r2
 8005194:	015b      	lsls	r3, r3, #5
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3340      	adds	r3, #64	; 0x40
 800519e:	ed93 7a00 	vldr	s14, [r3]
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
				* upper_threshold_pct;
 80051a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80051a8:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 80051ac:	4908      	ldr	r1, [pc, #32]	; (80051d0 <set_high_toggle_percent+0x9c>)
 80051ae:	4613      	mov	r3, r2
 80051b0:	015b      	lsls	r3, r3, #5
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3350      	adds	r3, #80	; 0x50
 80051ba:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 80051be:	f7fc fe21 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	408f4000 	.word	0x408f4000
 80051d0:	20000454 	.word	0x20000454

080051d4 <set_stepper_speed>:

void set_stepper_speed(uint8_t* data, uint8_t* status){
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	73fb      	strb	r3, [r7, #15]
	uint16_t target_speed = (data[2]<<8|data[1])/1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3302      	adds	r3, #2
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3301      	adds	r3, #1
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	81bb      	strh	r3, [r7, #12]
		//L6470_set_motor_max_speed(motor, target_speed)
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	if (telem_disabled) {
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <set_telem+0x34>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <set_telem+0x20>
		telem_disabled = 0;
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <set_telem+0x34>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
	else {
		telem_disabled = 1;
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005226:	e002      	b.n	800522e <set_telem+0x26>
		telem_disabled = 1;
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <set_telem+0x34>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000453 	.word	0x20000453

08005240 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d80a      	bhi.n	8005272 <set_presstank_status+0x32>
		tanks[tank_num].tank_enable = state;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	4907      	ldr	r1, [pc, #28]	; (800527c <set_presstank_status+0x3c>)
 8005260:	4613      	mov	r3, r2
 8005262:	015b      	lsls	r3, r3, #5
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	7bba      	ldrb	r2, [r7, #14]
 800526c:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 800526e:	f7fc fdc9 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000454 	.word	0x20000454

08005280 <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8005290:	2300      	movs	r3, #0
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e016      	b.n	80052c4 <ambientize_pot+0x44>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[i] = -epot[i]+pot_ambients[i];
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <ambientize_pot+0x58>)
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	ed93 7a00 	vldr	s14, [r3]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <ambientize_pot+0x5c>)
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <ambientize_pot+0x58>)
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	3301      	adds	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d9e5      	bls.n	8005296 <ambientize_pot+0x16>
	}
	save_nonvolatile_variables();
 80052ca:	f7fc fd9b 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000250 	.word	0x20000250
 80052dc:	20000448 	.word	0x20000448

080052e0 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d827      	bhi.n	800534c <led_write+0x6c>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <led_write+0x24>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005315 	.word	0x08005315
 8005308:	08005323 	.word	0x08005323
 800530c:	08005331 	.word	0x08005331
 8005310:	0800533f 	.word	0x0800533f
	case 0:
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, state);
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	461a      	mov	r2, r3
 8005318:	2101      	movs	r1, #1
 800531a:	480f      	ldr	r0, [pc, #60]	; (8005358 <led_write+0x78>)
 800531c:	f002 fb80 	bl	8007a20 <HAL_GPIO_WritePin>
		break;
 8005320:	e015      	b.n	800534e <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, state);
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	461a      	mov	r2, r3
 8005326:	2102      	movs	r1, #2
 8005328:	480b      	ldr	r0, [pc, #44]	; (8005358 <led_write+0x78>)
 800532a:	f002 fb79 	bl	8007a20 <HAL_GPIO_WritePin>
		break;
 800532e:	e00e      	b.n	800534e <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, state);
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	461a      	mov	r2, r3
 8005334:	2104      	movs	r1, #4
 8005336:	4808      	ldr	r0, [pc, #32]	; (8005358 <led_write+0x78>)
 8005338:	f002 fb72 	bl	8007a20 <HAL_GPIO_WritePin>
		break;
 800533c:	e007      	b.n	800534e <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, state);
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	461a      	mov	r2, r3
 8005342:	2108      	movs	r1, #8
 8005344:	4804      	ldr	r0, [pc, #16]	; (8005358 <led_write+0x78>)
 8005346:	f002 fb6b 	bl	8007a20 <HAL_GPIO_WritePin>
		break;
 800534a:	e000      	b.n	800534e <led_write+0x6e>
	default:
		break;
 800534c:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40020800 	.word	0x40020800

0800535c <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3303      	adds	r3, #3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	061a      	lsls	r2, r3, #24
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3302      	adds	r3, #2
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3301      	adds	r3, #1
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	4313      	orrs	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <set_system_clock+0x44>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000638 	.word	0x20000638

080053a4 <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
 80053b2:	e009      	b.n	80053c8 <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <remove_pressure_ambients+0x38>)
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b13      	cmp	r3, #19
 80053cc:	d9f2      	bls.n	80053b4 <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 80053ce:	f7fc fd19 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000200 	.word	0x20000200

080053e0 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_opening_delay_ms = mpv_delay_ms;
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <set_fuel_mpv_on_delay+0x24>)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	7113      	strb	r3, [r2, #4]
	save_nonvolatile_variables();
 80053f6:	f7fc fd05 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	2000055c 	.word	0x2000055c

08005408 <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3303      	adds	r3, #3
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	061a      	lsls	r2, r3, #24
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3302      	adds	r3, #2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3301      	adds	r3, #1
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	4313      	orrs	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_complete_time_ms = engine_test_duration_ms;
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <set_engine_test_duration+0x40>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6113      	str	r3, [r2, #16]
	save_nonvolatile_variables();
 800543c:	f7fc fce2 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	2000055c 	.word	0x2000055c

0800544c <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3301      	adds	r3, #1
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b21a      	sxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b21b      	sxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b21b      	sxth	r3, r3
 800546a:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <set_pid_start_delay+0x34>)
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	8113      	strh	r3, [r2, #8]
	save_nonvolatile_variables();
 8005472:	f7fc fcc7 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	2000055c 	.word	0x2000055c

08005484 <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3301      	adds	r3, #1
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	b21a      	sxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b21b      	sxth	r3, r3
 800549e:	4313      	orrs	r3, r2
 80054a0:	b21b      	sxth	r3, r3
 80054a2:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <set_ignitor_on_delay+0x34>)
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	8013      	strh	r3, [r2, #0]
	save_nonvolatile_variables();
 80054aa:	f7fc fcab 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000055c 	.word	0x2000055c

080054bc <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3301      	adds	r3, #1
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	b21a      	sxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b21b      	sxth	r3, r3
 80054da:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 80054dc:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <set_ignitor_high_duration+0x34>)
 80054de:	89fb      	ldrh	r3, [r7, #14]
 80054e0:	8053      	strh	r3, [r2, #2]
	save_nonvolatile_variables();
 80054e2:	f7fc fc8f 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	2000055c 	.word	0x2000055c

080054f4 <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3301      	adds	r3, #1
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	b21a      	sxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b21b      	sxth	r3, r3
 800550e:	4313      	orrs	r3, r2
 8005510:	b21b      	sxth	r3, r3
 8005512:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 8005514:	4a04      	ldr	r2, [pc, #16]	; (8005528 <set_film_cooling_on_delay+0x34>)
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 800551a:	f7fc fc73 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2000055c 	.word	0x2000055c
 800552c:	00000000 	.word	0x00000000

08005530 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3307      	adds	r3, #7
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	2338      	movs	r3, #56	; 0x38
 8005544:	409a      	lsls	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3306      	adds	r3, #6
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	2330      	movs	r3, #48	; 0x30
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3305      	adds	r3, #5
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	2328      	movs	r3, #40	; 0x28
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	4619      	mov	r1, r3
 800556e:	2320      	movs	r3, #32
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3303      	adds	r3, #3
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3302      	adds	r3, #2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3301      	adds	r3, #1
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	4313      	orrs	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	7812      	ldrb	r2, [r2, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f7fa ff86 	bl	80004ac <__aeabi_i2d>
 80055a0:	a30c      	add	r3, pc, #48	; (adr r3, 80055d4 <set_init_motor_deg_factor+0xa4>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fb f915 	bl	80007d4 <__aeabi_ddiv>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 80055b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055b6:	f7fb fa9d 	bl	8000af4 <__aeabi_d2f>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <set_init_motor_deg_factor+0xa0>)
 80055be:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 80055c0:	f7fc fc20 	bl	8001e04 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	f3af 8000 	nop.w
 80055d0:	20000378 	.word	0x20000378
 80055d4:	00000000 	.word	0x00000000
 80055d8:	40c38800 	.word	0x40c38800

080055dc <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <clear_status_flags+0x1c>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20000368 	.word	0x20000368

080055fc <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <set_pt_lower_voltage>:

void set_pt_lower_voltage(uint8_t* data, uint8_t* status){
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	73fb      	strb	r3, [r7, #15]
	float lower_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	061a      	lsls	r2, r3, #24
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3303      	adds	r3, #3
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3302      	adds	r3, #2
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	4313      	orrs	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	3201      	adds	r2, #1
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f7fa ff19 	bl	80004ac <__aeabi_i2d>
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <set_pt_lower_voltage+0x74>)
 8005680:	f7fb f8a8 	bl	80007d4 <__aeabi_ddiv>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	f7fb fa32 	bl	8000af4 <__aeabi_d2f>
 8005690:	4603      	mov	r3, r0
 8005692:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b13      	cmp	r3, #19
 8005698:	d807      	bhi.n	80056aa <set_pt_lower_voltage+0x6a>
		pt_cal_lower_voltage[pt_num] = lower_voltage;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <set_pt_lower_voltage+0x78>)
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80056a6:	f7fc fbad 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40240000 	.word	0x40240000
 80056b8:	20000258 	.word	0x20000258

080056bc <set_pt_upper_voltage>:

void set_pt_upper_voltage(uint8_t* data, uint8_t* status){
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	73fb      	strb	r3, [r7, #15]
	float upper_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	061a      	lsls	r2, r3, #24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3303      	adds	r3, #3
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3302      	adds	r3, #2
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	4313      	orrs	r3, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	3201      	adds	r2, #1
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fa fedb 	bl	80004ac <__aeabi_i2d>
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <set_pt_upper_voltage+0x74>)
 80056fc:	f7fb f86a 	bl	80007d4 <__aeabi_ddiv>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	f7fb f9f4 	bl	8000af4 <__aeabi_d2f>
 800570c:	4603      	mov	r3, r0
 800570e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b13      	cmp	r3, #19
 8005714:	d807      	bhi.n	8005726 <set_pt_upper_voltage+0x6a>
		pt_cal_upper_voltage[pt_num] = upper_voltage;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	4a06      	ldr	r2, [pc, #24]	; (8005734 <set_pt_upper_voltage+0x78>)
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8005722:	f7fc fb6f 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40240000 	.word	0x40240000
 8005734:	200002a8 	.word	0x200002a8

08005738 <set_pt_upper_pressure>:

void set_pt_upper_pressure(uint8_t* data, uint8_t* status){
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	73fb      	strb	r3, [r7, #15]
	float pressure_range = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1.0;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	061a      	lsls	r2, r3, #24
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3303      	adds	r3, #3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3302      	adds	r3, #2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	4313      	orrs	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	3201      	adds	r2, #1
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	4313      	orrs	r3, r2
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fe9d 	bl	80004ac <__aeabi_i2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f7fb f9bb 	bl	8000af4 <__aeabi_d2f>
 800577e:	4603      	mov	r3, r0
 8005780:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b13      	cmp	r3, #19
 8005786:	d807      	bhi.n	8005798 <set_pt_upper_pressure+0x60>
		pt_cal_upper_pressure[pt_num] = pressure_range;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	4a05      	ldr	r2, [pc, #20]	; (80057a0 <set_pt_upper_pressure+0x68>)
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8005794:	f7fc fb36 	bl	8001e04 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	200002f8 	.word	0x200002f8

080057a4 <set_valve_channel>:
		en_vlv11_Pin,
		en_vlv12_Pin,
		en_vlv13_Pin
};

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
	// Error checking
	if (vlv_num >= NUM_VALVES) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b0d      	cmp	r3, #13
 80057b4:	d823      	bhi.n	80057fe <set_valve_channel+0x5a>
		return;
	}

	// Set the correct GPIO pin
	HAL_GPIO_WritePin(VALVE_GPIO_PORTS[vlv_num], VALVE_GPIO_PINS[vlv_num], vlv_state);
 80057b6:	4a14      	ldr	r2, [pc, #80]	; (8005808 <set_valve_channel+0x64>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <set_valve_channel+0x68>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	4619      	mov	r1, r3
 80057ca:	f002 f929 	bl	8007a20 <HAL_GPIO_WritePin>

	// Update valve_states accordingly
    uint32_t vlv_bit = 1 << vlv_num;
 80057ce:	2201      	movs	r2, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	60fb      	str	r3, [r7, #12]
    uint32_t vlv_value = vlv_state << vlv_num;
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	60bb      	str	r3, [r7, #8]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <set_valve_channel+0x6c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4013      	ands	r3, r2
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <set_valve_channel+0x6c>)
 80057ee:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;  // Set the new valve state
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <set_valve_channel+0x6c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	4a05      	ldr	r2, [pc, #20]	; (8005810 <set_valve_channel+0x6c>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e000      	b.n	8005800 <set_valve_channel+0x5c>
		return;
 80057fe:	bf00      	nop
}
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000188 	.word	0x20000188
 800580c:	200001c0 	.word	0x200001c0
 8005810:	20000354 	.word	0x20000354

08005814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800584c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800581a:	e003      	b.n	8005824 <LoopCopyDataInit>

0800581c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800581e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005822:	3104      	adds	r1, #4

08005824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005824:	480b      	ldr	r0, [pc, #44]	; (8005854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800582a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800582c:	d3f6      	bcc.n	800581c <CopyDataInit>
  ldr  r2, =_sbss
 800582e:	4a0b      	ldr	r2, [pc, #44]	; (800585c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005830:	e002      	b.n	8005838 <LoopFillZerobss>

08005832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005834:	f842 3b04 	str.w	r3, [r2], #4

08005838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800583a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800583c:	d3f9      	bcc.n	8005832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800583e:	f7ff f87f 	bl	8004940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005842:	f004 ff2b 	bl	800a69c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005846:	f7fb fc5d 	bl	8001104 <main>
  bx  lr    
 800584a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800584c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005850:	0800a840 	.word	0x0800a840
  ldr  r0, =_sdata
 8005854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005858:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800585c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8005860:	200022d4 	.word	0x200022d4

08005864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005864:	e7fe      	b.n	8005864 <ADC_IRQHandler>

08005866 <L6470_SPI_CS_delay>:
#define L6470_STATUS_BIT_STEP_LOSS_A   ((uint16_t)0x2000)  // (active low, latched) Stall detected on bridge A
#define L6470_STATUS_BIT_STEP_LOSS_B   ((uint16_t)0x4000)  // (active low, latched) Stall detected on bridge B
#define L6470_STATUS_BIT_SCK_MOD       ((uint16_t)0x8000)  // (unused) step-clock mode


void L6470_SPI_CS_delay(L6470_Motor_IC *motor) {
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
	// Need to keep CS high >= 800ns in between SPI byte transmissions
	// Assume max HCLK=180MHz, 1 cycle=5.5555ns
	// 145 cycles required to delay that much
	// Do 150 cycles

	for (uint8_t i = 0; i < 150; i++) {
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
 8005872:	e003      	b.n	800587c <L6470_SPI_CS_delay+0x16>
		asm("nop"); // Delay next cycle
 8005874:	bf00      	nop
	for (uint8_t i = 0; i < 150; i++) {
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	3301      	adds	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b95      	cmp	r3, #149	; 0x95
 8005880:	d9f8      	bls.n	8005874 <L6470_SPI_CS_delay+0xe>
	}
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <L6470_SPI_transmit_byte>:
/**
 * Send a byte to the motor chip
 *
 * @param tx: Byte to transmit to the motor chip
 */
void L6470_SPI_transmit_byte(L6470_Motor_IC *motor, uint8_t tx) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6858      	ldr	r0, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	891b      	ldrh	r3, [r3, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	4619      	mov	r1, r3
 80058a8:	f002 f8ba 	bl	8007a20 <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Transmit(motor->hspi, &tx, 1,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	1cf9      	adds	r1, r7, #3
 80058b2:	23ff      	movs	r3, #255	; 0xff
 80058b4:	2201      	movs	r2, #1
 80058b6:	f002 fe84 	bl	80085c2 <HAL_SPI_Transmit>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6858      	ldr	r0, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	891b      	ldrh	r3, [r3, #8]
 80058ca:	2201      	movs	r2, #1
 80058cc:	4619      	mov	r1, r3
 80058ce:	f002 f8a7 	bl	8007a20 <HAL_GPIO_WritePin>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <L6470_SPI_receive_byte>:

/**
 * Receive a byte from the motor chip and return its value.
 */
uint8_t L6470_SPI_receive_byte(L6470_Motor_IC *motor) {
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
	uint8_t rx;
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6858      	ldr	r0, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	891b      	ldrh	r3, [r3, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	4619      	mov	r1, r3
 80058ee:	f002 f897 	bl	8007a20 <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Receive(motor->hspi, &rx, 1,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f107 010f 	add.w	r1, r7, #15
 80058fa:	23ff      	movs	r3, #255	; 0xff
 80058fc:	2201      	movs	r2, #1
 80058fe:	f002 ff9c 	bl	800883a <HAL_SPI_Receive>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6858      	ldr	r0, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	891b      	ldrh	r3, [r3, #8]
 8005912:	2201      	movs	r2, #1
 8005914:	4619      	mov	r1, r3
 8005916:	f002 f883 	bl	8007a20 <HAL_GPIO_WritePin>
	return rx;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <L6470_write_register>:
	return return_val;
}


void L6470_write_register(L6470_Motor_IC *motor, uint8_t reg_addr,
		uint32_t reg_val) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	72fb      	strb	r3, [r7, #11]
	// Similar logic as L6470_read_register(), but write instead
	// User handles matching the right length of reg_val to reg_addr
	uint8_t tx = L6470_CMD_SETPARAM | reg_addr;
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	75fb      	strb	r3, [r7, #23]
	uint32_t shifted_byte = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800593a:	b672      	cpsid	i
}
 800593c:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff ffa4 	bl	8005890 <L6470_SPI_transmit_byte>

	// 3 byte registers
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d005      	beq.n	800595a <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d002      	beq.n	800595a <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_SPEED_ADDR) {
 8005954:	7afb      	ldrb	r3, [r7, #11]
 8005956:	2b04      	cmp	r3, #4
 8005958:	d10d      	bne.n	8005976 <L6470_write_register+0x52>
		shifted_byte = reg_val;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 16;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ff7e 	bl	8005866 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	4619      	mov	r1, r3
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff8d 	bl	8005890 <L6470_SPI_transmit_byte>
	}

	// Registers >= 2 byte
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 8005976:	7afb      	ldrb	r3, [r7, #11]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d020      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_EL_POS_ADDR
 800597c:	7afb      	ldrb	r3, [r7, #11]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d01d      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d01a      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_SPEED_ADDR
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d017      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_ACC_ADDR
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d014      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_DEC_ADDR
 8005994:	7afb      	ldrb	r3, [r7, #11]
 8005996:	2b06      	cmp	r3, #6
 8005998:	d011      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MAX_SPEED_ADDR
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	2b07      	cmp	r3, #7
 800599e:	d00e      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MIN_SPEED_ADDR
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d00b      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_FS_SPD_ADDR
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	2b15      	cmp	r3, #21
 80059aa:	d008      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_INT_SPEED_ADDR
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	2b0d      	cmp	r3, #13
 80059b0:	d005      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_CONFIG_ADDR
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	2b18      	cmp	r3, #24
 80059b6:	d002      	beq.n	80059be <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_STATUS_ADDR) {
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	2b19      	cmp	r3, #25
 80059bc:	d10d      	bne.n	80059da <L6470_write_register+0xb6>
		shifted_byte = reg_val;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 8;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff4c 	bl	8005866 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff ff5b 	bl	8005890 <L6470_SPI_transmit_byte>
	}

	// All registers are >= 1 byte
	shifted_byte = reg_val;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	613b      	str	r3, [r7, #16]
	L6470_SPI_CS_delay(motor);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ff41 	bl	8005866 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	4619      	mov	r1, r3
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff50 	bl	8005890 <L6470_SPI_transmit_byte>

	L6470_SPI_CS_delay(motor);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ff38 	bl	8005866 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 80059f6:	b662      	cpsie	i
}
 80059f8:	bf00      	nop

	__enable_irq();

	return;
 80059fa:	bf00      	nop
}
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <L6470_get_status>:

/**
 * Read the status register and update the struct's status variables
 * Datasheet pg 55
 */
void L6470_get_status(L6470_Motor_IC *motor) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

	uint8_t tx = L6470_CMD_GETSTATUS;
 8005a0c:	23d0      	movs	r3, #208	; 0xd0
 8005a0e:	75fb      	strb	r3, [r7, #23]
	uint8_t rx[2] = {0};
 8005a10:	2300      	movs	r3, #0
 8005a12:	81bb      	strh	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a14:	b672      	cpsid	i
}
 8005a16:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff37 	bl	8005890 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff1f 	bl	8005866 <L6470_SPI_CS_delay>
	rx[0] = L6470_SPI_receive_byte(motor);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ff56 	bl	80058da <L6470_SPI_receive_byte>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	733b      	strb	r3, [r7, #12]
	L6470_SPI_CS_delay(motor);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff17 	bl	8005866 <L6470_SPI_CS_delay>
	rx[1] = L6470_SPI_receive_byte(motor);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ff4e 	bl	80058da <L6470_SPI_receive_byte>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a42:	b662      	cpsie	i
}
 8005a44:	bf00      	nop
	__enable_irq();

	uint16_t status_reg = ((uint16_t)rx[0] << 8) | ((uint16_t)rx[1]);
 8005a46:	7b3b      	ldrb	r3, [r7, #12]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	b21a      	sxth	r2, r3
 8005a4c:	7b7b      	ldrb	r3, [r7, #13]
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	82bb      	strh	r3, [r7, #20]

	//uint32_t status_reg_read = L6470_read_register(motor, L6470_PARAM_STATUS_ADDR);

	// 1 bit statuses ("casting as bool" to avoid integer overflow)
	motor->HiZ_status         =  (status_reg & L6470_STATUS_BIT_HiZ);
 8005a56:	8abb      	ldrh	r3, [r7, #20]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	76da      	strb	r2, [r3, #27]
	motor->BUSY_status        = 0 != (status_reg & L6470_STATUS_BIT_BUSY);
 8005a64:	8abb      	ldrh	r3, [r7, #20]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor->SW_F_status        = 0 != (status_reg & L6470_STATUS_BIT_SW_F);
 8005a7c:	8abb      	ldrh	r3, [r7, #20]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	771a      	strb	r2, [r3, #28]
	motor->SW_EVN_status      = 0 != (status_reg & L6470_STATUS_BIT_SW_EVN);
 8005a92:	8abb      	ldrh	r3, [r7, #20]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	775a      	strb	r2, [r3, #29]
	motor->DIR_status         = 0 != (status_reg & L6470_STATUS_BIT_DIR);
 8005aa8:	8abb      	ldrh	r3, [r7, #20]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	779a      	strb	r2, [r3, #30]
	motor->NOTPERF_CMD_status = 0 != (status_reg & L6470_STATUS_BIT_NOTPERF_CMD);
 8005abe:	8abb      	ldrh	r3, [r7, #20]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	77da      	strb	r2, [r3, #31]
	motor->WRONG_CMD_status   = 0 != (status_reg & L6470_STATUS_BIT_WRONG_CMD);
 8005ad4:	8abb      	ldrh	r3, [r7, #20]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f883 2020 	strb.w	r2, [r3, #32]
	motor->UVLO_status        = 0 != (status_reg & L6470_STATUS_BIT_UVLO);
 8005aec:	8abb      	ldrh	r3, [r7, #20]
 8005aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor->TH_WRN_status      = 0 != (status_reg & L6470_STATUS_BIT_TH_WRN);
 8005b04:	8abb      	ldrh	r3, [r7, #20]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	motor->TH_SD_status       = 0 != (status_reg & L6470_STATUS_BIT_TH_SD);
 8005b1c:	8abb      	ldrh	r3, [r7, #20]
 8005b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	motor->OCD_status         = 0 != (status_reg & L6470_STATUS_BIT_OCD);
 8005b34:	8abb      	ldrh	r3, [r7, #20]
 8005b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	motor->STEP_LOSS_A_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_A);
 8005b4c:	8abb      	ldrh	r3, [r7, #20]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	motor->STEP_LOSS_B_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_B);
 8005b64:	8abb      	ldrh	r3, [r7, #20]
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	motor->SCK_MOD_status     = 0 != (status_reg & L6470_STATUS_BIT_SCK_MOD);
 8005b7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	0bdb      	lsrs	r3, r3, #15
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	// 2 bit motor status
	uint8_t motor_status_1    = status_reg & L6470_STATUS_BIT_MOT_STATUS_1;
 8005b8e:	8abb      	ldrh	r3, [r7, #20]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	74fb      	strb	r3, [r7, #19]
	uint8_t motor_status_0    = status_reg & L6470_STATUS_BIT_MOT_STATUS_0;
 8005b98:	8abb      	ldrh	r3, [r7, #20]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	74bb      	strb	r3, [r7, #18]

	uint8_t motor_status = (motor_status_1 << 1) | (motor_status_0);
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	b25a      	sxtb	r2, r3
 8005ba8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	747b      	strb	r3, [r7, #17]
	switch(motor_status) {
 8005bb2:	7c7b      	ldrb	r3, [r7, #17]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d81b      	bhi.n	8005bf0 <L6470_get_status+0x1ec>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <L6470_get_status+0x1bc>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005bd9 	.word	0x08005bd9
 8005bc8:	08005be1 	.word	0x08005be1
 8005bcc:	08005be9 	.word	0x08005be9
	case 0:
		motor->MOT_status = Stopped;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	769a      	strb	r2, [r3, #26]
		break;
 8005bd6:	e00c      	b.n	8005bf2 <L6470_get_status+0x1ee>
	case 1:
		motor->MOT_status = Acceleration;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	769a      	strb	r2, [r3, #26]
		break;
 8005bde:	e008      	b.n	8005bf2 <L6470_get_status+0x1ee>
	case 2:
		motor->MOT_status = Deceleration;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	769a      	strb	r2, [r3, #26]
		break;
 8005be6:	e004      	b.n	8005bf2 <L6470_get_status+0x1ee>
	case 3:
		motor->MOT_status = Constant_Speed;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2203      	movs	r2, #3
 8005bec:	769a      	strb	r2, [r3, #26]
		break;
 8005bee:	e000      	b.n	8005bf2 <L6470_get_status+0x1ee>
	default:
		break;
 8005bf0:	bf00      	nop
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <L6470_init_motor>:


void L6470_init_motor(L6470_Motor_IC* motor, L6470_Stepping_Mode mode, float step_angle) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	460b      	mov	r3, r1
 8005c06:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c0a:	72fb      	strb	r3, [r7, #11]
	// Call L6470_get_status to reset FLAG
	L6470_get_status(motor);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fef9 	bl	8005a04 <L6470_get_status>

	// Configure the stepping mode
	motor->step_mode = mode;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	7afa      	ldrb	r2, [r7, #11]
 8005c16:	765a      	strb	r2, [r3, #25]


	// When the stepping mode is changed, the ABS_POS register is invalidated, so zero it
	L6470_zero_motor(motor);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f869 	bl	8005cf0 <L6470_zero_motor>
	L6470_write_register(motor, L6470_PARAM_STEP_MODE_ADDR, mode);
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	461a      	mov	r2, r3
 8005c22:	2116      	movs	r1, #22
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fe7d 	bl	8005924 <L6470_write_register>

	// Store the step angle in the struct
	motor->step_angle = step_angle;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Stop the motor in case it's moving.
	// This happens when the microcontroller resets without losing
	// power while the motor is moving.
	L6470_stop_motor(motor);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f873 	bl	8005d1c <L6470_stop_motor>

	return;
 8005c36:	bf00      	nop
}
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <L6470_goto_motor_pos>:

	//uint32_t check = L6470_read_register(motor, L6470_PARAM_DEC_ADDR);
}


void L6470_goto_motor_pos(L6470_Motor_IC* motor, float abs_pos_degree) {
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	ed87 0a00 	vstr	s0, [r7]
	uint32_t abs_pos_step = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]

	//Convert degrees to steps
	if (abs_pos_degree < 0) {
 8005c4e:	edd7 7a00 	vldr	s15, [r7]
 8005c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	d514      	bpl.n	8005c86 <L6470_goto_motor_pos+0x48>
		abs_pos_step = (uint32_t)(abs_pos_degree * -1 / motor->step_angle);
 8005c5c:	edd7 7a00 	vldr	s15, [r7]
 8005c60:	eef1 6a67 	vneg.f32	s13, s15
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c72:	ee17 3a90 	vmov	r3, s15
 8005c76:	60fb      	str	r3, [r7, #12]
		abs_pos_step -= 1;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
		abs_pos_step = ~abs_pos_step;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e00b      	b.n	8005c9e <L6470_goto_motor_pos+0x60>
	}
	else { // Positive (forward direction)
		abs_pos_step = (uint32_t)(abs_pos_degree / motor->step_angle);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005c8c:	edd7 6a00 	vldr	s13, [r7]
 8005c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c98:	ee17 3a90 	vmov	r3, s15
 8005c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c9e:	b672      	cpsid	i
}
 8005ca0:	bf00      	nop
	}

	__disable_irq();
	L6470_SPI_transmit_byte(motor, L6470_CMD_GOTO);
 8005ca2:	2160      	movs	r1, #96	; 0x60
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fdf3 	bl	8005890 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fddb 	bl	8005866 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 16));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fde9 	bl	8005890 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fdd1 	bl	8005866 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 8));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fddf 	bl	8005890 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fdc7 	bl	8005866 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)abs_pos_step);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fdd6 	bl	8005890 <L6470_SPI_transmit_byte>
  __ASM volatile ("cpsie i" : : : "memory");
 8005ce4:	b662      	cpsie	i
}
 8005ce6:	bf00      	nop
	__enable_irq();

	return;
 8005ce8:	bf00      	nop
}
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <L6470_zero_motor>:


void L6470_zero_motor(L6470_Motor_IC* motor) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	uint8_t tx = L6470_CMD_RESETPOS;
 8005cf8:	23d8      	movs	r3, #216	; 0xd8
 8005cfa:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cfc:	b672      	cpsid	i
}
 8005cfe:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fdc3 	bl	8005890 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fdab 	bl	8005866 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 8005d10:	b662      	cpsie	i
}
 8005d12:	bf00      	nop
	__enable_irq();

	return;
 8005d14:	bf00      	nop
}
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <L6470_stop_motor>:

	return;
}


void L6470_stop_motor(L6470_Motor_IC* motor) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	L6470_SPI_transmit_byte(motor, L6470_CMD_HARDHIZ);
 8005d24:	21a8      	movs	r1, #168	; 0xa8
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fdb2 	bl	8005890 <L6470_SPI_transmit_byte>
	return;
 8005d2c:	bf00      	nop
}
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <init_board+0x24>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 8005d44:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <init_board+0x28>)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	7013      	strb	r3, [r2, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000c80 	.word	0x20000c80
 8005d5c:	200007d7 	.word	0x200007d7

08005d60 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 8005d6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d109      	bne.n	8005d8c <init_data+0x2c>
	    // repack CLB_telem_data
	    pack_telem_data(CLB_telem_data);
 8005d78:	480b      	ldr	r0, [pc, #44]	; (8005da8 <init_data+0x48>)
 8005d7a:	f7fc fc23 	bl	80025c4 <pack_telem_data>
		CLB_buffer = CLB_telem_data;
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <init_data+0x4c>)
 8005d80:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <init_data+0x48>)
 8005d82:	601a      	str	r2, [r3, #0]
		CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <init_data+0x50>)
 8005d86:	22f1      	movs	r2, #241	; 0xf1
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e005      	b.n	8005d98 <init_data+0x38>
	} else {				// custom telem
		CLB_buffer = buffer;
 8005d8c:	4a07      	ldr	r2, [pc, #28]	; (8005dac <init_data+0x4c>)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 8005d92:	897a      	ldrh	r2, [r7, #10]
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <init_data+0x50>)
 8005d96:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 8005d98:	4a06      	ldr	r2, [pc, #24]	; (8005db4 <init_data+0x54>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000a04 	.word	0x20000a04
 8005dac:	2000058c 	.word	0x2000058c
 8005db0:	20000af6 	.word	0x20000af6
 8005db4:	20000c90 	.word	0x20000c90

08005db8 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b08d      	sub	sp, #52	; 0x34
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 8005dce:	2300      	movs	r3, #0
 8005dd0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 8005dd2:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <send_data+0x1cc>)
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 8005dd8:	2300      	movs	r3, #0
 8005dda:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 8005ddc:	23fd      	movs	r3, #253	; 0xfd
 8005dde:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 8005dee:	4b66      	ldr	r3, [pc, #408]	; (8005f88 <send_data+0x1d0>)
 8005df0:	681c      	ldr	r4, [r3, #0]
 8005df2:	f000 fa3f 	bl	8006274 <compute_checksum>
 8005df6:	4603      	mov	r3, r0
 8005df8:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 8005dfa:	4b63      	ldr	r3, [pc, #396]	; (8005f88 <send_data+0x1d0>)
 8005dfc:	681c      	ldr	r4, [r3, #0]
 8005dfe:	f000 fa43 	bl	8006288 <compute_packet_sz>
 8005e02:	4603      	mov	r3, r0
 8005e04:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 8005e06:	4b60      	ldr	r3, [pc, #384]	; (8005f88 <send_data+0x1d0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f107 0208 	add.w	r2, r7, #8
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f9b1 	bl	8006178 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 8005e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e18:	4a5c      	ldr	r2, [pc, #368]	; (8005f8c <send_data+0x1d4>)
 8005e1a:	1899      	adds	r1, r3, r2
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	220c      	movs	r2, #12
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f9f9 	bl	800621a <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 8005e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 8005e34:	e08c      	b.n	8005f50 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 8005e36:	8bfa      	ldrh	r2, [r7, #30]
 8005e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 8005e3e:	8bba      	ldrh	r2, [r7, #28]
 8005e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 8005e46:	8b7a      	ldrh	r2, [r7, #26]
 8005e48:	8b3b      	ldrh	r3, [r7, #24]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf28      	it	cs
 8005e4e:	4613      	movcs	r3, r2
 8005e50:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 8005e52:	4b4f      	ldr	r3, [pc, #316]	; (8005f90 <send_data+0x1d8>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e58:	18d0      	adds	r0, r2, r3
 8005e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e5c:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <send_data+0x1d4>)
 8005e5e:	4413      	add	r3, r2
 8005e60:	8afa      	ldrh	r2, [r7, #22]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f000 f9d9 	bl	800621a <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8005e68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e6a:	8afb      	ldrh	r3, [r7, #22]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8005e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e72:	8afb      	ldrh	r3, [r7, #22]
 8005e74:	4413      	add	r3, r2
 8005e76:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d121      	bne.n	8005ec6 <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8005e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e84:	461a      	mov	r2, r3
 8005e86:	4943      	ldr	r1, [pc, #268]	; (8005f94 <send_data+0x1dc>)
 8005e88:	4840      	ldr	r0, [pc, #256]	; (8005f8c <send_data+0x1d4>)
 8005e8a:	f000 fa2b 	bl	80062e4 <stuff_packet>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 8005e92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e94:	8bfb      	ldrh	r3, [r7, #30]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d10d      	bne.n	8005eb6 <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 8005e9a:	8c3b      	ldrh	r3, [r7, #32]
 8005e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8005e9e:	d807      	bhi.n	8005eb0 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8005ea0:	8c3b      	ldrh	r3, [r7, #32]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	843a      	strh	r2, [r7, #32]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <send_data+0x1dc>)
 8005eaa:	2100      	movs	r1, #0
 8005eac:	5499      	strb	r1, [r3, r2]
 8005eae:	e002      	b.n	8005eb6 <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	8c3a      	ldrh	r2, [r7, #32]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f900 	bl	80060c4 <transmit_packet>
 8005ec4:	e03e      	b.n	8005f44 <send_data+0x18c>
		} else if (type == CLB_Flash) {
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d13b      	bne.n	8005f44 <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	4413      	add	r3, r2
 8005ed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	482c      	ldr	r0, [pc, #176]	; (8005f8c <send_data+0x1d4>)
 8005eda:	f000 fa03 	bl	80062e4 <stuff_packet>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 8005ee2:	8c3b      	ldrh	r3, [r7, #32]
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	4413      	add	r3, r2
 8005ee8:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	8c3b      	ldrh	r3, [r7, #32]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 8005efe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d115      	bne.n	8005f32 <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 8005f06:	8c3b      	ldrh	r3, [r7, #32]
 8005f08:	2bfe      	cmp	r3, #254	; 0xfe
 8005f0a:	d80f      	bhi.n	8005f2c <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8005f16:	b28a      	uxth	r2, r1
 8005f18:	3201      	adds	r2, #1
 8005f1a:	b292      	uxth	r2, r2
 8005f1c:	b210      	sxth	r0, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	80d0      	strh	r0, [r2, #6]
 8005f22:	460a      	mov	r2, r1
 8005f24:	4413      	add	r3, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da03      	bge.n	8005f44 <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005f42:	e00b      	b.n	8005f5c <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 8005f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f46:	8bbb      	ldrh	r3, [r7, #28]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d301      	bcc.n	8005f50 <send_data+0x198>
			ping_pos = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <send_data+0x1cc>)
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f56:	429a      	cmp	r2, r3
 8005f58:	f4ff af6d 	bcc.w	8005e36 <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 8005f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <send_data+0x1dc>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f8a7 	bl	80060c4 <transmit_packet>
	}

	return status; // TODO: return better error handling
 8005f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3734      	adds	r7, #52	; 0x34
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd90      	pop	{r4, r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000af6 	.word	0x20000af6
 8005f88:	20000c90 	.word	0x20000c90
 8005f8c:	20000864 	.word	0x20000864
 8005f90:	2000058c 	.word	0x2000058c
 8005f94:	200006d8 	.word	0x200006d8

08005f98 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	83fb      	strh	r3, [r7, #30]
 8005faa:	e009      	b.n	8005fc0 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 8005fac:	8bfb      	ldrh	r3, [r7, #30]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	441a      	add	r2, r3
 8005fb2:	8bfb      	ldrh	r3, [r7, #30]
 8005fb4:	7811      	ldrb	r1, [r2, #0]
 8005fb6:	4a2d      	ldr	r2, [pc, #180]	; (800606c <receive_data+0xd4>)
 8005fb8:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8005fba:	8bfb      	ldrh	r3, [r7, #30]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	83fb      	strh	r3, [r7, #30]
 8005fc0:	8bfa      	ldrh	r2, [r7, #30]
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3f1      	bcc.n	8005fac <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4928      	ldr	r1, [pc, #160]	; (8006070 <receive_data+0xd8>)
 8005fce:	4827      	ldr	r0, [pc, #156]	; (800606c <receive_data+0xd4>)
 8005fd0:	f000 f9ee 	bl	80063b0 <unstuff_packet>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 8005fd8:	4925      	ldr	r1, [pc, #148]	; (8006070 <receive_data+0xd8>)
 8005fda:	4826      	ldr	r0, [pc, #152]	; (8006074 <receive_data+0xdc>)
 8005fdc:	f000 f886 	bl	80060ec <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 8005fe0:	4b24      	ldr	r3, [pc, #144]	; (8006074 <receive_data+0xdc>)
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f939 	bl	800625c <verify_checksum>
 8005fea:	4603      	mov	r3, r0
 8005fec:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 8005fee:	7efb      	ldrb	r3, [r7, #27]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e034      	b.n	8006062 <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <receive_data+0xdc>)
 8005ffe:	789a      	ldrb	r2, [r3, #2]
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <receive_data+0xe0>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d129      	bne.n	800605c <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <receive_data+0xdc>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b33      	cmp	r3, #51	; 0x33
 800600e:	d827      	bhi.n	8006060 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <receive_data+0xdc>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	4b19      	ldr	r3, [pc, #100]	; (800607c <receive_data+0xe4>)
 8006018:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800601c:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 800601e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d01b      	beq.n	8006060 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <receive_data+0xdc>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b21b      	sxth	r3, r3
 800602e:	8bba      	ldrh	r2, [r7, #28]
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f82a 	bl	800608c <validate_command>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d110      	bne.n	8006060 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 800603e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006042:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <receive_data+0xe8>)
 8006044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006048:	480e      	ldr	r0, [pc, #56]	; (8006084 <receive_data+0xec>)
 800604a:	f107 0217 	add.w	r2, r7, #23
 800604e:	4611      	mov	r1, r2
 8006050:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <receive_data+0xdc>)
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <receive_data+0xf0>)
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e001      	b.n	8006060 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 800605c:	2302      	movs	r3, #2
 800605e:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	200006d8 	.word	0x200006d8
 8006070:	20000864 	.word	0x20000864
 8006074:	20000c80 	.word	0x20000c80
 8006078:	200007d7 	.word	0x200007d7
 800607c:	20000004 	.word	0x20000004
 8006080:	200000d4 	.word	0x200000d4
 8006084:	20000870 	.word	0x20000870
 8006088:	20000af5 	.word	0x20000af5

0800608c <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	460a      	mov	r2, r1
 8006096:	80fb      	strh	r3, [r7, #6]
 8006098:	4613      	mov	r3, r2
 800609a:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 800609c:	88bb      	ldrh	r3, [r7, #4]
 800609e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060a2:	4907      	ldr	r1, [pc, #28]	; (80060c0 <validate_command+0x34>)
 80060a4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 80060b0:	2301      	movs	r3, #1
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	2000006c 	.word	0x2000006c

080060c4 <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 80060d0:	887a      	ldrh	r2, [r7, #2]
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	4904      	ldr	r1, [pc, #16]	; (80060e8 <transmit_packet+0x24>)
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f003 fcc4 	bl	8009a66 <HAL_UART_Transmit>
//	__enable_irq();
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200006d8 	.word	0x200006d8

080060ec <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785a      	ldrb	r2, [r3, #1]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	789a      	ldrb	r2, [r3, #2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	78da      	ldrb	r2, [r3, #3]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	791a      	ldrb	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	795a      	ldrb	r2, [r3, #5]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	3306      	adds	r3, #6
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	b21a      	sxth	r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	3307      	adds	r3, #7
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	b21b      	sxth	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b21b      	sxth	r3, r3
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	061a      	lsls	r2, r3, #24
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	3309      	adds	r3, #9
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	330a      	adds	r3, #10
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 800615c:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	320b      	adds	r2, #11
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	7852      	ldrb	r2, [r2, #1]
 8006192:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	3302      	adds	r3, #2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	7892      	ldrb	r2, [r2, #2]
 800619c:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	3303      	adds	r3, #3
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	78d2      	ldrb	r2, [r2, #3]
 80061a6:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	3304      	adds	r3, #4
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7912      	ldrb	r2, [r2, #4]
 80061b0:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	3305      	adds	r3, #5
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	7952      	ldrb	r2, [r2, #5]
 80061ba:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	88da      	ldrh	r2, [r3, #6]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	3306      	adds	r3, #6
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	88db      	ldrh	r3, [r3, #6]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	3307      	adds	r3, #7
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	0a1a      	lsrs	r2, r3, #8
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	3309      	adds	r3, #9
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0c1a      	lsrs	r2, r3, #16
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	330a      	adds	r3, #10
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e1a      	lsrs	r2, r3, #24
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	330b      	adds	r3, #11
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 800621a:	b480      	push	{r7}
 800621c:	b087      	sub	sp, #28
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	4613      	mov	r3, r2
 8006226:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 8006234:	e007      	b.n	8006246 <pack_packet+0x2c>
		*dst++ = *curr++;
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	1c53      	adds	r3, r2, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	7812      	ldrb	r2, [r2, #0]
 8006244:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	d1f3      	bne.n	8006236 <pack_packet+0x1c>
	}
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <compute_checksum>:

uint16_t compute_checksum() {
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	0000      	movs	r0, r0
	...

08006288 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <compute_packet_sz+0x58>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	330d      	adds	r3, #13
 8006294:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa f907 	bl	80004ac <__aeabi_i2d>
 800629e:	a30e      	add	r3, pc, #56	; (adr r3, 80062d8 <compute_packet_sz+0x50>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa fa96 	bl	80007d4 <__aeabi_ddiv>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	ec43 2b17 	vmov	d7, r2, r3
 80062b0:	eeb0 0a47 	vmov.f32	s0, s14
 80062b4:	eef0 0a67 	vmov.f32	s1, s15
 80062b8:	f004 fa1e 	bl	800a6f8 <ceil>
 80062bc:	ec53 2b10 	vmov	r2, r3, d0
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	f7fa fbf6 	bl	8000ab4 <__aeabi_d2uiz>
 80062c8:	4603      	mov	r3, r0
 80062ca:	717b      	strb	r3, [r7, #5]
    return num_packets;
 80062cc:	797b      	ldrb	r3, [r7, #5]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	00000000 	.word	0x00000000
 80062dc:	406fe000 	.word	0x406fe000
 80062e0:	20000af6 	.word	0x20000af6

080062e4 <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 80062f6:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <stuff_packet+0xc8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	795b      	ldrb	r3, [r3, #5]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d038      	beq.n	8006372 <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	60ba      	str	r2, [r7, #8]
 8006306:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2201      	movs	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
        while (length--)
 800630e:	e02a      	b.n	8006366 <stuff_packet+0x82>
        {
            if (*unstuffed) {
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	1c53      	adds	r3, r2, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	b2da      	uxtb	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	e009      	b.n	800634a <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	60ba      	str	r2, [r7, #8]
 800633c:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2bff      	cmp	r3, #255	; 0xff
 8006350:	d109      	bne.n	8006366 <stuff_packet+0x82>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d006      	beq.n	8006366 <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	60ba      	str	r2, [r7, #8]
 800635e:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
        while (length--)
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	80fa      	strh	r2, [r7, #6]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1cf      	bne.n	8006310 <stuff_packet+0x2c>
 8006370:	e011      	b.n	8006396 <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 8006372:	2300      	movs	r3, #0
 8006374:	837b      	strh	r3, [r7, #26]
 8006376:	e00a      	b.n	800638e <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	1c53      	adds	r3, r2, #1
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8006388:	8b7b      	ldrh	r3, [r7, #26]
 800638a:	3301      	adds	r3, #1
 800638c:	837b      	strh	r3, [r7, #26]
 800638e:	8b7a      	ldrh	r2, [r7, #26]
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	429a      	cmp	r2, r3
 8006394:	d3f0      	bcc.n	8006378 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	b29b      	uxth	r3, r3
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3724      	adds	r7, #36	; 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000c90 	.word	0x20000c90

080063b0 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b089      	sub	sp, #36	; 0x24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 80063ca:	23ff      	movs	r3, #255	; 0xff
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	2300      	movs	r3, #0
 80063d0:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 80063d2:	e024      	b.n	800641e <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d025      	beq.n	8006428 <unstuff_packet+0x78>
		if (copy != 0) {
 80063dc:	7fbb      	ldrb	r3, [r7, #30]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	1c53      	adds	r3, r2, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	7812      	ldrb	r2, [r2, #0]
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e011      	b.n	8006418 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 80063f4:	7ffb      	ldrb	r3, [r7, #31]
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d004      	beq.n	8006404 <unstuff_packet+0x54>
				*unstuffed++ = 0;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	60ba      	str	r2, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	60fa      	str	r2, [r7, #12]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	7ffb      	ldrb	r3, [r7, #31]
 8006410:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 8006412:	7ffb      	ldrb	r3, [r7, #31]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 8006418:	7fbb      	ldrb	r3, [r7, #30]
 800641a:	3b01      	subs	r3, #1
 800641c:	77bb      	strb	r3, [r7, #30]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3d6      	bcc.n	80063d4 <unstuff_packet+0x24>
 8006426:	e002      	b.n	800642e <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <unstuff_packet+0x7e>
				break; /* Source length too long */
 800642c:	bf00      	nop
		}
	}
	return unstuffed - start;
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8006450:	b672      	cpsid	i
}
 8006452:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8006460:	2200      	movs	r2, #0
 8006462:	4619      	mov	r1, r3
 8006464:	f001 fadc 	bl	8007a20 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	23ff      	movs	r3, #255	; 0xff
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	f002 f8a5 	bl	80085c2 <HAL_SPI_Transmit>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800648e:	2201      	movs	r2, #1
 8006490:	4619      	mov	r1, r3
 8006492:	f001 fac5 	bl	8007a20 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8006496:	b662      	cpsie	i
}
 8006498:	bf00      	nop
	__enable_irq();

}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80064b2:	b672      	cpsid	i
}
 80064b4:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80064c2:	2200      	movs	r2, #0
 80064c4:	4619      	mov	r1, r3
 80064c6:	f001 faab 	bl	8007a20 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	23ff      	movs	r3, #255	; 0xff
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	f002 f874 	bl	80085c2 <HAL_SPI_Transmit>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80064ea:	8b3a      	ldrh	r2, [r7, #24]
 80064ec:	23ff      	movs	r3, #255	; 0xff
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	f002 f9a3 	bl	800883a <HAL_SPI_Receive>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800650a:	2201      	movs	r2, #1
 800650c:	4619      	mov	r1, r3
 800650e:	f001 fa87 	bl	8007a20 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8006512:	b662      	cpsie	i
}
 8006514:	bf00      	nop
	__enable_irq();

}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af02      	add	r7, sp, #8
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 800652a:	230f      	movs	r3, #15
 800652c:	733b      	strb	r3, [r7, #12]
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	f107 010c 	add.w	r1, r7, #12
 800653a:	2201      	movs	r2, #1
 800653c:	9200      	str	r2, [sp, #0]
 800653e:	2202      	movs	r2, #2
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ffae 	bl	80064a2 <spi_transmit_receive>

	return *rx;
 8006546:	7a3b      	ldrb	r3, [r7, #8]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8006558:	21c0      	movs	r1, #192	; 0xc0
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff ffdf 	bl	800651e <read_status_register>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8006582:	e002      	b.n	800658a <wait_for_operation+0x16>
		++count;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ffe0 	bl	8006550 <flash_is_busy>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <wait_for_operation+0x34>
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	461a      	mov	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d3ed      	bcc.n	8006584 <wait_for_operation+0x10>
	}
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
 80065bc:	4613      	mov	r3, r2
 80065be:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 80065c0:	231f      	movs	r3, #31
 80065c2:	733b      	strb	r3, [r7, #12]
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	737b      	strb	r3, [r7, #13]
 80065c8:	78bb      	ldrb	r3, [r7, #2]
 80065ca:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	2203      	movs	r2, #3
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff34 	bl	8006442 <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 80065da:	2132      	movs	r1, #50	; 0x32
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ffc9 	bl	8006574 <wait_for_operation>
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	733b      	strb	r3, [r7, #12]
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8006606:	2313      	movs	r3, #19
 8006608:	723b      	strb	r3, [r7, #8]
 800660a:	2300      	movs	r3, #0
 800660c:	727b      	strb	r3, [r7, #9]
 800660e:	7b3b      	ldrb	r3, [r7, #12]
 8006610:	72bb      	strb	r3, [r7, #10]
 8006612:	7b7b      	ldrb	r3, [r7, #13]
 8006614:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8006616:	f107 0308 	add.w	r3, r7, #8
 800661a:	2204      	movs	r2, #4
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff0f 	bl	8006442 <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8006624:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ffa3 	bl	8006574 <wait_for_operation>
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 800663e:	21a0      	movs	r1, #160	; 0xa0
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff6c 	bl	800651e <read_status_register>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8006650:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	461a      	mov	r2, r3
 8006656:	21a0      	movs	r1, #160	; 0xa0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ffa9 	bl	80065b0 <write_status_register>
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 800666e:	21a0      	movs	r1, #160	; 0xa0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ff54 	bl	800651e <read_status_register>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8006680:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006688:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	461a      	mov	r2, r3
 800668e:	21a0      	movs	r1, #160	; 0xa0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ff8d 	bl	80065b0 <write_status_register>
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 80066a6:	2306      	movs	r3, #6
 80066a8:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	2201      	movs	r2, #1
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fec5 	bl	8006442 <spi_transmit>
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 80066c8:	2304      	movs	r3, #4
 80066ca:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	2201      	movs	r2, #1
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff feb4 	bl	8006442 <spi_transmit>
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	4611      	mov	r1, r2
 80066ee:	461a      	mov	r2, r3
 80066f0:	460b      	mov	r3, r1
 80066f2:	80fb      	strh	r3, [r7, #6]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 80066f8:	88bb      	ldrh	r3, [r7, #4]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	753b      	strb	r3, [r7, #20]
 8006702:	88bb      	ldrh	r3, [r7, #4]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8006708:	2302      	movs	r3, #2
 800670a:	743b      	strb	r3, [r7, #16]
 800670c:	7d3b      	ldrb	r3, [r7, #20]
 800670e:	747b      	strb	r3, [r7, #17]
 8006710:	7d7b      	ldrb	r3, [r7, #21]
 8006712:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671a:	d902      	bls.n	8006722 <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 800671c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006720:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8006722:	b672      	cpsid	i
}
 8006724:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8006732:	2200      	movs	r2, #0
 8006734:	4619      	mov	r1, r3
 8006736:	f001 f973 	bl	8007a20 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8006740:	f107 0110 	add.w	r1, r7, #16
 8006744:	23ff      	movs	r3, #255	; 0xff
 8006746:	2203      	movs	r2, #3
 8006748:	f001 ff3b 	bl	80085c2 <HAL_SPI_Transmit>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	23ff      	movs	r3, #255	; 0xff
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	f001 ff2e 	bl	80085c2 <HAL_SPI_Transmit>
 8006766:	4603      	mov	r3, r0
 8006768:	461a      	mov	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800677c:	2201      	movs	r2, #1
 800677e:	4619      	mov	r1, r3
 8006780:	f001 f94e 	bl	8007a20 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8006784:	b662      	cpsie	i
}
 8006786:	bf00      	nop
	__enable_irq();
}
 8006788:	bf00      	nop
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 800679c:	887b      	ldrh	r3, [r7, #2]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	733b      	strb	r3, [r7, #12]
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 80067ac:	2310      	movs	r3, #16
 80067ae:	723b      	strb	r3, [r7, #8]
 80067b0:	2300      	movs	r3, #0
 80067b2:	727b      	strb	r3, [r7, #9]
 80067b4:	7b3b      	ldrb	r3, [r7, #12]
 80067b6:	72bb      	strb	r3, [r7, #10]
 80067b8:	7b7b      	ldrb	r3, [r7, #13]
 80067ba:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	2204      	movs	r2, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fe3c 	bl	8006442 <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 80067ca:	4904      	ldr	r1, [pc, #16]	; (80067dc <program_buffer_to_memory+0x4c>)
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fed1 	bl	8006574 <wait_for_operation>
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	000aae60 	.word	0x000aae60

080067e0 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fabd 	bl	8006d68 <ping_flash>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80067f4:	21c0      	movs	r1, #192	; 0xc0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fe91 	bl	800651e <read_status_register>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	b2da      	uxtb	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 800680e:	e003      	b.n	8006818 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2208      	movs	r2, #8
 8006814:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa9a 	bl	8006d68 <ping_flash>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 800683a:	21c0      	movs	r1, #192	; 0xc0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fe6e 	bl	800651e <read_status_register>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8006854:	e003      	b.n	800685e <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2204      	movs	r2, #4
 800685a:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff10 	bl	800669e <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 800687e:	887b      	ldrh	r3, [r7, #2]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	b29b      	uxth	r3, r3
 8006884:	b2db      	uxtb	r3, r3
 8006886:	733b      	strb	r3, [r7, #12]
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 800688e:	23d8      	movs	r3, #216	; 0xd8
 8006890:	723b      	strb	r3, [r7, #8]
 8006892:	2300      	movs	r3, #0
 8006894:	727b      	strb	r3, [r7, #9]
 8006896:	7b3b      	ldrb	r3, [r7, #12]
 8006898:	72bb      	strb	r3, [r7, #10]
 800689a:	7b7b      	ldrb	r3, [r7, #13]
 800689c:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	2204      	movs	r2, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fdcb 	bl	8006442 <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff07 	bl	80066c0 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 80068b2:	4905      	ldr	r1, [pc, #20]	; (80068c8 <erase_block+0x5c>)
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fe5d 	bl	8006574 <wait_for_operation>

	get_erase_failure_status(flash);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ffb3 	bl	8006826 <get_erase_failure_status>
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	003d0900 	.word	0x003d0900

080068cc <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa47 	bl	8006d68 <ping_flash>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d033      	beq.n	8006948 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80068e0:	21c0      	movs	r1, #192	; 0xc0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fe1b 	bl	800651e <read_status_register>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <get_ECC_status+0x46>
 8006902:	7b7b      	ldrb	r3, [r7, #13]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8006910:	e01f      	b.n	8006952 <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <get_ECC_status+0x5c>
 8006918:	7b7b      	ldrb	r3, [r7, #13]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8006926:	e014      	b.n	8006952 <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <get_ECC_status+0x72>
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 800693c:	e009      	b.n	8006952 <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2203      	movs	r2, #3
 8006942:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8006946:	e004      	b.n	8006952 <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8006950:	e7ff      	b.n	8006952 <get_ECC_status+0x86>
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 800695a:	b580      	push	{r7, lr}
 800695c:	b088      	sub	sp, #32
 800695e:	af02      	add	r7, sp, #8
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	4611      	mov	r1, r2
 8006966:	461a      	mov	r2, r3
 8006968:	460b      	mov	r3, r1
 800696a:	80fb      	strh	r3, [r7, #6]
 800696c:	4613      	mov	r3, r2
 800696e:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8006970:	88bb      	ldrh	r3, [r7, #4]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	b29b      	uxth	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	753b      	strb	r3, [r7, #20]
 800697a:	88bb      	ldrh	r3, [r7, #4]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8006980:	2303      	movs	r3, #3
 8006982:	743b      	strb	r3, [r7, #16]
 8006984:	7d3b      	ldrb	r3, [r7, #20]
 8006986:	747b      	strb	r3, [r7, #17]
 8006988:	7d7b      	ldrb	r3, [r7, #21]
 800698a:	74bb      	strb	r3, [r7, #18]
 800698c:	2300      	movs	r3, #0
 800698e:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8006990:	f107 0110 	add.w	r1, r7, #16
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2204      	movs	r2, #4
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fd80 	bl	80064a2 <spi_transmit_receive>
}
 80069a2:	bf00      	nop
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	4611      	mov	r1, r2
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	80fb      	strh	r3, [r7, #6]
 80069bc:	4613      	mov	r3, r2
 80069be:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 80069c0:	88bb      	ldrh	r3, [r7, #4]
 80069c2:	4619      	mov	r1, r3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fe10 	bl	80065ea <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 80069ca:	8b3b      	ldrh	r3, [r7, #24]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff ffc2 	bl	800695a <read_flash_buffer>

	get_ECC_status(flash);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff ff78 	bl	80068cc <get_ECC_status>
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4611      	mov	r1, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	460b      	mov	r3, r1
 80069f4:	80fb      	strh	r3, [r7, #6]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fe4f 	bl	800669e <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 8006a00:	8b3b      	ldrh	r3, [r7, #24]
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe6b 	bl	80066e2 <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8006a0c:	88bb      	ldrh	r3, [r7, #4]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff febd 	bl	8006790 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff fe52 	bl	80066c0 <disable_write>

	get_write_failure_status(flash);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff fedf 	bl	80067e0 <get_write_failure_status>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8006a32:	21b0      	movs	r1, #176	; 0xb0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff fd72 	bl	800651e <read_status_register>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	f043 0310 	orr.w	r3, r3, #16
 8006a44:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8006a46:	7bba      	ldrb	r2, [r7, #14]
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d005      	beq.n	8006a5a <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	461a      	mov	r2, r3
 8006a52:	21b0      	movs	r1, #176	; 0xb0
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fdab 	bl	80065b0 <write_status_register>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8006a6a:	21b0      	movs	r1, #176	; 0xb0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fd56 	bl	800651e <read_status_register>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	f043 0308 	orr.w	r3, r3, #8
 8006a7c:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8006a7e:	7bba      	ldrb	r2, [r7, #14]
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d005      	beq.n	8006a92 <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	21b0      	movs	r1, #176	; 0xb0
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fd8f 	bl	80065b0 <write_status_register>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 8006aa6:	f107 0108 	add.w	r1, r7, #8
 8006aaa:	1d38      	adds	r0, r7, #4
 8006aac:	2300      	movs	r3, #0
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab6:	6800      	ldr	r0, [r0, #0]
 8006ab8:	f7ff ff77 	bl	80069aa <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8006ac8:	e00e      	b.n	8006ae8 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 8006aca:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8006ace:	f107 0208 	add.w	r2, r7, #8
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	2bff      	cmp	r3, #255	; 0xff
 8006ad6:	d002      	beq.n	8006ade <find_write_ptr+0x44>
			first_page_empty = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8006ade:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8006ae8:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8006aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af0:	d3eb      	bcc.n	8006aca <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 8006af2:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <find_write_ptr+0x76>
		flash->current_page = 0;
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8006b0e:	e0f0      	b.n	8006cf2 <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 8006b16:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8006b1a:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8006b1e:	e041      	b.n	8006ba4 <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 8006b20:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8006b24:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8006b3a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006b3e:	f107 0108 	add.w	r1, r7, #8
 8006b42:	1d38      	adds	r0, r7, #4
 8006b44:	2200      	movs	r2, #0
 8006b46:	9200      	str	r2, [sp, #0]
 8006b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f7ff ff2c 	bl	80069aa <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8006b5e:	e00f      	b.n	8006b80 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8006b60:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8006b64:	f107 0208 	add.w	r2, r7, #8
 8006b68:	5cd3      	ldrb	r3, [r2, r3]
 8006b6a:	2bff      	cmp	r3, #255	; 0xff
 8006b6c:	d003      	beq.n	8006b76 <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 8006b74:	e009      	b.n	8006b8a <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 8006b76:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8006b80:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8006b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b88:	d3ea      	bcc.n	8006b60 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8006b8a:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <find_write_ptr+0x102>
			max = cur_search_page;
 8006b92:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006b96:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8006b9a:	e003      	b.n	8006ba4 <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8006b9c:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006ba0:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8006ba4:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8006ba8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d8b6      	bhi.n	8006b20 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 8006bb2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	1d3b      	adds	r3, r7, #4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8006bc0:	1d3b      	adds	r3, r7, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	1d38      	adds	r0, r7, #4
 8006bce:	2200      	movs	r2, #0
 8006bd0:	9200      	str	r2, [sp, #0]
 8006bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	f7ff fee7 	bl	80069aa <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8006bdc:	f107 0308 	add.w	r3, r7, #8
 8006be0:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 8006be4:	2bff      	cmp	r3, #255	; 0xff
 8006be6:	d01e      	beq.n	8006c26 <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006bf0:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d106      	bne.n	8006c06 <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c00:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 8006c04:	e075      	b.n	8006cf2 <find_write_ptr+0x258>
			flash->current_page++;
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006c0e:	3301      	adds	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8006c24:	e065      	b.n	8006cf2 <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8006c2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006c30:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8006c34:	e019      	b.n	8006c6a <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 8006c36:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8006c3a:	f107 0208 	add.w	r2, r7, #8
 8006c3e:	5cd3      	ldrb	r3, [r2, r3]
 8006c40:	2bff      	cmp	r3, #255	; 0xff
 8006c42:	d00b      	beq.n	8006c5c <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 8006c44:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8006c48:	3301      	adds	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8006c5a:	e00a      	b.n	8006c72 <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8006c5c:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8006c6a:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dae1      	bge.n	8006c36 <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7e:	d806      	bhi.n	8006c8e <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c88:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8006c8c:	e031      	b.n	8006cf2 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d806      	bhi.n	8006caa <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ca4:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8006ca8:	e023      	b.n	8006cf2 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006cb2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cb6:	d806      	bhi.n	8006cc6 <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8006cb8:	1d3b      	adds	r3, r7, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006cc0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8006cc4:	e015      	b.n	8006cf2 <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 8006cc6:	1d3b      	adds	r3, r7, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd2:	d20e      	bcs.n	8006cf2 <find_write_ptr+0x258>
		flash->next_free_column = 0;
 8006cd4:	1d3b      	adds	r3, r7, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	1d3b      	adds	r3, r7, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 8006cf2:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	887a      	ldrh	r2, [r7, #2]
 8006d1c:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f837 	bl	8006dbc <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff fe6b 	bl	8006a2a <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff fe84 	bl	8006a62 <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff fe9d 	bl	8006a9a <find_write_ptr>
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8006d70:	239f      	movs	r3, #159	; 0x9f
 8006d72:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8006d74:	f107 030c 	add.w	r3, r7, #12
 8006d78:	f107 0110 	add.w	r1, r7, #16
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	9200      	str	r2, [sp, #0]
 8006d80:	2202      	movs	r2, #2
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fb8d 	bl	80064a2 <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8006d88:	7b3b      	ldrb	r3, [r7, #12]
 8006d8a:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8006d8c:	7b7b      	ldrb	r3, [r7, #13]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2bef      	cmp	r3, #239	; 0xef
 8006da0:	d106      	bne.n	8006db0 <ping_flash+0x48>
 8006da2:	8abb      	ldrh	r3, [r7, #20]
 8006da4:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d101      	bne.n	8006db0 <ping_flash+0x48>
		return 1;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <ping_flash+0x4a>
	else
		return 0;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fbc3 	bl	8006550 <flash_is_busy>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <reset_flash+0x18>
		return 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e00d      	b.n	8006df0 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8006dd4:	23ff      	movs	r3, #255	; 0xff
 8006dd6:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	2201      	movs	r2, #1
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff fb2e 	bl	8006442 <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8006de6:	4904      	ldr	r1, [pc, #16]	; (8006df8 <reset_flash+0x3c>)
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fbc3 	bl	8006574 <wait_for_operation>

	return 1;
 8006dee:	2301      	movs	r3, #1
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	0007a120 	.word	0x0007a120

08006dfc <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 8006e10:	e05a      	b.n	8006ec8 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8006e1e:	8a3a      	ldrh	r2, [r7, #16]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006e26:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	dd05      	ble.n	8006e3a <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006e34:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006e38:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	18d1      	adds	r1, r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006e4c:	8a3a      	ldrh	r2, [r7, #16]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4603      	mov	r3, r0
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff fdc6 	bl	80069e4 <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <write_to_flash_contiguous+0x6c>
			write_failures++;
 8006e62:	8a7b      	ldrh	r3, [r7, #18]
 8006e64:	3301      	adds	r3, #1
 8006e66:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8006e68:	8a3b      	ldrh	r3, [r7, #16]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006e76:	461a      	mov	r2, r3
 8006e78:	8a3b      	ldrh	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e80:	da09      	bge.n	8006e96 <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8006e88:	8a3b      	ldrh	r3, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8006e94:	e018      	b.n	8006ec8 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006e9c:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d105      	bne.n	8006eb0 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eaa:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8006eae:	e00b      	b.n	8006ec8 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3a0      	bcc.n	8006e12 <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b08c      	sub	sp, #48	; 0x30
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f967 	bl	80071ba <get_bytes_remaining>
 8006eec:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d901      	bls.n	8006efa <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8006efa:	2300      	movs	r3, #0
 8006efc:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d035      	beq.n	8006f7a <write_to_flash+0xa0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1e:	d32c      	bcc.n	8006f7a <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f26:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006f2a:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f30:	e00e      	b.n	8006f50 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8006f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f3e:	4619      	mov	r1, r3
 8006f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f42:	440b      	add	r3, r1
 8006f44:	7811      	ldrb	r1, [r2, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8006f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f50:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006f52:	8bfb      	ldrh	r3, [r7, #30]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d3ec      	bcc.n	8006f32 <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f5e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8006f68:	8bfb      	ldrh	r3, [r7, #30]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8006f70:	8bfb      	ldrh	r3, [r7, #30]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8006f78:	e02a      	b.n	8006fd0 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f80:	461a      	mov	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8a:	d221      	bcs.n	8006fd0 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f90:	e00e      	b.n	8006fb0 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8006f92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	441a      	add	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fa2:	440b      	add	r3, r1
 8006fa4:	7811      	ldrb	r1, [r2, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8006faa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fac:	3301      	adds	r3, #1
 8006fae:	853b      	strh	r3, [r7, #40]	; 0x28
 8006fb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d8ec      	bhi.n	8006f92 <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e04b      	b.n	8007068 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe4:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	4413      	add	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff fb21 	bl	8006636 <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 8006ff4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00f      	beq.n	800701c <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007002:	4619      	mov	r1, r3
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fef9 	bl	8006dfc <write_to_flash_contiguous>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007010:	4413      	add	r3, r2
 8007012:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fee8 	bl	8006dfc <write_to_flash_contiguous>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007032:	4413      	add	r3, r2
 8007034:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7ff fb15 	bl	8006666 <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 800703c:	2300      	movs	r3, #0
 800703e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007040:	e009      	b.n	8007056 <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 8007042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	441a      	add	r2, r3
 8007048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800704a:	7811      	ldrb	r1, [r2, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8007050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007052:	3301      	adds	r3, #1
 8007054:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007056:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	429a      	cmp	r2, r3
 800705c:	d3f1      	bcc.n	8007042 <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8afa      	ldrh	r2, [r7, #22]
 8007062:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 8007066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8007068:	4618      	mov	r0, r3
 800706a:	3730      	adds	r7, #48	; 0x30
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <finish_flash_write+0x2e>
		return 0;
 8007082:	2300      	movs	r3, #0
 8007084:	e036      	b.n	80070f4 <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	b291      	uxth	r1, r2
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2100      	movs	r1, #0
 800709c:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a8:	d3ed      	bcc.n	8007086 <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f885 	bl	80071ba <get_bytes_remaining>
 80070b0:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070b8:	461a      	mov	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d204      	bcs.n	80070ca <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fab3 	bl	8006636 <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80070d0:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80070d8:	461a      	mov	r2, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fe8e 	bl	8006dfc <write_to_flash_contiguous>
 80070e0:	4603      	mov	r3, r0
 80070e2:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff faba 	bl	8006666 <lock_flash>

	return write_failures;
 80070f2:	897b      	ldrh	r3, [r7, #10]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007128:	b29b      	uxth	r3, r3
 800712a:	2200      	movs	r2, #0
 800712c:	9200      	str	r2, [sp, #0]
 800712e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fc38 	bl	80069aa <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fbbf 	bl	80068cc <get_ECC_status>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff fa67 	bl	8006636 <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8007168:	2300      	movs	r3, #0
 800716a:	81bb      	strh	r3, [r7, #12]
 800716c:	e011      	b.n	8007192 <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 800716e:	89bb      	ldrh	r3, [r7, #12]
 8007170:	019b      	lsls	r3, r3, #6
 8007172:	b29b      	uxth	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fb78 	bl	800686c <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <erase_flash+0x36>
			erase_failures++;
 8007186:	89fb      	ldrh	r3, [r7, #14]
 8007188:	3301      	adds	r3, #1
 800718a:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 800718c:	89bb      	ldrh	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	81bb      	strh	r3, [r7, #12]
 8007192:	89bb      	ldrh	r3, [r7, #12]
 8007194:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007198:	4293      	cmp	r3, r2
 800719a:	d9e8      	bls.n	800716e <erase_flash+0x18>
	}

	lock_flash(flash);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fa62 	bl	8006666 <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff fc79 	bl	8006a9a <find_write_ptr>
	flash->write_buffer_size = 0;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 80071b0:	89fb      	ldrh	r3, [r7, #14]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80071c8:	02db      	lsls	r3, r3, #11
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 80071d0:	4413      	add	r3, r2
 80071d2:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 80071d6:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 80071e0:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	461a      	mov	r2, r3
 80071fa:	460b      	mov	r3, r1
 80071fc:	72fb      	strb	r3, [r7, #11]
 80071fe:	4613      	mov	r3, r2
 8007200:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fa17 	bl	8006636 <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b40      	subs	r3, #64	; 0x40
 800720e:	b29b      	uxth	r3, r3
 8007210:	893a      	ldrh	r2, [r7, #8]
 8007212:	2100      	movs	r1, #0
 8007214:	9100      	str	r1, [sp, #0]
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fbe3 	bl	80069e4 <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fa21 	bl	8006666 <lock_flash>

	return flash->last_write_failure_status;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af02      	add	r7, sp, #8
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	461a      	mov	r2, r3
 800723e:	460b      	mov	r3, r1
 8007240:	72fb      	strb	r3, [r7, #11]
 8007242:	4613      	mov	r3, r2
 8007244:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b40      	subs	r3, #64	; 0x40
 800724c:	b29b      	uxth	r3, r3
 800724e:	893a      	ldrh	r2, [r7, #8]
 8007250:	2100      	movs	r1, #0
 8007252:	9100      	str	r1, [sp, #0]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fba7 	bl	80069aa <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff f9e2 	bl	8006636 <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 8007272:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff faf8 	bl	800686c <erase_block>
	lock_flash(flash);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff f9f2 	bl	8006666 <lock_flash>
	return flash->last_erase_failure_status;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8007290:	b580      	push	{r7, lr}
 8007292:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8007296:	af00      	add	r7, sp, #0
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 800729c:	f107 0308 	add.w	r3, r7, #8
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	3304      	adds	r3, #4
 80072a6:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f003 fa19 	bl	800a6e4 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 80072b2:	f107 0108 	add.w	r1, r7, #8
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff fe0c 	bl	8006eda <write_to_flash>
}
 80072c2:	bf00      	nop
 80072c4:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <HAL_Init+0x40>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0d      	ldr	r2, [pc, #52]	; (800730c <HAL_Init+0x40>)
 80072d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <HAL_Init+0x40>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <HAL_Init+0x40>)
 80072e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_Init+0x40>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a07      	ldr	r2, [pc, #28]	; (800730c <HAL_Init+0x40>)
 80072ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072f4:	2003      	movs	r0, #3
 80072f6:	f000 f92b 	bl	8007550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072fa:	2000      	movs	r0, #0
 80072fc:	f000 f808 	bl	8007310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007300:	f7fd f8ee 	bl	80044e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40023c00 	.word	0x40023c00

08007310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007318:	4b12      	ldr	r3, [pc, #72]	; (8007364 <HAL_InitTick+0x54>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	4b12      	ldr	r3, [pc, #72]	; (8007368 <HAL_InitTick+0x58>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007326:	fbb3 f3f1 	udiv	r3, r3, r1
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f943 	bl	80075ba <HAL_SYSTICK_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e00e      	b.n	800735c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b0f      	cmp	r3, #15
 8007342:	d80a      	bhi.n	800735a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007344:	2200      	movs	r2, #0
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	f000 f90b 	bl	8007566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007350:	4a06      	ldr	r2, [pc, #24]	; (800736c <HAL_InitTick+0x5c>)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e000      	b.n	800735c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000184 	.word	0x20000184
 8007368:	200001e0 	.word	0x200001e0
 800736c:	200001dc 	.word	0x200001dc

08007370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_IncTick+0x20>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <HAL_IncTick+0x24>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4413      	add	r3, r2
 8007380:	4a04      	ldr	r2, [pc, #16]	; (8007394 <HAL_IncTick+0x24>)
 8007382:	6013      	str	r3, [r2, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	200001e0 	.word	0x200001e0
 8007394:	200022d0 	.word	0x200022d0

08007398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return uwTick;
 800739c:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_GetTick+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	200022d0 	.word	0x200022d0

080073b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <__NVIC_SetPriorityGrouping+0x44>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073cc:	4013      	ands	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073e2:	4a04      	ldr	r2, [pc, #16]	; (80073f4 <__NVIC_SetPriorityGrouping+0x44>)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	60d3      	str	r3, [r2, #12]
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	e000ed00 	.word	0xe000ed00

080073f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <__NVIC_GetPriorityGrouping+0x18>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	f003 0307 	and.w	r3, r3, #7
}
 8007406:	4618      	mov	r0, r3
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	e000ed00 	.word	0xe000ed00

08007414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800741e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007422:	2b00      	cmp	r3, #0
 8007424:	db0b      	blt.n	800743e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	f003 021f 	and.w	r2, r3, #31
 800742c:	4907      	ldr	r1, [pc, #28]	; (800744c <__NVIC_EnableIRQ+0x38>)
 800742e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2001      	movs	r0, #1
 8007436:	fa00 f202 	lsl.w	r2, r0, r2
 800743a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	e000e100 	.word	0xe000e100

08007450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800745c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007460:	2b00      	cmp	r3, #0
 8007462:	db0a      	blt.n	800747a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	490c      	ldr	r1, [pc, #48]	; (800749c <__NVIC_SetPriority+0x4c>)
 800746a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746e:	0112      	lsls	r2, r2, #4
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	440b      	add	r3, r1
 8007474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007478:	e00a      	b.n	8007490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4908      	ldr	r1, [pc, #32]	; (80074a0 <__NVIC_SetPriority+0x50>)
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	3b04      	subs	r3, #4
 8007488:	0112      	lsls	r2, r2, #4
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	440b      	add	r3, r1
 800748e:	761a      	strb	r2, [r3, #24]
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	e000e100 	.word	0xe000e100
 80074a0:	e000ed00 	.word	0xe000ed00

080074a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f1c3 0307 	rsb	r3, r3, #7
 80074be:	2b04      	cmp	r3, #4
 80074c0:	bf28      	it	cs
 80074c2:	2304      	movcs	r3, #4
 80074c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	3304      	adds	r3, #4
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d902      	bls.n	80074d4 <NVIC_EncodePriority+0x30>
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	3b03      	subs	r3, #3
 80074d2:	e000      	b.n	80074d6 <NVIC_EncodePriority+0x32>
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	43da      	mvns	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	401a      	ands	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074ec:	f04f 31ff 	mov.w	r1, #4294967295
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	fa01 f303 	lsl.w	r3, r1, r3
 80074f6:	43d9      	mvns	r1, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074fc:	4313      	orrs	r3, r2
         );
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3724      	adds	r7, #36	; 0x24
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3b01      	subs	r3, #1
 8007518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800751c:	d301      	bcc.n	8007522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800751e:	2301      	movs	r3, #1
 8007520:	e00f      	b.n	8007542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <SysTick_Config+0x40>)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3b01      	subs	r3, #1
 8007528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800752a:	210f      	movs	r1, #15
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	f7ff ff8e 	bl	8007450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <SysTick_Config+0x40>)
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <SysTick_Config+0x40>)
 800753c:	2207      	movs	r2, #7
 800753e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	e000e010 	.word	0xe000e010

08007550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ff29 	bl	80073b0 <__NVIC_SetPriorityGrouping>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	4603      	mov	r3, r0
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007578:	f7ff ff3e 	bl	80073f8 <__NVIC_GetPriorityGrouping>
 800757c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	6978      	ldr	r0, [r7, #20]
 8007584:	f7ff ff8e 	bl	80074a4 <NVIC_EncodePriority>
 8007588:	4602      	mov	r2, r0
 800758a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff ff5d 	bl	8007450 <__NVIC_SetPriority>
}
 8007596:	bf00      	nop
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	4603      	mov	r3, r0
 80075a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff ff31 	bl	8007414 <__NVIC_EnableIRQ>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ffa2 	bl	800750c <SysTick_Config>
 80075c8:	4603      	mov	r3, r0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075e0:	f7ff feda 	bl	8007398 <HAL_GetTick>
 80075e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d008      	beq.n	8007604 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2280      	movs	r2, #128	; 0x80
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e052      	b.n	80076aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0216 	bic.w	r2, r2, #22
 8007612:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007622:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <HAL_DMA_Abort+0x62>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0208 	bic.w	r2, r2, #8
 8007642:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0201 	bic.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007654:	e013      	b.n	800767e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007656:	f7ff fe9f 	bl	8007398 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b05      	cmp	r3, #5
 8007662:	d90c      	bls.n	800767e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2203      	movs	r2, #3
 8007676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e015      	b.n	80076aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e4      	bne.n	8007656 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	223f      	movs	r2, #63	; 0x3f
 8007692:	409a      	lsls	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d004      	beq.n	80076d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2280      	movs	r2, #128	; 0x80
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e00c      	b.n	80076ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2205      	movs	r2, #5
 80076d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b089      	sub	sp, #36	; 0x24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e165      	b.n	80079e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007714:	2201      	movs	r2, #1
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4013      	ands	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	f040 8154 	bne.w	80079da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b01      	cmp	r3, #1
 800773c:	d005      	beq.n	800774a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007746:	2b02      	cmp	r3, #2
 8007748:	d130      	bne.n	80077ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	2203      	movs	r2, #3
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43db      	mvns	r3, r3
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	4013      	ands	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	fa02 f303 	lsl.w	r3, r2, r3
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	4313      	orrs	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007780:	2201      	movs	r2, #1
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	4013      	ands	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	091b      	lsrs	r3, r3, #4
 8007796:	f003 0201 	and.w	r2, r3, #1
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d017      	beq.n	80077e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	2203      	movs	r2, #3
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	43db      	mvns	r3, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4013      	ands	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d123      	bne.n	800783c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	08da      	lsrs	r2, r3, #3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3208      	adds	r2, #8
 80077fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	220f      	movs	r2, #15
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	08da      	lsrs	r2, r3, #3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3208      	adds	r2, #8
 8007836:	69b9      	ldr	r1, [r7, #24]
 8007838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	2203      	movs	r2, #3
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4013      	ands	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f003 0203 	and.w	r2, r3, #3
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	4313      	orrs	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80ae 	beq.w	80079da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	4b5d      	ldr	r3, [pc, #372]	; (80079f8 <HAL_GPIO_Init+0x300>)
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	4a5c      	ldr	r2, [pc, #368]	; (80079f8 <HAL_GPIO_Init+0x300>)
 8007888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800788c:	6453      	str	r3, [r2, #68]	; 0x44
 800788e:	4b5a      	ldr	r3, [pc, #360]	; (80079f8 <HAL_GPIO_Init+0x300>)
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800789a:	4a58      	ldr	r2, [pc, #352]	; (80079fc <HAL_GPIO_Init+0x304>)
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	089b      	lsrs	r3, r3, #2
 80078a0:	3302      	adds	r3, #2
 80078a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	220f      	movs	r2, #15
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	43db      	mvns	r3, r3
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	4013      	ands	r3, r2
 80078bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a4f      	ldr	r2, [pc, #316]	; (8007a00 <HAL_GPIO_Init+0x308>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d025      	beq.n	8007912 <HAL_GPIO_Init+0x21a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a4e      	ldr	r2, [pc, #312]	; (8007a04 <HAL_GPIO_Init+0x30c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01f      	beq.n	800790e <HAL_GPIO_Init+0x216>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a4d      	ldr	r2, [pc, #308]	; (8007a08 <HAL_GPIO_Init+0x310>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d019      	beq.n	800790a <HAL_GPIO_Init+0x212>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a4c      	ldr	r2, [pc, #304]	; (8007a0c <HAL_GPIO_Init+0x314>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d013      	beq.n	8007906 <HAL_GPIO_Init+0x20e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a4b      	ldr	r2, [pc, #300]	; (8007a10 <HAL_GPIO_Init+0x318>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00d      	beq.n	8007902 <HAL_GPIO_Init+0x20a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a4a      	ldr	r2, [pc, #296]	; (8007a14 <HAL_GPIO_Init+0x31c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d007      	beq.n	80078fe <HAL_GPIO_Init+0x206>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a49      	ldr	r2, [pc, #292]	; (8007a18 <HAL_GPIO_Init+0x320>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d101      	bne.n	80078fa <HAL_GPIO_Init+0x202>
 80078f6:	2306      	movs	r3, #6
 80078f8:	e00c      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 80078fa:	2307      	movs	r3, #7
 80078fc:	e00a      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 80078fe:	2305      	movs	r3, #5
 8007900:	e008      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 8007902:	2304      	movs	r3, #4
 8007904:	e006      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 8007906:	2303      	movs	r3, #3
 8007908:	e004      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 800790a:	2302      	movs	r3, #2
 800790c:	e002      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <HAL_GPIO_Init+0x21c>
 8007912:	2300      	movs	r3, #0
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	f002 0203 	and.w	r2, r2, #3
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	4093      	lsls	r3, r2
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4313      	orrs	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007924:	4935      	ldr	r1, [pc, #212]	; (80079fc <HAL_GPIO_Init+0x304>)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	089b      	lsrs	r3, r3, #2
 800792a:	3302      	adds	r3, #2
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007932:	4b3a      	ldr	r3, [pc, #232]	; (8007a1c <HAL_GPIO_Init+0x324>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007956:	4a31      	ldr	r2, [pc, #196]	; (8007a1c <HAL_GPIO_Init+0x324>)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800795c:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <HAL_GPIO_Init+0x324>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	43db      	mvns	r3, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4013      	ands	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <HAL_GPIO_Init+0x324>)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007986:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <HAL_GPIO_Init+0x324>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_GPIO_Init+0x324>)
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <HAL_GPIO_Init+0x324>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079d4:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <HAL_GPIO_Init+0x324>)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	f67f ae96 	bls.w	8007714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	3724      	adds	r7, #36	; 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40013800 	.word	0x40013800
 8007a00:	40020000 	.word	0x40020000
 8007a04:	40020400 	.word	0x40020400
 8007a08:	40020800 	.word	0x40020800
 8007a0c:	40020c00 	.word	0x40020c00
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40021400 	.word	0x40021400
 8007a18:	40021800 	.word	0x40021800
 8007a1c:	40013c00 	.word	0x40013c00

08007a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	807b      	strh	r3, [r7, #2]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a30:	787b      	ldrb	r3, [r7, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a36:	887a      	ldrh	r2, [r7, #2]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a3c:	e003      	b.n	8007a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a3e:	887b      	ldrh	r3, [r7, #2]
 8007a40:	041a      	lsls	r2, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	619a      	str	r2, [r3, #24]
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a64:	887a      	ldrh	r2, [r7, #2]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	041a      	lsls	r2, r3, #16
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	43d9      	mvns	r1, r3
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	400b      	ands	r3, r1
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	619a      	str	r2, [r3, #24]
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0cc      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a9c:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d90c      	bls.n	8007ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aaa:	4b65      	ldr	r3, [pc, #404]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab2:	4b63      	ldr	r3, [pc, #396]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d001      	beq.n	8007ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e0b8      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d020      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007adc:	4b59      	ldr	r3, [pc, #356]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4a58      	ldr	r2, [pc, #352]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007af4:	4b53      	ldr	r3, [pc, #332]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	4a52      	ldr	r2, [pc, #328]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b00:	4b50      	ldr	r3, [pc, #320]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	494d      	ldr	r1, [pc, #308]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d044      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d107      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b26:	4b47      	ldr	r3, [pc, #284]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d119      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e07f      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d003      	beq.n	8007b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d107      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b46:	4b3f      	ldr	r3, [pc, #252]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e06f      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b56:	4b3b      	ldr	r3, [pc, #236]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e067      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b66:	4b37      	ldr	r3, [pc, #220]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f023 0203 	bic.w	r2, r3, #3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	4934      	ldr	r1, [pc, #208]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b78:	f7ff fc0e 	bl	8007398 <HAL_GetTick>
 8007b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b80:	f7ff fc0a 	bl	8007398 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e04f      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b96:	4b2b      	ldr	r3, [pc, #172]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 020c 	and.w	r2, r3, #12
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d1eb      	bne.n	8007b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d20c      	bcs.n	8007bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb6:	4b22      	ldr	r3, [pc, #136]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bbe:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d001      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e032      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	4916      	ldr	r1, [pc, #88]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bfa:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	490e      	ldr	r1, [pc, #56]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c0e:	f000 f855 	bl	8007cbc <HAL_RCC_GetSysClockFreq>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	490a      	ldr	r1, [pc, #40]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007c20:	5ccb      	ldrb	r3, [r1, r3]
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c2a:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fb6e 	bl	8007310 <HAL_InitTick>

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40023c00 	.word	0x40023c00
 8007c44:	40023800 	.word	0x40023800
 8007c48:	0800a818 	.word	0x0800a818
 8007c4c:	20000184 	.word	0x20000184
 8007c50:	200001dc 	.word	0x200001dc

08007c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c58:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20000184 	.word	0x20000184

08007c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c70:	f7ff fff0 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007c74:	4602      	mov	r2, r0
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	0a9b      	lsrs	r3, r3, #10
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	4903      	ldr	r1, [pc, #12]	; (8007c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c82:	5ccb      	ldrb	r3, [r1, r3]
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	0800a828 	.word	0x0800a828

08007c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c98:	f7ff ffdc 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	0b5b      	lsrs	r3, r3, #13
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	4903      	ldr	r1, [pc, #12]	; (8007cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007caa:	5ccb      	ldrb	r3, [r1, r3]
 8007cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40023800 	.word	0x40023800
 8007cb8:	0800a828 	.word	0x0800a828

08007cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	b087      	sub	sp, #28
 8007cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8007cc8:	2600      	movs	r6, #0
 8007cca:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8007ccc:	2600      	movs	r6, #0
 8007cce:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cd8:	4ea3      	ldr	r6, [pc, #652]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007cda:	68b6      	ldr	r6, [r6, #8]
 8007cdc:	f006 060c 	and.w	r6, r6, #12
 8007ce0:	2e0c      	cmp	r6, #12
 8007ce2:	f200 8137 	bhi.w	8007f54 <HAL_RCC_GetSysClockFreq+0x298>
 8007ce6:	f20f 0c08 	addw	ip, pc, #8
 8007cea:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d25 	.word	0x08007d25
 8007cf4:	08007f55 	.word	0x08007f55
 8007cf8:	08007f55 	.word	0x08007f55
 8007cfc:	08007f55 	.word	0x08007f55
 8007d00:	08007d2b 	.word	0x08007d2b
 8007d04:	08007f55 	.word	0x08007f55
 8007d08:	08007f55 	.word	0x08007f55
 8007d0c:	08007f55 	.word	0x08007f55
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007f55 	.word	0x08007f55
 8007d18:	08007f55 	.word	0x08007f55
 8007d1c:	08007f55 	.word	0x08007f55
 8007d20:	08007e47 	.word	0x08007e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d24:	4b91      	ldr	r3, [pc, #580]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8007d26:	613b      	str	r3, [r7, #16]
       break;
 8007d28:	e117      	b.n	8007f5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d2a:	4b91      	ldr	r3, [pc, #580]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8007d2c:	613b      	str	r3, [r7, #16]
      break;
 8007d2e:	e114      	b.n	8007f5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d30:	4b8d      	ldr	r3, [pc, #564]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d38:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d3a:	4b8b      	ldr	r3, [pc, #556]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d024      	beq.n	8007d90 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d46:	4b88      	ldr	r3, [pc, #544]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	099b      	lsrs	r3, r3, #6
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d56:	f04f 0500 	mov.w	r5, #0
 8007d5a:	ea02 0004 	and.w	r0, r2, r4
 8007d5e:	ea03 0105 	and.w	r1, r3, r5
 8007d62:	4b83      	ldr	r3, [pc, #524]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8007d64:	fb03 f201 	mul.w	r2, r3, r1
 8007d68:	2300      	movs	r3, #0
 8007d6a:	fb03 f300 	mul.w	r3, r3, r0
 8007d6e:	4413      	add	r3, r2
 8007d70:	4a7f      	ldr	r2, [pc, #508]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8007d72:	fba0 0102 	umull	r0, r1, r0, r2
 8007d76:	440b      	add	r3, r1
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	f7f8 ff07 	bl	8000b94 <__aeabi_uldivmod>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e04c      	b.n	8007e2a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d90:	4b75      	ldr	r3, [pc, #468]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	099b      	lsrs	r3, r3, #6
 8007d96:	461a      	mov	r2, r3
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007da0:	f04f 0100 	mov.w	r1, #0
 8007da4:	ea02 0800 	and.w	r8, r2, r0
 8007da8:	ea03 0901 	and.w	r9, r3, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	014b      	lsls	r3, r1, #5
 8007dba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007dbe:	0142      	lsls	r2, r0, #5
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	ebb0 0008 	subs.w	r0, r0, r8
 8007dc8:	eb61 0109 	sbc.w	r1, r1, r9
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	018b      	lsls	r3, r1, #6
 8007dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dda:	0182      	lsls	r2, r0, #6
 8007ddc:	1a12      	subs	r2, r2, r0
 8007dde:	eb63 0301 	sbc.w	r3, r3, r1
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	00d9      	lsls	r1, r3, #3
 8007dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007df0:	00d0      	lsls	r0, r2, #3
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	eb12 0208 	adds.w	r2, r2, r8
 8007dfa:	eb43 0309 	adc.w	r3, r3, r9
 8007dfe:	f04f 0000 	mov.w	r0, #0
 8007e02:	f04f 0100 	mov.w	r1, #0
 8007e06:	0299      	lsls	r1, r3, #10
 8007e08:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e0c:	0290      	lsls	r0, r2, #10
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4610      	mov	r0, r2
 8007e14:	4619      	mov	r1, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	f7f8 feb9 	bl	8000b94 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4613      	mov	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	3301      	adds	r3, #1
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	613b      	str	r3, [r7, #16]
      break;
 8007e44:	e089      	b.n	8007f5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e46:	4948      	ldr	r1, [pc, #288]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007e48:	6849      	ldr	r1, [r1, #4]
 8007e4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007e4e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e50:	4945      	ldr	r1, [pc, #276]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007e52:	6849      	ldr	r1, [r1, #4]
 8007e54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d024      	beq.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e5c:	4942      	ldr	r1, [pc, #264]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007e5e:	6849      	ldr	r1, [r1, #4]
 8007e60:	0989      	lsrs	r1, r1, #6
 8007e62:	4608      	mov	r0, r1
 8007e64:	f04f 0100 	mov.w	r1, #0
 8007e68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007e6c:	f04f 0500 	mov.w	r5, #0
 8007e70:	ea00 0204 	and.w	r2, r0, r4
 8007e74:	ea01 0305 	and.w	r3, r1, r5
 8007e78:	493d      	ldr	r1, [pc, #244]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8007e7a:	fb01 f003 	mul.w	r0, r1, r3
 8007e7e:	2100      	movs	r1, #0
 8007e80:	fb01 f102 	mul.w	r1, r1, r2
 8007e84:	1844      	adds	r4, r0, r1
 8007e86:	493a      	ldr	r1, [pc, #232]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8007e88:	fba2 0101 	umull	r0, r1, r2, r1
 8007e8c:	1863      	adds	r3, r4, r1
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f7f8 fe7c 	bl	8000b94 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e04a      	b.n	8007f3c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea6:	4b30      	ldr	r3, [pc, #192]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	099b      	lsrs	r3, r3, #6
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007eb6:	f04f 0100 	mov.w	r1, #0
 8007eba:	ea02 0400 	and.w	r4, r2, r0
 8007ebe:	ea03 0501 	and.w	r5, r3, r1
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	014b      	lsls	r3, r1, #5
 8007ed0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ed4:	0142      	lsls	r2, r0, #5
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	1b00      	subs	r0, r0, r4
 8007edc:	eb61 0105 	sbc.w	r1, r1, r5
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	018b      	lsls	r3, r1, #6
 8007eea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007eee:	0182      	lsls	r2, r0, #6
 8007ef0:	1a12      	subs	r2, r2, r0
 8007ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8007ef6:	f04f 0000 	mov.w	r0, #0
 8007efa:	f04f 0100 	mov.w	r1, #0
 8007efe:	00d9      	lsls	r1, r3, #3
 8007f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f04:	00d0      	lsls	r0, r2, #3
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	1912      	adds	r2, r2, r4
 8007f0c:	eb45 0303 	adc.w	r3, r5, r3
 8007f10:	f04f 0000 	mov.w	r0, #0
 8007f14:	f04f 0100 	mov.w	r1, #0
 8007f18:	0299      	lsls	r1, r3, #10
 8007f1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f1e:	0290      	lsls	r0, r2, #10
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4610      	mov	r0, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	f7f8 fe30 	bl	8000b94 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	0f1b      	lsrs	r3, r3, #28
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	613b      	str	r3, [r7, #16]
      break;
 8007f52:	e002      	b.n	8007f5a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8007f56:	613b      	str	r3, [r7, #16]
      break;
 8007f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f5a:	693b      	ldr	r3, [r7, #16]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f66:	bf00      	nop
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	00f42400 	.word	0x00f42400
 8007f70:	017d7840 	.word	0x017d7840

08007f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e28d      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 8083 	beq.w	800809a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f94:	4b94      	ldr	r3, [pc, #592]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f003 030c 	and.w	r3, r3, #12
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d019      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007fa0:	4b91      	ldr	r3, [pc, #580]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d106      	bne.n	8007fba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007fac:	4b8e      	ldr	r3, [pc, #568]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fba:	4b8b      	ldr	r3, [pc, #556]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d112      	bne.n	8007fec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc6:	4b88      	ldr	r3, [pc, #544]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fd2:	d10b      	bne.n	8007fec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd4:	4b84      	ldr	r3, [pc, #528]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05b      	beq.n	8008098 <HAL_RCC_OscConfig+0x124>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d157      	bne.n	8008098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e25a      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff4:	d106      	bne.n	8008004 <HAL_RCC_OscConfig+0x90>
 8007ff6:	4b7c      	ldr	r3, [pc, #496]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a7b      	ldr	r2, [pc, #492]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e01d      	b.n	8008040 <HAL_RCC_OscConfig+0xcc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800800c:	d10c      	bne.n	8008028 <HAL_RCC_OscConfig+0xb4>
 800800e:	4b76      	ldr	r3, [pc, #472]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a75      	ldr	r2, [pc, #468]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4b73      	ldr	r3, [pc, #460]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a72      	ldr	r2, [pc, #456]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0xcc>
 8008028:	4b6f      	ldr	r3, [pc, #444]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a6e      	ldr	r2, [pc, #440]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800802e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a6b      	ldr	r2, [pc, #428]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800803a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7ff f9a6 	bl	8007398 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008050:	f7ff f9a2 	bl	8007398 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e21f      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	4b61      	ldr	r3, [pc, #388]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0xdc>
 800806e:	e014      	b.n	800809a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7ff f992 	bl	8007398 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008078:	f7ff f98e 	bl	8007398 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	; 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e20b      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808a:	4b57      	ldr	r3, [pc, #348]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x104>
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d06f      	beq.n	8008186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80080a6:	4b50      	ldr	r3, [pc, #320]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 030c 	and.w	r3, r3, #12
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d017      	beq.n	80080e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80080b2:	4b4d      	ldr	r3, [pc, #308]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d105      	bne.n	80080ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80080be:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ca:	4b47      	ldr	r3, [pc, #284]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80080d2:	2b0c      	cmp	r3, #12
 80080d4:	d11c      	bne.n	8008110 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080d6:	4b44      	ldr	r3, [pc, #272]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d116      	bne.n	8008110 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080e2:	4b41      	ldr	r3, [pc, #260]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_RCC_OscConfig+0x186>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d001      	beq.n	80080fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e1d3      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fa:	4b3b      	ldr	r3, [pc, #236]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4937      	ldr	r1, [pc, #220]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800810a:	4313      	orrs	r3, r2
 800810c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800810e:	e03a      	b.n	8008186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d020      	beq.n	800815a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008118:	4b34      	ldr	r3, [pc, #208]	; (80081ec <HAL_RCC_OscConfig+0x278>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811e:	f7ff f93b 	bl	8007398 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008126:	f7ff f937 	bl	8007398 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e1b4      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008138:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008144:	4b28      	ldr	r3, [pc, #160]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	4925      	ldr	r1, [pc, #148]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 8008154:	4313      	orrs	r3, r2
 8008156:	600b      	str	r3, [r1, #0]
 8008158:	e015      	b.n	8008186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800815a:	4b24      	ldr	r3, [pc, #144]	; (80081ec <HAL_RCC_OscConfig+0x278>)
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7ff f91a 	bl	8007398 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008168:	f7ff f916 	bl	8007398 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e193      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d036      	beq.n	8008200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d016      	beq.n	80081c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800819a:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800819c:	2201      	movs	r2, #1
 800819e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a0:	f7ff f8fa 	bl	8007398 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081a8:	f7ff f8f6 	bl	8007398 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e173      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_RCC_OscConfig+0x274>)
 80081bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0x234>
 80081c6:	e01b      	b.n	8008200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7ff f8e3 	bl	8007398 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d4:	e00e      	b.n	80081f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081d6:	f7ff f8df 	bl	8007398 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d907      	bls.n	80081f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e15c      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
 80081e8:	40023800 	.word	0x40023800
 80081ec:	42470000 	.word	0x42470000
 80081f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081f4:	4b8a      	ldr	r3, [pc, #552]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1ea      	bne.n	80081d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8097 	beq.w	800833c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008212:	4b83      	ldr	r3, [pc, #524]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10f      	bne.n	800823e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	4b7f      	ldr	r3, [pc, #508]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	4a7e      	ldr	r2, [pc, #504]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822c:	6413      	str	r3, [r2, #64]	; 0x40
 800822e:	4b7c      	ldr	r3, [pc, #496]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823e:	4b79      	ldr	r3, [pc, #484]	; (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d118      	bne.n	800827c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800824a:	4b76      	ldr	r3, [pc, #472]	; (8008424 <HAL_RCC_OscConfig+0x4b0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a75      	ldr	r2, [pc, #468]	; (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008256:	f7ff f89f 	bl	8007398 <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825e:	f7ff f89b 	bl	8007398 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e118      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008270:	4b6c      	ldr	r3, [pc, #432]	; (8008424 <HAL_RCC_OscConfig+0x4b0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f0      	beq.n	800825e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d106      	bne.n	8008292 <HAL_RCC_OscConfig+0x31e>
 8008284:	4b66      	ldr	r3, [pc, #408]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008288:	4a65      	ldr	r2, [pc, #404]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	6713      	str	r3, [r2, #112]	; 0x70
 8008290:	e01c      	b.n	80082cc <HAL_RCC_OscConfig+0x358>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b05      	cmp	r3, #5
 8008298:	d10c      	bne.n	80082b4 <HAL_RCC_OscConfig+0x340>
 800829a:	4b61      	ldr	r3, [pc, #388]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	4a60      	ldr	r2, [pc, #384]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	6713      	str	r3, [r2, #112]	; 0x70
 80082a6:	4b5e      	ldr	r3, [pc, #376]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	4a5d      	ldr	r2, [pc, #372]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	6713      	str	r3, [r2, #112]	; 0x70
 80082b2:	e00b      	b.n	80082cc <HAL_RCC_OscConfig+0x358>
 80082b4:	4b5a      	ldr	r3, [pc, #360]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b8:	4a59      	ldr	r2, [pc, #356]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082ba:	f023 0301 	bic.w	r3, r3, #1
 80082be:	6713      	str	r3, [r2, #112]	; 0x70
 80082c0:	4b57      	ldr	r3, [pc, #348]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	4a56      	ldr	r2, [pc, #344]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082c6:	f023 0304 	bic.w	r3, r3, #4
 80082ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d4:	f7ff f860 	bl	8007398 <HAL_GetTick>
 80082d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082da:	e00a      	b.n	80082f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082dc:	f7ff f85c 	bl	8007398 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e0d7      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082f2:	4b4b      	ldr	r3, [pc, #300]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0ee      	beq.n	80082dc <HAL_RCC_OscConfig+0x368>
 80082fe:	e014      	b.n	800832a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008300:	f7ff f84a 	bl	8007398 <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008306:	e00a      	b.n	800831e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008308:	f7ff f846 	bl	8007398 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	f241 3288 	movw	r2, #5000	; 0x1388
 8008316:	4293      	cmp	r3, r2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e0c1      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800831e:	4b40      	ldr	r3, [pc, #256]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1ee      	bne.n	8008308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d105      	bne.n	800833c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008330:	4b3b      	ldr	r3, [pc, #236]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	4a3a      	ldr	r2, [pc, #232]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800833a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80ad 	beq.w	80084a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008346:	4b36      	ldr	r3, [pc, #216]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
 800834e:	2b08      	cmp	r3, #8
 8008350:	d060      	beq.n	8008414 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d145      	bne.n	80083e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835a:	4b33      	ldr	r3, [pc, #204]	; (8008428 <HAL_RCC_OscConfig+0x4b4>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008360:	f7ff f81a 	bl	8007398 <HAL_GetTick>
 8008364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008368:	f7ff f816 	bl	8007398 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e093      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837a:	4b29      	ldr	r3, [pc, #164]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f0      	bne.n	8008368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69da      	ldr	r2, [r3, #28]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	019b      	lsls	r3, r3, #6
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	3b01      	subs	r3, #1
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	061b      	lsls	r3, r3, #24
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	071b      	lsls	r3, r3, #28
 80083b2:	491b      	ldr	r1, [pc, #108]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083b8:	4b1b      	ldr	r3, [pc, #108]	; (8008428 <HAL_RCC_OscConfig+0x4b4>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fe ffeb 	bl	8007398 <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c6:	f7fe ffe7 	bl	8007398 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e064      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083d8:	4b11      	ldr	r3, [pc, #68]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0f0      	beq.n	80083c6 <HAL_RCC_OscConfig+0x452>
 80083e4:	e05c      	b.n	80084a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <HAL_RCC_OscConfig+0x4b4>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fe ffd4 	bl	8007398 <HAL_GetTick>
 80083f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f4:	f7fe ffd0 	bl	8007398 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e04d      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008406:	4b06      	ldr	r3, [pc, #24]	; (8008420 <HAL_RCC_OscConfig+0x4ac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f0      	bne.n	80083f4 <HAL_RCC_OscConfig+0x480>
 8008412:	e045      	b.n	80084a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d107      	bne.n	800842c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e040      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
 8008420:	40023800 	.word	0x40023800
 8008424:	40007000 	.word	0x40007000
 8008428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800842c:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <HAL_RCC_OscConfig+0x538>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d030      	beq.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008444:	429a      	cmp	r2, r3
 8008446:	d129      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008452:	429a      	cmp	r2, r3
 8008454:	d122      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800845c:	4013      	ands	r3, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008464:	4293      	cmp	r3, r2
 8008466:	d119      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	3b01      	subs	r3, #1
 8008476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d10f      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008488:	429a      	cmp	r2, r3
 800848a:	d107      	bne.n	800849c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800

080084b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e07b      	b.n	80085ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d2:	d009      	beq.n	80084e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	61da      	str	r2, [r3, #28]
 80084da:	e005      	b.n	80084e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fc f814 	bl	8004530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856c:	ea42 0103 	orr.w	r1, r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	f003 0104 	and.w	r1, r3, #4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	f003 0210 	and.w	r2, r3, #16
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <HAL_SPI_Transmit+0x22>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e126      	b.n	8008832 <HAL_SPI_Transmit+0x270>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085ec:	f7fe fed4 	bl	8007398 <HAL_GetTick>
 80085f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d002      	beq.n	8008608 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008602:	2302      	movs	r3, #2
 8008604:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008606:	e10b      	b.n	8008820 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_SPI_Transmit+0x52>
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008618:	e102      	b.n	8008820 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2203      	movs	r2, #3
 800861e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	88fa      	ldrh	r2, [r7, #6]
 8008638:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008660:	d10f      	bne.n	8008682 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008670:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008680:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d007      	beq.n	80086a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800869e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a8:	d14b      	bne.n	8008742 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_SPI_Transmit+0xf6>
 80086b2:	8afb      	ldrh	r3, [r7, #22]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d13e      	bne.n	8008736 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086bc:	881a      	ldrh	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	1c9a      	adds	r2, r3, #2
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086dc:	e02b      	b.n	8008736 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d112      	bne.n	8008712 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	881a      	ldrh	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	1c9a      	adds	r2, r3, #2
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008706:	b29b      	uxth	r3, r3
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008710:	e011      	b.n	8008736 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008712:	f7fe fe41 	bl	8007398 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d803      	bhi.n	800872a <HAL_SPI_Transmit+0x168>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d102      	bne.n	8008730 <HAL_SPI_Transmit+0x16e>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008734:	e074      	b.n	8008820 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ce      	bne.n	80086de <HAL_SPI_Transmit+0x11c>
 8008740:	e04c      	b.n	80087dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <HAL_SPI_Transmit+0x18e>
 800874a:	8afb      	ldrh	r3, [r7, #22]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d140      	bne.n	80087d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008776:	e02c      	b.n	80087d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b02      	cmp	r3, #2
 8008784:	d113      	bne.n	80087ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	330c      	adds	r3, #12
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80087ac:	e011      	b.n	80087d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ae:	f7fe fdf3 	bl	8007398 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d803      	bhi.n	80087c6 <HAL_SPI_Transmit+0x204>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d102      	bne.n	80087cc <HAL_SPI_Transmit+0x20a>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087d0:	e026      	b.n	8008820 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1cd      	bne.n	8008778 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fbcb 	bl	8008f7c <SPI_EndRxTxTransaction>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087fa:	2300      	movs	r3, #0
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e000      	b.n	8008820 <HAL_SPI_Transmit+0x25e>
  }

error:
 800881e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008830:	7ffb      	ldrb	r3, [r7, #31]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af02      	add	r7, sp, #8
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008856:	d112      	bne.n	800887e <HAL_SPI_Receive+0x44>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10e      	bne.n	800887e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2204      	movs	r2, #4
 8008864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008868:	88fa      	ldrh	r2, [r7, #6]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f8f1 	bl	8008a5c <HAL_SPI_TransmitReceive>
 800887a:	4603      	mov	r3, r0
 800887c:	e0ea      	b.n	8008a54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_SPI_Receive+0x52>
 8008888:	2302      	movs	r3, #2
 800888a:	e0e3      	b.n	8008a54 <HAL_SPI_Receive+0x21a>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008894:	f7fe fd80 	bl	8007398 <HAL_GetTick>
 8008898:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d002      	beq.n	80088ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80088a6:	2302      	movs	r3, #2
 80088a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088aa:	e0ca      	b.n	8008a42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_SPI_Receive+0x7e>
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088bc:	e0c1      	b.n	8008a42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2204      	movs	r2, #4
 80088c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88fa      	ldrh	r2, [r7, #6]
 80088dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008904:	d10f      	bne.n	8008926 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008924:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d007      	beq.n	8008944 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d162      	bne.n	8008a12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800894c:	e02e      	b.n	80089ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	d115      	bne.n	8008988 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f103 020c 	add.w	r2, r3, #12
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	7812      	ldrb	r2, [r2, #0]
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008986:	e011      	b.n	80089ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008988:	f7fe fd06 	bl	8007398 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d803      	bhi.n	80089a0 <HAL_SPI_Receive+0x166>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d102      	bne.n	80089a6 <HAL_SPI_Receive+0x16c>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089aa:	e04a      	b.n	8008a42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1cb      	bne.n	800894e <HAL_SPI_Receive+0x114>
 80089b6:	e031      	b.n	8008a1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d113      	bne.n	80089ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	b292      	uxth	r2, r2
 80089d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	1c9a      	adds	r2, r3, #2
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089ec:	e011      	b.n	8008a12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ee:	f7fe fcd3 	bl	8007398 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d803      	bhi.n	8008a06 <HAL_SPI_Receive+0x1cc>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <HAL_SPI_Receive+0x1d2>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a10:	e017      	b.n	8008a42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1cd      	bne.n	80089b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fa45 	bl	8008eb0 <SPI_EndRxTransaction>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	75fb      	strb	r3, [r7, #23]
 8008a3e:	e000      	b.n	8008a42 <HAL_SPI_Receive+0x208>
  }

error :
 8008a40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	; 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x26>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e18a      	b.n	8008d98 <HAL_SPI_TransmitReceive+0x33c>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a8a:	f7fe fc85 	bl	8007398 <HAL_GetTick>
 8008a8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008aa0:	887b      	ldrh	r3, [r7, #2]
 8008aa2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d00f      	beq.n	8008acc <HAL_SPI_TransmitReceive+0x70>
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ab2:	d107      	bne.n	8008ac4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <HAL_SPI_TransmitReceive+0x68>
 8008abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d003      	beq.n	8008acc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008aca:	e15b      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <HAL_SPI_TransmitReceive+0x82>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_SPI_TransmitReceive+0x82>
 8008ad8:	887b      	ldrh	r3, [r7, #2]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ae4:	e14e      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d003      	beq.n	8008afa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2205      	movs	r2, #5
 8008af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	887a      	ldrh	r2, [r7, #2]
 8008b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	887a      	ldrh	r2, [r7, #2]
 8008b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	887a      	ldrh	r2, [r7, #2]
 8008b22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d007      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b56:	d178      	bne.n	8008c4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_SPI_TransmitReceive+0x10a>
 8008b60:	8b7b      	ldrh	r3, [r7, #26]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d166      	bne.n	8008c34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	881a      	ldrh	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	1c9a      	adds	r2, r3, #2
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b8a:	e053      	b.n	8008c34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d11b      	bne.n	8008bd2 <HAL_SPI_TransmitReceive+0x176>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d016      	beq.n	8008bd2 <HAL_SPI_TransmitReceive+0x176>
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d113      	bne.n	8008bd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	881a      	ldrh	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	1c9a      	adds	r2, r3, #2
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d119      	bne.n	8008c14 <HAL_SPI_TransmitReceive+0x1b8>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d014      	beq.n	8008c14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	1c9a      	adds	r2, r3, #2
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c10:	2301      	movs	r3, #1
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c14:	f7fe fbc0 	bl	8007398 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d807      	bhi.n	8008c34 <HAL_SPI_TransmitReceive+0x1d8>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d003      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c32:	e0a7      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1a6      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x130>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1a1      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x130>
 8008c48:	e07c      	b.n	8008d44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x1fc>
 8008c52:	8b7b      	ldrh	r3, [r7, #26]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d16b      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c7e:	e057      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d11c      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x26c>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d017      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x26c>
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d114      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	7812      	ldrb	r2, [r2, #0]
 8008caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d119      	bne.n	8008d0a <HAL_SPI_TransmitReceive+0x2ae>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d014      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d06:	2301      	movs	r3, #1
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d0a:	f7fe fb45 	bl	8007398 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d803      	bhi.n	8008d22 <HAL_SPI_TransmitReceive+0x2c6>
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d102      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x2cc>
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d103      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d2e:	e029      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1a2      	bne.n	8008c80 <HAL_SPI_TransmitReceive+0x224>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d19d      	bne.n	8008c80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f917 	bl	8008f7c <SPI_EndRxTxTransaction>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d60:	e010      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	617b      	str	r3, [r7, #20]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	e000      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008d82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3730      	adds	r7, #48	; 0x30
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008db0:	f7fe faf2 	bl	8007398 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dc0:	f7fe faea 	bl	8007398 <HAL_GetTick>
 8008dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dc6:	4b39      	ldr	r3, [pc, #228]	; (8008eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	015b      	lsls	r3, r3, #5
 8008dcc:	0d1b      	lsrs	r3, r3, #20
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dd6:	e054      	b.n	8008e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dde:	d050      	beq.n	8008e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008de0:	f7fe fada 	bl	8007398 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d902      	bls.n	8008df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d13d      	bne.n	8008e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e0e:	d111      	bne.n	8008e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e18:	d004      	beq.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e22:	d107      	bne.n	8008e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3c:	d10f      	bne.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e017      	b.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bf0c      	ite	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	2300      	movne	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d19b      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000184 	.word	0x20000184

08008eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ec4:	d111      	bne.n	8008eea <SPI_EndRxTransaction+0x3a>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ece:	d004      	beq.n	8008eda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed8:	d107      	bne.n	8008eea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef2:	d12a      	bne.n	8008f4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008efc:	d012      	beq.n	8008f24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2180      	movs	r1, #128	; 0x80
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff ff49 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d02d      	beq.n	8008f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f18:	f043 0220 	orr.w	r2, r3, #32
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e026      	b.n	8008f72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff ff36 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01a      	beq.n	8008f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3e:	f043 0220 	orr.w	r2, r3, #32
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e013      	b.n	8008f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2200      	movs	r2, #0
 8008f52:	2101      	movs	r1, #1
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff ff23 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	f043 0220 	orr.w	r2, r3, #32
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e000      	b.n	8008f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f88:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <SPI_EndRxTxTransaction+0x7c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <SPI_EndRxTxTransaction+0x80>)
 8008f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f92:	0d5b      	lsrs	r3, r3, #21
 8008f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f98:	fb02 f303 	mul.w	r3, r2, r3
 8008f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa6:	d112      	bne.n	8008fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fef4 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d016      	beq.n	8008fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e00f      	b.n	8008fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d0f2      	beq.n	8008fce <SPI_EndRxTxTransaction+0x52>
 8008fe8:	e000      	b.n	8008fec <SPI_EndRxTxTransaction+0x70>
        break;
 8008fea:	bf00      	nop
  }

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20000184 	.word	0x20000184
 8008ffc:	165e9f81 	.word	0x165e9f81

08009000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e041      	b.n	8009096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fb fb6e 	bl	8004708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f000 fafa 	bl	8009638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d001      	beq.n	80090b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e046      	b.n	8009146 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <HAL_TIM_Base_Start+0xb4>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d022      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d2:	d01d      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <HAL_TIM_Base_Start+0xb8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d018      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <HAL_TIM_Base_Start+0xbc>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <HAL_TIM_Base_Start+0xc0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00e      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_TIM_Base_Start+0xc4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d009      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a19      	ldr	r2, [pc, #100]	; (8009168 <HAL_TIM_Base_Start+0xc8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d004      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a18      	ldr	r2, [pc, #96]	; (800916c <HAL_TIM_Base_Start+0xcc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d111      	bne.n	8009134 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b06      	cmp	r3, #6
 8009120:	d010      	beq.n	8009144 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009132:	e007      	b.n	8009144 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40010000 	.word	0x40010000
 8009158:	40000400 	.word	0x40000400
 800915c:	40000800 	.word	0x40000800
 8009160:	40000c00 	.word	0x40000c00
 8009164:	40010400 	.word	0x40010400
 8009168:	40014000 	.word	0x40014000
 800916c:	40001800 	.word	0x40001800

08009170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d001      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e04e      	b.n	8009226 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0201 	orr.w	r2, r2, #1
 800919e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a23      	ldr	r2, [pc, #140]	; (8009234 <HAL_TIM_Base_Start_IT+0xc4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d022      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b2:	d01d      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <HAL_TIM_Base_Start_IT+0xc8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d018      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1e      	ldr	r2, [pc, #120]	; (800923c <HAL_TIM_Base_Start_IT+0xcc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00e      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <HAL_TIM_Base_Start_IT+0xd4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a19      	ldr	r2, [pc, #100]	; (8009248 <HAL_TIM_Base_Start_IT+0xd8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <HAL_TIM_Base_Start_IT+0xdc>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d111      	bne.n	8009214 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d010      	beq.n	8009224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009212:	e007      	b.n	8009224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0201 	orr.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000
 8009238:	40000400 	.word	0x40000400
 800923c:	40000800 	.word	0x40000800
 8009240:	40000c00 	.word	0x40000c00
 8009244:	40010400 	.word	0x40010400
 8009248:	40014000 	.word	0x40014000
 800924c:	40001800 	.word	0x40001800

08009250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d122      	bne.n	80092ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b02      	cmp	r3, #2
 8009272:	d11b      	bne.n	80092ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0202 	mvn.w	r2, #2
 800927c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f9b2 	bl	80095fc <HAL_TIM_IC_CaptureCallback>
 8009298:	e005      	b.n	80092a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9a4 	bl	80095e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9b5 	bl	8009610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d122      	bne.n	8009300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d11b      	bne.n	8009300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f06f 0204 	mvn.w	r2, #4
 80092d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2202      	movs	r2, #2
 80092d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f988 	bl	80095fc <HAL_TIM_IC_CaptureCallback>
 80092ec:	e005      	b.n	80092fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f97a 	bl	80095e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f98b 	bl	8009610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0308 	and.w	r3, r3, #8
 800930a:	2b08      	cmp	r3, #8
 800930c:	d122      	bne.n	8009354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f003 0308 	and.w	r3, r3, #8
 8009318:	2b08      	cmp	r3, #8
 800931a:	d11b      	bne.n	8009354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0208 	mvn.w	r2, #8
 8009324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2204      	movs	r2, #4
 800932a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f95e 	bl	80095fc <HAL_TIM_IC_CaptureCallback>
 8009340:	e005      	b.n	800934e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f950 	bl	80095e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f961 	bl	8009610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0310 	and.w	r3, r3, #16
 800935e:	2b10      	cmp	r3, #16
 8009360:	d122      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b10      	cmp	r3, #16
 800936e:	d11b      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0210 	mvn.w	r2, #16
 8009378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2208      	movs	r2, #8
 800937e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f934 	bl	80095fc <HAL_TIM_IC_CaptureCallback>
 8009394:	e005      	b.n	80093a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f926 	bl	80095e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f937 	bl	8009610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d10e      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d107      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0201 	mvn.w	r2, #1
 80093cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7f7 fe3c 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093de:	2b80      	cmp	r3, #128	; 0x80
 80093e0:	d10e      	bne.n	8009400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ec:	2b80      	cmp	r3, #128	; 0x80
 80093ee:	d107      	bne.n	8009400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fadc 	bl	80099b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940a:	2b40      	cmp	r3, #64	; 0x40
 800940c:	d10e      	bne.n	800942c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	d107      	bne.n	800942c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8fc 	bl	8009624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b20      	cmp	r3, #32
 8009438:	d10e      	bne.n	8009458 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b20      	cmp	r3, #32
 8009446:	d107      	bne.n	8009458 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0220 	mvn.w	r2, #32
 8009450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 faa6 	bl	80099a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009470:	2b01      	cmp	r3, #1
 8009472:	d101      	bne.n	8009478 <HAL_TIM_ConfigClockSource+0x18>
 8009474:	2302      	movs	r3, #2
 8009476:	e0b3      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x180>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800949e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b0:	d03e      	beq.n	8009530 <HAL_TIM_ConfigClockSource+0xd0>
 80094b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b6:	f200 8087 	bhi.w	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094be:	f000 8085 	beq.w	80095cc <HAL_TIM_ConfigClockSource+0x16c>
 80094c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c6:	d87f      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094c8:	2b70      	cmp	r3, #112	; 0x70
 80094ca:	d01a      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0xa2>
 80094cc:	2b70      	cmp	r3, #112	; 0x70
 80094ce:	d87b      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094d0:	2b60      	cmp	r3, #96	; 0x60
 80094d2:	d050      	beq.n	8009576 <HAL_TIM_ConfigClockSource+0x116>
 80094d4:	2b60      	cmp	r3, #96	; 0x60
 80094d6:	d877      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094d8:	2b50      	cmp	r3, #80	; 0x50
 80094da:	d03c      	beq.n	8009556 <HAL_TIM_ConfigClockSource+0xf6>
 80094dc:	2b50      	cmp	r3, #80	; 0x50
 80094de:	d873      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d058      	beq.n	8009596 <HAL_TIM_ConfigClockSource+0x136>
 80094e4:	2b40      	cmp	r3, #64	; 0x40
 80094e6:	d86f      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094e8:	2b30      	cmp	r3, #48	; 0x30
 80094ea:	d064      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x156>
 80094ec:	2b30      	cmp	r3, #48	; 0x30
 80094ee:	d86b      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d060      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x156>
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d867      	bhi.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d05c      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x156>
 80094fc:	2b10      	cmp	r3, #16
 80094fe:	d05a      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009500:	e062      	b.n	80095c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6899      	ldr	r1, [r3, #8]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f000 f9ab 	bl	800986c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009524:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	609a      	str	r2, [r3, #8]
      break;
 800952e:	e04e      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	6899      	ldr	r1, [r3, #8]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f000 f994 	bl	800986c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009552:	609a      	str	r2, [r3, #8]
      break;
 8009554:	e03b      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6859      	ldr	r1, [r3, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	461a      	mov	r2, r3
 8009564:	f000 f908 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2150      	movs	r1, #80	; 0x50
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f961 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8009574:	e02b      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	6859      	ldr	r1, [r3, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	461a      	mov	r2, r3
 8009584:	f000 f927 	bl	80097d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2160      	movs	r1, #96	; 0x60
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f951 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8009594:	e01b      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f000 f8e8 	bl	8009778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2140      	movs	r1, #64	; 0x40
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f941 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 80095b4:	e00b      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f000 f938 	bl	8009836 <TIM_ITRx_SetConfig>
        break;
 80095c6:	e002      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80095cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a40      	ldr	r2, [pc, #256]	; (800974c <TIM_Base_SetConfig+0x114>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a3d      	ldr	r2, [pc, #244]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a3c      	ldr	r2, [pc, #240]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3b      	ldr	r2, [pc, #236]	; (8009758 <TIM_Base_SetConfig+0x120>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a3a      	ldr	r2, [pc, #232]	; (800975c <TIM_Base_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a2f      	ldr	r2, [pc, #188]	; (800974c <TIM_Base_SetConfig+0x114>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d02b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d027      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2c      	ldr	r2, [pc, #176]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d023      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2b      	ldr	r2, [pc, #172]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01f      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2a      	ldr	r2, [pc, #168]	; (8009758 <TIM_Base_SetConfig+0x120>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d01b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a29      	ldr	r2, [pc, #164]	; (800975c <TIM_Base_SetConfig+0x124>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d017      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a28      	ldr	r2, [pc, #160]	; (8009760 <TIM_Base_SetConfig+0x128>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d013      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a27      	ldr	r2, [pc, #156]	; (8009764 <TIM_Base_SetConfig+0x12c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00f      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a26      	ldr	r2, [pc, #152]	; (8009768 <TIM_Base_SetConfig+0x130>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a25      	ldr	r2, [pc, #148]	; (800976c <TIM_Base_SetConfig+0x134>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d007      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a24      	ldr	r2, [pc, #144]	; (8009770 <TIM_Base_SetConfig+0x138>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d003      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a23      	ldr	r2, [pc, #140]	; (8009774 <TIM_Base_SetConfig+0x13c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d108      	bne.n	80096fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a0a      	ldr	r2, [pc, #40]	; (800974c <TIM_Base_SetConfig+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a0c      	ldr	r2, [pc, #48]	; (800975c <TIM_Base_SetConfig+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d103      	bne.n	8009738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	615a      	str	r2, [r3, #20]
}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40010000 	.word	0x40010000
 8009750:	40000400 	.word	0x40000400
 8009754:	40000800 	.word	0x40000800
 8009758:	40000c00 	.word	0x40000c00
 800975c:	40010400 	.word	0x40010400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800
 800976c:	40001800 	.word	0x40001800
 8009770:	40001c00 	.word	0x40001c00
 8009774:	40002000 	.word	0x40002000

08009778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 030a 	bic.w	r3, r3, #10
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0210 	bic.w	r2, r3, #16
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	031b      	lsls	r3, r3, #12
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	f043 0307 	orr.w	r3, r3, #7
 8009858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	609a      	str	r2, [r3, #8]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	021a      	lsls	r2, r3, #8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4313      	orrs	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	609a      	str	r2, [r3, #8]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e05a      	b.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a21      	ldr	r2, [pc, #132]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d022      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009910:	d01d      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1d      	ldr	r2, [pc, #116]	; (800998c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d018      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d013      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00e      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a18      	ldr	r2, [pc, #96]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d009      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a17      	ldr	r2, [pc, #92]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d004      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d10c      	bne.n	8009968 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4313      	orrs	r3, r2
 800995e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40010000 	.word	0x40010000
 800998c:	40000400 	.word	0x40000400
 8009990:	40000800 	.word	0x40000800
 8009994:	40000c00 	.word	0x40000c00
 8009998:	40010400 	.word	0x40010400
 800999c:	40014000 	.word	0x40014000
 80099a0:	40001800 	.word	0x40001800

080099a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e03f      	b.n	8009a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fa ff02 	bl	80047fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2224      	movs	r2, #36	; 0x24
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fc7b 	bl	800a30c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b08a      	sub	sp, #40	; 0x28
 8009a6a:	af02      	add	r7, sp, #8
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d17c      	bne.n	8009b80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_UART_Transmit+0x2c>
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e075      	b.n	8009b82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_UART_Transmit+0x3e>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e06e      	b.n	8009b82 <HAL_UART_Transmit+0x11c>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2221      	movs	r2, #33	; 0x21
 8009ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aba:	f7fd fc6d 	bl	8007398 <HAL_GetTick>
 8009abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	88fa      	ldrh	r2, [r7, #6]
 8009ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	88fa      	ldrh	r2, [r7, #6]
 8009aca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad4:	d108      	bne.n	8009ae8 <HAL_UART_Transmit+0x82>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	61bb      	str	r3, [r7, #24]
 8009ae6:	e003      	b.n	8009af0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009af8:	e02a      	b.n	8009b50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2200      	movs	r2, #0
 8009b02:	2180      	movs	r1, #128	; 0x80
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fa3d 	bl	8009f84 <UART_WaitOnFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e036      	b.n	8009b82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	61bb      	str	r3, [r7, #24]
 8009b30:	e007      	b.n	8009b42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1cf      	bne.n	8009afa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2200      	movs	r2, #0
 8009b62:	2140      	movs	r1, #64	; 0x40
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fa0d 	bl	8009f84 <UART_WaitOnFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e006      	b.n	8009b82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e000      	b.n	8009b82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b80:	2302      	movs	r3, #2
  }
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	4613      	mov	r3, r2
 8009b96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b20      	cmp	r3, #32
 8009ba2:	d11d      	bne.n	8009be0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <HAL_UART_Receive_IT+0x26>
 8009baa:	88fb      	ldrh	r3, [r7, #6]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e016      	b.n	8009be2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_UART_Receive_IT+0x38>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e00f      	b.n	8009be2 <HAL_UART_Receive_IT+0x58>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fa1e 	bl	800a018 <UART_Start_Receive_IT>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	e000      	b.n	8009be2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009be0:	2302      	movs	r3, #2
  }
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	; 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10d      	bne.n	8009c3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d008      	beq.n	8009c3e <HAL_UART_IRQHandler+0x52>
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fad1 	bl	800a1de <UART_Receive_IT>
      return;
 8009c3c:	e17c      	b.n	8009f38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 80b1 	beq.w	8009da8 <HAL_UART_IRQHandler+0x1bc>
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d105      	bne.n	8009c5c <HAL_UART_IRQHandler+0x70>
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 80a6 	beq.w	8009da8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <HAL_UART_IRQHandler+0x90>
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	f043 0201 	orr.w	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <HAL_UART_IRQHandler+0xb0>
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	f043 0202 	orr.w	r2, r3, #2
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <HAL_UART_IRQHandler+0xd0>
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	f043 0204 	orr.w	r2, r3, #4
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	f003 0308 	and.w	r3, r3, #8
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00f      	beq.n	8009ce6 <HAL_UART_IRQHandler+0xfa>
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d104      	bne.n	8009cda <HAL_UART_IRQHandler+0xee>
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	f043 0208 	orr.w	r2, r3, #8
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 811f 	beq.w	8009f2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_UART_IRQHandler+0x11e>
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa6a 	bl	800a1de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	bf0c      	ite	eq
 8009d18:	2301      	moveq	r3, #1
 8009d1a:	2300      	movne	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	f003 0308 	and.w	r3, r3, #8
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <HAL_UART_IRQHandler+0x146>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d031      	beq.n	8009d96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f9aa 	bl	800a08c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d123      	bne.n	8009d8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695a      	ldr	r2, [r3, #20]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d013      	beq.n	8009d86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	4a77      	ldr	r2, [pc, #476]	; (8009f40 <HAL_UART_IRQHandler+0x354>)
 8009d64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd fca1 	bl	80076b2 <HAL_DMA_Abort_IT>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d016      	beq.n	8009da4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d80:	4610      	mov	r0, r2
 8009d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d84:	e00e      	b.n	8009da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f8e6 	bl	8009f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8c:	e00a      	b.n	8009da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8e2 	bl	8009f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d94:	e006      	b.n	8009da4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f8de 	bl	8009f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009da2:	e0c4      	b.n	8009f2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da4:	bf00      	nop
    return;
 8009da6:	e0c2      	b.n	8009f2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	f040 80a2 	bne.w	8009ef6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 809c 	beq.w	8009ef6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8096 	beq.w	8009ef6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	60fb      	str	r3, [r7, #12]
 8009dde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d14f      	bne.n	8009e8e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009df8:	8a3b      	ldrh	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 8099 	beq.w	8009f32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e04:	8a3a      	ldrh	r2, [r7, #16]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	f080 8093 	bcs.w	8009f32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	8a3a      	ldrh	r2, [r7, #16]
 8009e10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1c:	d02b      	beq.n	8009e76 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e2c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	695a      	ldr	r2, [r3, #20]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0201 	bic.w	r2, r2, #1
 8009e3c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	695a      	ldr	r2, [r3, #20]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0210 	bic.w	r2, r2, #16
 8009e6a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fd fbae 	bl	80075d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f870 	bl	8009f6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009e8c:	e051      	b.n	8009f32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d047      	beq.n	8009f36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009ea6:	8a7b      	ldrh	r3, [r7, #18]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d044      	beq.n	8009f36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009eba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695a      	ldr	r2, [r3, #20]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0210 	bic.w	r2, r2, #16
 8009ee8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009eea:	8a7b      	ldrh	r3, [r7, #18]
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f83c 	bl	8009f6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009ef4:	e01f      	b.n	8009f36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <HAL_UART_IRQHandler+0x326>
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8ff 	bl	800a10e <UART_Transmit_IT>
    return;
 8009f10:	e012      	b.n	8009f38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00d      	beq.n	8009f38 <HAL_UART_IRQHandler+0x34c>
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d008      	beq.n	8009f38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f941 	bl	800a1ae <UART_EndTransmit_IT>
    return;
 8009f2c:	e004      	b.n	8009f38 <HAL_UART_IRQHandler+0x34c>
    return;
 8009f2e:	bf00      	nop
 8009f30:	e002      	b.n	8009f38 <HAL_UART_IRQHandler+0x34c>
      return;
 8009f32:	bf00      	nop
 8009f34:	e000      	b.n	8009f38 <HAL_UART_IRQHandler+0x34c>
      return;
 8009f36:	bf00      	nop
  }
}
 8009f38:	3728      	adds	r7, #40	; 0x28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800a0e7 	.word	0x0800a0e7

08009f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	4613      	mov	r3, r2
 8009f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f94:	e02c      	b.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9c:	d028      	beq.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fa4:	f7fd f9f8 	bl	8007398 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d21d      	bcs.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	695a      	ldr	r2, [r3, #20]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0201 	bic.w	r2, r2, #1
 8009fd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e00f      	b.n	800a010 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	bf0c      	ite	eq
 800a000:	2301      	moveq	r3, #1
 800a002:	2300      	movne	r3, #0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	461a      	mov	r2, r3
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d0c3      	beq.n	8009f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	88fa      	ldrh	r2, [r7, #6]
 800a030:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	88fa      	ldrh	r2, [r7, #6]
 800a036:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2222      	movs	r2, #34	; 0x22
 800a042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a05c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	695a      	ldr	r2, [r3, #20]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0201 	orr.w	r2, r2, #1
 800a06c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0220 	orr.w	r2, r2, #32
 800a07c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695a      	ldr	r2, [r3, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0201 	bic.w	r2, r2, #1
 800a0b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d107      	bne.n	800a0cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0210 	bic.w	r2, r2, #16
 800a0ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff ff29 	bl	8009f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a10e:	b480      	push	{r7}
 800a110:	b085      	sub	sp, #20
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b21      	cmp	r3, #33	; 0x21
 800a120:	d13e      	bne.n	800a1a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12a:	d114      	bne.n	800a156 <UART_Transmit_IT+0x48>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d110      	bne.n	800a156 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	621a      	str	r2, [r3, #32]
 800a154:	e008      	b.n	800a168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6211      	str	r1, [r2, #32]
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	3b01      	subs	r3, #1
 800a170:	b29b      	uxth	r3, r3
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	4619      	mov	r1, r3
 800a176:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10f      	bne.n	800a19c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a18a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a19a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e000      	b.n	800a1a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1a0:	2302      	movs	r3, #2
  }
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff feb8 	bl	8009f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b22      	cmp	r3, #34	; 0x22
 800a1f0:	f040 8087 	bne.w	800a302 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fc:	d117      	bne.n	800a22e <UART_Receive_IT+0x50>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d113      	bne.n	800a22e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	b29b      	uxth	r3, r3
 800a218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	1c9a      	adds	r2, r3, #2
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	629a      	str	r2, [r3, #40]	; 0x28
 800a22c:	e026      	b.n	800a27c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a240:	d007      	beq.n	800a252 <UART_Receive_IT+0x74>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <UART_Receive_IT+0x82>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	e008      	b.n	800a272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a280:	b29b      	uxth	r3, r3
 800a282:	3b01      	subs	r3, #1
 800a284:	b29b      	uxth	r3, r3
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	4619      	mov	r1, r3
 800a28a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d136      	bne.n	800a2fe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0220 	bic.w	r2, r2, #32
 800a29e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695a      	ldr	r2, [r3, #20]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0201 	bic.w	r2, r2, #1
 800a2be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d10e      	bne.n	800a2ee <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0210 	bic.w	r2, r2, #16
 800a2de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff fe40 	bl	8009f6c <HAL_UARTEx_RxEventCallback>
 800a2ec:	e002      	b.n	800a2f4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7f6 feda 	bl	80010a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e002      	b.n	800a304 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a302:	2302      	movs	r3, #2
  }
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	b09f      	sub	sp, #124	; 0x7c
 800a312:	af00      	add	r7, sp, #0
 800a314:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a322:	68d9      	ldr	r1, [r3, #12]
 800a324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	ea40 0301 	orr.w	r3, r0, r1
 800a32c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	431a      	orrs	r2, r3
 800a338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	431a      	orrs	r2, r3
 800a33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	4313      	orrs	r3, r2
 800a344:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a350:	f021 010c 	bic.w	r1, r1, #12
 800a354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a35a:	430b      	orrs	r3, r1
 800a35c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	6999      	ldr	r1, [r3, #24]
 800a36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	ea40 0301 	orr.w	r3, r0, r1
 800a374:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	4bc5      	ldr	r3, [pc, #788]	; (800a690 <UART_SetConfig+0x384>)
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d004      	beq.n	800a38a <UART_SetConfig+0x7e>
 800a380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4bc3      	ldr	r3, [pc, #780]	; (800a694 <UART_SetConfig+0x388>)
 800a386:	429a      	cmp	r2, r3
 800a388:	d103      	bne.n	800a392 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a38a:	f7fd fc83 	bl	8007c94 <HAL_RCC_GetPCLK2Freq>
 800a38e:	6778      	str	r0, [r7, #116]	; 0x74
 800a390:	e002      	b.n	800a398 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a392:	f7fd fc6b 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 800a396:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a0:	f040 80b6 	bne.w	800a510 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	f04f 0500 	mov.w	r5, #0
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	1891      	adds	r1, r2, r2
 800a3b2:	6439      	str	r1, [r7, #64]	; 0x40
 800a3b4:	415b      	adcs	r3, r3
 800a3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3bc:	1912      	adds	r2, r2, r4
 800a3be:	eb45 0303 	adc.w	r3, r5, r3
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f04f 0100 	mov.w	r1, #0
 800a3ca:	00d9      	lsls	r1, r3, #3
 800a3cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3d0:	00d0      	lsls	r0, r2, #3
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	1911      	adds	r1, r2, r4
 800a3d8:	6639      	str	r1, [r7, #96]	; 0x60
 800a3da:	416b      	adcs	r3, r5
 800a3dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	1891      	adds	r1, r2, r2
 800a3ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800a3ec:	415b      	adcs	r3, r3
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a3f8:	f7f6 fbcc 	bl	8000b94 <__aeabi_uldivmod>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4ba5      	ldr	r3, [pc, #660]	; (800a698 <UART_SetConfig+0x38c>)
 800a402:	fba3 2302 	umull	r2, r3, r3, r2
 800a406:	095b      	lsrs	r3, r3, #5
 800a408:	011e      	lsls	r6, r3, #4
 800a40a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40c:	461c      	mov	r4, r3
 800a40e:	f04f 0500 	mov.w	r5, #0
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	1891      	adds	r1, r2, r2
 800a418:	6339      	str	r1, [r7, #48]	; 0x30
 800a41a:	415b      	adcs	r3, r3
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
 800a41e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a422:	1912      	adds	r2, r2, r4
 800a424:	eb45 0303 	adc.w	r3, r5, r3
 800a428:	f04f 0000 	mov.w	r0, #0
 800a42c:	f04f 0100 	mov.w	r1, #0
 800a430:	00d9      	lsls	r1, r3, #3
 800a432:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a436:	00d0      	lsls	r0, r2, #3
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	1911      	adds	r1, r2, r4
 800a43e:	65b9      	str	r1, [r7, #88]	; 0x58
 800a440:	416b      	adcs	r3, r5
 800a442:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	461a      	mov	r2, r3
 800a44a:	f04f 0300 	mov.w	r3, #0
 800a44e:	1891      	adds	r1, r2, r2
 800a450:	62b9      	str	r1, [r7, #40]	; 0x28
 800a452:	415b      	adcs	r3, r3
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a45a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a45e:	f7f6 fb99 	bl	8000b94 <__aeabi_uldivmod>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4b8c      	ldr	r3, [pc, #560]	; (800a698 <UART_SetConfig+0x38c>)
 800a468:	fba3 1302 	umull	r1, r3, r3, r2
 800a46c:	095b      	lsrs	r3, r3, #5
 800a46e:	2164      	movs	r1, #100	; 0x64
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	3332      	adds	r3, #50	; 0x32
 800a47a:	4a87      	ldr	r2, [pc, #540]	; (800a698 <UART_SetConfig+0x38c>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a488:	441e      	add	r6, r3
 800a48a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a48c:	4618      	mov	r0, r3
 800a48e:	f04f 0100 	mov.w	r1, #0
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	1894      	adds	r4, r2, r2
 800a498:	623c      	str	r4, [r7, #32]
 800a49a:	415b      	adcs	r3, r3
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
 800a49e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4a2:	1812      	adds	r2, r2, r0
 800a4a4:	eb41 0303 	adc.w	r3, r1, r3
 800a4a8:	f04f 0400 	mov.w	r4, #0
 800a4ac:	f04f 0500 	mov.w	r5, #0
 800a4b0:	00dd      	lsls	r5, r3, #3
 800a4b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a4b6:	00d4      	lsls	r4, r2, #3
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	1814      	adds	r4, r2, r0
 800a4be:	653c      	str	r4, [r7, #80]	; 0x50
 800a4c0:	414b      	adcs	r3, r1
 800a4c2:	657b      	str	r3, [r7, #84]	; 0x54
 800a4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f04f 0300 	mov.w	r3, #0
 800a4ce:	1891      	adds	r1, r2, r2
 800a4d0:	61b9      	str	r1, [r7, #24]
 800a4d2:	415b      	adcs	r3, r3
 800a4d4:	61fb      	str	r3, [r7, #28]
 800a4d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a4de:	f7f6 fb59 	bl	8000b94 <__aeabi_uldivmod>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4b6c      	ldr	r3, [pc, #432]	; (800a698 <UART_SetConfig+0x38c>)
 800a4e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a4ec:	095b      	lsrs	r3, r3, #5
 800a4ee:	2164      	movs	r1, #100	; 0x64
 800a4f0:	fb01 f303 	mul.w	r3, r1, r3
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	3332      	adds	r3, #50	; 0x32
 800a4fa:	4a67      	ldr	r2, [pc, #412]	; (800a698 <UART_SetConfig+0x38c>)
 800a4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a500:	095b      	lsrs	r3, r3, #5
 800a502:	f003 0207 	and.w	r2, r3, #7
 800a506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4432      	add	r2, r6
 800a50c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a50e:	e0b9      	b.n	800a684 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a512:	461c      	mov	r4, r3
 800a514:	f04f 0500 	mov.w	r5, #0
 800a518:	4622      	mov	r2, r4
 800a51a:	462b      	mov	r3, r5
 800a51c:	1891      	adds	r1, r2, r2
 800a51e:	6139      	str	r1, [r7, #16]
 800a520:	415b      	adcs	r3, r3
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a528:	1912      	adds	r2, r2, r4
 800a52a:	eb45 0303 	adc.w	r3, r5, r3
 800a52e:	f04f 0000 	mov.w	r0, #0
 800a532:	f04f 0100 	mov.w	r1, #0
 800a536:	00d9      	lsls	r1, r3, #3
 800a538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a53c:	00d0      	lsls	r0, r2, #3
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	eb12 0804 	adds.w	r8, r2, r4
 800a546:	eb43 0905 	adc.w	r9, r3, r5
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	4618      	mov	r0, r3
 800a550:	f04f 0100 	mov.w	r1, #0
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	f04f 0300 	mov.w	r3, #0
 800a55c:	008b      	lsls	r3, r1, #2
 800a55e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a562:	0082      	lsls	r2, r0, #2
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f6 fb14 	bl	8000b94 <__aeabi_uldivmod>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4b49      	ldr	r3, [pc, #292]	; (800a698 <UART_SetConfig+0x38c>)
 800a572:	fba3 2302 	umull	r2, r3, r3, r2
 800a576:	095b      	lsrs	r3, r3, #5
 800a578:	011e      	lsls	r6, r3, #4
 800a57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57c:	4618      	mov	r0, r3
 800a57e:	f04f 0100 	mov.w	r1, #0
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	1894      	adds	r4, r2, r2
 800a588:	60bc      	str	r4, [r7, #8]
 800a58a:	415b      	adcs	r3, r3
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a592:	1812      	adds	r2, r2, r0
 800a594:	eb41 0303 	adc.w	r3, r1, r3
 800a598:	f04f 0400 	mov.w	r4, #0
 800a59c:	f04f 0500 	mov.w	r5, #0
 800a5a0:	00dd      	lsls	r5, r3, #3
 800a5a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5a6:	00d4      	lsls	r4, r2, #3
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	1814      	adds	r4, r2, r0
 800a5ae:	64bc      	str	r4, [r7, #72]	; 0x48
 800a5b0:	414b      	adcs	r3, r1
 800a5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f04f 0100 	mov.w	r1, #0
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	008b      	lsls	r3, r1, #2
 800a5c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5cc:	0082      	lsls	r2, r0, #2
 800a5ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a5d2:	f7f6 fadf 	bl	8000b94 <__aeabi_uldivmod>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <UART_SetConfig+0x38c>)
 800a5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a5e0:	095b      	lsrs	r3, r3, #5
 800a5e2:	2164      	movs	r1, #100	; 0x64
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	3332      	adds	r3, #50	; 0x32
 800a5ee:	4a2a      	ldr	r2, [pc, #168]	; (800a698 <UART_SetConfig+0x38c>)
 800a5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5fa:	441e      	add	r6, r3
 800a5fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5fe:	4618      	mov	r0, r3
 800a600:	f04f 0100 	mov.w	r1, #0
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	1894      	adds	r4, r2, r2
 800a60a:	603c      	str	r4, [r7, #0]
 800a60c:	415b      	adcs	r3, r3
 800a60e:	607b      	str	r3, [r7, #4]
 800a610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a614:	1812      	adds	r2, r2, r0
 800a616:	eb41 0303 	adc.w	r3, r1, r3
 800a61a:	f04f 0400 	mov.w	r4, #0
 800a61e:	f04f 0500 	mov.w	r5, #0
 800a622:	00dd      	lsls	r5, r3, #3
 800a624:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a628:	00d4      	lsls	r4, r2, #3
 800a62a:	4622      	mov	r2, r4
 800a62c:	462b      	mov	r3, r5
 800a62e:	eb12 0a00 	adds.w	sl, r2, r0
 800a632:	eb43 0b01 	adc.w	fp, r3, r1
 800a636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f04f 0100 	mov.w	r1, #0
 800a640:	f04f 0200 	mov.w	r2, #0
 800a644:	f04f 0300 	mov.w	r3, #0
 800a648:	008b      	lsls	r3, r1, #2
 800a64a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a64e:	0082      	lsls	r2, r0, #2
 800a650:	4650      	mov	r0, sl
 800a652:	4659      	mov	r1, fp
 800a654:	f7f6 fa9e 	bl	8000b94 <__aeabi_uldivmod>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <UART_SetConfig+0x38c>)
 800a65e:	fba3 1302 	umull	r1, r3, r3, r2
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	2164      	movs	r1, #100	; 0x64
 800a666:	fb01 f303 	mul.w	r3, r1, r3
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	3332      	adds	r3, #50	; 0x32
 800a670:	4a09      	ldr	r2, [pc, #36]	; (800a698 <UART_SetConfig+0x38c>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	095b      	lsrs	r3, r3, #5
 800a678:	f003 020f 	and.w	r2, r3, #15
 800a67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4432      	add	r2, r6
 800a682:	609a      	str	r2, [r3, #8]
}
 800a684:	bf00      	nop
 800a686:	377c      	adds	r7, #124	; 0x7c
 800a688:	46bd      	mov	sp, r7
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	bf00      	nop
 800a690:	40011000 	.word	0x40011000
 800a694:	40011400 	.word	0x40011400
 800a698:	51eb851f 	.word	0x51eb851f

0800a69c <__libc_init_array>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	4d0d      	ldr	r5, [pc, #52]	; (800a6d4 <__libc_init_array+0x38>)
 800a6a0:	4c0d      	ldr	r4, [pc, #52]	; (800a6d8 <__libc_init_array+0x3c>)
 800a6a2:	1b64      	subs	r4, r4, r5
 800a6a4:	10a4      	asrs	r4, r4, #2
 800a6a6:	2600      	movs	r6, #0
 800a6a8:	42a6      	cmp	r6, r4
 800a6aa:	d109      	bne.n	800a6c0 <__libc_init_array+0x24>
 800a6ac:	4d0b      	ldr	r5, [pc, #44]	; (800a6dc <__libc_init_array+0x40>)
 800a6ae:	4c0c      	ldr	r4, [pc, #48]	; (800a6e0 <__libc_init_array+0x44>)
 800a6b0:	f000 f8a6 	bl	800a800 <_init>
 800a6b4:	1b64      	subs	r4, r4, r5
 800a6b6:	10a4      	asrs	r4, r4, #2
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	42a6      	cmp	r6, r4
 800a6bc:	d105      	bne.n	800a6ca <__libc_init_array+0x2e>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c4:	4798      	blx	r3
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	e7ee      	b.n	800a6a8 <__libc_init_array+0xc>
 800a6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ce:	4798      	blx	r3
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	e7f2      	b.n	800a6ba <__libc_init_array+0x1e>
 800a6d4:	0800a838 	.word	0x0800a838
 800a6d8:	0800a838 	.word	0x0800a838
 800a6dc:	0800a838 	.word	0x0800a838
 800a6e0:	0800a83c 	.word	0x0800a83c

0800a6e4 <memset>:
 800a6e4:	4402      	add	r2, r0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d100      	bne.n	800a6ee <memset+0xa>
 800a6ec:	4770      	bx	lr
 800a6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f2:	e7f9      	b.n	800a6e8 <memset+0x4>
 800a6f4:	0000      	movs	r0, r0
	...

0800a6f8 <ceil>:
 800a6f8:	ec51 0b10 	vmov	r0, r1, d0
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a704:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a708:	2e13      	cmp	r6, #19
 800a70a:	ee10 5a10 	vmov	r5, s0
 800a70e:	ee10 8a10 	vmov	r8, s0
 800a712:	460c      	mov	r4, r1
 800a714:	dc30      	bgt.n	800a778 <ceil+0x80>
 800a716:	2e00      	cmp	r6, #0
 800a718:	da12      	bge.n	800a740 <ceil+0x48>
 800a71a:	a335      	add	r3, pc, #212	; (adr r3, 800a7f0 <ceil+0xf8>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 fd78 	bl	8000214 <__adddf3>
 800a724:	2200      	movs	r2, #0
 800a726:	2300      	movs	r3, #0
 800a728:	f7f6 f9ba 	bl	8000aa0 <__aeabi_dcmpgt>
 800a72c:	b128      	cbz	r0, 800a73a <ceil+0x42>
 800a72e:	2c00      	cmp	r4, #0
 800a730:	db55      	blt.n	800a7de <ceil+0xe6>
 800a732:	432c      	orrs	r4, r5
 800a734:	d057      	beq.n	800a7e6 <ceil+0xee>
 800a736:	4c30      	ldr	r4, [pc, #192]	; (800a7f8 <ceil+0x100>)
 800a738:	2500      	movs	r5, #0
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	e025      	b.n	800a78c <ceil+0x94>
 800a740:	4f2e      	ldr	r7, [pc, #184]	; (800a7fc <ceil+0x104>)
 800a742:	4137      	asrs	r7, r6
 800a744:	ea01 0307 	and.w	r3, r1, r7
 800a748:	4303      	orrs	r3, r0
 800a74a:	d01f      	beq.n	800a78c <ceil+0x94>
 800a74c:	a328      	add	r3, pc, #160	; (adr r3, 800a7f0 <ceil+0xf8>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fd5f 	bl	8000214 <__adddf3>
 800a756:	2200      	movs	r2, #0
 800a758:	2300      	movs	r3, #0
 800a75a:	f7f6 f9a1 	bl	8000aa0 <__aeabi_dcmpgt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d0eb      	beq.n	800a73a <ceil+0x42>
 800a762:	2c00      	cmp	r4, #0
 800a764:	bfc2      	ittt	gt
 800a766:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800a76a:	fa43 f606 	asrgt.w	r6, r3, r6
 800a76e:	19a4      	addgt	r4, r4, r6
 800a770:	ea24 0407 	bic.w	r4, r4, r7
 800a774:	2500      	movs	r5, #0
 800a776:	e7e0      	b.n	800a73a <ceil+0x42>
 800a778:	2e33      	cmp	r6, #51	; 0x33
 800a77a:	dd0b      	ble.n	800a794 <ceil+0x9c>
 800a77c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a780:	d104      	bne.n	800a78c <ceil+0x94>
 800a782:	ee10 2a10 	vmov	r2, s0
 800a786:	460b      	mov	r3, r1
 800a788:	f7f5 fd44 	bl	8000214 <__adddf3>
 800a78c:	ec41 0b10 	vmov	d0, r0, r1
 800a790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a794:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a798:	f04f 33ff 	mov.w	r3, #4294967295
 800a79c:	fa23 f707 	lsr.w	r7, r3, r7
 800a7a0:	4207      	tst	r7, r0
 800a7a2:	d0f3      	beq.n	800a78c <ceil+0x94>
 800a7a4:	a312      	add	r3, pc, #72	; (adr r3, 800a7f0 <ceil+0xf8>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd33 	bl	8000214 <__adddf3>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f7f6 f975 	bl	8000aa0 <__aeabi_dcmpgt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d0bf      	beq.n	800a73a <ceil+0x42>
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	dd02      	ble.n	800a7c4 <ceil+0xcc>
 800a7be:	2e14      	cmp	r6, #20
 800a7c0:	d103      	bne.n	800a7ca <ceil+0xd2>
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	ea25 0507 	bic.w	r5, r5, r7
 800a7c8:	e7b7      	b.n	800a73a <ceil+0x42>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a7d0:	fa03 f606 	lsl.w	r6, r3, r6
 800a7d4:	4435      	add	r5, r6
 800a7d6:	4545      	cmp	r5, r8
 800a7d8:	bf38      	it	cc
 800a7da:	18e4      	addcc	r4, r4, r3
 800a7dc:	e7f2      	b.n	800a7c4 <ceil+0xcc>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a7e4:	e7a9      	b.n	800a73a <ceil+0x42>
 800a7e6:	4625      	mov	r5, r4
 800a7e8:	e7a7      	b.n	800a73a <ceil+0x42>
 800a7ea:	bf00      	nop
 800a7ec:	f3af 8000 	nop.w
 800a7f0:	8800759c 	.word	0x8800759c
 800a7f4:	7e37e43c 	.word	0x7e37e43c
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	000fffff 	.word	0x000fffff

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
