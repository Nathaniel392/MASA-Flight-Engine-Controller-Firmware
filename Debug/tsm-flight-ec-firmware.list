
tsm-flight-ec-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008398  08008398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  2000000c  080083ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a8c  080083ac  00020a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003795  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a84  00000000  00000000  00040ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001777b  00000000  00000000  00065a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf95  00000000  00000000  0007d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015818c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  001581e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008360 	.word	0x08008360

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08008360 	.word	0x08008360

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_uldivmod>:
 8000af4:	b953      	cbnz	r3, 8000b0c <__aeabi_uldivmod+0x18>
 8000af6:	b94a      	cbnz	r2, 8000b0c <__aeabi_uldivmod+0x18>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	bf08      	it	eq
 8000afc:	2800      	cmpeq	r0, #0
 8000afe:	bf1c      	itt	ne
 8000b00:	f04f 31ff 	movne.w	r1, #4294967295
 8000b04:	f04f 30ff 	movne.w	r0, #4294967295
 8000b08:	f000 b96e 	b.w	8000de8 <__aeabi_idiv0>
 8000b0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b14:	f000 f806 	bl	8000b24 <__udivmoddi4>
 8000b18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr

08000b24 <__udivmoddi4>:
 8000b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b28:	9d08      	ldr	r5, [sp, #32]
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8083 	bne.w	8000c3a <__udivmoddi4+0x116>
 8000b34:	428a      	cmp	r2, r1
 8000b36:	4617      	mov	r7, r2
 8000b38:	d947      	bls.n	8000bca <__udivmoddi4+0xa6>
 8000b3a:	fab2 f282 	clz	r2, r2
 8000b3e:	b142      	cbz	r2, 8000b52 <__udivmoddi4+0x2e>
 8000b40:	f1c2 0020 	rsb	r0, r2, #32
 8000b44:	fa24 f000 	lsr.w	r0, r4, r0
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	4097      	lsls	r7, r2
 8000b4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b50:	4094      	lsls	r4, r2
 8000b52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b56:	0c23      	lsrs	r3, r4, #16
 8000b58:	fbbc f6f8 	udiv	r6, ip, r8
 8000b5c:	fa1f fe87 	uxth.w	lr, r7
 8000b60:	fb08 c116 	mls	r1, r8, r6, ip
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb06 f10e 	mul.w	r1, r6, lr
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d909      	bls.n	8000b84 <__udivmoddi4+0x60>
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b76:	f080 8119 	bcs.w	8000dac <__udivmoddi4+0x288>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 8116 	bls.w	8000dac <__udivmoddi4+0x288>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	443b      	add	r3, r7
 8000b84:	1a5b      	subs	r3, r3, r1
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x8c>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba2:	f080 8105 	bcs.w	8000db0 <__udivmoddi4+0x28c>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	f240 8102 	bls.w	8000db0 <__udivmoddi4+0x28c>
 8000bac:	3802      	subs	r0, #2
 8000bae:	443c      	add	r4, r7
 8000bb0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb4:	eba4 040e 	sub.w	r4, r4, lr
 8000bb8:	2600      	movs	r6, #0
 8000bba:	b11d      	cbz	r5, 8000bc4 <__udivmoddi4+0xa0>
 8000bbc:	40d4      	lsrs	r4, r2
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	b902      	cbnz	r2, 8000bce <__udivmoddi4+0xaa>
 8000bcc:	deff      	udf	#255	; 0xff
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d150      	bne.n	8000c78 <__udivmoddi4+0x154>
 8000bd6:	1bcb      	subs	r3, r1, r7
 8000bd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bdc:	fa1f f887 	uxth.w	r8, r7
 8000be0:	2601      	movs	r6, #1
 8000be2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000be6:	0c21      	lsrs	r1, r4, #16
 8000be8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0xe4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0xe2>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	f200 80e9 	bhi.w	8000dd8 <__udivmoddi4+0x2b4>
 8000c06:	4684      	mov	ip, r0
 8000c08:	1ac9      	subs	r1, r1, r3
 8000c0a:	b2a3      	uxth	r3, r4
 8000c0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c18:	fb08 f800 	mul.w	r8, r8, r0
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x10c>
 8000c20:	193c      	adds	r4, r7, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x10a>
 8000c28:	45a0      	cmp	r8, r4
 8000c2a:	f200 80d9 	bhi.w	8000de0 <__udivmoddi4+0x2bc>
 8000c2e:	4618      	mov	r0, r3
 8000c30:	eba4 0408 	sub.w	r4, r4, r8
 8000c34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c38:	e7bf      	b.n	8000bba <__udivmoddi4+0x96>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0x12e>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	f000 80b1 	beq.w	8000da6 <__udivmoddi4+0x282>
 8000c44:	2600      	movs	r6, #0
 8000c46:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f683 	clz	r6, r3
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d14a      	bne.n	8000cf0 <__udivmoddi4+0x1cc>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0x140>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80b8 	bhi.w	8000dd4 <__udivmoddi4+0x2b0>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0103 	sbc.w	r1, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0a8      	beq.n	8000bc4 <__udivmoddi4+0xa0>
 8000c72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0xa0>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c80:	4097      	lsls	r7, r2
 8000c82:	fa01 f002 	lsl.w	r0, r1, r2
 8000c86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8a:	40d9      	lsrs	r1, r3
 8000c8c:	4330      	orrs	r0, r6
 8000c8e:	0c03      	lsrs	r3, r0, #16
 8000c90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f108 	mul.w	r1, r6, r8
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	fa04 f402 	lsl.w	r4, r4, r2
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x19c>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cb2:	f080 808d 	bcs.w	8000dd0 <__udivmoddi4+0x2ac>
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	f240 808a 	bls.w	8000dd0 <__udivmoddi4+0x2ac>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	443b      	add	r3, r7
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b281      	uxth	r1, r0
 8000cc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ccc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd0:	fb00 f308 	mul.w	r3, r0, r8
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x1c4>
 8000cd8:	1879      	adds	r1, r7, r1
 8000cda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cde:	d273      	bcs.n	8000dc8 <__udivmoddi4+0x2a4>
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d971      	bls.n	8000dc8 <__udivmoddi4+0x2a4>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4439      	add	r1, r7
 8000ce8:	1acb      	subs	r3, r1, r3
 8000cea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cee:	e778      	b.n	8000be2 <__udivmoddi4+0xbe>
 8000cf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d02:	fa01 f306 	lsl.w	r3, r1, r6
 8000d06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	0c3b      	lsrs	r3, r7, #16
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fa1f f884 	uxth.w	r8, r4
 8000d1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d22:	fb09 fa08 	mul.w	sl, r9, r8
 8000d26:	458a      	cmp	sl, r1
 8000d28:	fa02 f206 	lsl.w	r2, r2, r6
 8000d2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x220>
 8000d32:	1861      	adds	r1, r4, r1
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	d248      	bcs.n	8000dcc <__udivmoddi4+0x2a8>
 8000d3a:	458a      	cmp	sl, r1
 8000d3c:	d946      	bls.n	8000dcc <__udivmoddi4+0x2a8>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4421      	add	r1, r4
 8000d44:	eba1 010a 	sub.w	r1, r1, sl
 8000d48:	b2bf      	uxth	r7, r7
 8000d4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d56:	fb00 f808 	mul.w	r8, r0, r8
 8000d5a:	45b8      	cmp	r8, r7
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x24a>
 8000d5e:	19e7      	adds	r7, r4, r7
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d22e      	bcs.n	8000dc4 <__udivmoddi4+0x2a0>
 8000d66:	45b8      	cmp	r8, r7
 8000d68:	d92c      	bls.n	8000dc4 <__udivmoddi4+0x2a0>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4427      	add	r7, r4
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	eba7 0708 	sub.w	r7, r7, r8
 8000d76:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7a:	454f      	cmp	r7, r9
 8000d7c:	46c6      	mov	lr, r8
 8000d7e:	4649      	mov	r1, r9
 8000d80:	d31a      	bcc.n	8000db8 <__udivmoddi4+0x294>
 8000d82:	d017      	beq.n	8000db4 <__udivmoddi4+0x290>
 8000d84:	b15d      	cbz	r5, 8000d9e <__udivmoddi4+0x27a>
 8000d86:	ebb3 020e 	subs.w	r2, r3, lr
 8000d8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d92:	40f2      	lsrs	r2, r6
 8000d94:	ea4c 0202 	orr.w	r2, ip, r2
 8000d98:	40f7      	lsrs	r7, r6
 8000d9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d9e:	2600      	movs	r6, #0
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	462e      	mov	r6, r5
 8000da8:	4628      	mov	r0, r5
 8000daa:	e70b      	b.n	8000bc4 <__udivmoddi4+0xa0>
 8000dac:	4606      	mov	r6, r0
 8000dae:	e6e9      	b.n	8000b84 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fd      	b.n	8000bb0 <__udivmoddi4+0x8c>
 8000db4:	4543      	cmp	r3, r8
 8000db6:	d2e5      	bcs.n	8000d84 <__udivmoddi4+0x260>
 8000db8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	e7df      	b.n	8000d84 <__udivmoddi4+0x260>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e7d2      	b.n	8000d6e <__udivmoddi4+0x24a>
 8000dc8:	4660      	mov	r0, ip
 8000dca:	e78d      	b.n	8000ce8 <__udivmoddi4+0x1c4>
 8000dcc:	4681      	mov	r9, r0
 8000dce:	e7b9      	b.n	8000d44 <__udivmoddi4+0x220>
 8000dd0:	4666      	mov	r6, ip
 8000dd2:	e775      	b.n	8000cc0 <__udivmoddi4+0x19c>
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e74a      	b.n	8000c6e <__udivmoddi4+0x14a>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	4439      	add	r1, r7
 8000dde:	e713      	b.n	8000c08 <__udivmoddi4+0xe4>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	e724      	b.n	8000c30 <__udivmoddi4+0x10c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <init_autosequence_timings>:


// declare Autosequence struct
Autosequence autosequence;

void init_autosequence_timings() {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <init_valve_states>:
/**
 * Default valve power state when board turns on.
 * Some valves are normally closed and should be held open,
 * which this function controls.
 */
void init_valve_states() {
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f004 f826 	bl	8004e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f8ac 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 fb28 	bl	8001468 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e18:	f000 f91c 	bl	8001054 <MX_CAN1_Init>
  MX_IWDG_Init();
 8000e1c:	f000 f94e 	bl	80010bc <MX_IWDG_Init>
  MX_SPI1_Init();
 8000e20:	f000 f966 	bl	80010f0 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000e24:	f000 fa06 	bl	8001234 <MX_SPI4_Init>
  MX_SPI2_Init();
 8000e28:	f000 f998 	bl	800115c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e2c:	f000 f9cc 	bl	80011c8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000e30:	f000 faf0 	bl	8001414 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8000e34:	f000 fa34 	bl	80012a0 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000e38:	f000 fa80 	bl	800133c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e3c:	f000 faa2 	bl	8001384 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000e40:	f000 fac4 	bl	80013cc <MX_TIM13_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8000e44:	483b      	ldr	r0, [pc, #236]	; (8000f34 <main+0x12c>)
 8000e46:	f006 f881 	bl	8006f4c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 8000e4a:	483b      	ldr	r0, [pc, #236]	; (8000f38 <main+0x130>)
 8000e4c:	f006 f8e6 	bl	800701c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8000e50:	483a      	ldr	r0, [pc, #232]	; (8000f3c <main+0x134>)
 8000e52:	f006 f8e3 	bl	800701c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8000e56:	483a      	ldr	r0, [pc, #232]	; (8000f40 <main+0x138>)
 8000e58:	f006 f8e0 	bl	800701c <HAL_TIM_Base_Start_IT>
  // Watchdog


  // Board-specific hardware
  //init_spi_peripherals();  // Set chip selects high and initialize
  init_adcs();
 8000e5c:	f002 fb4b 	bl	80034f6 <init_adcs>
  init_thermocouples();
 8000e60:	f002 fb3b 	bl	80034da <init_thermocouples>
  init_serial_data();
 8000e64:	f002 fbae 	bl	80035c4 <init_serial_data>
  init_valve_states();  // Powers some valves
 8000e68:	f7ff ffc7 	bl	8000dfa <init_valve_states>
  init_autosequence_timings();  // TODO: is this really needed?
 8000e6c:	f7ff ffbe 	bl	8000dec <init_autosequence_timings>
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  // TODO: call autosequence functions


	  if (periodic_flag_50ms) {
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <main+0x13c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d016      	beq.n	8000ea6 <main+0x9e>
		  periodic_flag_50ms = 0;
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <main+0x13c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <main+0x140>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d10f      	bne.n	8000ea6 <main+0x9e>
			  if (autosequence.lox_tank_enable_PID_control) {
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <main+0x144>)
 8000e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <main+0x8e>
				  tank_PID_pressure_control(&tanks[LOX_TANK]);
 8000e90:	482f      	ldr	r0, [pc, #188]	; (8000f50 <main+0x148>)
 8000e92:	f002 fed1 	bl	8003c38 <tank_PID_pressure_control>
			  }
			  if (autosequence.fuel_tank_enable_PID_control) {
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <main+0x144>)
 8000e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <main+0x9e>
				  tank_PID_pressure_control(&tanks[FUEL_TANK]);
 8000ea0:	482c      	ldr	r0, [pc, #176]	; (8000f54 <main+0x14c>)
 8000ea2:	f002 fec9 	bl	8003c38 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <main+0x150>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d02e      	beq.n	8000f0c <main+0x104>
		  periodic_flag_5ms = 0;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <main+0x150>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]

		  // sample adcs and thermocouples
		  read_thermocouples();
 8000eb4:	f002 fb18 	bl	80034e8 <read_thermocouples>
		  read_adc_counts();
 8000eb8:	f002 fb24 	bl	8003504 <read_adc_counts>
		  convert_adc_counts();
 8000ebc:	f002 fb29 	bl	8003512 <convert_adc_counts>

		  // handle redundant sensor voting algorithms
		  resolve_redundant_sensors();
 8000ec0:	f002 fb2e 	bl	8003520 <resolve_redundant_sensors>

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <main+0x140>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d105      	bne.n	8000ed8 <main+0xd0>
			  tank_autopress_bang_bang(&tanks[LOX_TANK]);
 8000ecc:	4820      	ldr	r0, [pc, #128]	; (8000f50 <main+0x148>)
 8000ece:	f002 fe7f 	bl	8003bd0 <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK]);
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <main+0x14c>)
 8000ed4:	f002 fe7c 	bl	8003bd0 <tank_autopress_bang_bang>
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <main+0x140>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d10f      	bne.n	8000f00 <main+0xf8>
			  if (autosequence.lox_tank_enable_PID_control) {
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x144>)
 8000ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <main+0xe8>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK]);
 8000eea:	4819      	ldr	r0, [pc, #100]	; (8000f50 <main+0x148>)
 8000eec:	f002 ff3a 	bl	8003d64 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.fuel_tank_enable_PID_control) {
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <main+0x144>)
 8000ef2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <main+0xf8>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK]);
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <main+0x14c>)
 8000efc:	f002 ff32 	bl	8003d64 <tank_check_control_valve_threshold>
			  }
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <main+0x154>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <main+0x104>
			  save_flash_packet();
 8000f08:	f002 fbb2 	bl	8003670 <save_flash_packet>
		  }
	  }

	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <main+0x158>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0ad      	beq.n	8000e70 <main+0x68>
		  periodic_flag_100ms = 0;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <main+0x158>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

		  if (!disable_telem) {
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <main+0x15c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1a6      	bne.n	8000e70 <main+0x68>
			  send_telem_packet(SERVER_ADDR);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f002 fb82 	bl	800362c <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <main+0x160>)
 8000f2c:	f004 fc55 	bl	80057da <HAL_GPIO_TogglePin>
	  if (periodic_flag_50ms) {
 8000f30:	e79e      	b.n	8000e70 <main+0x68>
 8000f32:	bf00      	nop
 8000f34:	20000274 	.word	0x20000274
 8000f38:	20000314 	.word	0x20000314
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	200003a0 	.word	0x200003a0
 8000f44:	200006dc 	.word	0x200006dc
 8000f48:	20000028 	.word	0x20000028
 8000f4c:	20000198 	.word	0x20000198
 8000f50:	200009f8 	.word	0x200009f8
 8000f54:	20000a40 	.word	0x20000a40
 8000f58:	200001c0 	.word	0x200001c0
 8000f5c:	20000078 	.word	0x20000078
 8000f60:	20000270 	.word	0x20000270
 8000f64:	200003e8 	.word	0x200003e8
 8000f68:	40020800 	.word	0x40020800

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2234      	movs	r2, #52	; 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f007 f964 	bl	8008248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <SystemClock_Config+0xe0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a2c      	ldr	r2, [pc, #176]	; (800104c <SystemClock_Config+0xe0>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <SystemClock_Config+0xe0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <SystemClock_Config+0xe4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <SystemClock_Config+0xe4>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <SystemClock_Config+0xe4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fe4:	23b4      	movs	r3, #180	; 0xb4
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 ff11 	bl	8005e20 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001004:	f000 fb2e 	bl	8001664 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001008:	f004 fc44 	bl	8005894 <HAL_PWREx_EnableOverDrive>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001012:	f000 fb27 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	2302      	movs	r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001022:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001028:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2105      	movs	r1, #5
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fc7d 	bl	8005934 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001040:	f000 fb10 	bl	8001664 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_CAN1_Init+0x60>)
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_CAN1_Init+0x64>)
 800105c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001060:	2210      	movs	r2, #16
 8001062:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_CAN1_Init+0x60>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_CAN1_Init+0x60>)
 800107e:	2200      	movs	r2, #0
 8001080:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001084:	2200      	movs	r2, #0
 8001086:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_CAN1_Init+0x60>)
 800108a:	2200      	movs	r2, #0
 800108c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001090:	2200      	movs	r2, #0
 8001092:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_CAN1_Init+0x60>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_CAN1_Init+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_CAN1_Init+0x60>)
 80010a2:	f003 ff4d 	bl	8004f40 <HAL_CAN_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 fada 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200006b4 	.word	0x200006b4
 80010b8:	40006400 	.word	0x40006400

080010bc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_IWDG_Init+0x2c>)
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <MX_IWDG_Init+0x30>)
 80010c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_IWDG_Init+0x2c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_IWDG_Init+0x2c>)
 80010ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010d2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_IWDG_Init+0x2c>)
 80010d6:	f004 fb9a 	bl	800580e <HAL_IWDG_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80010e0:	f000 fac0 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000264 	.word	0x20000264
 80010ec:	40003000 	.word	0x40003000

080010f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_SPI1_Init+0x64>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <MX_SPI1_Init+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_SPI1_Init+0x64>)
 80010fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_SPI1_Init+0x64>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_SPI1_Init+0x64>)
 8001124:	2210      	movs	r2, #16
 8001126:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_SPI1_Init+0x64>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_SPI1_Init+0x64>)
 8001142:	f005 f90b 	bl	800635c <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800114c:	f000 fa8a 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000065c 	.word	0x2000065c
 8001158:	40013000 	.word	0x40013000

0800115c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <MX_SPI2_Init+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_SPI2_Init+0x64>)
 800117c:	2202      	movs	r2, #2
 800117e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001182:	2201      	movs	r2, #1
 8001184:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_SPI2_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_SPI2_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_SPI2_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_SPI2_Init+0x64>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_SPI2_Init+0x64>)
 80011ae:	f005 f8d5 	bl	800635c <HAL_SPI_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011b8:	f000 fa54 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001c4 	.word	0x200001c4
 80011c4:	40003800 	.word	0x40003800

080011c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_SPI3_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_SPI3_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI3_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI3_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI3_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI3_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI3_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI3_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI3_Init+0x64>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_SPI3_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI3_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_SPI3_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI3_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_SPI3_Init+0x64>)
 800121a:	f005 f89f 	bl	800635c <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 fa1e 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002bc 	.word	0x200002bc
 8001230:	40003c00 	.word	0x40003c00

08001234 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_SPI4_Init+0x64>)
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <MX_SPI4_Init+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_SPI4_Init+0x64>)
 8001240:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001244:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_SPI4_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_SPI4_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_SPI4_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_SPI4_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_SPI4_Init+0x64>)
 8001260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001264:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_SPI4_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <MX_SPI4_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_SPI4_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <MX_SPI4_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_SPI4_Init+0x64>)
 8001280:	220a      	movs	r2, #10
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_SPI4_Init+0x64>)
 8001286:	f005 f869 	bl	800635c <HAL_SPI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001290:	f000 f9e8 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200003ec 	.word	0x200003ec
 800129c:	40013400 	.word	0x40013400

080012a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM5_Init+0x94>)
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <MX_TIM5_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45 - 1;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM5_Init+0x94>)
 80012c4:	222c      	movs	r2, #44	; 0x2c
 80012c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM5_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM5_Init+0x94>)
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_TIM5_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM5_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM5_Init+0x94>)
 80012e4:	f005 fde2 	bl	8006eac <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f9b9 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM5_Init+0x94>)
 8001300:	f005 fefc 	bl	80070fc <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f9ab 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM5_Init+0x94>)
 800131c:	f006 f8ec 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001326:	f000 f99d 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000274 	.word	0x20000274
 8001338:	40000c00 	.word	0x40000c00

0800133c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_TIM10_Init+0x40>)
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <MX_TIM10_Init+0x44>)
 8001344:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000 - 1;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_TIM10_Init+0x40>)
 8001348:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800134c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_TIM10_Init+0x40>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50 - 1;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_TIM10_Init+0x40>)
 8001356:	2231      	movs	r2, #49	; 0x31
 8001358:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_TIM10_Init+0x40>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_TIM10_Init+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_TIM10_Init+0x40>)
 8001368:	f005 fda0 	bl	8006eac <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001372:	f000 f977 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000021c 	.word	0x2000021c
 8001380:	40014400 	.word	0x40014400

08001384 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_TIM11_Init+0x40>)
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <MX_TIM11_Init+0x44>)
 800138c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 45000 - 1;
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_TIM11_Init+0x40>)
 8001390:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001394:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_TIM11_Init+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100 - 1;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_TIM11_Init+0x40>)
 800139e:	2263      	movs	r2, #99	; 0x63
 80013a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_TIM11_Init+0x40>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_TIM11_Init+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM11_Init+0x40>)
 80013b0:	f005 fd7c 	bl	8006eac <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013ba:	f000 f953 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200003a0 	.word	0x200003a0
 80013c8:	40014800 	.word	0x40014800

080013cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_TIM13_Init+0x40>)
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <MX_TIM13_Init+0x44>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000 - 1;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_TIM13_Init+0x40>)
 80013d8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80013dc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_TIM13_Init+0x40>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5 - 1;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_TIM13_Init+0x40>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_TIM13_Init+0x40>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_TIM13_Init+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_TIM13_Init+0x40>)
 80013f8:	f005 fd58 	bl	8006eac <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001402:	f000 f92f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000314 	.word	0x20000314
 8001410:	40001c00 	.word	0x40001c00

08001414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART1_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART1_UART_Init+0x4c>)
 800144c:	f006 f8d0 	bl	80075f0 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f905 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000035c 	.word	0x2000035c
 8001464:	40011000 	.word	0x40011000

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b72      	ldr	r3, [pc, #456]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a71      	ldr	r2, [pc, #452]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b6f      	ldr	r3, [pc, #444]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b6b      	ldr	r3, [pc, #428]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a6a      	ldr	r2, [pc, #424]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b68      	ldr	r3, [pc, #416]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b64      	ldr	r3, [pc, #400]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a63      	ldr	r2, [pc, #396]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b61      	ldr	r3, [pc, #388]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a5c      	ldr	r2, [pc, #368]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b5a      	ldr	r3, [pc, #360]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a55      	ldr	r2, [pc, #340]	; (800164c <MX_GPIO_Init+0x1e4>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b4f      	ldr	r3, [pc, #316]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a4e      	ldr	r2, [pc, #312]	; (800164c <MX_GPIO_Init+0x1e4>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <MX_GPIO_Init+0x1e4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f24e 0110 	movw	r1, #57360	; 0xe010
 800152c:	4848      	ldr	r0, [pc, #288]	; (8001650 <MX_GPIO_Init+0x1e8>)
 800152e:	f004 f93b 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001532:	2200      	movs	r2, #0
 8001534:	f246 31ff 	movw	r1, #25599	; 0x63ff
 8001538:	4846      	ldr	r0, [pc, #280]	; (8001654 <MX_GPIO_Init+0x1ec>)
 800153a:	f004 f935 	bl	80057a8 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f241 5104 	movw	r1, #5380	; 0x1504
 8001544:	4844      	ldr	r0, [pc, #272]	; (8001658 <MX_GPIO_Init+0x1f0>)
 8001546:	f004 f92f 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 800154a:	2200      	movs	r2, #0
 800154c:	f241 4107 	movw	r1, #5127	; 0x1407
 8001550:	4842      	ldr	r0, [pc, #264]	; (800165c <MX_GPIO_Init+0x1f4>)
 8001552:	f004 f929 	bl	80057a8 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 41be 	mov.w	r1, #24320	; 0x5f00
 800155c:	4840      	ldr	r0, [pc, #256]	; (8001660 <MX_GPIO_Init+0x1f8>)
 800155e:	f004 f923 	bl	80057a8 <HAL_GPIO_WritePin>
                          |en_vlv9_Pin|ADC0_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC2_EOC_Pin */
  GPIO_InitStruct.Pin = ADC2_EOC_Pin;
 8001562:	2308      	movs	r3, #8
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC2_EOC_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4836      	ldr	r0, [pc, #216]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001576:	f003 ff83 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_CS_Pin en_vlv0_Pin en_vlv1_Pin en_vlv2_Pin */
  GPIO_InitStruct.Pin = ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin;
 800157a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	482f      	ldr	r0, [pc, #188]	; (8001650 <MX_GPIO_Init+0x1e8>)
 8001594:	f003 ff74 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin EEPROM_CS_Pin LED_0_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin TC_MUX_EN_Pin TC_MUX_A3_Pin
                           ADC1_CS_Pin en_vlv10_Pin en_vlv11_Pin en_vlv12_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001598:	f246 33ff 	movw	r3, #25599	; 0x63ff
 800159c:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <MX_GPIO_Init+0x1ec>)
 80015b2:	f003 ff65 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_EOC_Pin MTR0_BUSY_Pin MTR1_BUSY_Pin */
  GPIO_InitStruct.Pin = ADC3_EOC_Pin|MTR0_BUSY_Pin|MTR1_BUSY_Pin;
 80015b6:	f640 2302 	movw	r3, #2562	; 0xa02
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_GPIO_Init+0x1f0>)
 80015cc:	f003 ff58 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_CS_Pin en_vlv13_Pin MTR0_CS_Pin MTR1_CS_Pin */
  GPIO_InitStruct.Pin = ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin;
 80015d0:	f241 5304 	movw	r3, #5380	; 0x1504
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	481b      	ldr	r0, [pc, #108]	; (8001658 <MX_GPIO_Init+0x1f0>)
 80015ea:	f003 ff49 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_MUX_A2_Pin TC_MUX_A1_Pin TC_MUX_A0_Pin en_vlv3_Pin
                           en_vlv4_Pin */
  GPIO_InitStruct.Pin = TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 80015ee:	f241 4307 	movw	r3, #5127	; 0x1407
 80015f2:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <MX_GPIO_Init+0x1f4>)
 8001608:	f003 ff3a 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv5_Pin en_vlv6_Pin en_vlv7_Pin en_vlv8_Pin
                           en_vlv9_Pin ADC0_CS_Pin */
  GPIO_InitStruct.Pin = en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 800160c:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 8001610:	61fb      	str	r3, [r7, #28]
                          |en_vlv9_Pin|ADC0_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_GPIO_Init+0x1f8>)
 8001626:	f003 ff2b 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_EOC_Pin ADC1_EOC_Pin */
  GPIO_InitStruct.Pin = ADC0_EOC_Pin|ADC1_EOC_Pin;
 800162a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <MX_GPIO_Init+0x1f8>)
 8001640:	f003 ff1e 	bl	8005480 <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000
 8001654:	40020800 	.word	0x40020800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020c00 	.word	0x40020c00

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Mon Jul  5 19:57:33 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 8001678:	4bc3      	ldr	r3, [pc, #780]	; (8001988 <pack_telem_data+0x318>)
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 8001680:	4bc2      	ldr	r3, [pc, #776]	; (800198c <pack_telem_data+0x31c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8001990 <pack_telem_data+0x320>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	b21a      	sxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 80016a0:	4bba      	ldr	r3, [pc, #744]	; (800198c <pack_telem_data+0x31c>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001990 <pack_telem_data+0x320>
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 3a90 	vmov	r3, s15
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	121b      	asrs	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3302      	adds	r3, #2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 80016c4:	4bb3      	ldr	r3, [pc, #716]	; (8001994 <pack_telem_data+0x324>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001990 <pack_telem_data+0x320>
 80016ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	b21a      	sxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3303      	adds	r3, #3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 80016e4:	4bab      	ldr	r3, [pc, #684]	; (8001994 <pack_telem_data+0x324>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001990 <pack_telem_data+0x320>
 80016ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	121b      	asrs	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 8001708:	4ba3      	ldr	r3, [pc, #652]	; (8001998 <pack_telem_data+0x328>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3305      	adds	r3, #5
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 8001714:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <pack_telem_data+0x328>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0a1a      	lsrs	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3306      	adds	r3, #6
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 8001722:	4b9d      	ldr	r3, [pc, #628]	; (8001998 <pack_telem_data+0x328>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0c1a      	lsrs	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 8001730:	4b99      	ldr	r3, [pc, #612]	; (8001998 <pack_telem_data+0x328>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e1a      	lsrs	r2, r3, #24
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3308      	adds	r3, #8
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 800173e:	4b97      	ldr	r3, [pc, #604]	; (800199c <pack_telem_data+0x32c>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001990 <pack_telem_data+0x320>
 8001748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001750:	edc7 7a00 	vstr	s15, [r7]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3309      	adds	r3, #9
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 800175e:	4b8f      	ldr	r3, [pc, #572]	; (800199c <pack_telem_data+0x32c>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001990 <pack_telem_data+0x320>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001770:	ee17 3a90 	vmov	r3, s15
 8001774:	121a      	asrs	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	330a      	adds	r3, #10
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 800177e:	4b87      	ldr	r3, [pc, #540]	; (800199c <pack_telem_data+0x32c>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001990 <pack_telem_data+0x320>
 8001788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 3a90 	vmov	r3, s15
 8001794:	141a      	asrs	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	330b      	adds	r3, #11
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 800179e:	4b7f      	ldr	r3, [pc, #508]	; (800199c <pack_telem_data+0x32c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001990 <pack_telem_data+0x320>
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b0:	ee17 3a90 	vmov	r3, s15
 80017b4:	161a      	asrs	r2, r3, #24
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	330c      	adds	r3, #12
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 80017be:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <pack_telem_data+0x330>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001990 <pack_telem_data+0x320>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	edc7 7a00 	vstr	s15, [r7]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	330d      	adds	r3, #13
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 80017de:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <pack_telem_data+0x330>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001990 <pack_telem_data+0x320>
 80017e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	121a      	asrs	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	330e      	adds	r3, #14
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <pack_telem_data+0x330>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001990 <pack_telem_data+0x320>
 8001808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001810:	ee17 3a90 	vmov	r3, s15
 8001814:	141a      	asrs	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	330f      	adds	r3, #15
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <pack_telem_data+0x330>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001990 <pack_telem_data+0x320>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	161a      	asrs	r2, r3, #24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3310      	adds	r3, #16
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <pack_telem_data+0x334>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001990 <pack_telem_data+0x320>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3311      	adds	r3, #17
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	edc7 7a00 	vstr	s15, [r7]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <pack_telem_data+0x338>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001990 <pack_telem_data+0x320>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3312      	adds	r3, #18
 8001870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001874:	edc7 7a00 	vstr	s15, [r7]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <pack_telem_data+0x33c>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001890:	ee17 3a90 	vmov	r3, s15
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3313      	adds	r3, #19
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <pack_telem_data+0x33c>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3314      	adds	r3, #20
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <pack_telem_data+0x33c>)
 80018c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3315      	adds	r3, #21
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <pack_telem_data+0x33c>)
 80018e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f4:	ee17 3a90 	vmov	r3, s15
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3316      	adds	r3, #22
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <pack_telem_data+0x33c>)
 8001908:	edd3 7a02 	vldr	s15, [r3, #8]
 800190c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3317      	adds	r3, #23
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <pack_telem_data+0x33c>)
 8001928:	edd3 7a02 	vldr	s15, [r3, #8]
 800192c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	b29b      	uxth	r3, r3
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3318      	adds	r3, #24
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3319      	adds	r3, #25
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <pack_telem_data+0x340>)
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <pack_telem_data+0x344>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	331a      	adds	r3, #26
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <pack_telem_data+0x344>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0a1a      	lsrs	r2, r3, #8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	331b      	adds	r3, #27
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <pack_telem_data+0x344>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0c1a      	lsrs	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	331c      	adds	r3, #28
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <pack_telem_data+0x344>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e1a      	lsrs	r2, r3, #24
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	331d      	adds	r3, #29
 8001986:	e017      	b.n	80019b8 <pack_telem_data+0x348>
 8001988:	20000028 	.word	0x20000028
 800198c:	2000002c 	.word	0x2000002c
 8001990:	42c80000 	.word	0x42c80000
 8001994:	20000030 	.word	0x20000030
 8001998:	20000034 	.word	0x20000034
 800199c:	20000038 	.word	0x20000038
 80019a0:	2000003c 	.word	0x2000003c
 80019a4:	20000040 	.word	0x20000040
 80019a8:	20000044 	.word	0x20000044
 80019ac:	2000007c 	.word	0x2000007c
 80019b0:	20000048 	.word	0x20000048
 80019b4:	2000004c 	.word	0x2000004c
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = TELEM_ITEM_30;
 80019bc:	4bd2      	ldr	r3, [pc, #840]	; (8001d08 <pack_telem_data+0x698>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	edc7 7a00 	vstr	s15, [r7]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	331e      	adds	r3, #30
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 80019dc:	4bca      	ldr	r3, [pc, #808]	; (8001d08 <pack_telem_data+0x698>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	121a      	asrs	r2, r3, #8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	331f      	adds	r3, #31
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 80019fc:	4bc2      	ldr	r3, [pc, #776]	; (8001d08 <pack_telem_data+0x698>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	ee17 3a90 	vmov	r3, s15
 8001a12:	141a      	asrs	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3320      	adds	r3, #32
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 8001a1c:	4bba      	ldr	r3, [pc, #744]	; (8001d08 <pack_telem_data+0x698>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	161a      	asrs	r2, r3, #24
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3321      	adds	r3, #33	; 0x21
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 8001a3c:	4bb2      	ldr	r3, [pc, #712]	; (8001d08 <pack_telem_data+0x698>)
 8001a3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	edc7 7a00 	vstr	s15, [r7]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3322      	adds	r3, #34	; 0x22
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 8001a5c:	4baa      	ldr	r3, [pc, #680]	; (8001d08 <pack_telem_data+0x698>)
 8001a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	121a      	asrs	r2, r3, #8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3323      	adds	r3, #35	; 0x23
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 8001a7c:	4ba2      	ldr	r3, [pc, #648]	; (8001d08 <pack_telem_data+0x698>)
 8001a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8e:	ee17 3a90 	vmov	r3, s15
 8001a92:	141a      	asrs	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3324      	adds	r3, #36	; 0x24
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 8001a9c:	4b9a      	ldr	r3, [pc, #616]	; (8001d08 <pack_telem_data+0x698>)
 8001a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aae:	ee17 3a90 	vmov	r3, s15
 8001ab2:	161a      	asrs	r2, r3, #24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3325      	adds	r3, #37	; 0x25
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8001abc:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <pack_telem_data+0x698>)
 8001abe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ac2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ace:	edc7 7a00 	vstr	s15, [r7]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3326      	adds	r3, #38	; 0x26
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <pack_telem_data+0x698>)
 8001ade:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aee:	ee17 3a90 	vmov	r3, s15
 8001af2:	121a      	asrs	r2, r3, #8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3327      	adds	r3, #39	; 0x27
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8001afc:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <pack_telem_data+0x698>)
 8001afe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0e:	ee17 3a90 	vmov	r3, s15
 8001b12:	141a      	asrs	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3328      	adds	r3, #40	; 0x28
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8001b1c:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <pack_telem_data+0x698>)
 8001b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2e:	ee17 3a90 	vmov	r3, s15
 8001b32:	161a      	asrs	r2, r3, #24
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3329      	adds	r3, #41	; 0x29
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8001b3c:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <pack_telem_data+0x698>)
 8001b3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	edc7 7a00 	vstr	s15, [r7]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	332a      	adds	r3, #42	; 0x2a
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <pack_telem_data+0x698>)
 8001b5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	121a      	asrs	r2, r3, #8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	332b      	adds	r3, #43	; 0x2b
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <pack_telem_data+0x698>)
 8001b7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 3a90 	vmov	r3, s15
 8001b92:	141a      	asrs	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	332c      	adds	r3, #44	; 0x2c
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <pack_telem_data+0x698>)
 8001b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ba2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bae:	ee17 3a90 	vmov	r3, s15
 8001bb2:	161a      	asrs	r2, r3, #24
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	332d      	adds	r3, #45	; 0x2d
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8001bbc:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <pack_telem_data+0x698>)
 8001bbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	edc7 7a00 	vstr	s15, [r7]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	332e      	adds	r3, #46	; 0x2e
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <pack_telem_data+0x698>)
 8001bde:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	ee17 3a90 	vmov	r3, s15
 8001bf2:	121a      	asrs	r2, r3, #8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	332f      	adds	r3, #47	; 0x2f
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <pack_telem_data+0x698>)
 8001bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0e:	ee17 3a90 	vmov	r3, s15
 8001c12:	141a      	asrs	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3330      	adds	r3, #48	; 0x30
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <pack_telem_data+0x698>)
 8001c1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	161a      	asrs	r2, r3, #24
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3331      	adds	r3, #49	; 0x31
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <pack_telem_data+0x698>)
 8001c3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4e:	edc7 7a00 	vstr	s15, [r7]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3332      	adds	r3, #50	; 0x32
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <pack_telem_data+0x698>)
 8001c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6e:	ee17 3a90 	vmov	r3, s15
 8001c72:	121a      	asrs	r2, r3, #8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3333      	adds	r3, #51	; 0x33
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <pack_telem_data+0x698>)
 8001c7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8e:	ee17 3a90 	vmov	r3, s15
 8001c92:	141a      	asrs	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3334      	adds	r3, #52	; 0x34
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <pack_telem_data+0x698>)
 8001c9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cae:	ee17 3a90 	vmov	r3, s15
 8001cb2:	161a      	asrs	r2, r3, #24
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3335      	adds	r3, #53	; 0x35
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <pack_telem_data+0x698>)
 8001cbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cce:	edc7 7a00 	vstr	s15, [r7]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3336      	adds	r3, #54	; 0x36
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <pack_telem_data+0x698>)
 8001cde:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ce2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	121a      	asrs	r2, r3, #8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3337      	adds	r3, #55	; 0x37
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <pack_telem_data+0x698>)
 8001cfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d06:	e001      	b.n	8001d0c <pack_telem_data+0x69c>
 8001d08:	20000088 	.word	0x20000088
 8001d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	141a      	asrs	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3338      	adds	r3, #56	; 0x38
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8001d22:	4bd3      	ldr	r3, [pc, #844]	; (8002070 <pack_telem_data+0xa00>)
 8001d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d34:	ee17 3a90 	vmov	r3, s15
 8001d38:	161a      	asrs	r2, r3, #24
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3339      	adds	r3, #57	; 0x39
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8001d42:	4bcb      	ldr	r3, [pc, #812]	; (8002070 <pack_telem_data+0xa00>)
 8001d44:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d54:	edc7 7a00 	vstr	s15, [r7]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	333a      	adds	r3, #58	; 0x3a
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8001d62:	4bc3      	ldr	r3, [pc, #780]	; (8002070 <pack_telem_data+0xa00>)
 8001d64:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	121a      	asrs	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	333b      	adds	r3, #59	; 0x3b
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8001d82:	4bbb      	ldr	r3, [pc, #748]	; (8002070 <pack_telem_data+0xa00>)
 8001d84:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	141a      	asrs	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	333c      	adds	r3, #60	; 0x3c
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8001da2:	4bb3      	ldr	r3, [pc, #716]	; (8002070 <pack_telem_data+0xa00>)
 8001da4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001da8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	161a      	asrs	r2, r3, #24
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	333d      	adds	r3, #61	; 0x3d
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8001dc2:	4bab      	ldr	r3, [pc, #684]	; (8002070 <pack_telem_data+0xa00>)
 8001dc4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd4:	edc7 7a00 	vstr	s15, [r7]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	333e      	adds	r3, #62	; 0x3e
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8001de2:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <pack_telem_data+0xa00>)
 8001de4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	121a      	asrs	r2, r3, #8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	333f      	adds	r3, #63	; 0x3f
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8001e02:	4b9b      	ldr	r3, [pc, #620]	; (8002070 <pack_telem_data+0xa00>)
 8001e04:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e14:	ee17 3a90 	vmov	r3, s15
 8001e18:	141a      	asrs	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3340      	adds	r3, #64	; 0x40
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <pack_telem_data+0xa00>)
 8001e24:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	161a      	asrs	r2, r3, #24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3341      	adds	r3, #65	; 0x41
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <pack_telem_data+0xa00>)
 8001e44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e54:	edc7 7a00 	vstr	s15, [r7]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3342      	adds	r3, #66	; 0x42
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8001e62:	4b83      	ldr	r3, [pc, #524]	; (8002070 <pack_telem_data+0xa00>)
 8001e64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 3a90 	vmov	r3, s15
 8001e78:	121a      	asrs	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3343      	adds	r3, #67	; 0x43
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <pack_telem_data+0xa00>)
 8001e84:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e94:	ee17 3a90 	vmov	r3, s15
 8001e98:	141a      	asrs	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3344      	adds	r3, #68	; 0x44
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <pack_telem_data+0xa00>)
 8001ea4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ea8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	161a      	asrs	r2, r3, #24
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3345      	adds	r3, #69	; 0x45
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <pack_telem_data+0xa00>)
 8001ec4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ec8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed4:	edc7 7a00 	vstr	s15, [r7]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3346      	adds	r3, #70	; 0x46
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <pack_telem_data+0xa00>)
 8001ee4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ee8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef4:	ee17 3a90 	vmov	r3, s15
 8001ef8:	121a      	asrs	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3347      	adds	r3, #71	; 0x47
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 8001f02:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <pack_telem_data+0xa00>)
 8001f04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	141a      	asrs	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3348      	adds	r3, #72	; 0x48
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <pack_telem_data+0xa00>)
 8001f24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f34:	ee17 3a90 	vmov	r3, s15
 8001f38:	161a      	asrs	r2, r3, #24
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3349      	adds	r3, #73	; 0x49
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <pack_telem_data+0xa00>)
 8001f44:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f54:	edc7 7a00 	vstr	s15, [r7]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	334a      	adds	r3, #74	; 0x4a
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <pack_telem_data+0xa00>)
 8001f64:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	121a      	asrs	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	334b      	adds	r3, #75	; 0x4b
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <pack_telem_data+0xa00>)
 8001f84:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	141a      	asrs	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	334c      	adds	r3, #76	; 0x4c
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <pack_telem_data+0xa00>)
 8001fa4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001fa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb4:	ee17 3a90 	vmov	r3, s15
 8001fb8:	161a      	asrs	r2, r3, #24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	334d      	adds	r3, #77	; 0x4d
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <pack_telem_data+0xa00>)
 8001fc4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001fc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd4:	edc7 7a00 	vstr	s15, [r7]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	334e      	adds	r3, #78	; 0x4e
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <pack_telem_data+0xa00>)
 8001fe4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001fe8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff4:	ee17 3a90 	vmov	r3, s15
 8001ff8:	121a      	asrs	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	334f      	adds	r3, #79	; 0x4f
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <pack_telem_data+0xa00>)
 8002004:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002008:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	141a      	asrs	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3350      	adds	r3, #80	; 0x50
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <pack_telem_data+0xa00>)
 8002024:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002028:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800202c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002034:	ee17 3a90 	vmov	r3, s15
 8002038:	161a      	asrs	r2, r3, #24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3351      	adds	r3, #81	; 0x51
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <pack_telem_data+0xa00>)
 8002044:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002048:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800204c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002054:	edc7 7a00 	vstr	s15, [r7]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3352      	adds	r3, #82	; 0x52
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 8002062:	4b03      	ldr	r3, [pc, #12]	; (8002070 <pack_telem_data+0xa00>)
 8002064:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800206c:	e002      	b.n	8002074 <pack_telem_data+0xa04>
 800206e:	bf00      	nop
 8002070:	20000088 	.word	0x20000088
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	121a      	asrs	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3353      	adds	r3, #83	; 0x53
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 800208a:	4bd4      	ldr	r3, [pc, #848]	; (80023dc <pack_telem_data+0xd6c>)
 800208c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	141a      	asrs	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3354      	adds	r3, #84	; 0x54
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 80020aa:	4bcc      	ldr	r3, [pc, #816]	; (80023dc <pack_telem_data+0xd6c>)
 80020ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80020b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	161a      	asrs	r2, r3, #24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3355      	adds	r3, #85	; 0x55
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 80020ca:	4bc4      	ldr	r3, [pc, #784]	; (80023dc <pack_telem_data+0xd6c>)
 80020cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	edc7 7a00 	vstr	s15, [r7]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3356      	adds	r3, #86	; 0x56
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 80020ea:	4bbc      	ldr	r3, [pc, #752]	; (80023dc <pack_telem_data+0xd6c>)
 80020ec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
 8002100:	121a      	asrs	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3357      	adds	r3, #87	; 0x57
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 800210a:	4bb4      	ldr	r3, [pc, #720]	; (80023dc <pack_telem_data+0xd6c>)
 800210c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002110:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	141a      	asrs	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3358      	adds	r3, #88	; 0x58
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 800212a:	4bac      	ldr	r3, [pc, #688]	; (80023dc <pack_telem_data+0xd6c>)
 800212c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002130:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213c:	ee17 3a90 	vmov	r3, s15
 8002140:	161a      	asrs	r2, r3, #24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3359      	adds	r3, #89	; 0x59
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 800214a:	4ba4      	ldr	r3, [pc, #656]	; (80023dc <pack_telem_data+0xd6c>)
 800214c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002150:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215c:	edc7 7a00 	vstr	s15, [r7]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	335a      	adds	r3, #90	; 0x5a
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 800216a:	4b9c      	ldr	r3, [pc, #624]	; (80023dc <pack_telem_data+0xd6c>)
 800216c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	121a      	asrs	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	335b      	adds	r3, #91	; 0x5b
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 800218a:	4b94      	ldr	r3, [pc, #592]	; (80023dc <pack_telem_data+0xd6c>)
 800218c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002190:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219c:	ee17 3a90 	vmov	r3, s15
 80021a0:	141a      	asrs	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	335c      	adds	r3, #92	; 0x5c
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 80021aa:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <pack_telem_data+0xd6c>)
 80021ac:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80021b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021bc:	ee17 3a90 	vmov	r3, s15
 80021c0:	161a      	asrs	r2, r3, #24
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	335d      	adds	r3, #93	; 0x5d
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 80021ca:	4b84      	ldr	r3, [pc, #528]	; (80023dc <pack_telem_data+0xd6c>)
 80021cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80021d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021dc:	edc7 7a00 	vstr	s15, [r7]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	335e      	adds	r3, #94	; 0x5e
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 80021ea:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <pack_telem_data+0xd6c>)
 80021ec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80021f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fc:	ee17 3a90 	vmov	r3, s15
 8002200:	121a      	asrs	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	335f      	adds	r3, #95	; 0x5f
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <pack_telem_data+0xd6c>)
 800220c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002210:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	141a      	asrs	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 800222a:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <pack_telem_data+0xd6c>)
 800222c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002230:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223c:	ee17 3a90 	vmov	r3, s15
 8002240:	161a      	asrs	r2, r3, #24
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 800224a:	4b64      	ldr	r3, [pc, #400]	; (80023dc <pack_telem_data+0xd6c>)
 800224c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002250:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	edc7 7a00 	vstr	s15, [r7]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3362      	adds	r3, #98	; 0x62
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <pack_telem_data+0xd6c>)
 800226c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002270:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227c:	ee17 3a90 	vmov	r3, s15
 8002280:	121a      	asrs	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3363      	adds	r3, #99	; 0x63
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 800228a:	4b54      	ldr	r3, [pc, #336]	; (80023dc <pack_telem_data+0xd6c>)
 800228c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002290:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229c:	ee17 3a90 	vmov	r3, s15
 80022a0:	141a      	asrs	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3364      	adds	r3, #100	; 0x64
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <pack_telem_data+0xd6c>)
 80022ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80022b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022bc:	ee17 3a90 	vmov	r3, s15
 80022c0:	161a      	asrs	r2, r3, #24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3365      	adds	r3, #101	; 0x65
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 80022ca:	4b44      	ldr	r3, [pc, #272]	; (80023dc <pack_telem_data+0xd6c>)
 80022cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022dc:	edc7 7a00 	vstr	s15, [r7]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3366      	adds	r3, #102	; 0x66
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 80022ea:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <pack_telem_data+0xd6c>)
 80022ec:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	121a      	asrs	r2, r3, #8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3367      	adds	r3, #103	; 0x67
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <pack_telem_data+0xd6c>)
 800230c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002310:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231c:	ee17 3a90 	vmov	r3, s15
 8002320:	141a      	asrs	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3368      	adds	r3, #104	; 0x68
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <pack_telem_data+0xd6c>)
 800232c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	161a      	asrs	r2, r3, #24
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3369      	adds	r3, #105	; 0x69
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <pack_telem_data+0xd6c>)
 800234c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002350:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	edc7 7a00 	vstr	s15, [r7]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	336a      	adds	r3, #106	; 0x6a
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <pack_telem_data+0xd6c>)
 800236c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002370:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	121a      	asrs	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	336b      	adds	r3, #107	; 0x6b
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <pack_telem_data+0xd6c>)
 800238c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002390:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	141a      	asrs	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	336c      	adds	r3, #108	; 0x6c
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <pack_telem_data+0xd6c>)
 80023ac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80023b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	161a      	asrs	r2, r3, #24
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	336d      	adds	r3, #109	; 0x6d
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = TELEM_ITEM_110;
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <pack_telem_data+0xd70>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	e004      	b.n	80023e4 <pack_telem_data+0xd74>
 80023da:	bf00      	nop
 80023dc:	20000088 	.word	0x20000088
 80023e0:	200000d8 	.word	0x200000d8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	336e      	adds	r3, #110	; 0x6e
 80023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ec:	edc7 7a00 	vstr	s15, [r7]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 80023f6:	4bcb      	ldr	r3, [pc, #812]	; (8002724 <pack_telem_data+0x10b4>)
 80023f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	336f      	adds	r3, #111	; 0x6f
 8002408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240c:	edc7 7a00 	vstr	s15, [r7]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 8002416:	4bc3      	ldr	r3, [pc, #780]	; (8002724 <pack_telem_data+0x10b4>)
 8002418:	edd3 7a02 	vldr	s15, [r3, #8]
 800241c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3370      	adds	r3, #112	; 0x70
 8002428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242c:	edc7 7a00 	vstr	s15, [r7]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 8002436:	4bbb      	ldr	r3, [pc, #748]	; (8002724 <pack_telem_data+0x10b4>)
 8002438:	edd3 7a03 	vldr	s15, [r3, #12]
 800243c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3371      	adds	r3, #113	; 0x71
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	edc7 7a00 	vstr	s15, [r7]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 8002456:	4bb3      	ldr	r3, [pc, #716]	; (8002724 <pack_telem_data+0x10b4>)
 8002458:	edd3 7a04 	vldr	s15, [r3, #16]
 800245c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3372      	adds	r3, #114	; 0x72
 8002468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246c:	edc7 7a00 	vstr	s15, [r7]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 8002476:	4bab      	ldr	r3, [pc, #684]	; (8002724 <pack_telem_data+0x10b4>)
 8002478:	edd3 7a05 	vldr	s15, [r3, #20]
 800247c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3373      	adds	r3, #115	; 0x73
 8002488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248c:	edc7 7a00 	vstr	s15, [r7]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 8002496:	4ba3      	ldr	r3, [pc, #652]	; (8002724 <pack_telem_data+0x10b4>)
 8002498:	edd3 7a06 	vldr	s15, [r3, #24]
 800249c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3374      	adds	r3, #116	; 0x74
 80024a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ac:	edc7 7a00 	vstr	s15, [r7]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 80024b6:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <pack_telem_data+0x10b4>)
 80024b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80024bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3375      	adds	r3, #117	; 0x75
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	edc7 7a00 	vstr	s15, [r7]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 80024d6:	4b93      	ldr	r3, [pc, #588]	; (8002724 <pack_telem_data+0x10b4>)
 80024d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80024dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3376      	adds	r3, #118	; 0x76
 80024e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ec:	edc7 7a00 	vstr	s15, [r7]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 80024f6:	4b8b      	ldr	r3, [pc, #556]	; (8002724 <pack_telem_data+0x10b4>)
 80024f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3377      	adds	r3, #119	; 0x77
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	edc7 7a00 	vstr	s15, [r7]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 8002516:	4b83      	ldr	r3, [pc, #524]	; (8002724 <pack_telem_data+0x10b4>)
 8002518:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800251c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3378      	adds	r3, #120	; 0x78
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	edc7 7a00 	vstr	s15, [r7]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 8002536:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <pack_telem_data+0x10b4>)
 8002538:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800253c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3379      	adds	r3, #121	; 0x79
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	edc7 7a00 	vstr	s15, [r7]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 8002556:	4b73      	ldr	r3, [pc, #460]	; (8002724 <pack_telem_data+0x10b4>)
 8002558:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800255c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	337a      	adds	r3, #122	; 0x7a
 8002568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256c:	edc7 7a00 	vstr	s15, [r7]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 8002576:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <pack_telem_data+0x10b4>)
 8002578:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800257c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	337b      	adds	r3, #123	; 0x7b
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	edc7 7a00 	vstr	s15, [r7]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <pack_telem_data+0x10b8>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800272c <pack_telem_data+0x10bc>
 80025a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	337c      	adds	r3, #124	; 0x7c
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <pack_telem_data+0x10b8>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800272c <pack_telem_data+0x10bc>
 80025c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c8:	ee17 3a90 	vmov	r3, s15
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	337d      	adds	r3, #125	; 0x7d
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <pack_telem_data+0x10b8>)
 80025dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800272c <pack_telem_data+0x10bc>
 80025e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	337e      	adds	r3, #126	; 0x7e
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <pack_telem_data+0x10b8>)
 80025fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002600:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800272c <pack_telem_data+0x10bc>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	ee17 3a90 	vmov	r3, s15
 8002610:	b29b      	uxth	r3, r3
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	337f      	adds	r3, #127	; 0x7f
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 800261e:	4b42      	ldr	r3, [pc, #264]	; (8002728 <pack_telem_data+0x10b8>)
 8002620:	edd3 7a02 	vldr	s15, [r3, #8]
 8002624:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800272c <pack_telem_data+0x10bc>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3380      	adds	r3, #128	; 0x80
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 800263e:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <pack_telem_data+0x10b8>)
 8002640:	edd3 7a02 	vldr	s15, [r3, #8]
 8002644:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800272c <pack_telem_data+0x10bc>
 8002648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	b29b      	uxth	r3, r3
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3381      	adds	r3, #129	; 0x81
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <pack_telem_data+0x10b8>)
 8002664:	edd3 7a03 	vldr	s15, [r3, #12]
 8002668:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800272c <pack_telem_data+0x10bc>
 800266c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002674:	ee17 3a90 	vmov	r3, s15
 8002678:	b29a      	uxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3382      	adds	r3, #130	; 0x82
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <pack_telem_data+0x10b8>)
 8002684:	edd3 7a03 	vldr	s15, [r3, #12]
 8002688:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800272c <pack_telem_data+0x10bc>
 800268c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002694:	ee17 3a90 	vmov	r3, s15
 8002698:	b29b      	uxth	r3, r3
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3383      	adds	r3, #131	; 0x83
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <pack_telem_data+0x10b8>)
 80026a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026ac:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800272c <pack_telem_data+0x10bc>
 80026b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b8:	ee17 3a90 	vmov	r3, s15
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3384      	adds	r3, #132	; 0x84
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <pack_telem_data+0x10b8>)
 80026c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026cc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800272c <pack_telem_data+0x10bc>
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	b29b      	uxth	r3, r3
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3385      	adds	r3, #133	; 0x85
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <pack_telem_data+0x10b8>)
 80026ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80026f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800272c <pack_telem_data+0x10bc>
 80026f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3386      	adds	r3, #134	; 0x86
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <pack_telem_data+0x10b8>)
 800270c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002710:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800272c <pack_telem_data+0x10bc>
 8002714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	ee17 3a90 	vmov	r3, s15
 8002720:	e006      	b.n	8002730 <pack_telem_data+0x10c0>
 8002722:	bf00      	nop
 8002724:	200000d8 	.word	0x200000d8
 8002728:	20000110 	.word	0x20000110
 800272c:	42c80000 	.word	0x42c80000
 8002730:	b29b      	uxth	r3, r3
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3387      	adds	r3, #135	; 0x87
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 800273e:	4bc7      	ldr	r3, [pc, #796]	; (8002a5c <pack_telem_data+0x13ec>)
 8002740:	edd3 7a06 	vldr	s15, [r3, #24]
 8002744:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8002a60 <pack_telem_data+0x13f0>
 8002748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002750:	ee17 3a90 	vmov	r3, s15
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3388      	adds	r3, #136	; 0x88
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 800275e:	4bbf      	ldr	r3, [pc, #764]	; (8002a5c <pack_telem_data+0x13ec>)
 8002760:	edd3 7a06 	vldr	s15, [r3, #24]
 8002764:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002a60 <pack_telem_data+0x13f0>
 8002768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002770:	ee17 3a90 	vmov	r3, s15
 8002774:	b29b      	uxth	r3, r3
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3389      	adds	r3, #137	; 0x89
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 8002782:	4bb6      	ldr	r3, [pc, #728]	; (8002a5c <pack_telem_data+0x13ec>)
 8002784:	edd3 7a07 	vldr	s15, [r3, #28]
 8002788:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002a60 <pack_telem_data+0x13f0>
 800278c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002794:	ee17 3a90 	vmov	r3, s15
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	338a      	adds	r3, #138	; 0x8a
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 80027a2:	4bae      	ldr	r3, [pc, #696]	; (8002a5c <pack_telem_data+0x13ec>)
 80027a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80027a8:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8002a60 <pack_telem_data+0x13f0>
 80027ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b4:	ee17 3a90 	vmov	r3, s15
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	338b      	adds	r3, #139	; 0x8b
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 80027c6:	4ba5      	ldr	r3, [pc, #660]	; (8002a5c <pack_telem_data+0x13ec>)
 80027c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80027cc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002a60 <pack_telem_data+0x13f0>
 80027d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 3a90 	vmov	r3, s15
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	338c      	adds	r3, #140	; 0x8c
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 80027e6:	4b9d      	ldr	r3, [pc, #628]	; (8002a5c <pack_telem_data+0x13ec>)
 80027e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ec:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002a60 <pack_telem_data+0x13f0>
 80027f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f8:	ee17 3a90 	vmov	r3, s15
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29a      	uxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	338d      	adds	r3, #141	; 0x8d
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <pack_telem_data+0x13ec>)
 800280c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002810:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002a60 <pack_telem_data+0x13f0>
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	338e      	adds	r3, #142	; 0x8e
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 800282a:	4b8c      	ldr	r3, [pc, #560]	; (8002a5c <pack_telem_data+0x13ec>)
 800282c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002830:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002a60 <pack_telem_data+0x13f0>
 8002834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283c:	ee17 3a90 	vmov	r3, s15
 8002840:	b29b      	uxth	r3, r3
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	338f      	adds	r3, #143	; 0x8f
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 800284e:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <pack_telem_data+0x13ec>)
 8002850:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002854:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a60 <pack_telem_data+0x13f0>
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002860:	ee17 3a90 	vmov	r3, s15
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3390      	adds	r3, #144	; 0x90
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 800286e:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <pack_telem_data+0x13ec>)
 8002870:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002874:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002a60 <pack_telem_data+0x13f0>
 8002878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002880:	ee17 3a90 	vmov	r3, s15
 8002884:	b29b      	uxth	r3, r3
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3391      	adds	r3, #145	; 0x91
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 8002892:	4b72      	ldr	r3, [pc, #456]	; (8002a5c <pack_telem_data+0x13ec>)
 8002894:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002898:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002a60 <pack_telem_data+0x13f0>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3392      	adds	r3, #146	; 0x92
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <pack_telem_data+0x13ec>)
 80028b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028b8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002a60 <pack_telem_data+0x13f0>
 80028bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3393      	adds	r3, #147	; 0x93
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <pack_telem_data+0x13ec>)
 80028d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80028dc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002a60 <pack_telem_data+0x13f0>
 80028e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e8:	ee17 3a90 	vmov	r3, s15
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3394      	adds	r3, #148	; 0x94
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <pack_telem_data+0x13ec>)
 80028f8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80028fc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a60 <pack_telem_data+0x13f0>
 8002900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	ee17 3a90 	vmov	r3, s15
 800290c:	b29b      	uxth	r3, r3
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3395      	adds	r3, #149	; 0x95
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 800291a:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <pack_telem_data+0x13f4>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002a60 <pack_telem_data+0x13f0>
 8002924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292c:	ee17 3a90 	vmov	r3, s15
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3396      	adds	r3, #150	; 0x96
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <pack_telem_data+0x13f4>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002a60 <pack_telem_data+0x13f0>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b29b      	uxth	r3, r3
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3397      	adds	r3, #151	; 0x97
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <pack_telem_data+0x13f4>)
 8002960:	edd3 7a01 	vldr	s15, [r3, #4]
 8002964:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002a60 <pack_telem_data+0x13f0>
 8002968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002970:	ee17 3a90 	vmov	r3, s15
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3398      	adds	r3, #152	; 0x98
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 800297e:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <pack_telem_data+0x13f4>)
 8002980:	edd3 7a01 	vldr	s15, [r3, #4]
 8002984:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a60 <pack_telem_data+0x13f0>
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002990:	ee17 3a90 	vmov	r3, s15
 8002994:	b29b      	uxth	r3, r3
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3399      	adds	r3, #153	; 0x99
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <pack_telem_data+0x13f8>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b4:	ee17 3a90 	vmov	r3, s15
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	339a      	adds	r3, #154	; 0x9a
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <pack_telem_data+0x13f8>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d4:	ee17 3a90 	vmov	r3, s15
 80029d8:	b21b      	sxth	r3, r3
 80029da:	121b      	asrs	r3, r3, #8
 80029dc:	b21a      	sxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	339b      	adds	r3, #155	; 0x9b
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <pack_telem_data+0x13f8>)
 80029e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	339c      	adds	r3, #156	; 0x9c
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <pack_telem_data+0x13f8>)
 8002a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a18:	ee17 3a90 	vmov	r3, s15
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	121b      	asrs	r3, r3, #8
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	339d      	adds	r3, #157	; 0x9d
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <pack_telem_data+0x13fc>)
 8002a2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	339e      	adds	r3, #158	; 0x9e
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <pack_telem_data+0x13fc>)
 8002a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3e:	121b      	asrs	r3, r3, #8
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	339f      	adds	r3, #159	; 0x9f
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <pack_telem_data+0x13fc>)
 8002a4c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	33a0      	adds	r3, #160	; 0xa0
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e00a      	b.n	8002a70 <pack_telem_data+0x1400>
 8002a5a:	bf00      	nop
 8002a5c:	20000110 	.word	0x20000110
 8002a60:	42c80000 	.word	0x42c80000
 8002a64:	20000144 	.word	0x20000144
 8002a68:	2000014c 	.word	0x2000014c
 8002a6c:	20000154 	.word	0x20000154
	*(dst + 161) = TELEM_ITEM_161;
 8002a70:	4bcc      	ldr	r3, [pc, #816]	; (8002da4 <pack_telem_data+0x1734>)
 8002a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a76:	121b      	asrs	r3, r3, #8
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	33a1      	adds	r3, #161	; 0xa1
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8002a82:	4bc9      	ldr	r3, [pc, #804]	; (8002da8 <pack_telem_data+0x1738>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002dbc <pack_telem_data+0x174c>
 8002a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a94:	edc7 7a00 	vstr	s15, [r7]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	33a2      	adds	r3, #162	; 0xa2
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8002aa2:	4bc1      	ldr	r3, [pc, #772]	; (8002da8 <pack_telem_data+0x1738>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002dbc <pack_telem_data+0x174c>
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab4:	ee17 3a90 	vmov	r3, s15
 8002ab8:	121a      	asrs	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	33a3      	adds	r3, #163	; 0xa3
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8002ac2:	4bb9      	ldr	r3, [pc, #740]	; (8002da8 <pack_telem_data+0x1738>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002dbc <pack_telem_data+0x174c>
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	141a      	asrs	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	33a4      	adds	r3, #164	; 0xa4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8002ae2:	4bb1      	ldr	r3, [pc, #708]	; (8002da8 <pack_telem_data+0x1738>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8002dbc <pack_telem_data+0x174c>
 8002aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af4:	ee17 3a90 	vmov	r3, s15
 8002af8:	161a      	asrs	r2, r3, #24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	33a5      	adds	r3, #165	; 0xa5
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8002b02:	4ba9      	ldr	r3, [pc, #676]	; (8002da8 <pack_telem_data+0x1738>)
 8002b04:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b08:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002dbc <pack_telem_data+0x174c>
 8002b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b14:	edc7 7a00 	vstr	s15, [r7]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	33a6      	adds	r3, #166	; 0xa6
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8002b22:	4ba1      	ldr	r3, [pc, #644]	; (8002da8 <pack_telem_data+0x1738>)
 8002b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b28:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002dbc <pack_telem_data+0x174c>
 8002b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b34:	ee17 3a90 	vmov	r3, s15
 8002b38:	121a      	asrs	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	33a7      	adds	r3, #167	; 0xa7
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8002b42:	4b99      	ldr	r3, [pc, #612]	; (8002da8 <pack_telem_data+0x1738>)
 8002b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b48:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002dbc <pack_telem_data+0x174c>
 8002b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b54:	ee17 3a90 	vmov	r3, s15
 8002b58:	141a      	asrs	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	33a8      	adds	r3, #168	; 0xa8
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8002b62:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <pack_telem_data+0x1738>)
 8002b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b68:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002dbc <pack_telem_data+0x174c>
 8002b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b74:	ee17 3a90 	vmov	r3, s15
 8002b78:	161a      	asrs	r2, r3, #24
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	33a9      	adds	r3, #169	; 0xa9
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8002b82:	4b8a      	ldr	r3, [pc, #552]	; (8002dac <pack_telem_data+0x173c>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002dbc <pack_telem_data+0x174c>
 8002b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b94:	ee17 3a90 	vmov	r3, s15
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	33aa      	adds	r3, #170	; 0xaa
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <pack_telem_data+0x173c>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002dbc <pack_telem_data+0x174c>
 8002bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	33ab      	adds	r3, #171	; 0xab
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8002bc6:	4b79      	ldr	r3, [pc, #484]	; (8002dac <pack_telem_data+0x173c>)
 8002bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bcc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002dbc <pack_telem_data+0x174c>
 8002bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd8:	ee17 3a90 	vmov	r3, s15
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	33ac      	adds	r3, #172	; 0xac
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8002be6:	4b71      	ldr	r3, [pc, #452]	; (8002dac <pack_telem_data+0x173c>)
 8002be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002dbc <pack_telem_data+0x174c>
 8002bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf8:	ee17 3a90 	vmov	r3, s15
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	33ad      	adds	r3, #173	; 0xad
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8002c0a:	4b69      	ldr	r3, [pc, #420]	; (8002db0 <pack_telem_data+0x1740>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002dbc <pack_telem_data+0x174c>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1c:	ee17 3a90 	vmov	r3, s15
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	33ae      	adds	r3, #174	; 0xae
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8002c2a:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <pack_telem_data+0x1740>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002dbc <pack_telem_data+0x174c>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3c:	ee17 3a90 	vmov	r3, s15
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	33af      	adds	r3, #175	; 0xaf
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <pack_telem_data+0x1740>)
 8002c50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c54:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002dbc <pack_telem_data+0x174c>
 8002c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c60:	ee17 3a90 	vmov	r3, s15
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	33b0      	adds	r3, #176	; 0xb0
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8002c6e:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <pack_telem_data+0x1740>)
 8002c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c74:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002dbc <pack_telem_data+0x174c>
 8002c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c80:	ee17 3a90 	vmov	r3, s15
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	33b1      	adds	r3, #177	; 0xb1
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <pack_telem_data+0x1744>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002dbc <pack_telem_data+0x174c>
 8002c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	33b2      	adds	r3, #178	; 0xb2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <pack_telem_data+0x1744>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002dbc <pack_telem_data+0x174c>
 8002cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc4:	ee17 3a90 	vmov	r3, s15
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	33b3      	adds	r3, #179	; 0xb3
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <pack_telem_data+0x1744>)
 8002cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cdc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002dbc <pack_telem_data+0x174c>
 8002ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce8:	ee17 3a90 	vmov	r3, s15
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	33b4      	adds	r3, #180	; 0xb4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <pack_telem_data+0x1744>)
 8002cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cfc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002dbc <pack_telem_data+0x174c>
 8002d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d08:	ee17 3a90 	vmov	r3, s15
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	33b5      	adds	r3, #181	; 0xb5
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <pack_telem_data+0x1748>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002dbc <pack_telem_data+0x174c>
 8002d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d2c:	edc7 7a00 	vstr	s15, [r7]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	33b6      	adds	r3, #182	; 0xb6
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <pack_telem_data+0x1748>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002dbc <pack_telem_data+0x174c>
 8002d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 3a90 	vmov	r3, s15
 8002d50:	121a      	asrs	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	33b7      	adds	r3, #183	; 0xb7
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <pack_telem_data+0x1748>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002dbc <pack_telem_data+0x174c>
 8002d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6c:	ee17 3a90 	vmov	r3, s15
 8002d70:	141a      	asrs	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	33b8      	adds	r3, #184	; 0xb8
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <pack_telem_data+0x1748>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002dbc <pack_telem_data+0x174c>
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8c:	ee17 3a90 	vmov	r3, s15
 8002d90:	161a      	asrs	r2, r3, #24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	33b9      	adds	r3, #185	; 0xb9
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <pack_telem_data+0x1748>)
 8002d9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da0:	e00e      	b.n	8002dc0 <pack_telem_data+0x1750>
 8002da2:	bf00      	nop
 8002da4:	20000154 	.word	0x20000154
 8002da8:	20000158 	.word	0x20000158
 8002dac:	20000160 	.word	0x20000160
 8002db0:	20000168 	.word	0x20000168
 8002db4:	20000170 	.word	0x20000170
 8002db8:	20000178 	.word	0x20000178
 8002dbc:	42c80000 	.word	0x42c80000
 8002dc0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002dbc <pack_telem_data+0x174c>
 8002dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dcc:	edc7 7a00 	vstr	s15, [r7]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	33ba      	adds	r3, #186	; 0xba
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8002dda:	4bd4      	ldr	r3, [pc, #848]	; (800312c <pack_telem_data+0x1abc>)
 8002ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002de0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8003130 <pack_telem_data+0x1ac0>
 8002de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dec:	ee17 3a90 	vmov	r3, s15
 8002df0:	121a      	asrs	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	33bb      	adds	r3, #187	; 0xbb
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8002dfa:	4bcc      	ldr	r3, [pc, #816]	; (800312c <pack_telem_data+0x1abc>)
 8002dfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e00:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8003130 <pack_telem_data+0x1ac0>
 8002e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e0c:	ee17 3a90 	vmov	r3, s15
 8002e10:	141a      	asrs	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	33bc      	adds	r3, #188	; 0xbc
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8002e1a:	4bc4      	ldr	r3, [pc, #784]	; (800312c <pack_telem_data+0x1abc>)
 8002e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e20:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8003130 <pack_telem_data+0x1ac0>
 8002e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2c:	ee17 3a90 	vmov	r3, s15
 8002e30:	161a      	asrs	r2, r3, #24
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	33bd      	adds	r3, #189	; 0xbd
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8002e3a:	4bbe      	ldr	r3, [pc, #760]	; (8003134 <pack_telem_data+0x1ac4>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8003130 <pack_telem_data+0x1ac0>
 8002e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e4c:	edc7 7a00 	vstr	s15, [r7]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	33be      	adds	r3, #190	; 0xbe
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8002e5a:	4bb6      	ldr	r3, [pc, #728]	; (8003134 <pack_telem_data+0x1ac4>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8003130 <pack_telem_data+0x1ac0>
 8002e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6c:	ee17 3a90 	vmov	r3, s15
 8002e70:	121a      	asrs	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	33bf      	adds	r3, #191	; 0xbf
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8002e7a:	4bae      	ldr	r3, [pc, #696]	; (8003134 <pack_telem_data+0x1ac4>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8003130 <pack_telem_data+0x1ac0>
 8002e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8c:	ee17 3a90 	vmov	r3, s15
 8002e90:	141a      	asrs	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	33c0      	adds	r3, #192	; 0xc0
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8002e9a:	4ba6      	ldr	r3, [pc, #664]	; (8003134 <pack_telem_data+0x1ac4>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003130 <pack_telem_data+0x1ac0>
 8002ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eac:	ee17 3a90 	vmov	r3, s15
 8002eb0:	161a      	asrs	r2, r3, #24
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	33c1      	adds	r3, #193	; 0xc1
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8002eba:	4b9e      	ldr	r3, [pc, #632]	; (8003134 <pack_telem_data+0x1ac4>)
 8002ebc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ec0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003130 <pack_telem_data+0x1ac0>
 8002ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ecc:	edc7 7a00 	vstr	s15, [r7]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	33c2      	adds	r3, #194	; 0xc2
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8002eda:	4b96      	ldr	r3, [pc, #600]	; (8003134 <pack_telem_data+0x1ac4>)
 8002edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee0:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003130 <pack_telem_data+0x1ac0>
 8002ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eec:	ee17 3a90 	vmov	r3, s15
 8002ef0:	121a      	asrs	r2, r3, #8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	33c3      	adds	r3, #195	; 0xc3
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8002efa:	4b8e      	ldr	r3, [pc, #568]	; (8003134 <pack_telem_data+0x1ac4>)
 8002efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f00:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003130 <pack_telem_data+0x1ac0>
 8002f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0c:	ee17 3a90 	vmov	r3, s15
 8002f10:	141a      	asrs	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	33c4      	adds	r3, #196	; 0xc4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8002f1a:	4b86      	ldr	r3, [pc, #536]	; (8003134 <pack_telem_data+0x1ac4>)
 8002f1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f20:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003130 <pack_telem_data+0x1ac0>
 8002f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f2c:	ee17 3a90 	vmov	r3, s15
 8002f30:	161a      	asrs	r2, r3, #24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	33c5      	adds	r3, #197	; 0xc5
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <pack_telem_data+0x1ac8>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003130 <pack_telem_data+0x1ac0>
 8002f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f4c:	edc7 7a00 	vstr	s15, [r7]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	33c6      	adds	r3, #198	; 0xc6
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 8002f5a:	4b77      	ldr	r3, [pc, #476]	; (8003138 <pack_telem_data+0x1ac8>)
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003130 <pack_telem_data+0x1ac0>
 8002f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	ee17 3a90 	vmov	r3, s15
 8002f70:	121a      	asrs	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	33c7      	adds	r3, #199	; 0xc7
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
	*(dst + 200) = TELEM_ITEM_200;
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <pack_telem_data+0x1ac8>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003130 <pack_telem_data+0x1ac0>
 8002f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8c:	ee17 3a90 	vmov	r3, s15
 8002f90:	141a      	asrs	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	33c8      	adds	r3, #200	; 0xc8
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]
	*(dst + 201) = TELEM_ITEM_201;
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <pack_telem_data+0x1ac8>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003130 <pack_telem_data+0x1ac0>
 8002fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fac:	ee17 3a90 	vmov	r3, s15
 8002fb0:	161a      	asrs	r2, r3, #24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	33c9      	adds	r3, #201	; 0xc9
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
	*(dst + 202) = TELEM_ITEM_202;
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <pack_telem_data+0x1ac8>)
 8002fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fc0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003130 <pack_telem_data+0x1ac0>
 8002fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fcc:	edc7 7a00 	vstr	s15, [r7]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	33ca      	adds	r3, #202	; 0xca
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
	*(dst + 203) = TELEM_ITEM_203;
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <pack_telem_data+0x1ac8>)
 8002fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003130 <pack_telem_data+0x1ac0>
 8002fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fec:	ee17 3a90 	vmov	r3, s15
 8002ff0:	121a      	asrs	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	33cb      	adds	r3, #203	; 0xcb
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
	*(dst + 204) = TELEM_ITEM_204;
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <pack_telem_data+0x1ac8>)
 8002ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003000:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003130 <pack_telem_data+0x1ac0>
 8003004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300c:	ee17 3a90 	vmov	r3, s15
 8003010:	141a      	asrs	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	33cc      	adds	r3, #204	; 0xcc
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
	*(dst + 205) = TELEM_ITEM_205;
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <pack_telem_data+0x1ac8>)
 800301c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003020:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003130 <pack_telem_data+0x1ac0>
 8003024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302c:	ee17 3a90 	vmov	r3, s15
 8003030:	161a      	asrs	r2, r3, #24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	33cd      	adds	r3, #205	; 0xcd
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
	*(dst + 206) = TELEM_ITEM_206;
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <pack_telem_data+0x1acc>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304c:	edc7 7a00 	vstr	s15, [r7]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	33ce      	adds	r3, #206	; 0xce
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
	*(dst + 207) = TELEM_ITEM_207;
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <pack_telem_data+0x1acc>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	ee17 3a90 	vmov	r3, s15
 8003070:	121a      	asrs	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	33cf      	adds	r3, #207	; 0xcf
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
	*(dst + 208) = TELEM_ITEM_208;
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <pack_telem_data+0x1acc>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308c:	ee17 3a90 	vmov	r3, s15
 8003090:	141a      	asrs	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	33d0      	adds	r3, #208	; 0xd0
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
	*(dst + 209) = TELEM_ITEM_209;
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <pack_telem_data+0x1acc>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ac:	ee17 3a90 	vmov	r3, s15
 80030b0:	161a      	asrs	r2, r3, #24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	33d1      	adds	r3, #209	; 0xd1
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
	*(dst + 210) = TELEM_ITEM_210;
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <pack_telem_data+0x1acc>)
 80030bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030cc:	edc7 7a00 	vstr	s15, [r7]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	33d2      	adds	r3, #210	; 0xd2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
	*(dst + 211) = TELEM_ITEM_211;
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <pack_telem_data+0x1acc>)
 80030dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ec:	ee17 3a90 	vmov	r3, s15
 80030f0:	121a      	asrs	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	33d3      	adds	r3, #211	; 0xd3
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]
	*(dst + 212) = TELEM_ITEM_212;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <pack_telem_data+0x1acc>)
 80030fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003100:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800310c:	ee17 3a90 	vmov	r3, s15
 8003110:	141a      	asrs	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	33d4      	adds	r3, #212	; 0xd4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
	*(dst + 213) = TELEM_ITEM_213;
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <pack_telem_data+0x1acc>)
 800311c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003120:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003128:	e00a      	b.n	8003140 <pack_telem_data+0x1ad0>
 800312a:	bf00      	nop
 800312c:	20000178 	.word	0x20000178
 8003130:	42c80000 	.word	0x42c80000
 8003134:	20000180 	.word	0x20000180
 8003138:	20000188 	.word	0x20000188
 800313c:	20000190 	.word	0x20000190
 8003140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003144:	ee17 3a90 	vmov	r3, s15
 8003148:	161a      	asrs	r2, r3, #24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	33d5      	adds	r3, #213	; 0xd5
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
	*(dst + 214) = TELEM_ITEM_214;
 8003152:	4bb7      	ldr	r3, [pc, #732]	; (8003430 <pack_telem_data+0x1dc0>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800315c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003164:	edc7 7a00 	vstr	s15, [r7]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	33d6      	adds	r3, #214	; 0xd6
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
	*(dst + 215) = TELEM_ITEM_215;
 8003172:	4baf      	ldr	r3, [pc, #700]	; (8003430 <pack_telem_data+0x1dc0>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800317c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003184:	ee17 3a90 	vmov	r3, s15
 8003188:	121a      	asrs	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	33d7      	adds	r3, #215	; 0xd7
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]
	*(dst + 216) = TELEM_ITEM_216;
 8003192:	4ba7      	ldr	r3, [pc, #668]	; (8003430 <pack_telem_data+0x1dc0>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800319c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a4:	ee17 3a90 	vmov	r3, s15
 80031a8:	141a      	asrs	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	33d8      	adds	r3, #216	; 0xd8
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
	*(dst + 217) = TELEM_ITEM_217;
 80031b2:	4b9f      	ldr	r3, [pc, #636]	; (8003430 <pack_telem_data+0x1dc0>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c4:	ee17 3a90 	vmov	r3, s15
 80031c8:	161a      	asrs	r2, r3, #24
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	33d9      	adds	r3, #217	; 0xd9
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
	*(dst + 218) = TELEM_ITEM_218;
 80031d2:	4b98      	ldr	r3, [pc, #608]	; (8003434 <pack_telem_data+0x1dc4>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e4:	edc7 7a00 	vstr	s15, [r7]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	33da      	adds	r3, #218	; 0xda
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]
	*(dst + 219) = TELEM_ITEM_219;
 80031f2:	4b90      	ldr	r3, [pc, #576]	; (8003434 <pack_telem_data+0x1dc4>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	121a      	asrs	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	33db      	adds	r3, #219	; 0xdb
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]
	*(dst + 220) = TELEM_ITEM_220;
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <pack_telem_data+0x1dc4>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800321c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003224:	ee17 3a90 	vmov	r3, s15
 8003228:	141a      	asrs	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	33dc      	adds	r3, #220	; 0xdc
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
	*(dst + 221) = TELEM_ITEM_221;
 8003232:	4b80      	ldr	r3, [pc, #512]	; (8003434 <pack_telem_data+0x1dc4>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800323c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003244:	ee17 3a90 	vmov	r3, s15
 8003248:	161a      	asrs	r2, r3, #24
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	33dd      	adds	r3, #221	; 0xdd
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
	*(dst + 222) = TELEM_ITEM_222;
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <pack_telem_data+0x1dc8>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800325c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003264:	edc7 7a00 	vstr	s15, [r7]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	33de      	adds	r3, #222	; 0xde
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
	*(dst + 223) = TELEM_ITEM_223;
 8003272:	4b71      	ldr	r3, [pc, #452]	; (8003438 <pack_telem_data+0x1dc8>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800327c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003284:	ee17 3a90 	vmov	r3, s15
 8003288:	121a      	asrs	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	33df      	adds	r3, #223	; 0xdf
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
	*(dst + 224) = TELEM_ITEM_224;
 8003292:	4b69      	ldr	r3, [pc, #420]	; (8003438 <pack_telem_data+0x1dc8>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800329c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 3a90 	vmov	r3, s15
 80032a8:	141a      	asrs	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	33e0      	adds	r3, #224	; 0xe0
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]
	*(dst + 225) = TELEM_ITEM_225;
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <pack_telem_data+0x1dc8>)
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c4:	ee17 3a90 	vmov	r3, s15
 80032c8:	161a      	asrs	r2, r3, #24
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	33e1      	adds	r3, #225	; 0xe1
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
	*(dst + 226) = TELEM_ITEM_226;
 80032d2:	4b5a      	ldr	r3, [pc, #360]	; (800343c <pack_telem_data+0x1dcc>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	33e2      	adds	r3, #226	; 0xe2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
	*(dst + 227) = TELEM_ITEM_227;
 80032de:	4b57      	ldr	r3, [pc, #348]	; (800343c <pack_telem_data+0x1dcc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0a1a      	lsrs	r2, r3, #8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	33e3      	adds	r3, #227	; 0xe3
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
	*(dst + 228) = TELEM_ITEM_228;
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <pack_telem_data+0x1dcc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0c1a      	lsrs	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	33e4      	adds	r3, #228	; 0xe4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]
	*(dst + 229) = TELEM_ITEM_229;
 80032fa:	4b50      	ldr	r3, [pc, #320]	; (800343c <pack_telem_data+0x1dcc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e1a      	lsrs	r2, r3, #24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	33e5      	adds	r3, #229	; 0xe5
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
	*(dst + 230) = TELEM_ITEM_230;
 8003308:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <pack_telem_data+0x1dd0>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	33e6      	adds	r3, #230	; 0xe6
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
	*(dst + 231) = TELEM_ITEM_231;
 8003314:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <pack_telem_data+0x1dd0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0a1a      	lsrs	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	33e7      	adds	r3, #231	; 0xe7
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
	*(dst + 232) = TELEM_ITEM_232;
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <pack_telem_data+0x1dd0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0c1a      	lsrs	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	33e8      	adds	r3, #232	; 0xe8
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
	*(dst + 233) = TELEM_ITEM_233;
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <pack_telem_data+0x1dd0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e1a      	lsrs	r2, r3, #24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	33e9      	adds	r3, #233	; 0xe9
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
	*(dst + 234) = TELEM_ITEM_234;
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <pack_telem_data+0x1dd4>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	33ea      	adds	r3, #234	; 0xea
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
	*(dst + 235) = TELEM_ITEM_235;
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <pack_telem_data+0x1dd4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0a1a      	lsrs	r2, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	33eb      	adds	r3, #235	; 0xeb
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
	*(dst + 236) = TELEM_ITEM_236;
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <pack_telem_data+0x1dd4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0c1a      	lsrs	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	33ec      	adds	r3, #236	; 0xec
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
	*(dst + 237) = TELEM_ITEM_237;
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <pack_telem_data+0x1dd4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e1a      	lsrs	r2, r3, #24
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	33ed      	adds	r3, #237	; 0xed
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
	*(dst + 238) = TELEM_ITEM_238;
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <pack_telem_data+0x1dd8>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	33ee      	adds	r3, #238	; 0xee
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
	*(dst + 239) = TELEM_ITEM_239;
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <pack_telem_data+0x1dd8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	121a      	asrs	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	33ef      	adds	r3, #239	; 0xef
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
	*(dst + 240) = TELEM_ITEM_240;
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <pack_telem_data+0x1dd8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	141a      	asrs	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	33f0      	adds	r3, #240	; 0xf0
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
	*(dst + 241) = TELEM_ITEM_241;
 800339c:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <pack_telem_data+0x1dd8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	161a      	asrs	r2, r3, #24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	33f1      	adds	r3, #241	; 0xf1
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
	*(dst + 242) = TELEM_ITEM_242;
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <pack_telem_data+0x1ddc>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	33f2      	adds	r3, #242	; 0xf2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
	*(dst + 243) = TELEM_ITEM_243;
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <pack_telem_data+0x1ddc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0a1a      	lsrs	r2, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	33f3      	adds	r3, #243	; 0xf3
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
	*(dst + 244) = TELEM_ITEM_244;
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <pack_telem_data+0x1ddc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	0c1a      	lsrs	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	33f4      	adds	r3, #244	; 0xf4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]
	*(dst + 245) = TELEM_ITEM_245;
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <pack_telem_data+0x1ddc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e1a      	lsrs	r2, r3, #24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	33f5      	adds	r3, #245	; 0xf5
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
	*(dst + 246) = TELEM_ITEM_246;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <pack_telem_data+0x1de0>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	33f6      	adds	r3, #246	; 0xf6
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]
	*(dst + 247) = TELEM_ITEM_247;
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <pack_telem_data+0x1de0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0a1a      	lsrs	r2, r3, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	33f7      	adds	r3, #247	; 0xf7
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]
	*(dst + 248) = TELEM_ITEM_248;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <pack_telem_data+0x1de0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0c1a      	lsrs	r2, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	33f8      	adds	r3, #248	; 0xf8
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]
	*(dst + 249) = TELEM_ITEM_249;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <pack_telem_data+0x1de0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e1a      	lsrs	r2, r3, #24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	33f9      	adds	r3, #249	; 0xf9
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
	*(dst + 250) = TELEM_ITEM_250;
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <pack_telem_data+0x1de4>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	33fa      	adds	r3, #250	; 0xfa
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]
	*(dst + 251) = TELEM_ITEM_251;
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <pack_telem_data+0x1de4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0a1a      	lsrs	r2, r3, #8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	33fb      	adds	r3, #251	; 0xfb
 800342c:	e014      	b.n	8003458 <pack_telem_data+0x1de8>
 800342e:	bf00      	nop
 8003430:	20000050 	.word	0x20000050
 8003434:	20000054 	.word	0x20000054
 8003438:	20000058 	.word	0x20000058
 800343c:	2000005c 	.word	0x2000005c
 8003440:	20000060 	.word	0x20000060
 8003444:	20000064 	.word	0x20000064
 8003448:	20000068 	.word	0x20000068
 800344c:	2000006c 	.word	0x2000006c
 8003450:	20000070 	.word	0x20000070
 8003454:	20000074 	.word	0x20000074
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
	*(dst + 252) = TELEM_ITEM_252;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <pack_telem_data+0x1e20>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0c1a      	lsrs	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	33fc      	adds	r3, #252	; 0xfc
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
	*(dst + 253) = TELEM_ITEM_253;
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <pack_telem_data+0x1e20>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0e1a      	lsrs	r2, r3, #24
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	33fd      	adds	r3, #253	; 0xfd
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
	*(dst + 254) = TELEM_ITEM_254;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	33fe      	adds	r3, #254	; 0xfe
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <pack_telem_data+0x1e24>)
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000074 	.word	0x20000074
 8003494:	20000078 	.word	0x20000078

08003498 <sensor_voting_algorithm>:
 *
 * Go ahead and rewrite the function implementation to actually
 * use a voting algorithm.
 */
float sensor_voting_algorithm(float input_A, float input_B, float input_C,
		Voting_Alg_Config* config) {
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	ed87 0a03 	vstr	s0, [r7, #12]
 80034a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80034a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80034aa:	6038      	str	r0, [r7, #0]
	return (input_A + input_B + input_C) / 3.0F;
 80034ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80034b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80034c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80034cc:	eeb0 0a67 	vmov.f32	s0, s15
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <init_thermocouples>:
void tc_mux_chip_release() {
	// Active low, will set all mux outputs to 1
	HAL_GPIO_WritePin(TC_MUX_EN_GPIO_Port, TC_MUX_EN_Pin, 1);
}

void init_thermocouples() {
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0

}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <read_thermocouples>:


void read_thermocouples() {
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <init_adcs>:


void init_adcs() {
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0

}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <read_adc_counts>:


void read_adc_counts() {
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0

}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <convert_adc_counts>:


void convert_adc_counts() {
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0

}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <resolve_redundant_sensors>:


void resolve_redundant_sensors() {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	// TODO: fill out configs when they're ready
	Voting_Alg_Config lox_voting_config;
	Voting_Alg_Config fuel_voting_config;
	Voting_Alg_Config copv_voting_config;

	lox_control_pressure = sensor_voting_algorithm(pressure[LOX_TANK_A_PRES_CH],
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003526:	edd3 7a04 	vldr	s15, [r3, #16]
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <resolve_redundant_sensors+0x94>)
 800352c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003532:	edd3 6a06 	vldr	s13, [r3, #24]
 8003536:	4638      	mov	r0, r7
 8003538:	eeb0 1a66 	vmov.f32	s2, s13
 800353c:	eef0 0a47 	vmov.f32	s1, s14
 8003540:	eeb0 0a67 	vmov.f32	s0, s15
 8003544:	f7ff ffa8 	bl	8003498 <sensor_voting_algorithm>
 8003548:	eef0 7a40 	vmov.f32	s15, s0
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <resolve_redundant_sensors+0x98>)
 800354e:	edc3 7a00 	vstr	s15, [r3]
			pressure[LOX_TANK_B_PRES_CH], pressure[LOX_TANK_C_PRES_CH],
			&lox_voting_config);
	fuel_control_pressure = sensor_voting_algorithm(pressure[FUEL_TANK_A_PRES_CH],
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003554:	edd3 7a08 	vldr	s15, [r3, #32]
 8003558:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <resolve_redundant_sensors+0x94>)
 800355a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003560:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003564:	4638      	mov	r0, r7
 8003566:	eeb0 1a66 	vmov.f32	s2, s13
 800356a:	eef0 0a47 	vmov.f32	s1, s14
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	f7ff ff91 	bl	8003498 <sensor_voting_algorithm>
 8003576:	eef0 7a40 	vmov.f32	s15, s0
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <resolve_redundant_sensors+0x9c>)
 800357c:	edc3 7a00 	vstr	s15, [r3]
			pressure[FUEL_TANK_B_PRES_CH], pressure[FUEL_TANK_C_PRES_CH],
			&fuel_voting_config);
	copv_control_pressure = sensor_voting_algorithm(pressure[COPV_A_PRES_CH],
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003582:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <resolve_redundant_sensors+0x94>)
 8003588:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <resolve_redundant_sensors+0x94>)
 800358e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003592:	4638      	mov	r0, r7
 8003594:	eeb0 1a66 	vmov.f32	s2, s13
 8003598:	eef0 0a47 	vmov.f32	s1, s14
 800359c:	eeb0 0a67 	vmov.f32	s0, s15
 80035a0:	f7ff ff7a 	bl	8003498 <sensor_voting_algorithm>
 80035a4:	eef0 7a40 	vmov.f32	s15, s0
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <resolve_redundant_sensors+0xa0>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
			pressure[COPV_B_PRES_CH], pressure[COPV_C_PRES_CH],
			&copv_voting_config);
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000088 	.word	0x20000088
 80035b8:	20000050 	.word	0x20000050
 80035bc:	20000054 	.word	0x20000054
 80035c0:	20000058 	.word	0x20000058

080035c4 <init_serial_data>:

W25N01GV_Flash flash;
uint8_t telem_disabled = 0;


void init_serial_data() {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 80035c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035cc:	4a03      	ldr	r2, [pc, #12]	; (80035dc <init_serial_data+0x18>)
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <init_serial_data+0x1c>)
 80035d0:	4804      	ldr	r0, [pc, #16]	; (80035e4 <init_serial_data+0x20>)
 80035d2:	f001 fa6f 	bl	8004ab4 <init_flash>
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40020800 	.word	0x40020800
 80035e0:	200003ec 	.word	0x200003ec
 80035e4:	20000444 	.word	0x20000444

080035e8 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
	header->origin_addr = FLIGHT_EC_ADDR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	70da      	strb	r2, [r3, #3]
	header->do_cobbs = 1; // enable COBS
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	715a      	strb	r2, [r3, #5]
	header->timestamp = SYS_MICROS;
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <init_packet_header+0x40>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000274 	.word	0x20000274

0800362c <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 8003636:	79fa      	ldrb	r2, [r7, #7]
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ffd2 	bl	80035e8 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	461a      	mov	r2, r3
 800364a:	f04f 31ff 	mov.w	r1, #4294967295
 800364e:	2000      	movs	r0, #0
 8003650:	f000 fbe6 	bl	8003e20 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <send_telem_packet+0x40>)
 8003656:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fc0a 	bl	8003e78 <send_data>
}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000035c 	.word	0x2000035c

08003670 <save_flash_packet>:

void save_flash_packet() {
 8003670:	b580      	push	{r7, lr}
 8003672:	b0c8      	sub	sp, #288	; 0x120
 8003674:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 8003676:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800367a:	2107      	movs	r1, #7
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ffb3 	bl	80035e8 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 8003682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003686:	461a      	mov	r2, r3
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	2000      	movs	r0, #0
 800368e:	f000 fbc7 	bl	8003e20 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 8003692:	f107 0310 	add.w	r3, r7, #16
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	3304      	adds	r3, #4
 800369c:	22f9      	movs	r2, #249	; 0xf9
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 fdd1 	bl	8008248 <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	2200      	movs	r2, #0
 80036aa:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 80036ac:	1d3b      	adds	r3, r7, #4
 80036ae:	22fd      	movs	r2, #253	; 0xfd
 80036b0:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fbda 	bl	8003e78 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 80036ce:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80036d2:	f107 0310 	add.w	r3, r7, #16
 80036d6:	4619      	mov	r1, r3
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <save_flash_packet+0x78>)
 80036da:	f001 fada 	bl	8004c92 <write_to_flash>
}
 80036de:	bf00      	nop
 80036e0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000444 	.word	0x20000444

080036ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_MspInit+0x4c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <HAL_MspInit+0x4c>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_MspInit+0x4c>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_MspInit+0x4c>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_MspInit+0x4c>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_MspInit+0x4c>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_CAN_MspInit+0x84>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12c      	bne.n	80037b8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 8003768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_CAN_MspInit+0x88>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800379a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a4:	2303      	movs	r3, #3
 80037a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037a8:	2309      	movs	r3, #9
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ac:	f107 0314 	add.w	r3, r7, #20
 80037b0:	4619      	mov	r1, r3
 80037b2:	4805      	ldr	r0, [pc, #20]	; (80037c8 <HAL_CAN_MspInit+0x8c>)
 80037b4:	f001 fe64 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80037b8:	bf00      	nop
 80037ba:	3728      	adds	r7, #40	; 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40006400 	.word	0x40006400
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40020400 	.word	0x40020400

080037cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b090      	sub	sp, #64	; 0x40
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_SPI_MspInit+0x1b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d12c      	bne.n	8003848 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80037f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	4b5d      	ldr	r3, [pc, #372]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a5c      	ldr	r2, [pc, #368]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b5a      	ldr	r3, [pc, #360]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003826:	23e0      	movs	r3, #224	; 0xe0
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003836:	2305      	movs	r3, #5
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800383e:	4619      	mov	r1, r3
 8003840:	4851      	ldr	r0, [pc, #324]	; (8003988 <HAL_SPI_MspInit+0x1bc>)
 8003842:	f001 fe1d 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003846:	e096      	b.n	8003976 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_SPI_MspInit+0x1c0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12d      	bne.n	80038ae <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 800385c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a43      	ldr	r2, [pc, #268]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800388a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	2302      	movs	r3, #2
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003898:	2303      	movs	r3, #3
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800389c:	2305      	movs	r3, #5
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a4:	4619      	mov	r1, r3
 80038a6:	483a      	ldr	r0, [pc, #232]	; (8003990 <HAL_SPI_MspInit+0x1c4>)
 80038a8:	f001 fdea 	bl	8005480 <HAL_GPIO_Init>
}
 80038ac:	e063      	b.n	8003976 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a38      	ldr	r2, [pc, #224]	; (8003994 <HAL_SPI_MspInit+0x1c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d12d      	bne.n	8003914 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80038f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003902:	2306      	movs	r3, #6
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	4822      	ldr	r0, [pc, #136]	; (8003998 <HAL_SPI_MspInit+0x1cc>)
 800390e:	f001 fdb7 	bl	8005480 <HAL_GPIO_Init>
}
 8003912:	e030      	b.n	8003976 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_SPI_MspInit+0x1d0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12b      	bne.n	8003976 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_SPI_MspInit+0x1b8>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003956:	2364      	movs	r3, #100	; 0x64
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003966:	2305      	movs	r3, #5
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800396a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396e:	4619      	mov	r1, r3
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <HAL_SPI_MspInit+0x1d4>)
 8003972:	f001 fd85 	bl	8005480 <HAL_GPIO_Init>
}
 8003976:	bf00      	nop
 8003978:	3740      	adds	r7, #64	; 0x40
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40013000 	.word	0x40013000
 8003984:	40023800 	.word	0x40023800
 8003988:	40020000 	.word	0x40020000
 800398c:	40003800 	.word	0x40003800
 8003990:	40020400 	.word	0x40020400
 8003994:	40003c00 	.word	0x40003c00
 8003998:	40020800 	.word	0x40020800
 800399c:	40013400 	.word	0x40013400
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <HAL_TIM_Base_MspInit+0xb4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80039d2:	e03a      	b.n	8003a4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_TIM_Base_MspInit+0xbc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10e      	bne.n	80039fc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	6453      	str	r3, [r2, #68]	; 0x44
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
}
 80039fa:	e026      	b.n	8003a4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_Base_MspInit+0xc0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a14:	6453      	str	r3, [r2, #68]	; 0x44
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	e012      	b.n	8003a4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <HAL_TIM_Base_MspInit+0xc4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_TIM_Base_MspInit+0xb8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001c00 	.word	0x40001c00

08003a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_UART_MspInit+0x94>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d133      	bne.n	8003af6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_UART_MspInit+0x98>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ac6:	23c0      	movs	r3, #192	; 0xc0
 8003ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4809      	ldr	r0, [pc, #36]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003ae2:	f001 fccd 	bl	8005480 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2025      	movs	r0, #37	; 0x25
 8003aec:	f001 fbff 	bl	80052ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003af0:	2025      	movs	r0, #37	; 0x25
 8003af2:	f001 fc18 	bl	8005326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3728      	adds	r7, #40	; 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40011000 	.word	0x40011000
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020400 	.word	0x40020400

08003b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <NMI_Handler+0x4>

08003b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <HardFault_Handler+0x4>

08003b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <MemManage_Handler+0x4>

08003b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b22:	e7fe      	b.n	8003b22 <BusFault_Handler+0x4>

08003b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <UsageFault_Handler+0x4>

08003b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b58:	f001 f9d2 	bl	8004f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <USART1_IRQHandler+0x10>)
 8003b66:	f003 fe23 	bl	80077b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000035c 	.word	0x2000035c

08003b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <SystemInit+0x28>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <SystemInit+0x28>)
 8003b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <SystemInit+0x28>)
 8003b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <actuate_tank_motor_pos>:
/**
 * Small wrapper around motor actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_motor_pos(TPC_Info* tank, float motor_pos) {
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	ed87 0a00 	vstr	s0, [r7]
	if (tank->tank_enable) {
		// actuate motor to pos
	}
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
		}
		else {
			// depower valve
		}
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <tank_autopress_bang_bang>:

	// TODO:
}


void tank_autopress_bang_bang(TPC_Info* tank) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_low_pres_diff)) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 8003bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	d504      	bpl.n	8003c04 <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ffdb 	bl	8003bb8 <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8003c02:	e015      	b.n	8003c30 <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	ed93 7a00 	vldr	s14, [r3]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_high_pres_diff)) {
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 8003c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	dc00      	bgt.n	8003c28 <tank_autopress_bang_bang+0x58>
}
 8003c26:	e003      	b.n	8003c30 <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 8003c28:	2100      	movs	r1, #0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffc4 	bl	8003bb8 <actuate_tank_control_valve>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	; 0x38
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	float dt = tank->PID_ctrl_loop_period;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003c6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003c70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c86:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003c8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	tank->PID_prev_step_error = error;  // store for next D calculation
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

	// Apply gains
	float Kp_term = tank->K_p * error;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ca6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a08 	vstr	s15, [r7, #32]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
	float Kd_term = tank->K_d * slope;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003ccc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	edc7 7a06 	vstr	s15, [r7, #24]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8003cd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8003cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cec:	edc7 7a05 	vstr	s15, [r7, #20]
	// Limit output
	float motor_delta;
	// TODO: define these 2 motor variables somewhere, probably motor struct
	// TODO: change all these variable names when they get decided
	float motor_pos, max_motor_pos;
	float max_motor_delta = max_motor_pos - motor_pos;
 8003cf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	edc7 7a02 	vstr	s15, [r7, #8]
	if (PID_total_output < -motor_pos) {  // Lower bound
 8003d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d04:	eef1 7a67 	vneg.f32	s15, s15
 8003d08:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d14:	d506      	bpl.n	8003d24 <tank_PID_pressure_control+0xec>
		motor_delta = -motor_pos;
 8003d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1a:	eef1 7a67 	vneg.f32	s15, s15
 8003d1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003d22:	e010      	b.n	8003d46 <tank_PID_pressure_control+0x10e>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 8003d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d34:	dd02      	ble.n	8003d3c <tank_PID_pressure_control+0x104>
		motor_delta = max_motor_delta;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	e004      	b.n	8003d46 <tank_PID_pressure_control+0x10e>
	}
	else {
		motor_delta = PID_total_output;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// Actuate motor to new position
	actuate_tank_motor_pos(tank, motor_pos + motor_delta);
 8003d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff22 	bl	8003ba0 <actuate_tank_motor_pos>

	// Log data
	// TODO: should this go here, or in a different function?
	// Maybe just update some struct variables and log them later
}
 8003d5c:	bf00      	nop
 8003d5e:	3738      	adds	r7, #56	; 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->target_pres
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	ed93 7a00 	vldr	s14, [r3]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	edd3 6a04 	vldr	s13, [r3, #16]
    		* tank->PID_ctrl_vlv_low_pres_percent)) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (*(tank->control_pres) < (tank->target_pres
 8003d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d504      	bpl.n	8003d98 <tank_check_control_valve_threshold+0x34>
    	actuate_tank_control_valve(tank, 1);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff11 	bl	8003bb8 <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->target_pres
    		* tank->PID_ctrl_vlv_high_pres_percent)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8003d96:	e015      	b.n	8003dc4 <tank_check_control_valve_threshold+0x60>
    else if (*(tank->control_pres) > (tank->target_pres
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	ed93 7a00 	vldr	s14, [r3]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	edd3 6a04 	vldr	s13, [r3, #16]
    		* tank->PID_ctrl_vlv_high_pres_percent)) {
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	edd3 7a08 	vldr	s15, [r3, #32]
 8003dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    else if (*(tank->control_pres) > (tank->target_pres
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	dc00      	bgt.n	8003dbc <tank_check_control_valve_threshold+0x58>
}
 8003dba:	e003      	b.n	8003dc4 <tank_check_control_valve_threshold+0x60>
    	actuate_tank_control_valve(tank, 0);
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fefa 	bl	8003bb8 <actuate_tank_control_valve>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dd2:	e003      	b.n	8003ddc <LoopCopyDataInit>

08003dd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dda:	3104      	adds	r1, #4

08003ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003de0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003de2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003de4:	d3f6      	bcc.n	8003dd4 <CopyDataInit>
  ldr  r2, =_sbss
 8003de6:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003de8:	e002      	b.n	8003df0 <LoopFillZerobss>

08003dea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dec:	f842 3b04 	str.w	r3, [r2], #4

08003df0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003df2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003df4:	d3f9      	bcc.n	8003dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003df6:	f7ff febd 	bl	8003b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dfa:	f004 fa01 	bl	8008200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfe:	f7fd f803 	bl	8000e08 <main>
  bx  lr    
 8003e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e08:	080083a0 	.word	0x080083a0
  ldr  r0, =_sdata
 8003e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e10:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003e14:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003e18:	20000a8c 	.word	0x20000a8c

08003e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e1c:	e7fe      	b.n	8003e1c <ADC_IRQHandler>
	...

08003e20 <init_data>:
void init_board(uint8_t board_addr) {
    CLB_receive_header.num_packets = 0;
	CLB_board_addr = board_addr;
}

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 8003e2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d109      	bne.n	8003e4c <init_data+0x2c>
	    // repack CLB_telem_data
	    pack_telem_data(CLB_telem_data);
 8003e38:	480b      	ldr	r0, [pc, #44]	; (8003e68 <init_data+0x48>)
 8003e3a:	f7fd fc19 	bl	8001670 <pack_telem_data>
		CLB_buffer = CLB_telem_data;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <init_data+0x4c>)
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <init_data+0x48>)
 8003e42:	601a      	str	r2, [r3, #0]
		CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <init_data+0x50>)
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	e005      	b.n	8003e58 <init_data+0x38>
	} else {				// custom telem
		CLB_buffer = buffer;
 8003e4c:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <init_data+0x4c>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 8003e52:	897a      	ldrh	r2, [r7, #10]
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <init_data+0x50>)
 8003e56:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <init_data+0x54>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200008e4 	.word	0x200008e4
 8003e6c:	200006e0 	.word	0x200006e0
 8003e70:	200009e4 	.word	0x200009e4
 8003e74:	200009f4 	.word	0x200009f4

08003e78 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b08d      	sub	sp, #52	; 0x34
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 8003e8e:	2300      	movs	r3, #0
 8003e90:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 8003e92:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <send_data+0x1cc>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 8003e98:	2300      	movs	r3, #0
 8003e9a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 8003e9c:	23fd      	movs	r3, #253	; 0xfd
 8003e9e:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 8003eae:	4b66      	ldr	r3, [pc, #408]	; (8004048 <send_data+0x1d0>)
 8003eb0:	681c      	ldr	r4, [r3, #0]
 8003eb2:	f000 f957 	bl	8004164 <compute_checksum>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <send_data+0x1d0>)
 8003ebc:	681c      	ldr	r4, [r3, #0]
 8003ebe:	f000 f95b 	bl	8004178 <compute_packet_sz>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 8003ec6:	4b60      	ldr	r3, [pc, #384]	; (8004048 <send_data+0x1d0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f107 0208 	add.w	r2, r7, #8
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f8d5 	bl	8004080 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 8003ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed8:	4a5c      	ldr	r2, [pc, #368]	; (800404c <send_data+0x1d4>)
 8003eda:	1899      	adds	r1, r3, r2
 8003edc:	f107 0308 	add.w	r3, r7, #8
 8003ee0:	220c      	movs	r2, #12
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f91d 	bl	8004122 <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 8003ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eea:	330c      	adds	r3, #12
 8003eec:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 8003ef4:	e08c      	b.n	8004010 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 8003ef6:	8bfa      	ldrh	r2, [r7, #30]
 8003ef8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 8003efe:	8bba      	ldrh	r2, [r7, #28]
 8003f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 8003f06:	8b7a      	ldrh	r2, [r7, #26]
 8003f08:	8b3b      	ldrh	r3, [r7, #24]
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bf28      	it	cs
 8003f0e:	4613      	movcs	r3, r2
 8003f10:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 8003f12:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <send_data+0x1d8>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f18:	18d0      	adds	r0, r2, r3
 8003f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	; (800404c <send_data+0x1d4>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	8afa      	ldrh	r2, [r7, #22]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f000 f8fd 	bl	8004122 <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8003f28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8003f30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f32:	8afb      	ldrh	r3, [r7, #22]
 8003f34:	4413      	add	r3, r2
 8003f36:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d121      	bne.n	8003f86 <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8003f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f44:	461a      	mov	r2, r3
 8003f46:	4943      	ldr	r1, [pc, #268]	; (8004054 <send_data+0x1dc>)
 8003f48:	4840      	ldr	r0, [pc, #256]	; (800404c <send_data+0x1d4>)
 8003f4a:	f000 f943 	bl	80041d4 <stuff_packet>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 8003f52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f54:	8bfb      	ldrh	r3, [r7, #30]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10d      	bne.n	8003f76 <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 8003f5a:	8c3b      	ldrh	r3, [r7, #32]
 8003f5c:	2bfe      	cmp	r3, #254	; 0xfe
 8003f5e:	d807      	bhi.n	8003f70 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8003f60:	8c3b      	ldrh	r3, [r7, #32]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	843a      	strh	r2, [r7, #32]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b3a      	ldr	r3, [pc, #232]	; (8004054 <send_data+0x1dc>)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]
 8003f6e:	e002      	b.n	8003f76 <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	8c3a      	ldrh	r2, [r7, #32]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f86a 	bl	8004058 <transmit_packet>
 8003f84:	e03e      	b.n	8004004 <send_data+0x18c>
		} else if (type == CLB_Flash) {
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d13b      	bne.n	8004004 <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	4413      	add	r3, r2
 8003f94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f96:	4619      	mov	r1, r3
 8003f98:	482c      	ldr	r0, [pc, #176]	; (800404c <send_data+0x1d4>)
 8003f9a:	f000 f91b 	bl	80041d4 <stuff_packet>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 8003fa2:	8c3b      	ldrh	r3, [r7, #32]
 8003fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa6:	4413      	add	r3, r2
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	8c3b      	ldrh	r3, [r7, #32]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 8003fbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fc0:	8bfb      	ldrh	r3, [r7, #30]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d115      	bne.n	8003ff2 <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 8003fc6:	8c3b      	ldrh	r3, [r7, #32]
 8003fc8:	2bfe      	cmp	r3, #254	; 0xfe
 8003fca:	d80f      	bhi.n	8003fec <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8003fd6:	b28a      	uxth	r2, r1
 8003fd8:	3201      	adds	r2, #1
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	b210      	sxth	r0, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	80d0      	strh	r0, [r2, #6]
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	4413      	add	r3, r2
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da03      	bge.n	8004004 <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004002:	e00b      	b.n	800401c <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 8004004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004006:	8bbb      	ldrh	r3, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d301      	bcc.n	8004010 <send_data+0x198>
			ping_pos = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <send_data+0x1cc>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004016:	429a      	cmp	r2, r3
 8004018:	f4ff af6d 	bcc.w	8003ef6 <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <send_data+0x1dc>)
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f811 	bl	8004058 <transmit_packet>
	}

	return status; // TODO: return better error handling
 8004036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800403a:	4618      	mov	r0, r3
 800403c:	3734      	adds	r7, #52	; 0x34
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	bf00      	nop
 8004044:	200009e4 	.word	0x200009e4
 8004048:	200009f4 	.word	0x200009f4
 800404c:	200007e4 	.word	0x200007e4
 8004050:	200006e0 	.word	0x200006e0
 8004054:	200006e4 	.word	0x200006e4

08004058 <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 8004064:	887a      	ldrh	r2, [r7, #2]
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	4904      	ldr	r1, [pc, #16]	; (800407c <transmit_packet+0x24>)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f003 fb0c 	bl	800768a <HAL_UART_Transmit>
//	__enable_irq();
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200006e4 	.word	0x200006e4

08004080 <pack_header>:
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
	                        header_buffer[10]<<8|header_buffer[11];
}

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	7852      	ldrb	r2, [r2, #1]
 800409a:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	3302      	adds	r3, #2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	7892      	ldrb	r2, [r2, #2]
 80040a4:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	3303      	adds	r3, #3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	78d2      	ldrb	r2, [r2, #3]
 80040ae:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	7912      	ldrb	r2, [r2, #4]
 80040b8:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	3305      	adds	r3, #5
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	7952      	ldrb	r2, [r2, #5]
 80040c2:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	88da      	ldrh	r2, [r3, #6]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	3306      	adds	r3, #6
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	88db      	ldrh	r3, [r3, #6]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	3307      	adds	r3, #7
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	0a1a      	lsrs	r2, r3, #8
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3309      	adds	r3, #9
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0c1a      	lsrs	r2, r3, #16
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	330a      	adds	r3, #10
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	0e1a      	lsrs	r2, r3, #24
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	330b      	adds	r3, #11
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	4613      	mov	r3, r2
 800412e:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 800413c:	e007      	b.n	800414e <pack_packet+0x2c>
		*dst++ = *curr++;
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	1c53      	adds	r3, r2, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	429a      	cmp	r2, r3
 8004154:	d1f3      	bne.n	800413e <pack_packet+0x1c>
	}
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <compute_checksum>:
uint8_t verify_checksum(uint16_t checksum) {
	// TODO: Implement checksum checking procedure
	return 0;
}

uint16_t compute_checksum() {
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	0000      	movs	r0, r0
	...

08004178 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <compute_packet_sz+0x58>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	330d      	adds	r3, #13
 8004184:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f98f 	bl	80004ac <__aeabi_i2d>
 800418e:	a30e      	add	r3, pc, #56	; (adr r3, 80041c8 <compute_packet_sz+0x50>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fb1e 	bl	80007d4 <__aeabi_ddiv>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b17 	vmov	d7, r2, r3
 80041a0:	eeb0 0a47 	vmov.f32	s0, s14
 80041a4:	eef0 0a67 	vmov.f32	s1, s15
 80041a8:	f004 f856 	bl	8008258 <ceil>
 80041ac:	ec53 2b10 	vmov	r2, r3, d0
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7fc fc7e 	bl	8000ab4 <__aeabi_d2uiz>
 80041b8:	4603      	mov	r3, r0
 80041ba:	717b      	strb	r3, [r7, #5]
    return num_packets;
 80041bc:	797b      	ldrb	r3, [r7, #5]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	00000000 	.word	0x00000000
 80041cc:	406fe000 	.word	0x406fe000
 80041d0:	200009e4 	.word	0x200009e4

080041d4 <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 80041e6:	4b2d      	ldr	r3, [pc, #180]	; (800429c <stuff_packet+0xc8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	795b      	ldrb	r3, [r3, #5]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d038      	beq.n	8004262 <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	60ba      	str	r2, [r7, #8]
 80041f6:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
        while (length--)
 80041fe:	e02a      	b.n	8004256 <stuff_packet+0x82>
        {
            if (*unstuffed) {
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	1c53      	adds	r3, r2, #1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1c59      	adds	r1, r3, #1
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e009      	b.n	800423a <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	60ba      	str	r2, [r7, #8]
 800422c:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2bff      	cmp	r3, #255	; 0xff
 8004240:	d109      	bne.n	8004256 <stuff_packet+0x82>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
        while (length--)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	80fa      	strh	r2, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1cf      	bne.n	8004200 <stuff_packet+0x2c>
 8004260:	e011      	b.n	8004286 <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 8004262:	2300      	movs	r3, #0
 8004264:	837b      	strh	r3, [r7, #26]
 8004266:	e00a      	b.n	800427e <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	1c53      	adds	r3, r2, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8004278:	8b7b      	ldrh	r3, [r7, #26]
 800427a:	3301      	adds	r3, #1
 800427c:	837b      	strh	r3, [r7, #26]
 800427e:	8b7a      	ldrh	r2, [r7, #26]
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	429a      	cmp	r2, r3
 8004284:	d3f0      	bcc.n	8004268 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b29b      	uxth	r3, r3
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	200009f4 	.word	0x200009f4

080042a0 <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ae:	b672      	cpsid	i
}
 80042b0:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80042be:	2200      	movs	r2, #0
 80042c0:	4619      	mov	r1, r3
 80042c2:	f001 fa71 	bl	80057a8 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	23ff      	movs	r3, #255	; 0xff
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	f002 f8cc 	bl	800646e <HAL_SPI_Transmit>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80042ec:	2201      	movs	r2, #1
 80042ee:	4619      	mov	r1, r3
 80042f0:	f001 fa5a 	bl	80057a8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80042f4:	b662      	cpsie	i
}
 80042f6:	bf00      	nop
	__enable_irq();

}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8004310:	b672      	cpsid	i
}
 8004312:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8004320:	2200      	movs	r2, #0
 8004322:	4619      	mov	r1, r3
 8004324:	f001 fa40 	bl	80057a8 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	23ff      	movs	r3, #255	; 0xff
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	f002 f89b 	bl	800646e <HAL_SPI_Transmit>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8004348:	8b3a      	ldrh	r2, [r7, #24]
 800434a:	23ff      	movs	r3, #255	; 0xff
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	f002 f9ca 	bl	80066e6 <HAL_SPI_Receive>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8004368:	2201      	movs	r2, #1
 800436a:	4619      	mov	r1, r3
 800436c:	f001 fa1c 	bl	80057a8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8004370:	b662      	cpsie	i
}
 8004372:	bf00      	nop
	__enable_irq();

}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8004388:	230f      	movs	r3, #15
 800438a:	733b      	strb	r3, [r7, #12]
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	f107 010c 	add.w	r1, r7, #12
 8004398:	2201      	movs	r2, #1
 800439a:	9200      	str	r2, [sp, #0]
 800439c:	2202      	movs	r2, #2
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ffae 	bl	8004300 <spi_transmit_receive>

	return *rx;
 80043a4:	7a3b      	ldrb	r3, [r7, #8]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80043b6:	21c0      	movs	r1, #192	; 0xc0
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ffdf 	bl	800437c <read_status_register>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 80043e0:	e002      	b.n	80043e8 <wait_for_operation+0x16>
		++count;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffe0 	bl	80043ae <flash_is_busy>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <wait_for_operation+0x34>
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4293      	cmp	r3, r2
 8004404:	d3ed      	bcc.n	80043e2 <wait_for_operation+0x10>
	}
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	70fb      	strb	r3, [r7, #3]
 800441a:	4613      	mov	r3, r2
 800441c:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 800441e:	231f      	movs	r3, #31
 8004420:	733b      	strb	r3, [r7, #12]
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	737b      	strb	r3, [r7, #13]
 8004426:	78bb      	ldrb	r3, [r7, #2]
 8004428:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	2203      	movs	r2, #3
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ff34 	bl	80042a0 <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8004438:	2132      	movs	r1, #50	; 0x32
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ffc9 	bl	80043d2 <wait_for_operation>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	b29b      	uxth	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	733b      	strb	r3, [r7, #12]
 800445e:	887b      	ldrh	r3, [r7, #2]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8004464:	2313      	movs	r3, #19
 8004466:	723b      	strb	r3, [r7, #8]
 8004468:	2300      	movs	r3, #0
 800446a:	727b      	strb	r3, [r7, #9]
 800446c:	7b3b      	ldrb	r3, [r7, #12]
 800446e:	72bb      	strb	r3, [r7, #10]
 8004470:	7b7b      	ldrb	r3, [r7, #13]
 8004472:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	2204      	movs	r2, #4
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff0f 	bl	80042a0 <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8004482:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffa3 	bl	80043d2 <wait_for_operation>
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 800449c:	21a0      	movs	r1, #160	; 0xa0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ff6c 	bl	800437c <read_status_register>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80044ae:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 80044b0:	7bbb      	ldrb	r3, [r7, #14]
 80044b2:	461a      	mov	r2, r3
 80044b4:	21a0      	movs	r1, #160	; 0xa0
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffa9 	bl	800440e <write_status_register>
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 80044cc:	21a0      	movs	r1, #160	; 0xa0
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff54 	bl	800437c <read_status_register>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80044de:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044e6:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	461a      	mov	r2, r3
 80044ec:	21a0      	movs	r1, #160	; 0xa0
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ff8d 	bl	800440e <write_status_register>
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8004504:	2306      	movs	r3, #6
 8004506:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	2201      	movs	r2, #1
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fec5 	bl	80042a0 <spi_transmit>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8004526:	2304      	movs	r3, #4
 8004528:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	2201      	movs	r2, #1
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff feb4 	bl	80042a0 <spi_transmit>
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	460b      	mov	r3, r1
 8004550:	80fb      	strh	r3, [r7, #6]
 8004552:	4613      	mov	r3, r2
 8004554:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8004556:	88bb      	ldrh	r3, [r7, #4]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	b29b      	uxth	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	753b      	strb	r3, [r7, #20]
 8004560:	88bb      	ldrh	r3, [r7, #4]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8004566:	2302      	movs	r3, #2
 8004568:	743b      	strb	r3, [r7, #16]
 800456a:	7d3b      	ldrb	r3, [r7, #20]
 800456c:	747b      	strb	r3, [r7, #17]
 800456e:	7d7b      	ldrb	r3, [r7, #21]
 8004570:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d902      	bls.n	8004580 <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 800457a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800457e:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8004580:	b672      	cpsid	i
}
 8004582:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8004590:	2200      	movs	r2, #0
 8004592:	4619      	mov	r1, r3
 8004594:	f001 f908 	bl	80057a8 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800459e:	f107 0110 	add.w	r1, r7, #16
 80045a2:	23ff      	movs	r3, #255	; 0xff
 80045a4:	2203      	movs	r2, #3
 80045a6:	f001 ff62 	bl	800646e <HAL_SPI_Transmit>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	23ff      	movs	r3, #255	; 0xff
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	f001 ff55 	bl	800646e <HAL_SPI_Transmit>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80045da:	2201      	movs	r2, #1
 80045dc:	4619      	mov	r1, r3
 80045de:	f001 f8e3 	bl	80057a8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80045e2:	b662      	cpsie	i
}
 80045e4:	bf00      	nop
	__enable_irq();
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	733b      	strb	r3, [r7, #12]
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 800460c:	2310      	movs	r3, #16
 800460e:	723b      	strb	r3, [r7, #8]
 8004610:	2300      	movs	r3, #0
 8004612:	727b      	strb	r3, [r7, #9]
 8004614:	7b3b      	ldrb	r3, [r7, #12]
 8004616:	72bb      	strb	r3, [r7, #10]
 8004618:	7b7b      	ldrb	r3, [r7, #13]
 800461a:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	2204      	movs	r2, #4
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fe3b 	bl	80042a0 <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 800462a:	4904      	ldr	r1, [pc, #16]	; (800463c <program_buffer_to_memory+0x4c>)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fed0 	bl	80043d2 <wait_for_operation>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	000aae60 	.word	0x000aae60

08004640 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fa6a 	bl	8004b22 <ping_flash>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8004654:	21c0      	movs	r1, #192	; 0xc0
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fe90 	bl	800437c <read_status_register>
 800465c:	4603      	mov	r3, r0
 800465e:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	b2da      	uxtb	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 800466e:	e003      	b.n	8004678 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2208      	movs	r2, #8
 8004674:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa47 	bl	8004b22 <ping_flash>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d033      	beq.n	8004702 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 800469a:	21c0      	movs	r1, #192	; 0xc0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fe6d 	bl	800437c <read_status_register>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <get_ECC_status+0x46>
 80046bc:	7b7b      	ldrb	r3, [r7, #13]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80046ca:	e01f      	b.n	800470c <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 80046cc:	7bbb      	ldrb	r3, [r7, #14]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <get_ECC_status+0x5c>
 80046d2:	7b7b      	ldrb	r3, [r7, #13]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80046e0:	e014      	b.n	800470c <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 80046e2:	7bbb      	ldrb	r3, [r7, #14]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <get_ECC_status+0x72>
 80046e8:	7b7b      	ldrb	r3, [r7, #13]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80046f6:	e009      	b.n	800470c <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2203      	movs	r2, #3
 80046fc:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8004700:	e004      	b.n	800470c <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2204      	movs	r2, #4
 8004706:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 800470a:	e7ff      	b.n	800470c <get_ECC_status+0x86>
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	460b      	mov	r3, r1
 8004724:	80fb      	strh	r3, [r7, #6]
 8004726:	4613      	mov	r3, r2
 8004728:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 800472a:	88bb      	ldrh	r3, [r7, #4]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	b29b      	uxth	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	753b      	strb	r3, [r7, #20]
 8004734:	88bb      	ldrh	r3, [r7, #4]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 800473a:	2303      	movs	r3, #3
 800473c:	743b      	strb	r3, [r7, #16]
 800473e:	7d3b      	ldrb	r3, [r7, #20]
 8004740:	747b      	strb	r3, [r7, #17]
 8004742:	7d7b      	ldrb	r3, [r7, #21]
 8004744:	74bb      	strb	r3, [r7, #18]
 8004746:	2300      	movs	r3, #0
 8004748:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2204      	movs	r2, #4
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff fdd2 	bl	8004300 <spi_transmit_receive>
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	4611      	mov	r1, r2
 8004770:	461a      	mov	r2, r3
 8004772:	460b      	mov	r3, r1
 8004774:	80fb      	strh	r3, [r7, #6]
 8004776:	4613      	mov	r3, r2
 8004778:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 800477a:	88bb      	ldrh	r3, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff fe62 	bl	8004448 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8004784:	8b3b      	ldrh	r3, [r7, #24]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff ffc2 	bl	8004714 <read_flash_buffer>

	get_ECC_status(flash);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff ff78 	bl	8004686 <get_ECC_status>
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	4611      	mov	r1, r2
 80047aa:	461a      	mov	r2, r3
 80047ac:	460b      	mov	r3, r1
 80047ae:	80fb      	strh	r3, [r7, #6]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fea1 	bl	80044fc <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 80047ba:	8b3b      	ldrh	r3, [r7, #24]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff febd 	bl	8004540 <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 80047c6:	88bb      	ldrh	r3, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff10 	bl	80045f0 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fea4 	bl	800451e <disable_write>

	get_write_failure_status(flash);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff ff32 	bl	8004640 <get_write_failure_status>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 80047ec:	21b0      	movs	r1, #176	; 0xb0
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fdc4 	bl	800437c <read_status_register>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	f043 0310 	orr.w	r3, r3, #16
 80047fe:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8004800:	7bba      	ldrb	r2, [r7, #14]
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	429a      	cmp	r2, r3
 8004806:	d005      	beq.n	8004814 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8004808:	7bbb      	ldrb	r3, [r7, #14]
 800480a:	461a      	mov	r2, r3
 800480c:	21b0      	movs	r1, #176	; 0xb0
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fdfd 	bl	800440e <write_status_register>
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8004824:	21b0      	movs	r1, #176	; 0xb0
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fda8 	bl	800437c <read_status_register>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	f043 0308 	orr.w	r3, r3, #8
 8004836:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8004838:	7bba      	ldrb	r2, [r7, #14]
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	429a      	cmp	r2, r3
 800483e:	d005      	beq.n	800484c <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	461a      	mov	r2, r3
 8004844:	21b0      	movs	r1, #176	; 0xb0
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff fde1 	bl	800440e <write_status_register>
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8004854:	b580      	push	{r7, lr}
 8004856:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 800485a:	af02      	add	r7, sp, #8
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 8004860:	f107 0108 	add.w	r1, r7, #8
 8004864:	1d38      	adds	r0, r7, #4
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004870:	6800      	ldr	r0, [r0, #0]
 8004872:	f7ff ff77 	bl	8004764 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 800487c:	2300      	movs	r3, #0
 800487e:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8004882:	e00e      	b.n	80048a2 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 8004884:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8004888:	f107 0208 	add.w	r2, r7, #8
 800488c:	5cd3      	ldrb	r3, [r2, r3]
 800488e:	2bff      	cmp	r3, #255	; 0xff
 8004890:	d002      	beq.n	8004898 <find_write_ptr+0x44>
			first_page_empty = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8004898:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800489c:	3301      	adds	r3, #1
 800489e:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80048a2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048aa:	d3eb      	bcc.n	8004884 <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 80048ac:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <find_write_ptr+0x76>
		flash->current_page = 0;
 80048b4:	1d3b      	adds	r3, r7, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80048c8:	e0f0      	b.n	8004aac <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 80048d0:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80048d4:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80048d8:	e041      	b.n	800495e <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 80048da:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80048de:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 80048f4:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80048f8:	f107 0108 	add.w	r1, r7, #8
 80048fc:	1d38      	adds	r0, r7, #4
 80048fe:	2200      	movs	r2, #0
 8004900:	9200      	str	r2, [sp, #0]
 8004902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004906:	6800      	ldr	r0, [r0, #0]
 8004908:	f7ff ff2c 	bl	8004764 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8004912:	2300      	movs	r3, #0
 8004914:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8004918:	e00f      	b.n	800493a <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 800491a:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800491e:	f107 0208 	add.w	r2, r7, #8
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	2bff      	cmp	r3, #255	; 0xff
 8004926:	d003      	beq.n	8004930 <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 800492e:	e009      	b.n	8004944 <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 8004930:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8004934:	3301      	adds	r3, #1
 8004936:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 800493a:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004942:	d3ea      	bcc.n	800491a <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8004944:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <find_write_ptr+0x102>
			max = cur_search_page;
 800494c:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8004950:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8004954:	e003      	b.n	800495e <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8004956:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800495a:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 800495e:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8004962:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d8b6      	bhi.n	80048da <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 800496c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8004970:	b29a      	uxth	r2, r3
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8004982:	f107 0108 	add.w	r1, r7, #8
 8004986:	1d38      	adds	r0, r7, #4
 8004988:	2200      	movs	r2, #0
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004990:	6800      	ldr	r0, [r0, #0]
 8004992:	f7ff fee7 	bl	8004764 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 800499e:	2bff      	cmp	r3, #255	; 0xff
 80049a0:	d01e      	beq.n	80049e0 <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80049aa:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d106      	bne.n	80049c0 <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ba:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 80049be:	e075      	b.n	8004aac <find_write_ptr+0x258>
			flash->current_page++;
 80049c0:	1d3b      	adds	r3, r7, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80049c8:	3301      	adds	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 80049d4:	1d3b      	adds	r3, r7, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80049de:	e065      	b.n	8004aac <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 80049e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80049ea:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80049ee:	e019      	b.n	8004a24 <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 80049f0:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80049f4:	f107 0208 	add.w	r2, r7, #8
 80049f8:	5cd3      	ldrb	r3, [r2, r3]
 80049fa:	2bff      	cmp	r3, #255	; 0xff
 80049fc:	d00b      	beq.n	8004a16 <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 80049fe:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8004a02:	3301      	adds	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	1d3b      	adds	r3, r7, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8004a14:	e00a      	b.n	8004a2c <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8004a16:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8004a24:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dae1      	bge.n	80049f0 <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 8004a2c:	1d3b      	adds	r3, r7, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d806      	bhi.n	8004a48 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8004a3a:	1d3b      	adds	r3, r7, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a42:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8004a46:	e031      	b.n	8004aac <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d806      	bhi.n	8004a64 <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5e:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8004a62:	e023      	b.n	8004aac <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004a6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a70:	d806      	bhi.n	8004a80 <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a7a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8004a7e:	e015      	b.n	8004aac <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8c:	d20e      	bcs.n	8004aac <find_write_ptr+0x258>
		flash->next_free_column = 0;
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 8004a98:	1d3b      	adds	r3, r7, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 8004aac:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f836 	bl	8004b74 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fe6b 	bl	80047e4 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff fe84 	bl	800481c <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff fe9d 	bl	8004854 <find_write_ptr>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8004b2a:	239f      	movs	r3, #159	; 0x9f
 8004b2c:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	f107 0110 	add.w	r1, r7, #16
 8004b36:	2203      	movs	r2, #3
 8004b38:	9200      	str	r2, [sp, #0]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fbdf 	bl	8004300 <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8004b42:	7b3b      	ldrb	r3, [r7, #12]
 8004b44:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	7bbb      	ldrb	r3, [r7, #14]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2bef      	cmp	r3, #239	; 0xef
 8004b5a:	d106      	bne.n	8004b6a <ping_flash+0x48>
 8004b5c:	8abb      	ldrh	r3, [r7, #20]
 8004b5e:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <ping_flash+0x48>
		return 1;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <ping_flash+0x4a>
	else
		return 0;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fc16 	bl	80043ae <flash_is_busy>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <reset_flash+0x18>
		return 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e00d      	b.n	8004ba8 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8004b8c:	23ff      	movs	r3, #255	; 0xff
 8004b8e:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	2201      	movs	r2, #1
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fb81 	bl	80042a0 <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8004b9e:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <reset_flash+0x3c>)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fc16 	bl	80043d2 <wait_for_operation>

	return 1;
 8004ba6:	2301      	movs	r3, #1
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	0007a120 	.word	0x0007a120

08004bb4 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 8004bc8:	e05a      	b.n	8004c80 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8004bd6:	8a3a      	ldrh	r2, [r7, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004bde:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004be2:	429a      	cmp	r2, r3
 8004be4:	dd05      	ble.n	8004bf2 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004bec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004bf0:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	18d1      	adds	r1, r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004c04:	8a3a      	ldrh	r2, [r7, #16]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4603      	mov	r3, r0
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fdc7 	bl	800479e <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <write_to_flash_contiguous+0x6c>
			write_failures++;
 8004c1a:	8a7b      	ldrh	r3, [r7, #18]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8004c20:	8a3b      	ldrh	r3, [r7, #16]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8004c2e:	461a      	mov	r2, r3
 8004c30:	8a3b      	ldrh	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c38:	da09      	bge.n	8004c4e <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8004c40:	8a3b      	ldrh	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8004c4c:	e018      	b.n	8004c80 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8004c54:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d105      	bne.n	8004c68 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c62:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8004c66:	e00b      	b.n	8004c80 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8004c76:	3301      	adds	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3a0      	bcc.n	8004bca <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 8004c88:	8a7b      	ldrh	r3, [r7, #18]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b08c      	sub	sp, #48	; 0x30
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8c2 	bl	8004e28 <get_bytes_remaining>
 8004ca4:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d901      	bls.n	8004cb2 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d035      	beq.n	8004d32 <write_to_flash+0xa0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd6:	d32c      	bcc.n	8004d32 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004cde:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ce2:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ce8:	e00e      	b.n	8004d08 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8004cea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	441a      	add	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cfa:	440b      	add	r3, r1
 8004cfc:	7811      	ldrb	r1, [r2, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8004d02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d04:	3301      	adds	r3, #1
 8004d06:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d08:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004d0a:	8bfb      	ldrh	r3, [r7, #30]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3ec      	bcc.n	8004cea <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d16:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8004d20:	8bfb      	ldrh	r3, [r7, #30]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8004d28:	8bfb      	ldrh	r3, [r7, #30]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8004d30:	e02a      	b.n	8004d88 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d42:	d221      	bcs.n	8004d88 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8004d44:	2300      	movs	r3, #0
 8004d46:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d48:	e00e      	b.n	8004d68 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8004d4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d56:	4619      	mov	r1, r3
 8004d58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d5a:	440b      	add	r3, r1
 8004d5c:	7811      	ldrb	r1, [r2, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8004d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d64:	3301      	adds	r3, #1
 8004d66:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d8ec      	bhi.n	8004d4a <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e04b      	b.n	8004e20 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9c:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	4413      	add	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fb74 	bl	8004494 <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 8004dac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fef9 	bl	8004bb4 <write_to_flash_contiguous>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dc8:	4413      	add	r3, r2
 8004dca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fee8 	bl	8004bb4 <write_to_flash_contiguous>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dea:	4413      	add	r3, r2
 8004dec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fb68 	bl	80044c4 <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 8004df4:	2300      	movs	r3, #0
 8004df6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004df8:	e009      	b.n	8004e0e <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 8004dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	441a      	add	r2, r3
 8004e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e02:	7811      	ldrb	r1, [r2, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8004e08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e10:	8afb      	ldrh	r3, [r7, #22]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3f1      	bcc.n	8004dfa <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8afa      	ldrh	r2, [r7, #22]
 8004e1a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 8004e1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3730      	adds	r7, #48	; 0x30
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <get_bytes_remaining>:
	flash->write_buffer_size = 0;

	return erase_failures;
}

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8004e36:	02db      	lsls	r3, r3, #11
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 8004e3e:	4413      	add	r3, r2
 8004e40:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 8004e44:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8004e4e:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <HAL_Init+0x40>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <HAL_Init+0x40>)
 8004e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_Init+0x40>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <HAL_Init+0x40>)
 8004e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_Init+0x40>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_Init+0x40>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e84:	2003      	movs	r0, #3
 8004e86:	f000 fa27 	bl	80052d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f000 f808 	bl	8004ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e90:	f7fe fc2c 	bl	80036ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00

08004ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ea8:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_InitTick+0x54>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_InitTick+0x58>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fa3f 	bl	8005342 <HAL_SYSTICK_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e00e      	b.n	8004eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b0f      	cmp	r3, #15
 8004ed2:	d80a      	bhi.n	8004eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	f000 fa07 	bl	80052ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ee0:	4a06      	ldr	r2, [pc, #24]	; (8004efc <HAL_InitTick+0x5c>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	20000008 	.word	0x20000008
 8004efc:	20000004 	.word	0x20000004

08004f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_IncTick+0x20>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_IncTick+0x24>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4413      	add	r3, r2
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_IncTick+0x24>)
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000008 	.word	0x20000008
 8004f24:	20000a88 	.word	0x20000a88

08004f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_GetTick+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000a88 	.word	0x20000a88

08004f40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0ed      	b.n	800512e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fe fbec 	bl	800373c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0202 	bic.w	r2, r2, #2
 8004f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f74:	f7ff ffd8 	bl	8004f28 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f7a:	e012      	b.n	8004fa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f7c:	f7ff ffd4 	bl	8004f28 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b0a      	cmp	r3, #10
 8004f88:	d90b      	bls.n	8004fa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2205      	movs	r2, #5
 8004f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e0c5      	b.n	800512e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc0:	f7ff ffb2 	bl	8004f28 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fc6:	e012      	b.n	8004fee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fc8:	f7ff ffae 	bl	8004f28 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b0a      	cmp	r3, #10
 8004fd4:	d90b      	bls.n	8004fee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e09f      	b.n	800512e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0e5      	beq.n	8004fc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	7e1b      	ldrb	r3, [r3, #24]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d108      	bne.n	8005016 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e007      	b.n	8005026 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7e5b      	ldrb	r3, [r3, #25]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d108      	bne.n	8005040 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e007      	b.n	8005050 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7e9b      	ldrb	r3, [r3, #26]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d108      	bne.n	800506a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0220 	orr.w	r2, r2, #32
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e007      	b.n	800507a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0220 	bic.w	r2, r2, #32
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7edb      	ldrb	r3, [r3, #27]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d108      	bne.n	8005094 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0210 	bic.w	r2, r2, #16
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e007      	b.n	80050a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0210 	orr.w	r2, r2, #16
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7f1b      	ldrb	r3, [r3, #28]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d108      	bne.n	80050be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0208 	orr.w	r2, r2, #8
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e007      	b.n	80050ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0208 	bic.w	r2, r2, #8
 80050cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7f5b      	ldrb	r3, [r3, #29]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d108      	bne.n	80050e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0204 	orr.w	r2, r2, #4
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e007      	b.n	80050f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	ea42 0103 	orr.w	r1, r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <__NVIC_SetPriorityGrouping+0x44>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005154:	4013      	ands	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516a:	4a04      	ldr	r2, [pc, #16]	; (800517c <__NVIC_SetPriorityGrouping+0x44>)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	60d3      	str	r3, [r2, #12]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__NVIC_GetPriorityGrouping+0x18>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 0307 	and.w	r3, r3, #7
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db0b      	blt.n	80051c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	f003 021f 	and.w	r2, r3, #31
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <__NVIC_EnableIRQ+0x38>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2001      	movs	r0, #1
 80051be:	fa00 f202 	lsl.w	r2, r0, r2
 80051c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	e000e100 	.word	0xe000e100

080051d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db0a      	blt.n	8005202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	490c      	ldr	r1, [pc, #48]	; (8005224 <__NVIC_SetPriority+0x4c>)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	440b      	add	r3, r1
 80051fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005200:	e00a      	b.n	8005218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <__NVIC_SetPriority+0x50>)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	3b04      	subs	r3, #4
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	440b      	add	r3, r1
 8005216:	761a      	strb	r2, [r3, #24]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000e100 	.word	0xe000e100
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	; 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f1c3 0307 	rsb	r3, r3, #7
 8005246:	2b04      	cmp	r3, #4
 8005248:	bf28      	it	cs
 800524a:	2304      	movcs	r3, #4
 800524c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3304      	adds	r3, #4
 8005252:	2b06      	cmp	r3, #6
 8005254:	d902      	bls.n	800525c <NVIC_EncodePriority+0x30>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3b03      	subs	r3, #3
 800525a:	e000      	b.n	800525e <NVIC_EncodePriority+0x32>
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	401a      	ands	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005274:	f04f 31ff 	mov.w	r1, #4294967295
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43d9      	mvns	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005284:	4313      	orrs	r3, r2
         );
}
 8005286:	4618      	mov	r0, r3
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a4:	d301      	bcc.n	80052aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00f      	b.n	80052ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <SysTick_Config+0x40>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052b2:	210f      	movs	r1, #15
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	f7ff ff8e 	bl	80051d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <SysTick_Config+0x40>)
 80052be:	2200      	movs	r2, #0
 80052c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <SysTick_Config+0x40>)
 80052c4:	2207      	movs	r2, #7
 80052c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010

080052d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff29 	bl	8005138 <__NVIC_SetPriorityGrouping>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	4603      	mov	r3, r0
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005300:	f7ff ff3e 	bl	8005180 <__NVIC_GetPriorityGrouping>
 8005304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7ff ff8e 	bl	800522c <NVIC_EncodePriority>
 8005310:	4602      	mov	r2, r0
 8005312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff5d 	bl	80051d8 <__NVIC_SetPriority>
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	4603      	mov	r3, r0
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff31 	bl	800519c <__NVIC_EnableIRQ>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffa2 	bl	8005294 <SysTick_Config>
 8005350:	4603      	mov	r3, r0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff fdde 	bl	8004f28 <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d008      	beq.n	800538c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e052      	b.n	8005432 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0216 	bic.w	r2, r2, #22
 800539a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <HAL_DMA_Abort+0x62>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0208 	bic.w	r2, r2, #8
 80053ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053dc:	e013      	b.n	8005406 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053de:	f7ff fda3 	bl	8004f28 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d90c      	bls.n	8005406 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2203      	movs	r2, #3
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e015      	b.n	8005432 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e4      	bne.n	80053de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	223f      	movs	r2, #63	; 0x3f
 800541a:	409a      	lsls	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d004      	beq.n	8005458 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e00c      	b.n	8005472 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2205      	movs	r2, #5
 800545c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e165      	b.n	8005768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800549c:	2201      	movs	r2, #1
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	f040 8154 	bne.w	8005762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d005      	beq.n	80054d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d130      	bne.n	8005534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	2203      	movs	r2, #3
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005508:	2201      	movs	r2, #1
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4013      	ands	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 0201 	and.w	r2, r3, #1
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d017      	beq.n	8005570 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	2203      	movs	r2, #3
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d123      	bne.n	80055c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	08da      	lsrs	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3208      	adds	r2, #8
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	220f      	movs	r2, #15
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	08da      	lsrs	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3208      	adds	r2, #8
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	2203      	movs	r2, #3
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0203 	and.w	r2, r3, #3
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80ae 	beq.w	8005762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b5d      	ldr	r3, [pc, #372]	; (8005780 <HAL_GPIO_Init+0x300>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	4a5c      	ldr	r2, [pc, #368]	; (8005780 <HAL_GPIO_Init+0x300>)
 8005610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005614:	6453      	str	r3, [r2, #68]	; 0x44
 8005616:	4b5a      	ldr	r3, [pc, #360]	; (8005780 <HAL_GPIO_Init+0x300>)
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005622:	4a58      	ldr	r2, [pc, #352]	; (8005784 <HAL_GPIO_Init+0x304>)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	220f      	movs	r2, #15
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4013      	ands	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a4f      	ldr	r2, [pc, #316]	; (8005788 <HAL_GPIO_Init+0x308>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d025      	beq.n	800569a <HAL_GPIO_Init+0x21a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a4e      	ldr	r2, [pc, #312]	; (800578c <HAL_GPIO_Init+0x30c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01f      	beq.n	8005696 <HAL_GPIO_Init+0x216>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a4d      	ldr	r2, [pc, #308]	; (8005790 <HAL_GPIO_Init+0x310>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d019      	beq.n	8005692 <HAL_GPIO_Init+0x212>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a4c      	ldr	r2, [pc, #304]	; (8005794 <HAL_GPIO_Init+0x314>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_GPIO_Init+0x20e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a4b      	ldr	r2, [pc, #300]	; (8005798 <HAL_GPIO_Init+0x318>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00d      	beq.n	800568a <HAL_GPIO_Init+0x20a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a4a      	ldr	r2, [pc, #296]	; (800579c <HAL_GPIO_Init+0x31c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <HAL_GPIO_Init+0x206>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a49      	ldr	r2, [pc, #292]	; (80057a0 <HAL_GPIO_Init+0x320>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d101      	bne.n	8005682 <HAL_GPIO_Init+0x202>
 800567e:	2306      	movs	r3, #6
 8005680:	e00c      	b.n	800569c <HAL_GPIO_Init+0x21c>
 8005682:	2307      	movs	r3, #7
 8005684:	e00a      	b.n	800569c <HAL_GPIO_Init+0x21c>
 8005686:	2305      	movs	r3, #5
 8005688:	e008      	b.n	800569c <HAL_GPIO_Init+0x21c>
 800568a:	2304      	movs	r3, #4
 800568c:	e006      	b.n	800569c <HAL_GPIO_Init+0x21c>
 800568e:	2303      	movs	r3, #3
 8005690:	e004      	b.n	800569c <HAL_GPIO_Init+0x21c>
 8005692:	2302      	movs	r3, #2
 8005694:	e002      	b.n	800569c <HAL_GPIO_Init+0x21c>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_GPIO_Init+0x21c>
 800569a:	2300      	movs	r3, #0
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	f002 0203 	and.w	r2, r2, #3
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	4093      	lsls	r3, r2
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ac:	4935      	ldr	r1, [pc, #212]	; (8005784 <HAL_GPIO_Init+0x304>)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	3302      	adds	r3, #2
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ba:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_GPIO_Init+0x324>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056de:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <HAL_GPIO_Init+0x324>)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056e4:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <HAL_GPIO_Init+0x324>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <HAL_GPIO_Init+0x324>)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800570e:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_GPIO_Init+0x324>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005732:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <HAL_GPIO_Init+0x324>)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_GPIO_Init+0x324>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <HAL_GPIO_Init+0x324>)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	f67f ae96 	bls.w	800549c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	40013800 	.word	0x40013800
 8005788:	40020000 	.word	0x40020000
 800578c:	40020400 	.word	0x40020400
 8005790:	40020800 	.word	0x40020800
 8005794:	40020c00 	.word	0x40020c00
 8005798:	40021000 	.word	0x40021000
 800579c:	40021400 	.word	0x40021400
 80057a0:	40021800 	.word	0x40021800
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
 80057b4:	4613      	mov	r3, r2
 80057b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b8:	787b      	ldrb	r3, [r7, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057c4:	e003      	b.n	80057ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	041a      	lsls	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4013      	ands	r3, r2
 80057f2:	041a      	lsls	r2, r3, #16
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	43d9      	mvns	r1, r3
 80057f8:	887b      	ldrh	r3, [r7, #2]
 80057fa:	400b      	ands	r3, r1
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	619a      	str	r2, [r3, #24]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e034      	b.n	800588a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005828:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f245 5255 	movw	r2, #21845	; 0x5555
 8005832:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6892      	ldr	r2, [r2, #8]
 8005846:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005848:	f7ff fb6e 	bl	8004f28 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800584e:	e00f      	b.n	8005870 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005850:	f7ff fb6a 	bl	8004f28 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b30      	cmp	r3, #48	; 0x30
 800585c:	d908      	bls.n	8005870 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e00c      	b.n	800588a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e8      	bne.n	8005850 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005886:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	4b20      	ldr	r3, [pc, #128]	; (8005924 <HAL_PWREx_EnableOverDrive+0x90>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <HAL_PWREx_EnableOverDrive+0x90>)
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ac:	6413      	str	r3, [r2, #64]	; 0x40
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_PWREx_EnableOverDrive+0x90>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_PWREx_EnableOverDrive+0x94>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c0:	f7ff fb32 	bl	8004f28 <HAL_GetTick>
 80058c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80058c6:	e009      	b.n	80058dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058c8:	f7ff fb2e 	bl	8004f28 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d6:	d901      	bls.n	80058dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e01f      	b.n	800591c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <HAL_PWREx_EnableOverDrive+0x98>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d1ee      	bne.n	80058c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f0:	f7ff fb1a 	bl	8004f28 <HAL_GetTick>
 80058f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058f6:	e009      	b.n	800590c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058f8:	f7ff fb16 	bl	8004f28 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005906:	d901      	bls.n	800590c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e007      	b.n	800591c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <HAL_PWREx_EnableOverDrive+0x98>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005918:	d1ee      	bne.n	80058f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40023800 	.word	0x40023800
 8005928:	420e0040 	.word	0x420e0040
 800592c:	40007000 	.word	0x40007000
 8005930:	420e0044 	.word	0x420e0044

08005934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0cc      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005948:	4b68      	ldr	r3, [pc, #416]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d90c      	bls.n	8005970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b65      	ldr	r3, [pc, #404]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b63      	ldr	r3, [pc, #396]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0b8      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d020      	beq.n	80059be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a0:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a52      	ldr	r2, [pc, #328]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ac:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	494d      	ldr	r1, [pc, #308]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d044      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d107      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d119      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e07f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d003      	beq.n	80059f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f2:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e06f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e067      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a12:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4934      	ldr	r1, [pc, #208]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a24:	f7ff fa80 	bl	8004f28 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7ff fa7c 	bl	8004f28 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e04f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 020c 	and.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1eb      	bne.n	8005a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d20c      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e032      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4916      	ldr	r1, [pc, #88]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	490e      	ldr	r1, [pc, #56]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aba:	f000 f855 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	490a      	ldr	r1, [pc, #40]	; (8005af4 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_RCC_ClockConfig+0x1c8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f9e0 	bl	8004ea0 <HAL_InitTick>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023c00 	.word	0x40023c00
 8005af0:	40023800 	.word	0x40023800
 8005af4:	08008378 	.word	0x08008378
 8005af8:	20000000 	.word	0x20000000
 8005afc:	20000004 	.word	0x20000004

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000000 	.word	0x20000000

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	08008388 	.word	0x08008388

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	08008388 	.word	0x08008388

08005b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b70:	2600      	movs	r6, #0
 8005b72:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8005b74:	2600      	movs	r6, #0
 8005b76:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8005b78:	2600      	movs	r6, #0
 8005b7a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b80:	2600      	movs	r6, #0
 8005b82:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b84:	4ea3      	ldr	r6, [pc, #652]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005b86:	68b6      	ldr	r6, [r6, #8]
 8005b88:	f006 060c 	and.w	r6, r6, #12
 8005b8c:	2e0c      	cmp	r6, #12
 8005b8e:	f200 8137 	bhi.w	8005e00 <HAL_RCC_GetSysClockFreq+0x298>
 8005b92:	f20f 0c08 	addw	ip, pc, #8
 8005b96:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005e01 	.word	0x08005e01
 8005ba4:	08005e01 	.word	0x08005e01
 8005ba8:	08005e01 	.word	0x08005e01
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005e01 	.word	0x08005e01
 8005bb4:	08005e01 	.word	0x08005e01
 8005bb8:	08005e01 	.word	0x08005e01
 8005bbc:	08005bdd 	.word	0x08005bdd
 8005bc0:	08005e01 	.word	0x08005e01
 8005bc4:	08005e01 	.word	0x08005e01
 8005bc8:	08005e01 	.word	0x08005e01
 8005bcc:	08005cf3 	.word	0x08005cf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b91      	ldr	r3, [pc, #580]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005bd2:	613b      	str	r3, [r7, #16]
       break;
 8005bd4:	e117      	b.n	8005e06 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bd6:	4b91      	ldr	r3, [pc, #580]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005bd8:	613b      	str	r3, [r7, #16]
      break;
 8005bda:	e114      	b.n	8005e06 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bdc:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005be6:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d024      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf2:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005c02:	f04f 0500 	mov.w	r5, #0
 8005c06:	ea02 0004 	and.w	r0, r2, r4
 8005c0a:	ea03 0105 	and.w	r1, r3, r5
 8005c0e:	4b83      	ldr	r3, [pc, #524]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005c10:	fb03 f201 	mul.w	r2, r3, r1
 8005c14:	2300      	movs	r3, #0
 8005c16:	fb03 f300 	mul.w	r3, r3, r0
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a7f      	ldr	r2, [pc, #508]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005c1e:	fba0 0102 	umull	r0, r1, r0, r2
 8005c22:	440b      	add	r3, r1
 8005c24:	4619      	mov	r1, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	f7fa ff61 	bl	8000af4 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4613      	mov	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e04c      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3c:	4b75      	ldr	r3, [pc, #468]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	461a      	mov	r2, r3
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	ea02 0800 	and.w	r8, r2, r0
 8005c54:	ea03 0901 	and.w	r9, r3, r1
 8005c58:	4640      	mov	r0, r8
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	014b      	lsls	r3, r1, #5
 8005c66:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c6a:	0142      	lsls	r2, r0, #5
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	ebb0 0008 	subs.w	r0, r0, r8
 8005c74:	eb61 0109 	sbc.w	r1, r1, r9
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	018b      	lsls	r3, r1, #6
 8005c82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c86:	0182      	lsls	r2, r0, #6
 8005c88:	1a12      	subs	r2, r2, r0
 8005c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c8e:	f04f 0000 	mov.w	r0, #0
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	00d9      	lsls	r1, r3, #3
 8005c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c9c:	00d0      	lsls	r0, r2, #3
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	eb12 0208 	adds.w	r2, r2, r8
 8005ca6:	eb43 0309 	adc.w	r3, r3, r9
 8005caa:	f04f 0000 	mov.w	r0, #0
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	0299      	lsls	r1, r3, #10
 8005cb4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cb8:	0290      	lsls	r0, r2, #10
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f7fa ff13 	bl	8000af4 <__aeabi_uldivmod>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cd6:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	613b      	str	r3, [r7, #16]
      break;
 8005cf0:	e089      	b.n	8005e06 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cf2:	4948      	ldr	r1, [pc, #288]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005cf4:	6849      	ldr	r1, [r1, #4]
 8005cf6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005cfa:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cfc:	4945      	ldr	r1, [pc, #276]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005cfe:	6849      	ldr	r1, [r1, #4]
 8005d00:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005d04:	2900      	cmp	r1, #0
 8005d06:	d024      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d08:	4942      	ldr	r1, [pc, #264]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d0a:	6849      	ldr	r1, [r1, #4]
 8005d0c:	0989      	lsrs	r1, r1, #6
 8005d0e:	4608      	mov	r0, r1
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005d18:	f04f 0500 	mov.w	r5, #0
 8005d1c:	ea00 0204 	and.w	r2, r0, r4
 8005d20:	ea01 0305 	and.w	r3, r1, r5
 8005d24:	493d      	ldr	r1, [pc, #244]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005d26:	fb01 f003 	mul.w	r0, r1, r3
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	fb01 f102 	mul.w	r1, r1, r2
 8005d30:	1844      	adds	r4, r0, r1
 8005d32:	493a      	ldr	r1, [pc, #232]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005d34:	fba2 0101 	umull	r0, r1, r2, r1
 8005d38:	1863      	adds	r3, r4, r1
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	f7fa fed6 	bl	8000af4 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e04a      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	ea02 0400 	and.w	r4, r2, r0
 8005d6a:	ea03 0501 	and.w	r5, r3, r1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	014b      	lsls	r3, r1, #5
 8005d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d80:	0142      	lsls	r2, r0, #5
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	1b00      	subs	r0, r0, r4
 8005d88:	eb61 0105 	sbc.w	r1, r1, r5
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	018b      	lsls	r3, r1, #6
 8005d96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d9a:	0182      	lsls	r2, r0, #6
 8005d9c:	1a12      	subs	r2, r2, r0
 8005d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	00d9      	lsls	r1, r3, #3
 8005dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005db0:	00d0      	lsls	r0, r2, #3
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	1912      	adds	r2, r2, r4
 8005db8:	eb45 0303 	adc.w	r3, r5, r3
 8005dbc:	f04f 0000 	mov.w	r0, #0
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	0299      	lsls	r1, r3, #10
 8005dc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005dca:	0290      	lsls	r0, r2, #10
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	f7fa fe8a 	bl	8000af4 <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4613      	mov	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	0f1b      	lsrs	r3, r3, #28
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	613b      	str	r3, [r7, #16]
      break;
 8005dfe:	e002      	b.n	8005e06 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e02:	613b      	str	r3, [r7, #16]
      break;
 8005e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e06:	693b      	ldr	r3, [r7, #16]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800
 8005e18:	00f42400 	.word	0x00f42400
 8005e1c:	017d7840 	.word	0x017d7840

08005e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e28d      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8083 	beq.w	8005f46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e40:	4b94      	ldr	r3, [pc, #592]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e4c:	4b91      	ldr	r3, [pc, #580]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d106      	bne.n	8005e66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e58:	4b8e      	ldr	r3, [pc, #568]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e64:	d00c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b8b      	ldr	r3, [pc, #556]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d112      	bne.n	8005e98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e72:	4b88      	ldr	r3, [pc, #544]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	4b84      	ldr	r3, [pc, #528]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d05b      	beq.n	8005f44 <HAL_RCC_OscConfig+0x124>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d157      	bne.n	8005f44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e25a      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x90>
 8005ea2:	4b7c      	ldr	r3, [pc, #496]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a7b      	ldr	r2, [pc, #492]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e01d      	b.n	8005eec <HAL_RCC_OscConfig+0xcc>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0xb4>
 8005eba:	4b76      	ldr	r3, [pc, #472]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a75      	ldr	r2, [pc, #468]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4b73      	ldr	r3, [pc, #460]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a72      	ldr	r2, [pc, #456]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0xcc>
 8005ed4:	4b6f      	ldr	r3, [pc, #444]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6e      	ldr	r2, [pc, #440]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b6c      	ldr	r3, [pc, #432]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a6b      	ldr	r2, [pc, #428]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7ff f818 	bl	8004f28 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005efc:	f7ff f814 	bl	8004f28 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b64      	cmp	r3, #100	; 0x64
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e21f      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0e:	4b61      	ldr	r3, [pc, #388]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0xdc>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7ff f804 	bl	8004f28 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f24:	f7ff f800 	bl	8004f28 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	; 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e20b      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f36:	4b57      	ldr	r3, [pc, #348]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x104>
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06f      	beq.n	8006032 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f52:	4b50      	ldr	r3, [pc, #320]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f5e:	4b4d      	ldr	r3, [pc, #308]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d105      	bne.n	8005f76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f6a:	4b4a      	ldr	r3, [pc, #296]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f76:	4b47      	ldr	r3, [pc, #284]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f7e:	2b0c      	cmp	r3, #12
 8005f80:	d11c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f82:	4b44      	ldr	r3, [pc, #272]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d116      	bne.n	8005fbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	4b41      	ldr	r3, [pc, #260]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x186>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e1d3      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa6:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4937      	ldr	r1, [pc, #220]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fba:	e03a      	b.n	8006032 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d020      	beq.n	8006006 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc4:	4b34      	ldr	r3, [pc, #208]	; (8006098 <HAL_RCC_OscConfig+0x278>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fca:	f7fe ffad 	bl	8004f28 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd2:	f7fe ffa9 	bl	8004f28 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e1b4      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe4:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff0:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4925      	ldr	r1, [pc, #148]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]
 8006004:	e015      	b.n	8006032 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <HAL_RCC_OscConfig+0x278>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fe ff8c 	bl	8004f28 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006014:	f7fe ff88 	bl	8004f28 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e193      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006026:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f0      	bne.n	8006014 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d036      	beq.n	80060ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d016      	beq.n	8006074 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCC_OscConfig+0x27c>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604c:	f7fe ff6c 	bl	8004f28 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006054:	f7fe ff68 	bl	8004f28 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e173      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_RCC_OscConfig+0x274>)
 8006068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x234>
 8006072:	e01b      	b.n	80060ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCC_OscConfig+0x27c>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fe ff55 	bl	8004f28 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006080:	e00e      	b.n	80060a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006082:	f7fe ff51 	bl	8004f28 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d907      	bls.n	80060a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e15c      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
 8006094:	40023800 	.word	0x40023800
 8006098:	42470000 	.word	0x42470000
 800609c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a0:	4b8a      	ldr	r3, [pc, #552]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1ea      	bne.n	8006082 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8097 	beq.w	80061e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060be:	4b83      	ldr	r3, [pc, #524]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4a7e      	ldr	r2, [pc, #504]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6413      	str	r3, [r2, #64]	; 0x40
 80060da:	4b7c      	ldr	r3, [pc, #496]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ea:	4b79      	ldr	r3, [pc, #484]	; (80062d0 <HAL_RCC_OscConfig+0x4b0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d118      	bne.n	8006128 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f6:	4b76      	ldr	r3, [pc, #472]	; (80062d0 <HAL_RCC_OscConfig+0x4b0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <HAL_RCC_OscConfig+0x4b0>)
 80060fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006102:	f7fe ff11 	bl	8004f28 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610a:	f7fe ff0d 	bl	8004f28 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e118      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611c:	4b6c      	ldr	r3, [pc, #432]	; (80062d0 <HAL_RCC_OscConfig+0x4b0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f0      	beq.n	800610a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d106      	bne.n	800613e <HAL_RCC_OscConfig+0x31e>
 8006130:	4b66      	ldr	r3, [pc, #408]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	4a65      	ldr	r2, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	; 0x70
 800613c:	e01c      	b.n	8006178 <HAL_RCC_OscConfig+0x358>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b05      	cmp	r3, #5
 8006144:	d10c      	bne.n	8006160 <HAL_RCC_OscConfig+0x340>
 8006146:	4b61      	ldr	r3, [pc, #388]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	4a60      	ldr	r2, [pc, #384]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 800614c:	f043 0304 	orr.w	r3, r3, #4
 8006150:	6713      	str	r3, [r2, #112]	; 0x70
 8006152:	4b5e      	ldr	r3, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	4a5d      	ldr	r2, [pc, #372]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
 800615e:	e00b      	b.n	8006178 <HAL_RCC_OscConfig+0x358>
 8006160:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	4a59      	ldr	r2, [pc, #356]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	6713      	str	r3, [r2, #112]	; 0x70
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	4a56      	ldr	r2, [pc, #344]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006172:	f023 0304 	bic.w	r3, r3, #4
 8006176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d015      	beq.n	80061ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fe fed2 	bl	8004f28 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006186:	e00a      	b.n	800619e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fe fece 	bl	8004f28 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e0d7      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800619e:	4b4b      	ldr	r3, [pc, #300]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0ee      	beq.n	8006188 <HAL_RCC_OscConfig+0x368>
 80061aa:	e014      	b.n	80061d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fe febc 	bl	8004f28 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7fe feb8 	bl	8004f28 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e0c1      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ca:	4b40      	ldr	r3, [pc, #256]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1ee      	bne.n	80061b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d105      	bne.n	80061e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061dc:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	4a3a      	ldr	r2, [pc, #232]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80061e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80ad 	beq.w	800634c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d060      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d145      	bne.n	8006292 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006206:	4b33      	ldr	r3, [pc, #204]	; (80062d4 <HAL_RCC_OscConfig+0x4b4>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fe fe8c 	bl	8004f28 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006214:	f7fe fe88 	bl	8004f28 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e093      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	019b      	lsls	r3, r3, #6
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	3b01      	subs	r3, #1
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	061b      	lsls	r3, r3, #24
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	071b      	lsls	r3, r3, #28
 800625e:	491b      	ldr	r1, [pc, #108]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x4b4>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fe fe5d 	bl	8004f28 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006272:	f7fe fe59 	bl	8004f28 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e064      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x452>
 8006290:	e05c      	b.n	800634c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_RCC_OscConfig+0x4b4>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fe fe46 	bl	8004f28 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fe fe42 	bl	8004f28 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e04d      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_OscConfig+0x4ac>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x480>
 80062be:	e045      	b.n	800634c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e040      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40007000 	.word	0x40007000
 80062d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d8:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <HAL_RCC_OscConfig+0x538>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d030      	beq.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d129      	bne.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d122      	bne.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800630e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006310:	4293      	cmp	r3, r2
 8006312:	d119      	bne.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	3b01      	subs	r3, #1
 8006322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d10f      	bne.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d107      	bne.n	8006348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40023800 	.word	0x40023800

0800635c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07b      	b.n	8006466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d108      	bne.n	8006388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637e:	d009      	beq.n	8006394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
 8006386:	e005      	b.n	8006394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fd fa0c 	bl	80037cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	ea42 0103 	orr.w	r1, r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0104 	and.w	r1, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f003 0210 	and.w	r2, r3, #16
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b088      	sub	sp, #32
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_SPI_Transmit+0x22>
 800648c:	2302      	movs	r3, #2
 800648e:	e126      	b.n	80066de <HAL_SPI_Transmit+0x270>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006498:	f7fe fd46 	bl	8004f28 <HAL_GetTick>
 800649c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
 80064b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064b2:	e10b      	b.n	80066cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Transmit+0x52>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c4:	e102      	b.n	80066cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2203      	movs	r2, #3
 80064ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650c:	d10f      	bne.n	800652e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d007      	beq.n	800654c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800654a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d14b      	bne.n	80065ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_SPI_Transmit+0xf6>
 800655e:	8afb      	ldrh	r3, [r7, #22]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d13e      	bne.n	80065e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	1c9a      	adds	r2, r3, #2
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006588:	e02b      	b.n	80065e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b02      	cmp	r3, #2
 8006596:	d112      	bne.n	80065be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80065bc:	e011      	b.n	80065e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065be:	f7fe fcb3 	bl	8004f28 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d803      	bhi.n	80065d6 <HAL_SPI_Transmit+0x168>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d102      	bne.n	80065dc <HAL_SPI_Transmit+0x16e>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065e0:	e074      	b.n	80066cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1ce      	bne.n	800658a <HAL_SPI_Transmit+0x11c>
 80065ec:	e04c      	b.n	8006688 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_Transmit+0x18e>
 80065f6:	8afb      	ldrh	r3, [r7, #22]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d140      	bne.n	800667e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006622:	e02c      	b.n	800667e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d113      	bne.n	800665a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	86da      	strh	r2, [r3, #54]	; 0x36
 8006658:	e011      	b.n	800667e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665a:	f7fe fc65 	bl	8004f28 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d803      	bhi.n	8006672 <HAL_SPI_Transmit+0x204>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <HAL_SPI_Transmit+0x20a>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800667c:	e026      	b.n	80066cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1cd      	bne.n	8006624 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fbcb 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e000      	b.n	80066cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80066ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b088      	sub	sp, #32
 80066ea:	af02      	add	r7, sp, #8
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d112      	bne.n	800672a <HAL_SPI_Receive+0x44>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2204      	movs	r2, #4
 8006710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8f1 	bl	8006908 <HAL_SPI_TransmitReceive>
 8006726:	4603      	mov	r3, r0
 8006728:	e0ea      	b.n	8006900 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_SPI_Receive+0x52>
 8006734:	2302      	movs	r3, #2
 8006736:	e0e3      	b.n	8006900 <HAL_SPI_Receive+0x21a>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006740:	f7fe fbf2 	bl	8004f28 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d002      	beq.n	8006758 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006752:	2302      	movs	r3, #2
 8006754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006756:	e0ca      	b.n	80068ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_SPI_Receive+0x7e>
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006768:	e0c1      	b.n	80068ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2204      	movs	r2, #4
 800676e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b0:	d10f      	bne.n	80067d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d007      	beq.n	80067f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d162      	bne.n	80068be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067f8:	e02e      	b.n	8006858 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d115      	bne.n	8006834 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f103 020c 	add.w	r2, r3, #12
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006832:	e011      	b.n	8006858 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006834:	f7fe fb78 	bl	8004f28 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d803      	bhi.n	800684c <HAL_SPI_Receive+0x166>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d102      	bne.n	8006852 <HAL_SPI_Receive+0x16c>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d102      	bne.n	8006858 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006856:	e04a      	b.n	80068ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1cb      	bne.n	80067fa <HAL_SPI_Receive+0x114>
 8006862:	e031      	b.n	80068c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	d113      	bne.n	800689a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	b292      	uxth	r2, r2
 800687e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006898:	e011      	b.n	80068be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800689a:	f7fe fb45 	bl	8004f28 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d803      	bhi.n	80068b2 <HAL_SPI_Receive+0x1cc>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Receive+0x1d2>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068bc:	e017      	b.n	80068ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1cd      	bne.n	8006864 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fa45 	bl	8006d5c <SPI_EndRxTransaction>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
 80068ea:	e000      	b.n	80068ee <HAL_SPI_Receive+0x208>
  }

error :
 80068ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006916:	2301      	movs	r3, #1
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_SPI_TransmitReceive+0x26>
 800692a:	2302      	movs	r3, #2
 800692c:	e18a      	b.n	8006c44 <HAL_SPI_TransmitReceive+0x33c>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006936:	f7fe faf7 	bl	8004f28 <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694c:	887b      	ldrh	r3, [r7, #2]
 800694e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006954:	2b01      	cmp	r3, #1
 8006956:	d00f      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x70>
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695e:	d107      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x68>
 8006968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696c:	2b04      	cmp	r3, #4
 800696e:	d003      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006970:	2302      	movs	r3, #2
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006976:	e15b      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_SPI_TransmitReceive+0x82>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_SPI_TransmitReceive+0x82>
 8006984:	887b      	ldrh	r3, [r7, #2]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006990:	e14e      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b04      	cmp	r3, #4
 800699c:	d003      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2205      	movs	r2, #5
 80069a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	887a      	ldrh	r2, [r7, #2]
 80069b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	887a      	ldrh	r2, [r7, #2]
 80069bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	887a      	ldrh	r2, [r7, #2]
 80069c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	887a      	ldrh	r2, [r7, #2]
 80069ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d007      	beq.n	80069fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a02:	d178      	bne.n	8006af6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0x10a>
 8006a0c:	8b7b      	ldrh	r3, [r7, #26]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d166      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	881a      	ldrh	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	1c9a      	adds	r2, r3, #2
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a36:	e053      	b.n	8006ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d11b      	bne.n	8006a7e <HAL_SPI_TransmitReceive+0x176>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <HAL_SPI_TransmitReceive+0x176>
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d113      	bne.n	8006a7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	881a      	ldrh	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	1c9a      	adds	r2, r3, #2
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x1b8>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d014      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	b292      	uxth	r2, r2
 8006aa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	1c9a      	adds	r2, r3, #2
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006abc:	2301      	movs	r3, #1
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ac0:	f7fe fa32 	bl	8004f28 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d807      	bhi.n	8006ae0 <HAL_SPI_TransmitReceive+0x1d8>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ade:	e0a7      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1a6      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x130>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1a1      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x130>
 8006af4:	e07c      	b.n	8006bf0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0x1fc>
 8006afe:	8b7b      	ldrh	r3, [r7, #26]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d16b      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b2a:	e057      	b.n	8006bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d11c      	bne.n	8006b74 <HAL_SPI_TransmitReceive+0x26c>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <HAL_SPI_TransmitReceive+0x26c>
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d114      	bne.n	8006b74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d119      	bne.n	8006bb6 <HAL_SPI_TransmitReceive+0x2ae>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d014      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb6:	f7fe f9b7 	bl	8004f28 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d803      	bhi.n	8006bce <HAL_SPI_TransmitReceive+0x2c6>
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d102      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x2cc>
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bda:	e029      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1a2      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x224>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d19d      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f917 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c0c:	e010      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	e000      	b.n	8006c30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3730      	adds	r7, #48	; 0x30
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c5c:	f7fe f964 	bl	8004f28 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c6c:	f7fe f95c 	bl	8004f28 <HAL_GetTick>
 8006c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	015b      	lsls	r3, r3, #5
 8006c78:	0d1b      	lsrs	r3, r3, #20
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c82:	e054      	b.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d050      	beq.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c8c:	f7fe f94c 	bl	8004f28 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d902      	bls.n	8006ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d13d      	bne.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cba:	d111      	bne.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	d004      	beq.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cce:	d107      	bne.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce8:	d10f      	bne.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e017      	b.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4013      	ands	r3, r2
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	bf0c      	ite	eq
 8006d3e:	2301      	moveq	r3, #1
 8006d40:	2300      	movne	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d19b      	bne.n	8006c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000000 	.word	0x20000000

08006d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d70:	d111      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d004      	beq.n	8006d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d107      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9e:	d12a      	bne.n	8006df6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da8:	d012      	beq.n	8006dd0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff ff49 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02d      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	f043 0220 	orr.w	r2, r3, #32
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e026      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2101      	movs	r1, #1
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ff36 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01a      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f043 0220 	orr.w	r2, r3, #32
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e013      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2101      	movs	r1, #1
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff ff23 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e000      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e34:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <SPI_EndRxTxTransaction+0x7c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <SPI_EndRxTxTransaction+0x80>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0d5b      	lsrs	r3, r3, #21
 8006e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d112      	bne.n	8006e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fef4 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e00f      	b.n	8006e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d0f2      	beq.n	8006e7a <SPI_EndRxTxTransaction+0x52>
 8006e94:	e000      	b.n	8006e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e96:	bf00      	nop
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000000 	.word	0x20000000
 8006ea8:	165e9f81 	.word	0x165e9f81

08006eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e041      	b.n	8006f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fc fd66 	bl	80039a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 f9ca 	bl	8007284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e046      	b.n	8006ff2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a23      	ldr	r2, [pc, #140]	; (8007000 <HAL_TIM_Base_Start+0xb4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7e:	d01d      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <HAL_TIM_Base_Start+0xb8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <HAL_TIM_Base_Start+0xbc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_TIM_Base_Start+0xc0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_TIM_Base_Start+0xc4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_TIM_Base_Start+0xc8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIM_Base_Start+0x70>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_TIM_Base_Start+0xcc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d111      	bne.n	8006fe0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b06      	cmp	r3, #6
 8006fcc:	d010      	beq.n	8006ff0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fde:	e007      	b.n	8006ff0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b01      	cmp	r3, #1
 800702e:	d001      	beq.n	8007034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e04e      	b.n	80070d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705e:	d01d      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <HAL_TIM_Base_Start_IT+0xd0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIM_Base_Start_IT+0x80>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d111      	bne.n	80070c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d010      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070be:	e007      	b.n	80070d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40010400 	.word	0x40010400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40001800 	.word	0x40001800

080070fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e0b3      	b.n	800727c <HAL_TIM_ConfigClockSource+0x180>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714c:	d03e      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0xd0>
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007152:	f200 8087 	bhi.w	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	f000 8085 	beq.w	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d87f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007164:	2b70      	cmp	r3, #112	; 0x70
 8007166:	d01a      	beq.n	800719e <HAL_TIM_ConfigClockSource+0xa2>
 8007168:	2b70      	cmp	r3, #112	; 0x70
 800716a:	d87b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800716c:	2b60      	cmp	r3, #96	; 0x60
 800716e:	d050      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x116>
 8007170:	2b60      	cmp	r3, #96	; 0x60
 8007172:	d877      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007174:	2b50      	cmp	r3, #80	; 0x50
 8007176:	d03c      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0xf6>
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d873      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d058      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x136>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d86f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d064      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d86b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d060      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d867      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d05c      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d05a      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800719c:	e062      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6899      	ldr	r1, [r3, #8]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f000 f983 	bl	80074b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	609a      	str	r2, [r3, #8]
      break;
 80071ca:	e04e      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f000 f96c 	bl	80074b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ee:	609a      	str	r2, [r3, #8]
      break;
 80071f0:	e03b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 f8e0 	bl	80073c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2150      	movs	r1, #80	; 0x50
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f939 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8007210:	e02b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	461a      	mov	r2, r3
 8007220:	f000 f8ff 	bl	8007422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2160      	movs	r1, #96	; 0x60
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f929 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8007230:	e01b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	461a      	mov	r2, r3
 8007240:	f000 f8c0 	bl	80073c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2140      	movs	r1, #64	; 0x40
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f919 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8007250:	e00b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f000 f910 	bl	8007482 <TIM_ITRx_SetConfig>
        break;
 8007262:	e002      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a40      	ldr	r2, [pc, #256]	; (8007398 <TIM_Base_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d00f      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a3d      	ldr	r2, [pc, #244]	; (800739c <TIM_Base_SetConfig+0x118>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00b      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a3c      	ldr	r2, [pc, #240]	; (80073a0 <TIM_Base_SetConfig+0x11c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <TIM_Base_SetConfig+0x120>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a3a      	ldr	r2, [pc, #232]	; (80073a8 <TIM_Base_SetConfig+0x124>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d108      	bne.n	80072d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2f      	ldr	r2, [pc, #188]	; (8007398 <TIM_Base_SetConfig+0x114>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e4:	d027      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	; (800739c <TIM_Base_SetConfig+0x118>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d023      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <TIM_Base_SetConfig+0x11c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01f      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <TIM_Base_SetConfig+0x120>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <TIM_Base_SetConfig+0x124>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d017      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a28      	ldr	r2, [pc, #160]	; (80073ac <TIM_Base_SetConfig+0x128>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a27      	ldr	r2, [pc, #156]	; (80073b0 <TIM_Base_SetConfig+0x12c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <TIM_Base_SetConfig+0x130>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <TIM_Base_SetConfig+0x134>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a24      	ldr	r2, [pc, #144]	; (80073bc <TIM_Base_SetConfig+0x138>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a23      	ldr	r2, [pc, #140]	; (80073c0 <TIM_Base_SetConfig+0x13c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d108      	bne.n	8007348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <TIM_Base_SetConfig+0x114>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_Base_SetConfig+0xf8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <TIM_Base_SetConfig+0x124>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	615a      	str	r2, [r3, #20]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40010400 	.word	0x40010400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40014400 	.word	0x40014400
 80073b4:	40014800 	.word	0x40014800
 80073b8:	40001800 	.word	0x40001800
 80073bc:	40001c00 	.word	0x40001c00
 80073c0:	40002000 	.word	0x40002000

080073c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f023 0201 	bic.w	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 030a 	bic.w	r3, r3, #10
 8007400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007422:	b480      	push	{r7}
 8007424:	b087      	sub	sp, #28
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0210 	bic.w	r2, r3, #16
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800744c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	031b      	lsls	r3, r3, #12
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800745e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	f043 0307 	orr.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	609a      	str	r2, [r3, #8]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	431a      	orrs	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4313      	orrs	r3, r2
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e05a      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01d      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e03f      	b.n	8007682 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fc fa28 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2224      	movs	r2, #36	; 0x24
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc1b 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695a      	ldr	r2, [r3, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b08a      	sub	sp, #40	; 0x28
 800768e:	af02      	add	r7, sp, #8
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d17c      	bne.n	80077a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_UART_Transmit+0x2c>
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e075      	b.n	80077a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Transmit+0x3e>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e06e      	b.n	80077a6 <HAL_UART_Transmit+0x11c>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2221      	movs	r2, #33	; 0x21
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076de:	f7fd fc23 	bl	8004f28 <HAL_GetTick>
 80076e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d108      	bne.n	800770c <HAL_UART_Transmit+0x82>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d104      	bne.n	800770c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	e003      	b.n	8007714 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800771c:	e02a      	b.n	8007774 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	2180      	movs	r1, #128	; 0x80
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa17 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e036      	b.n	80077a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10b      	bne.n	8007756 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800774c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	3302      	adds	r3, #2
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	e007      	b.n	8007766 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	781a      	ldrb	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800776a:	b29b      	uxth	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1cf      	bne.n	800771e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2200      	movs	r2, #0
 8007786:	2140      	movs	r1, #64	; 0x40
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f9e7 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e006      	b.n	80077a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	; 0x28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_UART_IRQHandler+0x52>
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 faa1 	bl	8007d42 <UART_Receive_IT>
      return;
 8007800:	e17c      	b.n	8007afc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80b1 	beq.w	800796c <HAL_UART_IRQHandler+0x1bc>
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <HAL_UART_IRQHandler+0x70>
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80a6 	beq.w	800796c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_UART_IRQHandler+0x90>
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007838:	f043 0201 	orr.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_UART_IRQHandler+0xb0>
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	f043 0202 	orr.w	r2, r3, #2
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_UART_IRQHandler+0xd0>
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f043 0204 	orr.w	r2, r3, #4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <HAL_UART_IRQHandler+0xfa>
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_UART_IRQHandler+0xee>
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f043 0208 	orr.w	r2, r3, #8
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 811f 	beq.w	8007af2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_UART_IRQHandler+0x11e>
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa3a 	bl	8007d42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <HAL_UART_IRQHandler+0x146>
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d031      	beq.n	800795a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f97a 	bl	8007bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d123      	bne.n	8007952 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007918:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	4a77      	ldr	r2, [pc, #476]	; (8007b04 <HAL_UART_IRQHandler+0x354>)
 8007928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd fd83 	bl	800543a <HAL_DMA_Abort_IT>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	e00e      	b.n	8007968 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8f0 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00a      	b.n	8007968 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8ec 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e006      	b.n	8007968 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8e8 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007966:	e0c4      	b.n	8007af2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	bf00      	nop
    return;
 800796a:	e0c2      	b.n	8007af2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	2b01      	cmp	r3, #1
 8007972:	f040 80a2 	bne.w	8007aba <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 809c 	beq.w	8007aba <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8096 	beq.w	8007aba <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d14f      	bne.n	8007a52 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80079bc:	8a3b      	ldrh	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8099 	beq.w	8007af6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079c8:	8a3a      	ldrh	r2, [r7, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	f080 8093 	bcs.w	8007af6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8a3a      	ldrh	r2, [r7, #16]
 80079d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e0:	d02b      	beq.n	8007a3a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695a      	ldr	r2, [r3, #20]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a10:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0210 	bic.w	r2, r2, #16
 8007a2e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fd fc90 	bl	800535a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f87a 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a50:	e051      	b.n	8007af6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d047      	beq.n	8007afa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007a6a:	8a7b      	ldrh	r3, [r7, #18]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d044      	beq.n	8007afa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a7e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0210 	bic.w	r2, r2, #16
 8007aac:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aae:	8a7b      	ldrh	r3, [r7, #18]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f846 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ab8:	e01f      	b.n	8007afa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x326>
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8cf 	bl	8007c72 <UART_Transmit_IT>
    return;
 8007ad4:	e012      	b.n	8007afc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <HAL_UART_IRQHandler+0x34c>
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f911 	bl	8007d12 <UART_EndTransmit_IT>
    return;
 8007af0:	e004      	b.n	8007afc <HAL_UART_IRQHandler+0x34c>
    return;
 8007af2:	bf00      	nop
 8007af4:	e002      	b.n	8007afc <HAL_UART_IRQHandler+0x34c>
      return;
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <HAL_UART_IRQHandler+0x34c>
      return;
 8007afa:	bf00      	nop
  }
}
 8007afc:	3728      	adds	r7, #40	; 0x28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	08007c4b 	.word	0x08007c4b

08007b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6c:	e02c      	b.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d028      	beq.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b7c:	f7fd f9d4 	bl	8004f28 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d21d      	bcs.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695a      	ldr	r2, [r3, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e00f      	b.n	8007be8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d0c3      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d107      	bne.n	8007c30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0210 	bic.w	r2, r2, #16
 8007c2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff ff63 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b21      	cmp	r3, #33	; 0x21
 8007c84:	d13e      	bne.n	8007d04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8e:	d114      	bne.n	8007cba <UART_Transmit_IT+0x48>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d110      	bne.n	8007cba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	1c9a      	adds	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	621a      	str	r2, [r3, #32]
 8007cb8:	e008      	b.n	8007ccc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	1c59      	adds	r1, r3, #1
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6211      	str	r1, [r2, #32]
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	e000      	b.n	8007d06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d04:	2302      	movs	r3, #2
  }
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fee8 	bl	8007b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b22      	cmp	r3, #34	; 0x22
 8007d54:	f040 8087 	bne.w	8007e66 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d60:	d117      	bne.n	8007d92 <UART_Receive_IT+0x50>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d113      	bne.n	8007d92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	1c9a      	adds	r2, r3, #2
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d90:	e026      	b.n	8007de0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d007      	beq.n	8007db6 <UART_Receive_IT+0x74>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <UART_Receive_IT+0x82>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e008      	b.n	8007dd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4619      	mov	r1, r3
 8007dee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d136      	bne.n	8007e62 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0220 	bic.w	r2, r2, #32
 8007e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d10e      	bne.n	8007e52 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0210 	bic.w	r2, r2, #16
 8007e42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fe7a 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
 8007e50:	e002      	b.n	8007e58 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff fe62 	bl	8007b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e002      	b.n	8007e68 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	b09f      	sub	sp, #124	; 0x7c
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e86:	68d9      	ldr	r1, [r3, #12]
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	ea40 0301 	orr.w	r3, r0, r1
 8007e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007eb4:	f021 010c 	bic.w	r1, r1, #12
 8007eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	6999      	ldr	r1, [r3, #24]
 8007ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	ea40 0301 	orr.w	r3, r0, r1
 8007ed8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4bc5      	ldr	r3, [pc, #788]	; (80081f4 <UART_SetConfig+0x384>)
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d004      	beq.n	8007eee <UART_SetConfig+0x7e>
 8007ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	4bc3      	ldr	r3, [pc, #780]	; (80081f8 <UART_SetConfig+0x388>)
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d103      	bne.n	8007ef6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eee:	f7fd fe27 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8007ef2:	6778      	str	r0, [r7, #116]	; 0x74
 8007ef4:	e002      	b.n	8007efc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ef6:	f7fd fe0f 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8007efa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f04:	f040 80b6 	bne.w	8008074 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f0a:	461c      	mov	r4, r3
 8007f0c:	f04f 0500 	mov.w	r5, #0
 8007f10:	4622      	mov	r2, r4
 8007f12:	462b      	mov	r3, r5
 8007f14:	1891      	adds	r1, r2, r2
 8007f16:	6439      	str	r1, [r7, #64]	; 0x40
 8007f18:	415b      	adcs	r3, r3
 8007f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f20:	1912      	adds	r2, r2, r4
 8007f22:	eb45 0303 	adc.w	r3, r5, r3
 8007f26:	f04f 0000 	mov.w	r0, #0
 8007f2a:	f04f 0100 	mov.w	r1, #0
 8007f2e:	00d9      	lsls	r1, r3, #3
 8007f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f34:	00d0      	lsls	r0, r2, #3
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	1911      	adds	r1, r2, r4
 8007f3c:	6639      	str	r1, [r7, #96]	; 0x60
 8007f3e:	416b      	adcs	r3, r5
 8007f40:	667b      	str	r3, [r7, #100]	; 0x64
 8007f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f50:	415b      	adcs	r3, r3
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f5c:	f7f8 fdca 	bl	8000af4 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4ba5      	ldr	r3, [pc, #660]	; (80081fc <UART_SetConfig+0x38c>)
 8007f66:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	011e      	lsls	r6, r3, #4
 8007f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f70:	461c      	mov	r4, r3
 8007f72:	f04f 0500 	mov.w	r5, #0
 8007f76:	4622      	mov	r2, r4
 8007f78:	462b      	mov	r3, r5
 8007f7a:	1891      	adds	r1, r2, r2
 8007f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f7e:	415b      	adcs	r3, r3
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
 8007f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f86:	1912      	adds	r2, r2, r4
 8007f88:	eb45 0303 	adc.w	r3, r5, r3
 8007f8c:	f04f 0000 	mov.w	r0, #0
 8007f90:	f04f 0100 	mov.w	r1, #0
 8007f94:	00d9      	lsls	r1, r3, #3
 8007f96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f9a:	00d0      	lsls	r0, r2, #3
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	1911      	adds	r1, r2, r4
 8007fa2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fa4:	416b      	adcs	r3, r5
 8007fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	461a      	mov	r2, r3
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	1891      	adds	r1, r2, r2
 8007fb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007fc2:	f7f8 fd97 	bl	8000af4 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4b8c      	ldr	r3, [pc, #560]	; (80081fc <UART_SetConfig+0x38c>)
 8007fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	2164      	movs	r1, #100	; 0x64
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	3332      	adds	r3, #50	; 0x32
 8007fde:	4a87      	ldr	r2, [pc, #540]	; (80081fc <UART_SetConfig+0x38c>)
 8007fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fec:	441e      	add	r6, r3
 8007fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f04f 0100 	mov.w	r1, #0
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	1894      	adds	r4, r2, r2
 8007ffc:	623c      	str	r4, [r7, #32]
 8007ffe:	415b      	adcs	r3, r3
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
 8008002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008006:	1812      	adds	r2, r2, r0
 8008008:	eb41 0303 	adc.w	r3, r1, r3
 800800c:	f04f 0400 	mov.w	r4, #0
 8008010:	f04f 0500 	mov.w	r5, #0
 8008014:	00dd      	lsls	r5, r3, #3
 8008016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800801a:	00d4      	lsls	r4, r2, #3
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	1814      	adds	r4, r2, r0
 8008022:	653c      	str	r4, [r7, #80]	; 0x50
 8008024:	414b      	adcs	r3, r1
 8008026:	657b      	str	r3, [r7, #84]	; 0x54
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	461a      	mov	r2, r3
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	1891      	adds	r1, r2, r2
 8008034:	61b9      	str	r1, [r7, #24]
 8008036:	415b      	adcs	r3, r3
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008042:	f7f8 fd57 	bl	8000af4 <__aeabi_uldivmod>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4b6c      	ldr	r3, [pc, #432]	; (80081fc <UART_SetConfig+0x38c>)
 800804c:	fba3 1302 	umull	r1, r3, r3, r2
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	2164      	movs	r1, #100	; 0x64
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	3332      	adds	r3, #50	; 0x32
 800805e:	4a67      	ldr	r2, [pc, #412]	; (80081fc <UART_SetConfig+0x38c>)
 8008060:	fba2 2303 	umull	r2, r3, r2, r3
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	f003 0207 	and.w	r2, r3, #7
 800806a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4432      	add	r2, r6
 8008070:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008072:	e0b9      	b.n	80081e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008076:	461c      	mov	r4, r3
 8008078:	f04f 0500 	mov.w	r5, #0
 800807c:	4622      	mov	r2, r4
 800807e:	462b      	mov	r3, r5
 8008080:	1891      	adds	r1, r2, r2
 8008082:	6139      	str	r1, [r7, #16]
 8008084:	415b      	adcs	r3, r3
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800808c:	1912      	adds	r2, r2, r4
 800808e:	eb45 0303 	adc.w	r3, r5, r3
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f04f 0100 	mov.w	r1, #0
 800809a:	00d9      	lsls	r1, r3, #3
 800809c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080a0:	00d0      	lsls	r0, r2, #3
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	eb12 0804 	adds.w	r8, r2, r4
 80080aa:	eb43 0905 	adc.w	r9, r3, r5
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f04f 0100 	mov.w	r1, #0
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	008b      	lsls	r3, r1, #2
 80080c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080c6:	0082      	lsls	r2, r0, #2
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 fd12 	bl	8000af4 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4b49      	ldr	r3, [pc, #292]	; (80081fc <UART_SetConfig+0x38c>)
 80080d6:	fba3 2302 	umull	r2, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	011e      	lsls	r6, r3, #4
 80080de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e0:	4618      	mov	r0, r3
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	1894      	adds	r4, r2, r2
 80080ec:	60bc      	str	r4, [r7, #8]
 80080ee:	415b      	adcs	r3, r3
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080f6:	1812      	adds	r2, r2, r0
 80080f8:	eb41 0303 	adc.w	r3, r1, r3
 80080fc:	f04f 0400 	mov.w	r4, #0
 8008100:	f04f 0500 	mov.w	r5, #0
 8008104:	00dd      	lsls	r5, r3, #3
 8008106:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800810a:	00d4      	lsls	r4, r2, #3
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	1814      	adds	r4, r2, r0
 8008112:	64bc      	str	r4, [r7, #72]	; 0x48
 8008114:	414b      	adcs	r3, r1
 8008116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	008b      	lsls	r3, r1, #2
 800812c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008130:	0082      	lsls	r2, r0, #2
 8008132:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008136:	f7f8 fcdd 	bl	8000af4 <__aeabi_uldivmod>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4b2f      	ldr	r3, [pc, #188]	; (80081fc <UART_SetConfig+0x38c>)
 8008140:	fba3 1302 	umull	r1, r3, r3, r2
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	2164      	movs	r1, #100	; 0x64
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	3332      	adds	r3, #50	; 0x32
 8008152:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <UART_SetConfig+0x38c>)
 8008154:	fba2 2303 	umull	r2, r3, r2, r3
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815e:	441e      	add	r6, r3
 8008160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008162:	4618      	mov	r0, r3
 8008164:	f04f 0100 	mov.w	r1, #0
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	1894      	adds	r4, r2, r2
 800816e:	603c      	str	r4, [r7, #0]
 8008170:	415b      	adcs	r3, r3
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008178:	1812      	adds	r2, r2, r0
 800817a:	eb41 0303 	adc.w	r3, r1, r3
 800817e:	f04f 0400 	mov.w	r4, #0
 8008182:	f04f 0500 	mov.w	r5, #0
 8008186:	00dd      	lsls	r5, r3, #3
 8008188:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800818c:	00d4      	lsls	r4, r2, #3
 800818e:	4622      	mov	r2, r4
 8008190:	462b      	mov	r3, r5
 8008192:	eb12 0a00 	adds.w	sl, r2, r0
 8008196:	eb43 0b01 	adc.w	fp, r3, r1
 800819a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	4618      	mov	r0, r3
 80081a0:	f04f 0100 	mov.w	r1, #0
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	008b      	lsls	r3, r1, #2
 80081ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081b2:	0082      	lsls	r2, r0, #2
 80081b4:	4650      	mov	r0, sl
 80081b6:	4659      	mov	r1, fp
 80081b8:	f7f8 fc9c 	bl	8000af4 <__aeabi_uldivmod>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4b0e      	ldr	r3, [pc, #56]	; (80081fc <UART_SetConfig+0x38c>)
 80081c2:	fba3 1302 	umull	r1, r3, r3, r2
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2164      	movs	r1, #100	; 0x64
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	3332      	adds	r3, #50	; 0x32
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <UART_SetConfig+0x38c>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4432      	add	r2, r6
 80081e6:	609a      	str	r2, [r3, #8]
}
 80081e8:	bf00      	nop
 80081ea:	377c      	adds	r7, #124	; 0x7c
 80081ec:	46bd      	mov	sp, r7
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	bf00      	nop
 80081f4:	40011000 	.word	0x40011000
 80081f8:	40011400 	.word	0x40011400
 80081fc:	51eb851f 	.word	0x51eb851f

08008200 <__libc_init_array>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4d0d      	ldr	r5, [pc, #52]	; (8008238 <__libc_init_array+0x38>)
 8008204:	4c0d      	ldr	r4, [pc, #52]	; (800823c <__libc_init_array+0x3c>)
 8008206:	1b64      	subs	r4, r4, r5
 8008208:	10a4      	asrs	r4, r4, #2
 800820a:	2600      	movs	r6, #0
 800820c:	42a6      	cmp	r6, r4
 800820e:	d109      	bne.n	8008224 <__libc_init_array+0x24>
 8008210:	4d0b      	ldr	r5, [pc, #44]	; (8008240 <__libc_init_array+0x40>)
 8008212:	4c0c      	ldr	r4, [pc, #48]	; (8008244 <__libc_init_array+0x44>)
 8008214:	f000 f8a4 	bl	8008360 <_init>
 8008218:	1b64      	subs	r4, r4, r5
 800821a:	10a4      	asrs	r4, r4, #2
 800821c:	2600      	movs	r6, #0
 800821e:	42a6      	cmp	r6, r4
 8008220:	d105      	bne.n	800822e <__libc_init_array+0x2e>
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	f855 3b04 	ldr.w	r3, [r5], #4
 8008228:	4798      	blx	r3
 800822a:	3601      	adds	r6, #1
 800822c:	e7ee      	b.n	800820c <__libc_init_array+0xc>
 800822e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008232:	4798      	blx	r3
 8008234:	3601      	adds	r6, #1
 8008236:	e7f2      	b.n	800821e <__libc_init_array+0x1e>
 8008238:	08008398 	.word	0x08008398
 800823c:	08008398 	.word	0x08008398
 8008240:	08008398 	.word	0x08008398
 8008244:	0800839c 	.word	0x0800839c

08008248 <memset>:
 8008248:	4402      	add	r2, r0
 800824a:	4603      	mov	r3, r0
 800824c:	4293      	cmp	r3, r2
 800824e:	d100      	bne.n	8008252 <memset+0xa>
 8008250:	4770      	bx	lr
 8008252:	f803 1b01 	strb.w	r1, [r3], #1
 8008256:	e7f9      	b.n	800824c <memset+0x4>

08008258 <ceil>:
 8008258:	ec51 0b10 	vmov	r0, r1, d0
 800825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008264:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008268:	2e13      	cmp	r6, #19
 800826a:	ee10 5a10 	vmov	r5, s0
 800826e:	ee10 8a10 	vmov	r8, s0
 8008272:	460c      	mov	r4, r1
 8008274:	dc30      	bgt.n	80082d8 <ceil+0x80>
 8008276:	2e00      	cmp	r6, #0
 8008278:	da12      	bge.n	80082a0 <ceil+0x48>
 800827a:	a335      	add	r3, pc, #212	; (adr r3, 8008350 <ceil+0xf8>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f7 ffc8 	bl	8000214 <__adddf3>
 8008284:	2200      	movs	r2, #0
 8008286:	2300      	movs	r3, #0
 8008288:	f7f8 fc0a 	bl	8000aa0 <__aeabi_dcmpgt>
 800828c:	b128      	cbz	r0, 800829a <ceil+0x42>
 800828e:	2c00      	cmp	r4, #0
 8008290:	db55      	blt.n	800833e <ceil+0xe6>
 8008292:	432c      	orrs	r4, r5
 8008294:	d057      	beq.n	8008346 <ceil+0xee>
 8008296:	4c30      	ldr	r4, [pc, #192]	; (8008358 <ceil+0x100>)
 8008298:	2500      	movs	r5, #0
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	e025      	b.n	80082ec <ceil+0x94>
 80082a0:	4f2e      	ldr	r7, [pc, #184]	; (800835c <ceil+0x104>)
 80082a2:	4137      	asrs	r7, r6
 80082a4:	ea01 0307 	and.w	r3, r1, r7
 80082a8:	4303      	orrs	r3, r0
 80082aa:	d01f      	beq.n	80082ec <ceil+0x94>
 80082ac:	a328      	add	r3, pc, #160	; (adr r3, 8008350 <ceil+0xf8>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ffaf 	bl	8000214 <__adddf3>
 80082b6:	2200      	movs	r2, #0
 80082b8:	2300      	movs	r3, #0
 80082ba:	f7f8 fbf1 	bl	8000aa0 <__aeabi_dcmpgt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0eb      	beq.n	800829a <ceil+0x42>
 80082c2:	2c00      	cmp	r4, #0
 80082c4:	bfc2      	ittt	gt
 80082c6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80082ca:	fa43 f606 	asrgt.w	r6, r3, r6
 80082ce:	19a4      	addgt	r4, r4, r6
 80082d0:	ea24 0407 	bic.w	r4, r4, r7
 80082d4:	2500      	movs	r5, #0
 80082d6:	e7e0      	b.n	800829a <ceil+0x42>
 80082d8:	2e33      	cmp	r6, #51	; 0x33
 80082da:	dd0b      	ble.n	80082f4 <ceil+0x9c>
 80082dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082e0:	d104      	bne.n	80082ec <ceil+0x94>
 80082e2:	ee10 2a10 	vmov	r2, s0
 80082e6:	460b      	mov	r3, r1
 80082e8:	f7f7 ff94 	bl	8000214 <__adddf3>
 80082ec:	ec41 0b10 	vmov	d0, r0, r1
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295
 80082fc:	fa23 f707 	lsr.w	r7, r3, r7
 8008300:	4207      	tst	r7, r0
 8008302:	d0f3      	beq.n	80082ec <ceil+0x94>
 8008304:	a312      	add	r3, pc, #72	; (adr r3, 8008350 <ceil+0xf8>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ff83 	bl	8000214 <__adddf3>
 800830e:	2200      	movs	r2, #0
 8008310:	2300      	movs	r3, #0
 8008312:	f7f8 fbc5 	bl	8000aa0 <__aeabi_dcmpgt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d0bf      	beq.n	800829a <ceil+0x42>
 800831a:	2c00      	cmp	r4, #0
 800831c:	dd02      	ble.n	8008324 <ceil+0xcc>
 800831e:	2e14      	cmp	r6, #20
 8008320:	d103      	bne.n	800832a <ceil+0xd2>
 8008322:	3401      	adds	r4, #1
 8008324:	ea25 0507 	bic.w	r5, r5, r7
 8008328:	e7b7      	b.n	800829a <ceil+0x42>
 800832a:	2301      	movs	r3, #1
 800832c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008330:	fa03 f606 	lsl.w	r6, r3, r6
 8008334:	4435      	add	r5, r6
 8008336:	4545      	cmp	r5, r8
 8008338:	bf38      	it	cc
 800833a:	18e4      	addcc	r4, r4, r3
 800833c:	e7f2      	b.n	8008324 <ceil+0xcc>
 800833e:	2500      	movs	r5, #0
 8008340:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008344:	e7a9      	b.n	800829a <ceil+0x42>
 8008346:	4625      	mov	r5, r4
 8008348:	e7a7      	b.n	800829a <ceil+0x42>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	8800759c 	.word	0x8800759c
 8008354:	7e37e43c 	.word	0x7e37e43c
 8008358:	3ff00000 	.word	0x3ff00000
 800835c:	000fffff 	.word	0x000fffff

08008360 <_init>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	bf00      	nop
 8008364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008366:	bc08      	pop	{r3}
 8008368:	469e      	mov	lr, r3
 800836a:	4770      	bx	lr

0800836c <_fini>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	bf00      	nop
 8008370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008372:	bc08      	pop	{r3}
 8008374:	469e      	mov	lr, r3
 8008376:	4770      	bx	lr
