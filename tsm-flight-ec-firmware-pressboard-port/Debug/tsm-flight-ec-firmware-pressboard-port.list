
tsm-flight-ec-firmware-pressboard-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e98c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800eb58  0800eb58  0001eb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f010  0800f010  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800f010  0800f010  0001f010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f018  0800f018  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f018  0800f018  0001f018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f01c  0800f01c  0001f01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800f020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000225c  20000250  0800f270  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024ac  0800f270  000224ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c3ba  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048fb  00000000  00000000  0004c63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00050f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  000524a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026879  00000000  00000000  00053848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc99  00000000  00000000  0007a0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da001  00000000  00000000  00097d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bac  00000000  00000000  00171db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000250 	.word	0x20000250
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800eb3c 	.word	0x0800eb3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000254 	.word	0x20000254
 8000204:	0800eb3c 	.word	0x0800eb3c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96e 	b.w	8000f04 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468c      	mov	ip, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8083 	bne.w	8000d56 <__udivmoddi4+0x116>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d947      	bls.n	8000ce6 <__udivmoddi4+0xa6>
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	b142      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5c:	f1c2 0020 	rsb	r0, r2, #32
 8000c60:	fa24 f000 	lsr.w	r0, r4, r0
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4097      	lsls	r7, r2
 8000c68:	ea40 0c01 	orr.w	ip, r0, r1
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fbbc f6f8 	udiv	r6, ip, r8
 8000c78:	fa1f fe87 	uxth.w	lr, r7
 8000c7c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb06 f10e 	mul.w	r1, r6, lr
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x60>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 8119 	bcs.w	8000ec8 <__udivmoddi4+0x288>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 8116 	bls.w	8000ec8 <__udivmoddi4+0x288>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x8c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	f080 8105 	bcs.w	8000ecc <__udivmoddi4+0x28c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8102 	bls.w	8000ecc <__udivmoddi4+0x28c>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd0:	eba4 040e 	sub.w	r4, r4, lr
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa0>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	b902      	cbnz	r2, 8000cea <__udivmoddi4+0xaa>
 8000ce8:	deff      	udf	#255	; 0xff
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d150      	bne.n	8000d94 <__udivmoddi4+0x154>
 8000cf2:	1bcb      	subs	r3, r1, r7
 8000cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d02:	0c21      	lsrs	r1, r4, #16
 8000d04:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0xe4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0xe2>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	f200 80e9 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x10c>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x10a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80d9 	bhi.w	8000efc <__udivmoddi4+0x2bc>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e7bf      	b.n	8000cd6 <__udivmoddi4+0x96>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0x12e>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <__udivmoddi4+0x282>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x1cc>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0x140>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80b8 	bhi.w	8000ef0 <__udivmoddi4+0x2b0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0103 	sbc.w	r1, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	468c      	mov	ip, r1
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0a8      	beq.n	8000ce0 <__udivmoddi4+0xa0>
 8000d8e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000d94:	f1c2 0320 	rsb	r3, r2, #32
 8000d98:	fa20 f603 	lsr.w	r6, r0, r3
 8000d9c:	4097      	lsls	r7, r2
 8000d9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000da2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da6:	40d9      	lsrs	r1, r3
 8000da8:	4330      	orrs	r0, r6
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f108 	mul.w	r1, r6, r8
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x19c>
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dce:	f080 808d 	bcs.w	8000eec <__udivmoddi4+0x2ac>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 808a 	bls.w	8000eec <__udivmoddi4+0x2ac>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	443b      	add	r3, r7
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b281      	uxth	r1, r0
 8000de0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb00 f308 	mul.w	r3, r0, r8
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x1c4>
 8000df4:	1879      	adds	r1, r7, r1
 8000df6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfa:	d273      	bcs.n	8000ee4 <__udivmoddi4+0x2a4>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d971      	bls.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4439      	add	r1, r7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e0a:	e778      	b.n	8000cfe <__udivmoddi4+0xbe>
 8000e0c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e10:	fa03 f406 	lsl.w	r4, r3, r6
 8000e14:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e26:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	0c3b      	lsrs	r3, r7, #16
 8000e2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e32:	fa1f f884 	uxth.w	r8, r4
 8000e36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e42:	458a      	cmp	sl, r1
 8000e44:	fa02 f206 	lsl.w	r2, r2, r6
 8000e48:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x220>
 8000e4e:	1861      	adds	r1, r4, r1
 8000e50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e54:	d248      	bcs.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e56:	458a      	cmp	sl, r1
 8000e58:	d946      	bls.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5e:	4421      	add	r1, r4
 8000e60:	eba1 010a 	sub.w	r1, r1, sl
 8000e64:	b2bf      	uxth	r7, r7
 8000e66:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e72:	fb00 f808 	mul.w	r8, r0, r8
 8000e76:	45b8      	cmp	r8, r7
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x24a>
 8000e7a:	19e7      	adds	r7, r4, r7
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d22e      	bcs.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d92c      	bls.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4427      	add	r7, r4
 8000e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8e:	eba7 0708 	sub.w	r7, r7, r8
 8000e92:	fba0 8902 	umull	r8, r9, r0, r2
 8000e96:	454f      	cmp	r7, r9
 8000e98:	46c6      	mov	lr, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	d31a      	bcc.n	8000ed4 <__udivmoddi4+0x294>
 8000e9e:	d017      	beq.n	8000ed0 <__udivmoddi4+0x290>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x27a>
 8000ea2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eaa:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eae:	40f2      	lsrs	r2, r6
 8000eb0:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb4:	40f7      	lsrs	r7, r6
 8000eb6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	462e      	mov	r6, r5
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	e70b      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fd      	b.n	8000ccc <__udivmoddi4+0x8c>
 8000ed0:	4543      	cmp	r3, r8
 8000ed2:	d2e5      	bcs.n	8000ea0 <__udivmoddi4+0x260>
 8000ed4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed8:	eb69 0104 	sbc.w	r1, r9, r4
 8000edc:	3801      	subs	r0, #1
 8000ede:	e7df      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e7d2      	b.n	8000e8a <__udivmoddi4+0x24a>
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	e78d      	b.n	8000e04 <__udivmoddi4+0x1c4>
 8000ee8:	4681      	mov	r9, r0
 8000eea:	e7b9      	b.n	8000e60 <__udivmoddi4+0x220>
 8000eec:	4666      	mov	r6, ip
 8000eee:	e775      	b.n	8000ddc <__udivmoddi4+0x19c>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e74a      	b.n	8000d8a <__udivmoddi4+0x14a>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	4439      	add	r1, r7
 8000efa:	e713      	b.n	8000d24 <__udivmoddi4+0xe4>
 8000efc:	3802      	subs	r0, #2
 8000efe:	443c      	add	r4, r7
 8000f00:	e724      	b.n	8000d4c <__udivmoddi4+0x10c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <init_autosequence_timings>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_timings() {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	// Valve timings read from flash
	// PID start delay read from flash
	// Film cooling start time read from flash
	// hotfire duration read from flash

	autosequence.startup_motor_start_delay_ms = 500;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <init_autosequence_timings+0x30>)
 8000f0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f12:	601a      	str	r2, [r3, #0]

	autosequence.post_vent_on_time_ms = 1000;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <init_autosequence_timings+0x30>)
 8000f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1a:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_off_time_ms = 6000;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <init_autosequence_timings+0x30>)
 8000f1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f22:	61da      	str	r2, [r3, #28]
	autosequence.post_purge_off_time_ms = 10000;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <init_autosequence_timings+0x30>)
 8000f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2a:	621a      	str	r2, [r3, #32]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000730 	.word	0x20000730

08000f3c <enter_abort_state>:

/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 */
void enter_abort_state() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	// Enter Abort state
	// This line is for in case someone forgets to set Abort elsewhere
	STATE = Abort;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <enter_abort_state+0x70>)
 8000f42:	2206      	movs	r2, #6
 8000f44:	701a      	strb	r2, [r3, #0]

	// Close MPVs
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f006 f941 	bl	80071d0 <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2005      	movs	r0, #5
 8000f52:	f006 f93d 	bl	80071d0 <set_valve_channel>
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 8000f56:	2100      	movs	r1, #0
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 f939 	bl	80071d0 <set_valve_channel>

	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2008      	movs	r0, #8
 8000f62:	f006 f935 	bl	80071d0 <set_valve_channel>

	// Close control valves
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f006 f931 	bl	80071d0 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2003      	movs	r0, #3
 8000f72:	f006 f92d 	bl	80071d0 <set_valve_channel>

	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f006 f929 	bl	80071d0 <set_valve_channel>

	// Open vent valves
	//set_valve_channel(FUEL_TANK_VENT_VALVE_CH, VALVE_ON);
	send_gse_set_vlv_cmd(GSE_FUEL_TANK_VENT_VALVE_CH, VALVE_ON);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2009      	movs	r0, #9
 8000f82:	f000 fa73 	bl	800146c <send_gse_set_vlv_cmd>
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f006 f921 	bl	80071d0 <set_valve_channel>

	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2007      	movs	r0, #7
 8000f92:	f006 f91d 	bl	80071d0 <set_valve_channel>
	*/

	// TODO: press board motor closing

	// Stop TPC (not an actuation)
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <enter_abort_state+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <enter_abort_state+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200003b4 	.word	0x200003b4
 8000fb0:	20000730 	.word	0x20000730

08000fb4 <enter_safe_disarm_state>:
 * Call this function to safe the system.
 * Not the same as abort.
 *
 * Can only be called in AutoPress and Startup.
 */
void enter_safe_disarm_state() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	// Including this line in case programmer forgets to set it elsewhere
	STATE = Safe;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <enter_safe_disarm_state+0x20>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	701a      	strb	r2, [r3, #0]

	// Close control valves and go back to Manual.
	// TODO: should tank enable be looked at here?
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f006 f905 	bl	80071d0 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f006 f901 	bl	80071d0 <set_valve_channel>

	// TODO: go back to Manual?
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200003b4 	.word	0x200003b4

08000fd8 <manual_state_transition>:

void manual_state_transition(uint8_t next_state) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]

	// Aborts work in any state
	if (next_state == Abort) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d108      	bne.n	8000ffa <manual_state_transition+0x22>
		STATE = Abort;
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <manual_state_transition+0x118>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	701a      	strb	r2, [r3, #0]
		enter_abort_state();
 8000fee:	f7ff ffa5 	bl	8000f3c <enter_abort_state>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f004 fb62 	bl	80056bc <set_status_flag>
		return;
 8000ff8:	e077      	b.n	80010ea <manual_state_transition+0x112>
	}

	// Check current state to determine next state transition
	if (STATE == Manual) {
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <manual_state_transition+0x118>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <manual_state_transition+0x38>
		if (next_state == Armed) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d170      	bne.n	80010ea <manual_state_transition+0x112>
			STATE = Armed;
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <manual_state_transition+0x118>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e06c      	b.n	80010ea <manual_state_transition+0x112>
		}
	}
	else if (STATE == Armed) {
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <manual_state_transition+0x118>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10d      	bne.n	8001034 <manual_state_transition+0x5c>
		if (next_state == Manual) {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <manual_state_transition+0x4e>
			STATE = Manual;
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <manual_state_transition+0x118>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e061      	b.n	80010ea <manual_state_transition+0x112>
		}
		else if (next_state == AutoPress) {
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d15e      	bne.n	80010ea <manual_state_transition+0x112>
			STATE = AutoPress;
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <manual_state_transition+0x118>)
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e05a      	b.n	80010ea <manual_state_transition+0x112>
		}
	}
	else if (STATE == AutoPress) {
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <manual_state_transition+0x118>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d120      	bne.n	800107e <manual_state_transition+0xa6>
		if (next_state == Manual) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <manual_state_transition+0x76>
			STATE = Safe;
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <manual_state_transition+0x118>)
 8001044:	2208      	movs	r2, #8
 8001046:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001048:	f7ff ffb4 	bl	8000fb4 <enter_safe_disarm_state>
 800104c:	e04d      	b.n	80010ea <manual_state_transition+0x112>
		}
		// Autopress is given instead of Startup to simplify the GUI code
		else if (next_state == AutoPress) {
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d14a      	bne.n	80010ea <manual_state_transition+0x112>
			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001054:	2100      	movs	r1, #0
 8001056:	2000      	movs	r0, #0
 8001058:	f006 f8ba 	bl	80071d0 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 800105c:	2100      	movs	r1, #0
 800105e:	2003      	movs	r0, #3
 8001060:	f006 f8b6 	bl	80071d0 <set_valve_channel>

			autosequence.startup_start_time_ms = SYS_MILLIS;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <manual_state_transition+0x11c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <manual_state_transition+0x120>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <manual_state_transition+0x124>)
 8001074:	6293      	str	r3, [r2, #40]	; 0x28
			STATE = Startup;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <manual_state_transition+0x118>)
 8001078:	2203      	movs	r2, #3
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e035      	b.n	80010ea <manual_state_transition+0x112>
		}
	}
	else if (STATE == Startup) {
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <manual_state_transition+0x118>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d11c      	bne.n	80010c0 <manual_state_transition+0xe8>
		if (next_state == Manual) {
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <manual_state_transition+0xc0>
			STATE = Safe;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <manual_state_transition+0x118>)
 800108e:	2208      	movs	r2, #8
 8001090:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001092:	f7ff ff8f 	bl	8000fb4 <enter_safe_disarm_state>
 8001096:	e028      	b.n	80010ea <manual_state_transition+0x112>
		}
		else if (next_state == Ignition) {
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d125      	bne.n	80010ea <manual_state_transition+0x112>
			STATE = Ignition;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <manual_state_transition+0x118>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	701a      	strb	r2, [r3, #0]
			autosequence.ignition_start_time_ms = SYS_MILLIS;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <manual_state_transition+0x11c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <manual_state_transition+0x120>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	099b      	lsrs	r3, r3, #6
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <manual_state_transition+0x124>)
 80010b4:	62d3      	str	r3, [r2, #44]	; 0x2c
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
 80010b6:	2101      	movs	r1, #1
 80010b8:	2007      	movs	r0, #7
 80010ba:	f006 f889 	bl	80071d0 <set_valve_channel>
 80010be:	e014      	b.n	80010ea <manual_state_transition+0x112>
		}
	}
	else if (STATE == IgnitionFail) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <manual_state_transition+0x118>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d106      	bne.n	80010d6 <manual_state_transition+0xfe>
		if (next_state == Manual) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <manual_state_transition+0x112>
			STATE = Manual;  // Operator must dismiss IgnitionFail condition
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <manual_state_transition+0x118>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e009      	b.n	80010ea <manual_state_transition+0x112>
		}
	}
	else if (STATE == Abort) {
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <manual_state_transition+0x118>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d105      	bne.n	80010ea <manual_state_transition+0x112>
		if (next_state == Manual) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <manual_state_transition+0x112>
			STATE = Manual;  // Operator must dismiss Abort condition
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <manual_state_transition+0x118>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200003b4 	.word	0x200003b4
 80010f4:	20000ca8 	.word	0x20000ca8
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	20000730 	.word	0x20000730

08001100 <get_ellapsed_time_in_autosequence_state_ms>:

/**
 * Only works for Ignition, Hotfire, and Post
 */
uint32_t get_ellapsed_time_in_autosequence_state_ms() {
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	if (STATE == Startup) {
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d10a      	bne.n	8001122 <get_ellapsed_time_in_autosequence_state_ms+0x22>
		return SYS_MILLIS - autosequence.startup_start_time_ms;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	099a      	lsrs	r2, r3, #6
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	e02d      	b.n	800117e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Ignition) {
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d10a      	bne.n	8001140 <get_ellapsed_time_in_autosequence_state_ms+0x40>
		return SYS_MILLIS - autosequence.ignition_start_time_ms;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	099a      	lsrs	r2, r3, #6
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	e01e      	b.n	800117e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Hotfire) {
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d10a      	bne.n	800115e <get_ellapsed_time_in_autosequence_state_ms+0x5e>
		return SYS_MILLIS - autosequence.hotfire_start_time_ms;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	099a      	lsrs	r2, r3, #6
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	e00f      	b.n	800117e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Post) {
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d10a      	bne.n	800117c <get_ellapsed_time_in_autosequence_state_ms+0x7c>
		return SYS_MILLIS - autosequence.post_start_time_ms;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	099a      	lsrs	r2, r3, #6
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	e000      	b.n	800117e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else {
		return 0;
 800117c:	2300      	movs	r3, #0
	}
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	200003b4 	.word	0x200003b4
 800118c:	20000ca8 	.word	0x20000ca8
 8001190:	10624dd3 	.word	0x10624dd3
 8001194:	20000730 	.word	0x20000730

08001198 <get_remaining_time_in_autosequence_state>:

uint32_t get_remaining_time_in_autosequence_state(uint32_t T_state) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if (STATE == Ignition) {
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <get_remaining_time_in_autosequence_state+0x5c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d10b      	bne.n	80011c0 <get_remaining_time_in_autosequence_state+0x28>
		return (autosequence.ignition_ignitor_on_delay_ms
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <get_remaining_time_in_autosequence_state+0x60>)
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
				+ autosequence.ignition_ignitor_high_duration_ms) - T_state;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <get_remaining_time_in_autosequence_state+0x60>)
 80011b2:	88db      	ldrh	r3, [r3, #6]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	e012      	b.n	80011e6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Hotfire) {
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <get_remaining_time_in_autosequence_state+0x5c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d104      	bne.n	80011d2 <get_remaining_time_in_autosequence_state+0x3a>
		return autosequence.hotfire_test_duration_ms - T_state;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <get_remaining_time_in_autosequence_state+0x60>)
 80011ca:	695a      	ldr	r2, [r3, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	e009      	b.n	80011e6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Post) {
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <get_remaining_time_in_autosequence_state+0x5c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d104      	bne.n	80011e4 <get_remaining_time_in_autosequence_state+0x4c>
		return autosequence.post_purge_off_time_ms - T_state;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <get_remaining_time_in_autosequence_state+0x60>)
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	e000      	b.n	80011e6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else {
		return 0;
 80011e4:	2300      	movs	r3, #0
	}
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200003b4 	.word	0x200003b4
 80011f8:	20000730 	.word	0x20000730

080011fc <execute_autosequence>:


void execute_autosequence() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

	// Autosequence timings are done relative to the start of the state
	uint32_t T_state = get_ellapsed_time_in_autosequence_state_ms();
 8001202:	f7ff ff7d 	bl	8001100 <get_ellapsed_time_in_autosequence_state_ms>
 8001206:	6078      	str	r0, [r7, #4]

	// Update time remaining in state for GUI
	state_rem_duration = get_remaining_time_in_autosequence_state(T_state);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ffc5 	bl	8001198 <get_remaining_time_in_autosequence_state>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b8e      	ldr	r3, [pc, #568]	; (800144c <execute_autosequence+0x250>)
 8001214:	601a      	str	r2, [r3, #0]

	// Doesn't use if else within each state in case the timings overlap

	if (STATE == Ignition) {
 8001216:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <execute_autosequence+0x254>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d14c      	bne.n	80012b8 <execute_autosequence+0xbc>
		// Purge should've turned on when entering Ignition
		// Wait for the delay, then turn ignitor on
		if (T_state >= autosequence.ignition_ignitor_on_delay_ms) {
 800121e:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <execute_autosequence+0x258>)
 8001220:	889b      	ldrh	r3, [r3, #4]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4293      	cmp	r3, r2
 800122a:	d303      	bcc.n	8001234 <execute_autosequence+0x38>
			set_valve_channel(IGNITOR_CH, VALVE_ON);
 800122c:	2101      	movs	r1, #1
 800122e:	2006      	movs	r0, #6
 8001230:	f005 ffce 	bl	80071d0 <set_valve_channel>
		}
		// Hold ignitor high for a certain amount of time
		if (T_state >= autosequence.ignition_ignitor_on_delay_ms
 8001234:	4b87      	ldr	r3, [pc, #540]	; (8001454 <execute_autosequence+0x258>)
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
				+ autosequence.ignition_ignitor_high_duration_ms) {
 800123c:	4b85      	ldr	r3, [pc, #532]	; (8001454 <execute_autosequence+0x258>)
 800123e:	88db      	ldrh	r3, [r3, #6]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	461a      	mov	r2, r3
		if (T_state >= autosequence.ignition_ignitor_on_delay_ms
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4293      	cmp	r3, r2
 800124a:	f0c0 80fb 	bcc.w	8001444 <execute_autosequence+0x248>

			uint8_t ignitor_break_detected = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	70fb      	strb	r3, [r7, #3]

			// TODO
			if (ignitor_break_detected) {
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01b      	beq.n	8001290 <execute_autosequence+0x94>
				// Transition to Hotfire state
				STATE = Hotfire;
 8001258:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <execute_autosequence+0x254>)
 800125a:	2205      	movs	r2, #5
 800125c:	701a      	strb	r2, [r3, #0]
				autosequence.hotfire_start_time_ms = SYS_MILLIS;
 800125e:	4b7e      	ldr	r3, [pc, #504]	; (8001458 <execute_autosequence+0x25c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	4a7d      	ldr	r2, [pc, #500]	; (800145c <execute_autosequence+0x260>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	4a79      	ldr	r2, [pc, #484]	; (8001454 <execute_autosequence+0x258>)
 800126e:	6313      	str	r3, [r2, #48]	; 0x30

				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8001270:	2100      	movs	r1, #0
 8001272:	2006      	movs	r0, #6
 8001274:	f005 ffac 	bl	80071d0 <set_valve_channel>

				// Open LOX MPV
				set_valve_channel(LOX_MPV_VALVE_CH, VALVE_ON);
 8001278:	2101      	movs	r1, #1
 800127a:	2001      	movs	r0, #1
 800127c:	f005 ffa8 	bl	80071d0 <set_valve_channel>

				// Open LOX control valve
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_ON);
 8001280:	2101      	movs	r1, #1
 8001282:	2000      	movs	r0, #0
 8001284:	f005 ffa4 	bl	80071d0 <set_valve_channel>

				// Disable telemetry to prevent telem from blocking valve timings
				// to prevent a hard start
				// TODO: get rid of this when DMA tx is working?
				telem_disabled = 1;
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <execute_autosequence+0x264>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]

	else if (STATE == Abort) {
		// Actuations should've been handled already during state transition.
		// Wait for the operator to go back to Manual.
	}
}
 800128e:	e0d9      	b.n	8001444 <execute_autosequence+0x248>
				STATE = IgnitionFail;
 8001290:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <execute_autosequence+0x254>)
 8001292:	2209      	movs	r2, #9
 8001294:	701a      	strb	r2, [r3, #0]
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f005 ff99 	bl	80071d0 <set_valve_channel>
				set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 800129e:	2100      	movs	r1, #0
 80012a0:	2003      	movs	r0, #3
 80012a2:	f005 ff95 	bl	80071d0 <set_valve_channel>
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 80012a6:	2100      	movs	r1, #0
 80012a8:	2006      	movs	r0, #6
 80012aa:	f005 ff91 	bl	80071d0 <set_valve_channel>
				set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2007      	movs	r0, #7
 80012b2:	f005 ff8d 	bl	80071d0 <set_valve_channel>
}
 80012b6:	e0c5      	b.n	8001444 <execute_autosequence+0x248>
	else if (STATE == Hotfire) {
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <execute_autosequence+0x254>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	f040 808b 	bne.w	80013d8 <execute_autosequence+0x1dc>
		if (T_state >= (0 + autosequence.hotfire_pid_start_delay_ms)
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <execute_autosequence+0x258>)
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d30b      	bcc.n	80012e8 <execute_autosequence+0xec>
				&& !autosequence.hotfire_lox_tank_enable_PID_control) {
 80012d0:	4b60      	ldr	r3, [pc, #384]	; (8001454 <execute_autosequence+0x258>)
 80012d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d106      	bne.n	80012e8 <execute_autosequence+0xec>
			tank_init_control_loop(&tanks[LOX_TANK_NUM]);
 80012da:	4862      	ldr	r0, [pc, #392]	; (8001464 <execute_autosequence+0x268>)
 80012dc:	f004 fd47 	bl	8005d6e <tank_init_control_loop>
			autosequence.hotfire_lox_tank_enable_PID_control = 1;
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <execute_autosequence+0x258>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (T_state >= autosequence.hotfire_fuel_mpv_delay_ms) {
 80012e8:	4b5a      	ldr	r3, [pc, #360]	; (8001454 <execute_autosequence+0x258>)
 80012ea:	7a1b      	ldrb	r3, [r3, #8]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d30e      	bcc.n	8001314 <execute_autosequence+0x118>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_ON);
 80012f6:	2101      	movs	r1, #1
 80012f8:	2005      	movs	r0, #5
 80012fa:	f005 ff69 	bl	80071d0 <set_valve_channel>
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_ON);
 80012fe:	2101      	movs	r1, #1
 8001300:	2004      	movs	r0, #4
 8001302:	f005 ff65 	bl	80071d0 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_ON);
 8001306:	2101      	movs	r1, #1
 8001308:	2003      	movs	r0, #3
 800130a:	f005 ff61 	bl	80071d0 <set_valve_channel>
			telem_disabled = 0;
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <execute_autosequence+0x264>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		if (T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <execute_autosequence+0x258>)
 8001316:	7a1b      	ldrb	r3, [r3, #8]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
				+ autosequence.hotfire_pid_start_delay_ms)
 800131c:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <execute_autosequence+0x258>)
 800131e:	899b      	ldrh	r3, [r3, #12]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	461a      	mov	r2, r3
		if (T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4293      	cmp	r3, r2
 800132a:	d30b      	bcc.n	8001344 <execute_autosequence+0x148>
				&& !autosequence.hotfire_fuel_tank_enable_PID_control) {
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <execute_autosequence+0x258>)
 800132e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <execute_autosequence+0x148>
			tank_init_control_loop(&tanks[FUEL_TANK_NUM]);
 8001336:	484c      	ldr	r0, [pc, #304]	; (8001468 <execute_autosequence+0x26c>)
 8001338:	f004 fd19 	bl	8005d6e <tank_init_control_loop>
			autosequence.hotfire_fuel_tank_enable_PID_control = 1;
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <execute_autosequence+0x258>)
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		if (T_state >= autosequence.hotfire_film_cooling_on_time_ms) {
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <execute_autosequence+0x258>)
 8001346:	895b      	ldrh	r3, [r3, #10]
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4293      	cmp	r3, r2
 8001350:	d303      	bcc.n	800135a <execute_autosequence+0x15e>
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_ON);
 8001352:	2101      	movs	r1, #1
 8001354:	2008      	movs	r0, #8
 8001356:	f005 ff3b 	bl	80071d0 <set_valve_channel>
		if (T_state >= autosequence.hotfire_purge_off_time_ms) {
 800135a:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <execute_autosequence+0x258>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d303      	bcc.n	800136c <execute_autosequence+0x170>
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 8001364:	2100      	movs	r1, #0
 8001366:	2007      	movs	r0, #7
 8001368:	f005 ff32 	bl	80071d0 <set_valve_channel>
		if (T_state >= autosequence.hotfire_test_duration_ms) {
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <execute_autosequence+0x258>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d366      	bcc.n	8001444 <execute_autosequence+0x248>
			STATE = Post;
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <execute_autosequence+0x254>)
 8001378:	2207      	movs	r2, #7
 800137a:	701a      	strb	r2, [r3, #0]
			autosequence.post_start_time_ms = SYS_MILLIS;
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <execute_autosequence+0x25c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <execute_autosequence+0x260>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <execute_autosequence+0x258>)
 800138c:	6353      	str	r3, [r2, #52]	; 0x34
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 800138e:	2100      	movs	r1, #0
 8001390:	2004      	movs	r0, #4
 8001392:	f005 ff1d 	bl	80071d0 <set_valve_channel>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 8001396:	2100      	movs	r1, #0
 8001398:	2005      	movs	r0, #5
 800139a:	f005 ff19 	bl	80071d0 <set_valve_channel>
			set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 800139e:	2100      	movs	r1, #0
 80013a0:	2001      	movs	r0, #1
 80013a2:	f005 ff15 	bl	80071d0 <set_valve_channel>
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2008      	movs	r0, #8
 80013aa:	f005 ff11 	bl	80071d0 <set_valve_channel>
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f005 ff0d 	bl	80071d0 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2003      	movs	r0, #3
 80013ba:	f005 ff09 	bl	80071d0 <set_valve_channel>
			autosequence.hotfire_lox_tank_enable_PID_control = 0;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <execute_autosequence+0x258>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <execute_autosequence+0x258>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 80013ce:	2101      	movs	r1, #1
 80013d0:	2007      	movs	r0, #7
 80013d2:	f005 fefd 	bl	80071d0 <set_valve_channel>
}
 80013d6:	e035      	b.n	8001444 <execute_autosequence+0x248>
	else if (STATE == Post) {
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <execute_autosequence+0x254>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d126      	bne.n	800142e <execute_autosequence+0x232>
		if (T_state >= autosequence.post_vent_on_time_ms) {
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <execute_autosequence+0x258>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d307      	bcc.n	80013fa <execute_autosequence+0x1fe>
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2002      	movs	r0, #2
 80013ee:	f005 feef 	bl	80071d0 <set_valve_channel>
			send_gse_set_vlv_cmd(GSE_FUEL_TANK_VENT_VALVE_CH, VALVE_ON);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2009      	movs	r0, #9
 80013f6:	f000 f839 	bl	800146c <send_gse_set_vlv_cmd>
		if (T_state >= autosequence.post_vent_off_time_ms) {
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <execute_autosequence+0x258>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d307      	bcc.n	8001414 <execute_autosequence+0x218>
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_OFF);
 8001404:	2100      	movs	r1, #0
 8001406:	2002      	movs	r0, #2
 8001408:	f005 fee2 	bl	80071d0 <set_valve_channel>
			send_gse_set_vlv_cmd(GSE_FUEL_TANK_VENT_VALVE_CH, VALVE_OFF);
 800140c:	2100      	movs	r1, #0
 800140e:	2009      	movs	r0, #9
 8001410:	f000 f82c 	bl	800146c <send_gse_set_vlv_cmd>
		if (T_state >= autosequence.post_purge_off_time_ms) {
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <execute_autosequence+0x258>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d312      	bcc.n	8001444 <execute_autosequence+0x248>
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 800141e:	2100      	movs	r1, #0
 8001420:	2007      	movs	r0, #7
 8001422:	f005 fed5 	bl	80071d0 <set_valve_channel>
			STATE = Manual;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <execute_autosequence+0x254>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
}
 800142c:	e00a      	b.n	8001444 <execute_autosequence+0x248>
	else if (STATE == Safe) {
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <execute_autosequence+0x254>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d103      	bne.n	800143e <execute_autosequence+0x242>
		STATE = Manual;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <execute_autosequence+0x254>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	e002      	b.n	8001444 <execute_autosequence+0x248>
	else if (STATE == IgnitionFail) {
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <execute_autosequence+0x254>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b09      	cmp	r3, #9
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200003ec 	.word	0x200003ec
 8001450:	200003b4 	.word	0x200003b4
 8001454:	20000730 	.word	0x20000730
 8001458:	20000ca8 	.word	0x20000ca8
 800145c:	10624dd3 	.word	0x10624dd3
 8001460:	20000687 	.word	0x20000687
 8001464:	20000688 	.word	0x20000688
 8001468:	200006dc 	.word	0x200006dc

0800146c <send_gse_set_vlv_cmd>:
#define VLV_CMD_SZ (17)

/**
 * Pack and send a valve command to the GSE controller
 */
void send_gse_set_vlv_cmd(uint32_t vlv_num, uint8_t vlv_state) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd_packet[VLV_CMD_SZ];
	uint8_t cobs_cmd_packet[VLV_CMD_SZ+2];

	cmd_packet[0] = 8;  // set_vlv
 8001478:	2308      	movs	r3, #8
 800147a:	773b      	strb	r3, [r7, #28]
	cmd_packet[1] = FLIGHT_EC_ADDR;       // origin_addr
 800147c:	2303      	movs	r3, #3
 800147e:	777b      	strb	r3, [r7, #29]
	cmd_packet[2] = GSE_CONTROLLER_ADDR;  // target_addr
 8001480:	2300      	movs	r3, #0
 8001482:	77bb      	strb	r3, [r7, #30]
	cmd_packet[3] = 1;  // priority
 8001484:	2301      	movs	r3, #1
 8001486:	77fb      	strb	r3, [r7, #31]
	cmd_packet[4] = 1;  // num_packets
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3020 	strb.w	r3, [r7, #32]
	cmd_packet[5] = 1;  // do_cobbs
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	cmd_packet[6] = 0;  // checksum
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	cmd_packet[7] = 0;  // checksum
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	cmd_packet[8] = (SYS_MICROS >> 0) & 0xFF;    // timestamp
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <send_gse_set_vlv_cmd+0xc4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	cmd_packet[9] = (SYS_MICROS >> 8) & 0xFF;    // timestamp
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <send_gse_set_vlv_cmd+0xc4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	cmd_packet[10] = (SYS_MICROS >> 16) & 0xFF;  // timestamp
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <send_gse_set_vlv_cmd+0xc4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cmd_packet[11] = (SYS_MICROS >> 24) & 0xFF;  // timestamp
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <send_gse_set_vlv_cmd+0xc4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	0e1b      	lsrs	r3, r3, #24
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	cmd_packet[12] = (vlv_num >> 0) & 0xFF;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	cmd_packet[13] = (vlv_num >> 8) & 0xFF;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	cmd_packet[14] = (vlv_num >> 16) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0c1b      	lsrs	r3, r3, #16
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	cmd_packet[15] = (vlv_num >> 24) & 0xFF;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	0e1b      	lsrs	r3, r3, #24
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	cmd_packet[16] = vlv_state;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint16_t packed_sz = stuff_packet(cmd_packet, cobs_cmd_packet, VLV_CMD_SZ);
 8001502:	f107 0108 	add.w	r1, r7, #8
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2211      	movs	r2, #17
 800150c:	4618      	mov	r0, r3
 800150e:	f006 fcc5 	bl	8007e9c <stuff_packet>
 8001512:	4603      	mov	r3, r0
 8001514:	85fb      	strh	r3, [r7, #46]	; 0x2e

	HAL_UART_Transmit(&COM_UART, cobs_cmd_packet, packed_sz, HAL_MAX_DELAY);
 8001516:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001518:	f107 0108 	add.w	r1, r7, #8
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <send_gse_set_vlv_cmd+0xc8>)
 8001522:	f00b f8d8 	bl	800c6d6 <HAL_UART_Transmit>
}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000ca8 	.word	0x20000ca8
 8001534:	20002100 	.word	0x20002100

08001538 <pt_counts_to_psi>:
*/

/**
 * Use the channel-specific calibrations to convert voltage back to pressure
 */
float pt_counts_to_psi(uint8_t pt_num, uint16_t pt_counts) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	80bb      	strh	r3, [r7, #4]

	if (pt_num < NUM_PTS) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b13      	cmp	r3, #19
 800154c:	d833      	bhi.n	80015b6 <pt_counts_to_psi+0x7e>
		float pt_volts = pt_counts * PT_COUNTS_TO_VOLTS_CAL;
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffab 	bl	80004ac <__aeabi_i2d>
 8001556:	a31f      	add	r3, pc, #124	; (adr r3, 80015d4 <pt_counts_to_psi+0x9c>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f810 	bl	8000580 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb02 	bl	8000b70 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]
		return ((pt_volts - pt_cal_lower_voltage[pt_num]) * pt_cal_upper_pressure[pt_num]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <pt_counts_to_psi+0x90>)
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <pt_counts_to_psi+0x94>)
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee27 7a27 	vmul.f32	s14, s14, s15
             / (pt_cal_upper_voltage[pt_num] - pt_cal_lower_voltage[pt_num]));
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <pt_counts_to_psi+0x98>)
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <pt_counts_to_psi+0x90>)
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015b4:	e001      	b.n	80015ba <pt_counts_to_psi+0x82>
	}
	else {
		return -1;
 80015b6:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80015ba:	eef0 7a66 	vmov.f32	s15, s13
	}
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002c4 	.word	0x200002c4
 80015cc:	20000364 	.word	0x20000364
 80015d0:	20000314 	.word	0x20000314
 80015d4:	57c52cbd 	.word	0x57c52cbd
 80015d8:	3f54457c 	.word	0x3f54457c

080015dc <init_hardware>:

Potentiometer_Cal pot_cal_info;
Stepper_Pinfo stepper_pinfo[2]; // information about stepper motor pin outs


void init_hardware() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

    initAdcs(&hspi1, adc_pins);   // initialize adcs
 80015e0:	4939      	ldr	r1, [pc, #228]	; (80016c8 <init_hardware+0xec>)
 80015e2:	483a      	ldr	r0, [pc, #232]	; (80016cc <init_hardware+0xf0>)
 80015e4:	f000 f888 	bl	80016f8 <initAdcs>

    // init stepper motor pins
    stepper_pinfo[0].motor_ports[0] = mtr0_inA0_GPIO_Port;
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <init_hardware+0xf4>)
 80015ea:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <init_hardware+0xf8>)
 80015ec:	601a      	str	r2, [r3, #0]
    stepper_pinfo[0].motor_ports[1] = mtr0_inA1_GPIO_Port;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <init_hardware+0xf4>)
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <init_hardware+0xf8>)
 80015f2:	605a      	str	r2, [r3, #4]
    stepper_pinfo[0].motor_ports[2] = mtr0_inB0_GPIO_Port;
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <init_hardware+0xf4>)
 80015f6:	4a37      	ldr	r2, [pc, #220]	; (80016d4 <init_hardware+0xf8>)
 80015f8:	609a      	str	r2, [r3, #8]
    stepper_pinfo[0].motor_ports[3] = mtr0_inB1_GPIO_Port;
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <init_hardware+0xf4>)
 80015fc:	4a36      	ldr	r2, [pc, #216]	; (80016d8 <init_hardware+0xfc>)
 80015fe:	60da      	str	r2, [r3, #12]
    stepper_pinfo[0].motor_pins[0] = mtr0_inA0_Pin;
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <init_hardware+0xf4>)
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	821a      	strh	r2, [r3, #16]
    stepper_pinfo[0].motor_pins[1] = mtr0_inA1_Pin;
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <init_hardware+0xf4>)
 800160a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160e:	825a      	strh	r2, [r3, #18]
    stepper_pinfo[0].motor_pins[2] = mtr0_inB0_Pin;
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <init_hardware+0xf4>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	829a      	strh	r2, [r3, #20]
    stepper_pinfo[0].motor_pins[3] = mtr0_inB1_Pin;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <init_hardware+0xf4>)
 800161a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161e:	82da      	strh	r2, [r3, #22]
    stepper_pinfo[0].pwm_channel[0] = TIM_CHANNEL_1;
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <init_hardware+0xf4>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
    stepper_pinfo[0].pwm_channel[1] = TIM_CHANNEL_2;
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <init_hardware+0xf4>)
 8001628:	2204      	movs	r2, #4
 800162a:	61da      	str	r2, [r3, #28]

    stepper_pinfo[1].motor_ports[0] = mtr1_inA0_GPIO_Port;
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <init_hardware+0xf4>)
 800162e:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <init_hardware+0x100>)
 8001630:	621a      	str	r2, [r3, #32]
    stepper_pinfo[1].motor_ports[1] = mtr1_inA1_GPIO_Port;
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <init_hardware+0xf4>)
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <init_hardware+0x100>)
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    stepper_pinfo[1].motor_ports[2] = mtr1_inB0_GPIO_Port;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <init_hardware+0xf4>)
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <init_hardware+0x100>)
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
    stepper_pinfo[1].motor_ports[3] = mtr1_inB1_GPIO_Port;
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <init_hardware+0xf4>)
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <init_hardware+0x100>)
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
    stepper_pinfo[1].motor_pins[0] = mtr1_inA0_Pin;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <init_hardware+0xf4>)
 8001646:	2204      	movs	r2, #4
 8001648:	861a      	strh	r2, [r3, #48]	; 0x30
    stepper_pinfo[1].motor_pins[1] = mtr1_inA1_Pin;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <init_hardware+0xf4>)
 800164c:	2208      	movs	r2, #8
 800164e:	865a      	strh	r2, [r3, #50]	; 0x32
    stepper_pinfo[1].motor_pins[2] = mtr1_inB0_Pin;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <init_hardware+0xf4>)
 8001652:	2210      	movs	r2, #16
 8001654:	869a      	strh	r2, [r3, #52]	; 0x34
    stepper_pinfo[1].motor_pins[3] = mtr1_inB1_Pin;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <init_hardware+0xf4>)
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	86da      	strh	r2, [r3, #54]	; 0x36
    stepper_pinfo[1].pwm_channel[0] = TIM_CHANNEL_1;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <init_hardware+0xf4>)
 800165e:	2200      	movs	r2, #0
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
    stepper_pinfo[1].pwm_channel[1] = TIM_CHANNEL_2;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <init_hardware+0xf4>)
 8001664:	2204      	movs	r2, #4
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c

    tc_pins[0].MAX31855_CS_PORT = tc0_cs_GPIO_Port;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <init_hardware+0x104>)
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <init_hardware+0x108>)
 800166c:	601a      	str	r2, [r3, #0]
    tc_pins[1].MAX31855_CS_PORT = tc1_cs_GPIO_Port;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <init_hardware+0x104>)
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <init_hardware+0x108>)
 8001672:	609a      	str	r2, [r3, #8]
    tc_pins[2].MAX31855_CS_PORT = tc2_cs_GPIO_Port;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <init_hardware+0x104>)
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <init_hardware+0x108>)
 8001678:	611a      	str	r2, [r3, #16]
    tc_pins[3].MAX31855_CS_PORT = tc3_cs_GPIO_Port;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <init_hardware+0x104>)
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <init_hardware+0x108>)
 800167e:	619a      	str	r2, [r3, #24]
    tc_pins[4].MAX31855_CS_PORT = tc4_cs_GPIO_Port;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <init_hardware+0x104>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <init_hardware+0x10c>)
 8001684:	621a      	str	r2, [r3, #32]
    tc_pins[0].MAX31855_CS_ADDR = tc0_cs_Pin;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <init_hardware+0x104>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	809a      	strh	r2, [r3, #4]
    tc_pins[1].MAX31855_CS_ADDR = tc1_cs_Pin;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <init_hardware+0x104>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	819a      	strh	r2, [r3, #12]
    tc_pins[2].MAX31855_CS_ADDR = tc2_cs_Pin;
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <init_hardware+0x104>)
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	829a      	strh	r2, [r3, #20]
    tc_pins[3].MAX31855_CS_ADDR = tc3_cs_Pin;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <init_hardware+0x104>)
 80016a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a4:	839a      	strh	r2, [r3, #28]
    tc_pins[4].MAX31855_CS_ADDR = tc4_cs_Pin;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <init_hardware+0x104>)
 80016a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ac:	849a      	strh	r2, [r3, #36]	; 0x24

    // Potentiometer Calibrations
    pot_cal_info.slope = (EPOT_DMAX - EPOT_DMIN)*(EPOT_RES_POT+2*EPOT_RES_LEAD)
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <init_hardware+0x110>)
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <init_hardware+0x114>)
 80016b2:	601a      	str	r2, [r3, #0]
                            /(EPOT_MAX_COUNTS*(EPOT_RES_POT - 2.0*EPOT_RES_POT_MIN));
    pot_cal_info.offset = ((EPOT_MAX_COUNTS*(EPOT_RES_POT_MIN + EPOT_RES_LEAD))
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <init_hardware+0x110>)
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <init_hardware+0x118>)
 80016b8:	605a      	str	r2, [r3, #4]

    // Reamining time in current state
    //state_rem_duration = 0;

    // IWDG status LED
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // turns off when something has gone wrong
 80016ba:	2201      	movs	r2, #1
 80016bc:	2108      	movs	r1, #8
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <init_hardware+0xf8>)
 80016c0:	f008 fb12 	bl	8009ce8 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000b28 	.word	0x20000b28
 80016cc:	20002060 	.word	0x20002060
 80016d0:	20000a40 	.word	0x20000a40
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	20000aa0 	.word	0x20000aa0
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	20000a98 	.word	0x20000a98
 80016f0:	3f627bee 	.word	0x3f627bee
 80016f4:	40f896df 	.word	0x40f896df

080016f8 <initAdcs>:

// private helpers
static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state);

void initAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo *adc_pins) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    adc_pins[0].MAX11131_CS_PORT       = adc0_cs_GPIO_Port;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <initAdcs+0x100>)
 8001706:	601a      	str	r2, [r3, #0]
    adc_pins[0].MAX11131_EOC_PORT      = adc0_eoc_GPIO_Port;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <initAdcs+0x100>)
 800170c:	605a      	str	r2, [r3, #4]
    adc_pins[0].MAX11131_CNVST_PORT    = adc0_cnvst_GPIO_Port;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4a3a      	ldr	r2, [pc, #232]	; (80017fc <initAdcs+0x104>)
 8001712:	609a      	str	r2, [r3, #8]
    adc_pins[0].MAX11131_CS_ADDR       = adc0_cs_Pin;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2208      	movs	r2, #8
 8001718:	819a      	strh	r2, [r3, #12]
    adc_pins[0].MAX11131_EOC_ADDR      = adc0_eoc_Pin;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	81da      	strh	r2, [r3, #14]
    adc_pins[0].MAX11131_CNVST_ADDR    = adc0_cnvst_Pin;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2210      	movs	r2, #16
 8001724:	821a      	strh	r2, [r3, #16]
    adc_pins[1].MAX11131_CS_PORT       = adc1_cs_GPIO_Port;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3324      	adds	r3, #36	; 0x24
 800172a:	4a35      	ldr	r2, [pc, #212]	; (8001800 <initAdcs+0x108>)
 800172c:	601a      	str	r2, [r3, #0]
    adc_pins[1].MAX11131_EOC_PORT      = adc1_eoc_GPIO_Port;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3324      	adds	r3, #36	; 0x24
 8001732:	4a32      	ldr	r2, [pc, #200]	; (80017fc <initAdcs+0x104>)
 8001734:	605a      	str	r2, [r3, #4]
    adc_pins[1].MAX11131_CNVST_PORT    = adc1_cnvst_GPIO_Port;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3324      	adds	r3, #36	; 0x24
 800173a:	4a31      	ldr	r2, [pc, #196]	; (8001800 <initAdcs+0x108>)
 800173c:	609a      	str	r2, [r3, #8]
    adc_pins[1].MAX11131_CS_ADDR       = adc1_cs_Pin;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3324      	adds	r3, #36	; 0x24
 8001742:	2201      	movs	r2, #1
 8001744:	819a      	strh	r2, [r3, #12]
    adc_pins[1].MAX11131_EOC_ADDR      = adc1_eoc_Pin;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3324      	adds	r3, #36	; 0x24
 800174a:	2220      	movs	r2, #32
 800174c:	81da      	strh	r2, [r3, #14]
    adc_pins[1].MAX11131_CNVST_ADDR    = adc1_cnvst_Pin;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3324      	adds	r3, #36	; 0x24
 8001752:	2202      	movs	r2, #2
 8001754:	821a      	strh	r2, [r3, #16]
    adc_pins[2].MAX11131_CS_PORT       = adc2_cs_GPIO_Port;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3348      	adds	r3, #72	; 0x48
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <initAdcs+0x108>)
 800175c:	601a      	str	r2, [r3, #0]
    adc_pins[2].MAX11131_EOC_PORT      = adc2_eoc_GPIO_Port;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3348      	adds	r3, #72	; 0x48
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <initAdcs+0x10c>)
 8001764:	605a      	str	r2, [r3, #4]
    adc_pins[2].MAX11131_CNVST_PORT    = adc2_cnvst_GPIO_Port;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3348      	adds	r3, #72	; 0x48
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <initAdcs+0x10c>)
 800176c:	609a      	str	r2, [r3, #8]
    adc_pins[2].MAX11131_CS_ADDR       = adc2_cs_Pin;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3348      	adds	r3, #72	; 0x48
 8001772:	2204      	movs	r2, #4
 8001774:	819a      	strh	r2, [r3, #12]
    adc_pins[2].MAX11131_EOC_ADDR      = adc2_eoc_Pin;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3348      	adds	r3, #72	; 0x48
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	81da      	strh	r2, [r3, #14]
    adc_pins[2].MAX11131_CNVST_ADDR    = adc2_cnvst_Pin;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3348      	adds	r3, #72	; 0x48
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	821a      	strh	r2, [r3, #16]
    init_adc(hspix, &adc_pins[0]);
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f005 fd59 	bl	8007242 <init_adc>
    init_adc(hspix, &adc_pins[1]);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3324      	adds	r3, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 fd53 	bl	8007242 <init_adc>
    init_adc(hspix, &adc_pins[2]);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3348      	adds	r3, #72	; 0x48
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f005 fd4d 	bl	8007242 <init_adc>

    // Initialize ADC offset and slopes, defaults to 0 and 1 for offset and slopes
    for (uint8_t i = 0; i < 3; ++i) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e01c      	b.n	80017e8 <initAdcs+0xf0>
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	81bb      	strh	r3, [r7, #12]
 80017b2:	e013      	b.n	80017dc <initAdcs+0xe4>
    		adc_calibrations[i].offset[ch] 	= 0;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	89bb      	ldrh	r3, [r7, #12]
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <initAdcs+0x110>)
 80017ba:	0152      	lsls	r2, r2, #5
 80017bc:	4413      	add	r3, r2
 80017be:	3310      	adds	r3, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    		adc_calibrations[i].slope[ch] 	= 1;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <initAdcs+0x110>)
 80017cc:	0152      	lsls	r2, r2, #5
 80017ce:	4413      	add	r3, r2
 80017d0:	2201      	movs	r2, #1
 80017d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	81bb      	strh	r3, [r7, #12]
 80017dc:	89bb      	ldrh	r3, [r7, #12]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d9e8      	bls.n	80017b4 <initAdcs+0xbc>
    for (uint8_t i = 0; i < 3; ++i) {
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d9df      	bls.n	80017ae <initAdcs+0xb6>
    	}
    }
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020400 	.word	0x40020400
 8001804:	40021000 	.word	0x40021000
 8001808:	200004bc 	.word	0x200004bc

0800180c <isMotorAtPos>:
    HAL_TIM_Base_Init(htimx);

    HAL_TIM_Base_Start_IT(htimx);
}

uint8_t isMotorAtPos(float target, uint8_t tank_num) {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]
 8001816:	4603      	mov	r3, r0
 8001818:	70fb      	strb	r3, [r7, #3]
    return fabs(target-curPos[tank_num]) < posErrorMargin;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <isMotorAtPos+0x48>)
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <isMotorAtPos+0x4c>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	bf4c      	ite	mi
 8001842:	2301      	movmi	r3, #1
 8001844:	2300      	movpl	r3, #0
 8001846:	b2db      	uxtb	r3, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200004b0 	.word	0x200004b0
 8001858:	20000014 	.word	0x20000014

0800185c <normalizeMotorStep>:

static inline int8_t normalizeMotorStep(int8_t step_num) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    if(step_num == 4) {
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d101      	bne.n	8001872 <normalizeMotorStep+0x16>
        return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e008      	b.n	8001884 <normalizeMotorStep+0x28>
    } else if (step_num == -1) {
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d101      	bne.n	8001880 <normalizeMotorStep+0x24>
        return 3;// reset step stage if reached
 800187c:	2303      	movs	r3, #3
 800187e:	e001      	b.n	8001884 <normalizeMotorStep+0x28>
    }
    return step_num;
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <handleMotorStepping>:


void handleMotorStepping(uint8_t motor_num) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
    // Stepper motor linear ramp variables
    static int8_t step_stage[NUM_TANKS] = { 0, 0 }; // polarity of stepper motor coil
    static int8_t prevDir[NUM_TANKS] = {0};

    if (prevDir[motor_num]==0) {
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4a85      	ldr	r2, [pc, #532]	; (8001ab4 <handleMotorStepping+0x224>)
 800189e:	56d3      	ldrsb	r3, [r2, r3]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <handleMotorStepping+0x22>
        prevDir[motor_num] = curDir[motor_num];
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4983      	ldr	r1, [pc, #524]	; (8001ab8 <handleMotorStepping+0x228>)
 80018aa:	5c8a      	ldrb	r2, [r1, r2]
 80018ac:	b251      	sxtb	r1, r2
 80018ae:	4a81      	ldr	r2, [pc, #516]	; (8001ab4 <handleMotorStepping+0x224>)
 80018b0:	54d1      	strb	r1, [r2, r3]
    }

    // Step the motor if in running or override
    if ((STATE==Hotfire || STATE==Startup || STATE==Post || STATE==Abort
 80018b2:	4b82      	ldr	r3, [pc, #520]	; (8001abc <handleMotorStepping+0x22c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d012      	beq.n	80018e0 <handleMotorStepping+0x50>
 80018ba:	4b80      	ldr	r3, [pc, #512]	; (8001abc <handleMotorStepping+0x22c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d00e      	beq.n	80018e0 <handleMotorStepping+0x50>
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <handleMotorStepping+0x22c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b07      	cmp	r3, #7
 80018c8:	d00a      	beq.n	80018e0 <handleMotorStepping+0x50>
 80018ca:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <handleMotorStepping+0x22c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d006      	beq.n	80018e0 <handleMotorStepping+0x50>
            || manual_stepper_pos_override[motor_num])
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <handleMotorStepping+0x230>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80ab 	beq.w	8001a36 <handleMotorStepping+0x1a6>
            && !isMotorAtPos(targetPos[motor_num], motor_num)) {
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a78      	ldr	r2, [pc, #480]	; (8001ac4 <handleMotorStepping+0x234>)
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4618      	mov	r0, r3
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	f7ff ff8a 	bl	800180c <isMotorAtPos>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 809b 	bne.w	8001a36 <handleMotorStepping+0x1a6>

        if (prevDir[motor_num] != curDir[motor_num]) {
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4a6c      	ldr	r2, [pc, #432]	; (8001ab4 <handleMotorStepping+0x224>)
 8001904:	56d2      	ldrsb	r2, [r2, r3]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	496b      	ldr	r1, [pc, #428]	; (8001ab8 <handleMotorStepping+0x228>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	429a      	cmp	r2, r3
 8001910:	d01d      	beq.n	800194e <handleMotorStepping+0xbe>
            if (prevDir[motor_num] == -1) {
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4a67      	ldr	r2, [pc, #412]	; (8001ab4 <handleMotorStepping+0x224>)
 8001916:	56d3      	ldrsb	r3, [r2, r3]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d109      	bne.n	8001932 <handleMotorStepping+0xa2>
                ++step_stage[motor_num];
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	4a69      	ldr	r2, [pc, #420]	; (8001ac8 <handleMotorStepping+0x238>)
 8001922:	56d2      	ldrsb	r2, [r2, r3]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	3201      	adds	r2, #1
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	b251      	sxtb	r1, r2
 800192c:	4a66      	ldr	r2, [pc, #408]	; (8001ac8 <handleMotorStepping+0x238>)
 800192e:	54d1      	strb	r1, [r2, r3]
 8001930:	e00d      	b.n	800194e <handleMotorStepping+0xbe>
            } else if (prevDir[motor_num] == 1) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a5f      	ldr	r2, [pc, #380]	; (8001ab4 <handleMotorStepping+0x224>)
 8001936:	56d3      	ldrsb	r3, [r2, r3]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d108      	bne.n	800194e <handleMotorStepping+0xbe>
                --step_stage[motor_num];
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4a62      	ldr	r2, [pc, #392]	; (8001ac8 <handleMotorStepping+0x238>)
 8001940:	56d2      	ldrsb	r2, [r2, r3]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	3a01      	subs	r2, #1
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	b251      	sxtb	r1, r2
 800194a:	4a5f      	ldr	r2, [pc, #380]	; (8001ac8 <handleMotorStepping+0x238>)
 800194c:	54d1      	strb	r1, [r2, r3]
            }
        }

        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4a5d      	ldr	r2, [pc, #372]	; (8001ac8 <handleMotorStepping+0x238>)
 8001952:	56d3      	ldrsb	r3, [r2, r3]
 8001954:	79fc      	ldrb	r4, [r7, #7]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff80 	bl	800185c <normalizeMotorStep>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <handleMotorStepping+0x238>)
 8001962:	551a      	strb	r2, [r3, r4]

        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4a59      	ldr	r2, [pc, #356]	; (8001acc <handleMotorStepping+0x23c>)
 8001968:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <handleMotorStepping+0x228>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	b25a      	sxtb	r2, r3
                           curDir[motor_num], step_stage[motor_num]);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4954      	ldr	r1, [pc, #336]	; (8001ac8 <handleMotorStepping+0x238>)
 8001978:	56cb      	ldrsb	r3, [r1, r3]
        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 800197a:	b2db      	uxtb	r3, r3
 800197c:	79f9      	ldrb	r1, [r7, #7]
 800197e:	f000 f8b3 	bl	8001ae8 <turn_stepper_motor>

        step_stage[motor_num] += curDir[motor_num];
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <handleMotorStepping+0x228>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	b259      	sxtb	r1, r3
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <handleMotorStepping+0x238>)
 800198e:	56d3      	ldrsb	r3, [r2, r3]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	b2cb      	uxtb	r3, r1
 8001994:	4413      	add	r3, r2
 8001996:	b2da      	uxtb	r2, r3
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b251      	sxtb	r1, r2
 800199c:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <handleMotorStepping+0x238>)
 800199e:	54d1      	strb	r1, [r2, r3]
        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <handleMotorStepping+0x238>)
 80019a4:	56d3      	ldrsb	r3, [r2, r3]
 80019a6:	79fc      	ldrb	r4, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff57 	bl	800185c <normalizeMotorStep>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <handleMotorStepping+0x238>)
 80019b4:	551a      	strb	r2, [r3, r4]
        prevDir[motor_num] = curDir[motor_num];
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	493f      	ldr	r1, [pc, #252]	; (8001ab8 <handleMotorStepping+0x228>)
 80019bc:	5c8a      	ldrb	r2, [r1, r2]
 80019be:	b251      	sxtb	r1, r2
 80019c0:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <handleMotorStepping+0x224>)
 80019c2:	54d1      	strb	r1, [r2, r3]
//                changeStepperPeriod(&htim6, &stepper);
//                stepper.acc_step = 0;
//            } else {
//                ++stepper.acc_step;
//            } // ensures SPSPS is followed properly
        curPos[motor_num] = curPos[motor_num] + degPerStep*curDir[motor_num];
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <handleMotorStepping+0x240>)
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4a39      	ldr	r2, [pc, #228]	; (8001ab8 <handleMotorStepping+0x228>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001ad4 <handleMotorStepping+0x244>
 80019e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	4a38      	ldr	r2, [pc, #224]	; (8001ad0 <handleMotorStepping+0x240>)
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	edc3 7a00 	vstr	s15, [r3]

        /* Update telem packet motor info */
        mtr_pos[motor_num] = curPos[motor_num]; // for motor 1
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <handleMotorStepping+0x240>)
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	440a      	add	r2, r1
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <handleMotorStepping+0x248>)
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	601a      	str	r2, [r3, #0]
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a33      	ldr	r2, [pc, #204]	; (8001adc <handleMotorStepping+0x24c>)
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001a18:	3301      	adds	r3, #1
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001a1a:	b29a      	uxth	r2, r3
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4926      	ldr	r1, [pc, #152]	; (8001ab8 <handleMotorStepping+0x228>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	b25b      	sxtb	r3, r3
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	fb12 f303 	smulbb	r3, r2, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b211      	sxth	r1, r2
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <handleMotorStepping+0x250>)
 8001a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <handleMotorStepping+0x234>)
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	f7ff fedf 	bl	800180c <isMotorAtPos>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d02a      	beq.n	8001aaa <handleMotorStepping+0x21a>
        // auto disable override once position is reached
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <handleMotorStepping+0x23c>)
 8001a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4921      	ldr	r1, [pc, #132]	; (8001ae4 <handleMotorStepping+0x254>)
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	440b      	add	r3, r1
 8001a64:	3318      	adds	r3, #24
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f009 ff1c 	bl	800b8a8 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[0]);
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <handleMotorStepping+0x23c>)
 8001a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	491a      	ldr	r1, [pc, #104]	; (8001ae4 <handleMotorStepping+0x254>)
 8001a7c:	015b      	lsls	r3, r3, #5
 8001a7e:	440b      	add	r3, r1
 8001a80:	331c      	adds	r3, #28
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f009 ff0e 	bl	800b8a8 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[1]);
        if (manual_stepper_pos_override[motor_num]) {
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <handleMotorStepping+0x230>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <handleMotorStepping+0x210>
            manual_stepper_pos_override[motor_num] = 0;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <handleMotorStepping+0x230>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	54d1      	strb	r1, [r2, r3]
        }
        mtr_vel[motor_num] = 0;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <handleMotorStepping+0x250>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // reset stepper linear ramping variables
        // stepper.num_steps = stepper.curr_step = 0;
    }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000057c 	.word	0x2000057c
 8001ab8:	200004b8 	.word	0x200004b8
 8001abc:	200003b4 	.word	0x200003b4
 8001ac0:	200004a4 	.word	0x200004a4
 8001ac4:	200004a8 	.word	0x200004a8
 8001ac8:	20000580 	.word	0x20000580
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	200004b0 	.word	0x200004b0
 8001ad4:	3eb33333 	.word	0x3eb33333
 8001ad8:	20000470 	.word	0x20000470
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000478 	.word	0x20000478
 8001ae4:	20000a40 	.word	0x20000a40

08001ae8 <turn_stepper_motor>:

void turn_stepper_motor(TIM_HandleTypeDef *htimx, uint8_t motor_num, int8_t direction, uint8_t step_stage) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	70fb      	strb	r3, [r7, #3]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70bb      	strb	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	707b      	strb	r3, [r7, #1]
    // A-
    // B-
    // For VNH7070AS chip, INA = clockwise, INB = counterclockwise (actually not really)
    // reset all gpio logic before changing step
    // Note: this only works for motor 0 currently 1 is CW, -1 is CCW
	GPIO_TypeDef * mtrx_portA0 = stepper_pinfo[motor_num].motor_ports[0];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	4a64      	ldr	r2, [pc, #400]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * mtrx_portA1 = stepper_pinfo[motor_num].motor_ports[1];
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	4a61      	ldr	r2, [pc, #388]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	623b      	str	r3, [r7, #32]
	GPIO_TypeDef * mtrx_portB0 = stepper_pinfo[motor_num].motor_ports[2];
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b20:	015b      	lsls	r3, r3, #5
 8001b22:	4413      	add	r3, r2
 8001b24:	3308      	adds	r3, #8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61fb      	str	r3, [r7, #28]
	GPIO_TypeDef * mtrx_portB1 = stepper_pinfo[motor_num].motor_ports[3];
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	4413      	add	r3, r2
 8001b32:	330c      	adds	r3, #12
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
	uint16_t mtrx_pinA0 = stepper_pinfo[motor_num].motor_pins[0];
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b3c:	015b      	lsls	r3, r3, #5
 8001b3e:	4413      	add	r3, r2
 8001b40:	3310      	adds	r3, #16
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	82fb      	strh	r3, [r7, #22]
	uint16_t mtrx_pinA1 = stepper_pinfo[motor_num].motor_pins[1];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	4a53      	ldr	r2, [pc, #332]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3312      	adds	r3, #18
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	82bb      	strh	r3, [r7, #20]
	uint16_t mtrx_pinB0 = stepper_pinfo[motor_num].motor_pins[2];
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3314      	adds	r3, #20
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	827b      	strh	r3, [r7, #18]
	uint16_t mtrx_pinB1 = stepper_pinfo[motor_num].motor_pins[3];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b66:	015b      	lsls	r3, r3, #5
 8001b68:	4413      	add	r3, r2
 8001b6a:	3316      	adds	r3, #22
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	823b      	strh	r3, [r7, #16]
	uint32_t pwm_channela = stepper_pinfo[motor_num].pwm_channel[0];
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	4413      	add	r3, r2
 8001b78:	3318      	adds	r3, #24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_channelb = stepper_pinfo[motor_num].pwm_channel[1];
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	4a45      	ldr	r2, [pc, #276]	; (8001c98 <turn_stepper_motor+0x1b0>)
 8001b82:	015b      	lsls	r3, r3, #5
 8001b84:	4413      	add	r3, r2
 8001b86:	331c      	adds	r3, #28
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60bb      	str	r3, [r7, #8]

    // reset all motor logic inputs low and speed to 0
    HAL_TIM_PWM_Stop(htimx, pwm_channela);
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f009 fe8a 	bl	800b8a8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htimx, pwm_channelb);
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f009 fe86 	bl	800b8a8 <HAL_TIM_PWM_Stop>
    // stepper motor channels
    switch(step_stage) { // TODO figure out steps tmrw
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d86e      	bhi.n	8001c80 <turn_stepper_motor+0x198>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <turn_stepper_motor+0xc0>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001beb 	.word	0x08001beb
 8001bb0:	08001c1d 	.word	0x08001c1d
 8001bb4:	08001c4f 	.word	0x08001c4f
        case 0: {   // A0 high B0 low
        	HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001bb8:	8abb      	ldrh	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6a38      	ldr	r0, [r7, #32]
 8001bc0:	f008 f892 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001bc4:	8a3b      	ldrh	r3, [r7, #16]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	69b8      	ldr	r0, [r7, #24]
 8001bcc:	f008 f88c 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bd8:	f008 f886 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001bdc:	8a7b      	ldrh	r3, [r7, #18]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4619      	mov	r1, r3
 8001be2:	69f8      	ldr	r0, [r7, #28]
 8001be4:	f008 f880 	bl	8009ce8 <HAL_GPIO_WritePin>
            break;
 8001be8:	e04a      	b.n	8001c80 <turn_stepper_motor+0x198>
        } case 1: {
        	HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001bea:	8a3b      	ldrh	r3, [r7, #16]
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	69b8      	ldr	r0, [r7, #24]
 8001bf2:	f008 f879 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001bf6:	8afb      	ldrh	r3, [r7, #22]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bfe:	f008 f873 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001c02:	8a7b      	ldrh	r3, [r7, #18]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4619      	mov	r1, r3
 8001c08:	69f8      	ldr	r0, [r7, #28]
 8001c0a:	f008 f86d 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001c0e:	8abb      	ldrh	r3, [r7, #20]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	6a38      	ldr	r0, [r7, #32]
 8001c16:	f008 f867 	bl	8009ce8 <HAL_GPIO_WritePin>
            break;
 8001c1a:	e031      	b.n	8001c80 <turn_stepper_motor+0x198>
        } case 2: {
        	HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c24:	f008 f860 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001c28:	8a7b      	ldrh	r3, [r7, #18]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	69f8      	ldr	r0, [r7, #28]
 8001c30:	f008 f85a 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001c34:	8abb      	ldrh	r3, [r7, #20]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6a38      	ldr	r0, [r7, #32]
 8001c3c:	f008 f854 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8001c40:	8a3b      	ldrh	r3, [r7, #16]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	69b8      	ldr	r0, [r7, #24]
 8001c48:	f008 f84e 	bl	8009ce8 <HAL_GPIO_WritePin>
            break;  // swap which input is high/low for for negative polarity
 8001c4c:	e018      	b.n	8001c80 <turn_stepper_motor+0x198>
        } case 3: {
        	HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	69f8      	ldr	r0, [r7, #28]
 8001c56:	f008 f847 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001c5a:	8abb      	ldrh	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6a38      	ldr	r0, [r7, #32]
 8001c62:	f008 f841 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8001c66:	8a3b      	ldrh	r3, [r7, #16]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	69b8      	ldr	r0, [r7, #24]
 8001c6e:	f008 f83b 	bl	8009ce8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001c72:	8afb      	ldrh	r3, [r7, #22]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c7a:	f008 f835 	bl	8009ce8 <HAL_GPIO_WritePin>
            break;
 8001c7e:	bf00      	nop
        }
    }
    HAL_TIM_PWM_Start(htimx, pwm_channela); // start pwm on channels 1 and 2 for stepper
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f009 fd48 	bl	800b718 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htimx, pwm_channelb);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f009 fd44 	bl	800b718 <HAL_TIM_PWM_Start>
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000a40 	.word	0x20000a40

08001c9c <readAdcs>:
    info.uartx = huartx;
    send_data(&info, CLB_Telem);
}
*/

void readAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo* adc_pins, uint16_t (*adc_counts)[16]) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e03d      	b.n	8001d2a <readAdcs+0x8e>
        read_adc(hspix, &adc_pins[i], adc_counts[i]);
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1899      	adds	r1, r3, r2
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f005 fb06 	bl	80072da <read_adc>
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	74fb      	strb	r3, [r7, #19]
 8001cd2:	e024      	b.n	8001d1e <readAdcs+0x82>
			adc_counts[i][ch] = adc_counts[i][ch]*adc_calibrations[i].slope[ch] + adc_calibrations[i].offset[ch];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	7cfa      	ldrb	r2, [r7, #19]
 8001cde:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	4815      	ldr	r0, [pc, #84]	; (8001d3c <readAdcs+0xa0>)
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	0149      	lsls	r1, r1, #5
 8001cea:	440b      	add	r3, r1
 8001cec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001cf0:	fb12 f303 	smulbb	r3, r2, r3
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	4910      	ldr	r1, [pc, #64]	; (8001d3c <readAdcs+0xa0>)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	0152      	lsls	r2, r2, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	3310      	adds	r3, #16
 8001d02:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	015b      	lsls	r3, r3, #5
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	7cfa      	ldrb	r2, [r7, #19]
 8001d10:	4401      	add	r1, r0
 8001d12:	b289      	uxth	r1, r1
 8001d14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	74fb      	strb	r3, [r7, #19]
 8001d1e:	7cfb      	ldrb	r3, [r7, #19]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d9d7      	bls.n	8001cd4 <readAdcs+0x38>
    for (int i = 0; i < 3; ++i) {
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	ddbe      	ble.n	8001cae <readAdcs+0x12>
        } // apply adc offset and slope to raw counts
    }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004bc 	.word	0x200004bc

08001d40 <setValve>:

void setValve(uint32_t vlv_num, uint8_t state) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
    GPIO_PinState gpio_state = (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	75fb      	strb	r3, [r7, #23]
    uint32_t vlv_bit = 1<<vlv_num;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	613b      	str	r3, [r7, #16]
    uint32_t vlv_value = state<<vlv_num;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
	setValveHelper(vlv_num, gpio_state);
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f814 	bl	8001da0 <setValveHelper>

    // set valves states variable
    valve_states &= ~vlv_bit;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <setValve+0x5c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4013      	ands	r3, r2
 8001d82:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <setValve+0x5c>)
 8001d84:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <setValve+0x5c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <setValve+0x5c>)
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003c0 	.word	0x200003c0

08001da0 <setValveHelper>:

static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d856      	bhi.n	8001e60 <setValveHelper+0xc0>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <setValveHelper+0x18>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001ddd 	.word	0x08001ddd
 8001dbc:	08001deb 	.word	0x08001deb
 8001dc0:	08001dfb 	.word	0x08001dfb
 8001dc4:	08001e0b 	.word	0x08001e0b
 8001dc8:	08001e1b 	.word	0x08001e1b
 8001dcc:	08001e29 	.word	0x08001e29
 8001dd0:	08001e37 	.word	0x08001e37
 8001dd4:	08001e45 	.word	0x08001e45
 8001dd8:	08001e53 	.word	0x08001e53
	 switch(vlv_num) {
	    case 0: {
	        HAL_GPIO_WritePin(en_vlv0_GPIO_Port, en_vlv0_Pin, gpio_state);
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	461a      	mov	r2, r3
 8001de0:	2102      	movs	r1, #2
 8001de2:	4821      	ldr	r0, [pc, #132]	; (8001e68 <setValveHelper+0xc8>)
 8001de4:	f007 ff80 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001de8:	e03a      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 1: {
	        HAL_GPIO_WritePin(en_vlv1_GPIO_Port, en_vlv1_Pin, gpio_state);
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	461a      	mov	r2, r3
 8001dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001df2:	481e      	ldr	r0, [pc, #120]	; (8001e6c <setValveHelper+0xcc>)
 8001df4:	f007 ff78 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001df8:	e032      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 2: {
	        HAL_GPIO_WritePin(en_vlv2_GPIO_Port, en_vlv2_Pin, gpio_state);
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e02:	481a      	ldr	r0, [pc, #104]	; (8001e6c <setValveHelper+0xcc>)
 8001e04:	f007 ff70 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e08:	e02a      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 3: {
	        HAL_GPIO_WritePin(en_vlv3_GPIO_Port, en_vlv3_Pin, gpio_state);
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e12:	4816      	ldr	r0, [pc, #88]	; (8001e6c <setValveHelper+0xcc>)
 8001e14:	f007 ff68 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e18:	e022      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 4: {
	        HAL_GPIO_WritePin(en_vlv4_GPIO_Port, en_vlv4_Pin, gpio_state);
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	4811      	ldr	r0, [pc, #68]	; (8001e68 <setValveHelper+0xc8>)
 8001e22:	f007 ff61 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e26:	e01b      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 5: {
	        HAL_GPIO_WritePin(en_vlv5_GPIO_Port, en_vlv5_Pin, gpio_state);
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	480e      	ldr	r0, [pc, #56]	; (8001e68 <setValveHelper+0xc8>)
 8001e30:	f007 ff5a 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e34:	e014      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 6: {
	        HAL_GPIO_WritePin(en_vlv6_GPIO_Port, en_vlv6_Pin, gpio_state);
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <setValveHelper+0xc8>)
 8001e3e:	f007 ff53 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e42:	e00d      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 7: {
	        HAL_GPIO_WritePin(en_vlv7_GPIO_Port, en_vlv7_Pin, gpio_state);
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	461a      	mov	r2, r3
 8001e48:	2108      	movs	r1, #8
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <setValveHelper+0xc8>)
 8001e4c:	f007 ff4c 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e50:	e006      	b.n	8001e60 <setValveHelper+0xc0>
	    } case 8: {
	        HAL_GPIO_WritePin(en_vlv8_GPIO_Port, en_vlv8_Pin, gpio_state);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	2104      	movs	r1, #4
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <setValveHelper+0xc8>)
 8001e5a:	f007 ff45 	bl	8009ce8 <HAL_GPIO_WritePin>
	        break;
 8001e5e:	bf00      	nop
	    }
	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40020800 	.word	0x40020800

08001e70 <readThermocouples>:

void readThermocouples(SPI_HandleTypeDef* hspix, MAX31855_Pinfo *tc_pins,
                                                            uint8_t tc_num) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < tc_num; ++i) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
 8001e82:	e012      	b.n	8001eaa <readThermocouples+0x3a>
    	tc[i] = read_tc(hspix, &tc_pins[i]);
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	7dfc      	ldrb	r4, [r7, #23]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f005 fbb5 	bl	8007600 <read_tc>
 8001e96:	eef0 7a40 	vmov.f32	s15, s0
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <readThermocouples+0x4c>)
 8001e9c:	00a3      	lsls	r3, r4, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < tc_num; ++i) {
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
 8001eaa:	7dfa      	ldrb	r2, [r7, #23]
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d3e8      	bcc.n	8001e84 <readThermocouples+0x14>
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	2000045c 	.word	0x2000045c

08001ec0 <updatePeripherals>:

void updatePeripherals(uint16_t (*adc_counts)[16]) {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    // Programmer defined, transfer adc readings to correct memory arrays based on schematic

    /* Load vlv voltages */
    ivlv[0] = vlvCountsToVolts(adc_counts[0][0]);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f9f3 	bl	80022b8 <vlvCountsToVolts>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
 8001ed6:	4ba3      	ldr	r3, [pc, #652]	; (8002164 <updatePeripherals+0x2a4>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
    ivlv[1] = vlvCountsToVolts(adc_counts[1][10]);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3320      	adds	r3, #32
 8001ee0:	8a9b      	ldrh	r3, [r3, #20]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9e8 	bl	80022b8 <vlvCountsToVolts>
 8001ee8:	eef0 7a40 	vmov.f32	s15, s0
 8001eec:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <updatePeripherals+0x2a4>)
 8001eee:	edc3 7a01 	vstr	s15, [r3, #4]
    ivlv[2] = vlvCountsToVolts(adc_counts[1][8]);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3320      	adds	r3, #32
 8001ef6:	8a1b      	ldrh	r3, [r3, #16]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f9dd 	bl	80022b8 <vlvCountsToVolts>
 8001efe:	eef0 7a40 	vmov.f32	s15, s0
 8001f02:	4b98      	ldr	r3, [pc, #608]	; (8002164 <updatePeripherals+0x2a4>)
 8001f04:	edc3 7a02 	vstr	s15, [r3, #8]
    ivlv[3] = vlvCountsToVolts(adc_counts[1][6]);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3320      	adds	r3, #32
 8001f0c:	899b      	ldrh	r3, [r3, #12]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f9d2 	bl	80022b8 <vlvCountsToVolts>
 8001f14:	eef0 7a40 	vmov.f32	s15, s0
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <updatePeripherals+0x2a4>)
 8001f1a:	edc3 7a03 	vstr	s15, [r3, #12]
    ivlv[4] = vlvCountsToVolts(adc_counts[1][4]);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3320      	adds	r3, #32
 8001f22:	891b      	ldrh	r3, [r3, #8]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f9c7 	bl	80022b8 <vlvCountsToVolts>
 8001f2a:	eef0 7a40 	vmov.f32	s15, s0
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <updatePeripherals+0x2a4>)
 8001f30:	edc3 7a04 	vstr	s15, [r3, #16]
    ivlv[5] = vlvCountsToVolts(adc_counts[1][2]);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f9bc 	bl	80022b8 <vlvCountsToVolts>
 8001f40:	eef0 7a40 	vmov.f32	s15, s0
 8001f44:	4b87      	ldr	r3, [pc, #540]	; (8002164 <updatePeripherals+0x2a4>)
 8001f46:	edc3 7a05 	vstr	s15, [r3, #20]
    ivlv[6] = vlvCountsToVolts(adc_counts[1][0]);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f9b1 	bl	80022b8 <vlvCountsToVolts>
 8001f56:	eef0 7a40 	vmov.f32	s15, s0
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <updatePeripherals+0x2a4>)
 8001f5c:	edc3 7a06 	vstr	s15, [r3, #24]
    ivlv[7] = vlvCountsToVolts(adc_counts[0][11]);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8adb      	ldrh	r3, [r3, #22]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f9a7 	bl	80022b8 <vlvCountsToVolts>
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <updatePeripherals+0x2a4>)
 8001f70:	edc3 7a07 	vstr	s15, [r3, #28]
    ivlv[8] = vlvCountsToVolts(adc_counts[0][13]);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8b5b      	ldrh	r3, [r3, #26]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f99d 	bl	80022b8 <vlvCountsToVolts>
 8001f7e:	eef0 7a40 	vmov.f32	s15, s0
 8001f82:	4b78      	ldr	r3, [pc, #480]	; (8002164 <updatePeripherals+0x2a4>)
 8001f84:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load vlv currents */
    evlv[0] = vlvCountsToAmps(adc_counts[0][1]);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	885b      	ldrh	r3, [r3, #2]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f9b3 	bl	80022f8 <vlvCountsToAmps>
 8001f92:	eef0 7a40 	vmov.f32	s15, s0
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <updatePeripherals+0x2a8>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
    evlv[1] = vlvCountsToAmps(adc_counts[1][11]);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	8adb      	ldrh	r3, [r3, #22]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f9a8 	bl	80022f8 <vlvCountsToAmps>
 8001fa8:	eef0 7a40 	vmov.f32	s15, s0
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <updatePeripherals+0x2a8>)
 8001fae:	edc3 7a01 	vstr	s15, [r3, #4]
    evlv[2] = vlvCountsToAmps(adc_counts[1][9]);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	8a5b      	ldrh	r3, [r3, #18]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f99d 	bl	80022f8 <vlvCountsToAmps>
 8001fbe:	eef0 7a40 	vmov.f32	s15, s0
 8001fc2:	4b69      	ldr	r3, [pc, #420]	; (8002168 <updatePeripherals+0x2a8>)
 8001fc4:	edc3 7a02 	vstr	s15, [r3, #8]
    evlv[3] = vlvCountsToAmps(adc_counts[1][7]);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3320      	adds	r3, #32
 8001fcc:	89db      	ldrh	r3, [r3, #14]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f992 	bl	80022f8 <vlvCountsToAmps>
 8001fd4:	eef0 7a40 	vmov.f32	s15, s0
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <updatePeripherals+0x2a8>)
 8001fda:	edc3 7a03 	vstr	s15, [r3, #12]
    evlv[4] = vlvCountsToAmps(adc_counts[1][5]);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	895b      	ldrh	r3, [r3, #10]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f987 	bl	80022f8 <vlvCountsToAmps>
 8001fea:	eef0 7a40 	vmov.f32	s15, s0
 8001fee:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <updatePeripherals+0x2a8>)
 8001ff0:	edc3 7a04 	vstr	s15, [r3, #16]
    evlv[5] = vlvCountsToAmps(adc_counts[1][3]);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3320      	adds	r3, #32
 8001ff8:	88db      	ldrh	r3, [r3, #6]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f97c 	bl	80022f8 <vlvCountsToAmps>
 8002000:	eef0 7a40 	vmov.f32	s15, s0
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <updatePeripherals+0x2a8>)
 8002006:	edc3 7a05 	vstr	s15, [r3, #20]
    evlv[6] = vlvCountsToAmps(adc_counts[1][1]);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3320      	adds	r3, #32
 800200e:	885b      	ldrh	r3, [r3, #2]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f971 	bl	80022f8 <vlvCountsToAmps>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	4b53      	ldr	r3, [pc, #332]	; (8002168 <updatePeripherals+0x2a8>)
 800201c:	edc3 7a06 	vstr	s15, [r3, #24]
    evlv[7] = vlvCountsToAmps(adc_counts[0][10]);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8a9b      	ldrh	r3, [r3, #20]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f967 	bl	80022f8 <vlvCountsToAmps>
 800202a:	eef0 7a40 	vmov.f32	s15, s0
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <updatePeripherals+0x2a8>)
 8002030:	edc3 7a07 	vstr	s15, [r3, #28]
    evlv[8] = vlvCountsToAmps(adc_counts[0][12]);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8b1b      	ldrh	r3, [r3, #24]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f95d 	bl	80022f8 <vlvCountsToAmps>
 800203e:	eef0 7a40 	vmov.f32	s15, s0
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <updatePeripherals+0x2a8>)
 8002044:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load pressure transducer voltages */
    for (int8_t i = 7; i >= 2; --i) {
 8002048:	2307      	movs	r3, #7
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e019      	b.n	8002082 <updatePeripherals+0x1c2>
        uint8_t channel = 7-i;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	f1c3 0307 	rsb	r3, r3, #7
 8002054:	72fb      	strb	r3, [r7, #11]
        pressure[channel] = pt_counts_to_psi( channel, adc_counts[0][i]);
 8002056:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002060:	7afc      	ldrb	r4, [r7, #11]
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fa66 	bl	8001538 <pt_counts_to_psi>
 800206c:	eef0 7a40 	vmov.f32	s15, s0
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <updatePeripherals+0x2ac>)
 8002072:	00a3      	lsls	r3, r4, #2
 8002074:	4413      	add	r3, r2
 8002076:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 7; i >= 2; --i) {
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3b01      	subs	r3, #1
 800207e:	b2db      	uxtb	r3, r3
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	2b01      	cmp	r3, #1
 8002088:	dce1      	bgt.n	800204e <updatePeripherals+0x18e>
    }

    /* Load mtr currents */
    i_mtr_ab[0] = mtrCountsToAmps(adc_counts[2][5]);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3340      	adds	r3, #64	; 0x40
 800208e:	895b      	ldrh	r3, [r3, #10]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f951 	bl	8002338 <mtrCountsToAmps>
 8002096:	eef0 7a40 	vmov.f32	s15, s0
 800209a:	4b35      	ldr	r3, [pc, #212]	; (8002170 <updatePeripherals+0x2b0>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
    i_mtr_ab[1] = mtrCountsToAmps(adc_counts[2][4]);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3340      	adds	r3, #64	; 0x40
 80020a4:	891b      	ldrh	r3, [r3, #8]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f946 	bl	8002338 <mtrCountsToAmps>
 80020ac:	eef0 7a40 	vmov.f32	s15, s0
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <updatePeripherals+0x2b0>)
 80020b2:	edc3 7a01 	vstr	s15, [r3, #4]
    i_mtr_ab[2] = mtrCountsToAmps(adc_counts[2][0]);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f93b 	bl	8002338 <mtrCountsToAmps>
 80020c2:	eef0 7a40 	vmov.f32	s15, s0
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <updatePeripherals+0x2b0>)
 80020c8:	edc3 7a02 	vstr	s15, [r3, #8]
    i_mtr_ab[3] = mtrCountsToAmps(adc_counts[2][1]);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3340      	adds	r3, #64	; 0x40
 80020d0:	885b      	ldrh	r3, [r3, #2]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f930 	bl	8002338 <mtrCountsToAmps>
 80020d8:	eef0 7a40 	vmov.f32	s15, s0
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <updatePeripherals+0x2b0>)
 80020de:	edc3 7a03 	vstr	s15, [r3, #12]

    i_mtr[0]    = mtrCountsToAmps(adc_counts[2][2]);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3340      	adds	r3, #64	; 0x40
 80020e6:	889b      	ldrh	r3, [r3, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f925 	bl	8002338 <mtrCountsToAmps>
 80020ee:	eef0 7a40 	vmov.f32	s15, s0
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <updatePeripherals+0x2b4>)
 80020f4:	edc3 7a00 	vstr	s15, [r3]
    i_mtr[1]    = mtrCountsToAmps(adc_counts[2][3]);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3340      	adds	r3, #64	; 0x40
 80020fc:	88db      	ldrh	r3, [r3, #6]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f91a 	bl	8002338 <mtrCountsToAmps>
 8002104:	eef0 7a40 	vmov.f32	s15, s0
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <updatePeripherals+0x2b4>)
 800210a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Load thermocouples temps above */

    /* Load potentiometer degrees */
    for (int8_t i = 9; i >= 6; --i) {
 800210e:	2309      	movs	r3, #9
 8002110:	73bb      	strb	r3, [r7, #14]
 8002112:	e020      	b.n	8002156 <updatePeripherals+0x296>
        int8_t channel  = 9-i;
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	f1c3 0309 	rsb	r3, r3, #9
 800211a:	b2db      	uxtb	r3, r3
 800211c:	733b      	strb	r3, [r7, #12]
        if (channel < NUM_POTS) {  // Press board code uses 4 pots
 800211e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	dc13      	bgt.n	800214e <updatePeripherals+0x28e>
        	epot[channel]   = potCountsToDegrees(adc_counts[2][i], channel);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3340      	adds	r3, #64	; 0x40
 800212a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800212e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002132:	7b3a      	ldrb	r2, [r7, #12]
 8002134:	f997 400c 	ldrsb.w	r4, [r7, #12]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f91c 	bl	8002378 <potCountsToDegrees>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <updatePeripherals+0x2b8>)
 8002146:	00a3      	lsls	r3, r4, #2
 8002148:	4413      	add	r3, r2
 800214a:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 9; i >= 6; --i) {
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	3b01      	subs	r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	73bb      	strb	r3, [r7, #14]
 8002156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800215a:	2b05      	cmp	r3, #5
 800215c:	dcda      	bgt.n	8002114 <updatePeripherals+0x254>
        }
    }

    /* Load stepper motor position */
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 800215e:	2300      	movs	r3, #0
 8002160:	737b      	strb	r3, [r7, #13]
 8002162:	e018      	b.n	8002196 <updatePeripherals+0x2d6>
 8002164:	20000414 	.word	0x20000414
 8002168:	20000438 	.word	0x20000438
 800216c:	200003fc 	.word	0x200003fc
 8002170:	2000047c 	.word	0x2000047c
 8002174:	2000048c 	.word	0x2000048c
 8002178:	2000049c 	.word	0x2000049c
        mtr_pos[i] = curPos[i];
 800217c:	7b7a      	ldrb	r2, [r7, #13]
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	4945      	ldr	r1, [pc, #276]	; (8002298 <updatePeripherals+0x3d8>)
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	440a      	add	r2, r1
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4944      	ldr	r1, [pc, #272]	; (800229c <updatePeripherals+0x3dc>)
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	3301      	adds	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
 8002196:	7b7b      	ldrb	r3, [r7, #13]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d9ef      	bls.n	800217c <updatePeripherals+0x2bc>
    }

    /* Load board currents and voltages */
    i_batt  = adc_counts[2][12]*ibatt_cal;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3340      	adds	r3, #64	; 0x40
 80021a0:	8b1b      	ldrh	r3, [r3, #24]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f982 	bl	80004ac <__aeabi_i2d>
 80021a8:	a335      	add	r3, pc, #212	; (adr r3, 8002280 <updatePeripherals+0x3c0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f9e7 	bl	8000580 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fcd9 	bl	8000b70 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a37      	ldr	r2, [pc, #220]	; (80022a0 <updatePeripherals+0x3e0>)
 80021c2:	6013      	str	r3, [r2, #0]
    e_batt  = adc_counts[2][13]*ebatt_cal;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3340      	adds	r3, #64	; 0x40
 80021c8:	8b5b      	ldrh	r3, [r3, #26]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f96e 	bl	80004ac <__aeabi_i2d>
 80021d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002288 <updatePeripherals+0x3c8>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe f9d3 	bl	8000580 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fcc5 	bl	8000b70 <__aeabi_d2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <updatePeripherals+0x3e4>)
 80021ea:	6013      	str	r3, [r2, #0]
    i3v     = adc_counts[2][10]*i3v_cal;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3340      	adds	r3, #64	; 0x40
 80021f0:	8a9b      	ldrh	r3, [r3, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f95a 	bl	80004ac <__aeabi_i2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fcb6 	bl	8000b70 <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <updatePeripherals+0x3e8>)
 8002208:	6013      	str	r3, [r2, #0]
    e3v     = adc_counts[2][11]*e3v_cal;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3340      	adds	r3, #64	; 0x40
 800220e:	8adb      	ldrh	r3, [r3, #22]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f94b 	bl	80004ac <__aeabi_i2d>
 8002216:	a31e      	add	r3, pc, #120	; (adr r3, 8002290 <updatePeripherals+0x3d0>)
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	f7fe f9b0 	bl	8000580 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fca2 	bl	8000b70 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <updatePeripherals+0x3ec>)
 8002230:	6013      	str	r3, [r2, #0]
    i5v     = adc_counts[0][8]*i5v_cal;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8a1b      	ldrh	r3, [r3, #16]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f938 	bl	80004ac <__aeabi_i2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc94 	bl	8000b70 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <updatePeripherals+0x3f0>)
 800224c:	6013      	str	r3, [r2, #0]
    e5v     = adc_counts[0][9]*e5v_cal;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8a5b      	ldrh	r3, [r3, #18]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f92a 	bl	80004ac <__aeabi_i2d>
 8002258:	a30d      	add	r3, pc, #52	; (adr r3, 8002290 <updatePeripherals+0x3d0>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f98f 	bl	8000580 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fc81 	bl	8000b70 <__aeabi_d2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <updatePeripherals+0x3f4>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	f3af 8000 	nop.w
 8002280:	a7693b02 	.word	0xa7693b02
 8002284:	3f908107 	.word	0x3f908107
 8002288:	6ea67bd5 	.word	0x6ea67bd5
 800228c:	3f6a9999 	.word	0x3f6a9999
 8002290:	ad045a83 	.word	0xad045a83
 8002294:	3f5a665d 	.word	0x3f5a665d
 8002298:	200004b0 	.word	0x200004b0
 800229c:	20000470 	.word	0x20000470
 80022a0:	200003bc 	.word	0x200003bc
 80022a4:	200003b8 	.word	0x200003b8
 80022a8:	200003d0 	.word	0x200003d0
 80022ac:	200003c4 	.word	0x200003c4
 80022b0:	200003cc 	.word	0x200003cc
 80022b4:	200003c8 	.word	0x200003c8

080022b8 <vlvCountsToVolts>:

float vlvCountsToVolts(uint16_t counts) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
    return counts*evlv_cal;
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8f1 	bl	80004ac <__aeabi_i2d>
 80022ca:	a309      	add	r3, pc, #36	; (adr r3, 80022f0 <vlvCountsToVolts+0x38>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f956 	bl	8000580 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc48 	bl	8000b70 <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	ee07 3a90 	vmov	s15, r3
}
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	6ea67bd5 	.word	0x6ea67bd5
 80022f4:	3f6a9999 	.word	0x3f6a9999

080022f8 <vlvCountsToAmps>:

float vlvCountsToAmps(uint16_t counts) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
    return counts*ivlv_cal;
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8d1 	bl	80004ac <__aeabi_i2d>
 800230a:	a309      	add	r3, pc, #36	; (adr r3, 8002330 <vlvCountsToAmps+0x38>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe f936 	bl	8000580 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fc28 	bl	8000b70 <__aeabi_d2f>
 8002320:	4603      	mov	r3, r0
 8002322:	ee07 3a90 	vmov	s15, r3
}
 8002326:	eeb0 0a67 	vmov.f32	s0, s15
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0b68130f 	.word	0x0b68130f
 8002334:	3f6a6663 	.word	0x3f6a6663

08002338 <mtrCountsToAmps>:
    return ( counts- pt_offset[pt_num]) *pt_slope[pt_num] - pt_ambients[pt_num];
	//return 0;
}
*/

float mtrCountsToAmps(uint16_t counts) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
    return counts*imtr_cal;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8b1 	bl	80004ac <__aeabi_i2d>
 800234a:	a309      	add	r3, pc, #36	; (adr r3, 8002370 <mtrCountsToAmps+0x38>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f916 	bl	8000580 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fc08 	bl	8000b70 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	ee07 3a90 	vmov	s15, r3
}
 8002366:	eeb0 0a67 	vmov.f32	s0, s15
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0b68130f 	.word	0x0b68130f
 8002374:	3f6a6663 	.word	0x3f6a6663

08002378 <potCountsToDegrees>:

float potCountsToDegrees(uint16_t counts, uint8_t pot_num) {
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	460a      	mov	r2, r1
 8002382:	80fb      	strh	r3, [r7, #6]
 8002384:	4613      	mov	r3, r2
 8002386:	717b      	strb	r3, [r7, #5]
    // negative sign to align motor pos direction with pot pos direction
    return -EPOT_CHAR_SLOPE*(
                        (pot_cal_info.slope * (counts - pot_cal_info.offset))
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <potCountsToDegrees+0x50>)
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <potCountsToDegrees+0x50>)
 800239a:	edd3 7a01 	vldr	s15, [r3, #4]
 800239e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023a2:	ee27 7a27 	vmul.f32	s14, s14, s15
                         - pot_ambients[pot_num] - EPOT_CHAR_OFFSET
 80023a6:	797b      	ldrb	r3, [r7, #5]
 80023a8:	4a08      	ldr	r2, [pc, #32]	; (80023cc <potCountsToDegrees+0x54>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee77 7a67 	vsub.f32	s15, s14, s15
    return -EPOT_CHAR_SLOPE*(
 80023b6:	eef1 7a67 	vneg.f32	s15, s15
                           );
}
 80023ba:	eeb0 0a67 	vmov.f32	s0, s15
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20000a98 	.word	0x20000a98
 80023cc:	200002bc 	.word	0x200002bc

080023d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
		handleMotorStepping(1);
	}
	else if (htim == &htim13) {
		handleMotorStepping(0);
	}
}
 80023e6:	e01e      	b.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_50MS) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d103      	bne.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
}
 80023f6:	e016      	b.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_100MS) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d103      	bne.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x38>
		periodic_flag_100ms = 1;
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	e00e      	b.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &htim6) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x48>
		handleMotorStepping(1);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff fa3d 	bl	8001890 <handleMotorStepping>
}
 8002416:	e006      	b.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &htim13) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d102      	bne.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x56>
		handleMotorStepping(0);
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fa35 	bl	8001890 <handleMotorStepping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20002148 	.word	0x20002148
 8002434:	20000b94 	.word	0x20000b94
 8002438:	20000c50 	.word	0x20000c50
 800243c:	20002144 	.word	0x20002144
 8002440:	20000d80 	.word	0x20000d80
 8002444:	20000ca4 	.word	0x20000ca4
 8002448:	20000e20 	.word	0x20000e20
 800244c:	20000d38 	.word	0x20000d38

08002450 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    // idle detection needs at least one UART clock to detect the bus is idle. So
    // in the case, that the transmission length is one full buffer length
    // and the start buffer pointer is at 0, it will be also 0 at the end of the
    // transmission. In this case the DMA rollover will increment the RxRollover
    // variable first and len will not be zero.
    if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {                    // Check if it is an "Idle Interrupt"
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b10      	cmp	r3, #16
 8002464:	d176      	bne.n	8002554 <HAL_UART_RxCpltCallback+0x104>
        __HAL_UART_CLEAR_IDLEFLAG(huart);                             // clear the interrupt
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]

        uint16_t start = RxBfrPos;                                        // Rx bytes start position (=last buffer position)
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	823b      	strh	r3, [r7, #16]
        RxBfrPos = DMA_RX_BUFFER_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;// determine actual buffer position
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 8002494:	801a      	strh	r2, [r3, #0]
        uint16_t len = DMA_RX_BUFFER_SIZE;                                // init len with max. size
 8002496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249a:	82fb      	strh	r3, [r7, #22]

        if(RxRollover < 2)  {
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_UART_RxCpltCallback+0x11c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d81b      	bhi.n	80024dc <HAL_UART_RxCpltCallback+0x8c>
            if(RxRollover) {                                                        // rolled over once
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_UART_RxCpltCallback+0x11c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <HAL_UART_RxCpltCallback+0x80>
                if(RxBfrPos <= start) {
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	8a3a      	ldrh	r2, [r7, #16]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d308      	bcc.n	80024c8 <HAL_UART_RxCpltCallback+0x78>
                    len = RxBfrPos + DMA_RX_BUFFER_SIZE - start;  // no bytes overwritten
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	8a3b      	ldrh	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	82fb      	strh	r3, [r7, #22]
 80024c6:	e00c      	b.n	80024e2 <HAL_UART_RxCpltCallback+0x92>
                } else {
                    len = DMA_RX_BUFFER_SIZE + 1;                 // bytes overwritten error
 80024c8:	f640 0301 	movw	r3, #2049	; 0x801
 80024cc:	82fb      	strh	r3, [r7, #22]
 80024ce:	e008      	b.n	80024e2 <HAL_UART_RxCpltCallback+0x92>
                }
            } else {
                len = RxBfrPos - start;                           // no bytes overwritten
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	8a3b      	ldrh	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	82fb      	strh	r3, [r7, #22]
 80024da:	e002      	b.n	80024e2 <HAL_UART_RxCpltCallback+0x92>
            }
        } else {
            len = DMA_RX_BUFFER_SIZE + 2;                         // dual rollover error
 80024dc:	f640 0302 	movw	r3, #2050	; 0x802
 80024e0:	82fb      	strh	r3, [r7, #22]
        }

        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02d      	beq.n	8002544 <HAL_UART_RxCpltCallback+0xf4>
 80024e8:	8afb      	ldrh	r3, [r7, #22]
 80024ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ee:	d829      	bhi.n	8002544 <HAL_UART_RxCpltCallback+0xf4>
            uint16_t bytes_in_first_part = len;
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	82bb      	strh	r3, [r7, #20]
            uint16_t bytes_in_second_part = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	827b      	strh	r3, [r7, #18]
            if (RxBfrPos < start) { // if data loops in buffer
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_UART_RxCpltCallback+0x118>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	8a3a      	ldrh	r2, [r7, #16]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d907      	bls.n	8002512 <HAL_UART_RxCpltCallback+0xc2>
                bytes_in_first_part = DMA_RX_BUFFER_SIZE - start;
 8002502:	8a3b      	ldrh	r3, [r7, #16]
 8002504:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002508:	82bb      	strh	r3, [r7, #20]
                bytes_in_second_part= len - bytes_in_first_part;
 800250a:	8afa      	ldrh	r2, [r7, #22]
 800250c:	8abb      	ldrh	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	827b      	strh	r3, [r7, #18]
            }

            // handle telem for yourself immediately
            memcpy(temp_telem_buffer, DMA_RX_Buffer+start, bytes_in_first_part);
 8002512:	8a3b      	ldrh	r3, [r7, #16]
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_UART_RxCpltCallback+0x120>)
 8002516:	4413      	add	r3, r2
 8002518:	8aba      	ldrh	r2, [r7, #20]
 800251a:	4619      	mov	r1, r3
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <HAL_UART_RxCpltCallback+0x124>)
 800251e:	f00b fa09 	bl	800d934 <memcpy>
            memcpy(temp_telem_buffer+bytes_in_first_part, DMA_RX_Buffer, bytes_in_second_part);
 8002522:	8abb      	ldrh	r3, [r7, #20]
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <HAL_UART_RxCpltCallback+0x124>)
 8002526:	4413      	add	r3, r2
 8002528:	8a7a      	ldrh	r2, [r7, #18]
 800252a:	4911      	ldr	r1, [pc, #68]	; (8002570 <HAL_UART_RxCpltCallback+0x120>)
 800252c:	4618      	mov	r0, r3
 800252e:	f00b fa01 	bl	800d934 <memcpy>
            uint8_t cmd_status = receive_data(huart, temp_telem_buffer, len);
 8002532:	8afb      	ldrh	r3, [r7, #22]
 8002534:	461a      	mov	r2, r3
 8002536:	490f      	ldr	r1, [pc, #60]	; (8002574 <HAL_UART_RxCpltCallback+0x124>)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f005 fb09 	bl	8007b50 <receive_data>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 8002542:	e003      	b.n	800254c <HAL_UART_RxCpltCallback+0xfc>
                last_telem_packet_pos = (last_telem_packet_pos + 1) % NUM_BUFFER_PACKETS;
            }
            */
        } else {
            // buffer overflow error:
            HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002544:	2102      	movs	r1, #2
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_UART_RxCpltCallback+0x128>)
 8002548:	f007 fbe7 	bl	8009d1a <HAL_GPIO_TogglePin>
        }

        RxRollover = 0;                                                    // reset the Rollover variable
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_UART_RxCpltCallback+0x11c>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
    } else {
        // no idle flag? --> DMA rollover occurred
        RxRollover++;       // increment Rollover Counter
    }
}
 8002552:	e005      	b.n	8002560 <HAL_UART_RxCpltCallback+0x110>
        RxRollover++;       // increment Rollover Counter
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_UART_RxCpltCallback+0x11c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_UART_RxCpltCallback+0x11c>)
 800255e:	701a      	strb	r2, [r3, #0]
}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000684 	.word	0x20000684
 800256c:	20000686 	.word	0x20000686
 8002570:	20001860 	.word	0x20001860
 8002574:	20000584 	.word	0x20000584
 8002578:	40020800 	.word	0x40020800

0800257c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002582:	f006 fc7f 	bl	8008e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002586:	f000 f921 	bl	80027cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800258a:	f000 fcbb 	bl	8002f04 <MX_GPIO_Init>
  MX_DMA_Init();
 800258e:	f000 fc99 	bl	8002ec4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002592:	f000 f9a3 	bl	80028dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8002596:	f000 f9d7 	bl	8002948 <MX_SPI2_Init>
  MX_SPI4_Init();
 800259a:	f000 fa0b 	bl	80029b4 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800259e:	f000 fc67 	bl	8002e70 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80025a2:	f000 fa3d 	bl	8002a20 <MX_TIM2_Init>
  MX_TIM6_Init();
 80025a6:	f000 fb8b 	bl	8002cc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80025aa:	f000 fbbf 	bl	8002d2c <MX_TIM7_Init>
  MX_TIM10_Init();
 80025ae:	f000 fbf3 	bl	8002d98 <MX_TIM10_Init>
  MX_TIM11_Init();
 80025b2:	f000 fc15 	bl	8002de0 <MX_TIM11_Init>
  MX_TIM3_Init();
 80025b6:	f000 fab3 	bl	8002b20 <MX_TIM3_Init>
  MX_TIM5_Init();
 80025ba:	f000 fb33 	bl	8002c24 <MX_TIM5_Init>
  MX_TIM13_Init();
 80025be:	f000 fc33 	bl	8002e28 <MX_TIM13_Init>
  MX_IWDG_Init();
 80025c2:	f000 f971 	bl	80028a8 <MX_IWDG_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 80025c6:	4864      	ldr	r0, [pc, #400]	; (8002758 <main+0x1dc>)
 80025c8:	f008 ff74 	bl	800b4b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 80025cc:	4863      	ldr	r0, [pc, #396]	; (800275c <main+0x1e0>)
 80025ce:	f008 ffd9 	bl	800b584 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 80025d2:	4863      	ldr	r0, [pc, #396]	; (8002760 <main+0x1e4>)
 80025d4:	f008 ffd6 	bl	800b584 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 80025d8:	4862      	ldr	r0, [pc, #392]	; (8002764 <main+0x1e8>)
 80025da:	f008 ffd3 	bl	800b584 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80025de:	4862      	ldr	r0, [pc, #392]	; (8002768 <main+0x1ec>)
 80025e0:	f008 ff68 	bl	800b4b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80025e4:	4861      	ldr	r0, [pc, #388]	; (800276c <main+0x1f0>)
 80025e6:	f008 ff65 	bl	800b4b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80025ea:	4861      	ldr	r0, [pc, #388]	; (8002770 <main+0x1f4>)
 80025ec:	f008 ffca 	bl	800b584 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80025f0:	4860      	ldr	r0, [pc, #384]	; (8002774 <main+0x1f8>)
 80025f2:	f008 ffc7 	bl	800b584 <HAL_TIM_Base_Start_IT>

  // UART DMA
  //HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
  __HAL_UART_ENABLE_IT(&COM_UART, UART_IT_IDLE);   // enable idle line interrupt
 80025f6:	4b60      	ldr	r3, [pc, #384]	; (8002778 <main+0x1fc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <main+0x1fc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0210 	orr.w	r2, r2, #16
 8002604:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8002606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800260a:	495c      	ldr	r1, [pc, #368]	; (800277c <main+0x200>)
 800260c:	485a      	ldr	r0, [pc, #360]	; (8002778 <main+0x1fc>)
 800260e:	f00a f8f4 	bl	800c7fa <HAL_UART_Receive_DMA>


  // Watchdog

  // Read variables from flash: this must be called very early in initialization!
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8002612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002616:	4a5a      	ldr	r2, [pc, #360]	; (8002780 <main+0x204>)
 8002618:	495a      	ldr	r1, [pc, #360]	; (8002784 <main+0x208>)
 800261a:	485b      	ldr	r0, [pc, #364]	; (8002788 <main+0x20c>)
 800261c:	f006 f949 	bl	80088b2 <init_flash>
  read_nonvolatile_variables();
 8002620:	f000 fdf2 	bl	8003208 <read_nonvolatile_variables>

  //init_serial_data(/*&buffer_info*/);

  init_board(FLIGHT_EC_ADDR);  // Comms
 8002624:	2003      	movs	r0, #3
 8002626:	f005 f95d 	bl	80078e4 <init_board>

  init_autosequence_timings();
 800262a:	f7fe fc6d 	bl	8000f08 <init_autosequence_timings>

  init_hardware();
 800262e:	f7fe ffd5 	bl	80015dc <init_hardware>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  execute_autosequence();
 8002632:	f7fe fde3 	bl	80011fc <execute_autosequence>

	  if (periodic_flag_50ms) {
 8002636:	4b55      	ldr	r3, [pc, #340]	; (800278c <main+0x210>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d016      	beq.n	800266e <main+0xf2>
		  periodic_flag_50ms = 0;
 8002640:	4b52      	ldr	r3, [pc, #328]	; (800278c <main+0x210>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002646:	4b52      	ldr	r3, [pc, #328]	; (8002790 <main+0x214>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10f      	bne.n	800266e <main+0xf2>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <main+0x218>)
 8002650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <main+0xe2>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 8002658:	484f      	ldr	r0, [pc, #316]	; (8002798 <main+0x21c>)
 800265a:	f003 fbe3 	bl	8005e24 <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 800265e:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <main+0x218>)
 8002660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <main+0xf2>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 8002668:	484c      	ldr	r0, [pc, #304]	; (800279c <main+0x220>)
 800266a:	f003 fbdb 	bl	8005e24 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 800266e:	4b4c      	ldr	r3, [pc, #304]	; (80027a0 <main+0x224>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d057      	beq.n	8002728 <main+0x1ac>
		  periodic_flag_5ms = 0;
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <main+0x224>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

		  // sample adcs and thermocouples
		  readAdcs(&SPI_ADC, adc_pins, adc_counts);
 800267e:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <main+0x228>)
 8002680:	4949      	ldr	r1, [pc, #292]	; (80027a8 <main+0x22c>)
 8002682:	484a      	ldr	r0, [pc, #296]	; (80027ac <main+0x230>)
 8002684:	f7ff fb0a 	bl	8001c9c <readAdcs>
		  readThermocouples(&SPI_TC, tc_pins, 5);
 8002688:	2205      	movs	r2, #5
 800268a:	4949      	ldr	r1, [pc, #292]	; (80027b0 <main+0x234>)
 800268c:	4849      	ldr	r0, [pc, #292]	; (80027b4 <main+0x238>)
 800268e:	f7ff fbef 	bl	8001e70 <readThermocouples>
		  updatePeripherals(adc_counts);
 8002692:	4844      	ldr	r0, [pc, #272]	; (80027a4 <main+0x228>)
 8002694:	f7ff fc14 	bl	8001ec0 <updatePeripherals>

		  update_serial_data_vars();
 8002698:	f002 ff08 	bl	80054ac <update_serial_data_vars>

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 800269c:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <main+0x214>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d106      	bne.n	80026b2 <main+0x136>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 80026a4:	483c      	ldr	r0, [pc, #240]	; (8002798 <main+0x21c>)
 80026a6:	f003 fb88 	bl	8005dba <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 80026aa:	483c      	ldr	r0, [pc, #240]	; (800279c <main+0x220>)
 80026ac:	f003 fb85 	bl	8005dba <tank_autopress_bang_bang>
 80026b0:	e034      	b.n	800271c <main+0x1a0>
		  }

		  else if (STATE == Startup || STATE == Ignition) {
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <main+0x214>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d003      	beq.n	80026c2 <main+0x146>
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <main+0x214>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d116      	bne.n	80026f0 <main+0x174>
			  uint32_t T_state = get_ellapsed_time_in_autosequence_state_ms();
 80026c2:	f7fe fd1d 	bl	8001100 <get_ellapsed_time_in_autosequence_state_ms>
 80026c6:	6078      	str	r0, [r7, #4]
			  // Initial motor position is arbitrarily put in the 5ms loop
			  // TODO: this code has a flaw, if Ignition begins less than
			  // autosequence.startup_motor_start_delay_ms after Startup,
			  // then initial position code will run before the delay
			  // is finished.
			  if (STATE == Ignition || (STATE == Startup && T_state
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <main+0x214>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d008      	beq.n	80026e2 <main+0x166>
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <main+0x214>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d120      	bne.n	800271a <main+0x19e>
					  >= autosequence.startup_motor_start_delay_ms)) {
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <main+0x218>)
 80026da:	681b      	ldr	r3, [r3, #0]
			  if (STATE == Ignition || (STATE == Startup && T_state
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d31b      	bcc.n	800271a <main+0x19e>
				  tank_startup_init_motor_position(&tanks[LOX_TANK_NUM]);
 80026e2:	482d      	ldr	r0, [pc, #180]	; (8002798 <main+0x21c>)
 80026e4:	f003 fcc0 	bl	8006068 <tank_startup_init_motor_position>
				  tank_startup_init_motor_position(&tanks[FUEL_TANK_NUM]);
 80026e8:	482c      	ldr	r0, [pc, #176]	; (800279c <main+0x220>)
 80026ea:	f003 fcbd 	bl	8006068 <tank_startup_init_motor_position>
		  else if (STATE == Startup || STATE == Ignition) {
 80026ee:	e014      	b.n	800271a <main+0x19e>
			  }
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  else if (STATE == Hotfire) {
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <main+0x214>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d111      	bne.n	800271c <main+0x1a0>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <main+0x218>)
 80026fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <main+0x18c>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 8002702:	4825      	ldr	r0, [pc, #148]	; (8002798 <main+0x21c>)
 8002704:	f003 fc84 	bl	8006010 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002708:	4b22      	ldr	r3, [pc, #136]	; (8002794 <main+0x218>)
 800270a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <main+0x1a0>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 8002712:	4822      	ldr	r0, [pc, #136]	; (800279c <main+0x220>)
 8002714:	f003 fc7c 	bl	8006010 <tank_check_control_valve_threshold>
 8002718:	e000      	b.n	800271c <main+0x1a0>
		  else if (STATE == Startup || STATE == Ignition) {
 800271a:	bf00      	nop
			  }
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <main+0x23c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <main+0x1ac>
			  save_flash_packet();
 8002724:	f002 ff22 	bl	800556c <save_flash_packet>
	  }



	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <main+0x240>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <main+0x1d2>
		  periodic_flag_100ms = 0;
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <main+0x240>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]

		  if (!telem_disabled) {
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <main+0x244>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <main+0x1d2>
			  send_telem_packet(SERVER_ADDR);
 8002740:	2007      	movs	r0, #7
 8002742:	f002 fef1 	bl	8005528 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002746:	2101      	movs	r1, #1
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <main+0x248>)
 800274a:	f007 fae6 	bl	8009d1a <HAL_GPIO_TogglePin>
		  eof_received = 0;
		  telem_buffer_sz = 0;
	  }
	  */

	  HAL_IWDG_Refresh(&hiwdg);
 800274e:	481e      	ldr	r0, [pc, #120]	; (80027c8 <main+0x24c>)
 8002750:	f007 fb3f 	bl	8009dd2 <HAL_IWDG_Refresh>
	  execute_autosequence();
 8002754:	e76d      	b.n	8002632 <main+0xb6>
 8002756:	bf00      	nop
 8002758:	20000ca8 	.word	0x20000ca8
 800275c:	20002148 	.word	0x20002148
 8002760:	20000c50 	.word	0x20000c50
 8002764:	20000d80 	.word	0x20000d80
 8002768:	200020b8 	.word	0x200020b8
 800276c:	20000cf0 	.word	0x20000cf0
 8002770:	20000e20 	.word	0x20000e20
 8002774:	20000d38 	.word	0x20000d38
 8002778:	20002100 	.word	0x20002100
 800277c:	20001860 	.word	0x20001860
 8002780:	40020c00 	.word	0x40020c00
 8002784:	20000bf8 	.word	0x20000bf8
 8002788:	20002290 	.word	0x20002290
 800278c:	20002144 	.word	0x20002144
 8002790:	200003b4 	.word	0x200003b4
 8002794:	20000730 	.word	0x20000730
 8002798:	20000688 	.word	0x20000688
 800279c:	200006dc 	.word	0x200006dc
 80027a0:	20000b94 	.word	0x20000b94
 80027a4:	20000ac8 	.word	0x20000ac8
 80027a8:	20000b28 	.word	0x20000b28
 80027ac:	20002060 	.word	0x20002060
 80027b0:	20000aa0 	.word	0x20000aa0
 80027b4:	20000dc8 	.word	0x20000dc8
 80027b8:	200003f8 	.word	0x200003f8
 80027bc:	20000ca4 	.word	0x20000ca4
 80027c0:	20000687 	.word	0x20000687
 80027c4:	40020800 	.word	0x40020800
 80027c8:	20000c98 	.word	0x20000c98

080027cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b094      	sub	sp, #80	; 0x50
 80027d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	2234      	movs	r2, #52	; 0x34
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f00b f8b8 	bl	800d950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <SystemClock_Config+0xd4>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <SystemClock_Config+0xd4>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <SystemClock_Config+0xd4>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800280c:	2300      	movs	r3, #0
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <SystemClock_Config+0xd8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002818:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <SystemClock_Config+0xd8>)
 800281a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <SystemClock_Config+0xd8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800282c:	2309      	movs	r3, #9
 800282e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002836:	2301      	movs	r3, #1
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	2302      	movs	r3, #2
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800283e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002844:	2308      	movs	r3, #8
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002848:	235a      	movs	r3, #90	; 0x5a
 800284a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800284c:	2302      	movs	r3, #2
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002854:	2302      	movs	r3, #2
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4618      	mov	r0, r3
 800285e:	f007 fd93 	bl	800a388 <HAL_RCC_OscConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002868:	f000 fcc8 	bl	80031fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800286c:	230f      	movs	r3, #15
 800286e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002870:	2302      	movs	r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f007 fab4 	bl	8009df4 <HAL_RCC_ClockConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002892:	f000 fcb3 	bl	80031fc <Error_Handler>
  }
}
 8002896:	bf00      	nop
 8002898:	3750      	adds	r7, #80	; 0x50
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000

080028a8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_IWDG_Init+0x2c>)
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <MX_IWDG_Init+0x30>)
 80028b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_IWDG_Init+0x2c>)
 80028b4:	2206      	movs	r2, #6
 80028b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 624;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_IWDG_Init+0x2c>)
 80028ba:	f44f 721c 	mov.w	r2, #624	; 0x270
 80028be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <MX_IWDG_Init+0x2c>)
 80028c2:	f007 fa44 	bl	8009d4e <HAL_IWDG_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80028cc:	f000 fc96 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000c98 	.word	0x20000c98
 80028d8:	40003000 	.word	0x40003000

080028dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <MX_SPI1_Init+0x64>)
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <MX_SPI1_Init+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_SPI1_Init+0x64>)
 80028e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <MX_SPI1_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <MX_SPI1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_SPI1_Init+0x64>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <MX_SPI1_Init+0x64>)
 8002902:	2201      	movs	r2, #1
 8002904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_SPI1_Init+0x64>)
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_SPI1_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <MX_SPI1_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_SPI1_Init+0x64>)
 8002928:	220a      	movs	r2, #10
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <MX_SPI1_Init+0x64>)
 800292e:	f007 ffc9 	bl	800a8c4 <HAL_SPI_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002938:	f000 fc60 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20002060 	.word	0x20002060
 8002944:	40013000 	.word	0x40013000

08002948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_SPI2_Init+0x64>)
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <MX_SPI2_Init+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_SPI2_Init+0x64>)
 8002954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_SPI2_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_SPI2_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_SPI2_Init+0x64>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_SPI2_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_SPI2_Init+0x64>)
 8002974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_SPI2_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <MX_SPI2_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_SPI2_Init+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <MX_SPI2_Init+0x64>)
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_SPI2_Init+0x64>)
 8002994:	220a      	movs	r2, #10
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_SPI2_Init+0x64>)
 800299a:	f007 ff93 	bl	800a8c4 <HAL_SPI_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029a4:	f000 fc2a 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000bf8 	.word	0x20000bf8
 80029b0:	40003800 	.word	0x40003800

080029b4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <MX_SPI4_Init+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029e8:	2218      	movs	r2, #24
 80029ea:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <MX_SPI4_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_SPI4_Init+0x64>)
 8002a00:	220a      	movs	r2, #10
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002a04:	4804      	ldr	r0, [pc, #16]	; (8002a18 <MX_SPI4_Init+0x64>)
 8002a06:	f007 ff5d 	bl	800a8c4 <HAL_SPI_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002a10:	f000 fbf4 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000dc8 	.word	0x20000dc8
 8002a1c:	40013400 	.word	0x40013400

08002a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a34:	f107 0320 	add.w	r3, r7, #32
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44999;
 8002a58:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a5a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a68:	2263      	movs	r2, #99	; 0x63
 8002a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a78:	4828      	ldr	r0, [pc, #160]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a7a:	f008 fccb 	bl	800b414 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a84:	f000 fbba 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a92:	4619      	mov	r1, r3
 8002a94:	4821      	ldr	r0, [pc, #132]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002a96:	f009 f941 	bl	800bd1c <HAL_TIM_ConfigClockSource>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002aa0:	f000 fbac 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002aa4:	481d      	ldr	r0, [pc, #116]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002aa6:	f008 fddd 	bl	800b664 <HAL_TIM_PWM_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ab0:	f000 fba4 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002abc:	f107 0320 	add.w	r3, r7, #32
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4816      	ldr	r0, [pc, #88]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002ac4:	f009 fd2a 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ace:	f000 fb95 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad2:	2360      	movs	r3, #96	; 0x60
 8002ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ada:	2302      	movs	r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002aea:	f009 f855 	bl	800bb98 <HAL_TIM_PWM_ConfigChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002af4:	f000 fb82 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2204      	movs	r2, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4807      	ldr	r0, [pc, #28]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002b00:	f009 f84a 	bl	800bb98 <HAL_TIM_PWM_ConfigChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002b0a:	f000 fb77 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b0e:	4803      	ldr	r0, [pc, #12]	; (8002b1c <MX_TIM2_Init+0xfc>)
 8002b10:	f002 ffa8 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 8002b14:	bf00      	nop
 8002b16:	3738      	adds	r7, #56	; 0x38
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200020b8 	.word	0x200020b8

08002b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	615a      	str	r2, [r3, #20]
 8002b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b52:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <MX_TIM3_Init+0x100>)
 8002b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44999;
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b58:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b66:	2263      	movs	r2, #99	; 0x63
 8002b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b76:	4829      	ldr	r0, [pc, #164]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b78:	f008 fc4c 	bl	800b414 <HAL_TIM_Base_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b82:	f000 fb3b 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b90:	4619      	mov	r1, r3
 8002b92:	4822      	ldr	r0, [pc, #136]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002b94:	f009 f8c2 	bl	800bd1c <HAL_TIM_ConfigClockSource>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b9e:	f000 fb2d 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ba2:	481e      	ldr	r0, [pc, #120]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002ba4:	f008 fd5e 	bl	800b664 <HAL_TIM_PWM_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002bae:	f000 fb25 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bba:	f107 0320 	add.w	r3, r7, #32
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4816      	ldr	r0, [pc, #88]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002bc2:	f009 fcab 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bcc:	f000 fb16 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd0:	2360      	movs	r3, #96	; 0x60
 8002bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2200      	movs	r2, #0
 8002be4:	4619      	mov	r1, r3
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002be8:	f008 ffd6 	bl	800bb98 <HAL_TIM_PWM_ConfigChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bf2:	f000 fb03 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4807      	ldr	r0, [pc, #28]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002bfe:	f008 ffcb 	bl	800bb98 <HAL_TIM_PWM_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c08:	f000 faf8 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <MX_TIM3_Init+0xfc>)
 8002c0e:	f002 ff29 	bl	8005a64 <HAL_TIM_MspPostInit>

}
 8002c12:	bf00      	nop
 8002c14:	3738      	adds	r7, #56	; 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000cf0 	.word	0x20000cf0
 8002c20:	40000400 	.word	0x40000400

08002c24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c38:	463b      	mov	r3, r7
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <MX_TIM5_Init+0x98>)
 8002c44:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 44;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c48:	222c      	movs	r2, #44	; 0x2c
 8002c4a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c66:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c68:	f008 fbd4 	bl	800b414 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c72:	f000 fac3 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002c84:	f009 f84a 	bl	800bd1c <HAL_TIM_ConfigClockSource>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c8e:	f000 fab5 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_TIM5_Init+0x94>)
 8002ca0:	f009 fc3c 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002caa:	f000 faa7 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000ca8 	.word	0x20000ca8
 8002cbc:	40000c00 	.word	0x40000c00

08002cc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002cd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002cd6:	222c      	movs	r2, #44	; 0x2c
 8002cd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ce6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002cf0:	f008 fb90 	bl	800b414 <HAL_TIM_Base_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002cfa:	f000 fa7f 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d06:	463b      	mov	r3, r7
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <MX_TIM6_Init+0x64>)
 8002d0c:	f009 fc06 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d16:	f000 fa71 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000e20 	.word	0x20000e20
 8002d28:	40001000 	.word	0x40001000

08002d2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d32:	463b      	mov	r3, r7
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <MX_TIM7_Init+0x68>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 44999;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d42:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002d46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d50:	2204      	movs	r2, #4
 8002d52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d5a:	480d      	ldr	r0, [pc, #52]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d5c:	f008 fb5a 	bl	800b414 <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002d66:	f000 fa49 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	4619      	mov	r1, r3
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <MX_TIM7_Init+0x64>)
 8002d78:	f009 fbd0 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002d82:	f000 fa3b 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20002148 	.word	0x20002148
 8002d94:	40001400 	.word	0x40001400

08002d98 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002d9e:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <MX_TIM10_Init+0x44>)
 8002da0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 44999;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002da4:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002da8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49;
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002db2:	2231      	movs	r2, #49	; 0x31
 8002db4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_TIM10_Init+0x40>)
 8002dc4:	f008 fb26 	bl	800b414 <HAL_TIM_Base_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002dce:	f000 fa15 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000c50 	.word	0x20000c50
 8002ddc:	40014400 	.word	0x40014400

08002de0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <MX_TIM11_Init+0x44>)
 8002de8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 44999;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002dec:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002df0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002dfa:	2263      	movs	r2, #99	; 0x63
 8002dfc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_TIM11_Init+0x40>)
 8002e0c:	f008 fb02 	bl	800b414 <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002e16:	f000 f9f1 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000d80 	.word	0x20000d80
 8002e24:	40014800 	.word	0x40014800

08002e28 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <MX_TIM13_Init+0x44>)
 8002e30:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 44;
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e34:	222c      	movs	r2, #44	; 0x2c
 8002e36:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e44:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_TIM13_Init+0x40>)
 8002e54:	f008 fade 	bl	800b414 <HAL_TIM_Base_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002e5e:	f000 f9cd 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000d38 	.word	0x20000d38
 8002e6c:	40001c00 	.word	0x40001c00

08002e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <MX_USART2_UART_Init+0x50>)
 8002e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002ea8:	f009 fbc8 	bl	800c63c <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eb2:	f000 f9a3 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002100 	.word	0x20002100
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2010      	movs	r0, #16
 8002eec:	f006 f917 	bl	800911e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ef0:	2010      	movs	r0, #16
 8002ef2:	f006 f930 	bl	8009156 <HAL_NVIC_EnableIRQ>

}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	4bb1      	ldr	r3, [pc, #708]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4ab0      	ldr	r2, [pc, #704]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4bae      	ldr	r3, [pc, #696]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	4baa      	ldr	r3, [pc, #680]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4aa9      	ldr	r2, [pc, #676]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4ba7      	ldr	r3, [pc, #668]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4ba3      	ldr	r3, [pc, #652]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4aa2      	ldr	r2, [pc, #648]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b9c      	ldr	r3, [pc, #624]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a9b      	ldr	r2, [pc, #620]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b99      	ldr	r3, [pc, #612]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a94      	ldr	r2, [pc, #592]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a8d      	ldr	r2, [pc, #564]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <MX_GPIO_Init+0x2e0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	217f      	movs	r1, #127	; 0x7f
 8002fc6:	4888      	ldr	r0, [pc, #544]	; (80031e8 <MX_GPIO_Init+0x2e4>)
 8002fc8:	f006 fe8e 	bl	8009ce8 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f64f 610f 	movw	r1, #65039	; 0xfe0f
 8002fd2:	4886      	ldr	r0, [pc, #536]	; (80031ec <MX_GPIO_Init+0x2e8>)
 8002fd4:	f006 fe88 	bl	8009ce8 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin|mtr0_inB0_Pin
                          |mtr0_inA0_Pin|mtr0_inA1_Pin|mtr3_in0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cs_GPIO_Port, adc0_cs_Pin, GPIO_PIN_SET);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2108      	movs	r1, #8
 8002fdc:	4884      	ldr	r0, [pc, #528]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 8002fde:	f006 fe83 	bl	8009ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cnvst_GPIO_Port, adc0_cnvst_Pin, GPIO_PIN_SET);
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2110      	movs	r1, #16
 8002fe6:	4881      	ldr	r0, [pc, #516]	; (80031ec <MX_GPIO_Init+0x2e8>)
 8002fe8:	f006 fe7e 	bl	8009ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 8002fec:	2201      	movs	r2, #1
 8002fee:	f241 4107 	movw	r1, #5127	; 0x1407
 8002ff2:	4880      	ldr	r0, [pc, #512]	; (80031f4 <MX_GPIO_Init+0x2f0>)
 8002ff4:	f006 fe78 	bl	8009ce8 <HAL_GPIO_WritePin>
                          |SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002ffe:	487a      	ldr	r0, [pc, #488]	; (80031e8 <MX_GPIO_Init+0x2e4>)
 8003000:	f006 fe72 	bl	8009ce8 <HAL_GPIO_WritePin>
                          |tc3_cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003004:	2201      	movs	r2, #1
 8003006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300a:	487b      	ldr	r0, [pc, #492]	; (80031f8 <MX_GPIO_Init+0x2f4>)
 800300c:	f006 fe6c 	bl	8009ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin|mtr3_in1_Pin
 8003010:	2200      	movs	r2, #0
 8003012:	f640 619f 	movw	r1, #3743	; 0xe9f
 8003016:	4878      	ldr	r0, [pc, #480]	; (80031f8 <MX_GPIO_Init+0x2f4>)
 8003018:	f006 fe66 	bl	8009ce8 <HAL_GPIO_WritePin>
                          |mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin|mtr1_inB0_Pin
                          |mtr1_inB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, mtr0_inB1_Pin|GPIO_3_Pin, GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003022:	4873      	ldr	r0, [pc, #460]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 8003024:	f006 fe60 	bl	8009ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : en_vlv8_Pin en_vlv7_Pin en_vlv6_Pin en_vlv5_Pin
                           en_vlv4_Pin GPIO_1_Pin en_vlv0_Pin */
  GPIO_InitStruct.Pin = en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 8003028:	237f      	movs	r3, #127	; 0x7f
 800302a:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	2301      	movs	r3, #1
 800302e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	486a      	ldr	r0, [pc, #424]	; (80031e8 <MX_GPIO_Init+0x2e4>)
 8003040:	f006 fca6 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv3_Pin en_vlv2_Pin en_vlv1_Pin LED0_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003044:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8003048:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304a:	2301      	movs	r3, #1
 800304c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	4863      	ldr	r0, [pc, #396]	; (80031ec <MX_GPIO_Init+0x2e8>)
 800305e:	f006 fc97 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall1A_Pin e_hall1B_Pin e_hall1C_Pin adc0_eoc_Pin */
  GPIO_InitStruct.Pin = e_hall1A_Pin|e_hall1B_Pin|e_hall1C_Pin|adc0_eoc_Pin;
 8003062:	2317      	movs	r3, #23
 8003064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	485e      	ldr	r0, [pc, #376]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 8003076:	f006 fc8b 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cs_Pin mtr0_inB1_Pin */
  GPIO_InitStruct.Pin = adc0_cs_Pin|mtr0_inB1_Pin;
 800307a:	f640 0308 	movw	r3, #2056	; 0x808
 800307e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003088:	2303      	movs	r3, #3
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	4857      	ldr	r0, [pc, #348]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 8003094:	f006 fc7c 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cnvst_Pin mtr0_inB0_Pin mtr0_inA0_Pin mtr0_inA1_Pin
                           mtr3_in0_Pin */
  GPIO_InitStruct.Pin = adc0_cnvst_Pin|mtr0_inB0_Pin|mtr0_inA0_Pin|mtr0_inA1_Pin
 8003098:	f641 6310 	movw	r3, #7696	; 0x1e10
 800309c:	61fb      	str	r3, [r7, #28]
                          |mtr3_in0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	2301      	movs	r3, #1
 80030a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a6:	2303      	movs	r3, #3
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4619      	mov	r1, r3
 80030b0:	484e      	ldr	r0, [pc, #312]	; (80031ec <MX_GPIO_Init+0x2e8>)
 80030b2:	f006 fc6d 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pin : adc1_eoc_Pin */
  GPIO_InitStruct.Pin = adc1_eoc_Pin;
 80030b6:	2320      	movs	r3, #32
 80030b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc1_eoc_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	4848      	ldr	r0, [pc, #288]	; (80031ec <MX_GPIO_Init+0x2e8>)
 80030ca:	f006 fc61 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc1_cs_Pin adc1_cnvst_Pin adc2_cs_Pin tc4_cs_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 80030ce:	f241 4307 	movw	r3, #5127	; 0x1407
 80030d2:	61fb      	str	r3, [r7, #28]
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	4843      	ldr	r0, [pc, #268]	; (80031f4 <MX_GPIO_Init+0x2f0>)
 80030e8:	f006 fc52 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pin : adc2_eoc_Pin */
  GPIO_InitStruct.Pin = adc2_eoc_Pin;
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc2_eoc_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	483a      	ldr	r0, [pc, #232]	; (80031e8 <MX_GPIO_Init+0x2e4>)
 8003100:	f006 fc46 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc2_cnvst_Pin tc0_cs_Pin tc1_cs_Pin tc2_cs_Pin
                           tc3_cs_Pin */
  GPIO_InitStruct.Pin = adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 8003104:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 8003108:	61fb      	str	r3, [r7, #28]
                          |tc3_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310a:	2301      	movs	r3, #1
 800310c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	4832      	ldr	r0, [pc, #200]	; (80031e8 <MX_GPIO_Init+0x2e4>)
 800311e:	f006 fc37 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin mtr2_in0_Pin mtr2_in1_Pin mtr2_in2_Pin
                           mtr3_in1_Pin mtr3_in2_Pin mtr1_inA0_Pin mtr1_inA1_Pin
                           mtr1_inB0_Pin mtr1_inB1_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin
 8003122:	f640 739f 	movw	r3, #3999	; 0xf9f
 8003126:	61fb      	str	r3, [r7, #28]
                          |mtr3_in1_Pin|mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin
                          |mtr1_inB0_Pin|mtr1_inB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003128:	2301      	movs	r3, #1
 800312a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	482f      	ldr	r0, [pc, #188]	; (80031f8 <MX_GPIO_Init+0x2f4>)
 800313c:	f006 fc28 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall0A_Pin e_hall0B_Pin e_hall0C_Pin */
  GPIO_InitStruct.Pin = e_hall0A_Pin|e_hall0B_Pin|e_hall0C_Pin;
 8003140:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4619      	mov	r1, r3
 8003154:	4828      	ldr	r0, [pc, #160]	; (80031f8 <MX_GPIO_Init+0x2f4>)
 8003156:	f006 fc1b 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr2_pwm0_Pin mtr2_pwm1_Pin mtr2_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr2_pwm0_Pin|mtr2_pwm1_Pin|mtr2_pwm2_Pin;
 800315a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800315e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800316c:	2303      	movs	r3, #3
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	4619      	mov	r1, r3
 8003176:	481d      	ldr	r0, [pc, #116]	; (80031ec <MX_GPIO_Init+0x2e8>)
 8003178:	f006 fc0a 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr3_pwm0_Pin mtr3_pwm1_Pin mtr3_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr3_pwm0_Pin|mtr3_pwm1_Pin|mtr3_pwm2_Pin;
 800317c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800318e:	2301      	movs	r3, #1
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	4619      	mov	r1, r3
 8003198:	4815      	ldr	r0, [pc, #84]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 800319a:	f006 fbf9 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 800319e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a4:	2301      	movs	r3, #1
 80031a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	4619      	mov	r1, r3
 80031b6:	480e      	ldr	r0, [pc, #56]	; (80031f0 <MX_GPIO_Init+0x2ec>)
 80031b8:	f006 fbea 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031bc:	23c0      	movs	r3, #192	; 0xc0
 80031be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031cc:	2307      	movs	r3, #7
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	4807      	ldr	r0, [pc, #28]	; (80031f4 <MX_GPIO_Init+0x2f0>)
 80031d8:	f006 fbda 	bl	8009990 <HAL_GPIO_Init>

}
 80031dc:	bf00      	nop
 80031de:	3730      	adds	r7, #48	; 0x30
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020c00 	.word	0x40020c00

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003204:	e7fe      	b.n	8003204 <Error_Handler+0x8>
	...

08003208 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 800320e:	23fe      	movs	r3, #254	; 0xfe
 8003210:	4a94      	ldr	r2, [pc, #592]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003212:	2100      	movs	r1, #0
 8003214:	4894      	ldr	r0, [pc, #592]	; (8003468 <read_nonvolatile_variables+0x260>)
 8003216:	f005 fde8 	bl	8008dea <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 800321a:	4b92      	ldr	r3, [pc, #584]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <read_nonvolatile_variables+0x1e>
		return 0;
 8003222:	2300      	movs	r3, #0
 8003224:	e22f      	b.n	8003686 <read_nonvolatile_variables+0x47e>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 800322c:	4b8d      	ldr	r3, [pc, #564]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003232:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800323c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800346c <read_nonvolatile_variables+0x264>
 8003240:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <read_nonvolatile_variables+0x268>)
 8003246:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 800324a:	4b86      	ldr	r3, [pc, #536]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800324c:	78db      	ldrb	r3, [r3, #3]
 800324e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8003250:	4b84      	ldr	r3, [pc, #528]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8003256:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003260:	eddf 6a82 	vldr	s13, [pc, #520]	; 800346c <read_nonvolatile_variables+0x264>
 8003264:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8003268:	4b81      	ldr	r3, [pc, #516]	; (8003470 <read_nonvolatile_variables+0x268>)
 800326a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003270:	795b      	ldrb	r3, [r3, #5]
 8003272:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 8003274:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003276:	799b      	ldrb	r3, [r3, #6]
 8003278:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 800327a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003284:	eddf 6a79 	vldr	s13, [pc, #484]	; 800346c <read_nonvolatile_variables+0x264>
 8003288:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 800328c:	4b78      	ldr	r3, [pc, #480]	; (8003470 <read_nonvolatile_variables+0x268>)
 800328e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003292:	4b74      	ldr	r3, [pc, #464]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003294:	79db      	ldrb	r3, [r3, #7]
 8003296:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8003298:	4b72      	ldr	r3, [pc, #456]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800329a:	7a1b      	ldrb	r3, [r3, #8]
 800329c:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 800329e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a8:	eddf 6a70 	vldr	s13, [pc, #448]	; 800346c <read_nonvolatile_variables+0x264>
 80032ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <read_nonvolatile_variables+0x268>)
 80032b2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 80032b6:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80032b8:	7a5b      	ldrb	r3, [r3, #9]
 80032ba:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 80032bc:	4b69      	ldr	r3, [pc, #420]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80032be:	7a9b      	ldrb	r3, [r3, #10]
 80032c0:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 80032c2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032cc:	eddf 6a67 	vldr	s13, [pc, #412]	; 800346c <read_nonvolatile_variables+0x264>
 80032d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <read_nonvolatile_variables+0x268>)
 80032d6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 80032da:	4b62      	ldr	r3, [pc, #392]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80032dc:	7adb      	ldrb	r3, [r3, #11]
 80032de:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 80032e0:	4b60      	ldr	r3, [pc, #384]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80032e2:	7b1b      	ldrb	r3, [r3, #12]
 80032e4:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 80032e6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800346c <read_nonvolatile_variables+0x264>
 80032f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 80032f8:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <read_nonvolatile_variables+0x268>)
 80032fa:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 80032fe:	4b59      	ldr	r3, [pc, #356]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003300:	7b5b      	ldrb	r3, [r3, #13]
 8003302:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8003304:	4b57      	ldr	r3, [pc, #348]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003306:	7b9b      	ldrb	r3, [r3, #14]
 8003308:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 800330a:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 800330c:	4b55      	ldr	r3, [pc, #340]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800330e:	7bdb      	ldrb	r3, [r3, #15]
 8003310:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8003312:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003316:	7c1b      	ldrb	r3, [r3, #16]
 8003318:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 800331a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003324:	eddf 6a51 	vldr	s13, [pc, #324]	; 800346c <read_nonvolatile_variables+0x264>
 8003328:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <read_nonvolatile_variables+0x268>)
 800332e:	edc3 7a04 	vstr	s15, [r3, #16]
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8003332:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003334:	7c5b      	ldrb	r3, [r3, #17]
 8003336:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800333a:	7c9b      	ldrb	r3, [r3, #18]
 800333c:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 800333e:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003342:	7cdb      	ldrb	r3, [r3, #19]
 8003344:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8003346:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800334a:	7d1b      	ldrb	r3, [r3, #20]
 800334c:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 800334e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003358:	eddf 6a44 	vldr	s13, [pc, #272]	; 800346c <read_nonvolatile_variables+0x264>
 800335c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8003360:	4b43      	ldr	r3, [pc, #268]	; (8003470 <read_nonvolatile_variables+0x268>)
 8003362:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003368:	7d5b      	ldrb	r3, [r3, #21]
 800336a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 800336c:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800336e:	7d9b      	ldrb	r3, [r3, #22]
 8003370:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003372:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003380:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <read_nonvolatile_variables+0x268>)
 8003386:	edc3 7a08 	vstr	s15, [r3, #32]
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <read_nonvolatile_variables+0x25c>)
 800338c:	7ddb      	ldrb	r3, [r3, #23]
 800338e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003392:	7e1b      	ldrb	r3, [r3, #24]
 8003394:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8003396:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <read_nonvolatile_variables+0x268>)
 80033aa:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 80033ae:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80033b0:	7f5b      	ldrb	r3, [r3, #29]
 80033b2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80033b6:	7f9b      	ldrb	r3, [r3, #30]
 80033b8:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 80033ba:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <read_nonvolatile_variables+0x268>)
 80033ce:	edc3 7a07 	vstr	s15, [r3, #28]
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80033d4:	7fdb      	ldrb	r3, [r3, #31]
 80033d6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <read_nonvolatile_variables+0x25c>)
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 80033e0:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ea:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <read_nonvolatile_variables+0x268>)
 80033f4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80033f8:	2300      	movs	r3, #0
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	e02c      	b.n	8003458 <read_nonvolatile_variables+0x250>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3325      	adds	r3, #37	; 0x25
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3326      	adds	r3, #38	; 0x26
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003416:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	3327      	adds	r3, #39	; 0x27
 8003420:	4910      	ldr	r1, [pc, #64]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003426:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	330a      	adds	r3, #10
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <read_nonvolatile_variables+0x25c>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003434:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800343e:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003440:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <read_nonvolatile_variables+0x26c>)
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	3301      	adds	r3, #1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b13      	cmp	r3, #19
 800345c:	d9cf      	bls.n	80033fe <read_nonvolatile_variables+0x1f6>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 800345e:	2300      	movs	r3, #0
 8003460:	71bb      	strb	r3, [r7, #6]
 8003462:	e036      	b.n	80034d2 <read_nonvolatile_variables+0x2ca>
 8003464:	20002190 	.word	0x20002190
 8003468:	20002290 	.word	0x20002290
 800346c:	42c80000 	.word	0x42c80000
 8003470:	20000688 	.word	0x20000688
 8003474:	2000026c 	.word	0x2000026c
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003478:	79bb      	ldrb	r3, [r7, #6]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	3375      	adds	r3, #117	; 0x75
 800347e:	4a84      	ldr	r2, [pc, #528]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003484:	79bb      	ldrb	r3, [r7, #6]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3376      	adds	r3, #118	; 0x76
 800348a:	4a81      	ldr	r2, [pc, #516]	; (8003690 <read_nonvolatile_variables+0x488>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003490:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003494:	79bb      	ldrb	r3, [r7, #6]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3377      	adds	r3, #119	; 0x77
 800349a:	497d      	ldr	r1, [pc, #500]	; (8003690 <read_nonvolatile_variables+0x488>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80034a0:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80034a2:	79bb      	ldrb	r3, [r7, #6]
 80034a4:	331e      	adds	r3, #30
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4979      	ldr	r1, [pc, #484]	; (8003690 <read_nonvolatile_variables+0x488>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80034ae:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80034b8:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80034ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80034be:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80034c2:	4a74      	ldr	r2, [pc, #464]	; (8003694 <read_nonvolatile_variables+0x48c>)
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	3301      	adds	r3, #1
 80034d0:	71bb      	strb	r3, [r7, #6]
 80034d2:	79bb      	ldrb	r3, [r7, #6]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d9cf      	bls.n	8003478 <read_nonvolatile_variables+0x270>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 80034d8:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <read_nonvolatile_variables+0x488>)
 80034da:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <read_nonvolatile_variables+0x490>)
 80034e0:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 80034e2:	4b6b      	ldr	r3, [pc, #428]	; (8003690 <read_nonvolatile_variables+0x488>)
 80034e4:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 80034e8:	4b6b      	ldr	r3, [pc, #428]	; (8003698 <read_nonvolatile_variables+0x490>)
 80034ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 80034ee:	4b68      	ldr	r3, [pc, #416]	; (8003690 <read_nonvolatile_variables+0x488>)
 80034f0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80034f4:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 80034f6:	4b66      	ldr	r3, [pc, #408]	; (8003690 <read_nonvolatile_variables+0x488>)
 80034f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034fc:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 80034fe:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003500:	4b63      	ldr	r3, [pc, #396]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003502:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003506:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8003508:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <read_nonvolatile_variables+0x488>)
 800350c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003510:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003512:	4313      	orrs	r3, r2
 8003514:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <read_nonvolatile_variables+0x494>)
 8003518:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <read_nonvolatile_variables+0x488>)
 800351c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003520:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003524:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003528:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 800352a:	b21b      	sxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b21b      	sxth	r3, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b5a      	ldr	r3, [pc, #360]	; (800369c <read_nonvolatile_variables+0x494>)
 8003534:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003538:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800353c:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003540:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003544:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003546:	b21b      	sxth	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b21b      	sxth	r3, r3
 800354c:	b29a      	uxth	r2, r3
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <read_nonvolatile_variables+0x494>)
 8003550:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003554:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <read_nonvolatile_variables+0x494>)
 800355a:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 800355c:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <read_nonvolatile_variables+0x488>)
 800355e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003562:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8003564:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003566:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800356a:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 800356c:	b21b      	sxth	r3, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	b21b      	sxth	r3, r3
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b49      	ldr	r3, [pc, #292]	; (800369c <read_nonvolatile_variables+0x494>)
 8003576:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <read_nonvolatile_variables+0x488>)
 800357a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800357e:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003582:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003586:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003588:	b21b      	sxth	r3, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	b21b      	sxth	r3, r3
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <read_nonvolatile_variables+0x494>)
 8003592:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003594:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003596:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800359a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 800359c:	4b3c      	ldr	r3, [pc, #240]	; (8003690 <read_nonvolatile_variables+0x488>)
 800359e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80035a2:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 80035a4:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <read_nonvolatile_variables+0x488>)
 80035a8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80035ac:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 80035ae:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <read_nonvolatile_variables+0x488>)
 80035b2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80035b6:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 80035b8:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036a0 <read_nonvolatile_variables+0x498>
 80035c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <read_nonvolatile_variables+0x49c>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80035d0:	2300      	movs	r3, #0
 80035d2:	717b      	strb	r3, [r7, #5]
 80035d4:	e053      	b.n	800367e <read_nonvolatile_variables+0x476>
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 80035d6:	797b      	ldrb	r3, [r7, #5]
 80035d8:	335c      	adds	r3, #92	; 0x5c
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <read_nonvolatile_variables+0x488>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 80035e2:	797b      	ldrb	r3, [r7, #5]
 80035e4:	335c      	adds	r3, #92	; 0x5c
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	3301      	adds	r3, #1
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <read_nonvolatile_variables+0x488>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	021b      	lsls	r3, r3, #8
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 80035f0:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 80035fa:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 80035fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003600:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <read_nonvolatile_variables+0x4a0>)
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 800360e:	797b      	ldrb	r3, [r7, #5]
 8003610:	3348      	adds	r3, #72	; 0x48
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 800361a:	797b      	ldrb	r3, [r7, #5]
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	3301      	adds	r3, #1
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <read_nonvolatile_variables+0x488>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	021b      	lsls	r3, r3, #8
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003628:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003632:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003634:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003638:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <read_nonvolatile_variables+0x4a4>)
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8003646:	797b      	ldrb	r3, [r7, #5]
 8003648:	3370      	adds	r3, #112	; 0x70
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4a10      	ldr	r2, [pc, #64]	; (8003690 <read_nonvolatile_variables+0x488>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] << 8));
 8003652:	797b      	ldrb	r3, [r7, #5]
 8003654:	3370      	adds	r3, #112	; 0x70
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	3301      	adds	r3, #1
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <read_nonvolatile_variables+0x488>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	021b      	lsls	r3, r3, #8
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8003660:	ea41 0203 	orr.w	r2, r1, r3
 8003664:	797b      	ldrb	r3, [r7, #5]
 8003666:	ee07 2a90 	vmov	s15, r2
 800366a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <read_nonvolatile_variables+0x4a8>)
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003678:	797b      	ldrb	r3, [r7, #5]
 800367a:	3301      	adds	r3, #1
 800367c:	717b      	strb	r3, [r7, #5]
 800367e:	797b      	ldrb	r3, [r7, #5]
 8003680:	2b13      	cmp	r3, #19
 8003682:	d9a8      	bls.n	80035d6 <read_nonvolatile_variables+0x3ce>
	}

	// Successful read
	return 1;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20002190 	.word	0x20002190
 8003694:	200002bc 	.word	0x200002bc
 8003698:	20000688 	.word	0x20000688
 800369c:	20000730 	.word	0x20000730
 80036a0:	461c4000 	.word	0x461c4000
 80036a4:	200003e8 	.word	0x200003e8
 80036a8:	200002c4 	.word	0x200002c4
 80036ac:	20000314 	.word	0x20000314
 80036b0:	20000364 	.word	0x20000364

080036b4 <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 80036ba:	4bcb      	ldr	r3, [pc, #812]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 80036c0:	4bca      	ldr	r3, [pc, #808]	; (80039ec <save_nonvolatile_variables+0x338>)
 80036c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036c6:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80036ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d2:	ee17 3a90 	vmov	r3, s15
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4bc3      	ldr	r3, [pc, #780]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80036dc:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 80036de:	4bc3      	ldr	r3, [pc, #780]	; (80039ec <save_nonvolatile_variables+0x338>)
 80036e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036e4:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	4bba      	ldr	r3, [pc, #744]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80036fe:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8003700:	4bba      	ldr	r3, [pc, #744]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003702:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003706:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80039f0 <save_nonvolatile_variables+0x33c>
 800370a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800370e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003712:	ee17 3a90 	vmov	r3, s15
 8003716:	b29b      	uxth	r3, r3
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4bb3      	ldr	r3, [pc, #716]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800371c:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 800371e:	4bb3      	ldr	r3, [pc, #716]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003720:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003724:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003730:	ee17 3a90 	vmov	r3, s15
 8003734:	b29b      	uxth	r3, r3
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4baa      	ldr	r3, [pc, #680]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800373e:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8003740:	4baa      	ldr	r3, [pc, #680]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003742:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003746:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80039f0 <save_nonvolatile_variables+0x33c>
 800374a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800374e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003752:	ee17 3a90 	vmov	r3, s15
 8003756:	b29b      	uxth	r3, r3
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4ba3      	ldr	r3, [pc, #652]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800375c:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003760:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003764:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003770:	ee17 3a90 	vmov	r3, s15
 8003774:	b29b      	uxth	r3, r3
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b9a      	ldr	r3, [pc, #616]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800377e:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8003780:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003782:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003786:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80039f0 <save_nonvolatile_variables+0x33c>
 800378a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003792:	ee17 3a90 	vmov	r3, s15
 8003796:	b29b      	uxth	r3, r3
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b93      	ldr	r3, [pc, #588]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800379c:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 800379e:	4b93      	ldr	r3, [pc, #588]	; (80039ec <save_nonvolatile_variables+0x338>)
 80037a0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80037a4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80037a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b0:	ee17 3a90 	vmov	r3, s15
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80037be:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 80037c0:	4b8a      	ldr	r3, [pc, #552]	; (80039ec <save_nonvolatile_variables+0x338>)
 80037c2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80037c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80037ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d2:	ee17 3a90 	vmov	r3, s15
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b83      	ldr	r3, [pc, #524]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80037dc:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 80037de:	4b83      	ldr	r3, [pc, #524]	; (80039ec <save_nonvolatile_variables+0x338>)
 80037e0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80037e4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80037e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f0:	ee17 3a90 	vmov	r3, s15
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b7a      	ldr	r3, [pc, #488]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80037fe:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003802:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003806:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80039f0 <save_nonvolatile_variables+0x33c>
 800380a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003812:	ee17 3a90 	vmov	r3, s15
 8003816:	b29b      	uxth	r3, r3
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b73      	ldr	r3, [pc, #460]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800381c:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 800381e:	4b73      	ldr	r3, [pc, #460]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003820:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003824:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003830:	ee17 3a90 	vmov	r3, s15
 8003834:	b29b      	uxth	r3, r3
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	b29b      	uxth	r3, r3
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800383e:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 8003840:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003842:	edd3 7a04 	vldr	s15, [r3, #16]
 8003846:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80039f0 <save_nonvolatile_variables+0x33c>
 800384a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800384e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003852:	edc7 7a01 	vstr	s15, [r7, #4]
 8003856:	793a      	ldrb	r2, [r7, #4]
 8003858:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800385a:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 800385c:	4b63      	ldr	r3, [pc, #396]	; (80039ec <save_nonvolatile_variables+0x338>)
 800385e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003862:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800386a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800386e:	ee17 3a90 	vmov	r3, s15
 8003872:	121b      	asrs	r3, r3, #8
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <save_nonvolatile_variables+0x334>)
 8003878:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <save_nonvolatile_variables+0x338>)
 800387c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003880:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800388c:	ee17 3a90 	vmov	r3, s15
 8003890:	141b      	asrs	r3, r3, #16
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <save_nonvolatile_variables+0x334>)
 8003896:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8003898:	4b54      	ldr	r3, [pc, #336]	; (80039ec <save_nonvolatile_variables+0x338>)
 800389a:	edd3 7a04 	vldr	s15, [r3, #16]
 800389e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80038a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038aa:	ee17 3a90 	vmov	r3, s15
 80038ae:	161b      	asrs	r3, r3, #24
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80038b4:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 80038b6:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <save_nonvolatile_variables+0x338>)
 80038b8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80038bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80038c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80038cc:	793a      	ldrb	r2, [r7, #4]
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80038d0:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 80038d2:	4b46      	ldr	r3, [pc, #280]	; (80039ec <save_nonvolatile_variables+0x338>)
 80038d4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80038d8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80038dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e4:	ee17 3a90 	vmov	r3, s15
 80038e8:	121b      	asrs	r3, r3, #8
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80038ee:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 80038f0:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <save_nonvolatile_variables+0x338>)
 80038f2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80038f6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80039f0 <save_nonvolatile_variables+0x33c>
 80038fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003902:	ee17 3a90 	vmov	r3, s15
 8003906:	141b      	asrs	r3, r3, #16
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b37      	ldr	r3, [pc, #220]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800390c:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <save_nonvolatile_variables+0x338>)
 8003910:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003914:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039f0 <save_nonvolatile_variables+0x33c>
 8003918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	161b      	asrs	r3, r3, #24
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800392a:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 800392c:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <save_nonvolatile_variables+0x338>)
 800392e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003932:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800393a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800393e:	ee17 3a90 	vmov	r3, s15
 8003942:	b21b      	sxth	r3, r3
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <save_nonvolatile_variables+0x334>)
 8003948:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <save_nonvolatile_variables+0x338>)
 800394c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003950:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800395c:	ee17 3a90 	vmov	r3, s15
 8003960:	b21b      	sxth	r3, r3
 8003962:	121b      	asrs	r3, r3, #8
 8003964:	b21b      	sxth	r3, r3
 8003966:	b2da      	uxtb	r2, r3
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <save_nonvolatile_variables+0x334>)
 800396a:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <save_nonvolatile_variables+0x338>)
 800396e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003972:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800397a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800397e:	ee17 3a90 	vmov	r3, s15
 8003982:	b21b      	sxth	r3, r3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <save_nonvolatile_variables+0x334>)
 8003988:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <save_nonvolatile_variables+0x338>)
 800398c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003990:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800399c:	ee17 3a90 	vmov	r3, s15
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	121b      	asrs	r3, r3, #8
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80039aa:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <save_nonvolatile_variables+0x338>)
 80039ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80039b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039be:	ee17 3a90 	vmov	r3, s15
 80039c2:	b21b      	sxth	r3, r3
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <save_nonvolatile_variables+0x334>)
 80039c8:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <save_nonvolatile_variables+0x338>)
 80039cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80039d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039dc:	ee17 3a90 	vmov	r3, s15
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	121b      	asrs	r3, r3, #8
 80039e4:	e006      	b.n	80039f4 <save_nonvolatile_variables+0x340>
 80039e6:	bf00      	nop
 80039e8:	20002190 	.word	0x20002190
 80039ec:	20000688 	.word	0x20000688
 80039f0:	42c80000 	.word	0x42c80000
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	4b40      	ldr	r3, [pc, #256]	; (8003afc <save_nonvolatile_variables+0x448>)
 80039fa:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 80039fc:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <save_nonvolatile_variables+0x44c>)
 80039fe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a0e:	ee17 3a90 	vmov	r3, s15
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b39      	ldr	r3, [pc, #228]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003a18:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <save_nonvolatile_variables+0x44c>)
 8003a1c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003a20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a2c:	ee17 3a90 	vmov	r3, s15
 8003a30:	b21b      	sxth	r3, r3
 8003a32:	121b      	asrs	r3, r3, #8
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	4b30      	ldr	r3, [pc, #192]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003a3a:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e055      	b.n	8003af0 <save_nonvolatile_variables+0x43c>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	4a2f      	ldr	r2, [pc, #188]	; (8003b04 <save_nonvolatile_variables+0x450>)
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3325      	adds	r3, #37	; 0x25
 8003a66:	7939      	ldrb	r1, [r7, #4]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003a6a:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <save_nonvolatile_variables+0x450>)
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a84:	ee17 3a90 	vmov	r3, s15
 8003a88:	121a      	asrs	r2, r3, #8
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3326      	adds	r3, #38	; 0x26
 8003a90:	b2d1      	uxtb	r1, r2
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003a94:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <save_nonvolatile_variables+0x450>)
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aae:	ee17 3a90 	vmov	r3, s15
 8003ab2:	141a      	asrs	r2, r3, #16
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3327      	adds	r3, #39	; 0x27
 8003aba:	b2d1      	uxtb	r1, r2
 8003abc:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003abe:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <save_nonvolatile_variables+0x450>)
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad8:	ee17 3a90 	vmov	r3, s15
 8003adc:	161a      	asrs	r2, r3, #24
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	330a      	adds	r3, #10
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	b2d1      	uxtb	r1, r2
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <save_nonvolatile_variables+0x448>)
 8003ae8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	3301      	adds	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b13      	cmp	r3, #19
 8003af4:	d9a6      	bls.n	8003a44 <save_nonvolatile_variables+0x390>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003af6:	2300      	movs	r3, #0
 8003af8:	73bb      	strb	r3, [r7, #14]
 8003afa:	e05b      	b.n	8003bb4 <save_nonvolatile_variables+0x500>
 8003afc:	20002190 	.word	0x20002190
 8003b00:	20000688 	.word	0x20000688
 8003b04:	2000026c 	.word	0x2000026c
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	4a84      	ldr	r2, [pc, #528]	; (8003d1c <save_nonvolatile_variables+0x668>)
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b20:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b24:	7bbb      	ldrb	r3, [r7, #14]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	3375      	adds	r3, #117	; 0x75
 8003b2a:	7939      	ldrb	r1, [r7, #4]
 8003b2c:	4a7c      	ldr	r2, [pc, #496]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003b2e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <save_nonvolatile_variables+0x668>)
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b48:	ee17 3a90 	vmov	r3, s15
 8003b4c:	121a      	asrs	r2, r3, #8
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3376      	adds	r3, #118	; 0x76
 8003b54:	b2d1      	uxtb	r1, r2
 8003b56:	4a72      	ldr	r2, [pc, #456]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003b58:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	4a6f      	ldr	r2, [pc, #444]	; (8003d1c <save_nonvolatile_variables+0x668>)
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b72:	ee17 3a90 	vmov	r3, s15
 8003b76:	141a      	asrs	r2, r3, #16
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3377      	adds	r3, #119	; 0x77
 8003b7e:	b2d1      	uxtb	r1, r2
 8003b80:	4a67      	ldr	r2, [pc, #412]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003b82:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	4a65      	ldr	r2, [pc, #404]	; (8003d1c <save_nonvolatile_variables+0x668>)
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9c:	ee17 3a90 	vmov	r3, s15
 8003ba0:	161a      	asrs	r2, r3, #24
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	331e      	adds	r3, #30
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	b2d1      	uxtb	r1, r2
 8003baa:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bac:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003bae:	7bbb      	ldrb	r3, [r7, #14]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	73bb      	strb	r3, [r7, #14]
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d9a6      	bls.n	8003b08 <save_nonvolatile_variables+0x454>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <save_nonvolatile_variables+0x670>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bc2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <save_nonvolatile_variables+0x670>)
 8003bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b54      	ldr	r3, [pc, #336]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bd0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 0;
 8003bd4:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bdc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 8;
 8003be0:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 16;
 8003bee:	4b4e      	ldr	r3, [pc, #312]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003bf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 24;
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	0e1b      	lsrs	r3, r3, #24
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c06:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 8003c0a:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c0c:	889b      	ldrh	r3, [r3, #4]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c14:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 8003c18:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c1a:	889b      	ldrh	r3, [r3, #4]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c2c:	88db      	ldrh	r3, [r3, #6]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c34:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c3a:	88db      	ldrh	r3, [r3, #6]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c46:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_delay_ms;
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c4c:	7a1b      	ldrb	r3, [r3, #8]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c52:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c58:	895b      	ldrh	r3, [r3, #10]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c66:	895b      	ldrh	r3, [r3, #10]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c72:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c78:	899b      	ldrh	r3, [r3, #12]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c80:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <save_nonvolatile_variables+0x674>)
 8003c86:	899b      	ldrh	r3, [r3, #12]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003c92:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <save_nonvolatile_variables+0x678>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003d30 <save_nonvolatile_variables+0x67c>
 8003ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003cac:	793a      	ldrb	r2, [r7, #4]
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003cb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <save_nonvolatile_variables+0x678>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d30 <save_nonvolatile_variables+0x67c>
 8003cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc6:	ee17 3a90 	vmov	r3, s15
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003cd0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <save_nonvolatile_variables+0x678>)
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003d30 <save_nonvolatile_variables+0x67c>
 8003cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce6:	ee17 3a90 	vmov	r3, s15
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003cf0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <save_nonvolatile_variables+0x678>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003d30 <save_nonvolatile_variables+0x67c>
 8003cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d06:	ee17 3a90 	vmov	r3, s15
 8003d0a:	0e1b      	lsrs	r3, r3, #24
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <save_nonvolatile_variables+0x66c>)
 8003d10:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	737b      	strb	r3, [r7, #13]
 8003d18:	e08e      	b.n	8003e38 <save_nonvolatile_variables+0x784>
 8003d1a:	bf00      	nop
 8003d1c:	200002bc 	.word	0x200002bc
 8003d20:	20002190 	.word	0x20002190
 8003d24:	20000688 	.word	0x20000688
 8003d28:	20000730 	.word	0x20000730
 8003d2c:	200003e8 	.word	0x200003e8
 8003d30:	461c4000 	.word	0x461c4000
		// Lower output voltage
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 0;
 8003d34:	7b7b      	ldrb	r3, [r7, #13]
 8003d36:	4a4a      	ldr	r2, [pc, #296]	; (8003e60 <save_nonvolatile_variables+0x7ac>)
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4c:	ee17 3a90 	vmov	r3, s15
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	335c      	adds	r3, #92	; 0x5c
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b2d1      	uxtb	r1, r2
 8003d5a:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003d5c:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 8;
 8003d5e:	7b7b      	ldrb	r3, [r7, #13]
 8003d60:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <save_nonvolatile_variables+0x7ac>)
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d76:	ee17 3a90 	vmov	r3, s15
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	7b7b      	ldrb	r3, [r7, #13]
 8003d82:	335c      	adds	r3, #92	; 0x5c
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	3301      	adds	r3, #1
 8003d88:	b2d1      	uxtb	r1, r2
 8003d8a:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003d8c:	54d1      	strb	r1, [r2, r3]

		// Upper output voltage
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 0;
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <save_nonvolatile_variables+0x7b4>)
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da6:	ee17 3a90 	vmov	r3, s15
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	7b7b      	ldrb	r3, [r7, #13]
 8003dae:	3348      	adds	r3, #72	; 0x48
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	b2d1      	uxtb	r1, r2
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003db6:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 8;
 8003db8:	7b7b      	ldrb	r3, [r7, #13]
 8003dba:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <save_nonvolatile_variables+0x7b4>)
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 3a90 	vmov	r3, s15
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	7b7b      	ldrb	r3, [r7, #13]
 8003ddc:	3348      	adds	r3, #72	; 0x48
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	3301      	adds	r3, #1
 8003de2:	b2d1      	uxtb	r1, r2
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003de6:	54d1      	strb	r1, [r2, r3]

		// Pressure range
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 0;
 8003de8:	7b7b      	ldrb	r3, [r7, #13]
 8003dea:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <save_nonvolatile_variables+0x7b8>)
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df8:	ee17 3a90 	vmov	r3, s15
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	7b7b      	ldrb	r3, [r7, #13]
 8003e00:	3370      	adds	r3, #112	; 0x70
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	b2d1      	uxtb	r1, r2
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003e08:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 8;
 8003e0a:	7b7b      	ldrb	r3, [r7, #13]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <save_nonvolatile_variables+0x7b8>)
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	edd3 7a00 	vldr	s15, [r3]
 8003e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1a:	ee17 3a90 	vmov	r3, s15
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	7b7b      	ldrb	r3, [r7, #13]
 8003e26:	3370      	adds	r3, #112	; 0x70
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	b2d1      	uxtb	r1, r2
 8003e2e:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003e30:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003e32:	7b7b      	ldrb	r3, [r7, #13]
 8003e34:	3301      	adds	r3, #1
 8003e36:	737b      	strb	r3, [r7, #13]
 8003e38:	7b7b      	ldrb	r3, [r7, #13]
 8003e3a:	2b13      	cmp	r3, #19
 8003e3c:	f67f af7a 	bls.w	8003d34 <save_nonvolatile_variables+0x680>
	}

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 8003e40:	480b      	ldr	r0, [pc, #44]	; (8003e70 <save_nonvolatile_variables+0x7bc>)
 8003e42:	f004 ffeb 	bl	8008e1c <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8003e46:	23fe      	movs	r3, #254	; 0xfe
 8003e48:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <save_nonvolatile_variables+0x7b0>)
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4808      	ldr	r0, [pc, #32]	; (8003e70 <save_nonvolatile_variables+0x7bc>)
 8003e4e:	f004 ffaa 	bl	8008da6 <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 8003e52:	f7ff f9d9 	bl	8003208 <read_nonvolatile_variables>

	return 1;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200002c4 	.word	0x200002c4
 8003e64:	20002190 	.word	0x20002190
 8003e68:	20000314 	.word	0x20000314
 8003e6c:	20000364 	.word	0x20000364
 8003e70:	20002290 	.word	0x20002290

08003e74 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Sat Aug  7 22:11:19 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 8003e7c:	4bc3      	ldr	r3, [pc, #780]	; (800418c <pack_telem_data+0x318>)
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 8003e84:	4bc2      	ldr	r3, [pc, #776]	; (8004190 <pack_telem_data+0x31c>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004194 <pack_telem_data+0x320>
 8003e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e96:	ee17 3a90 	vmov	r3, s15
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 8003ea4:	4bba      	ldr	r3, [pc, #744]	; (8004190 <pack_telem_data+0x31c>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8004194 <pack_telem_data+0x320>
 8003eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb6:	ee17 3a90 	vmov	r3, s15
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	121b      	asrs	r3, r3, #8
 8003ebe:	b21a      	sxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 8003ec8:	4bb3      	ldr	r3, [pc, #716]	; (8004198 <pack_telem_data+0x324>)
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004194 <pack_telem_data+0x320>
 8003ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eda:	ee17 3a90 	vmov	r3, s15
 8003ede:	b21a      	sxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3303      	adds	r3, #3
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 8003ee8:	4bab      	ldr	r3, [pc, #684]	; (8004198 <pack_telem_data+0x324>)
 8003eea:	edd3 7a00 	vldr	s15, [r3]
 8003eee:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004194 <pack_telem_data+0x320>
 8003ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efa:	ee17 3a90 	vmov	r3, s15
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	121b      	asrs	r3, r3, #8
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 8003f0c:	4ba3      	ldr	r3, [pc, #652]	; (800419c <pack_telem_data+0x328>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3305      	adds	r3, #5
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 8003f18:	4ba0      	ldr	r3, [pc, #640]	; (800419c <pack_telem_data+0x328>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	0a1a      	lsrs	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3306      	adds	r3, #6
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 8003f26:	4b9d      	ldr	r3, [pc, #628]	; (800419c <pack_telem_data+0x328>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	0c1a      	lsrs	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3307      	adds	r3, #7
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 8003f34:	4b99      	ldr	r3, [pc, #612]	; (800419c <pack_telem_data+0x328>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e1a      	lsrs	r2, r3, #24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 8003f42:	4b97      	ldr	r3, [pc, #604]	; (80041a0 <pack_telem_data+0x32c>)
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004194 <pack_telem_data+0x320>
 8003f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f54:	ee17 3a90 	vmov	r3, s15
 8003f58:	b21a      	sxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3309      	adds	r3, #9
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 8003f62:	4b8f      	ldr	r3, [pc, #572]	; (80041a0 <pack_telem_data+0x32c>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004194 <pack_telem_data+0x320>
 8003f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f74:	ee17 3a90 	vmov	r3, s15
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	121b      	asrs	r3, r3, #8
 8003f7c:	b21a      	sxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	330a      	adds	r3, #10
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 8003f86:	4b87      	ldr	r3, [pc, #540]	; (80041a4 <pack_telem_data+0x330>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004194 <pack_telem_data+0x320>
 8003f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f98:	ee17 3a90 	vmov	r3, s15
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	330b      	adds	r3, #11
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <pack_telem_data+0x330>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004194 <pack_telem_data+0x320>
 8003fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb8:	ee17 3a90 	vmov	r3, s15
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	121b      	asrs	r3, r3, #8
 8003fc0:	b21a      	sxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 8003fca:	4b77      	ldr	r3, [pc, #476]	; (80041a8 <pack_telem_data+0x334>)
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004194 <pack_telem_data+0x320>
 8003fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	330d      	adds	r3, #13
 8003fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe0:	edc7 7a00 	vstr	s15, [r7]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 8003fea:	4b70      	ldr	r3, [pc, #448]	; (80041ac <pack_telem_data+0x338>)
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004194 <pack_telem_data+0x320>
 8003ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	330e      	adds	r3, #14
 8003ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004000:	edc7 7a00 	vstr	s15, [r7]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	330f      	adds	r3, #15
 800400e:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <pack_telem_data+0x33c>)
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <pack_telem_data+0x340>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3310      	adds	r3, #16
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <pack_telem_data+0x340>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0a1a      	lsrs	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3311      	adds	r3, #17
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 800402e:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <pack_telem_data+0x340>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0c1a      	lsrs	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3312      	adds	r3, #18
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 800403c:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <pack_telem_data+0x340>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e1a      	lsrs	r2, r3, #24
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3313      	adds	r3, #19
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 800404a:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <pack_telem_data+0x344>)
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405c:	edc7 7a00 	vstr	s15, [r7]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3314      	adds	r3, #20
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 800406a:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <pack_telem_data+0x344>)
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800407c:	ee17 3a90 	vmov	r3, s15
 8004080:	121a      	asrs	r2, r3, #8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3315      	adds	r3, #21
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <pack_telem_data+0x344>)
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800409c:	ee17 3a90 	vmov	r3, s15
 80040a0:	141a      	asrs	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3316      	adds	r3, #22
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <pack_telem_data+0x344>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040bc:	ee17 3a90 	vmov	r3, s15
 80040c0:	161a      	asrs	r2, r3, #24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3317      	adds	r3, #23
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <pack_telem_data+0x344>)
 80040cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80040d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040dc:	edc7 7a00 	vstr	s15, [r7]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3318      	adds	r3, #24
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <pack_telem_data+0x344>)
 80040ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80040f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	ee17 3a90 	vmov	r3, s15
 8004100:	121a      	asrs	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3319      	adds	r3, #25
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 800410a:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <pack_telem_data+0x344>)
 800410c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004110:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800411c:	ee17 3a90 	vmov	r3, s15
 8004120:	141a      	asrs	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	331a      	adds	r3, #26
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <pack_telem_data+0x344>)
 800412c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004130:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413c:	ee17 3a90 	vmov	r3, s15
 8004140:	161a      	asrs	r2, r3, #24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	331b      	adds	r3, #27
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <pack_telem_data+0x344>)
 800414c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004150:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415c:	edc7 7a00 	vstr	s15, [r7]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	331c      	adds	r3, #28
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <pack_telem_data+0x344>)
 800416c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800417c:	ee17 3a90 	vmov	r3, s15
 8004180:	121a      	asrs	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	331d      	adds	r3, #29
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e017      	b.n	80041bc <pack_telem_data+0x348>
 800418c:	200003b4 	.word	0x200003b4
 8004190:	200003b8 	.word	0x200003b8
 8004194:	42c80000 	.word	0x42c80000
 8004198:	200003bc 	.word	0x200003bc
 800419c:	200003c0 	.word	0x200003c0
 80041a0:	200003c4 	.word	0x200003c4
 80041a4:	200003c8 	.word	0x200003c8
 80041a8:	200003cc 	.word	0x200003cc
 80041ac:	200003d0 	.word	0x200003d0
 80041b0:	200003d4 	.word	0x200003d4
 80041b4:	200003d8 	.word	0x200003d8
 80041b8:	200003fc 	.word	0x200003fc
	*(dst + 30) = TELEM_ITEM_30;
 80041bc:	4bcf      	ldr	r3, [pc, #828]	; (80044fc <pack_telem_data+0x688>)
 80041be:	edd3 7a02 	vldr	s15, [r3, #8]
 80041c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ce:	ee17 3a90 	vmov	r3, s15
 80041d2:	141a      	asrs	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	331e      	adds	r3, #30
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 80041dc:	4bc7      	ldr	r3, [pc, #796]	; (80044fc <pack_telem_data+0x688>)
 80041de:	edd3 7a02 	vldr	s15, [r3, #8]
 80041e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ee:	ee17 3a90 	vmov	r3, s15
 80041f2:	161a      	asrs	r2, r3, #24
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	331f      	adds	r3, #31
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 80041fc:	4bbf      	ldr	r3, [pc, #764]	; (80044fc <pack_telem_data+0x688>)
 80041fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004202:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420e:	edc7 7a00 	vstr	s15, [r7]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3320      	adds	r3, #32
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 800421c:	4bb7      	ldr	r3, [pc, #732]	; (80044fc <pack_telem_data+0x688>)
 800421e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004222:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800422a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800422e:	ee17 3a90 	vmov	r3, s15
 8004232:	121a      	asrs	r2, r3, #8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3321      	adds	r3, #33	; 0x21
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 800423c:	4baf      	ldr	r3, [pc, #700]	; (80044fc <pack_telem_data+0x688>)
 800423e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004242:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424e:	ee17 3a90 	vmov	r3, s15
 8004252:	141a      	asrs	r2, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3322      	adds	r3, #34	; 0x22
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 800425c:	4ba7      	ldr	r3, [pc, #668]	; (80044fc <pack_telem_data+0x688>)
 800425e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004262:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800426a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426e:	ee17 3a90 	vmov	r3, s15
 8004272:	161a      	asrs	r2, r3, #24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3323      	adds	r3, #35	; 0x23
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 800427c:	4b9f      	ldr	r3, [pc, #636]	; (80044fc <pack_telem_data+0x688>)
 800427e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004282:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800428a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800428e:	edc7 7a00 	vstr	s15, [r7]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 800429c:	4b97      	ldr	r3, [pc, #604]	; (80044fc <pack_telem_data+0x688>)
 800429e:	edd3 7a04 	vldr	s15, [r3, #16]
 80042a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ae:	ee17 3a90 	vmov	r3, s15
 80042b2:	121a      	asrs	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3325      	adds	r3, #37	; 0x25
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 80042bc:	4b8f      	ldr	r3, [pc, #572]	; (80044fc <pack_telem_data+0x688>)
 80042be:	edd3 7a04 	vldr	s15, [r3, #16]
 80042c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ce:	ee17 3a90 	vmov	r3, s15
 80042d2:	141a      	asrs	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3326      	adds	r3, #38	; 0x26
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 80042dc:	4b87      	ldr	r3, [pc, #540]	; (80044fc <pack_telem_data+0x688>)
 80042de:	edd3 7a04 	vldr	s15, [r3, #16]
 80042e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ee:	ee17 3a90 	vmov	r3, s15
 80042f2:	161a      	asrs	r2, r3, #24
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3327      	adds	r3, #39	; 0x27
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 80042fc:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <pack_telem_data+0x688>)
 80042fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004302:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800430a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800430e:	edc7 7a00 	vstr	s15, [r7]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3328      	adds	r3, #40	; 0x28
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 800431c:	4b77      	ldr	r3, [pc, #476]	; (80044fc <pack_telem_data+0x688>)
 800431e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004322:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800432a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800432e:	ee17 3a90 	vmov	r3, s15
 8004332:	121a      	asrs	r2, r3, #8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3329      	adds	r3, #41	; 0x29
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 800433c:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <pack_telem_data+0x688>)
 800433e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004342:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800434a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800434e:	ee17 3a90 	vmov	r3, s15
 8004352:	141a      	asrs	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	332a      	adds	r3, #42	; 0x2a
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 800435c:	4b67      	ldr	r3, [pc, #412]	; (80044fc <pack_telem_data+0x688>)
 800435e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004362:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800436a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800436e:	ee17 3a90 	vmov	r3, s15
 8004372:	161a      	asrs	r2, r3, #24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	332b      	adds	r3, #43	; 0x2b
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 800437c:	4b60      	ldr	r3, [pc, #384]	; (8004500 <pack_telem_data+0x68c>)
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	332c      	adds	r3, #44	; 0x2c
 800438e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004392:	edc7 7a00 	vstr	s15, [r7]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 800439c:	4b58      	ldr	r3, [pc, #352]	; (8004500 <pack_telem_data+0x68c>)
 800439e:	edd3 7a01 	vldr	s15, [r3, #4]
 80043a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	332d      	adds	r3, #45	; 0x2d
 80043ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b2:	edc7 7a00 	vstr	s15, [r7]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <pack_telem_data+0x68c>)
 80043be:	edd3 7a02 	vldr	s15, [r3, #8]
 80043c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	332e      	adds	r3, #46	; 0x2e
 80043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d2:	edc7 7a00 	vstr	s15, [r7]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 80043dc:	4b48      	ldr	r3, [pc, #288]	; (8004500 <pack_telem_data+0x68c>)
 80043de:	edd3 7a03 	vldr	s15, [r3, #12]
 80043e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	332f      	adds	r3, #47	; 0x2f
 80043ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f2:	edc7 7a00 	vstr	s15, [r7]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <pack_telem_data+0x68c>)
 80043fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8004402:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3330      	adds	r3, #48	; 0x30
 800440e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004412:	edc7 7a00 	vstr	s15, [r7]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <pack_telem_data+0x68c>)
 800441e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004422:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3331      	adds	r3, #49	; 0x31
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	edc7 7a00 	vstr	s15, [r7]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <pack_telem_data+0x68c>)
 800443e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004442:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	edc7 7a00 	vstr	s15, [r7]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <pack_telem_data+0x68c>)
 800445e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004462:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3333      	adds	r3, #51	; 0x33
 800446e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004472:	edc7 7a00 	vstr	s15, [r7]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <pack_telem_data+0x68c>)
 800447e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004482:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3334      	adds	r3, #52	; 0x34
 800448e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004492:	edc7 7a00 	vstr	s15, [r7]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <pack_telem_data+0x690>)
 800449e:	edd3 7a00 	vldr	s15, [r3]
 80044a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3335      	adds	r3, #53	; 0x35
 80044ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b2:	edc7 7a00 	vstr	s15, [r7]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <pack_telem_data+0x690>)
 80044be:	edd3 7a01 	vldr	s15, [r3, #4]
 80044c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3336      	adds	r3, #54	; 0x36
 80044ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d2:	edc7 7a00 	vstr	s15, [r7]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <pack_telem_data+0x690>)
 80044de:	edd3 7a02 	vldr	s15, [r3, #8]
 80044e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3337      	adds	r3, #55	; 0x37
 80044ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f2:	edc7 7a00 	vstr	s15, [r7]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	e005      	b.n	8004508 <pack_telem_data+0x694>
 80044fc:	200003fc 	.word	0x200003fc
 8004500:	20000414 	.word	0x20000414
 8004504:	20000438 	.word	0x20000438
 8004508:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 800450a:	4bc7      	ldr	r3, [pc, #796]	; (8004828 <pack_telem_data+0x9b4>)
 800450c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004510:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3338      	adds	r3, #56	; 0x38
 800451c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004520:	edc7 7a00 	vstr	s15, [r7]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 800452a:	4bbf      	ldr	r3, [pc, #764]	; (8004828 <pack_telem_data+0x9b4>)
 800452c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004530:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3339      	adds	r3, #57	; 0x39
 800453c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004540:	edc7 7a00 	vstr	s15, [r7]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 800454a:	4bb7      	ldr	r3, [pc, #732]	; (8004828 <pack_telem_data+0x9b4>)
 800454c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004550:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	333a      	adds	r3, #58	; 0x3a
 800455c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004560:	edc7 7a00 	vstr	s15, [r7]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 800456a:	4baf      	ldr	r3, [pc, #700]	; (8004828 <pack_telem_data+0x9b4>)
 800456c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004570:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	333b      	adds	r3, #59	; 0x3b
 800457c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004580:	edc7 7a00 	vstr	s15, [r7]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 800458a:	4ba7      	ldr	r3, [pc, #668]	; (8004828 <pack_telem_data+0x9b4>)
 800458c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004590:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	333c      	adds	r3, #60	; 0x3c
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	edc7 7a00 	vstr	s15, [r7]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 80045aa:	4b9f      	ldr	r3, [pc, #636]	; (8004828 <pack_telem_data+0x9b4>)
 80045ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80045b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	333d      	adds	r3, #61	; 0x3d
 80045bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c0:	edc7 7a00 	vstr	s15, [r7]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 80045ca:	4b98      	ldr	r3, [pc, #608]	; (800482c <pack_telem_data+0x9b8>)
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8004830 <pack_telem_data+0x9bc>
 80045d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045dc:	ee17 3a90 	vmov	r3, s15
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	333e      	adds	r3, #62	; 0x3e
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 80045ea:	4b90      	ldr	r3, [pc, #576]	; (800482c <pack_telem_data+0x9b8>)
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004830 <pack_telem_data+0x9bc>
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 3a90 	vmov	r3, s15
 8004600:	b29b      	uxth	r3, r3
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	333f      	adds	r3, #63	; 0x3f
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 800460e:	4b87      	ldr	r3, [pc, #540]	; (800482c <pack_telem_data+0x9b8>)
 8004610:	edd3 7a01 	vldr	s15, [r3, #4]
 8004614:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004830 <pack_telem_data+0x9bc>
 8004618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800461c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004620:	ee17 3a90 	vmov	r3, s15
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3340      	adds	r3, #64	; 0x40
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 800462e:	4b7f      	ldr	r3, [pc, #508]	; (800482c <pack_telem_data+0x9b8>)
 8004630:	edd3 7a01 	vldr	s15, [r3, #4]
 8004634:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004830 <pack_telem_data+0x9bc>
 8004638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 3a90 	vmov	r3, s15
 8004644:	b29b      	uxth	r3, r3
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b29a      	uxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3341      	adds	r3, #65	; 0x41
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <pack_telem_data+0x9b8>)
 8004654:	edd3 7a02 	vldr	s15, [r3, #8]
 8004658:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004830 <pack_telem_data+0x9bc>
 800465c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004664:	ee17 3a90 	vmov	r3, s15
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3342      	adds	r3, #66	; 0x42
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8004672:	4b6e      	ldr	r3, [pc, #440]	; (800482c <pack_telem_data+0x9b8>)
 8004674:	edd3 7a02 	vldr	s15, [r3, #8]
 8004678:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004830 <pack_telem_data+0x9bc>
 800467c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004684:	ee17 3a90 	vmov	r3, s15
 8004688:	b29b      	uxth	r3, r3
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3343      	adds	r3, #67	; 0x43
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <pack_telem_data+0x9b8>)
 8004698:	edd3 7a03 	vldr	s15, [r3, #12]
 800469c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004830 <pack_telem_data+0x9bc>
 80046a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a8:	ee17 3a90 	vmov	r3, s15
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3344      	adds	r3, #68	; 0x44
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 80046b6:	4b5d      	ldr	r3, [pc, #372]	; (800482c <pack_telem_data+0x9b8>)
 80046b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80046bc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8004830 <pack_telem_data+0x9bc>
 80046c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c8:	ee17 3a90 	vmov	r3, s15
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3345      	adds	r3, #69	; 0x45
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <pack_telem_data+0x9b8>)
 80046dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80046e0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004830 <pack_telem_data+0x9bc>
 80046e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ec:	ee17 3a90 	vmov	r3, s15
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3346      	adds	r3, #70	; 0x46
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 80046fa:	4b4c      	ldr	r3, [pc, #304]	; (800482c <pack_telem_data+0x9b8>)
 80046fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004700:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004830 <pack_telem_data+0x9bc>
 8004704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470c:	ee17 3a90 	vmov	r3, s15
 8004710:	b29b      	uxth	r3, r3
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3347      	adds	r3, #71	; 0x47
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 800471e:	4b45      	ldr	r3, [pc, #276]	; (8004834 <pack_telem_data+0x9c0>)
 8004720:	edd3 7a00 	vldr	s15, [r3]
 8004724:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800472c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	b21a      	sxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3348      	adds	r3, #72	; 0x48
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 800473e:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <pack_telem_data+0x9c0>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800474c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004750:	ee17 3a90 	vmov	r3, s15
 8004754:	b21b      	sxth	r3, r3
 8004756:	121b      	asrs	r3, r3, #8
 8004758:	b21a      	sxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3349      	adds	r3, #73	; 0x49
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <pack_telem_data+0x9c0>)
 8004764:	edd3 7a01 	vldr	s15, [r3, #4]
 8004768:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800476c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004774:	ee17 3a90 	vmov	r3, s15
 8004778:	b21a      	sxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	334a      	adds	r3, #74	; 0x4a
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <pack_telem_data+0x9c0>)
 8004784:	edd3 7a01 	vldr	s15, [r3, #4]
 8004788:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800478c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004794:	ee17 3a90 	vmov	r3, s15
 8004798:	b21b      	sxth	r3, r3
 800479a:	121b      	asrs	r3, r3, #8
 800479c:	b21a      	sxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	334b      	adds	r3, #75	; 0x4b
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <pack_telem_data+0x9c4>)
 80047a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	334c      	adds	r3, #76	; 0x4c
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <pack_telem_data+0x9c4>)
 80047b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ba:	121b      	asrs	r3, r3, #8
 80047bc:	b21a      	sxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	334d      	adds	r3, #77	; 0x4d
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <pack_telem_data+0x9c4>)
 80047c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	334e      	adds	r3, #78	; 0x4e
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <pack_telem_data+0x9c4>)
 80047d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047da:	121b      	asrs	r3, r3, #8
 80047dc:	b21a      	sxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	334f      	adds	r3, #79	; 0x4f
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <pack_telem_data+0x9c8>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004830 <pack_telem_data+0x9bc>
 80047f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f8:	ee17 3a90 	vmov	r3, s15
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3350      	adds	r3, #80	; 0x50
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <pack_telem_data+0x9c8>)
 8004808:	edd3 7a00 	vldr	s15, [r3]
 800480c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004830 <pack_telem_data+0x9bc>
 8004810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004818:	ee17 3a90 	vmov	r3, s15
 800481c:	b29b      	uxth	r3, r3
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3351      	adds	r3, #81	; 0x51
 8004826:	e00b      	b.n	8004840 <pack_telem_data+0x9cc>
 8004828:	20000438 	.word	0x20000438
 800482c:	2000045c 	.word	0x2000045c
 8004830:	42c80000 	.word	0x42c80000
 8004834:	20000470 	.word	0x20000470
 8004838:	20000478 	.word	0x20000478
 800483c:	2000047c 	.word	0x2000047c
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 8004844:	4bcc      	ldr	r3, [pc, #816]	; (8004b78 <pack_telem_data+0xd04>)
 8004846:	edd3 7a01 	vldr	s15, [r3, #4]
 800484a:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004b7c <pack_telem_data+0xd08>
 800484e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 3a90 	vmov	r3, s15
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3352      	adds	r3, #82	; 0x52
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 8004864:	4bc4      	ldr	r3, [pc, #784]	; (8004b78 <pack_telem_data+0xd04>)
 8004866:	edd3 7a01 	vldr	s15, [r3, #4]
 800486a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8004b7c <pack_telem_data+0xd08>
 800486e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004876:	ee17 3a90 	vmov	r3, s15
 800487a:	b29b      	uxth	r3, r3
 800487c:	0a1b      	lsrs	r3, r3, #8
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3353      	adds	r3, #83	; 0x53
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 8004888:	4bbb      	ldr	r3, [pc, #748]	; (8004b78 <pack_telem_data+0xd04>)
 800488a:	edd3 7a02 	vldr	s15, [r3, #8]
 800488e:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8004b7c <pack_telem_data+0xd08>
 8004892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489a:	ee17 3a90 	vmov	r3, s15
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3354      	adds	r3, #84	; 0x54
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 80048a8:	4bb3      	ldr	r3, [pc, #716]	; (8004b78 <pack_telem_data+0xd04>)
 80048aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80048ae:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8004b7c <pack_telem_data+0xd08>
 80048b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 3a90 	vmov	r3, s15
 80048be:	b29b      	uxth	r3, r3
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3355      	adds	r3, #85	; 0x55
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 80048cc:	4baa      	ldr	r3, [pc, #680]	; (8004b78 <pack_telem_data+0xd04>)
 80048ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004b7c <pack_telem_data+0xd08>
 80048d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	ee17 3a90 	vmov	r3, s15
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3356      	adds	r3, #86	; 0x56
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 80048ec:	4ba2      	ldr	r3, [pc, #648]	; (8004b78 <pack_telem_data+0xd04>)
 80048ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80048f2:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004b7c <pack_telem_data+0xd08>
 80048f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fe:	ee17 3a90 	vmov	r3, s15
 8004902:	b29b      	uxth	r3, r3
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3357      	adds	r3, #87	; 0x57
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 8004910:	4b9b      	ldr	r3, [pc, #620]	; (8004b80 <pack_telem_data+0xd0c>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004b7c <pack_telem_data+0xd08>
 800491a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800491e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004922:	ee17 3a90 	vmov	r3, s15
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3358      	adds	r3, #88	; 0x58
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 8004930:	4b93      	ldr	r3, [pc, #588]	; (8004b80 <pack_telem_data+0xd0c>)
 8004932:	edd3 7a00 	vldr	s15, [r3]
 8004936:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004b7c <pack_telem_data+0xd08>
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 3a90 	vmov	r3, s15
 8004946:	b29b      	uxth	r3, r3
 8004948:	0a1b      	lsrs	r3, r3, #8
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3359      	adds	r3, #89	; 0x59
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 8004954:	4b8a      	ldr	r3, [pc, #552]	; (8004b80 <pack_telem_data+0xd0c>)
 8004956:	edd3 7a01 	vldr	s15, [r3, #4]
 800495a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004b7c <pack_telem_data+0xd08>
 800495e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004966:	ee17 3a90 	vmov	r3, s15
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	335a      	adds	r3, #90	; 0x5a
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 8004974:	4b82      	ldr	r3, [pc, #520]	; (8004b80 <pack_telem_data+0xd0c>)
 8004976:	edd3 7a01 	vldr	s15, [r3, #4]
 800497a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8004b7c <pack_telem_data+0xd08>
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 3a90 	vmov	r3, s15
 800498a:	b29b      	uxth	r3, r3
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	b29a      	uxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	335b      	adds	r3, #91	; 0x5b
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 8004998:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <pack_telem_data+0xd10>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004b7c <pack_telem_data+0xd08>
 80049a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049aa:	edc7 7a00 	vstr	s15, [r7]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	335c      	adds	r3, #92	; 0x5c
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 80049b8:	4b72      	ldr	r3, [pc, #456]	; (8004b84 <pack_telem_data+0xd10>)
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004b7c <pack_telem_data+0xd08>
 80049c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ca:	ee17 3a90 	vmov	r3, s15
 80049ce:	121a      	asrs	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	335d      	adds	r3, #93	; 0x5d
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 80049d8:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <pack_telem_data+0xd10>)
 80049da:	edd3 7a00 	vldr	s15, [r3]
 80049de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004b7c <pack_telem_data+0xd08>
 80049e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ea:	ee17 3a90 	vmov	r3, s15
 80049ee:	141a      	asrs	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	335e      	adds	r3, #94	; 0x5e
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 80049f8:	4b62      	ldr	r3, [pc, #392]	; (8004b84 <pack_telem_data+0xd10>)
 80049fa:	edd3 7a00 	vldr	s15, [r3]
 80049fe:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004b7c <pack_telem_data+0xd08>
 8004a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a0a:	ee17 3a90 	vmov	r3, s15
 8004a0e:	161a      	asrs	r2, r3, #24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	335f      	adds	r3, #95	; 0x5f
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 8004a18:	4b5a      	ldr	r3, [pc, #360]	; (8004b84 <pack_telem_data+0xd10>)
 8004a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a1e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004b7c <pack_telem_data+0xd08>
 8004a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a2a:	edc7 7a00 	vstr	s15, [r7]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3360      	adds	r3, #96	; 0x60
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 8004a38:	4b52      	ldr	r3, [pc, #328]	; (8004b84 <pack_telem_data+0xd10>)
 8004a3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a3e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004b7c <pack_telem_data+0xd08>
 8004a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a4a:	ee17 3a90 	vmov	r3, s15
 8004a4e:	121a      	asrs	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3361      	adds	r3, #97	; 0x61
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 8004a58:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <pack_telem_data+0xd10>)
 8004a5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a5e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004b7c <pack_telem_data+0xd08>
 8004a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6a:	ee17 3a90 	vmov	r3, s15
 8004a6e:	141a      	asrs	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3362      	adds	r3, #98	; 0x62
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 8004a78:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <pack_telem_data+0xd10>)
 8004a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a7e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004b7c <pack_telem_data+0xd08>
 8004a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a8a:	ee17 3a90 	vmov	r3, s15
 8004a8e:	161a      	asrs	r2, r3, #24
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3363      	adds	r3, #99	; 0x63
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <pack_telem_data+0xd14>)
 8004a9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004a9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004b7c <pack_telem_data+0xd08>
 8004aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aaa:	ee17 3a90 	vmov	r3, s15
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3364      	adds	r3, #100	; 0x64
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 8004ab8:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <pack_telem_data+0xd14>)
 8004aba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004abe:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004b7c <pack_telem_data+0xd08>
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aca:	ee17 3a90 	vmov	r3, s15
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3365      	adds	r3, #101	; 0x65
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <pack_telem_data+0xd14>)
 8004ade:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004ae2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b7c <pack_telem_data+0xd08>
 8004ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aee:	ee17 3a90 	vmov	r3, s15
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3366      	adds	r3, #102	; 0x66
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <pack_telem_data+0xd14>)
 8004afe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004b02:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004b7c <pack_telem_data+0xd08>
 8004b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 3a90 	vmov	r3, s15
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3367      	adds	r3, #103	; 0x67
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <pack_telem_data+0xd14>)
 8004b22:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b26:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004b7c <pack_telem_data+0xd08>
 8004b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b32:	ee17 3a90 	vmov	r3, s15
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3368      	adds	r3, #104	; 0x68
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <pack_telem_data+0xd14>)
 8004b42:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b7c <pack_telem_data+0xd08>
 8004b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b52:	ee17 3a90 	vmov	r3, s15
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3369      	adds	r3, #105	; 0x69
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <pack_telem_data+0xd14>)
 8004b66:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004b6a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004b7c <pack_telem_data+0xd08>
 8004b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b76:	e009      	b.n	8004b8c <pack_telem_data+0xd18>
 8004b78:	2000047c 	.word	0x2000047c
 8004b7c:	42c80000 	.word	0x42c80000
 8004b80:	2000048c 	.word	0x2000048c
 8004b84:	20000494 	.word	0x20000494
 8004b88:	20000688 	.word	0x20000688
 8004b8c:	ee17 3a90 	vmov	r3, s15
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	336a      	adds	r3, #106	; 0x6a
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 8004b9a:	4bcb      	ldr	r3, [pc, #812]	; (8004ec8 <pack_telem_data+0x1054>)
 8004b9c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004ba0:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8004ecc <pack_telem_data+0x1058>
 8004ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bac:	ee17 3a90 	vmov	r3, s15
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	336b      	adds	r3, #107	; 0x6b
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 8004bbe:	4bc2      	ldr	r3, [pc, #776]	; (8004ec8 <pack_telem_data+0x1054>)
 8004bc0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004bc4:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8004ecc <pack_telem_data+0x1058>
 8004bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 3a90 	vmov	r3, s15
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	336c      	adds	r3, #108	; 0x6c
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 8004bde:	4bba      	ldr	r3, [pc, #744]	; (8004ec8 <pack_telem_data+0x1054>)
 8004be0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004be4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004ecc <pack_telem_data+0x1058>
 8004be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf0:	ee17 3a90 	vmov	r3, s15
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	336d      	adds	r3, #109	; 0x6d
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = TELEM_ITEM_110;
 8004c02:	4bb1      	ldr	r3, [pc, #708]	; (8004ec8 <pack_telem_data+0x1054>)
 8004c04:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004c08:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8004ecc <pack_telem_data+0x1058>
 8004c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c14:	ee17 3a90 	vmov	r3, s15
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	336e      	adds	r3, #110	; 0x6e
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 8004c22:	4ba9      	ldr	r3, [pc, #676]	; (8004ec8 <pack_telem_data+0x1054>)
 8004c24:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004c28:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8004ecc <pack_telem_data+0x1058>
 8004c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c34:	ee17 3a90 	vmov	r3, s15
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	336f      	adds	r3, #111	; 0x6f
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 8004c46:	4ba0      	ldr	r3, [pc, #640]	; (8004ec8 <pack_telem_data+0x1054>)
 8004c48:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c58:	ee17 3a90 	vmov	r3, s15
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3370      	adds	r3, #112	; 0x70
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 8004c66:	4b98      	ldr	r3, [pc, #608]	; (8004ec8 <pack_telem_data+0x1054>)
 8004c68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c78:	ee17 3a90 	vmov	r3, s15
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	121b      	asrs	r3, r3, #8
 8004c80:	b21a      	sxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3371      	adds	r3, #113	; 0x71
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 8004c8a:	4b8f      	ldr	r3, [pc, #572]	; (8004ec8 <pack_telem_data+0x1054>)
 8004c8c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8004c90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c9c:	ee17 3a90 	vmov	r3, s15
 8004ca0:	b21a      	sxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3372      	adds	r3, #114	; 0x72
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 8004caa:	4b87      	ldr	r3, [pc, #540]	; (8004ec8 <pack_telem_data+0x1054>)
 8004cac:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8004cb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cbc:	ee17 3a90 	vmov	r3, s15
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	121b      	asrs	r3, r3, #8
 8004cc4:	b21a      	sxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3373      	adds	r3, #115	; 0x73
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 8004cce:	4b7e      	ldr	r3, [pc, #504]	; (8004ec8 <pack_telem_data+0x1054>)
 8004cd0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004cd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce0:	ee17 3a90 	vmov	r3, s15
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3374      	adds	r3, #116	; 0x74
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 8004cee:	4b76      	ldr	r3, [pc, #472]	; (8004ec8 <pack_telem_data+0x1054>)
 8004cf0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004cf4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d00:	ee17 3a90 	vmov	r3, s15
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	121b      	asrs	r3, r3, #8
 8004d08:	b21a      	sxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3375      	adds	r3, #117	; 0x75
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 8004d12:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <pack_telem_data+0x1054>)
 8004d14:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004d18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d24:	ee17 3a90 	vmov	r3, s15
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3376      	adds	r3, #118	; 0x76
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <pack_telem_data+0x1054>)
 8004d34:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d44:	ee17 3a90 	vmov	r3, s15
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	121b      	asrs	r3, r3, #8
 8004d4c:	b21a      	sxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3377      	adds	r3, #119	; 0x77
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 8004d56:	4b5c      	ldr	r3, [pc, #368]	; (8004ec8 <pack_telem_data+0x1054>)
 8004d58:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004d5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d68:	ee17 3a90 	vmov	r3, s15
 8004d6c:	b21a      	sxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3378      	adds	r3, #120	; 0x78
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <pack_telem_data+0x1054>)
 8004d78:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d88:	ee17 3a90 	vmov	r3, s15
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	121b      	asrs	r3, r3, #8
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3379      	adds	r3, #121	; 0x79
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	; (8004ec8 <pack_telem_data+0x1054>)
 8004d9c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004da0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dac:	ee17 3a90 	vmov	r3, s15
 8004db0:	b21a      	sxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	337a      	adds	r3, #122	; 0x7a
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 8004dba:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <pack_telem_data+0x1054>)
 8004dbc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004dc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dcc:	ee17 3a90 	vmov	r3, s15
 8004dd0:	b21b      	sxth	r3, r3
 8004dd2:	121b      	asrs	r3, r3, #8
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	337b      	adds	r3, #123	; 0x7b
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 8004dde:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <pack_telem_data+0x1054>)
 8004de0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004de4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004ecc <pack_telem_data+0x1058>
 8004de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df0:	edc7 7a00 	vstr	s15, [r7]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	337c      	adds	r3, #124	; 0x7c
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <pack_telem_data+0x1054>)
 8004e00:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004ecc <pack_telem_data+0x1058>
 8004e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e10:	ee17 3a90 	vmov	r3, s15
 8004e14:	121a      	asrs	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	337d      	adds	r3, #125	; 0x7d
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <pack_telem_data+0x1054>)
 8004e20:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004ecc <pack_telem_data+0x1058>
 8004e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e30:	ee17 3a90 	vmov	r3, s15
 8004e34:	141a      	asrs	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	337e      	adds	r3, #126	; 0x7e
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <pack_telem_data+0x1054>)
 8004e40:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e44:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ecc <pack_telem_data+0x1058>
 8004e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e50:	ee17 3a90 	vmov	r3, s15
 8004e54:	161a      	asrs	r2, r3, #24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	337f      	adds	r3, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <pack_telem_data+0x1054>)
 8004e60:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ecc <pack_telem_data+0x1058>
 8004e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e70:	edc7 7a00 	vstr	s15, [r7]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3380      	adds	r3, #128	; 0x80
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <pack_telem_data+0x1054>)
 8004e80:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e84:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004ecc <pack_telem_data+0x1058>
 8004e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e90:	ee17 3a90 	vmov	r3, s15
 8004e94:	121a      	asrs	r2, r3, #8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3381      	adds	r3, #129	; 0x81
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <pack_telem_data+0x1054>)
 8004ea0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004ea4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004ecc <pack_telem_data+0x1058>
 8004ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb0:	ee17 3a90 	vmov	r3, s15
 8004eb4:	141a      	asrs	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3382      	adds	r3, #130	; 0x82
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 8004ebe:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <pack_telem_data+0x1054>)
 8004ec0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004ec4:	e004      	b.n	8004ed0 <pack_telem_data+0x105c>
 8004ec6:	bf00      	nop
 8004ec8:	20000688 	.word	0x20000688
 8004ecc:	42c80000 	.word	0x42c80000
 8004ed0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8004ecc <pack_telem_data+0x1058>
 8004ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004edc:	ee17 3a90 	vmov	r3, s15
 8004ee0:	161a      	asrs	r2, r3, #24
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3383      	adds	r3, #131	; 0x83
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 8004eea:	4bd0      	ldr	r3, [pc, #832]	; (800522c <pack_telem_data+0x13b8>)
 8004eec:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ef0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004efc:	ee17 3a90 	vmov	r3, s15
 8004f00:	b21a      	sxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3384      	adds	r3, #132	; 0x84
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 8004f0a:	4bc8      	ldr	r3, [pc, #800]	; (800522c <pack_telem_data+0x13b8>)
 8004f0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f1c:	ee17 3a90 	vmov	r3, s15
 8004f20:	b21b      	sxth	r3, r3
 8004f22:	121b      	asrs	r3, r3, #8
 8004f24:	b21a      	sxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3385      	adds	r3, #133	; 0x85
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 8004f2e:	4bbf      	ldr	r3, [pc, #764]	; (800522c <pack_telem_data+0x13b8>)
 8004f30:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004f34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f40:	ee17 3a90 	vmov	r3, s15
 8004f44:	b21a      	sxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3386      	adds	r3, #134	; 0x86
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 8004f4e:	4bb7      	ldr	r3, [pc, #732]	; (800522c <pack_telem_data+0x13b8>)
 8004f50:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004f54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f60:	ee17 3a90 	vmov	r3, s15
 8004f64:	b21b      	sxth	r3, r3
 8004f66:	121b      	asrs	r3, r3, #8
 8004f68:	b21a      	sxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3387      	adds	r3, #135	; 0x87
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 8004f72:	4bae      	ldr	r3, [pc, #696]	; (800522c <pack_telem_data+0x13b8>)
 8004f74:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f84:	ee17 3a90 	vmov	r3, s15
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3388      	adds	r3, #136	; 0x88
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 8004f92:	4ba6      	ldr	r3, [pc, #664]	; (800522c <pack_telem_data+0x13b8>)
 8004f94:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa4:	ee17 3a90 	vmov	r3, s15
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	121b      	asrs	r3, r3, #8
 8004fac:	b21a      	sxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3389      	adds	r3, #137	; 0x89
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 8004fb6:	4b9d      	ldr	r3, [pc, #628]	; (800522c <pack_telem_data+0x13b8>)
 8004fb8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004fbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc8:	ee17 3a90 	vmov	r3, s15
 8004fcc:	b21a      	sxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	338a      	adds	r3, #138	; 0x8a
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 8004fd6:	4b95      	ldr	r3, [pc, #596]	; (800522c <pack_telem_data+0x13b8>)
 8004fd8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004fdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe8:	ee17 3a90 	vmov	r3, s15
 8004fec:	b21b      	sxth	r3, r3
 8004fee:	121b      	asrs	r3, r3, #8
 8004ff0:	b21a      	sxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	338b      	adds	r3, #139	; 0x8b
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 8004ffa:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <pack_telem_data+0x13bc>)
 8004ffc:	edd3 7a00 	vldr	s15, [r3]
 8005000:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800500c:	edc7 7a00 	vstr	s15, [r7]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	338c      	adds	r3, #140	; 0x8c
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <pack_telem_data+0x13bc>)
 800501c:	edd3 7a00 	vldr	s15, [r3]
 8005020:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502c:	ee17 3a90 	vmov	r3, s15
 8005030:	121a      	asrs	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	338d      	adds	r3, #141	; 0x8d
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 800503a:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <pack_telem_data+0x13bc>)
 800503c:	edd3 7a00 	vldr	s15, [r3]
 8005040:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800504c:	ee17 3a90 	vmov	r3, s15
 8005050:	141a      	asrs	r2, r3, #16
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	338e      	adds	r3, #142	; 0x8e
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 800505a:	4b75      	ldr	r3, [pc, #468]	; (8005230 <pack_telem_data+0x13bc>)
 800505c:	edd3 7a00 	vldr	s15, [r3]
 8005060:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800506c:	ee17 3a90 	vmov	r3, s15
 8005070:	161a      	asrs	r2, r3, #24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	338f      	adds	r3, #143	; 0x8f
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 800507a:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <pack_telem_data+0x13bc>)
 800507c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508c:	edc7 7a00 	vstr	s15, [r7]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3390      	adds	r3, #144	; 0x90
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 800509a:	4b65      	ldr	r3, [pc, #404]	; (8005230 <pack_telem_data+0x13bc>)
 800509c:	edd3 7a01 	vldr	s15, [r3, #4]
 80050a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ac:	ee17 3a90 	vmov	r3, s15
 80050b0:	121a      	asrs	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3391      	adds	r3, #145	; 0x91
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <pack_telem_data+0x13bc>)
 80050bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80050c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050cc:	ee17 3a90 	vmov	r3, s15
 80050d0:	141a      	asrs	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3392      	adds	r3, #146	; 0x92
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 80050da:	4b55      	ldr	r3, [pc, #340]	; (8005230 <pack_telem_data+0x13bc>)
 80050dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80050e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ec:	ee17 3a90 	vmov	r3, s15
 80050f0:	161a      	asrs	r2, r3, #24
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3393      	adds	r3, #147	; 0x93
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 80050fa:	4b4e      	ldr	r3, [pc, #312]	; (8005234 <pack_telem_data+0x13c0>)
 80050fc:	edd3 7a00 	vldr	s15, [r3]
 8005100:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800510c:	edc7 7a00 	vstr	s15, [r7]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3394      	adds	r3, #148	; 0x94
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 800511a:	4b46      	ldr	r3, [pc, #280]	; (8005234 <pack_telem_data+0x13c0>)
 800511c:	edd3 7a00 	vldr	s15, [r3]
 8005120:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800512c:	ee17 3a90 	vmov	r3, s15
 8005130:	121a      	asrs	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3395      	adds	r3, #149	; 0x95
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 800513a:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <pack_telem_data+0x13c0>)
 800513c:	edd3 7a00 	vldr	s15, [r3]
 8005140:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800514c:	ee17 3a90 	vmov	r3, s15
 8005150:	141a      	asrs	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3396      	adds	r3, #150	; 0x96
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <pack_telem_data+0x13c0>)
 800515c:	edd3 7a00 	vldr	s15, [r3]
 8005160:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800516c:	ee17 3a90 	vmov	r3, s15
 8005170:	161a      	asrs	r2, r3, #24
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3397      	adds	r3, #151	; 0x97
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <pack_telem_data+0x13c4>)
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800518c:	edc7 7a00 	vstr	s15, [r7]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3398      	adds	r3, #152	; 0x98
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 800519a:	4b27      	ldr	r3, [pc, #156]	; (8005238 <pack_telem_data+0x13c4>)
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ac:	ee17 3a90 	vmov	r3, s15
 80051b0:	121a      	asrs	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3399      	adds	r3, #153	; 0x99
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 80051ba:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <pack_telem_data+0x13c4>)
 80051bc:	edd3 7a00 	vldr	s15, [r3]
 80051c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051cc:	ee17 3a90 	vmov	r3, s15
 80051d0:	141a      	asrs	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	339a      	adds	r3, #154	; 0x9a
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 80051da:	4b17      	ldr	r3, [pc, #92]	; (8005238 <pack_telem_data+0x13c4>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ec:	ee17 3a90 	vmov	r3, s15
 80051f0:	161a      	asrs	r2, r3, #24
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	339b      	adds	r3, #155	; 0x9b
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <pack_telem_data+0x13c8>)
 80051fc:	edd3 7a00 	vldr	s15, [r3]
 8005200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	edc7 7a00 	vstr	s15, [r7]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	339c      	adds	r3, #156	; 0x9c
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <pack_telem_data+0x13c8>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005228:	e00a      	b.n	8005240 <pack_telem_data+0x13cc>
 800522a:	bf00      	nop
 800522c:	20000688 	.word	0x20000688
 8005230:	2000049c 	.word	0x2000049c
 8005234:	200003dc 	.word	0x200003dc
 8005238:	200003e0 	.word	0x200003e0
 800523c:	200003e4 	.word	0x200003e4
 8005240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005244:	ee17 3a90 	vmov	r3, s15
 8005248:	121a      	asrs	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	339d      	adds	r3, #157	; 0x9d
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8005252:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <pack_telem_data+0x1610>)
 8005254:	edd3 7a00 	vldr	s15, [r3]
 8005258:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800525c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005264:	ee17 3a90 	vmov	r3, s15
 8005268:	141a      	asrs	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	339e      	adds	r3, #158	; 0x9e
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8005272:	4b84      	ldr	r3, [pc, #528]	; (8005484 <pack_telem_data+0x1610>)
 8005274:	edd3 7a00 	vldr	s15, [r3]
 8005278:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800527c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005284:	ee17 3a90 	vmov	r3, s15
 8005288:	161a      	asrs	r2, r3, #24
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	339f      	adds	r3, #159	; 0x9f
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	33a0      	adds	r3, #160	; 0xa0
 8005296:	4a7c      	ldr	r2, [pc, #496]	; (8005488 <pack_telem_data+0x1614>)
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	33a1      	adds	r3, #161	; 0xa1
 80052a2:	4a79      	ldr	r2, [pc, #484]	; (8005488 <pack_telem_data+0x1614>)
 80052a4:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 80052ac:	4b77      	ldr	r3, [pc, #476]	; (800548c <pack_telem_data+0x1618>)
 80052ae:	695a      	ldr	r2, [r3, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	33a2      	adds	r3, #162	; 0xa2
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 80052b8:	4b74      	ldr	r3, [pc, #464]	; (800548c <pack_telem_data+0x1618>)
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	0a1a      	lsrs	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	33a3      	adds	r3, #163	; 0xa3
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 80052c6:	4b71      	ldr	r3, [pc, #452]	; (800548c <pack_telem_data+0x1618>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	0c1a      	lsrs	r2, r3, #16
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	33a4      	adds	r3, #164	; 0xa4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 80052d4:	4b6d      	ldr	r3, [pc, #436]	; (800548c <pack_telem_data+0x1618>)
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	0e1a      	lsrs	r2, r3, #24
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	33a5      	adds	r3, #165	; 0xa5
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 80052e2:	4b6a      	ldr	r3, [pc, #424]	; (800548c <pack_telem_data+0x1618>)
 80052e4:	889b      	ldrh	r3, [r3, #4]
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	33a6      	adds	r3, #166	; 0xa6
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 80052f0:	4b66      	ldr	r3, [pc, #408]	; (800548c <pack_telem_data+0x1618>)
 80052f2:	889b      	ldrh	r3, [r3, #4]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	33a7      	adds	r3, #167	; 0xa7
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8005302:	4b62      	ldr	r3, [pc, #392]	; (800548c <pack_telem_data+0x1618>)
 8005304:	88db      	ldrh	r3, [r3, #6]
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	33a8      	adds	r3, #168	; 0xa8
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8005310:	4b5e      	ldr	r3, [pc, #376]	; (800548c <pack_telem_data+0x1618>)
 8005312:	88db      	ldrh	r3, [r3, #6]
 8005314:	b29b      	uxth	r3, r3
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	33a9      	adds	r3, #169	; 0xa9
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	33aa      	adds	r3, #170	; 0xaa
 8005326:	4a59      	ldr	r2, [pc, #356]	; (800548c <pack_telem_data+0x1618>)
 8005328:	7a12      	ldrb	r2, [r2, #8]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 800532e:	4b57      	ldr	r3, [pc, #348]	; (800548c <pack_telem_data+0x1618>)
 8005330:	895b      	ldrh	r3, [r3, #10]
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	33ab      	adds	r3, #171	; 0xab
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 800533c:	4b53      	ldr	r3, [pc, #332]	; (800548c <pack_telem_data+0x1618>)
 800533e:	895b      	ldrh	r3, [r3, #10]
 8005340:	b29b      	uxth	r3, r3
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	b29a      	uxth	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	33ac      	adds	r3, #172	; 0xac
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 800534e:	4b4f      	ldr	r3, [pc, #316]	; (800548c <pack_telem_data+0x1618>)
 8005350:	899b      	ldrh	r3, [r3, #12]
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	33ad      	adds	r3, #173	; 0xad
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 800535c:	4b4b      	ldr	r3, [pc, #300]	; (800548c <pack_telem_data+0x1618>)
 800535e:	899b      	ldrh	r3, [r3, #12]
 8005360:	b29b      	uxth	r3, r3
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	33ae      	adds	r3, #174	; 0xae
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 800536e:	4b48      	ldr	r3, [pc, #288]	; (8005490 <pack_telem_data+0x161c>)
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005494 <pack_telem_data+0x1620>
 8005378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800537c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005380:	edc7 7a00 	vstr	s15, [r7]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	33af      	adds	r3, #175	; 0xaf
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <pack_telem_data+0x161c>)
 8005390:	edd3 7a00 	vldr	s15, [r3]
 8005394:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005494 <pack_telem_data+0x1620>
 8005398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800539c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a0:	ee17 3a90 	vmov	r3, s15
 80053a4:	121a      	asrs	r2, r3, #8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	33b0      	adds	r3, #176	; 0xb0
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <pack_telem_data+0x161c>)
 80053b0:	edd3 7a00 	vldr	s15, [r3]
 80053b4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005494 <pack_telem_data+0x1620>
 80053b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053c0:	ee17 3a90 	vmov	r3, s15
 80053c4:	141a      	asrs	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	33b1      	adds	r3, #177	; 0xb1
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <pack_telem_data+0x161c>)
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005494 <pack_telem_data+0x1620>
 80053d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e0:	ee17 3a90 	vmov	r3, s15
 80053e4:	161a      	asrs	r2, r3, #24
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	33b2      	adds	r3, #178	; 0xb2
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <pack_telem_data+0x1624>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	33b3      	adds	r3, #179	; 0xb3
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 80053fa:	4b27      	ldr	r3, [pc, #156]	; (8005498 <pack_telem_data+0x1624>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	121a      	asrs	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	33b4      	adds	r3, #180	; 0xb4
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8005408:	4b23      	ldr	r3, [pc, #140]	; (8005498 <pack_telem_data+0x1624>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	141a      	asrs	r2, r3, #16
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	33b5      	adds	r3, #181	; 0xb5
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <pack_telem_data+0x1624>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	161a      	asrs	r2, r3, #24
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	33b6      	adds	r3, #182	; 0xb6
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	33b7      	adds	r3, #183	; 0xb7
 8005428:	4a1c      	ldr	r2, [pc, #112]	; (800549c <pack_telem_data+0x1628>)
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	33b8      	adds	r3, #184	; 0xb8
 8005432:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <pack_telem_data+0x162c>)
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <pack_telem_data+0x1630>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	33b9      	adds	r3, #185	; 0xb9
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8005444:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <pack_telem_data+0x1630>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0a1a      	lsrs	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	33ba      	adds	r3, #186	; 0xba
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8005452:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <pack_telem_data+0x1630>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	0c1a      	lsrs	r2, r3, #16
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	33bb      	adds	r3, #187	; 0xbb
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <pack_telem_data+0x1630>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	0e1a      	lsrs	r2, r3, #24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	33bc      	adds	r3, #188	; 0xbc
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	33bd      	adds	r3, #189	; 0xbd
 8005472:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <pack_telem_data+0x1634>)
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	200003e4 	.word	0x200003e4
 8005488:	20000688 	.word	0x20000688
 800548c:	20000730 	.word	0x20000730
 8005490:	200003e8 	.word	0x200003e8
 8005494:	461c4000 	.word	0x461c4000
 8005498:	200003ec 	.word	0x200003ec
 800549c:	200003f0 	.word	0x200003f0
 80054a0:	200003f1 	.word	0x200003f1
 80054a4:	200003f4 	.word	0x200003f4
 80054a8:	200003f8 	.word	0x200003f8

080054ac <update_serial_data_vars>:
		buffer_info->telem_buffer[i] = 0;
	}
	*/
}

void update_serial_data_vars() {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
    flash_mem = get_bytes_remaining(&flash);
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <update_serial_data_vars+0x1c>)
 80054b2:	f003 fc5e 	bl	8008d72 <get_bytes_remaining>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <update_serial_data_vars+0x20>)
 80054ba:	6013      	str	r3, [r2, #0]

    // Update last command received
    last_command_id = CLB_last_cmd_received;
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <update_serial_data_vars+0x24>)
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <update_serial_data_vars+0x28>)
 80054c2:	701a      	strb	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20002290 	.word	0x20002290
 80054cc:	200003f4 	.word	0x200003f4
 80054d0:	20000a2a 	.word	0x20000a2a
 80054d4:	200003d4 	.word	0x200003d4

080054d8 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
	header->origin_addr = FLIGHT_EC_ADDR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2203      	movs	r2, #3
 80054ee:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	70da      	strb	r2, [r3, #3]
	header->num_packets = 1;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	711a      	strb	r2, [r3, #4]
	header->do_cobbs = 1; // enable COBS
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	715a      	strb	r2, [r3, #5]
	header->checksum = 0;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	80da      	strh	r2, [r3, #6]
	header->timestamp = SYS_MICROS;
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <init_packet_header+0x4c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	20000ca8 	.word	0x20000ca8

08005528 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 8005532:	79fa      	ldrb	r2, [r7, #7]
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ffcc 	bl	80054d8 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	461a      	mov	r2, r3
 8005546:	f04f 31ff 	mov.w	r1, #4294967295
 800554a:	2000      	movs	r0, #0
 800554c:	f002 f9e0 	bl	8007910 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <send_telem_packet+0x40>)
 8005552:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f002 fa08 	bl	8007970 <send_data>
}
 8005560:	bf00      	nop
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20002100 	.word	0x20002100

0800556c <save_flash_packet>:

void save_flash_packet() {
 800556c:	b580      	push	{r7, lr}
 800556e:	b0c8      	sub	sp, #288	; 0x120
 8005570:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 8005572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005576:	2107      	movs	r1, #7
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ffad 	bl	80054d8 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 800557e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 31ff 	mov.w	r1, #4294967295
 8005588:	2000      	movs	r0, #0
 800558a:	f002 f9c1 	bl	8007910 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 800558e:	f107 0310 	add.w	r3, r7, #16
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	3304      	adds	r3, #4
 8005598:	22f9      	movs	r2, #249	; 0xf9
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f008 f9d7 	bl	800d950 <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	2200      	movs	r2, #0
 80055a6:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	22fd      	movs	r2, #253	; 0xfd
 80055ac:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	f107 0210 	add.w	r2, r7, #16
 80055b4:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f9d8 	bl	8007970 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80055c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 80055ca:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80055ce:	f107 0310 	add.w	r3, r7, #16
 80055d2:	4619      	mov	r1, r3
 80055d4:	4803      	ldr	r0, [pc, #12]	; (80055e4 <save_flash_packet+0x78>)
 80055d6:	f003 fa5c 	bl	8008a92 <write_to_flash>
}
 80055da:	bf00      	nop
 80055dc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20002290 	.word	0x20002290

080055e8 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 80055ee:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 80055f0:	481c      	ldr	r0, [pc, #112]	; (8005664 <transmit_flash_data+0x7c>)
 80055f2:	f003 fb19 	bl	8008c28 <finish_flash_write>

	uint32_t page = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <transmit_flash_data+0x7c>)
 80055fe:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8005602:	3301      	adds	r3, #1
 8005604:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8005608:	4b16      	ldr	r3, [pc, #88]	; (8005664 <transmit_flash_data+0x7c>)
 800560a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <transmit_flash_data+0x34>
		end_page--;
 8005612:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8005616:	3b01      	subs	r3, #1
 8005618:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 800561c:	4811      	ldr	r0, [pc, #68]	; (8005664 <transmit_flash_data+0x7c>)
 800561e:	f003 fb49 	bl	8008cb4 <reset_flash_read_pointer>
	while (page < end_page) {
 8005622:	e011      	b.n	8005648 <transmit_flash_data+0x60>
	    read_next_2KB_from_flash(&flash, read_buffer);
 8005624:	463b      	mov	r3, r7
 8005626:	4619      	mov	r1, r3
 8005628:	480e      	ldr	r0, [pc, #56]	; (8005664 <transmit_flash_data+0x7c>)
 800562a:	f003 fb51 	bl	8008cd0 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 800562e:	4639      	mov	r1, r7
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <transmit_flash_data+0x80>)
 800563a:	f007 f84c 	bl	800c6d6 <HAL_UART_Transmit>
	    ++page;
 800563e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005642:	3301      	adds	r3, #1
 8005644:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	while (page < end_page) {
 8005648:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800564c:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8005650:	429a      	cmp	r2, r3
 8005652:	d3e7      	bcc.n	8005624 <transmit_flash_data+0x3c>
		//HAL_IWDG_Refresh(&hiwdg);  TODO: re enable this
	}
	reset_flash_read_pointer(&flash);
 8005654:	4803      	ldr	r0, [pc, #12]	; (8005664 <transmit_flash_data+0x7c>)
 8005656:	f003 fb2d 	bl	8008cb4 <reset_flash_read_pointer>
}
 800565a:	bf00      	nop
 800565c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20002290 	.word	0x20002290
 8005668:	20002100 	.word	0x20002100

0800566c <send_calibration_data>:
        RxRollover++;       // increment Rollover Counter
    }
}
*/

void send_calibration_data() {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
	CLB_Packet_Header cal_header;

	cal_header.packet_type = 2; // calibration packet
 8005672:	2302      	movs	r3, #2
 8005674:	733b      	strb	r3, [r7, #12]
	cal_header.origin_addr = FLIGHT_EC_ADDR;
 8005676:	2303      	movs	r3, #3
 8005678:	737b      	strb	r3, [r7, #13]
	cal_header.target_addr = SERVER_ADDR;
 800567a:	2307      	movs	r3, #7
 800567c:	73bb      	strb	r3, [r7, #14]
	cal_header.priority = 1; // medium
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
	cal_header.do_cobbs = 1; // enable COBS
 8005682:	2301      	movs	r3, #1
 8005684:	747b      	strb	r3, [r7, #17]
	cal_header.timestamp = SYS_MICROS;
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <send_calibration_data+0x48>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	617b      	str	r3, [r7, #20]

    init_data(NULL, -1, &cal_header);  // Comms library (tx, so no buffer)
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 31ff 	mov.w	r1, #4294967295
 8005698:	2000      	movs	r0, #0
 800569a:	f002 f939 	bl	8007910 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <send_calibration_data+0x4c>)
 80056a0:	603b      	str	r3, [r7, #0]
    send_data(&info, CLB_Telem);
 80056a2:	463b      	mov	r3, r7
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f002 f962 	bl	8007970 <send_data>
}
 80056ac:	bf00      	nop
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000ca8 	.word	0x20000ca8
 80056b8:	20002100 	.word	0x20002100

080056bc <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 80056c4:	2201      	movs	r2, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <set_status_flag+0x28>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <set_status_flag+0x28>)
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	200003d8 	.word	0x200003d8

080056e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_MspInit+0x4c>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <HAL_MspInit+0x4c>)
 80056f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056fc:	6453      	str	r3, [r2, #68]	; 0x44
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <HAL_MspInit+0x4c>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_MspInit+0x4c>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	4a08      	ldr	r2, [pc, #32]	; (8005734 <HAL_MspInit+0x4c>)
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005718:	6413      	str	r3, [r2, #64]	; 0x40
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_MspInit+0x4c>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005726:	2004      	movs	r0, #4
 8005728:	f003 fcee 	bl	8009108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800

08005738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4c      	ldr	r2, [pc, #304]	; (8005888 <HAL_SPI_MspInit+0x150>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d12c      	bne.n	80057b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	4b4b      	ldr	r3, [pc, #300]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_SPI_MspInit+0x154>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	4b44      	ldr	r3, [pc, #272]	; (800588c <HAL_SPI_MspInit+0x154>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	4a43      	ldr	r2, [pc, #268]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6313      	str	r3, [r2, #48]	; 0x30
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005792:	23e0      	movs	r3, #224	; 0xe0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005796:	2302      	movs	r3, #2
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800579e:	2303      	movs	r3, #3
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057a2:	2305      	movs	r3, #5
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057aa:	4619      	mov	r1, r3
 80057ac:	4838      	ldr	r0, [pc, #224]	; (8005890 <HAL_SPI_MspInit+0x158>)
 80057ae:	f004 f8ef 	bl	8009990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80057b2:	e064      	b.n	800587e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a36      	ldr	r2, [pc, #216]	; (8005894 <HAL_SPI_MspInit+0x15c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d12d      	bne.n	800581a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	4b32      	ldr	r3, [pc, #200]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	4a31      	ldr	r2, [pc, #196]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057cc:	6413      	str	r3, [r2, #64]	; 0x40
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	4a2a      	ldr	r2, [pc, #168]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ea:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_SPI_MspInit+0x154>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80057f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fc:	2302      	movs	r3, #2
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005804:	2303      	movs	r3, #3
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005808:	2305      	movs	r3, #5
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800580c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005810:	4619      	mov	r1, r3
 8005812:	4821      	ldr	r0, [pc, #132]	; (8005898 <HAL_SPI_MspInit+0x160>)
 8005814:	f004 f8bc 	bl	8009990 <HAL_GPIO_Init>
}
 8005818:	e031      	b.n	800587e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI4)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_SPI_MspInit+0x164>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d12c      	bne.n	800587e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	4b18      	ldr	r3, [pc, #96]	; (800588c <HAL_SPI_MspInit+0x154>)
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	4a17      	ldr	r2, [pc, #92]	; (800588c <HAL_SPI_MspInit+0x154>)
 800582e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005832:	6453      	str	r3, [r2, #68]	; 0x44
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	4b11      	ldr	r3, [pc, #68]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	4a10      	ldr	r2, [pc, #64]	; (800588c <HAL_SPI_MspInit+0x154>)
 800584a:	f043 0310 	orr.w	r3, r3, #16
 800584e:	6313      	str	r3, [r2, #48]	; 0x30
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_SPI_MspInit+0x154>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800585c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005862:	2302      	movs	r3, #2
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005866:	2300      	movs	r3, #0
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586a:	2303      	movs	r3, #3
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800586e:	2305      	movs	r3, #5
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005876:	4619      	mov	r1, r3
 8005878:	4809      	ldr	r0, [pc, #36]	; (80058a0 <HAL_SPI_MspInit+0x168>)
 800587a:	f004 f889 	bl	8009990 <HAL_GPIO_Init>
}
 800587e:	bf00      	nop
 8005880:	3738      	adds	r7, #56	; 0x38
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40013000 	.word	0x40013000
 800588c:	40023800 	.word	0x40023800
 8005890:	40020000 	.word	0x40020000
 8005894:	40003800 	.word	0x40003800
 8005898:	40020400 	.word	0x40020400
 800589c:	40013400 	.word	0x40013400
 80058a0:	40021000 	.word	0x40021000

080058a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	4b62      	ldr	r3, [pc, #392]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a61      	ldr	r2, [pc, #388]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80058d2:	e0b2      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM3)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5b      	ldr	r2, [pc, #364]	; (8005a48 <HAL_TIM_Base_MspInit+0x1a4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a57      	ldr	r2, [pc, #348]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058e8:	f043 0302 	orr.w	r3, r3, #2
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	623b      	str	r3, [r7, #32]
 80058f8:	6a3b      	ldr	r3, [r7, #32]
}
 80058fa:	e09e      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM5)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a52      	ldr	r2, [pc, #328]	; (8005a4c <HAL_TIM_Base_MspInit+0x1a8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	4b4e      	ldr	r3, [pc, #312]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4a4d      	ldr	r2, [pc, #308]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	69fb      	ldr	r3, [r7, #28]
}
 8005922:	e08a      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM6)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a49      	ldr	r2, [pc, #292]	; (8005a50 <HAL_TIM_Base_MspInit+0x1ac>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d116      	bne.n	800595c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a43      	ldr	r2, [pc, #268]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005938:	f043 0310 	orr.w	r3, r3, #16
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800594a:	2200      	movs	r2, #0
 800594c:	2101      	movs	r1, #1
 800594e:	2036      	movs	r0, #54	; 0x36
 8005950:	f003 fbe5 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005954:	2036      	movs	r0, #54	; 0x36
 8005956:	f003 fbfe 	bl	8009156 <HAL_NVIC_EnableIRQ>
}
 800595a:	e06e      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM7)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <HAL_TIM_Base_MspInit+0x1b0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d116      	bne.n	8005994 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	4a35      	ldr	r2, [pc, #212]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6413      	str	r3, [r2, #64]	; 0x40
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8005982:	2200      	movs	r2, #0
 8005984:	2102      	movs	r1, #2
 8005986:	2037      	movs	r0, #55	; 0x37
 8005988:	f003 fbc9 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800598c:	2037      	movs	r0, #55	; 0x37
 800598e:	f003 fbe2 	bl	8009156 <HAL_NVIC_EnableIRQ>
}
 8005992:	e052      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM10)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <HAL_TIM_Base_MspInit+0x1b4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d116      	bne.n	80059cc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ac:	6453      	str	r3, [r2, #68]	; 0x44
 80059ae:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2102      	movs	r1, #2
 80059be:	2019      	movs	r0, #25
 80059c0:	f003 fbad 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80059c4:	2019      	movs	r0, #25
 80059c6:	f003 fbc6 	bl	8009156 <HAL_NVIC_EnableIRQ>
}
 80059ca:	e036      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM11)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_TIM_Base_MspInit+0x1b8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d116      	bne.n	8005a04 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059e4:	6453      	str	r3, [r2, #68]	; 0x44
 80059e6:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2102      	movs	r1, #2
 80059f6:	201a      	movs	r0, #26
 80059f8:	f003 fb91 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80059fc:	201a      	movs	r0, #26
 80059fe:	f003 fbaa 	bl	8009156 <HAL_NVIC_EnableIRQ>
}
 8005a02:	e01a      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM13)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <HAL_TIM_Base_MspInit+0x1bc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d115      	bne.n	8005a3a <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	4a0b      	ldr	r2, [pc, #44]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_TIM_Base_MspInit+0x1a0>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	202c      	movs	r0, #44	; 0x2c
 8005a30:	f003 fb75 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005a34:	202c      	movs	r0, #44	; 0x2c
 8005a36:	f003 fb8e 	bl	8009156 <HAL_NVIC_EnableIRQ>
}
 8005a3a:	bf00      	nop
 8005a3c:	3728      	adds	r7, #40	; 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40001000 	.word	0x40001000
 8005a54:	40001400 	.word	0x40001400
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40001c00 	.word	0x40001c00

08005a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d11f      	bne.n	8005ac6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	6313      	str	r3, [r2, #48]	; 0x30
 8005a96:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = mtr0_pwmA_Pin|mtr0_pwmB_Pin;
 8005aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	4619      	mov	r1, r3
 8005abe:	4816      	ldr	r0, [pc, #88]	; (8005b18 <HAL_TIM_MspPostInit+0xb4>)
 8005ac0:	f003 ff66 	bl	8009990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ac4:	e022      	b.n	8005b0c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <HAL_TIM_MspPostInit+0xb8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d11d      	bne.n	8005b0c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	4a0e      	ldr	r2, [pc, #56]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <HAL_TIM_MspPostInit+0xb0>)
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mtr1_pwmA_Pin|mtr1_pwmB_Pin;
 8005aec:	2330      	movs	r3, #48	; 0x30
 8005aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af0:	2302      	movs	r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af8:	2300      	movs	r3, #0
 8005afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005afc:	2302      	movs	r3, #2
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	4619      	mov	r1, r3
 8005b06:	4804      	ldr	r0, [pc, #16]	; (8005b18 <HAL_TIM_MspPostInit+0xb4>)
 8005b08:	f003 ff42 	bl	8009990 <HAL_GPIO_Init>
}
 8005b0c:	bf00      	nop
 8005b0e:	3728      	adds	r7, #40	; 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40020400 	.word	0x40020400
 8005b1c:	40000400 	.word	0x40000400

08005b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b28:	f107 0314 	add.w	r3, r7, #20
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <HAL_UART_MspInit+0xf4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d163      	bne.n	8005c0a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	4a33      	ldr	r2, [pc, #204]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b50:	6413      	str	r3, [r2, #64]	; 0x40
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b68:	f043 0308 	orr.w	r3, r3, #8
 8005b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6e:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <HAL_UART_MspInit+0xf8>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005b7a:	2360      	movs	r3, #96	; 0x60
 8005b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b86:	2303      	movs	r3, #3
 8005b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b8a:	2307      	movs	r3, #7
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	4619      	mov	r1, r3
 8005b94:	4821      	ldr	r0, [pc, #132]	; (8005c1c <HAL_UART_MspInit+0xfc>)
 8005b96:	f003 fefb 	bl	8009990 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005b9a:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_UART_MspInit+0x104>)
 8005b9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ba6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bbc:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bd6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005bde:	4810      	ldr	r0, [pc, #64]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005be0:	f003 fad4 	bl	800918c <HAL_DMA_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005bea:	f7fd fb07 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <HAL_UART_MspInit+0x100>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	2026      	movs	r0, #38	; 0x26
 8005c00:	f003 fa8d 	bl	800911e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c04:	2026      	movs	r0, #38	; 0x26
 8005c06:	f003 faa6 	bl	8009156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005c0a:	bf00      	nop
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40004400 	.word	0x40004400
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40020c00 	.word	0x40020c00
 8005c20:	20000b98 	.word	0x20000b98
 8005c24:	40026088 	.word	0x40026088

08005c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c2c:	e7fe      	b.n	8005c2c <NMI_Handler+0x4>

08005c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c32:	e7fe      	b.n	8005c32 <HardFault_Handler+0x4>

08005c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c38:	e7fe      	b.n	8005c38 <MemManage_Handler+0x4>

08005c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c3e:	e7fe      	b.n	8005c3e <BusFault_Handler+0x4>

08005c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c44:	e7fe      	b.n	8005c44 <UsageFault_Handler+0x4>

08005c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c46:	b480      	push	{r7}
 8005c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c62:	b480      	push	{r7}
 8005c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c74:	f003 f958 	bl	8008f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005c80:	4802      	ldr	r0, [pc, #8]	; (8005c8c <DMA1_Stream5_IRQHandler+0x10>)
 8005c82:	f003 fc1b 	bl	80094bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000b98 	.word	0x20000b98

08005c90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005c94:	4802      	ldr	r0, [pc, #8]	; (8005ca0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c96:	f005 fe77 	bl	800b988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000c50 	.word	0x20000c50

08005ca4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005ca8:	4802      	ldr	r0, [pc, #8]	; (8005cb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005caa:	f005 fe6d 	bl	800b988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005cae:	bf00      	nop
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000d80 	.word	0x20000d80

08005cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005cbc:	4807      	ldr	r0, [pc, #28]	; (8005cdc <USART2_IRQHandler+0x24>)
 8005cbe:	f006 fdcd 	bl	800c85c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <USART2_IRQHandler+0x24>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d102      	bne.n	8005cd6 <USART2_IRQHandler+0x1e>
      HAL_UART_RxCpltCallback(&huart2);
 8005cd0:	4802      	ldr	r0, [pc, #8]	; (8005cdc <USART2_IRQHandler+0x24>)
 8005cd2:	f7fc fbbd 	bl	8002450 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20002100 	.word	0x20002100

08005ce0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8005ce4:	4802      	ldr	r0, [pc, #8]	; (8005cf0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005ce6:	f005 fe4f 	bl	800b988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000d38 	.word	0x20000d38

08005cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005cf8:	4802      	ldr	r0, [pc, #8]	; (8005d04 <TIM6_DAC_IRQHandler+0x10>)
 8005cfa:	f005 fe45 	bl	800b988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000e20 	.word	0x20000e20

08005d08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005d0c:	4802      	ldr	r0, [pc, #8]	; (8005d18 <TIM7_IRQHandler+0x10>)
 8005d0e:	f005 fe3b 	bl	800b988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20002148 	.word	0x20002148

08005d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <SystemInit+0x20>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <SystemInit+0x20>)
 8005d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	789b      	ldrb	r3, [r3, #2]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f001 fa35 	bl	80071d0 <set_valve_channel>
	}
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <tank_init_control_loop>:

/**
 * Call this right before entering the control loop
 */
void tank_init_control_loop(TPC_Info* tank) {
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	tank->Kp_error = 0,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34
	tank->Ki_error = 0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
	tank->Kd_error = 0;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	tank->PID_error_sum = 0;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <tank_autopress_bang_bang>:


void tank_autopress_bang_bang(TPC_Info* tank) {
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	ed93 7a00 	vldr	s14, [r3]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_low_pres_diff)) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8005dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 8005dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de2:	d504      	bpl.n	8005dee <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 8005de4:	2101      	movs	r1, #1
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ffaa 	bl	8005d40 <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8005dec:	e015      	b.n	8005e1a <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	ed93 7a00 	vldr	s14, [r3]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_high_pres_diff)) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 8005e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0e:	dc00      	bgt.n	8005e12 <tank_autopress_bang_bang+0x58>
}
 8005e10:	e003      	b.n	8005e1a <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 8005e12:	2100      	movs	r1, #0
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff ff93 	bl	8005d40 <actuate_tank_control_valve>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa fb2b 	bl	800048c <__aeabi_ui2d>
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <tank_PID_pressure_control+0x1d4>)
 8005e3c:	f7fa fcca 	bl	80007d4 <__aeabi_ddiv>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	f7fa fe92 	bl	8000b70 <__aeabi_d2f>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    float max_motor_delta = maxPos - curPos[tank->motor_num]; //distance from maxPos
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <tank_PID_pressure_control+0x1d8>)
 8005e52:	ed93 7a00 	vldr	s14, [r3]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	78db      	ldrb	r3, [r3, #3]
 8005e5a:	4a69      	ldr	r2, [pc, #420]	; (8006000 <tank_PID_pressure_control+0x1dc>)
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	edd3 7a00 	vldr	s15, [r3]
 8005e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	edd3 7a00 	vldr	s15, [r3]
 8005e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e7e:	edc7 7a08 	vstr	s15, [r7, #32]
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005e88:	edd7 6a08 	vldr	s13, [r7, #32]
 8005e8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e98:	edc7 7a07 	vstr	s15, [r7, #28]
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005ea2:	ed97 7a08 	vldr	s14, [r7, #32]
 8005ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005eaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb2:	edc7 7a06 	vstr	s15, [r7, #24]
	tank->PID_prev_step_error = error;  // store for next D calculation
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44

	// Apply gains
	float Kp_term = tank->K_p * error;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ec2:	ed97 7a08 	vldr	s14, [r7, #32]
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a05 	vstr	s15, [r7, #20]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a04 	vstr	s15, [r7, #16]
	float Kd_term = tank->K_d * slope;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005ee8:	ed97 7a06 	vldr	s14, [r7, #24]
 8005eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8005ef4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f00:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f08:	edc7 7a02 	vstr	s15, [r7, #8]

	// Limit output
	float motor_delta;
	if (PID_total_output < -curPos[tank->motor_num]) {  // Lower bound
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	78db      	ldrb	r3, [r3, #3]
 8005f10:	4a3b      	ldr	r2, [pc, #236]	; (8006000 <tank_PID_pressure_control+0x1dc>)
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	edd3 7a00 	vldr	s15, [r3]
 8005f1a:	eef1 7a67 	vneg.f32	s15, s15
 8005f1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2a:	d50b      	bpl.n	8005f44 <tank_PID_pressure_control+0x120>
		motor_delta = -curPos[tank->motor_num];
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	4a33      	ldr	r2, [pc, #204]	; (8006000 <tank_PID_pressure_control+0x1dc>)
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	edd3 7a00 	vldr	s15, [r3]
 8005f3a:	eef1 7a67 	vneg.f32	s15, s15
 8005f3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8005f42:	e010      	b.n	8005f66 <tank_PID_pressure_control+0x142>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 8005f44:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f54:	dd02      	ble.n	8005f5c <tank_PID_pressure_control+0x138>
		motor_delta = max_motor_delta;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5a:	e004      	b.n	8005f66 <tank_PID_pressure_control+0x142>
	}
	else {
		motor_delta = PID_total_output;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// Actuate motor to new position
	//actuate_tank_motor_pos(tank, motor_pos + motor_delta);  Not yet lol
    targetPos[tank->motor_num] = curPos[tank->motor_num] + motor_delta;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	4a25      	ldr	r2, [pc, #148]	; (8006000 <tank_PID_pressure_control+0x1dc>)
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	ed93 7a00 	vldr	s14, [r3]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	78db      	ldrb	r3, [r3, #3]
 8005f78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f80:	4a20      	ldr	r2, [pc, #128]	; (8006004 <tank_PID_pressure_control+0x1e0>)
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	edc3 7a00 	vstr	s15, [r3]
    curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	78db      	ldrb	r3, [r3, #3]
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <tank_PID_pressure_control+0x1dc>)
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	ed93 7a00 	vldr	s14, [r3]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	4a19      	ldr	r2, [pc, #100]	; (8006004 <tank_PID_pressure_control+0x1e0>)
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	edd3 7a00 	vldr	s15, [r3]
 8005fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fae:	d501      	bpl.n	8005fb4 <tank_PID_pressure_control+0x190>
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	e001      	b.n	8005fb8 <tank_PID_pressure_control+0x194>
 8005fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <tank_PID_pressure_control+0x1e4>)
 8005fc0:	5499      	strb	r1, [r3, r2]

	// Log data
    mtr_set[tank->motor_num] = targetPos[tank->motor_num];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	78db      	ldrb	r3, [r3, #3]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	4a0d      	ldr	r2, [pc, #52]	; (8006004 <tank_PID_pressure_control+0x1e0>)
 8005fd0:	008b      	lsls	r3, r1, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	490d      	ldr	r1, [pc, #52]	; (800600c <tank_PID_pressure_control+0x1e8>)
 8005fd8:	0083      	lsls	r3, r0, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	601a      	str	r2, [r3, #0]
    tank->Kp_error = Kp_term;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34
    tank->Ki_error = Ki_term;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
    tank->Kd_error = Kd_term;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ff0:	bf00      	nop
 8005ff2:	3730      	adds	r7, #48	; 0x30
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	408f4000 	.word	0x408f4000
 8005ffc:	20000010 	.word	0x20000010
 8006000:	200004b0 	.word	0x200004b0
 8006004:	200004a8 	.word	0x200004a8
 8006008:	200004b8 	.word	0x200004b8
 800600c:	20000494 	.word	0x20000494

08006010 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	ed93 7a00 	vldr	s14, [r3]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	edd3 7a07 	vldr	s15, [r3, #28]
 8006026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800602a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602e:	d504      	bpl.n	800603a <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8006030:	2101      	movs	r1, #1
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fe84 	bl	8005d40 <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8006038:	e010      	b.n	800605c <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	ed93 7a00 	vldr	s14, [r3]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	edd3 7a08 	vldr	s15, [r3, #32]
 8006048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	dc00      	bgt.n	8006054 <tank_check_control_valve_threshold+0x44>
}
 8006052:	e003      	b.n	800605c <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fe72 	bl	8005d40 <actuate_tank_control_valve>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	0000      	movs	r0, r0
	...

08006068 <tank_startup_init_motor_position>:


// TODO: refactor this bigly
void tank_startup_init_motor_position(TPC_Info* tank) {
 8006068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800606c:	ed2d 8b02 	vpush	{d8}
 8006070:	b09a      	sub	sp, #104	; 0x68
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
	static double c2     = 6140;
	static double c3     = 5360;
	static double c4     = 769.8;

	double crit_pr, t_r, valve_cv, t_f, /*p_rat, t_rat,*/ q_acf, q_scf, vdot;
	double deg = 0;
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double p_i    = (double)(*(tank->COPV_pres));       // cng pressure
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7fa fa21 	bl	80004d0 <__aeabi_f2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double p_o    = (double)(*(tank->control_pres));     // tank pressure
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f7fa fa17 	bl	80004d0 <__aeabi_f2d>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Avoid divide by zero error
	if (p_i == 0) {
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80060b6:	f7fa fccb 	bl	8000a50 <__aeabi_dcmpeq>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <tank_startup_init_motor_position+0x62>
		p_i = 0.0000001;
 80060c0:	a397      	add	r3, pc, #604	; (adr r3, 8006320 <tank_startup_init_motor_position+0x2b8>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (p_o == 0) {
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80060d6:	f7fa fcbb 	bl	8000a50 <__aeabi_dcmpeq>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <tank_startup_init_motor_position+0x82>
		p_o = 0.0000001;
 80060e0:	a38f      	add	r3, pc, #572	; (adr r3, 8006320 <tank_startup_init_motor_position+0x2b8>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	t_f = 300; // K  TODO: what are these, and why aren't they also static?
 80060ea:	a38f      	add	r3, pc, #572	; (adr r3, 8006328 <tank_startup_init_motor_position+0x2c0>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_std = 288; // K
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	4b85      	ldr	r3, [pc, #532]	; (8006310 <tank_startup_init_motor_position+0x2a8>)
 80060fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p_std = 14.7; // psi
 80060fe:	a376      	add	r3, pc, #472	; (adr r3, 80062d8 <tank_startup_init_motor_position+0x270>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (tank->is_cryogenic) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <tank_startup_init_motor_position+0xb4>
		vdot   = 0.00317;
 8006110:	a373      	add	r3, pc, #460	; (adr r3, 80062e0 <tank_startup_init_motor_position+0x278>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800611a:	e004      	b.n	8006126 <tank_startup_init_motor_position+0xbe>
	}
	else {
		vdot   = 0.00361;
 800611c:	a372      	add	r3, pc, #456	; (adr r3, 80062e8 <tank_startup_init_motor_position+0x280>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	// Calculations
	crit_pr = pow(2.0 / (gamma + 1), gamma / (gamma - 1));
 8006126:	4b7b      	ldr	r3, [pc, #492]	; (8006314 <tank_startup_init_motor_position+0x2ac>)
 8006128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4b79      	ldr	r3, [pc, #484]	; (8006318 <tank_startup_init_motor_position+0x2b0>)
 8006132:	f7fa f86f 	bl	8000214 <__adddf3>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	f04f 0000 	mov.w	r0, #0
 800613e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006142:	f7fa fb47 	bl	80007d4 <__aeabi_ddiv>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	ec43 2b18 	vmov	d8, r2, r3
 800614e:	4b71      	ldr	r3, [pc, #452]	; (8006314 <tank_startup_init_motor_position+0x2ac>)
 8006150:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006154:	4b6f      	ldr	r3, [pc, #444]	; (8006314 <tank_startup_init_motor_position+0x2ac>)
 8006156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	4b6e      	ldr	r3, [pc, #440]	; (8006318 <tank_startup_init_motor_position+0x2b0>)
 8006160:	f7fa f856 	bl	8000210 <__aeabi_dsub>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa fb32 	bl	80007d4 <__aeabi_ddiv>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	ec43 2b17 	vmov	d7, r2, r3
 8006178:	eeb0 1a47 	vmov.f32	s2, s14
 800617c:	eef0 1a67 	vmov.f32	s3, s15
 8006180:	eeb0 0a48 	vmov.f32	s0, s16
 8006184:	eef0 0a68 	vmov.f32	s1, s17
 8006188:	f007 fcee 	bl	800db68 <pow>
 800618c:	ed87 0b06 	vstr	d0, [r7, #24]
	t_r     = (double)(*(tank->COPV_temp)) * (9.0/5);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa f99a 	bl	80004d0 <__aeabi_f2d>
 800619c:	a354      	add	r3, pc, #336	; (adr r3, 80062f0 <tank_startup_init_motor_position+0x288>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f9ed 	bl	8000580 <__aeabi_dmul>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	q_acf = vdot*2118.88; // cfm
 80061ae:	a352      	add	r3, pc, #328	; (adr r3, 80062f8 <tank_startup_init_motor_position+0x290>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80061b8:	f7fa f9e2 	bl	8000580 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (tank->is_cryogenic) { // cryogenic liquid case
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <tank_startup_init_motor_position+0x19c>
		q_scf = q_acf*p_o/(p_std)*1.3;
 80061cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061d4:	f7fa f9d4 	bl	8000580 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061e4:	f7fa faf6 	bl	80007d4 <__aeabi_ddiv>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	a343      	add	r3, pc, #268	; (adr r3, 8006300 <tank_startup_init_motor_position+0x298>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa f9c3 	bl	8000580 <__aeabi_dmul>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8006202:	e021      	b.n	8006248 <tank_startup_init_motor_position+0x1e0>
	}
	else {
		q_scf = q_acf*p_o*t_std/(p_std*t_f);
 8006204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800620c:	f7fa f9b8 	bl	8000580 <__aeabi_dmul>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621c:	f7fa f9b0 	bl	8000580 <__aeabi_dmul>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4614      	mov	r4, r2
 8006226:	461d      	mov	r5, r3
 8006228:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800622c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006230:	f7fa f9a6 	bl	8000580 <__aeabi_dmul>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa faca 	bl	80007d4 <__aeabi_ddiv>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	if (crit_pr >= p_o/p_i) { // Critical flows
 8006248:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800624c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006250:	f7fa fac0 	bl	80007d4 <__aeabi_ddiv>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800625c:	f7fa fc16 	bl	8000a8c <__aeabi_dcmpge>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d064      	beq.n	8006330 <tank_startup_init_motor_position+0x2c8>
		valve_cv = q_scf/13.61/p_i/sqrt(1.0/sg/t_r);
 8006266:	a328      	add	r3, pc, #160	; (adr r3, 8006308 <tank_startup_init_motor_position+0x2a0>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006270:	f7fa fab0 	bl	80007d4 <__aeabi_ddiv>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006280:	f7fa faa8 	bl	80007d4 <__aeabi_ddiv>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4b23      	ldr	r3, [pc, #140]	; (800631c <tank_startup_init_motor_position+0x2b4>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	4920      	ldr	r1, [pc, #128]	; (8006318 <tank_startup_init_motor_position+0x2b0>)
 8006298:	f7fa fa9c 	bl	80007d4 <__aeabi_ddiv>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062a8:	f7fa fa94 	bl	80007d4 <__aeabi_ddiv>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	ec43 2b17 	vmov	d7, r2, r3
 80062b4:	eeb0 0a47 	vmov.f32	s0, s14
 80062b8:	eef0 0a67 	vmov.f32	s1, s15
 80062bc:	f007 fd02 	bl	800dcc4 <sqrt>
 80062c0:	ec53 2b10 	vmov	r2, r3, d0
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa fa84 	bl	80007d4 <__aeabi_ddiv>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80062d4:	e070      	b.n	80063b8 <tank_startup_init_motor_position+0x350>
 80062d6:	bf00      	nop
 80062d8:	66666666 	.word	0x66666666
 80062dc:	402d6666 	.word	0x402d6666
 80062e0:	ca8198f2 	.word	0xca8198f2
 80062e4:	3f69f7f8 	.word	0x3f69f7f8
 80062e8:	fe08aefb 	.word	0xfe08aefb
 80062ec:	3f6d92b7 	.word	0x3f6d92b7
 80062f0:	cccccccd 	.word	0xcccccccd
 80062f4:	3ffccccc 	.word	0x3ffccccc
 80062f8:	8f5c28f6 	.word	0x8f5c28f6
 80062fc:	40a08dc2 	.word	0x40a08dc2
 8006300:	cccccccd 	.word	0xcccccccd
 8006304:	3ff4cccc 	.word	0x3ff4cccc
 8006308:	eb851eb8 	.word	0xeb851eb8
 800630c:	402b3851 	.word	0x402b3851
 8006310:	40720000 	.word	0x40720000
 8006314:	200001b0 	.word	0x200001b0
 8006318:	3ff00000 	.word	0x3ff00000
 800631c:	200001b8 	.word	0x200001b8
 8006320:	9abcaf48 	.word	0x9abcaf48
 8006324:	3e7ad7f2 	.word	0x3e7ad7f2
 8006328:	00000000 	.word	0x00000000
 800632c:	4072c000 	.word	0x4072c000
	} else {
		valve_cv = q_scf/16.05/sqrt((pow(p_i,2)-pow(p_o,2))/sg/t_r);
 8006330:	a396      	add	r3, pc, #600	; (adr r3, 800658c <tank_startup_init_motor_position+0x524>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800633a:	f7fa fa4b 	bl	80007d4 <__aeabi_ddiv>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4614      	mov	r4, r2
 8006344:	461d      	mov	r5, r3
 8006346:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8006540 <tank_startup_init_motor_position+0x4d8>
 800634a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800634e:	f007 fc0b 	bl	800db68 <pow>
 8006352:	ec59 8b10 	vmov	r8, r9, d0
 8006356:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8006540 <tank_startup_init_motor_position+0x4d8>
 800635a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800635e:	f007 fc03 	bl	800db68 <pow>
 8006362:	ec53 2b10 	vmov	r2, r3, d0
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7f9 ff51 	bl	8000210 <__aeabi_dsub>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	4b7a      	ldr	r3, [pc, #488]	; (8006560 <tank_startup_init_motor_position+0x4f8>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa fa2a 	bl	80007d4 <__aeabi_ddiv>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800638c:	f7fa fa22 	bl	80007d4 <__aeabi_ddiv>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	ec43 2b17 	vmov	d7, r2, r3
 8006398:	eeb0 0a47 	vmov.f32	s0, s14
 800639c:	eef0 0a67 	vmov.f32	s1, s15
 80063a0:	f007 fc90 	bl	800dcc4 <sqrt>
 80063a4:	ec53 2b10 	vmov	r2, r3, d0
 80063a8:	4620      	mov	r0, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7fa fa12 	bl	80007d4 <__aeabi_ddiv>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 80063b8:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <tank_startup_init_motor_position+0x4fc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fa f887 	bl	80004d0 <__aeabi_f2d>
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8006548 <tank_startup_init_motor_position+0x4e0>
 80063ca:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80063ce:	f007 fbcb 	bl	800db68 <pow>
 80063d2:	ec51 0b10 	vmov	r0, r1, d0
 80063d6:	4b64      	ldr	r3, [pc, #400]	; (8006568 <tank_startup_init_motor_position+0x500>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa f8d0 	bl	8000580 <__aeabi_dmul>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4690      	mov	r8, r2
 80063e6:	4699      	mov	r9, r3
		  c2*pow(valve_cv, 3) +
 80063e8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8006550 <tank_startup_init_motor_position+0x4e8>
 80063ec:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80063f0:	f007 fbba 	bl	800db68 <pow>
 80063f4:	ec51 0b10 	vmov	r0, r1, d0
 80063f8:	4b5c      	ldr	r3, [pc, #368]	; (800656c <tank_startup_init_motor_position+0x504>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa f8bf 	bl	8000580 <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006406:	4640      	mov	r0, r8
 8006408:	4649      	mov	r1, r9
 800640a:	f7f9 ff03 	bl	8000214 <__adddf3>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4690      	mov	r8, r2
 8006414:	4699      	mov	r9, r3
		  c3*pow(valve_cv, 2) +
 8006416:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8006540 <tank_startup_init_motor_position+0x4d8>
 800641a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800641e:	f007 fba3 	bl	800db68 <pow>
 8006422:	ec51 0b10 	vmov	r0, r1, d0
 8006426:	4b52      	ldr	r3, [pc, #328]	; (8006570 <tank_startup_init_motor_position+0x508>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f7fa f8a8 	bl	8000580 <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
		  c2*pow(valve_cv, 3) +
 8006434:	4640      	mov	r0, r8
 8006436:	4649      	mov	r1, r9
 8006438:	f7f9 feec 	bl	8000214 <__adddf3>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4690      	mov	r8, r2
 8006442:	4699      	mov	r9, r3
		  c4*valve_cv);
 8006444:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <tank_startup_init_motor_position+0x50c>)
 8006446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800644e:	f7fa f897 	bl	8000580 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
		  c3*pow(valve_cv, 2) +
 8006456:	4640      	mov	r0, r8
 8006458:	4649      	mov	r1, r9
 800645a:	f7f9 fedb 	bl	8000214 <__adddf3>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f7fa f88b 	bl	8000580 <__aeabi_dmul>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Output limiting
	if (deg < 0) { deg = 0; }
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800647e:	f7fa faf1 	bl	8000a64 <__aeabi_dcmplt>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <tank_startup_init_motor_position+0x42c>
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (deg > 2460) { deg = 2460; }
 8006494:	a330      	add	r3, pc, #192	; (adr r3, 8006558 <tank_startup_init_motor_position+0x4f0>)
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800649e:	f7fa faff 	bl	8000aa0 <__aeabi_dcmpgt>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <tank_startup_init_motor_position+0x44a>
 80064a8:	a32b      	add	r3, pc, #172	; (adr r3, 8006558 <tank_startup_init_motor_position+0x4f0>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	// TODO: where does 2460 come from?

	// TODO: Why is the direction manually set here?
	// can it just be the shortest path?
	if (tank->tank_enable) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d039      	beq.n	8006530 <tank_startup_init_motor_position+0x4c8>
		manual_stepper_pos_override[tank->motor_num] = 1;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <tank_startup_init_motor_position+0x510>)
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]
		targetPos[tank->motor_num] = deg; // position given in deg
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	461c      	mov	r4, r3
 80064ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064d2:	f7fa fb4d 	bl	8000b70 <__aeabi_d2f>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4928      	ldr	r1, [pc, #160]	; (800657c <tank_startup_init_motor_position+0x514>)
 80064da:	00a3      	lsls	r3, r4, #2
 80064dc:	440b      	add	r3, r1
 80064de:	601a      	str	r2, [r3, #0]
		curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1; // CCW facing the motor
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	78db      	ldrb	r3, [r3, #3]
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <tank_startup_init_motor_position+0x518>)
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	ed93 7a00 	vldr	s14, [r3]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	78db      	ldrb	r3, [r3, #3]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <tank_startup_init_motor_position+0x514>)
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	edd3 7a00 	vldr	s15, [r3]
 80064fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	d501      	bpl.n	800650a <tank_startup_init_motor_position+0x4a2>
 8006506:	2101      	movs	r1, #1
 8006508:	e001      	b.n	800650e <tank_startup_init_motor_position+0x4a6>
 800650a:	f04f 31ff 	mov.w	r1, #4294967295
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	78db      	ldrb	r3, [r3, #3]
 8006512:	461a      	mov	r2, r3
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <tank_startup_init_motor_position+0x51c>)
 8006516:	5499      	strb	r1, [r3, r2]
		mtr_set[tank->motor_num] = deg; // save new motor position setpoint
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	461c      	mov	r4, r3
 800651e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006522:	f7fa fb25 	bl	8000b70 <__aeabi_d2f>
 8006526:	4602      	mov	r2, r0
 8006528:	4917      	ldr	r1, [pc, #92]	; (8006588 <tank_startup_init_motor_position+0x520>)
 800652a:	00a3      	lsls	r3, r4, #2
 800652c:	440b      	add	r3, r1
 800652e:	601a      	str	r2, [r3, #0]
	}
}
 8006530:	bf00      	nop
 8006532:	3768      	adds	r7, #104	; 0x68
 8006534:	46bd      	mov	sp, r7
 8006536:	ecbd 8b02 	vpop	{d8}
 800653a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800653e:	bf00      	nop
 8006540:	00000000 	.word	0x00000000
 8006544:	40000000 	.word	0x40000000
 8006548:	00000000 	.word	0x00000000
 800654c:	40100000 	.word	0x40100000
 8006550:	00000000 	.word	0x00000000
 8006554:	40080000 	.word	0x40080000
 8006558:	00000000 	.word	0x00000000
 800655c:	40a33800 	.word	0x40a33800
 8006560:	200001b8 	.word	0x200001b8
 8006564:	200003e8 	.word	0x200003e8
 8006568:	200001c0 	.word	0x200001c0
 800656c:	200001c8 	.word	0x200001c8
 8006570:	200001d0 	.word	0x200001d0
 8006574:	200001d8 	.word	0x200001d8
 8006578:	200004a4 	.word	0x200004a4
 800657c:	200004a8 	.word	0x200004a8
 8006580:	200004b0 	.word	0x200004b0
 8006584:	200004b8 	.word	0x200004b8
 8006588:	20000494 	.word	0x20000494
 800658c:	cccccccd 	.word	0xcccccccd
 8006590:	40300ccc 	.word	0x40300ccc

08006594 <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3303      	adds	r3, #3
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	061a      	lsls	r2, r3, #24
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3302      	adds	r3, #2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4313      	orrs	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	791b      	ldrb	r3, [r3, #4]
 80065c6:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	set_valve_channel(vlv_num, state);
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fdff 	bl	80071d0 <set_valve_channel>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3308      	adds	r3, #8
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	2338      	movs	r3, #56	; 0x38
 80065f6:	409a      	lsls	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3307      	adds	r3, #7
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	2330      	movs	r3, #48	; 0x30
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3306      	adds	r3, #6
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	2328      	movs	r3, #40	; 0x28
 8006612:	fa01 f303 	lsl.w	r3, r1, r3
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3305      	adds	r3, #5
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	2320      	movs	r3, #32
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3303      	adds	r3, #3
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3302      	adds	r3, #2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	4313      	orrs	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	3201      	adds	r2, #1
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7f9 ff2c 	bl	80004ac <__aeabi_i2d>
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <set_kp+0xb8>)
 800665a:	f7fa f8bb 	bl	80007d4 <__aeabi_ddiv>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d80e      	bhi.n	800668a <set_kp+0xae>
		tanks[motor_num].K_p = gain;
 800666c:	7dfc      	ldrb	r4, [r7, #23]
 800666e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006672:	f7fa fa7d 	bl	8000b70 <__aeabi_d2f>
 8006676:	4602      	mov	r2, r0
 8006678:	4907      	ldr	r1, [pc, #28]	; (8006698 <set_kp+0xbc>)
 800667a:	2354      	movs	r3, #84	; 0x54
 800667c:	fb03 f304 	mul.w	r3, r3, r4
 8006680:	440b      	add	r3, r1
 8006682:	3328      	adds	r3, #40	; 0x28
 8006684:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006686:	f7fd f815 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	40590000 	.word	0x40590000
 8006698:	20000688 	.word	0x20000688

0800669c <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3308      	adds	r3, #8
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	2338      	movs	r3, #56	; 0x38
 80066b6:	409a      	lsls	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3307      	adds	r3, #7
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	2330      	movs	r3, #48	; 0x30
 80066c2:	fa01 f303 	lsl.w	r3, r1, r3
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3306      	adds	r3, #6
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	2328      	movs	r3, #40	; 0x28
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3305      	adds	r3, #5
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	2320      	movs	r3, #32
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3303      	adds	r3, #3
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3302      	adds	r3, #2
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	4313      	orrs	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	3201      	adds	r2, #1
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f7f9 fecc 	bl	80004ac <__aeabi_i2d>
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <set_ki+0xb8>)
 800671a:	f7fa f85b 	bl	80007d4 <__aeabi_ddiv>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d80e      	bhi.n	800674a <set_ki+0xae>
		tanks[motor_num].K_i = gain;
 800672c:	7dfc      	ldrb	r4, [r7, #23]
 800672e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006732:	f7fa fa1d 	bl	8000b70 <__aeabi_d2f>
 8006736:	4602      	mov	r2, r0
 8006738:	4907      	ldr	r1, [pc, #28]	; (8006758 <set_ki+0xbc>)
 800673a:	2354      	movs	r3, #84	; 0x54
 800673c:	fb03 f304 	mul.w	r3, r3, r4
 8006740:	440b      	add	r3, r1
 8006742:	332c      	adds	r3, #44	; 0x2c
 8006744:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006746:	f7fc ffb5 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	bf00      	nop
 8006754:	40590000 	.word	0x40590000
 8006758:	20000688 	.word	0x20000688

0800675c <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3308      	adds	r3, #8
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	2338      	movs	r3, #56	; 0x38
 8006776:	409a      	lsls	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3307      	adds	r3, #7
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	4619      	mov	r1, r3
 8006780:	2330      	movs	r3, #48	; 0x30
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3306      	adds	r3, #6
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	4619      	mov	r1, r3
 8006790:	2328      	movs	r3, #40	; 0x28
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3305      	adds	r3, #5
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	2320      	movs	r3, #32
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3303      	adds	r3, #3
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3302      	adds	r3, #2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	4313      	orrs	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	3201      	adds	r2, #1
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7f9 fe6c 	bl	80004ac <__aeabi_i2d>
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <set_kd+0xb8>)
 80067da:	f7f9 fffb 	bl	80007d4 <__aeabi_ddiv>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d80e      	bhi.n	800680a <set_kd+0xae>
		tanks[motor_num].K_d = gain;
 80067ec:	7dfc      	ldrb	r4, [r7, #23]
 80067ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067f2:	f7fa f9bd 	bl	8000b70 <__aeabi_d2f>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4907      	ldr	r1, [pc, #28]	; (8006818 <set_kd+0xbc>)
 80067fa:	2354      	movs	r3, #84	; 0x54
 80067fc:	fb03 f304 	mul.w	r3, r3, r4
 8006800:	440b      	add	r3, r1
 8006802:	3330      	adds	r3, #48	; 0x30
 8006804:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006806:	f7fc ff55 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd90      	pop	{r4, r7, pc}
 8006812:	bf00      	nop
 8006814:	40590000 	.word	0x40590000
 8006818:	20000688 	.word	0x20000688

0800681c <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fa fbd2 	bl	8000fd8 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 8006846:	f7fe fecf 	bl	80055e8 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 800685e:	4803      	ldr	r0, [pc, #12]	; (800686c <wipe_flash+0x18>)
 8006860:	f002 fa55 	bl	8008d0e <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20002290 	.word	0x20002290

08006870 <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <start_logging+0x28>)
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 8006880:	2201      	movs	r2, #1
 8006882:	2101      	movs	r1, #1
 8006884:	4805      	ldr	r0, [pc, #20]	; (800689c <start_logging+0x2c>)
 8006886:	f003 fa2f 	bl	8009ce8 <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 800688a:	4805      	ldr	r0, [pc, #20]	; (80068a0 <start_logging+0x30>)
 800688c:	f002 fadc 	bl	8008e48 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	200003f8 	.word	0x200003f8
 800689c:	40020800 	.word	0x40020800
 80068a0:	20002290 	.word	0x20002290

080068a4 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 80068ae:	4b07      	ldr	r3, [pc, #28]	; (80068cc <stop_logging+0x28>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 80068b4:	4806      	ldr	r0, [pc, #24]	; (80068d0 <stop_logging+0x2c>)
 80068b6:	f002 f9b7 	bl	8008c28 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 80068ba:	2200      	movs	r2, #0
 80068bc:	2102      	movs	r1, #2
 80068be:	4805      	ldr	r0, [pc, #20]	; (80068d4 <stop_logging+0x30>)
 80068c0:	f003 fa12 	bl	8009ce8 <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200003f8 	.word	0x200003f8
 80068d0:	20002290 	.word	0x20002290
 80068d4:	40020800 	.word	0x40020800

080068d8 <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	061a      	lsls	r2, r3, #24
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3303      	adds	r3, #3
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3302      	adds	r3, #2
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	4313      	orrs	r3, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	3201      	adds	r2, #1
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	4313      	orrs	r3, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fdcd 	bl	80004ac <__aeabi_i2d>
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <set_stepper_pos+0xb4>)
 8006918:	f7f9 ff5c 	bl	80007d4 <__aeabi_ddiv>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	f7fa f924 	bl	8000b70 <__aeabi_d2f>
 8006928:	4603      	mov	r3, r0
 800692a:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d827      	bhi.n	8006982 <set_stepper_pos+0xaa>
		manual_stepper_pos_override[motor_num] = 1;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	4a16      	ldr	r2, [pc, #88]	; (8006990 <set_stepper_pos+0xb8>)
 8006936:	2101      	movs	r1, #1
 8006938:	54d1      	strb	r1, [r2, r3]
		targetPos[motor_num] = position; // position converted form deg to steps
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	4a15      	ldr	r2, [pc, #84]	; (8006994 <set_stepper_pos+0xbc>)
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	601a      	str	r2, [r3, #0]
		curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <set_stepper_pos+0xc0>)
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	ed93 7a00 	vldr	s14, [r3]
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <set_stepper_pos+0xbc>)
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	d501      	bpl.n	800696c <set_stepper_pos+0x94>
 8006968:	2101      	movs	r1, #1
 800696a:	e001      	b.n	8006970 <set_stepper_pos+0x98>
 800696c:	f04f 31ff 	mov.w	r1, #4294967295
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	4a0a      	ldr	r2, [pc, #40]	; (800699c <set_stepper_pos+0xc4>)
 8006974:	54d1      	strb	r1, [r2, r3]
		mtr_set[motor_num] = position; // save new motor position setpoint
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <set_stepper_pos+0xc8>)
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	601a      	str	r2, [r3, #0]
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40590000 	.word	0x40590000
 8006990:	200004a4 	.word	0x200004a4
 8006994:	200004a8 	.word	0x200004a8
 8006998:	200004b0 	.word	0x200004b0
 800699c:	200004b8 	.word	0x200004b8
 80069a0:	20000494 	.word	0x20000494

080069a4 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d80d      	bhi.n	80069d6 <set_stepper_zero+0x32>
	    mtr_pos[motor_num] = 0;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <set_stepper_zero+0x40>)
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
	    curPos[motor_num] = 0;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <set_stepper_zero+0x44>)
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
		//L6470_zero_motor(&(tanks[motor_num].motor));
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000470 	.word	0x20000470
 80069e8:	200004b0 	.word	0x200004b0

080069ec <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	061a      	lsls	r2, r3, #24
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3303      	adds	r3, #3
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3302      	adds	r3, #2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	4313      	orrs	r3, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7f9 fd43 	bl	80004ac <__aeabi_i2d>
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <set_control_target_pressure+0x78>)
 8006a2c:	f7f9 fed2 	bl	80007d4 <__aeabi_ddiv>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	f7fa f89a 	bl	8000b70 <__aeabi_d2f>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d80a      	bhi.n	8006a5c <set_control_target_pressure+0x70>
		tanks[tank_num].target_pres = target_pressure;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <set_control_target_pressure+0x7c>)
 8006a4a:	2154      	movs	r1, #84	; 0x54
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	4413      	add	r3, r2
 8006a52:	3310      	adds	r3, #16
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006a58:	f7fc fe2c 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	408f4000 	.word	0x408f4000
 8006a68:	20000688 	.word	0x20000688

08006a6c <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
 8006a7a:	e016      	b.n	8006aaa <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <ambientize_pressure_transducers+0x50>)
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	ed93 7a00 	vldr	s14, [r3]
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <ambientize_pressure_transducers+0x54>)
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	edd3 7a00 	vldr	s15, [r3]
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a9a:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <ambientize_pressure_transducers+0x54>)
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	73fb      	strb	r3, [r7, #15]
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b13      	cmp	r3, #19
 8006aae:	d9e5      	bls.n	8006a7c <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 8006ab0:	f7fc fe00 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200003fc 	.word	0x200003fc
 8006ac0:	2000026c 	.word	0x2000026c

08006ac4 <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	061a      	lsls	r2, r3, #24
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3303      	adds	r3, #3
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3302      	adds	r3, #2
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	4313      	orrs	r3, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	3201      	adds	r2, #1
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7f9 fcd7 	bl	80004ac <__aeabi_i2d>
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <set_low_toggle_percent+0x94>)
 8006b04:	f7f9 fe66 	bl	80007d4 <__aeabi_ddiv>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f7fa f82e 	bl	8000b70 <__aeabi_d2f>
 8006b14:	4603      	mov	r3, r0
 8006b16:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d817      	bhi.n	8006b4e <set_low_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <set_low_toggle_percent+0x98>)
 8006b22:	2154      	movs	r1, #84	; 0x54
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	3310      	adds	r3, #16
 8006b2c:	ed93 7a00 	vldr	s14, [r3]
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
				* lower_threshold_pct;
 8006b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b36:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 8006b3a:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <set_low_toggle_percent+0x98>)
 8006b3c:	2154      	movs	r1, #84	; 0x54
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	331c      	adds	r3, #28
 8006b46:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8006b4a:	f7fc fdb3 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	408f4000 	.word	0x408f4000
 8006b5c:	20000688 	.word	0x20000688

08006b60 <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	061a      	lsls	r2, r3, #24
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3303      	adds	r3, #3
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3302      	adds	r3, #2
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	3201      	adds	r2, #1
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fc89 	bl	80004ac <__aeabi_i2d>
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <set_high_toggle_percent+0x94>)
 8006ba0:	f7f9 fe18 	bl	80007d4 <__aeabi_ddiv>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f7f9 ffe0 	bl	8000b70 <__aeabi_d2f>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d817      	bhi.n	8006bea <set_high_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	4a0e      	ldr	r2, [pc, #56]	; (8006bf8 <set_high_toggle_percent+0x98>)
 8006bbe:	2154      	movs	r1, #84	; 0x54
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	ed93 7a00 	vldr	s14, [r3]
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
				* upper_threshold_pct;
 8006bce:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <set_high_toggle_percent+0x98>)
 8006bd8:	2154      	movs	r1, #84	; 0x54
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	3320      	adds	r3, #32
 8006be2:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8006be6:	f7fc fd65 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	408f4000 	.word	0x408f4000
 8006bf8:	20000688 	.word	0x20000688

08006bfc <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	telem_disabled = state;
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <set_telem+0x24>)
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	7013      	strb	r3, [r2, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000687 	.word	0x20000687

08006c24 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d809      	bhi.n	8006c54 <set_presstank_status+0x30>
		tanks[tank_num].tank_enable = state;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <set_presstank_status+0x38>)
 8006c44:	2154      	movs	r1, #84	; 0x54
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	7bba      	ldrb	r2, [r7, #14]
 8006c4e:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 8006c50:	f7fc fd30 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000688 	.word	0x20000688

08006c60 <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pot_num < NUM_POTS) {
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d815      	bhi.n	8006ca2 <ambientize_pot+0x42>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[pot_num] = -epot[pot_num]+pot_ambients[pot_num];
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	4a0c      	ldr	r2, [pc, #48]	; (8006cac <ambientize_pot+0x4c>)
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	ed93 7a00 	vldr	s14, [r3]
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <ambientize_pot+0x50>)
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	edd3 7a00 	vldr	s15, [r3]
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c94:	4a05      	ldr	r2, [pc, #20]	; (8006cac <ambientize_pot+0x4c>)
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8006c9e:	f7fc fd09 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200002bc 	.word	0x200002bc
 8006cb0:	2000049c 	.word	0x2000049c

08006cb4 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d827      	bhi.n	8006d20 <led_write+0x6c>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <led_write+0x24>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf7 	.word	0x08006cf7
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d13 	.word	0x08006d13
	case 0:
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state);
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	461a      	mov	r2, r3
 8006cec:	2101      	movs	r1, #1
 8006cee:	480f      	ldr	r0, [pc, #60]	; (8006d2c <led_write+0x78>)
 8006cf0:	f002 fffa 	bl	8009ce8 <HAL_GPIO_WritePin>
		break;
 8006cf4:	e015      	b.n	8006d22 <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	480b      	ldr	r0, [pc, #44]	; (8006d2c <led_write+0x78>)
 8006cfe:	f002 fff3 	bl	8009ce8 <HAL_GPIO_WritePin>
		break;
 8006d02:	e00e      	b.n	8006d22 <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	461a      	mov	r2, r3
 8006d08:	2104      	movs	r1, #4
 8006d0a:	4808      	ldr	r0, [pc, #32]	; (8006d2c <led_write+0x78>)
 8006d0c:	f002 ffec 	bl	8009ce8 <HAL_GPIO_WritePin>
		break;
 8006d10:	e007      	b.n	8006d22 <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	461a      	mov	r2, r3
 8006d16:	2108      	movs	r1, #8
 8006d18:	4804      	ldr	r0, [pc, #16]	; (8006d2c <led_write+0x78>)
 8006d1a:	f002 ffe5 	bl	8009ce8 <HAL_GPIO_WritePin>
		break;
 8006d1e:	e000      	b.n	8006d22 <led_write+0x6e>
	default:
		break;
 8006d20:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40020800 	.word	0x40020800

08006d30 <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3303      	adds	r3, #3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	061a      	lsls	r2, r3, #24
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3302      	adds	r3, #2
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4313      	orrs	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	7812      	ldrb	r2, [r2, #0]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <set_system_clock+0x44>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000ca8 	.word	0x20000ca8

08006d78 <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
 8006d86:	e009      	b.n	8006d9c <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <remove_pressure_ambients+0x38>)
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b13      	cmp	r3, #19
 8006da0:	d9f2      	bls.n	8006d88 <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 8006da2:	f7fc fc87 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	2000026c 	.word	0x2000026c

08006db4 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_delay_ms = mpv_delay_ms;
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <set_fuel_mpv_on_delay+0x24>)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	7213      	strb	r3, [r2, #8]
	save_nonvolatile_variables();
 8006dca:	f7fc fc73 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000730 	.word	0x20000730

08006ddc <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3303      	adds	r3, #3
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	061a      	lsls	r2, r3, #24
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3302      	adds	r3, #2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	4313      	orrs	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	7812      	ldrb	r2, [r2, #0]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_test_duration_ms = engine_test_duration_ms;
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <set_engine_test_duration+0x40>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6153      	str	r3, [r2, #20]
	save_nonvolatile_variables();
 8006e10:	f7fc fc50 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000730 	.word	0x20000730

08006e20 <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	b21a      	sxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 8006e40:	4a04      	ldr	r2, [pc, #16]	; (8006e54 <set_pid_start_delay+0x34>)
 8006e42:	89fb      	ldrh	r3, [r7, #14]
 8006e44:	8193      	strh	r3, [r2, #12]
	save_nonvolatile_variables();
 8006e46:	f7fc fc35 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000730 	.word	0x20000730

08006e58 <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3301      	adds	r3, #1
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	b21a      	sxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 8006e78:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <set_ignitor_on_delay+0x34>)
 8006e7a:	89fb      	ldrh	r3, [r7, #14]
 8006e7c:	8093      	strh	r3, [r2, #4]
	save_nonvolatile_variables();
 8006e7e:	f7fc fc19 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000730 	.word	0x20000730

08006e90 <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	b21a      	sxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b21b      	sxth	r3, r3
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b21b      	sxth	r3, r3
 8006eae:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <set_ignitor_high_duration+0x34>)
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 8006eb6:	f7fc fbfd 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000730 	.word	0x20000730

08006ec8 <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	b21a      	sxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b21b      	sxth	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b21b      	sxth	r3, r3
 8006ee6:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 8006ee8:	4a04      	ldr	r2, [pc, #16]	; (8006efc <set_film_cooling_on_delay+0x34>)
 8006eea:	89fb      	ldrh	r3, [r7, #14]
 8006eec:	8153      	strh	r3, [r2, #10]
	save_nonvolatile_variables();
 8006eee:	f7fc fbe1 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000730 	.word	0x20000730

08006f00 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3307      	adds	r3, #7
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	2338      	movs	r3, #56	; 0x38
 8006f14:	409a      	lsls	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3306      	adds	r3, #6
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	2330      	movs	r3, #48	; 0x30
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3305      	adds	r3, #5
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	2328      	movs	r3, #40	; 0x28
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	2320      	movs	r3, #32
 8006f40:	fa01 f303 	lsl.w	r3, r1, r3
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3303      	adds	r3, #3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	061b      	lsls	r3, r3, #24
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3302      	adds	r3, #2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	4313      	orrs	r3, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 fa9e 	bl	80004ac <__aeabi_i2d>
 8006f70:	a30c      	add	r3, pc, #48	; (adr r3, 8006fa4 <set_init_motor_deg_factor+0xa4>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fc2d 	bl	80007d4 <__aeabi_ddiv>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 8006f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f86:	f7f9 fdf3 	bl	8000b70 <__aeabi_d2f>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <set_init_motor_deg_factor+0xa0>)
 8006f8e:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 8006f90:	f7fc fb90 	bl	80036b4 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	f3af 8000 	nop.w
 8006fa0:	200003e8 	.word	0x200003e8
 8006fa4:	00000000 	.word	0x00000000
 8006fa8:	40c38800 	.word	0x40c38800

08006fac <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <clear_status_flags+0x1c>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200003d8 	.word	0x200003d8

08006fcc <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
	...

08007010 <set_pt_lower_voltage>:

void set_pt_lower_voltage(uint8_t* data, uint8_t* status){
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	73fb      	strb	r3, [r7, #15]
	float lower_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3304      	adds	r3, #4
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	061a      	lsls	r2, r3, #24
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3303      	adds	r3, #3
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3302      	adds	r3, #2
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	4313      	orrs	r3, r2
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	3201      	adds	r2, #1
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	4313      	orrs	r3, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f7f9 fa31 	bl	80004ac <__aeabi_i2d>
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <set_pt_lower_voltage+0x74>)
 8007050:	f7f9 fbc0 	bl	80007d4 <__aeabi_ddiv>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4610      	mov	r0, r2
 800705a:	4619      	mov	r1, r3
 800705c:	f7f9 fd88 	bl	8000b70 <__aeabi_d2f>
 8007060:	4603      	mov	r3, r0
 8007062:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b13      	cmp	r3, #19
 8007068:	d807      	bhi.n	800707a <set_pt_lower_voltage+0x6a>
		pt_cal_lower_voltage[pt_num] = lower_voltage;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	4a06      	ldr	r2, [pc, #24]	; (8007088 <set_pt_lower_voltage+0x78>)
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007076:	f7fc fb1d 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40240000 	.word	0x40240000
 8007088:	200002c4 	.word	0x200002c4

0800708c <set_pt_upper_voltage>:

void set_pt_upper_voltage(uint8_t* data, uint8_t* status){
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	73fb      	strb	r3, [r7, #15]
	float upper_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	061a      	lsls	r2, r3, #24
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3303      	adds	r3, #3
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	041b      	lsls	r3, r3, #16
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3302      	adds	r3, #2
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	4313      	orrs	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	3201      	adds	r2, #1
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	4313      	orrs	r3, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7f9 f9f3 	bl	80004ac <__aeabi_i2d>
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <set_pt_upper_voltage+0x74>)
 80070cc:	f7f9 fb82 	bl	80007d4 <__aeabi_ddiv>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7f9 fd4a 	bl	8000b70 <__aeabi_d2f>
 80070dc:	4603      	mov	r3, r0
 80070de:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b13      	cmp	r3, #19
 80070e4:	d807      	bhi.n	80070f6 <set_pt_upper_voltage+0x6a>
		pt_cal_upper_voltage[pt_num] = upper_voltage;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	4a06      	ldr	r2, [pc, #24]	; (8007104 <set_pt_upper_voltage+0x78>)
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80070f2:	f7fc fadf 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40240000 	.word	0x40240000
 8007104:	20000314 	.word	0x20000314

08007108 <set_pt_upper_pressure>:

void set_pt_upper_pressure(uint8_t* data, uint8_t* status){
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	73fb      	strb	r3, [r7, #15]
	float pressure_range = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1.0;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	061a      	lsls	r2, r3, #24
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3303      	adds	r3, #3
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3302      	adds	r3, #2
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	4313      	orrs	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	3201      	adds	r2, #1
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	4313      	orrs	r3, r2
 800713c:	4618      	mov	r0, r3
 800713e:	f7f9 f9b5 	bl	80004ac <__aeabi_i2d>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 fd11 	bl	8000b70 <__aeabi_d2f>
 800714e:	4603      	mov	r3, r0
 8007150:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	2b13      	cmp	r3, #19
 8007156:	d807      	bhi.n	8007168 <set_pt_upper_pressure+0x60>
		pt_cal_upper_pressure[pt_num] = pressure_range;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	4a05      	ldr	r2, [pc, #20]	; (8007170 <set_pt_upper_pressure+0x68>)
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007164:	f7fc faa6 	bl	80036b4 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000364 	.word	0x20000364

08007174 <refresh_calibrations>:

void refresh_calibrations(uint8_t* data, uint8_t* status){
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	send_calibration_data();
 800717e:	f7fe fa75 	bl	800566c <send_calibration_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <send_gse_vlv_cmd>:

void send_gse_vlv_cmd(uint8_t* data, uint8_t* status){
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3303      	adds	r3, #3
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	061a      	lsls	r2, r3, #24
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3302      	adds	r3, #2
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3301      	adds	r3, #1
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	791b      	ldrb	r3, [r3, #4]
 80071bc:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	send_gse_set_vlv_cmd(vlv_num, state);
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	4619      	mov	r1, r3
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7fa f952 	bl	800146c <send_gse_set_vlv_cmd>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <set_valve_channel>:
		en_vlv12_Pin,
		en_vlv13_Pin
};
*/

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
    valve_states |= vlv_value;  // Set the new valve state
    */

	// Press board
	setValve(vlv_num, vlv_state);
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fa fdad 	bl	8001d40 <setValve>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80071f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80071f4:	480d      	ldr	r0, [pc, #52]	; (800722c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80071f6:	490e      	ldr	r1, [pc, #56]	; (8007230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80071f8:	4a0e      	ldr	r2, [pc, #56]	; (8007234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80071fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80071fc:	e002      	b.n	8007204 <LoopCopyDataInit>

080071fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007202:	3304      	adds	r3, #4

08007204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007208:	d3f9      	bcc.n	80071fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800720a:	4a0b      	ldr	r2, [pc, #44]	; (8007238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800720c:	4c0b      	ldr	r4, [pc, #44]	; (800723c <LoopFillZerobss+0x26>)
  movs r3, #0
 800720e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007210:	e001      	b.n	8007216 <LoopFillZerobss>

08007212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007214:	3204      	adds	r2, #4

08007216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007218:	d3fb      	bcc.n	8007212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800721a:	f7fe fd7f 	bl	8005d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800721e:	f006 fb65 	bl	800d8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007222:	f7fb f9ab 	bl	800257c <main>
  bx  lr    
 8007226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800722c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007230:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8007234:	0800f020 	.word	0x0800f020
  ldr r2, =_sbss
 8007238:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800723c:	200024ac 	.word	0x200024ac

08007240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007240:	e7fe      	b.n	8007240 <ADC_IRQHandler>

08007242 <init_adc>:
 */
static inline void package_cmd(uint16_t cmd, uint8_t *tx);

/*-------------------------Public Interface Functions-------------------------*/

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
     *      7. Select the right SWCNV bit
     *
     *
     */
    // Configure settings for all ADCs
    uint8_t tx[2] = {0, 0};
 800724c:	2300      	movs	r3, #0
 800724e:	813b      	strh	r3, [r7, #8]

    // 	note: these types are taken from the GPIO_TypeDef line 486
    //          in file stm32f446x.h

    // Generate adc config data
    uint16_t ADC_CONFIG_REG	   = MAX11131_CONFIG|SET_MAX11131_AVGON;
 8007250:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8007254:	81fb      	strh	r3, [r7, #14]
    uint16_t ADC_MODE_CNTL_REG = MAX11131_MODE_CNTL|(CUSTOM_INT<<11);
 8007256:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800725a:	81bb      	strh	r3, [r7, #12]

    configure_read_adc_all(pinfo);
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f000 f91e 	bl	800749e <configure_read_adc_all>
    set_read_adc_range(SPI_BUS, pinfo);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f8a7 	bl	80073b8 <set_read_adc_range>

    package_cmd(ADC_CONFIG_REG, tx);
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	89fb      	ldrh	r3, [r7, #14]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f944 	bl	8007500 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007278:	b672      	cpsid	i
}
 800727a:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 800727c:	2100      	movs	r1, #0
 800727e:	6838      	ldr	r0, [r7, #0]
 8007280:	f000 f955 	bl	800752e <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007284:	f107 0108 	add.w	r1, r7, #8
 8007288:	2301      	movs	r3, #1
 800728a:	2202      	movs	r2, #2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f003 fba2 	bl	800a9d6 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007292:	2101      	movs	r1, #1
 8007294:	6838      	ldr	r0, [r7, #0]
 8007296:	f000 f94a 	bl	800752e <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 800729a:	b662      	cpsie	i
}
 800729c:	bf00      	nop
    __enable_irq();

    package_cmd(ADC_MODE_CNTL_REG, tx);
 800729e:	f107 0208 	add.w	r2, r7, #8
 80072a2:	89bb      	ldrh	r3, [r7, #12]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f92a 	bl	8007500 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 80072ac:	b672      	cpsid	i
}
 80072ae:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 80072b0:	2100      	movs	r1, #0
 80072b2:	6838      	ldr	r0, [r7, #0]
 80072b4:	f000 f93b 	bl	800752e <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 80072b8:	f107 0108 	add.w	r1, r7, #8
 80072bc:	2301      	movs	r3, #1
 80072be:	2202      	movs	r2, #2
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f003 fb88 	bl	800a9d6 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 80072c6:	2101      	movs	r1, #1
 80072c8:	6838      	ldr	r0, [r7, #0]
 80072ca:	f000 f930 	bl	800752e <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 80072ce:	b662      	cpsie	i
}
 80072d0:	bf00      	nop
    __enable_irq();
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo,
                                                uint16_t *adc_out) {
 80072da:	b580      	push	{r7, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
            not complete within the maximum acquistion time, we terminate
            early to avoid an infinite loop
    */
    /* ADC startup and FIFO register intialization */

    set_adc(pinfo, GPIO_PIN_SET);
 80072e6:	2101      	movs	r1, #1
 80072e8:	68b8      	ldr	r0, [r7, #8]
 80072ea:	f000 f920 	bl	800752e <set_adc>
    cycle_cnvst(pinfo);
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f000 f92f 	bl	8007552 <cycle_cnvst>
    
    uint16_t elapsed_cycles = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 80072f8:	e005      	b.n	8007306 <read_adc+0x2c>
                            pinfo->MAX11131_EOC_ADDR)) {
        if (elapsed_cycles > MAX11131_EOC_WAIT_TIME) {
 80072fa:	8bfb      	ldrh	r3, [r7, #30]
 80072fc:	2b14      	cmp	r3, #20
 80072fe:	d80e      	bhi.n	800731e <read_adc+0x44>
            break;
        }
        ++elapsed_cycles;
 8007300:	8bfb      	ldrh	r3, [r7, #30]
 8007302:	3301      	adds	r3, #1
 8007304:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	89db      	ldrh	r3, [r3, #14]
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f002 fcd1 	bl	8009cb8 <HAL_GPIO_ReadPin>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1ee      	bne.n	80072fa <read_adc+0x20>
 800731c:	e000      	b.n	8007320 <read_adc+0x46>
            break;
 800731e:	bf00      	nop

    /* Serial communications with ADC */

    // The number of bytes in the FIFO is simply the
    // number of channels * 2 (bytes for each channel)
    uint8_t rx[2] = {0};
 8007320:	2300      	movs	r3, #0
 8007322:	82bb      	strh	r3, [r7, #20]
    uint8_t tx[2] = {0};
 8007324:	2300      	movs	r3, #0
 8007326:	823b      	strh	r3, [r7, #16]
    uint16_t adc_counts = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	837b      	strh	r3, [r7, #26]
    uint16_t channelId  = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007330:	2300      	movs	r3, #0
 8007332:	777b      	strb	r3, [r7, #29]
 8007334:	e036      	b.n	80073a4 <read_adc+0xca>
        rx[0] = rx[1] = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	757b      	strb	r3, [r7, #21]
 800733a:	7d7b      	ldrb	r3, [r7, #21]
 800733c:	753b      	strb	r3, [r7, #20]
        tx[0] = tx[1] = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	747b      	strb	r3, [r7, #17]
 8007342:	7c7b      	ldrb	r3, [r7, #17]
 8007344:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007346:	b672      	cpsid	i
}
 8007348:	bf00      	nop
        __disable_irq();
        set_adc(pinfo, GPIO_PIN_RESET);
 800734a:	2100      	movs	r1, #0
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f000 f8ee 	bl	800752e <set_adc>
        write_adc_reg(SPI_BUS, tx, rx);
 8007352:	f107 0214 	add.w	r2, r7, #20
 8007356:	f107 0310 	add.w	r3, r7, #16
 800735a:	4619      	mov	r1, r3
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f8bd 	bl	80074dc <write_adc_reg>
        set_adc(pinfo, GPIO_PIN_SET);
 8007362:	2101      	movs	r1, #1
 8007364:	68b8      	ldr	r0, [r7, #8]
 8007366:	f000 f8e2 	bl	800752e <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 800736a:	b662      	cpsie	i
}
 800736c:	bf00      	nop
        __enable_irq();

        adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 800736e:	7d3b      	ldrb	r3, [r7, #20]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	b21a      	sxth	r2, r3
 8007374:	7d7b      	ldrb	r3, [r7, #21]
 8007376:	b21b      	sxth	r3, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	b21b      	sxth	r3, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007382:	837b      	strh	r3, [r7, #26]
        channelId = (rx[0] >> 4) & 0x0F;
 8007384:	7d3b      	ldrb	r3, [r7, #20]
 8007386:	091b      	lsrs	r3, r3, #4
 8007388:	b2db      	uxtb	r3, r3
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	833b      	strh	r3, [r7, #24]
        adc_out[channelId] = adc_counts;
 8007392:	8b3b      	ldrh	r3, [r7, #24]
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	8b7a      	ldrh	r2, [r7, #26]
 800739c:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 800739e:	7f7b      	ldrb	r3, [r7, #29]
 80073a0:	3301      	adds	r3, #1
 80073a2:	777b      	strb	r3, [r7, #29]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	7c9b      	ldrb	r3, [r3, #18]
 80073a8:	7f7a      	ldrb	r2, [r7, #29]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d3c3      	bcc.n	8007336 <read_adc+0x5c>
    }

}
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
     5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
     6. Set SWCNV bit to 1 to enable conversions with chip select
     */
    uint8_t tx[2];

    uint16_t SET_SCAN_REGISTER_0 = MAX11131_CUSTOM_SCAN0;
 80073c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80073c6:	82fb      	strh	r3, [r7, #22]
    uint16_t SET_SCAN_REGISTER_1 = MAX11131_CUSTOM_SCAN1;
 80073c8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80073cc:	82bb      	strh	r3, [r7, #20]
    uint8_t num_channels		= pinfo->NUM_CHANNELS;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	7c9b      	ldrb	r3, [r3, #18]
 80073d2:	74bb      	strb	r3, [r7, #18]

    for (uint8_t i = 0; i < num_channels; ++i) {
 80073d4:	2300      	movs	r3, #0
 80073d6:	74fb      	strb	r3, [r7, #19]
 80073d8:	e025      	b.n	8007426 <set_read_adc_range+0x6e>
        uint8_t ch = pinfo->MAX11131_CHANNELS[i];
 80073da:	7cfb      	ldrb	r3, [r7, #19]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	4413      	add	r3, r2
 80073e0:	7cdb      	ldrb	r3, [r3, #19]
 80073e2:	747b      	strb	r3, [r7, #17]
        if (ch > 7) {
 80073e4:	7c7b      	ldrb	r3, [r7, #17]
 80073e6:	2b07      	cmp	r3, #7
 80073e8:	d90d      	bls.n	8007406 <set_read_adc_range+0x4e>
            ch -= MAX11131_CUSTOM_SCAN0_SUB;
 80073ea:	7c7b      	ldrb	r3, [r7, #17]
 80073ec:	3b05      	subs	r3, #5
 80073ee:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 80073f0:	7c7b      	ldrb	r3, [r7, #17]
 80073f2:	2201      	movs	r2, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	b21a      	sxth	r2, r3
 80073fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073fe:	4313      	orrs	r3, r2
 8007400:	b21b      	sxth	r3, r3
 8007402:	82fb      	strh	r3, [r7, #22]
 8007404:	e00c      	b.n	8007420 <set_read_adc_range+0x68>
        } else {
            ch += MAX11131_CUSTOM_SCAN1_ADD;
 8007406:	7c7b      	ldrb	r3, [r7, #17]
 8007408:	3303      	adds	r3, #3
 800740a:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 800740c:	7c7b      	ldrb	r3, [r7, #17]
 800740e:	2201      	movs	r2, #1
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	b21a      	sxth	r2, r3
 8007416:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	b21b      	sxth	r3, r3
 800741e:	82bb      	strh	r3, [r7, #20]
    for (uint8_t i = 0; i < num_channels; ++i) {
 8007420:	7cfb      	ldrb	r3, [r7, #19]
 8007422:	3301      	adds	r3, #1
 8007424:	74fb      	strb	r3, [r7, #19]
 8007426:	7cfa      	ldrb	r2, [r7, #19]
 8007428:	7cbb      	ldrb	r3, [r7, #18]
 800742a:	429a      	cmp	r2, r3
 800742c:	d3d5      	bcc.n	80073da <set_read_adc_range+0x22>
    }

    /* Set ADC to custom scan channel range */

    /* Transmit custom channels to send data from */
    package_cmd(SET_SCAN_REGISTER_0, tx);
 800742e:	f107 020c 	add.w	r2, r7, #12
 8007432:	8afb      	ldrh	r3, [r7, #22]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f862 	bl	8007500 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 800743c:	b672      	cpsid	i
}
 800743e:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007440:	2100      	movs	r1, #0
 8007442:	6838      	ldr	r0, [r7, #0]
 8007444:	f000 f873 	bl	800752e <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007448:	f107 010c 	add.w	r1, r7, #12
 800744c:	2301      	movs	r3, #1
 800744e:	2202      	movs	r2, #2
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f003 fac0 	bl	800a9d6 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007456:	2101      	movs	r1, #1
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f000 f868 	bl	800752e <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 800745e:	b662      	cpsie	i
}
 8007460:	bf00      	nop
    __enable_irq();

    package_cmd(SET_SCAN_REGISTER_1, tx);
 8007462:	f107 020c 	add.w	r2, r7, #12
 8007466:	8abb      	ldrh	r3, [r7, #20]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f848 	bl	8007500 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007470:	b672      	cpsid	i
}
 8007472:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007474:	2100      	movs	r1, #0
 8007476:	6838      	ldr	r0, [r7, #0]
 8007478:	f000 f859 	bl	800752e <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 800747c:	f107 010c 	add.w	r1, r7, #12
 8007480:	2301      	movs	r3, #1
 8007482:	2202      	movs	r2, #2
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f003 faa6 	bl	800a9d6 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 800748a:	2101      	movs	r1, #1
 800748c:	6838      	ldr	r0, [r7, #0]
 800748e:	f000 f84e 	bl	800752e <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007492:	b662      	cpsie	i
}
 8007494:	bf00      	nop
    __enable_irq();
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <configure_read_adc_all>:

void configure_read_adc_all(GPIO_MAX11131_Pinfo *pinfo) {
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
    // Convenience function for reading all channels on adc
    pinfo->NUM_CHANNELS = MAX11131_MAX_CHANNELS;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220f      	movs	r2, #15
 80074aa:	749a      	strb	r2, [r3, #18]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e007      	b.n	80074c2 <configure_read_adc_all+0x24>
        pinfo->MAX11131_CHANNELS[i] = i;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4413      	add	r3, r2
 80074b8:	7bfa      	ldrb	r2, [r7, #15]
 80074ba:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	3301      	adds	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b0e      	cmp	r3, #14
 80074c6:	d9f4      	bls.n	80074b2 <configure_read_adc_all+0x14>
    }
    pinfo->MAX11131_CHANNELS[14] = 15;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220f      	movs	r2, #15
 80074cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80074d0:	bf00      	nop
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <write_adc_reg>:

static inline void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
    if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
 80074e8:	2301      	movs	r3, #1
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	2302      	movs	r3, #2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f003 fcbc 	bl	800ae70 <HAL_SPI_TransmitReceive>
    }
}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <package_cmd>:


static inline void package_cmd(uint16_t cmd, uint8_t *tx) {
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	80fb      	strh	r3, [r7, #6]
    tx[0] = (cmd >> 8) & 0x00ff;
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	701a      	strb	r2, [r3, #0]
    tx[1] = (cmd & 0x00ff);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	88fa      	ldrh	r2, [r7, #6]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <set_adc>:

static inline void set_adc(GPIO_MAX11131_Pinfo *pinfo, GPIO_PinState state) {
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pinfo->MAX11131_CS_PORT, pinfo->MAX11131_CS_ADDR, state);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	899b      	ldrh	r3, [r3, #12]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	4619      	mov	r1, r3
 8007546:	f002 fbcf 	bl	8009ce8 <HAL_GPIO_WritePin>
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <cycle_cnvst>:

void cycle_cnvst(GPIO_MAX11131_Pinfo *pinfo) {
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6898      	ldr	r0, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8a1b      	ldrh	r3, [r3, #16]
 8007562:	2200      	movs	r2, #0
 8007564:	4619      	mov	r1, r3
 8007566:	f002 fbbf 	bl	8009ce8 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_RESET
    );
    asm("nop");  // Clock Freq maxes at 180 MHz, at which each noop instruction
 800756a:	bf00      	nop
    asm("nop");  // takes about 5.5 ns to complete
 800756c:	bf00      	nop
    HAL_GPIO_WritePin(
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6898      	ldr	r0, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8a1b      	ldrh	r3, [r3, #16]
 8007576:	2201      	movs	r2, #1
 8007578:	4619      	mov	r1, r3
 800757a:	f002 fbb5 	bl	8009ce8 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_SET
    );
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <findClosestTTMV>:
 *  Created on: Jan 4, 2021
 *      Author: arthur
 */
#include "MAX31855.h"

int32_t findClosestTTMV(float target) {
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t right = MAX31855_TTMV_LUT_SZ - 1;
 8007592:	f240 2326 	movw	r3, #550	; 0x226
 8007596:	617b      	str	r3, [r7, #20]
	int32_t left = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
	int32_t mid = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
    // Find the two closest microvolt points
    while (left < right) {
 80075a0:	e01e      	b.n	80075e0 <findClosestTTMV+0x58>
        mid = ((right-left)/2)+left;
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	0fda      	lsrs	r2, r3, #31
 80075aa:	4413      	add	r3, r2
 80075ac:	105b      	asrs	r3, r3, #1
 80075ae:	461a      	mov	r2, r3
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
        if (MAX31855_TTMV_LUT[mid] < target) {
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <findClosestTTMV+0x70>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80075ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	dd03      	ble.n	80075dc <findClosestTTMV+0x54>
            left = mid+1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e001      	b.n	80075e0 <findClosestTTMV+0x58>
        } else {
            right = mid;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	617b      	str	r3, [r7, #20]
    while (left < right) {
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	dbdc      	blt.n	80075a2 <findClosestTTMV+0x1a>
        }
    } // TODO: write bs alg to find correct microvolt conversions
    return left;
 80075e8:	693b      	ldr	r3, [r7, #16]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	0800eb70 	.word	0x0800eb70
 80075fc:	00000000 	.word	0x00000000

08007600 <read_tc>:

float read_tc(SPI_HandleTypeDef *SPI_BUS, MAX31855_Pinfo *pinfo) {
 8007600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007604:	b096      	sub	sp, #88	; 0x58
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
	uint8_t tx[4] = { 0 };
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
    uint8_t rx[4] = { 0 };
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8007614:	b672      	cpsid	i
}
 8007616:	bf00      	nop
    // Read thermocouples raw temperature
    __disable_irq();
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	889b      	ldrh	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	4619      	mov	r1, r3
 8007624:	f002 fb60 	bl	8009ce8 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_SPI_Receive(SPI_BUS, rx, 4, 1);
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	2301      	movs	r3, #1
 800762e:	2204      	movs	r2, #4
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f003 fb0c 	bl	800ac4e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	889b      	ldrh	r3, [r3, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	4619      	mov	r1, r3
 8007642:	f002 fb51 	bl	8009ce8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8007646:	b662      	cpsie	i
}
 8007648:	bf00      	nop
            GPIO_PIN_SET);
    __enable_irq();

    int32_t spiData = rx[0] << 24 | rx[1] << 16 | rx[2] << 8 | rx[3];
 800764a:	7a3b      	ldrb	r3, [r7, #8]
 800764c:	061a      	lsls	r2, r3, #24
 800764e:	7a7b      	ldrb	r3, [r7, #9]
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	431a      	orrs	r2, r3
 8007654:	7abb      	ldrb	r3, [r7, #10]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	4313      	orrs	r3, r2
 800765a:	7afa      	ldrb	r2, [r7, #11]
 800765c:	4313      	orrs	r3, r2
 800765e:	64bb      	str	r3, [r7, #72]	; 0x48
    float uncorrectedThermocoupleTemp;
    float refJuncTemp;
    float totalOutputMicroVolts;
    float refJuncMicroVolts;
    float thermocoupleMicroVolts;
    float correctedThermocoupleTemp = 0.0f;
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t ocFaultFlag = rx[3]&0b1;
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    faultFlag = (spiData & 0x00010000) >> 16;
 8007670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007672:	141b      	asrs	r3, r3, #16
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	643b      	str	r3, [r7, #64]	; 0x40
    if ((spiData & 0x80000000) == 0x80000000) {
 800767a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767c:	2b00      	cmp	r3, #0
 800767e:	da0a      	bge.n	8007696 <read_tc+0x96>
        thermocoupleData = (spiData ^ 0xFFFFFFFF) >> 18;
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	43db      	mvns	r3, r3
 8007684:	0c9b      	lsrs	r3, r3, #18
 8007686:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData++;
 8007688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768a:	3301      	adds	r3, #1
 800768c:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData = thermocoupleData * -1;
 800768e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007690:	425b      	negs	r3, r3
 8007692:	657b      	str	r3, [r7, #84]	; 0x54
 8007694:	e002      	b.n	800769c <read_tc+0x9c>
    } else {
        thermocoupleData = spiData >> 18;
 8007696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007698:	149b      	asrs	r3, r3, #18
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
    }
    if ((spiData & 0x00008000) == 0x00008000) {
 800769c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800769e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00c      	beq.n	80076c0 <read_tc+0xc0>
        refJuncData = ((spiData ^ 0xFFFFFFFF) >> 4) & 0x00000FFF;
 80076a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a8:	43db      	mvns	r3, r3
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b0:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData++;
 80076b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b4:	3301      	adds	r3, #1
 80076b6:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData = refJuncData * -1;
 80076b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ba:	425b      	negs	r3, r3
 80076bc:	653b      	str	r3, [r7, #80]	; 0x50
 80076be:	e004      	b.n	80076ca <read_tc+0xca>
    } else {
        refJuncData = (spiData >> 4) & 0x00000FFF;
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	111b      	asrs	r3, r3, #4
 80076c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c8:	653b      	str	r3, [r7, #80]	; 0x50
    }
    // Calculate out the uncorrected temperatures from the MAX31855 and
    // find the total output voltage in micro volts
    // (using the MAX31855 equation from datasheet)
    uncorrectedThermocoupleTemp = thermocoupleData * 0.25;
 80076ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80076cc:	f7f8 feee 	bl	80004ac <__aeabi_i2d>
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	4b7e      	ldr	r3, [pc, #504]	; (80078d0 <read_tc+0x2d0>)
 80076d6:	f7f8 ff53 	bl	8000580 <__aeabi_dmul>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4610      	mov	r0, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	f7f9 fa45 	bl	8000b70 <__aeabi_d2f>
 80076e6:	4603      	mov	r3, r0
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    refJuncTemp = refJuncData * 0.0625;
 80076ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80076ec:	f7f8 fede 	bl	80004ac <__aeabi_i2d>
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	4b77      	ldr	r3, [pc, #476]	; (80078d4 <read_tc+0x2d4>)
 80076f6:	f7f8 ff43 	bl	8000580 <__aeabi_dmul>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4610      	mov	r0, r2
 8007700:	4619      	mov	r1, r3
 8007702:	f7f9 fa35 	bl	8000b70 <__aeabi_d2f>
 8007706:	4603      	mov	r3, r0
 8007708:	63bb      	str	r3, [r7, #56]	; 0x38
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
            * (uncorrectedThermocoupleTemp - refJuncTemp);
 800770a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800770e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007716:	ee17 0a90 	vmov	r0, s15
 800771a:	f7f8 fed9 	bl	80004d0 <__aeabi_f2d>
 800771e:	a368      	add	r3, pc, #416	; (adr r3, 80078c0 <read_tc+0x2c0>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 ff2c 	bl	8000580 <__aeabi_dmul>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
 800772c:	4610      	mov	r0, r2
 800772e:	4619      	mov	r1, r3
 8007730:	f7f9 fa1e 	bl	8000b70 <__aeabi_d2f>
 8007734:	4603      	mov	r3, r0
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
    // given temperature --> y2 = m(x2-x1) + y1 (we must cast back as a signed
    // int since pgm_read returns unsigned)
    int refJuncMicrovoltsHigh;
    int refJuncMicrovoltsLow;
    int refJuncMicrovoltsSlope;
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 8007738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800773a:	f7f8 fec9 	bl	80004d0 <__aeabi_f2d>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	ec43 2b10 	vmov	d0, r2, r3
 8007746:	f006 f90b 	bl	800d960 <ceil>
 800774a:	ec53 2b10 	vmov	r2, r3, d0
 800774e:	4610      	mov	r0, r2
 8007750:	4619      	mov	r1, r3
 8007752:	f7f9 f9c5 	bl	8000ae0 <__aeabi_d2iz>
 8007756:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 8007758:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 800775a:	4a5f      	ldr	r2, [pc, #380]	; (80078d8 <read_tc+0x2d8>)
 800775c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 8007762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007764:	f7f8 feb4 	bl	80004d0 <__aeabi_f2d>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	ec43 2b10 	vmov	d0, r2, r3
 8007770:	f006 f97a 	bl	800da68 <floor>
 8007774:	ec53 2b10 	vmov	r2, r3, d0
 8007778:	4610      	mov	r0, r2
 800777a:	4619      	mov	r1, r3
 800777c:	f7f9 f9b0 	bl	8000ae0 <__aeabi_d2iz>
 8007780:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 8007782:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 8007784:	4a54      	ldr	r2, [pc, #336]	; (80078d8 <read_tc+0x2d8>)
 8007786:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
    refJuncMicrovoltsSlope = (refJuncMicrovoltsHigh - refJuncMicrovoltsLow);
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
    refJuncMicroVolts = refJuncMicrovoltsSlope
            * (refJuncTemp - floor(refJuncTemp)) + refJuncMicrovoltsLow;
 8007794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007796:	f7f8 fe89 	bl	80004ac <__aeabi_i2d>
 800779a:	4604      	mov	r4, r0
 800779c:	460d      	mov	r5, r1
 800779e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077a0:	f7f8 fe96 	bl	80004d0 <__aeabi_f2d>
 80077a4:	4680      	mov	r8, r0
 80077a6:	4689      	mov	r9, r1
 80077a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077aa:	f7f8 fe91 	bl	80004d0 <__aeabi_f2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	ec43 2b10 	vmov	d0, r2, r3
 80077b6:	f006 f957 	bl	800da68 <floor>
 80077ba:	ec53 2b10 	vmov	r2, r3, d0
 80077be:	4640      	mov	r0, r8
 80077c0:	4649      	mov	r1, r9
 80077c2:	f7f8 fd25 	bl	8000210 <__aeabi_dsub>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7f8 fed7 	bl	8000580 <__aeabi_dmul>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4614      	mov	r4, r2
 80077d8:	461d      	mov	r5, r3
 80077da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077dc:	f7f8 fe66 	bl	80004ac <__aeabi_i2d>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4620      	mov	r0, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	f7f8 fd14 	bl	8000214 <__adddf3>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
    refJuncMicroVolts = refJuncMicrovoltsSlope
 80077f0:	4610      	mov	r0, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	f7f9 f9bc 	bl	8000b70 <__aeabi_d2f>
 80077f8:	4603      	mov	r3, r0
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
    // Calculate the voltage of the desired thermocouple junction itself (thermocouple junction and ref junction polarities are opposing in our application
    // with a type T thermocouple --> V_out = V_tc - V_ref)
    thermocoupleMicroVolts = totalOutputMicroVolts + refJuncMicroVolts;
 80077fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007800:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007808:	edc7 7a08 	vstr	s15, [r7, #32]
    // Check to make sure this voltage is within our range of -200 to 350C then proceed to lookup table processing, or else return an out or range error
    if (thermocoupleMicroVolts < MAX31855_minVoltage
 800780c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007810:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80078dc <read_tc+0x2dc>
 8007814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781c:	d436      	bmi.n	800788c <read_tc+0x28c>
            || thermocoupleMicroVolts > MAX31855_maxVoltage) {
 800781e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007822:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80078e0 <read_tc+0x2e0>
 8007826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782e:	dc2d      	bgt.n	800788c <read_tc+0x28c>
        int32_t correctedMicrovoltsHigh;
        int32_t correctedMicrovoltsLow;
        int32_t correctedMicrovoltsSlope;
        int32_t closestIdx;
        // Set the starting points
        closestIdx = findClosestTTMV(thermocoupleMicroVolts);
 8007830:	ed97 0a08 	vldr	s0, [r7, #32]
 8007834:	f7ff fea8 	bl	8007588 <findClosestTTMV>
 8007838:	61f8      	str	r0, [r7, #28]
        correctedMicrovoltsHigh = (int32_t) MAX31855_TTMV_LUT[closestIdx];
 800783a:	4a27      	ldr	r2, [pc, #156]	; (80078d8 <read_tc+0x2d8>)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007842:	61bb      	str	r3, [r7, #24]
        correctedMicrovoltsLow  = (int32_t) MAX31855_TTMV_LUT[closestIdx-1];
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3b01      	subs	r3, #1
 8007848:	4a23      	ldr	r2, [pc, #140]	; (80078d8 <read_tc+0x2d8>)
 800784a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800784e:	617b      	str	r3, [r7, #20]

        // Find the final corrected temperature from microvolts using
        // linear interpolation - x2 = (y2-y1)/m + x1
        correctedMicrovoltsSlope = correctedMicrovoltsHigh
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	613b      	str	r3, [r7, #16]
                - correctedMicrovoltsLow;
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
                - correctedMicrovoltsLow) / correctedMicrovoltsSlope)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007862:	ed97 7a08 	vldr	s14, [r7, #32]
 8007866:	ee77 6a67 	vsub.f32	s13, s14, s15
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                + ((closestIdx - 1) - MAX31855_LUT_OFFSET);
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	3bc9      	subs	r3, #201	; 0xc9
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
 8007884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007888:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    }

    return correctedThermocoupleTemp + 273.15; // replace with return value
 800788c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800788e:	f7f8 fe1f 	bl	80004d0 <__aeabi_f2d>
 8007892:	a30d      	add	r3, pc, #52	; (adr r3, 80078c8 <read_tc+0x2c8>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fcbc 	bl	8000214 <__adddf3>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4610      	mov	r0, r2
 80078a2:	4619      	mov	r1, r3
 80078a4:	f7f9 f964 	bl	8000b70 <__aeabi_d2f>
 80078a8:	4603      	mov	r3, r0
 80078aa:	ee07 3a90 	vmov	s15, r3
}
 80078ae:	eeb0 0a67 	vmov.f32	s0, s15
 80078b2:	3758      	adds	r7, #88	; 0x58
 80078b4:	46bd      	mov	sp, r7
 80078b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80078ba:	bf00      	nop
 80078bc:	f3af 8000 	nop.w
 80078c0:	3d70a3d7 	.word	0x3d70a3d7
 80078c4:	404a170a 	.word	0x404a170a
 80078c8:	66666666 	.word	0x66666666
 80078cc:	40711266 	.word	0x40711266
 80078d0:	3fd00000 	.word	0x3fd00000
 80078d4:	3fb00000 	.word	0x3fb00000
 80078d8:	0800eb70 	.word	0x0800eb70
 80078dc:	c5af1800 	.word	0xc5af1800
 80078e0:	468b3600 	.word	0x468b3600

080078e4 <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <init_board+0x24>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 80078f4:	4a05      	ldr	r2, [pc, #20]	; (800790c <init_board+0x28>)
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	7013      	strb	r3, [r2, #0]
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000a30 	.word	0x20000a30
 800790c:	2000086b 	.word	0x2000086b

08007910 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	460b      	mov	r3, r1
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 800791e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d10d      	bne.n	8007944 <init_data+0x34>
	    // repack CLB_telem_data

		if (header->packet_type == 0) {  // Normal telem
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10f      	bne.n	8007950 <init_data+0x40>
			pack_telem_data(CLB_telem_data);
 8007930:	480b      	ldr	r0, [pc, #44]	; (8007960 <init_data+0x50>)
 8007932:	f7fc fa9f 	bl	8003e74 <pack_telem_data>
			CLB_buffer = CLB_telem_data;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <init_data+0x54>)
 8007938:	4a09      	ldr	r2, [pc, #36]	; (8007960 <init_data+0x50>)
 800793a:	601a      	str	r2, [r3, #0]
			CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <init_data+0x58>)
 800793e:	22be      	movs	r2, #190	; 0xbe
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	e005      	b.n	8007950 <init_data+0x40>
			CLB_buffer_sz = CLB_NUM_CALIBRATION_ITEMS;
		}
#endif

	} else {				// custom telem
		CLB_buffer = buffer;
 8007944:	4a07      	ldr	r2, [pc, #28]	; (8007964 <init_data+0x54>)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 800794a:	897a      	ldrh	r2, [r7, #10]
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <init_data+0x58>)
 800794e:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 8007950:	4a06      	ldr	r2, [pc, #24]	; (800796c <init_data+0x5c>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6013      	str	r3, [r2, #0]
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	2000096c 	.word	0x2000096c
 8007964:	20000768 	.word	0x20000768
 8007968:	20000a2c 	.word	0x20000a2c
 800796c:	20000a3c 	.word	0x20000a3c

08007970 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b08d      	sub	sp, #52	; 0x34
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 800797c:	2300      	movs	r3, #0
 800797e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 8007982:	2300      	movs	r3, #0
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 8007986:	2300      	movs	r3, #0
 8007988:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 800798a:	4b6c      	ldr	r3, [pc, #432]	; (8007b3c <send_data+0x1cc>)
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 8007990:	2300      	movs	r3, #0
 8007992:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 8007994:	23fd      	movs	r3, #253	; 0xfd
 8007996:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 80079a6:	4b66      	ldr	r3, [pc, #408]	; (8007b40 <send_data+0x1d0>)
 80079a8:	681c      	ldr	r4, [r3, #0]
 80079aa:	f000 fa3f 	bl	8007e2c <compute_checksum>
 80079ae:	4603      	mov	r3, r0
 80079b0:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 80079b2:	4b63      	ldr	r3, [pc, #396]	; (8007b40 <send_data+0x1d0>)
 80079b4:	681c      	ldr	r4, [r3, #0]
 80079b6:	f000 fa43 	bl	8007e40 <compute_packet_sz>
 80079ba:	4603      	mov	r3, r0
 80079bc:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 80079be:	4b60      	ldr	r3, [pc, #384]	; (8007b40 <send_data+0x1d0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f107 0208 	add.w	r2, r7, #8
 80079c6:	4611      	mov	r1, r2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f9b1 	bl	8007d30 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 80079ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d0:	4a5c      	ldr	r2, [pc, #368]	; (8007b44 <send_data+0x1d4>)
 80079d2:	1899      	adds	r1, r3, r2
 80079d4:	f107 0308 	add.w	r3, r7, #8
 80079d8:	220c      	movs	r2, #12
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f9f9 	bl	8007dd2 <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 80079e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079e2:	330c      	adds	r3, #12
 80079e4:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 80079ec:	e08c      	b.n	8007b08 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 80079ee:	8bfa      	ldrh	r2, [r7, #30]
 80079f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 80079f6:	8bba      	ldrh	r2, [r7, #28]
 80079f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 80079fe:	8b7a      	ldrh	r2, [r7, #26]
 8007a00:	8b3b      	ldrh	r3, [r7, #24]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bf28      	it	cs
 8007a06:	4613      	movcs	r3, r2
 8007a08:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 8007a0a:	4b4f      	ldr	r3, [pc, #316]	; (8007b48 <send_data+0x1d8>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a10:	18d0      	adds	r0, r2, r3
 8007a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a14:	4a4b      	ldr	r2, [pc, #300]	; (8007b44 <send_data+0x1d4>)
 8007a16:	4413      	add	r3, r2
 8007a18:	8afa      	ldrh	r2, [r7, #22]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f000 f9d9 	bl	8007dd2 <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8007a20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a22:	8afb      	ldrh	r3, [r7, #22]
 8007a24:	4413      	add	r3, r2
 8007a26:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8007a28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a2a:	8afb      	ldrh	r3, [r7, #22]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d121      	bne.n	8007a7e <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8007a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4943      	ldr	r1, [pc, #268]	; (8007b4c <send_data+0x1dc>)
 8007a40:	4840      	ldr	r0, [pc, #256]	; (8007b44 <send_data+0x1d4>)
 8007a42:	f000 fa2b 	bl	8007e9c <stuff_packet>
 8007a46:	4603      	mov	r3, r0
 8007a48:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 8007a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a4c:	8bfb      	ldrh	r3, [r7, #30]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d10d      	bne.n	8007a6e <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 8007a52:	8c3b      	ldrh	r3, [r7, #32]
 8007a54:	2bfe      	cmp	r3, #254	; 0xfe
 8007a56:	d807      	bhi.n	8007a68 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8007a58:	8c3b      	ldrh	r3, [r7, #32]
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	843a      	strh	r2, [r7, #32]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b3a      	ldr	r3, [pc, #232]	; (8007b4c <send_data+0x1dc>)
 8007a62:	2100      	movs	r1, #0
 8007a64:	5499      	strb	r1, [r3, r2]
 8007a66:	e002      	b.n	8007a6e <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	8c3a      	ldrh	r2, [r7, #32]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f900 	bl	8007c7c <transmit_packet>
 8007a7c:	e03e      	b.n	8007afc <send_data+0x18c>
		} else if (type == CLB_Flash) {
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d13b      	bne.n	8007afc <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	4413      	add	r3, r2
 8007a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a8e:	4619      	mov	r1, r3
 8007a90:	482c      	ldr	r0, [pc, #176]	; (8007b44 <send_data+0x1d4>)
 8007a92:	f000 fa03 	bl	8007e9c <stuff_packet>
 8007a96:	4603      	mov	r3, r0
 8007a98:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 8007a9a:	8c3b      	ldrh	r3, [r7, #32]
 8007a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9e:	4413      	add	r3, r2
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	8c3b      	ldrh	r3, [r7, #32]
 8007aac:	4413      	add	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	b21a      	sxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 8007ab6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ab8:	8bfb      	ldrh	r3, [r7, #30]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d115      	bne.n	8007aea <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 8007abe:	8c3b      	ldrh	r3, [r7, #32]
 8007ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8007ac2:	d80f      	bhi.n	8007ae4 <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8007ace:	b28a      	uxth	r2, r1
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	b292      	uxth	r2, r2
 8007ad4:	b210      	sxth	r0, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	80d0      	strh	r0, [r2, #6]
 8007ada:	460a      	mov	r2, r1
 8007adc:	4413      	add	r3, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da03      	bge.n	8007afc <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007afa:	e00b      	b.n	8007b14 <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 8007afc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007afe:	8bbb      	ldrh	r3, [r7, #28]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d301      	bcc.n	8007b08 <send_data+0x198>
			ping_pos = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <send_data+0x1cc>)
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	f4ff af6d 	bcc.w	80079ee <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 8007b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <send_data+0x1dc>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f8a7 	bl	8007c7c <transmit_packet>
	}

	return status; // TODO: return better error handling
 8007b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3734      	adds	r7, #52	; 0x34
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd90      	pop	{r4, r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000a2c 	.word	0x20000a2c
 8007b40:	20000a3c 	.word	0x20000a3c
 8007b44:	2000086c 	.word	0x2000086c
 8007b48:	20000768 	.word	0x20000768
 8007b4c:	2000076c 	.word	0x2000076c

08007b50 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8007b5e:	2300      	movs	r3, #0
 8007b60:	83fb      	strh	r3, [r7, #30]
 8007b62:	e009      	b.n	8007b78 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 8007b64:	8bfb      	ldrh	r3, [r7, #30]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	441a      	add	r2, r3
 8007b6a:	8bfb      	ldrh	r3, [r7, #30]
 8007b6c:	7811      	ldrb	r1, [r2, #0]
 8007b6e:	4a2d      	ldr	r2, [pc, #180]	; (8007c24 <receive_data+0xd4>)
 8007b70:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8007b72:	8bfb      	ldrh	r3, [r7, #30]
 8007b74:	3301      	adds	r3, #1
 8007b76:	83fb      	strh	r3, [r7, #30]
 8007b78:	8bfa      	ldrh	r2, [r7, #30]
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d3f1      	bcc.n	8007b64 <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	461a      	mov	r2, r3
 8007b84:	4928      	ldr	r1, [pc, #160]	; (8007c28 <receive_data+0xd8>)
 8007b86:	4827      	ldr	r0, [pc, #156]	; (8007c24 <receive_data+0xd4>)
 8007b88:	f000 f9ee 	bl	8007f68 <unstuff_packet>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 8007b90:	4925      	ldr	r1, [pc, #148]	; (8007c28 <receive_data+0xd8>)
 8007b92:	4826      	ldr	r0, [pc, #152]	; (8007c2c <receive_data+0xdc>)
 8007b94:	f000 f886 	bl	8007ca4 <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 8007b98:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <receive_data+0xdc>)
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f939 	bl	8007e14 <verify_checksum>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 8007ba6:	7efb      	ldrb	r3, [r7, #27]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 8007bac:	2303      	movs	r3, #3
 8007bae:	e034      	b.n	8007c1a <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <receive_data+0xdc>)
 8007bb6:	789a      	ldrb	r2, [r3, #2]
 8007bb8:	4b1d      	ldr	r3, [pc, #116]	; (8007c30 <receive_data+0xe0>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d129      	bne.n	8007c14 <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <receive_data+0xdc>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b35      	cmp	r3, #53	; 0x35
 8007bc6:	d827      	bhi.n	8007c18 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 8007bc8:	4b18      	ldr	r3, [pc, #96]	; (8007c2c <receive_data+0xdc>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <receive_data+0xe4>)
 8007bd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007bd4:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 8007bd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d01b      	beq.n	8007c18 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <receive_data+0xdc>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	8bba      	ldrh	r2, [r7, #28]
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f82a 	bl	8007c44 <validate_command>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 8007bf6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007bfa:	4a0f      	ldr	r2, [pc, #60]	; (8007c38 <receive_data+0xe8>)
 8007bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c00:	480e      	ldr	r0, [pc, #56]	; (8007c3c <receive_data+0xec>)
 8007c02:	f107 0217 	add.w	r2, r7, #23
 8007c06:	4611      	mov	r1, r2
 8007c08:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <receive_data+0xdc>)
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <receive_data+0xf0>)
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e001      	b.n	8007c18 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 8007c14:	2302      	movs	r3, #2
 8007c16:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	2000076c 	.word	0x2000076c
 8007c28:	2000086c 	.word	0x2000086c
 8007c2c:	20000a30 	.word	0x20000a30
 8007c30:	2000086b 	.word	0x2000086b
 8007c34:	20000018 	.word	0x20000018
 8007c38:	200000f0 	.word	0x200000f0
 8007c3c:	20000878 	.word	0x20000878
 8007c40:	20000a2a 	.word	0x20000a2a

08007c44 <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	80fb      	strh	r3, [r7, #6]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 8007c54:	88bb      	ldrh	r3, [r7, #4]
 8007c56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c5a:	4907      	ldr	r1, [pc, #28]	; (8007c78 <validate_command+0x34>)
 8007c5c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d101      	bne.n	8007c68 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e000      	b.n	8007c6a <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 8007c68:	2301      	movs	r3, #1
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000084 	.word	0x20000084

08007c7c <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 8007c88:	887a      	ldrh	r2, [r7, #2]
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	4904      	ldr	r1, [pc, #16]	; (8007ca0 <transmit_packet+0x24>)
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f004 fd20 	bl	800c6d6 <HAL_UART_Transmit>
//	__enable_irq();
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	2000076c 	.word	0x2000076c

08007ca4 <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	785a      	ldrb	r2, [r3, #1]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	789a      	ldrb	r2, [r3, #2]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	78da      	ldrb	r2, [r3, #3]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	791a      	ldrb	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	795a      	ldrb	r2, [r3, #5]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3306      	adds	r3, #6
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b21a      	sxth	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	3307      	adds	r3, #7
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b21b      	sxth	r3, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	b21b      	sxth	r3, r3
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	061a      	lsls	r2, r3, #24
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	3309      	adds	r3, #9
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	330a      	adds	r3, #10
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8007d14:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	320b      	adds	r2, #11
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	609a      	str	r2, [r3, #8]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	7852      	ldrb	r2, [r2, #1]
 8007d4a:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	3302      	adds	r3, #2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7892      	ldrb	r2, [r2, #2]
 8007d54:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	3303      	adds	r3, #3
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	78d2      	ldrb	r2, [r2, #3]
 8007d5e:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3304      	adds	r3, #4
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7912      	ldrb	r2, [r2, #4]
 8007d68:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3305      	adds	r3, #5
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	7952      	ldrb	r2, [r2, #5]
 8007d72:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	88da      	ldrh	r2, [r3, #6]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3306      	adds	r3, #6
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	88db      	ldrh	r3, [r3, #6]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3307      	adds	r3, #7
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	0a1a      	lsrs	r2, r3, #8
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	3309      	adds	r3, #9
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	0c1a      	lsrs	r2, r3, #16
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	330a      	adds	r3, #10
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	0e1a      	lsrs	r2, r3, #24
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	330b      	adds	r3, #11
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 8007dd2:	b480      	push	{r7}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 8007dec:	e007      	b.n	8007dfe <pack_packet+0x2c>
		*dst++ = *curr++;
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	1c53      	adds	r3, r2, #1
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1c59      	adds	r1, r3, #1
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	7812      	ldrb	r2, [r2, #0]
 8007dfc:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d1f3      	bne.n	8007dee <pack_packet+0x1c>
	}
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <compute_checksum>:

uint16_t compute_checksum() {
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	0000      	movs	r0, r0
	...

08007e40 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <compute_packet_sz+0x58>)
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	330d      	adds	r3, #13
 8007e4c:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f8 fb2b 	bl	80004ac <__aeabi_i2d>
 8007e56:	a30e      	add	r3, pc, #56	; (adr r3, 8007e90 <compute_packet_sz+0x50>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 fcba 	bl	80007d4 <__aeabi_ddiv>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	ec43 2b17 	vmov	d7, r2, r3
 8007e68:	eeb0 0a47 	vmov.f32	s0, s14
 8007e6c:	eef0 0a67 	vmov.f32	s1, s15
 8007e70:	f005 fd76 	bl	800d960 <ceil>
 8007e74:	ec53 2b10 	vmov	r2, r3, d0
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f7f8 fe58 	bl	8000b30 <__aeabi_d2uiz>
 8007e80:	4603      	mov	r3, r0
 8007e82:	717b      	strb	r3, [r7, #5]
    return num_packets;
 8007e84:	797b      	ldrb	r3, [r7, #5]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	00000000 	.word	0x00000000
 8007e94:	406fe000 	.word	0x406fe000
 8007e98:	20000a2c 	.word	0x20000a2c

08007e9c <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 8007e9c:	b480      	push	{r7}
 8007e9e:	b089      	sub	sp, #36	; 0x24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 8007eae:	4b2d      	ldr	r3, [pc, #180]	; (8007f64 <stuff_packet+0xc8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	795b      	ldrb	r3, [r3, #5]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d038      	beq.n	8007f2a <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	60ba      	str	r2, [r7, #8]
 8007ebe:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	701a      	strb	r2, [r3, #0]
        while (length--)
 8007ec6:	e02a      	b.n	8007f1e <stuff_packet+0x82>
        {
            if (*unstuffed) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00e      	beq.n	8007eee <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	1c53      	adds	r3, r2, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	1c59      	adds	r1, r3, #1
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	7812      	ldrb	r2, [r2, #0]
 8007ede:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e009      	b.n	8007f02 <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	60ba      	str	r2, [r7, #8]
 8007ef4:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2bff      	cmp	r3, #255	; 0xff
 8007f08:	d109      	bne.n	8007f1e <stuff_packet+0x82>
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	60ba      	str	r2, [r7, #8]
 8007f16:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
        while (length--)
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	1e5a      	subs	r2, r3, #1
 8007f22:	80fa      	strh	r2, [r7, #6]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1cf      	bne.n	8007ec8 <stuff_packet+0x2c>
 8007f28:	e011      	b.n	8007f4e <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	837b      	strh	r3, [r7, #26]
 8007f2e:	e00a      	b.n	8007f46 <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	1c53      	adds	r3, r2, #1
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	1c59      	adds	r1, r3, #1
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	7812      	ldrb	r2, [r2, #0]
 8007f3e:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8007f40:	8b7b      	ldrh	r3, [r7, #26]
 8007f42:	3301      	adds	r3, #1
 8007f44:	837b      	strh	r3, [r7, #26]
 8007f46:	8b7a      	ldrh	r2, [r7, #26]
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3f0      	bcc.n	8007f30 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	b29b      	uxth	r3, r3
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000a3c 	.word	0x20000a3c

08007f68 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b089      	sub	sp, #36	; 0x24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	61bb      	str	r3, [r7, #24]
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 8007f82:	23ff      	movs	r3, #255	; 0xff
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	2300      	movs	r3, #0
 8007f88:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 8007f8a:	e024      	b.n	8007fd6 <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d025      	beq.n	8007fe0 <unstuff_packet+0x78>
		if (copy != 0) {
 8007f94:	7fbb      	ldrb	r3, [r7, #30]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	1c53      	adds	r3, r2, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	1c59      	adds	r1, r3, #1
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e011      	b.n	8007fd0 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d004      	beq.n	8007fbc <unstuff_packet+0x54>
				*unstuffed++ = 0;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	60ba      	str	r2, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	60fa      	str	r2, [r7, #12]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	77fb      	strb	r3, [r7, #31]
 8007fc6:	7ffb      	ldrb	r3, [r7, #31]
 8007fc8:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 8007fca:	7ffb      	ldrb	r3, [r7, #31]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 8007fd0:	7fbb      	ldrb	r3, [r7, #30]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	77bb      	strb	r3, [r7, #30]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d3d6      	bcc.n	8007f8c <unstuff_packet+0x24>
 8007fde:	e002      	b.n	8007fe6 <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <unstuff_packet+0x7e>
				break; /* Source length too long */
 8007fe4:	bf00      	nop
		}
	}
	return unstuffed - start;
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	b29b      	uxth	r3, r3
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	4613      	mov	r3, r2
 8008006:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008008:	b672      	cpsid	i
}
 800800a:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008018:	2200      	movs	r2, #0
 800801a:	4619      	mov	r1, r3
 800801c:	f001 fe64 	bl	8009ce8 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008026:	88fa      	ldrh	r2, [r7, #6]
 8008028:	23ff      	movs	r3, #255	; 0xff
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	f002 fcd3 	bl	800a9d6 <HAL_SPI_Transmit>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008046:	2201      	movs	r2, #1
 8008048:	4619      	mov	r1, r3
 800804a:	f001 fe4d 	bl	8009ce8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800804e:	b662      	cpsie	i
}
 8008050:	bf00      	nop
	__enable_irq();

}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800806a:	b672      	cpsid	i
}
 800806c:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800807a:	2200      	movs	r2, #0
 800807c:	4619      	mov	r1, r3
 800807e:	f001 fe33 	bl	8009ce8 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	23ff      	movs	r3, #255	; 0xff
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	f002 fca2 	bl	800a9d6 <HAL_SPI_Transmit>
 8008092:	4603      	mov	r3, r0
 8008094:	461a      	mov	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80080a2:	8b3a      	ldrh	r2, [r7, #24]
 80080a4:	23ff      	movs	r3, #255	; 0xff
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	f002 fdd1 	bl	800ac4e <HAL_SPI_Receive>
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80080c2:	2201      	movs	r2, #1
 80080c4:	4619      	mov	r1, r3
 80080c6:	f001 fe0f 	bl	8009ce8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80080ca:	b662      	cpsie	i
}
 80080cc:	bf00      	nop
	__enable_irq();

}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b086      	sub	sp, #24
 80080da:	af02      	add	r7, sp, #8
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 80080e2:	230f      	movs	r3, #15
 80080e4:	733b      	strb	r3, [r7, #12]
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 80080ea:	f107 0308 	add.w	r3, r7, #8
 80080ee:	f107 010c 	add.w	r1, r7, #12
 80080f2:	2201      	movs	r2, #1
 80080f4:	9200      	str	r2, [sp, #0]
 80080f6:	2202      	movs	r2, #2
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ffae 	bl	800805a <spi_transmit_receive>

	return *rx;
 80080fe:	7a3b      	ldrb	r3, [r7, #8]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008110:	21c0      	movs	r1, #192	; 0xc0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ffdf 	bl	80080d6 <read_status_register>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	b2db      	uxtb	r3, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 800813a:	e002      	b.n	8008142 <wait_for_operation+0x16>
		++count;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ffe0 	bl	8008108 <flash_is_busy>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <wait_for_operation+0x34>
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	4413      	add	r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	461a      	mov	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4293      	cmp	r3, r2
 800815e:	d3ed      	bcc.n	800813c <wait_for_operation+0x10>
	}
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
 8008174:	4613      	mov	r3, r2
 8008176:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8008178:	231f      	movs	r3, #31
 800817a:	733b      	strb	r3, [r7, #12]
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	737b      	strb	r3, [r7, #13]
 8008180:	78bb      	ldrb	r3, [r7, #2]
 8008182:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	2203      	movs	r2, #3
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ff34 	bl	8007ffa <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8008192:	2132      	movs	r1, #50	; 0x32
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ffc9 	bl	800812c <wait_for_operation>
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	460b      	mov	r3, r1
 80081ac:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 80081ae:	887b      	ldrh	r3, [r7, #2]
 80081b0:	0a1b      	lsrs	r3, r3, #8
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	733b      	strb	r3, [r7, #12]
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 80081be:	2313      	movs	r3, #19
 80081c0:	723b      	strb	r3, [r7, #8]
 80081c2:	2300      	movs	r3, #0
 80081c4:	727b      	strb	r3, [r7, #9]
 80081c6:	7b3b      	ldrb	r3, [r7, #12]
 80081c8:	72bb      	strb	r3, [r7, #10]
 80081ca:	7b7b      	ldrb	r3, [r7, #13]
 80081cc:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	2204      	movs	r2, #4
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff ff0f 	bl	8007ffa <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 80081dc:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ffa3 	bl	800812c <wait_for_operation>
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 80081f6:	21a0      	movs	r1, #160	; 0xa0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff6c 	bl	80080d6 <read_status_register>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008208:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	461a      	mov	r2, r3
 800820e:	21a0      	movs	r1, #160	; 0xa0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ffa9 	bl	8008168 <write_status_register>
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008226:	21a0      	movs	r1, #160	; 0xa0
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff ff54 	bl	80080d6 <read_status_register>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008238:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008240:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	461a      	mov	r2, r3
 8008246:	21a0      	movs	r1, #160	; 0xa0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff8d 	bl	8008168 <write_status_register>
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 800825e:	2306      	movs	r3, #6
 8008260:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008262:	f107 030c 	add.w	r3, r7, #12
 8008266:	2201      	movs	r2, #1
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fec5 	bl	8007ffa <spi_transmit>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8008280:	2304      	movs	r3, #4
 8008282:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008284:	f107 030c 	add.w	r3, r7, #12
 8008288:	2201      	movs	r2, #1
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff feb4 	bl	8007ffa <spi_transmit>
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4611      	mov	r1, r2
 80082a6:	461a      	mov	r2, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	80fb      	strh	r3, [r7, #6]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 80082b0:	88bb      	ldrh	r3, [r7, #4]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	753b      	strb	r3, [r7, #20]
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 80082c0:	2302      	movs	r3, #2
 80082c2:	743b      	strb	r3, [r7, #16]
 80082c4:	7d3b      	ldrb	r3, [r7, #20]
 80082c6:	747b      	strb	r3, [r7, #17]
 80082c8:	7d7b      	ldrb	r3, [r7, #21]
 80082ca:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d2:	d902      	bls.n	80082da <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 80082d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082d8:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80082da:	b672      	cpsid	i
}
 80082dc:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80082ea:	2200      	movs	r2, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	f001 fcfb 	bl	8009ce8 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80082f8:	f107 0110 	add.w	r1, r7, #16
 80082fc:	23ff      	movs	r3, #255	; 0xff
 80082fe:	2203      	movs	r2, #3
 8008300:	f002 fb69 	bl	800a9d6 <HAL_SPI_Transmit>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	23ff      	movs	r3, #255	; 0xff
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	f002 fb5c 	bl	800a9d6 <HAL_SPI_Transmit>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008334:	2201      	movs	r2, #1
 8008336:	4619      	mov	r1, r3
 8008338:	f001 fcd6 	bl	8009ce8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800833c:	b662      	cpsie	i
}
 800833e:	bf00      	nop
	__enable_irq();
}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	0a1b      	lsrs	r3, r3, #8
 8008358:	b29b      	uxth	r3, r3
 800835a:	b2db      	uxtb	r3, r3
 800835c:	733b      	strb	r3, [r7, #12]
 800835e:	887b      	ldrh	r3, [r7, #2]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8008364:	2310      	movs	r3, #16
 8008366:	723b      	strb	r3, [r7, #8]
 8008368:	2300      	movs	r3, #0
 800836a:	727b      	strb	r3, [r7, #9]
 800836c:	7b3b      	ldrb	r3, [r7, #12]
 800836e:	72bb      	strb	r3, [r7, #10]
 8008370:	7b7b      	ldrb	r3, [r7, #13]
 8008372:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	2204      	movs	r2, #4
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fe3c 	bl	8007ffa <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8008382:	4904      	ldr	r1, [pc, #16]	; (8008394 <program_buffer_to_memory+0x4c>)
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fed1 	bl	800812c <wait_for_operation>
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	000aae60 	.word	0x000aae60

08008398 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fabd 	bl	8008920 <ping_flash>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00d      	beq.n	80083c8 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80083ac:	21c0      	movs	r1, #192	; 0xc0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fe91 	bl	80080d6 <read_status_register>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	f003 0308 	and.w	r3, r3, #8
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 80083c6:	e003      	b.n	80083d0 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2208      	movs	r2, #8
 80083cc:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa9a 	bl	8008920 <ping_flash>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00d      	beq.n	800840e <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80083f2:	21c0      	movs	r1, #192	; 0xc0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fe6e 	bl	80080d6 <read_status_register>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	b2da      	uxtb	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 800840c:	e003      	b.n	8008416 <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2204      	movs	r2, #4
 8008412:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff ff10 	bl	8008256 <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008436:	887b      	ldrh	r3, [r7, #2]
 8008438:	0a1b      	lsrs	r3, r3, #8
 800843a:	b29b      	uxth	r3, r3
 800843c:	b2db      	uxtb	r3, r3
 800843e:	733b      	strb	r3, [r7, #12]
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8008446:	23d8      	movs	r3, #216	; 0xd8
 8008448:	723b      	strb	r3, [r7, #8]
 800844a:	2300      	movs	r3, #0
 800844c:	727b      	strb	r3, [r7, #9]
 800844e:	7b3b      	ldrb	r3, [r7, #12]
 8008450:	72bb      	strb	r3, [r7, #10]
 8008452:	7b7b      	ldrb	r3, [r7, #13]
 8008454:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8008456:	f107 0308 	add.w	r3, r7, #8
 800845a:	2204      	movs	r2, #4
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fdcb 	bl	8007ffa <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ff07 	bl	8008278 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 800846a:	4905      	ldr	r1, [pc, #20]	; (8008480 <erase_block+0x5c>)
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fe5d 	bl	800812c <wait_for_operation>

	get_erase_failure_status(flash);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff ffb3 	bl	80083de <get_erase_failure_status>
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	003d0900 	.word	0x003d0900

08008484 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa47 	bl	8008920 <ping_flash>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d033      	beq.n	8008500 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008498:	21c0      	movs	r1, #192	; 0xc0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fe1b 	bl	80080d6 <read_status_register>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <get_ECC_status+0x46>
 80084ba:	7b7b      	ldrb	r3, [r7, #13]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80084c8:	e01f      	b.n	800850a <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d107      	bne.n	80084e0 <get_ECC_status+0x5c>
 80084d0:	7b7b      	ldrb	r3, [r7, #13]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80084de:	e014      	b.n	800850a <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <get_ECC_status+0x72>
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80084f4:	e009      	b.n	800850a <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2203      	movs	r2, #3
 80084fa:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 80084fe:	e004      	b.n	800850a <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2204      	movs	r2, #4
 8008504:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8008508:	e7ff      	b.n	800850a <get_ECC_status+0x86>
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8008512:	b580      	push	{r7, lr}
 8008514:	b088      	sub	sp, #32
 8008516:	af02      	add	r7, sp, #8
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	4611      	mov	r1, r2
 800851e:	461a      	mov	r2, r3
 8008520:	460b      	mov	r3, r1
 8008522:	80fb      	strh	r3, [r7, #6]
 8008524:	4613      	mov	r3, r2
 8008526:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008528:	88bb      	ldrh	r3, [r7, #4]
 800852a:	0a1b      	lsrs	r3, r3, #8
 800852c:	b29b      	uxth	r3, r3
 800852e:	b2db      	uxtb	r3, r3
 8008530:	753b      	strb	r3, [r7, #20]
 8008532:	88bb      	ldrh	r3, [r7, #4]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8008538:	2303      	movs	r3, #3
 800853a:	743b      	strb	r3, [r7, #16]
 800853c:	7d3b      	ldrb	r3, [r7, #20]
 800853e:	747b      	strb	r3, [r7, #17]
 8008540:	7d7b      	ldrb	r3, [r7, #21]
 8008542:	74bb      	strb	r3, [r7, #18]
 8008544:	2300      	movs	r3, #0
 8008546:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8008548:	f107 0110 	add.w	r1, r7, #16
 800854c:	88fb      	ldrh	r3, [r7, #6]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2204      	movs	r2, #4
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff fd80 	bl	800805a <spi_transmit_receive>
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4611      	mov	r1, r2
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	80fb      	strh	r3, [r7, #6]
 8008574:	4613      	mov	r3, r2
 8008576:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8008578:	88bb      	ldrh	r3, [r7, #4]
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fe10 	bl	80081a2 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8008582:	8b3b      	ldrh	r3, [r7, #24]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff ffc2 	bl	8008512 <read_flash_buffer>

	get_ECC_status(flash);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ff78 	bl	8008484 <get_ECC_status>
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4611      	mov	r1, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	460b      	mov	r3, r1
 80085ac:	80fb      	strh	r3, [r7, #6]
 80085ae:	4613      	mov	r3, r2
 80085b0:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff fe4f 	bl	8008256 <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 80085b8:	8b3b      	ldrh	r3, [r7, #24]
 80085ba:	88fa      	ldrh	r2, [r7, #6]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fe6b 	bl	800829a <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 80085c4:	88bb      	ldrh	r3, [r7, #4]
 80085c6:	4619      	mov	r1, r3
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff febd 	bl	8008348 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fe52 	bl	8008278 <disable_write>

	get_write_failure_status(flash);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fedf 	bl	8008398 <get_write_failure_status>
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 80085ea:	21b0      	movs	r1, #176	; 0xb0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fd72 	bl	80080d6 <read_status_register>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	f043 0310 	orr.w	r3, r3, #16
 80085fc:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 80085fe:	7bba      	ldrb	r2, [r7, #14]
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	429a      	cmp	r2, r3
 8008604:	d005      	beq.n	8008612 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	461a      	mov	r2, r3
 800860a:	21b0      	movs	r1, #176	; 0xb0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fdab 	bl	8008168 <write_status_register>
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8008622:	21b0      	movs	r1, #176	; 0xb0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fd56 	bl	80080d6 <read_status_register>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	f043 0308 	orr.w	r3, r3, #8
 8008634:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8008636:	7bba      	ldrb	r2, [r7, #14]
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	429a      	cmp	r2, r3
 800863c:	d005      	beq.n	800864a <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	461a      	mov	r2, r3
 8008642:	21b0      	movs	r1, #176	; 0xb0
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fd8f 	bl	8008168 <write_status_register>
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8008652:	b580      	push	{r7, lr}
 8008654:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8008658:	af02      	add	r7, sp, #8
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 800865e:	f107 0108 	add.w	r1, r7, #8
 8008662:	1d38      	adds	r0, r7, #4
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2300      	movs	r3, #0
 800866a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800866e:	6800      	ldr	r0, [r0, #0]
 8008670:	f7ff ff77 	bl	8008562 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 800867a:	2300      	movs	r3, #0
 800867c:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8008680:	e00e      	b.n	80086a0 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 8008682:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8008686:	f107 0208 	add.w	r2, r7, #8
 800868a:	5cd3      	ldrb	r3, [r2, r3]
 800868c:	2bff      	cmp	r3, #255	; 0xff
 800868e:	d002      	beq.n	8008696 <find_write_ptr+0x44>
			first_page_empty = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8008696:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800869a:	3301      	adds	r3, #1
 800869c:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80086a0:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80086a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a8:	d3eb      	bcc.n	8008682 <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 80086aa:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <find_write_ptr+0x76>
		flash->current_page = 0;
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 80086bc:	1d3b      	adds	r3, r7, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80086c6:	e0f0      	b.n	80088aa <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 80086ce:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80086d2:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80086d6:	e041      	b.n	800875c <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 80086d8:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80086dc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4413      	add	r3, r2
 80086ee:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 80086f2:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80086f6:	f107 0108 	add.w	r1, r7, #8
 80086fa:	1d38      	adds	r0, r7, #4
 80086fc:	2200      	movs	r2, #0
 80086fe:	9200      	str	r2, [sp, #0]
 8008700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008704:	6800      	ldr	r0, [r0, #0]
 8008706:	f7ff ff2c 	bl	8008562 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8008710:	2300      	movs	r3, #0
 8008712:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8008716:	e00f      	b.n	8008738 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8008718:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	5cd3      	ldrb	r3, [r2, r3]
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d003      	beq.n	800872e <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 800872c:	e009      	b.n	8008742 <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 800872e:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8008732:	3301      	adds	r3, #1
 8008734:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8008738:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800873c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008740:	d3ea      	bcc.n	8008718 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8008742:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <find_write_ptr+0x102>
			max = cur_search_page;
 800874a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800874e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8008752:	e003      	b.n	800875c <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8008754:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8008758:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 800875c:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8008760:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b01      	cmp	r3, #1
 8008768:	d8b6      	bhi.n	80086d8 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 800876a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800876e:	b29a      	uxth	r2, r3
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	1d38      	adds	r0, r7, #4
 8008786:	2200      	movs	r2, #0
 8008788:	9200      	str	r2, [sp, #0]
 800878a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800878e:	6800      	ldr	r0, [r0, #0]
 8008790:	f7ff fee7 	bl	8008562 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8008794:	f107 0308 	add.w	r3, r7, #8
 8008798:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 800879c:	2bff      	cmp	r3, #255	; 0xff
 800879e:	d01e      	beq.n	80087de <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80087a8:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d106      	bne.n	80087be <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087b8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 80087bc:	e075      	b.n	80088aa <find_write_ptr+0x258>
			flash->current_page++;
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80087c6:	3301      	adds	r3, #1
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 80087d2:	1d3b      	adds	r3, r7, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80087dc:	e065      	b.n	80088aa <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 80087e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80087e8:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80087ec:	e019      	b.n	8008822 <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 80087ee:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80087f2:	f107 0208 	add.w	r2, r7, #8
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	2bff      	cmp	r3, #255	; 0xff
 80087fa:	d00b      	beq.n	8008814 <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 80087fc:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8008800:	3301      	adds	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	1d3b      	adds	r3, r7, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8008812:	e00a      	b.n	800882a <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8008814:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8008822:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8008826:	2b00      	cmp	r3, #0
 8008828:	dae1      	bge.n	80087ee <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008836:	d806      	bhi.n	8008846 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8008838:	1d3b      	adds	r3, r7, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008840:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008844:	e031      	b.n	80088aa <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800884e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008852:	d806      	bhi.n	8008862 <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8008854:	1d3b      	adds	r3, r7, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800885c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008860:	e023      	b.n	80088aa <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800886a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800886e:	d806      	bhi.n	800887e <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8008870:	1d3b      	adds	r3, r7, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008878:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800887c:	e015      	b.n	80088aa <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800888a:	d20e      	bcs.n	80088aa <find_write_ptr+0x258>
		flash->next_free_column = 0;
 800888c:	1d3b      	adds	r3, r7, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2200      	movs	r2, #0
 8008892:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 8008896:	1d3b      	adds	r3, r7, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800889e:	3301      	adds	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	1d3b      	adds	r3, r7, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 80088aa:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f837 	bl	8008974 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fe6b 	bl	80085e2 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff fe84 	bl	800861a <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fe9d 	bl	8008652 <find_write_ptr>
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8008928:	239f      	movs	r3, #159	; 0x9f
 800892a:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	f107 0110 	add.w	r1, r7, #16
 8008934:	2203      	movs	r2, #3
 8008936:	9200      	str	r2, [sp, #0]
 8008938:	2202      	movs	r2, #2
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fb8d 	bl	800805a <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8008940:	7b3b      	ldrb	r3, [r7, #12]
 8008942:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8008944:	7b7b      	ldrb	r3, [r7, #13]
 8008946:	b29b      	uxth	r3, r3
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b29a      	uxth	r2, r3
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	b29b      	uxth	r3, r3
 8008950:	4413      	add	r3, r2
 8008952:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	2bef      	cmp	r3, #239	; 0xef
 8008958:	d106      	bne.n	8008968 <ping_flash+0x48>
 800895a:	8abb      	ldrh	r3, [r7, #20]
 800895c:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8008960:	4293      	cmp	r3, r2
 8008962:	d101      	bne.n	8008968 <ping_flash+0x48>
		return 1;
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <ping_flash+0x4a>
	else
		return 0;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff fbc3 	bl	8008108 <flash_is_busy>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <reset_flash+0x18>
		return 0;
 8008988:	2300      	movs	r3, #0
 800898a:	e00d      	b.n	80089a8 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 800898c:	23ff      	movs	r3, #255	; 0xff
 800898e:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008990:	f107 030c 	add.w	r3, r7, #12
 8008994:	2201      	movs	r2, #1
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fb2e 	bl	8007ffa <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 800899e:	4904      	ldr	r1, [pc, #16]	; (80089b0 <reset_flash+0x3c>)
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff fbc3 	bl	800812c <wait_for_operation>

	return 1;
 80089a6:	2301      	movs	r3, #1
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	0007a120 	.word	0x0007a120

080089b4 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 80089c4:	2300      	movs	r3, #0
 80089c6:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 80089c8:	e05a      	b.n	8008a80 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 80089d6:	8a3a      	ldrh	r2, [r7, #16]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80089de:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80089e2:	429a      	cmp	r2, r3
 80089e4:	dd05      	ble.n	80089f2 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80089ec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80089f0:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	18d1      	adds	r1, r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008a04:	8a3a      	ldrh	r2, [r7, #16]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4603      	mov	r3, r0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7ff fdc6 	bl	800859c <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <write_to_flash_contiguous+0x6c>
			write_failures++;
 8008a1a:	8a7b      	ldrh	r3, [r7, #18]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8008a20:	8a3b      	ldrh	r3, [r7, #16]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008a2e:	461a      	mov	r2, r3
 8008a30:	8a3b      	ldrh	r3, [r7, #16]
 8008a32:	4413      	add	r3, r2
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a38:	da09      	bge.n	8008a4e <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8008a40:	8a3b      	ldrh	r3, [r7, #16]
 8008a42:	4413      	add	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008a4c:	e018      	b.n	8008a80 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8008a54:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d105      	bne.n	8008a68 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a62:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008a66:	e00b      	b.n	8008a80 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8008a76:	3301      	adds	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d3a0      	bcc.n	80089ca <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 8008a88:	8a7b      	ldrh	r3, [r7, #18]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b08c      	sub	sp, #48	; 0x30
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f967 	bl	8008d72 <get_bytes_remaining>
 8008aa4:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d901      	bls.n	8008ab2 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d035      	beq.n	8008b32 <write_to_flash+0xa0>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008acc:	461a      	mov	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad6:	d32c      	bcc.n	8008b32 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008ade:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ae2:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008ae8:	e00e      	b.n	8008b08 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8008aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	441a      	add	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008af6:	4619      	mov	r1, r3
 8008af8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008afa:	440b      	add	r3, r1
 8008afc:	7811      	ldrb	r1, [r2, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8008b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b04:	3301      	adds	r3, #1
 8008b06:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008b08:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008b0a:	8bfb      	ldrh	r3, [r7, #30]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d3ec      	bcc.n	8008aea <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b16:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8008b30:	e02a      	b.n	8008b88 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b42:	d221      	bcs.n	8008b88 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8008b44:	2300      	movs	r3, #0
 8008b46:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b48:	e00e      	b.n	8008b68 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8008b4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	441a      	add	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008b56:	4619      	mov	r1, r3
 8008b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b5a:	440b      	add	r3, r1
 8008b5c:	7811      	ldrb	r1, [r2, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8008b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b64:	3301      	adds	r3, #1
 8008b66:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d8ec      	bhi.n	8008b4a <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e04b      	b.n	8008c20 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9c:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff fb21 	bl	80081ee <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 8008bac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00f      	beq.n	8008bd4 <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7ff fef9 	bl	80089b4 <write_to_flash_contiguous>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bc8:	4413      	add	r3, r2
 8008bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff fee8 	bl	80089b4 <write_to_flash_contiguous>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bea:	4413      	add	r3, r2
 8008bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fb15 	bl	800821e <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008bf8:	e009      	b.n	8008c0e <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 8008bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	441a      	add	r2, r3
 8008c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c02:	7811      	ldrb	r1, [r2, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8008c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c10:	8afb      	ldrh	r3, [r7, #22]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d3f1      	bcc.n	8008bfa <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8afa      	ldrh	r2, [r7, #22]
 8008c1a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 8008c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3730      	adds	r7, #48	; 0x30
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10d      	bne.n	8008c56 <finish_flash_write+0x2e>
		return 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e036      	b.n	8008cac <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	b291      	uxth	r1, r2
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2100      	movs	r1, #0
 8008c54:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c60:	d3ed      	bcc.n	8008c3e <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f885 	bl	8008d72 <get_bytes_remaining>
 8008c68:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c70:	461a      	mov	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d204      	bcs.n	8008c82 <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff fab3 	bl	80081ee <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8008c88:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8008c90:	461a      	mov	r2, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fe8e 	bl	80089b4 <write_to_flash_contiguous>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff faba 	bl	800821e <lock_flash>

	return write_failures;
 8008caa:	897b      	ldrh	r3, [r7, #10]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	9200      	str	r2, [sp, #0]
 8008ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff fc38 	bl	8008562 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fbbf 	bl	8008484 <get_ECC_status>
}
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff fa67 	bl	80081ee <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8008d20:	2300      	movs	r3, #0
 8008d22:	81bb      	strh	r3, [r7, #12]
 8008d24:	e011      	b.n	8008d4a <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 8008d26:	89bb      	ldrh	r3, [r7, #12]
 8008d28:	019b      	lsls	r3, r3, #6
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fb78 	bl	8008424 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <erase_flash+0x36>
			erase_failures++;
 8008d3e:	89fb      	ldrh	r3, [r7, #14]
 8008d40:	3301      	adds	r3, #1
 8008d42:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8008d44:	89bb      	ldrh	r3, [r7, #12]
 8008d46:	3301      	adds	r3, #1
 8008d48:	81bb      	strh	r3, [r7, #12]
 8008d4a:	89bb      	ldrh	r3, [r7, #12]
 8008d4c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d9e8      	bls.n	8008d26 <erase_flash+0x18>
	}

	lock_flash(flash);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fa62 	bl	800821e <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff fc79 	bl	8008652 <find_write_ptr>
	flash->write_buffer_size = 0;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 8008d68:	89fb      	ldrh	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8008d80:	02db      	lsls	r3, r3, #11
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 8008d88:	4413      	add	r3, r2
 8008d8a:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 8008d8e:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8008d98:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b086      	sub	sp, #24
 8008daa:	af02      	add	r7, sp, #8
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	461a      	mov	r2, r3
 8008db2:	460b      	mov	r3, r1
 8008db4:	72fb      	strb	r3, [r7, #11]
 8008db6:	4613      	mov	r3, r2
 8008db8:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff fa17 	bl	80081ee <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 8008dc0:	7afb      	ldrb	r3, [r7, #11]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b40      	subs	r3, #64	; 0x40
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	893a      	ldrh	r2, [r7, #8]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	9100      	str	r1, [sp, #0]
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fbe3 	bl	800859c <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff fa21 	bl	800821e <lock_flash>

	return flash->last_write_failure_status;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af02      	add	r7, sp, #8
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	461a      	mov	r2, r3
 8008df6:	460b      	mov	r3, r1
 8008df8:	72fb      	strb	r3, [r7, #11]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 8008dfe:	7afb      	ldrb	r3, [r7, #11]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b40      	subs	r3, #64	; 0x40
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	893a      	ldrh	r2, [r7, #8]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	9100      	str	r1, [sp, #0]
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff fba7 	bl	8008562 <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff f9e2 	bl	80081ee <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 8008e2a:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff faf8 	bl	8008424 <erase_block>
	lock_flash(flash);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff f9f2 	bl	800821e <lock_flash>
	return flash->last_erase_failure_status;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	1d3b      	adds	r3, r7, #4
 8008e52:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 8008e54:	f107 0308 	add.w	r3, r7, #8
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f004 fd73 	bl	800d950 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 8008e6a:	f107 0108 	add.w	r1, r7, #8
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	f7ff fe0c 	bl	8008a92 <write_to_flash>
}
 8008e7a:	bf00      	nop
 8008e7c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e88:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <HAL_Init+0x40>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0d      	ldr	r2, [pc, #52]	; (8008ec4 <HAL_Init+0x40>)
 8008e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <HAL_Init+0x40>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <HAL_Init+0x40>)
 8008e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ea0:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <HAL_Init+0x40>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <HAL_Init+0x40>)
 8008ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008eac:	2003      	movs	r0, #3
 8008eae:	f000 f92b 	bl	8009108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f000 f808 	bl	8008ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008eb8:	f7fc fc16 	bl	80056e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40023c00 	.word	0x40023c00

08008ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <HAL_InitTick+0x54>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <HAL_InitTick+0x58>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 f943 	bl	8009172 <HAL_SYSTICK_Config>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e00e      	b.n	8008f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b0f      	cmp	r3, #15
 8008efa:	d80a      	bhi.n	8008f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008efc:	2200      	movs	r2, #0
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	f000 f90b 	bl	800911e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f08:	4a06      	ldr	r2, [pc, #24]	; (8008f24 <HAL_InitTick+0x5c>)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e000      	b.n	8008f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	200001a8 	.word	0x200001a8
 8008f20:	200001e4 	.word	0x200001e4
 8008f24:	200001e0 	.word	0x200001e0

08008f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <HAL_IncTick+0x20>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <HAL_IncTick+0x24>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4413      	add	r3, r2
 8008f38:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <HAL_IncTick+0x24>)
 8008f3a:	6013      	str	r3, [r2, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200001e4 	.word	0x200001e4
 8008f4c:	200024a8 	.word	0x200024a8

08008f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  return uwTick;
 8008f54:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <HAL_GetTick+0x14>)
 8008f56:	681b      	ldr	r3, [r3, #0]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200024a8 	.word	0x200024a8

08008f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <__NVIC_SetPriorityGrouping+0x44>)
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f84:	4013      	ands	r3, r2
 8008f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f9a:	4a04      	ldr	r2, [pc, #16]	; (8008fac <__NVIC_SetPriorityGrouping+0x44>)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	60d3      	str	r3, [r2, #12]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	f003 0307 	and.w	r3, r3, #7
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	e000ed00 	.word	0xe000ed00

08008fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	db0b      	blt.n	8008ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f003 021f 	and.w	r2, r3, #31
 8008fe4:	4907      	ldr	r1, [pc, #28]	; (8009004 <__NVIC_EnableIRQ+0x38>)
 8008fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	2001      	movs	r0, #1
 8008fee:	fa00 f202 	lsl.w	r2, r0, r2
 8008ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	e000e100 	.word	0xe000e100

08009008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db0a      	blt.n	8009032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	b2da      	uxtb	r2, r3
 8009020:	490c      	ldr	r1, [pc, #48]	; (8009054 <__NVIC_SetPriority+0x4c>)
 8009022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009026:	0112      	lsls	r2, r2, #4
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	440b      	add	r3, r1
 800902c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009030:	e00a      	b.n	8009048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	b2da      	uxtb	r2, r3
 8009036:	4908      	ldr	r1, [pc, #32]	; (8009058 <__NVIC_SetPriority+0x50>)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	3b04      	subs	r3, #4
 8009040:	0112      	lsls	r2, r2, #4
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	440b      	add	r3, r1
 8009046:	761a      	strb	r2, [r3, #24]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	e000e100 	.word	0xe000e100
 8009058:	e000ed00 	.word	0xe000ed00

0800905c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800905c:	b480      	push	{r7}
 800905e:	b089      	sub	sp, #36	; 0x24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f1c3 0307 	rsb	r3, r3, #7
 8009076:	2b04      	cmp	r3, #4
 8009078:	bf28      	it	cs
 800907a:	2304      	movcs	r3, #4
 800907c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	3304      	adds	r3, #4
 8009082:	2b06      	cmp	r3, #6
 8009084:	d902      	bls.n	800908c <NVIC_EncodePriority+0x30>
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	3b03      	subs	r3, #3
 800908a:	e000      	b.n	800908e <NVIC_EncodePriority+0x32>
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	43da      	mvns	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	401a      	ands	r2, r3
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090a4:	f04f 31ff 	mov.w	r1, #4294967295
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	fa01 f303 	lsl.w	r3, r1, r3
 80090ae:	43d9      	mvns	r1, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090b4:	4313      	orrs	r3, r2
         );
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3724      	adds	r7, #36	; 0x24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090d4:	d301      	bcc.n	80090da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090d6:	2301      	movs	r3, #1
 80090d8:	e00f      	b.n	80090fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090da:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <SysTick_Config+0x40>)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3b01      	subs	r3, #1
 80090e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090e2:	210f      	movs	r1, #15
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	f7ff ff8e 	bl	8009008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <SysTick_Config+0x40>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090f2:	4b04      	ldr	r3, [pc, #16]	; (8009104 <SysTick_Config+0x40>)
 80090f4:	2207      	movs	r2, #7
 80090f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	e000e010 	.word	0xe000e010

08009108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff ff29 	bl	8008f68 <__NVIC_SetPriorityGrouping>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	4603      	mov	r3, r0
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009130:	f7ff ff3e 	bl	8008fb0 <__NVIC_GetPriorityGrouping>
 8009134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	6978      	ldr	r0, [r7, #20]
 800913c:	f7ff ff8e 	bl	800905c <NVIC_EncodePriority>
 8009140:	4602      	mov	r2, r0
 8009142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff ff5d 	bl	8009008 <__NVIC_SetPriority>
}
 800914e:	bf00      	nop
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	4603      	mov	r3, r0
 800915e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff ff31 	bl	8008fcc <__NVIC_EnableIRQ>
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff ffa2 	bl	80090c4 <SysTick_Config>
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009198:	f7ff feda 	bl	8008f50 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e099      	b.n	80092dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091c8:	e00f      	b.n	80091ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091ca:	f7ff fec1 	bl	8008f50 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b05      	cmp	r3, #5
 80091d6:	d908      	bls.n	80091ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2220      	movs	r2, #32
 80091dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2203      	movs	r2, #3
 80091e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e078      	b.n	80092dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e8      	bne.n	80091ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4b38      	ldr	r3, [pc, #224]	; (80092e4 <HAL_DMA_Init+0x158>)
 8009204:	4013      	ands	r3, r2
 8009206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800922e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	4313      	orrs	r3, r2
 800923a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	2b04      	cmp	r3, #4
 8009242:	d107      	bne.n	8009254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	4313      	orrs	r3, r2
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	2b04      	cmp	r3, #4
 800927c:	d117      	bne.n	80092ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4313      	orrs	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fb01 	bl	8009898 <DMA_CheckFifoParam>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d008      	beq.n	80092ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2240      	movs	r2, #64	; 0x40
 80092a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80092aa:	2301      	movs	r3, #1
 80092ac:	e016      	b.n	80092dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fab8 	bl	800982c <DMA_CalcBaseAndBitshift>
 80092bc:	4603      	mov	r3, r0
 80092be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c4:	223f      	movs	r2, #63	; 0x3f
 80092c6:	409a      	lsls	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	f010803f 	.word	0xf010803f

080092e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_DMA_Start_IT+0x26>
 800930a:	2302      	movs	r3, #2
 800930c:	e040      	b.n	8009390 <HAL_DMA_Start_IT+0xa8>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d12f      	bne.n	8009382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fa4a 	bl	80097d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009340:	223f      	movs	r2, #63	; 0x3f
 8009342:	409a      	lsls	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0216 	orr.w	r2, r2, #22
 8009356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 0208 	orr.w	r2, r2, #8
 800936e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	e005      	b.n	800938e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800938a:	2302      	movs	r3, #2
 800938c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80093a6:	f7ff fdd3 	bl	8008f50 <HAL_GetTick>
 80093aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d008      	beq.n	80093ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2280      	movs	r2, #128	; 0x80
 80093bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e052      	b.n	8009470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0216 	bic.w	r2, r2, #22
 80093d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	695a      	ldr	r2, [r3, #20]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d103      	bne.n	80093fa <HAL_DMA_Abort+0x62>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0208 	bic.w	r2, r2, #8
 8009408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800941a:	e013      	b.n	8009444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800941c:	f7ff fd98 	bl	8008f50 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b05      	cmp	r3, #5
 8009428:	d90c      	bls.n	8009444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2203      	movs	r2, #3
 8009434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e015      	b.n	8009470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e4      	bne.n	800941c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009456:	223f      	movs	r2, #63	; 0x3f
 8009458:	409a      	lsls	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d004      	beq.n	8009496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2280      	movs	r2, #128	; 0x80
 8009490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e00c      	b.n	80094b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2205      	movs	r2, #5
 800949a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0201 	bic.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80094c8:	4b92      	ldr	r3, [pc, #584]	; (8009714 <HAL_DMA_IRQHandler+0x258>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a92      	ldr	r2, [pc, #584]	; (8009718 <HAL_DMA_IRQHandler+0x25c>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	0a9b      	lsrs	r3, r3, #10
 80094d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e6:	2208      	movs	r2, #8
 80094e8:	409a      	lsls	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4013      	ands	r3, r2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d013      	beq.n	8009528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0204 	bic.w	r2, r2, #4
 800950e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009514:	2208      	movs	r2, #8
 8009516:	409a      	lsls	r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009520:	f043 0201 	orr.w	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952c:	2201      	movs	r2, #1
 800952e:	409a      	lsls	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4013      	ands	r3, r2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d012      	beq.n	800955e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00b      	beq.n	800955e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800954a:	2201      	movs	r2, #1
 800954c:	409a      	lsls	r2, r3
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f043 0202 	orr.w	r2, r3, #2
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009562:	2204      	movs	r2, #4
 8009564:	409a      	lsls	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4013      	ands	r3, r2
 800956a:	2b00      	cmp	r3, #0
 800956c:	d012      	beq.n	8009594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009580:	2204      	movs	r2, #4
 8009582:	409a      	lsls	r2, r3
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958c:	f043 0204 	orr.w	r2, r3, #4
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009598:	2210      	movs	r2, #16
 800959a:	409a      	lsls	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4013      	ands	r3, r2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d043      	beq.n	800962c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0308 	and.w	r3, r3, #8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d03c      	beq.n	800962c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b6:	2210      	movs	r2, #16
 80095b8:	409a      	lsls	r2, r3
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d018      	beq.n	80095fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d108      	bne.n	80095ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d024      	beq.n	800962c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	e01f      	b.n	800962c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01b      	beq.n	800962c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
 80095fc:	e016      	b.n	800962c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009608:	2b00      	cmp	r3, #0
 800960a:	d107      	bne.n	800961c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0208 	bic.w	r2, r2, #8
 800961a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009630:	2220      	movs	r2, #32
 8009632:	409a      	lsls	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 808e 	beq.w	800975a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0310 	and.w	r3, r3, #16
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8086 	beq.w	800975a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009652:	2220      	movs	r2, #32
 8009654:	409a      	lsls	r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b05      	cmp	r3, #5
 8009664:	d136      	bne.n	80096d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0216 	bic.w	r2, r2, #22
 8009674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	695a      	ldr	r2, [r3, #20]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d103      	bne.n	8009696 <HAL_DMA_IRQHandler+0x1da>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0208 	bic.w	r2, r2, #8
 80096a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096aa:	223f      	movs	r2, #63	; 0x3f
 80096ac:	409a      	lsls	r2, r3
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d07d      	beq.n	80097c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
        }
        return;
 80096d2:	e078      	b.n	80097c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01c      	beq.n	800971c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d108      	bne.n	8009702 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d030      	beq.n	800975a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
 8009700:	e02b      	b.n	800975a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d027      	beq.n	800975a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
 8009712:	e022      	b.n	800975a <HAL_DMA_IRQHandler+0x29e>
 8009714:	200001a8 	.word	0x200001a8
 8009718:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10f      	bne.n	800974a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0210 	bic.w	r2, r2, #16
 8009738:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975e:	2b00      	cmp	r3, #0
 8009760:	d032      	beq.n	80097c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d022      	beq.n	80097b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2205      	movs	r2, #5
 8009772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	3301      	adds	r3, #1
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	429a      	cmp	r2, r3
 8009790:	d307      	bcc.n	80097a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1f2      	bne.n	8009786 <HAL_DMA_IRQHandler+0x2ca>
 80097a0:	e000      	b.n	80097a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80097a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
 80097c4:	e000      	b.n	80097c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80097c6:	bf00      	nop
    }
  }
}
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop

080097d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	2b40      	cmp	r3, #64	; 0x40
 80097fc:	d108      	bne.n	8009810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800980e:	e007      	b.n	8009820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	3b10      	subs	r3, #16
 800983c:	4a14      	ldr	r2, [pc, #80]	; (8009890 <DMA_CalcBaseAndBitshift+0x64>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	091b      	lsrs	r3, r3, #4
 8009844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009846:	4a13      	ldr	r2, [pc, #76]	; (8009894 <DMA_CalcBaseAndBitshift+0x68>)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b03      	cmp	r3, #3
 8009858:	d909      	bls.n	800986e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	1d1a      	adds	r2, r3, #4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	659a      	str	r2, [r3, #88]	; 0x58
 800986c:	e007      	b.n	800987e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	aaaaaaab 	.word	0xaaaaaaab
 8009894:	0800efc0 	.word	0x0800efc0

08009898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d11f      	bne.n	80098f2 <DMA_CheckFifoParam+0x5a>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d856      	bhi.n	8009966 <DMA_CheckFifoParam+0xce>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <DMA_CheckFifoParam+0x28>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098e3 	.word	0x080098e3
 80098c8:	080098d1 	.word	0x080098d1
 80098cc:	08009967 	.word	0x08009967
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d046      	beq.n	800996a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098e0:	e043      	b.n	800996a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80098ea:	d140      	bne.n	800996e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098f0:	e03d      	b.n	800996e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098fa:	d121      	bne.n	8009940 <DMA_CheckFifoParam+0xa8>
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d837      	bhi.n	8009972 <DMA_CheckFifoParam+0xda>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <DMA_CheckFifoParam+0x70>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009919 	.word	0x08009919
 800990c:	0800991f 	.word	0x0800991f
 8009910:	08009919 	.word	0x08009919
 8009914:	08009931 	.word	0x08009931
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
      break;
 800991c:	e030      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d025      	beq.n	8009976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800992e:	e022      	b.n	8009976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009938:	d11f      	bne.n	800997a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800993e:	e01c      	b.n	800997a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b02      	cmp	r3, #2
 8009944:	d903      	bls.n	800994e <DMA_CheckFifoParam+0xb6>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d003      	beq.n	8009954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800994c:	e018      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	73fb      	strb	r3, [r7, #15]
      break;
 8009952:	e015      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00e      	beq.n	800997e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
      break;
 8009964:	e00b      	b.n	800997e <DMA_CheckFifoParam+0xe6>
      break;
 8009966:	bf00      	nop
 8009968:	e00a      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;
 800996a:	bf00      	nop
 800996c:	e008      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;
 800996e:	bf00      	nop
 8009970:	e006      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;   
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
      break;
 800997e:	bf00      	nop
    }
  } 
  
  return status; 
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	e165      	b.n	8009c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099ac:	2201      	movs	r2, #1
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4013      	ands	r3, r2
 80099be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	f040 8154 	bne.w	8009c72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d005      	beq.n	80099e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d130      	bne.n	8009a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	2203      	movs	r2, #3
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43db      	mvns	r3, r3
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	4013      	ands	r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	fa02 f303 	lsl.w	r3, r2, r3
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a18:	2201      	movs	r2, #1
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a20:	43db      	mvns	r3, r3
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	4013      	ands	r3, r2
 8009a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	091b      	lsrs	r3, r3, #4
 8009a2e:	f003 0201 	and.w	r2, r3, #1
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	fa02 f303 	lsl.w	r3, r2, r3
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d017      	beq.n	8009a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a60:	43db      	mvns	r3, r3
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	4013      	ands	r3, r2
 8009a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d123      	bne.n	8009ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	08da      	lsrs	r2, r3, #3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3208      	adds	r2, #8
 8009a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	220f      	movs	r2, #15
 8009aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	4013      	ands	r3, r2
 8009aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	08da      	lsrs	r2, r3, #3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3208      	adds	r2, #8
 8009ace:	69b9      	ldr	r1, [r7, #24]
 8009ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	2203      	movs	r2, #3
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	43db      	mvns	r3, r3
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f003 0203 	and.w	r2, r3, #3
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80ae 	beq.w	8009c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	4b5d      	ldr	r3, [pc, #372]	; (8009c90 <HAL_GPIO_Init+0x300>)
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	4a5c      	ldr	r2, [pc, #368]	; (8009c90 <HAL_GPIO_Init+0x300>)
 8009b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b24:	6453      	str	r3, [r2, #68]	; 0x44
 8009b26:	4b5a      	ldr	r3, [pc, #360]	; (8009c90 <HAL_GPIO_Init+0x300>)
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b32:	4a58      	ldr	r2, [pc, #352]	; (8009c94 <HAL_GPIO_Init+0x304>)
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	089b      	lsrs	r3, r3, #2
 8009b38:	3302      	adds	r3, #2
 8009b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	220f      	movs	r2, #15
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	43db      	mvns	r3, r3
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	4013      	ands	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a4f      	ldr	r2, [pc, #316]	; (8009c98 <HAL_GPIO_Init+0x308>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d025      	beq.n	8009baa <HAL_GPIO_Init+0x21a>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a4e      	ldr	r2, [pc, #312]	; (8009c9c <HAL_GPIO_Init+0x30c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d01f      	beq.n	8009ba6 <HAL_GPIO_Init+0x216>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a4d      	ldr	r2, [pc, #308]	; (8009ca0 <HAL_GPIO_Init+0x310>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d019      	beq.n	8009ba2 <HAL_GPIO_Init+0x212>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a4c      	ldr	r2, [pc, #304]	; (8009ca4 <HAL_GPIO_Init+0x314>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d013      	beq.n	8009b9e <HAL_GPIO_Init+0x20e>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a4b      	ldr	r2, [pc, #300]	; (8009ca8 <HAL_GPIO_Init+0x318>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00d      	beq.n	8009b9a <HAL_GPIO_Init+0x20a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a4a      	ldr	r2, [pc, #296]	; (8009cac <HAL_GPIO_Init+0x31c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d007      	beq.n	8009b96 <HAL_GPIO_Init+0x206>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a49      	ldr	r2, [pc, #292]	; (8009cb0 <HAL_GPIO_Init+0x320>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d101      	bne.n	8009b92 <HAL_GPIO_Init+0x202>
 8009b8e:	2306      	movs	r3, #6
 8009b90:	e00c      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009b92:	2307      	movs	r3, #7
 8009b94:	e00a      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009b96:	2305      	movs	r3, #5
 8009b98:	e008      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009b9a:	2304      	movs	r3, #4
 8009b9c:	e006      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e004      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	e002      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <HAL_GPIO_Init+0x21c>
 8009baa:	2300      	movs	r3, #0
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	f002 0203 	and.w	r2, r2, #3
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	4093      	lsls	r3, r2
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009bbc:	4935      	ldr	r1, [pc, #212]	; (8009c94 <HAL_GPIO_Init+0x304>)
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	089b      	lsrs	r3, r3, #2
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009bca:	4b3a      	ldr	r3, [pc, #232]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009bee:	4a31      	ldr	r2, [pc, #196]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009bf4:	4b2f      	ldr	r3, [pc, #188]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	43db      	mvns	r3, r3
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	4013      	ands	r3, r2
 8009c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c18:	4a26      	ldr	r2, [pc, #152]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c1e:	4b25      	ldr	r3, [pc, #148]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	43db      	mvns	r3, r3
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c42:	4a1c      	ldr	r2, [pc, #112]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c48:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	4013      	ands	r3, r2
 8009c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c6c:	4a11      	ldr	r2, [pc, #68]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	3301      	adds	r3, #1
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	f67f ae96 	bls.w	80099ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	3724      	adds	r7, #36	; 0x24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	40023800 	.word	0x40023800
 8009c94:	40013800 	.word	0x40013800
 8009c98:	40020000 	.word	0x40020000
 8009c9c:	40020400 	.word	0x40020400
 8009ca0:	40020800 	.word	0x40020800
 8009ca4:	40020c00 	.word	0x40020c00
 8009ca8:	40021000 	.word	0x40021000
 8009cac:	40021400 	.word	0x40021400
 8009cb0:	40021800 	.word	0x40021800
 8009cb4:	40013c00 	.word	0x40013c00

08009cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	887b      	ldrh	r3, [r7, #2]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	e001      	b.n	8009cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	807b      	strh	r3, [r7, #2]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009cf8:	787b      	ldrb	r3, [r7, #1]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cfe:	887a      	ldrh	r2, [r7, #2]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d04:	e003      	b.n	8009d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d06:	887b      	ldrh	r3, [r7, #2]
 8009d08:	041a      	lsls	r2, r3, #16
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	619a      	str	r2, [r3, #24]
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d2c:	887a      	ldrh	r2, [r7, #2]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4013      	ands	r3, r2
 8009d32:	041a      	lsls	r2, r3, #16
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	43d9      	mvns	r1, r3
 8009d38:	887b      	ldrh	r3, [r7, #2]
 8009d3a:	400b      	ands	r3, r1
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	619a      	str	r2, [r3, #24]
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e034      	b.n	8009dca <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009d68:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8009d72:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6852      	ldr	r2, [r2, #4]
 8009d7c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6892      	ldr	r2, [r2, #8]
 8009d86:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009d88:	f7ff f8e2 	bl	8008f50 <HAL_GetTick>
 8009d8c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d8e:	e00f      	b.n	8009db0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009d90:	f7ff f8de 	bl	8008f50 <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	2b31      	cmp	r3, #49	; 0x31
 8009d9c:	d908      	bls.n	8009db0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e00c      	b.n	8009dca <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e8      	bne.n	8009d90 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009dc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009de2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0cc      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e08:	4b68      	ldr	r3, [pc, #416]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 030f 	and.w	r3, r3, #15
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d90c      	bls.n	8009e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e16:	4b65      	ldr	r3, [pc, #404]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e1e:	4b63      	ldr	r3, [pc, #396]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d001      	beq.n	8009e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0b8      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d020      	beq.n	8009e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e48:	4b59      	ldr	r3, [pc, #356]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	4a58      	ldr	r2, [pc, #352]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e60:	4b53      	ldr	r3, [pc, #332]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	4a52      	ldr	r2, [pc, #328]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e6c:	4b50      	ldr	r3, [pc, #320]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	494d      	ldr	r1, [pc, #308]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d044      	beq.n	8009f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d107      	bne.n	8009ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e92:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d119      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e07f      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eb2:	4b3f      	ldr	r3, [pc, #252]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e06f      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ec2:	4b3b      	ldr	r3, [pc, #236]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e067      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ed2:	4b37      	ldr	r3, [pc, #220]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f023 0203 	bic.w	r2, r3, #3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	4934      	ldr	r1, [pc, #208]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ee4:	f7ff f834 	bl	8008f50 <HAL_GetTick>
 8009ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eea:	e00a      	b.n	8009f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eec:	f7ff f830 	bl	8008f50 <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d901      	bls.n	8009f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e04f      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f02:	4b2b      	ldr	r3, [pc, #172]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 020c 	and.w	r2, r3, #12
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d1eb      	bne.n	8009eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f14:	4b25      	ldr	r3, [pc, #148]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d20c      	bcs.n	8009f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f22:	4b22      	ldr	r3, [pc, #136]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2a:	4b20      	ldr	r3, [pc, #128]	; (8009fac <HAL_RCC_ClockConfig+0x1b8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d001      	beq.n	8009f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e032      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f48:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	4916      	ldr	r1, [pc, #88]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f66:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	490e      	ldr	r1, [pc, #56]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f7a:	f000 f855 	bl	800a028 <HAL_RCC_GetSysClockFreq>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	091b      	lsrs	r3, r3, #4
 8009f86:	f003 030f 	and.w	r3, r3, #15
 8009f8a:	490a      	ldr	r1, [pc, #40]	; (8009fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f8c:	5ccb      	ldrb	r3, [r1, r3]
 8009f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f92:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8009f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f96:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <HAL_RCC_ClockConfig+0x1c8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe ff94 	bl	8008ec8 <HAL_InitTick>

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	40023c00 	.word	0x40023c00
 8009fb0:	40023800 	.word	0x40023800
 8009fb4:	0800eb58 	.word	0x0800eb58
 8009fb8:	200001a8 	.word	0x200001a8
 8009fbc:	200001e0 	.word	0x200001e0

08009fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	200001a8 	.word	0x200001a8

08009fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fdc:	f7ff fff0 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	0a9b      	lsrs	r3, r3, #10
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	4903      	ldr	r1, [pc, #12]	; (8009ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fee:	5ccb      	ldrb	r3, [r1, r3]
 8009ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	0800eb68 	.word	0x0800eb68

0800a000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a004:	f7ff ffdc 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 800a008:	4602      	mov	r2, r0
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	0b5b      	lsrs	r3, r3, #13
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	4903      	ldr	r1, [pc, #12]	; (800a024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a016:	5ccb      	ldrb	r3, [r1, r3]
 800a018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40023800 	.word	0x40023800
 800a024:	0800eb68 	.word	0x0800eb68

0800a028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a044:	4bce      	ldr	r3, [pc, #824]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f003 030c 	and.w	r3, r3, #12
 800a04c:	2b0c      	cmp	r3, #12
 800a04e:	f200 818d 	bhi.w	800a36c <HAL_RCC_GetSysClockFreq+0x344>
 800a052:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <HAL_RCC_GetSysClockFreq+0x30>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a36d 	.word	0x0800a36d
 800a060:	0800a36d 	.word	0x0800a36d
 800a064:	0800a36d 	.word	0x0800a36d
 800a068:	0800a093 	.word	0x0800a093
 800a06c:	0800a36d 	.word	0x0800a36d
 800a070:	0800a36d 	.word	0x0800a36d
 800a074:	0800a36d 	.word	0x0800a36d
 800a078:	0800a099 	.word	0x0800a099
 800a07c:	0800a36d 	.word	0x0800a36d
 800a080:	0800a36d 	.word	0x0800a36d
 800a084:	0800a36d 	.word	0x0800a36d
 800a088:	0800a20d 	.word	0x0800a20d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a08c:	4bbd      	ldr	r3, [pc, #756]	; (800a384 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a08e:	61bb      	str	r3, [r7, #24]
       break;
 800a090:	e16f      	b.n	800a372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a092:	4bbc      	ldr	r3, [pc, #752]	; (800a384 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a094:	61bb      	str	r3, [r7, #24]
      break;
 800a096:	e16c      	b.n	800a372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a098:	4bb9      	ldr	r3, [pc, #740]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0a2:	4bb7      	ldr	r3, [pc, #732]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d053      	beq.n	800a156 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0ae:	4bb4      	ldr	r3, [pc, #720]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	099b      	lsrs	r3, r3, #6
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a0be:	f04f 0100 	mov.w	r1, #0
 800a0c2:	ea02 0400 	and.w	r4, r2, r0
 800a0c6:	603c      	str	r4, [r7, #0]
 800a0c8:	400b      	ands	r3, r1
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	014b      	lsls	r3, r1, #5
 800a0de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a0e2:	0142      	lsls	r2, r0, #5
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	1ac0      	subs	r0, r0, r3
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	eb61 0103 	sbc.w	r1, r1, r3
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	018b      	lsls	r3, r1, #6
 800a0fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a100:	0182      	lsls	r2, r0, #6
 800a102:	1a12      	subs	r2, r2, r0
 800a104:	eb63 0301 	sbc.w	r3, r3, r1
 800a108:	f04f 0000 	mov.w	r0, #0
 800a10c:	f04f 0100 	mov.w	r1, #0
 800a110:	00d9      	lsls	r1, r3, #3
 800a112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a116:	00d0      	lsls	r0, r2, #3
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4621      	mov	r1, r4
 800a11e:	1852      	adds	r2, r2, r1
 800a120:	4629      	mov	r1, r5
 800a122:	eb43 0101 	adc.w	r1, r3, r1
 800a126:	460b      	mov	r3, r1
 800a128:	f04f 0000 	mov.w	r0, #0
 800a12c:	f04f 0100 	mov.w	r1, #0
 800a130:	0299      	lsls	r1, r3, #10
 800a132:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a136:	0290      	lsls	r0, r2, #10
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4610      	mov	r0, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	461a      	mov	r2, r3
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	f7f6 fd62 	bl	8000c10 <__aeabi_uldivmod>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4613      	mov	r3, r2
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	e04c      	b.n	800a1f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a156:	4b8a      	ldr	r3, [pc, #552]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	099b      	lsrs	r3, r3, #6
 800a15c:	461a      	mov	r2, r3
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a166:	f04f 0100 	mov.w	r1, #0
 800a16a:	ea02 0a00 	and.w	sl, r2, r0
 800a16e:	ea03 0b01 	and.w	fp, r3, r1
 800a172:	4650      	mov	r0, sl
 800a174:	4659      	mov	r1, fp
 800a176:	f04f 0200 	mov.w	r2, #0
 800a17a:	f04f 0300 	mov.w	r3, #0
 800a17e:	014b      	lsls	r3, r1, #5
 800a180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a184:	0142      	lsls	r2, r0, #5
 800a186:	4610      	mov	r0, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	ebb0 000a 	subs.w	r0, r0, sl
 800a18e:	eb61 010b 	sbc.w	r1, r1, fp
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	018b      	lsls	r3, r1, #6
 800a19c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a1a0:	0182      	lsls	r2, r0, #6
 800a1a2:	1a12      	subs	r2, r2, r0
 800a1a4:	eb63 0301 	sbc.w	r3, r3, r1
 800a1a8:	f04f 0000 	mov.w	r0, #0
 800a1ac:	f04f 0100 	mov.w	r1, #0
 800a1b0:	00d9      	lsls	r1, r3, #3
 800a1b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1b6:	00d0      	lsls	r0, r2, #3
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	eb12 020a 	adds.w	r2, r2, sl
 800a1c0:	eb43 030b 	adc.w	r3, r3, fp
 800a1c4:	f04f 0000 	mov.w	r0, #0
 800a1c8:	f04f 0100 	mov.w	r1, #0
 800a1cc:	0299      	lsls	r1, r3, #10
 800a1ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a1d2:	0290      	lsls	r0, r2, #10
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f04f 0300 	mov.w	r3, #0
 800a1e4:	f7f6 fd14 	bl	8000c10 <__aeabi_uldivmod>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1f0:	4b63      	ldr	r3, [pc, #396]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800a200:	69fa      	ldr	r2, [r7, #28]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	fbb2 f3f3 	udiv	r3, r2, r3
 800a208:	61bb      	str	r3, [r7, #24]
      break;
 800a20a:	e0b2      	b.n	800a372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a20c:	4b5c      	ldr	r3, [pc, #368]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a214:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a216:	4b5a      	ldr	r3, [pc, #360]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d04d      	beq.n	800a2be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a222:	4b57      	ldr	r3, [pc, #348]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	461a      	mov	r2, r3
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a232:	f04f 0100 	mov.w	r1, #0
 800a236:	ea02 0800 	and.w	r8, r2, r0
 800a23a:	ea03 0901 	and.w	r9, r3, r1
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	014b      	lsls	r3, r1, #5
 800a24c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a250:	0142      	lsls	r2, r0, #5
 800a252:	4610      	mov	r0, r2
 800a254:	4619      	mov	r1, r3
 800a256:	ebb0 0008 	subs.w	r0, r0, r8
 800a25a:	eb61 0109 	sbc.w	r1, r1, r9
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	018b      	lsls	r3, r1, #6
 800a268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a26c:	0182      	lsls	r2, r0, #6
 800a26e:	1a12      	subs	r2, r2, r0
 800a270:	eb63 0301 	sbc.w	r3, r3, r1
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f04f 0100 	mov.w	r1, #0
 800a27c:	00d9      	lsls	r1, r3, #3
 800a27e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a282:	00d0      	lsls	r0, r2, #3
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	eb12 0208 	adds.w	r2, r2, r8
 800a28c:	eb43 0309 	adc.w	r3, r3, r9
 800a290:	f04f 0000 	mov.w	r0, #0
 800a294:	f04f 0100 	mov.w	r1, #0
 800a298:	0299      	lsls	r1, r3, #10
 800a29a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a29e:	0290      	lsls	r0, r2, #10
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	f7f6 fcae 	bl	8000c10 <__aeabi_uldivmod>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	e04a      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2be:	4b30      	ldr	r3, [pc, #192]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	099b      	lsrs	r3, r3, #6
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f04f 0300 	mov.w	r3, #0
 800a2ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a2ce:	f04f 0100 	mov.w	r1, #0
 800a2d2:	ea02 0400 	and.w	r4, r2, r0
 800a2d6:	ea03 0501 	and.w	r5, r3, r1
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	014b      	lsls	r3, r1, #5
 800a2e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a2ec:	0142      	lsls	r2, r0, #5
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	1b00      	subs	r0, r0, r4
 800a2f4:	eb61 0105 	sbc.w	r1, r1, r5
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	018b      	lsls	r3, r1, #6
 800a302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a306:	0182      	lsls	r2, r0, #6
 800a308:	1a12      	subs	r2, r2, r0
 800a30a:	eb63 0301 	sbc.w	r3, r3, r1
 800a30e:	f04f 0000 	mov.w	r0, #0
 800a312:	f04f 0100 	mov.w	r1, #0
 800a316:	00d9      	lsls	r1, r3, #3
 800a318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a31c:	00d0      	lsls	r0, r2, #3
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	1912      	adds	r2, r2, r4
 800a324:	eb45 0303 	adc.w	r3, r5, r3
 800a328:	f04f 0000 	mov.w	r0, #0
 800a32c:	f04f 0100 	mov.w	r1, #0
 800a330:	0299      	lsls	r1, r3, #10
 800a332:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a336:	0290      	lsls	r0, r2, #10
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4610      	mov	r0, r2
 800a33e:	4619      	mov	r1, r3
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	461a      	mov	r2, r3
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	f7f6 fc62 	bl	8000c10 <__aeabi_uldivmod>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4613      	mov	r3, r2
 800a352:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a354:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <HAL_RCC_GetSysClockFreq+0x358>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	0f1b      	lsrs	r3, r3, #28
 800a35a:	f003 0307 	and.w	r3, r3, #7
 800a35e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	fbb2 f3f3 	udiv	r3, r2, r3
 800a368:	61bb      	str	r3, [r7, #24]
      break;
 800a36a:	e002      	b.n	800a372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a36e:	61bb      	str	r3, [r7, #24]
      break;
 800a370:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a372:	69bb      	ldr	r3, [r7, #24]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a37e:	bf00      	nop
 800a380:	40023800 	.word	0x40023800
 800a384:	00f42400 	.word	0x00f42400

0800a388 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e28d      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 8083 	beq.w	800a4ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a3a8:	4b94      	ldr	r3, [pc, #592]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 030c 	and.w	r3, r3, #12
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d019      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a3b4:	4b91      	ldr	r3, [pc, #580]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d106      	bne.n	800a3ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a3c0:	4b8e      	ldr	r3, [pc, #568]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3ce:	4b8b      	ldr	r3, [pc, #556]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a3d6:	2b0c      	cmp	r3, #12
 800a3d8:	d112      	bne.n	800a400 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3da:	4b88      	ldr	r3, [pc, #544]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3e6:	d10b      	bne.n	800a400 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e8:	4b84      	ldr	r3, [pc, #528]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d05b      	beq.n	800a4ac <HAL_RCC_OscConfig+0x124>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d157      	bne.n	800a4ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e25a      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a408:	d106      	bne.n	800a418 <HAL_RCC_OscConfig+0x90>
 800a40a:	4b7c      	ldr	r3, [pc, #496]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a7b      	ldr	r2, [pc, #492]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	e01d      	b.n	800a454 <HAL_RCC_OscConfig+0xcc>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a420:	d10c      	bne.n	800a43c <HAL_RCC_OscConfig+0xb4>
 800a422:	4b76      	ldr	r3, [pc, #472]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a75      	ldr	r2, [pc, #468]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	4b73      	ldr	r3, [pc, #460]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a72      	ldr	r2, [pc, #456]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	e00b      	b.n	800a454 <HAL_RCC_OscConfig+0xcc>
 800a43c:	4b6f      	ldr	r3, [pc, #444]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a6e      	ldr	r2, [pc, #440]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	4b6c      	ldr	r3, [pc, #432]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a6b      	ldr	r2, [pc, #428]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a44e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d013      	beq.n	800a484 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a45c:	f7fe fd78 	bl	8008f50 <HAL_GetTick>
 800a460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a464:	f7fe fd74 	bl	8008f50 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b64      	cmp	r3, #100	; 0x64
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e21f      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a476:	4b61      	ldr	r3, [pc, #388]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0f0      	beq.n	800a464 <HAL_RCC_OscConfig+0xdc>
 800a482:	e014      	b.n	800a4ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a484:	f7fe fd64 	bl	8008f50 <HAL_GetTick>
 800a488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a48c:	f7fe fd60 	bl	8008f50 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b64      	cmp	r3, #100	; 0x64
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e20b      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a49e:	4b57      	ldr	r3, [pc, #348]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f0      	bne.n	800a48c <HAL_RCC_OscConfig+0x104>
 800a4aa:	e000      	b.n	800a4ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d06f      	beq.n	800a59a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a4ba:	4b50      	ldr	r3, [pc, #320]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f003 030c 	and.w	r3, r3, #12
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d017      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a4c6:	4b4d      	ldr	r3, [pc, #308]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d105      	bne.n	800a4de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a4d2:	4b4a      	ldr	r3, [pc, #296]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4de:	4b47      	ldr	r3, [pc, #284]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a4e6:	2b0c      	cmp	r3, #12
 800a4e8:	d11c      	bne.n	800a524 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4ea:	4b44      	ldr	r3, [pc, #272]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d116      	bne.n	800a524 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4f6:	4b41      	ldr	r3, [pc, #260]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <HAL_RCC_OscConfig+0x186>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d001      	beq.n	800a50e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e1d3      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a50e:	4b3b      	ldr	r3, [pc, #236]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4937      	ldr	r1, [pc, #220]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a522:	e03a      	b.n	800a59a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d020      	beq.n	800a56e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a52c:	4b34      	ldr	r3, [pc, #208]	; (800a600 <HAL_RCC_OscConfig+0x278>)
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a532:	f7fe fd0d 	bl	8008f50 <HAL_GetTick>
 800a536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a538:	e008      	b.n	800a54c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a53a:	f7fe fd09 	bl	8008f50 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d901      	bls.n	800a54c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e1b4      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a54c:	4b2b      	ldr	r3, [pc, #172]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0f0      	beq.n	800a53a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a558:	4b28      	ldr	r3, [pc, #160]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	4925      	ldr	r1, [pc, #148]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	600b      	str	r3, [r1, #0]
 800a56c:	e015      	b.n	800a59a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <HAL_RCC_OscConfig+0x278>)
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a574:	f7fe fcec 	bl	8008f50 <HAL_GetTick>
 800a578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a57a:	e008      	b.n	800a58e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a57c:	f7fe fce8 	bl	8008f50 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d901      	bls.n	800a58e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e193      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a58e:	4b1b      	ldr	r3, [pc, #108]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1f0      	bne.n	800a57c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d036      	beq.n	800a614 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d016      	beq.n	800a5dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5ae:	4b15      	ldr	r3, [pc, #84]	; (800a604 <HAL_RCC_OscConfig+0x27c>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5b4:	f7fe fccc 	bl	8008f50 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5bc:	f7fe fcc8 	bl	8008f50 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e173      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <HAL_RCC_OscConfig+0x274>)
 800a5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f0      	beq.n	800a5bc <HAL_RCC_OscConfig+0x234>
 800a5da:	e01b      	b.n	800a614 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <HAL_RCC_OscConfig+0x27c>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e2:	f7fe fcb5 	bl	8008f50 <HAL_GetTick>
 800a5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5e8:	e00e      	b.n	800a608 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5ea:	f7fe fcb1 	bl	8008f50 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d907      	bls.n	800a608 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e15c      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
 800a5fc:	40023800 	.word	0x40023800
 800a600:	42470000 	.word	0x42470000
 800a604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a608:	4b8a      	ldr	r3, [pc, #552]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1ea      	bne.n	800a5ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0304 	and.w	r3, r3, #4
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8097 	beq.w	800a750 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a622:	2300      	movs	r3, #0
 800a624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a626:	4b83      	ldr	r3, [pc, #524]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10f      	bne.n	800a652 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a632:	2300      	movs	r3, #0
 800a634:	60bb      	str	r3, [r7, #8]
 800a636:	4b7f      	ldr	r3, [pc, #508]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	4a7e      	ldr	r2, [pc, #504]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a640:	6413      	str	r3, [r2, #64]	; 0x40
 800a642:	4b7c      	ldr	r3, [pc, #496]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a64a:	60bb      	str	r3, [r7, #8]
 800a64c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a64e:	2301      	movs	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a652:	4b79      	ldr	r3, [pc, #484]	; (800a838 <HAL_RCC_OscConfig+0x4b0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d118      	bne.n	800a690 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a65e:	4b76      	ldr	r3, [pc, #472]	; (800a838 <HAL_RCC_OscConfig+0x4b0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a75      	ldr	r2, [pc, #468]	; (800a838 <HAL_RCC_OscConfig+0x4b0>)
 800a664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a66a:	f7fe fc71 	bl	8008f50 <HAL_GetTick>
 800a66e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a670:	e008      	b.n	800a684 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a672:	f7fe fc6d 	bl	8008f50 <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e118      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a684:	4b6c      	ldr	r3, [pc, #432]	; (800a838 <HAL_RCC_OscConfig+0x4b0>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0f0      	beq.n	800a672 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d106      	bne.n	800a6a6 <HAL_RCC_OscConfig+0x31e>
 800a698:	4b66      	ldr	r3, [pc, #408]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69c:	4a65      	ldr	r2, [pc, #404]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6a4:	e01c      	b.n	800a6e0 <HAL_RCC_OscConfig+0x358>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d10c      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x340>
 800a6ae:	4b61      	ldr	r3, [pc, #388]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b2:	4a60      	ldr	r2, [pc, #384]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6b4:	f043 0304 	orr.w	r3, r3, #4
 800a6b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a6ba:	4b5e      	ldr	r3, [pc, #376]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6be:	4a5d      	ldr	r2, [pc, #372]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6c0:	f043 0301 	orr.w	r3, r3, #1
 800a6c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a6c6:	e00b      	b.n	800a6e0 <HAL_RCC_OscConfig+0x358>
 800a6c8:	4b5a      	ldr	r3, [pc, #360]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6cc:	4a59      	ldr	r2, [pc, #356]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6d4:	4b57      	ldr	r3, [pc, #348]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d8:	4a56      	ldr	r2, [pc, #344]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a6da:	f023 0304 	bic.w	r3, r3, #4
 800a6de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d015      	beq.n	800a714 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6e8:	f7fe fc32 	bl	8008f50 <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6ee:	e00a      	b.n	800a706 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6f0:	f7fe fc2e 	bl	8008f50 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d901      	bls.n	800a706 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	e0d7      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a706:	4b4b      	ldr	r3, [pc, #300]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0ee      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x368>
 800a712:	e014      	b.n	800a73e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a714:	f7fe fc1c 	bl	8008f50 <HAL_GetTick>
 800a718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a71a:	e00a      	b.n	800a732 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a71c:	f7fe fc18 	bl	8008f50 <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d901      	bls.n	800a732 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e0c1      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a732:	4b40      	ldr	r3, [pc, #256]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1ee      	bne.n	800a71c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d105      	bne.n	800a750 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a744:	4b3b      	ldr	r3, [pc, #236]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	4a3a      	ldr	r2, [pc, #232]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a74e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80ad 	beq.w	800a8b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a75a:	4b36      	ldr	r3, [pc, #216]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f003 030c 	and.w	r3, r3, #12
 800a762:	2b08      	cmp	r3, #8
 800a764:	d060      	beq.n	800a828 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d145      	bne.n	800a7fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a76e:	4b33      	ldr	r3, [pc, #204]	; (800a83c <HAL_RCC_OscConfig+0x4b4>)
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a774:	f7fe fbec 	bl	8008f50 <HAL_GetTick>
 800a778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a77c:	f7fe fbe8 	bl	8008f50 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e093      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f0      	bne.n	800a77c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69da      	ldr	r2, [r3, #28]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	019b      	lsls	r3, r3, #6
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	085b      	lsrs	r3, r3, #1
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	041b      	lsls	r3, r3, #16
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	061b      	lsls	r3, r3, #24
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	071b      	lsls	r3, r3, #28
 800a7c6:	491b      	ldr	r1, [pc, #108]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7cc:	4b1b      	ldr	r3, [pc, #108]	; (800a83c <HAL_RCC_OscConfig+0x4b4>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7d2:	f7fe fbbd 	bl	8008f50 <HAL_GetTick>
 800a7d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7d8:	e008      	b.n	800a7ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7da:	f7fe fbb9 	bl	8008f50 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d901      	bls.n	800a7ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e064      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0f0      	beq.n	800a7da <HAL_RCC_OscConfig+0x452>
 800a7f8:	e05c      	b.n	800a8b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7fa:	4b10      	ldr	r3, [pc, #64]	; (800a83c <HAL_RCC_OscConfig+0x4b4>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a800:	f7fe fba6 	bl	8008f50 <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a808:	f7fe fba2 	bl	8008f50 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b02      	cmp	r3, #2
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e04d      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <HAL_RCC_OscConfig+0x4ac>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x480>
 800a826:	e045      	b.n	800a8b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d107      	bne.n	800a840 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e040      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
 800a834:	40023800 	.word	0x40023800
 800a838:	40007000 	.word	0x40007000
 800a83c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a840:	4b1f      	ldr	r3, [pc, #124]	; (800a8c0 <HAL_RCC_OscConfig+0x538>)
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d030      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a858:	429a      	cmp	r2, r3
 800a85a:	d129      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a866:	429a      	cmp	r2, r3
 800a868:	d122      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a870:	4013      	ands	r3, r2
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a878:	4293      	cmp	r3, r2
 800a87a:	d119      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	3b01      	subs	r3, #1
 800a88a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d10f      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d107      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d001      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	40023800 	.word	0x40023800

0800a8c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e07b      	b.n	800a9ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d108      	bne.n	800a8f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8e6:	d009      	beq.n	800a8fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	61da      	str	r2, [r3, #28]
 800a8ee:	e005      	b.n	800a8fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7fa ff0e 	bl	8005738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a932:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a94e:	431a      	orrs	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	431a      	orrs	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	431a      	orrs	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	ea42 0103 	orr.w	r1, r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a988:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	0c1b      	lsrs	r3, r3, #16
 800a99a:	f003 0104 	and.w	r1, r3, #4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	f003 0210 	and.w	r2, r3, #16
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69da      	ldr	r2, [r3, #28]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b088      	sub	sp, #32
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d101      	bne.n	800a9f8 <HAL_SPI_Transmit+0x22>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e126      	b.n	800ac46 <HAL_SPI_Transmit+0x270>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa00:	f7fe faa6 	bl	8008f50 <HAL_GetTick>
 800aa04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d002      	beq.n	800aa1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa16:	2302      	movs	r3, #2
 800aa18:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa1a:	e10b      	b.n	800ac34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <HAL_SPI_Transmit+0x52>
 800aa22:	88fb      	ldrh	r3, [r7, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa2c:	e102      	b.n	800ac34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2203      	movs	r2, #3
 800aa32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	88fa      	ldrh	r2, [r7, #6]
 800aa46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	88fa      	ldrh	r2, [r7, #6]
 800aa4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa74:	d10f      	bne.n	800aa96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa0:	2b40      	cmp	r3, #64	; 0x40
 800aaa2:	d007      	beq.n	800aab4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aabc:	d14b      	bne.n	800ab56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <HAL_SPI_Transmit+0xf6>
 800aac6:	8afb      	ldrh	r3, [r7, #22]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d13e      	bne.n	800ab4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad0:	881a      	ldrh	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aadc:	1c9a      	adds	r2, r3, #2
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aaf0:	e02b      	b.n	800ab4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d112      	bne.n	800ab26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab04:	881a      	ldrh	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	1c9a      	adds	r2, r3, #2
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab24:	e011      	b.n	800ab4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab26:	f7fe fa13 	bl	8008f50 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d803      	bhi.n	800ab3e <HAL_SPI_Transmit+0x168>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3c:	d102      	bne.n	800ab44 <HAL_SPI_Transmit+0x16e>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab48:	e074      	b.n	800ac34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1ce      	bne.n	800aaf2 <HAL_SPI_Transmit+0x11c>
 800ab54:	e04c      	b.n	800abf0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <HAL_SPI_Transmit+0x18e>
 800ab5e:	8afb      	ldrh	r3, [r7, #22]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d140      	bne.n	800abe6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	3b01      	subs	r3, #1
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ab8a:	e02c      	b.n	800abe6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 0302 	and.w	r3, r3, #2
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d113      	bne.n	800abc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	330c      	adds	r3, #12
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	86da      	strh	r2, [r3, #54]	; 0x36
 800abc0:	e011      	b.n	800abe6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abc2:	f7fe f9c5 	bl	8008f50 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d803      	bhi.n	800abda <HAL_SPI_Transmit+0x204>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d102      	bne.n	800abe0 <HAL_SPI_Transmit+0x20a>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d102      	bne.n	800abe6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800abe4:	e026      	b.n	800ac34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abea:	b29b      	uxth	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1cd      	bne.n	800ab8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fbcb 	bl	800b390 <SPI_EndRxTxTransaction>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2220      	movs	r2, #32
 800ac04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac0e:	2300      	movs	r3, #0
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	77fb      	strb	r3, [r7, #31]
 800ac30:	e000      	b.n	800ac34 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ac32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac44:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b088      	sub	sp, #32
 800ac52:	af02      	add	r7, sp, #8
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	603b      	str	r3, [r7, #0]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac6a:	d112      	bne.n	800ac92 <HAL_SPI_Receive+0x44>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10e      	bne.n	800ac92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2204      	movs	r2, #4
 800ac78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac7c:	88fa      	ldrh	r2, [r7, #6]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4613      	mov	r3, r2
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f8f1 	bl	800ae70 <HAL_SPI_TransmitReceive>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e0ea      	b.n	800ae68 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_SPI_Receive+0x52>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e0e3      	b.n	800ae68 <HAL_SPI_Receive+0x21a>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aca8:	f7fe f952 	bl	8008f50 <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d002      	beq.n	800acc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800acba:	2302      	movs	r3, #2
 800acbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acbe:	e0ca      	b.n	800ae56 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <HAL_SPI_Receive+0x7e>
 800acc6:	88fb      	ldrh	r3, [r7, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acd0:	e0c1      	b.n	800ae56 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2204      	movs	r2, #4
 800acd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	88fa      	ldrh	r2, [r7, #6]
 800acea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	88fa      	ldrh	r2, [r7, #6]
 800acf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad18:	d10f      	bne.n	800ad3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad44:	2b40      	cmp	r3, #64	; 0x40
 800ad46:	d007      	beq.n	800ad58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d162      	bne.n	800ae26 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ad60:	e02e      	b.n	800adc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d115      	bne.n	800ad9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f103 020c 	add.w	r2, r3, #12
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	7812      	ldrb	r2, [r2, #0]
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	3b01      	subs	r3, #1
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad9a:	e011      	b.n	800adc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad9c:	f7fe f8d8 	bl	8008f50 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d803      	bhi.n	800adb4 <HAL_SPI_Receive+0x166>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d102      	bne.n	800adba <HAL_SPI_Receive+0x16c>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800adbe:	e04a      	b.n	800ae56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1cb      	bne.n	800ad62 <HAL_SPI_Receive+0x114>
 800adca:	e031      	b.n	800ae30 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b01      	cmp	r3, #1
 800add8:	d113      	bne.n	800ae02 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade4:	b292      	uxth	r2, r2
 800ade6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adec:	1c9a      	adds	r2, r3, #2
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	3b01      	subs	r3, #1
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae00:	e011      	b.n	800ae26 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae02:	f7fe f8a5 	bl	8008f50 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d803      	bhi.n	800ae1a <HAL_SPI_Receive+0x1cc>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d102      	bne.n	800ae20 <HAL_SPI_Receive+0x1d2>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ae24:	e017      	b.n	800ae56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1cd      	bne.n	800adcc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 fa45 	bl	800b2c4 <SPI_EndRxTransaction>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	75fb      	strb	r3, [r7, #23]
 800ae52:	e000      	b.n	800ae56 <HAL_SPI_Receive+0x208>
  }

error :
 800ae54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08c      	sub	sp, #48	; 0x30
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_SPI_TransmitReceive+0x26>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e18a      	b.n	800b1ac <HAL_SPI_TransmitReceive+0x33c>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae9e:	f7fe f857 	bl	8008f50 <HAL_GetTick>
 800aea2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aeaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aeb4:	887b      	ldrh	r3, [r7, #2]
 800aeb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aeb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d00f      	beq.n	800aee0 <HAL_SPI_TransmitReceive+0x70>
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aec6:	d107      	bne.n	800aed8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d103      	bne.n	800aed8 <HAL_SPI_TransmitReceive+0x68>
 800aed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d003      	beq.n	800aee0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aed8:	2302      	movs	r3, #2
 800aeda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aede:	e15b      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <HAL_SPI_TransmitReceive+0x82>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <HAL_SPI_TransmitReceive+0x82>
 800aeec:	887b      	ldrh	r3, [r7, #2]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d103      	bne.n	800aefa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aef8:	e14e      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b04      	cmp	r3, #4
 800af04:	d003      	beq.n	800af0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2205      	movs	r2, #5
 800af0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	887a      	ldrh	r2, [r7, #2]
 800af1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	887a      	ldrh	r2, [r7, #2]
 800af24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	887a      	ldrh	r2, [r7, #2]
 800af30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	887a      	ldrh	r2, [r7, #2]
 800af36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d007      	beq.n	800af62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af6a:	d178      	bne.n	800b05e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_SPI_TransmitReceive+0x10a>
 800af74:	8b7b      	ldrh	r3, [r7, #26]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d166      	bne.n	800b048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7e:	881a      	ldrh	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8a:	1c9a      	adds	r2, r3, #2
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af94:	b29b      	uxth	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	b29a      	uxth	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af9e:	e053      	b.n	800b048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d11b      	bne.n	800afe6 <HAL_SPI_TransmitReceive+0x176>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d016      	beq.n	800afe6 <HAL_SPI_TransmitReceive+0x176>
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d113      	bne.n	800afe6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	881a      	ldrh	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	1c9a      	adds	r2, r3, #2
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afd8:	b29b      	uxth	r3, r3
 800afda:	3b01      	subs	r3, #1
 800afdc:	b29a      	uxth	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800afe2:	2300      	movs	r3, #0
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d119      	bne.n	800b028 <HAL_SPI_TransmitReceive+0x1b8>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aff8:	b29b      	uxth	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d014      	beq.n	800b028 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b008:	b292      	uxth	r2, r2
 800b00a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	1c9a      	adds	r2, r3, #2
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b024:	2301      	movs	r3, #1
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b028:	f7fd ff92 	bl	8008f50 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b034:	429a      	cmp	r2, r3
 800b036:	d807      	bhi.n	800b048 <HAL_SPI_TransmitReceive+0x1d8>
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03e:	d003      	beq.n	800b048 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b046:	e0a7      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1a6      	bne.n	800afa0 <HAL_SPI_TransmitReceive+0x130>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1a1      	bne.n	800afa0 <HAL_SPI_TransmitReceive+0x130>
 800b05c:	e07c      	b.n	800b158 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <HAL_SPI_TransmitReceive+0x1fc>
 800b066:	8b7b      	ldrh	r3, [r7, #26]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d16b      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	7812      	ldrb	r2, [r2, #0]
 800b078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b092:	e057      	b.n	800b144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d11c      	bne.n	800b0dc <HAL_SPI_TransmitReceive+0x26c>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d017      	beq.n	800b0dc <HAL_SPI_TransmitReceive+0x26c>
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d114      	bne.n	800b0dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	330c      	adds	r3, #12
 800b0bc:	7812      	ldrb	r2, [r2, #0]
 800b0be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d119      	bne.n	800b11e <HAL_SPI_TransmitReceive+0x2ae>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d014      	beq.n	800b11e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fe:	b2d2      	uxtb	r2, r2
 800b100:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	b29a      	uxth	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b11a:	2301      	movs	r3, #1
 800b11c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b11e:	f7fd ff17 	bl	8008f50 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d803      	bhi.n	800b136 <HAL_SPI_TransmitReceive+0x2c6>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d102      	bne.n	800b13c <HAL_SPI_TransmitReceive+0x2cc>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d103      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b142:	e029      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1a2      	bne.n	800b094 <HAL_SPI_TransmitReceive+0x224>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d19d      	bne.n	800b094 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 f917 	bl	800b390 <SPI_EndRxTxTransaction>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b174:	e010      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	e000      	b.n	800b198 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b1a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3730      	adds	r7, #48	; 0x30
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1c4:	f7fd fec4 	bl	8008f50 <HAL_GetTick>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	1a9b      	subs	r3, r3, r2
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1d4:	f7fd febc 	bl	8008f50 <HAL_GetTick>
 800b1d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1da:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	015b      	lsls	r3, r3, #5
 800b1e0:	0d1b      	lsrs	r3, r3, #20
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	fb02 f303 	mul.w	r3, r2, r3
 800b1e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1ea:	e054      	b.n	800b296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f2:	d050      	beq.n	800b296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1f4:	f7fd feac 	bl	8008f50 <HAL_GetTick>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	429a      	cmp	r2, r3
 800b202:	d902      	bls.n	800b20a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d13d      	bne.n	800b286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b222:	d111      	bne.n	800b248 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b22c:	d004      	beq.n	800b238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b236:	d107      	bne.n	800b248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b250:	d10f      	bne.n	800b272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e017      	b.n	800b2b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	3b01      	subs	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2301      	moveq	r3, #1
 800b2a8:	2300      	movne	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d19b      	bne.n	800b1ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200001a8 	.word	0x200001a8

0800b2c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2d8:	d111      	bne.n	800b2fe <SPI_EndRxTransaction+0x3a>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2e2:	d004      	beq.n	800b2ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ec:	d107      	bne.n	800b2fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b306:	d12a      	bne.n	800b35e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b310:	d012      	beq.n	800b338 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2200      	movs	r2, #0
 800b31a:	2180      	movs	r1, #128	; 0x80
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f7ff ff49 	bl	800b1b4 <SPI_WaitFlagStateUntilTimeout>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02d      	beq.n	800b384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	f043 0220 	orr.w	r2, r3, #32
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e026      	b.n	800b386 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2200      	movs	r2, #0
 800b340:	2101      	movs	r1, #1
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff ff36 	bl	800b1b4 <SPI_WaitFlagStateUntilTimeout>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d01a      	beq.n	800b384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b352:	f043 0220 	orr.w	r2, r3, #32
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e013      	b.n	800b386 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2200      	movs	r2, #0
 800b366:	2101      	movs	r1, #1
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff ff23 	bl	800b1b4 <SPI_WaitFlagStateUntilTimeout>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d007      	beq.n	800b384 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	f043 0220 	orr.w	r2, r3, #32
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e000      	b.n	800b386 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af02      	add	r7, sp, #8
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b39c:	4b1b      	ldr	r3, [pc, #108]	; (800b40c <SPI_EndRxTxTransaction+0x7c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1b      	ldr	r2, [pc, #108]	; (800b410 <SPI_EndRxTxTransaction+0x80>)
 800b3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a6:	0d5b      	lsrs	r3, r3, #21
 800b3a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3ac:	fb02 f303 	mul.w	r3, r2, r3
 800b3b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3ba:	d112      	bne.n	800b3e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2180      	movs	r1, #128	; 0x80
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fef4 	bl	800b1b4 <SPI_WaitFlagStateUntilTimeout>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d016      	beq.n	800b400 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	f043 0220 	orr.w	r2, r3, #32
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e00f      	b.n	800b402 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f8:	2b80      	cmp	r3, #128	; 0x80
 800b3fa:	d0f2      	beq.n	800b3e2 <SPI_EndRxTxTransaction+0x52>
 800b3fc:	e000      	b.n	800b400 <SPI_EndRxTxTransaction+0x70>
        break;
 800b3fe:	bf00      	nop
  }

  return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	200001a8 	.word	0x200001a8
 800b410:	165e9f81 	.word	0x165e9f81

0800b414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e041      	b.n	800b4aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fa fa32 	bl	80058a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3304      	adds	r3, #4
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f000 fd52 	bl	800befc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d001      	beq.n	800b4cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e046      	b.n	800b55a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a23      	ldr	r2, [pc, #140]	; (800b568 <HAL_TIM_Base_Start+0xb4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d022      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e6:	d01d      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a1f      	ldr	r2, [pc, #124]	; (800b56c <HAL_TIM_Base_Start+0xb8>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d018      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a1e      	ldr	r2, [pc, #120]	; (800b570 <HAL_TIM_Base_Start+0xbc>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d013      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a1c      	ldr	r2, [pc, #112]	; (800b574 <HAL_TIM_Base_Start+0xc0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d00e      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1b      	ldr	r2, [pc, #108]	; (800b578 <HAL_TIM_Base_Start+0xc4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d009      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a19      	ldr	r2, [pc, #100]	; (800b57c <HAL_TIM_Base_Start+0xc8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d004      	beq.n	800b524 <HAL_TIM_Base_Start+0x70>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a18      	ldr	r2, [pc, #96]	; (800b580 <HAL_TIM_Base_Start+0xcc>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d111      	bne.n	800b548 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b06      	cmp	r3, #6
 800b534:	d010      	beq.n	800b558 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b546:	e007      	b.n	800b558 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 0201 	orr.w	r2, r2, #1
 800b556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	40010000 	.word	0x40010000
 800b56c:	40000400 	.word	0x40000400
 800b570:	40000800 	.word	0x40000800
 800b574:	40000c00 	.word	0x40000c00
 800b578:	40010400 	.word	0x40010400
 800b57c:	40014000 	.word	0x40014000
 800b580:	40001800 	.word	0x40001800

0800b584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b01      	cmp	r3, #1
 800b596:	d001      	beq.n	800b59c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e04e      	b.n	800b63a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0201 	orr.w	r2, r2, #1
 800b5b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a23      	ldr	r2, [pc, #140]	; (800b648 <HAL_TIM_Base_Start_IT+0xc4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d022      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c6:	d01d      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a1f      	ldr	r2, [pc, #124]	; (800b64c <HAL_TIM_Base_Start_IT+0xc8>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d018      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a1e      	ldr	r2, [pc, #120]	; (800b650 <HAL_TIM_Base_Start_IT+0xcc>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d013      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a1c      	ldr	r2, [pc, #112]	; (800b654 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00e      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a1b      	ldr	r2, [pc, #108]	; (800b658 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d009      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a19      	ldr	r2, [pc, #100]	; (800b65c <HAL_TIM_Base_Start_IT+0xd8>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d004      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0x80>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a18      	ldr	r2, [pc, #96]	; (800b660 <HAL_TIM_Base_Start_IT+0xdc>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d111      	bne.n	800b628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b06      	cmp	r3, #6
 800b614:	d010      	beq.n	800b638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0201 	orr.w	r2, r2, #1
 800b624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b626:	e007      	b.n	800b638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f042 0201 	orr.w	r2, r2, #1
 800b636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	40010000 	.word	0x40010000
 800b64c:	40000400 	.word	0x40000400
 800b650:	40000800 	.word	0x40000800
 800b654:	40000c00 	.word	0x40000c00
 800b658:	40010400 	.word	0x40010400
 800b65c:	40014000 	.word	0x40014000
 800b660:	40001800 	.word	0x40001800

0800b664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e041      	b.n	800b6fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f839 	bl	800b702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	f000 fc2a 	bl	800befc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
	...

0800b718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d109      	bne.n	800b73c <HAL_TIM_PWM_Start+0x24>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b01      	cmp	r3, #1
 800b732:	bf14      	ite	ne
 800b734:	2301      	movne	r3, #1
 800b736:	2300      	moveq	r3, #0
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	e022      	b.n	800b782 <HAL_TIM_PWM_Start+0x6a>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d109      	bne.n	800b756 <HAL_TIM_PWM_Start+0x3e>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	bf14      	ite	ne
 800b74e:	2301      	movne	r3, #1
 800b750:	2300      	moveq	r3, #0
 800b752:	b2db      	uxtb	r3, r3
 800b754:	e015      	b.n	800b782 <HAL_TIM_PWM_Start+0x6a>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d109      	bne.n	800b770 <HAL_TIM_PWM_Start+0x58>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b01      	cmp	r3, #1
 800b766:	bf14      	ite	ne
 800b768:	2301      	movne	r3, #1
 800b76a:	2300      	moveq	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	e008      	b.n	800b782 <HAL_TIM_PWM_Start+0x6a>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	bf14      	ite	ne
 800b77c:	2301      	movne	r3, #1
 800b77e:	2300      	moveq	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e07c      	b.n	800b884 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d104      	bne.n	800b79a <HAL_TIM_PWM_Start+0x82>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2202      	movs	r2, #2
 800b794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b798:	e013      	b.n	800b7c2 <HAL_TIM_PWM_Start+0xaa>
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d104      	bne.n	800b7aa <HAL_TIM_PWM_Start+0x92>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7a8:	e00b      	b.n	800b7c2 <HAL_TIM_PWM_Start+0xaa>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d104      	bne.n	800b7ba <HAL_TIM_PWM_Start+0xa2>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7b8:	e003      	b.n	800b7c2 <HAL_TIM_PWM_Start+0xaa>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fe80 	bl	800c4d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a2d      	ldr	r2, [pc, #180]	; (800b88c <HAL_TIM_PWM_Start+0x174>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d004      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0xcc>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a2c      	ldr	r2, [pc, #176]	; (800b890 <HAL_TIM_PWM_Start+0x178>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d101      	bne.n	800b7e8 <HAL_TIM_PWM_Start+0xd0>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e000      	b.n	800b7ea <HAL_TIM_PWM_Start+0xd2>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a22      	ldr	r2, [pc, #136]	; (800b88c <HAL_TIM_PWM_Start+0x174>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d022      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b810:	d01d      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1f      	ldr	r2, [pc, #124]	; (800b894 <HAL_TIM_PWM_Start+0x17c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d018      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1d      	ldr	r2, [pc, #116]	; (800b898 <HAL_TIM_PWM_Start+0x180>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d013      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1c      	ldr	r2, [pc, #112]	; (800b89c <HAL_TIM_PWM_Start+0x184>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00e      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a16      	ldr	r2, [pc, #88]	; (800b890 <HAL_TIM_PWM_Start+0x178>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d009      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a18      	ldr	r2, [pc, #96]	; (800b8a0 <HAL_TIM_PWM_Start+0x188>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <HAL_TIM_PWM_Start+0x136>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <HAL_TIM_PWM_Start+0x18c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d111      	bne.n	800b872 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 0307 	and.w	r3, r3, #7
 800b858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b06      	cmp	r3, #6
 800b85e:	d010      	beq.n	800b882 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0201 	orr.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b870:	e007      	b.n	800b882 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0201 	orr.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	40010000 	.word	0x40010000
 800b890:	40010400 	.word	0x40010400
 800b894:	40000400 	.word	0x40000400
 800b898:	40000800 	.word	0x40000800
 800b89c:	40000c00 	.word	0x40000c00
 800b8a0:	40014000 	.word	0x40014000
 800b8a4:	40001800 	.word	0x40001800

0800b8a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 fe08 	bl	800c4d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a2e      	ldr	r2, [pc, #184]	; (800b980 <HAL_TIM_PWM_Stop+0xd8>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d004      	beq.n	800b8d4 <HAL_TIM_PWM_Stop+0x2c>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a2d      	ldr	r2, [pc, #180]	; (800b984 <HAL_TIM_PWM_Stop+0xdc>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d101      	bne.n	800b8d8 <HAL_TIM_PWM_Stop+0x30>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e000      	b.n	800b8da <HAL_TIM_PWM_Stop+0x32>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d017      	beq.n	800b90e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6a1a      	ldr	r2, [r3, #32]
 800b8e4:	f241 1311 	movw	r3, #4369	; 0x1111
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10f      	bne.n	800b90e <HAL_TIM_PWM_Stop+0x66>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6a1a      	ldr	r2, [r3, #32]
 800b8f4:	f240 4344 	movw	r3, #1092	; 0x444
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d107      	bne.n	800b90e <HAL_TIM_PWM_Stop+0x66>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b90c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6a1a      	ldr	r2, [r3, #32]
 800b914:	f241 1311 	movw	r3, #4369	; 0x1111
 800b918:	4013      	ands	r3, r2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10f      	bne.n	800b93e <HAL_TIM_PWM_Stop+0x96>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6a1a      	ldr	r2, [r3, #32]
 800b924:	f240 4344 	movw	r3, #1092	; 0x444
 800b928:	4013      	ands	r3, r2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d107      	bne.n	800b93e <HAL_TIM_PWM_Stop+0x96>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 0201 	bic.w	r2, r2, #1
 800b93c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <HAL_TIM_PWM_Stop+0xa6>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b94c:	e013      	b.n	800b976 <HAL_TIM_PWM_Stop+0xce>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b04      	cmp	r3, #4
 800b952:	d104      	bne.n	800b95e <HAL_TIM_PWM_Stop+0xb6>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b95c:	e00b      	b.n	800b976 <HAL_TIM_PWM_Stop+0xce>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b08      	cmp	r3, #8
 800b962:	d104      	bne.n	800b96e <HAL_TIM_PWM_Stop+0xc6>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b96c:	e003      	b.n	800b976 <HAL_TIM_PWM_Stop+0xce>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	40010000 	.word	0x40010000
 800b984:	40010400 	.word	0x40010400

0800b988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d122      	bne.n	800b9e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d11b      	bne.n	800b9e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f06f 0202 	mvn.w	r2, #2
 800b9b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa77 	bl	800bebe <HAL_TIM_IC_CaptureCallback>
 800b9d0:	e005      	b.n	800b9de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fa69 	bl	800beaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fa7a 	bl	800bed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d122      	bne.n	800ba38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	d11b      	bne.n	800ba38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f06f 0204 	mvn.w	r2, #4
 800ba08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa4d 	bl	800bebe <HAL_TIM_IC_CaptureCallback>
 800ba24:	e005      	b.n	800ba32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fa3f 	bl	800beaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa50 	bl	800bed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b08      	cmp	r3, #8
 800ba44:	d122      	bne.n	800ba8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f003 0308 	and.w	r3, r3, #8
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d11b      	bne.n	800ba8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f06f 0208 	mvn.w	r2, #8
 800ba5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2204      	movs	r2, #4
 800ba62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa23 	bl	800bebe <HAL_TIM_IC_CaptureCallback>
 800ba78:	e005      	b.n	800ba86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa15 	bl	800beaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fa26 	bl	800bed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0310 	and.w	r3, r3, #16
 800ba96:	2b10      	cmp	r3, #16
 800ba98:	d122      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f003 0310 	and.w	r3, r3, #16
 800baa4:	2b10      	cmp	r3, #16
 800baa6:	d11b      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f06f 0210 	mvn.w	r2, #16
 800bab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2208      	movs	r2, #8
 800bab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f9f9 	bl	800bebe <HAL_TIM_IC_CaptureCallback>
 800bacc:	e005      	b.n	800bada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f9eb 	bl	800beaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f9fc 	bl	800bed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b01      	cmp	r3, #1
 800baec:	d10e      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d107      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f06f 0201 	mvn.w	r2, #1
 800bb04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7f6 fc62 	bl	80023d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb16:	2b80      	cmp	r3, #128	; 0x80
 800bb18:	d10e      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	2b80      	cmp	r3, #128	; 0x80
 800bb26:	d107      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fd78 	bl	800c628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb42:	2b40      	cmp	r3, #64	; 0x40
 800bb44:	d10e      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb50:	2b40      	cmp	r3, #64	; 0x40
 800bb52:	d107      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f9c1 	bl	800bee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d10e      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0320 	and.w	r3, r3, #32
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	d107      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f06f 0220 	mvn.w	r2, #32
 800bb88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fd42 	bl	800c614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d101      	bne.n	800bbb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	e0ae      	b.n	800bd14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b0c      	cmp	r3, #12
 800bbc2:	f200 809f 	bhi.w	800bd04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bc01 	.word	0x0800bc01
 800bbd0:	0800bd05 	.word	0x0800bd05
 800bbd4:	0800bd05 	.word	0x0800bd05
 800bbd8:	0800bd05 	.word	0x0800bd05
 800bbdc:	0800bc41 	.word	0x0800bc41
 800bbe0:	0800bd05 	.word	0x0800bd05
 800bbe4:	0800bd05 	.word	0x0800bd05
 800bbe8:	0800bd05 	.word	0x0800bd05
 800bbec:	0800bc83 	.word	0x0800bc83
 800bbf0:	0800bd05 	.word	0x0800bd05
 800bbf4:	0800bd05 	.word	0x0800bd05
 800bbf8:	0800bd05 	.word	0x0800bd05
 800bbfc:	0800bcc3 	.word	0x0800bcc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fa18 	bl	800c03c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	699a      	ldr	r2, [r3, #24]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f042 0208 	orr.w	r2, r2, #8
 800bc1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	699a      	ldr	r2, [r3, #24]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 0204 	bic.w	r2, r2, #4
 800bc2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6999      	ldr	r1, [r3, #24]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	691a      	ldr	r2, [r3, #16]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	619a      	str	r2, [r3, #24]
      break;
 800bc3e:	e064      	b.n	800bd0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 fa68 	bl	800c11c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6999      	ldr	r1, [r3, #24]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	021a      	lsls	r2, r3, #8
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	619a      	str	r2, [r3, #24]
      break;
 800bc80:	e043      	b.n	800bd0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 fabd 	bl	800c208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	69da      	ldr	r2, [r3, #28]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f042 0208 	orr.w	r2, r2, #8
 800bc9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	69da      	ldr	r2, [r3, #28]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 0204 	bic.w	r2, r2, #4
 800bcac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69d9      	ldr	r1, [r3, #28]
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	691a      	ldr	r2, [r3, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	61da      	str	r2, [r3, #28]
      break;
 800bcc0:	e023      	b.n	800bd0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 fb11 	bl	800c2f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69da      	ldr	r2, [r3, #28]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69d9      	ldr	r1, [r3, #28]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	021a      	lsls	r2, r3, #8
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	61da      	str	r2, [r3, #28]
      break;
 800bd02:	e002      	b.n	800bd0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	75fb      	strb	r3, [r7, #23]
      break;
 800bd08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d101      	bne.n	800bd38 <HAL_TIM_ConfigClockSource+0x1c>
 800bd34:	2302      	movs	r3, #2
 800bd36:	e0b4      	b.n	800bea2 <HAL_TIM_ConfigClockSource+0x186>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd70:	d03e      	beq.n	800bdf0 <HAL_TIM_ConfigClockSource+0xd4>
 800bd72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd76:	f200 8087 	bhi.w	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bd7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd7e:	f000 8086 	beq.w	800be8e <HAL_TIM_ConfigClockSource+0x172>
 800bd82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd86:	d87f      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bd88:	2b70      	cmp	r3, #112	; 0x70
 800bd8a:	d01a      	beq.n	800bdc2 <HAL_TIM_ConfigClockSource+0xa6>
 800bd8c:	2b70      	cmp	r3, #112	; 0x70
 800bd8e:	d87b      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bd90:	2b60      	cmp	r3, #96	; 0x60
 800bd92:	d050      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x11a>
 800bd94:	2b60      	cmp	r3, #96	; 0x60
 800bd96:	d877      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bd98:	2b50      	cmp	r3, #80	; 0x50
 800bd9a:	d03c      	beq.n	800be16 <HAL_TIM_ConfigClockSource+0xfa>
 800bd9c:	2b50      	cmp	r3, #80	; 0x50
 800bd9e:	d873      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bda0:	2b40      	cmp	r3, #64	; 0x40
 800bda2:	d058      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x13a>
 800bda4:	2b40      	cmp	r3, #64	; 0x40
 800bda6:	d86f      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bda8:	2b30      	cmp	r3, #48	; 0x30
 800bdaa:	d064      	beq.n	800be76 <HAL_TIM_ConfigClockSource+0x15a>
 800bdac:	2b30      	cmp	r3, #48	; 0x30
 800bdae:	d86b      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d060      	beq.n	800be76 <HAL_TIM_ConfigClockSource+0x15a>
 800bdb4:	2b20      	cmp	r3, #32
 800bdb6:	d867      	bhi.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d05c      	beq.n	800be76 <HAL_TIM_ConfigClockSource+0x15a>
 800bdbc:	2b10      	cmp	r3, #16
 800bdbe:	d05a      	beq.n	800be76 <HAL_TIM_ConfigClockSource+0x15a>
 800bdc0:	e062      	b.n	800be88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	6899      	ldr	r1, [r3, #8]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	f000 fb5d 	bl	800c490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bde4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	609a      	str	r2, [r3, #8]
      break;
 800bdee:	e04f      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6818      	ldr	r0, [r3, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	6899      	ldr	r1, [r3, #8]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	f000 fb46 	bl	800c490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be12:	609a      	str	r2, [r3, #8]
      break;
 800be14:	e03c      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6859      	ldr	r1, [r3, #4]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	461a      	mov	r2, r3
 800be24:	f000 faba 	bl	800c39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2150      	movs	r1, #80	; 0x50
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fb13 	bl	800c45a <TIM_ITRx_SetConfig>
      break;
 800be34:	e02c      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	6859      	ldr	r1, [r3, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	461a      	mov	r2, r3
 800be44:	f000 fad9 	bl	800c3fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2160      	movs	r1, #96	; 0x60
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fb03 	bl	800c45a <TIM_ITRx_SetConfig>
      break;
 800be54:	e01c      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6818      	ldr	r0, [r3, #0]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	6859      	ldr	r1, [r3, #4]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	461a      	mov	r2, r3
 800be64:	f000 fa9a 	bl	800c39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2140      	movs	r1, #64	; 0x40
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 faf3 	bl	800c45a <TIM_ITRx_SetConfig>
      break;
 800be74:	e00c      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4619      	mov	r1, r3
 800be80:	4610      	mov	r0, r2
 800be82:	f000 faea 	bl	800c45a <TIM_ITRx_SetConfig>
      break;
 800be86:	e003      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
      break;
 800be8c:	e000      	b.n	800be90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
	...

0800befc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a40      	ldr	r2, [pc, #256]	; (800c010 <TIM_Base_SetConfig+0x114>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d013      	beq.n	800bf3c <TIM_Base_SetConfig+0x40>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1a:	d00f      	beq.n	800bf3c <TIM_Base_SetConfig+0x40>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a3d      	ldr	r2, [pc, #244]	; (800c014 <TIM_Base_SetConfig+0x118>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d00b      	beq.n	800bf3c <TIM_Base_SetConfig+0x40>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a3c      	ldr	r2, [pc, #240]	; (800c018 <TIM_Base_SetConfig+0x11c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d007      	beq.n	800bf3c <TIM_Base_SetConfig+0x40>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a3b      	ldr	r2, [pc, #236]	; (800c01c <TIM_Base_SetConfig+0x120>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d003      	beq.n	800bf3c <TIM_Base_SetConfig+0x40>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a3a      	ldr	r2, [pc, #232]	; (800c020 <TIM_Base_SetConfig+0x124>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d108      	bne.n	800bf4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a2f      	ldr	r2, [pc, #188]	; (800c010 <TIM_Base_SetConfig+0x114>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d02b      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf5c:	d027      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a2c      	ldr	r2, [pc, #176]	; (800c014 <TIM_Base_SetConfig+0x118>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d023      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a2b      	ldr	r2, [pc, #172]	; (800c018 <TIM_Base_SetConfig+0x11c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d01f      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a2a      	ldr	r2, [pc, #168]	; (800c01c <TIM_Base_SetConfig+0x120>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d01b      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a29      	ldr	r2, [pc, #164]	; (800c020 <TIM_Base_SetConfig+0x124>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d017      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a28      	ldr	r2, [pc, #160]	; (800c024 <TIM_Base_SetConfig+0x128>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d013      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a27      	ldr	r2, [pc, #156]	; (800c028 <TIM_Base_SetConfig+0x12c>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d00f      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a26      	ldr	r2, [pc, #152]	; (800c02c <TIM_Base_SetConfig+0x130>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d00b      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a25      	ldr	r2, [pc, #148]	; (800c030 <TIM_Base_SetConfig+0x134>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d007      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a24      	ldr	r2, [pc, #144]	; (800c034 <TIM_Base_SetConfig+0x138>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d003      	beq.n	800bfae <TIM_Base_SetConfig+0xb2>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a23      	ldr	r2, [pc, #140]	; (800c038 <TIM_Base_SetConfig+0x13c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d108      	bne.n	800bfc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a0a      	ldr	r2, [pc, #40]	; (800c010 <TIM_Base_SetConfig+0x114>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d003      	beq.n	800bff4 <TIM_Base_SetConfig+0xf8>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a0c      	ldr	r2, [pc, #48]	; (800c020 <TIM_Base_SetConfig+0x124>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d103      	bne.n	800bffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	691a      	ldr	r2, [r3, #16]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	615a      	str	r2, [r3, #20]
}
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	40010000 	.word	0x40010000
 800c014:	40000400 	.word	0x40000400
 800c018:	40000800 	.word	0x40000800
 800c01c:	40000c00 	.word	0x40000c00
 800c020:	40010400 	.word	0x40010400
 800c024:	40014000 	.word	0x40014000
 800c028:	40014400 	.word	0x40014400
 800c02c:	40014800 	.word	0x40014800
 800c030:	40001800 	.word	0x40001800
 800c034:	40001c00 	.word	0x40001c00
 800c038:	40002000 	.word	0x40002000

0800c03c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	f023 0201 	bic.w	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f023 0302 	bic.w	r3, r3, #2
 800c084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a20      	ldr	r2, [pc, #128]	; (800c114 <TIM_OC1_SetConfig+0xd8>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d003      	beq.n	800c0a0 <TIM_OC1_SetConfig+0x64>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a1f      	ldr	r2, [pc, #124]	; (800c118 <TIM_OC1_SetConfig+0xdc>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10c      	bne.n	800c0ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f023 0308 	bic.w	r3, r3, #8
 800c0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f023 0304 	bic.w	r3, r3, #4
 800c0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a15      	ldr	r2, [pc, #84]	; (800c114 <TIM_OC1_SetConfig+0xd8>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d003      	beq.n	800c0ca <TIM_OC1_SetConfig+0x8e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a14      	ldr	r2, [pc, #80]	; (800c118 <TIM_OC1_SetConfig+0xdc>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d111      	bne.n	800c0ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	697a      	ldr	r2, [r7, #20]
 800c106:	621a      	str	r2, [r3, #32]
}
 800c108:	bf00      	nop
 800c10a:	371c      	adds	r7, #28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	40010000 	.word	0x40010000
 800c118:	40010400 	.word	0x40010400

0800c11c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	f023 0210 	bic.w	r2, r3, #16
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f023 0320 	bic.w	r3, r3, #32
 800c166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	4313      	orrs	r3, r2
 800c172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a22      	ldr	r2, [pc, #136]	; (800c200 <TIM_OC2_SetConfig+0xe4>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d003      	beq.n	800c184 <TIM_OC2_SetConfig+0x68>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a21      	ldr	r2, [pc, #132]	; (800c204 <TIM_OC2_SetConfig+0xe8>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d10d      	bne.n	800c1a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	4313      	orrs	r3, r2
 800c196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c19e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a17      	ldr	r2, [pc, #92]	; (800c200 <TIM_OC2_SetConfig+0xe4>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_OC2_SetConfig+0x94>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a16      	ldr	r2, [pc, #88]	; (800c204 <TIM_OC2_SetConfig+0xe8>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d113      	bne.n	800c1d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	621a      	str	r2, [r3, #32]
}
 800c1f2:	bf00      	nop
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	40010000 	.word	0x40010000
 800c204:	40010400 	.word	0x40010400

0800c208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f023 0303 	bic.w	r3, r3, #3
 800c23e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4313      	orrs	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	021b      	lsls	r3, r3, #8
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a21      	ldr	r2, [pc, #132]	; (800c2e8 <TIM_OC3_SetConfig+0xe0>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d003      	beq.n	800c26e <TIM_OC3_SetConfig+0x66>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a20      	ldr	r2, [pc, #128]	; (800c2ec <TIM_OC3_SetConfig+0xe4>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d10d      	bne.n	800c28a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	021b      	lsls	r3, r3, #8
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	4313      	orrs	r3, r2
 800c280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a16      	ldr	r2, [pc, #88]	; (800c2e8 <TIM_OC3_SetConfig+0xe0>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d003      	beq.n	800c29a <TIM_OC3_SetConfig+0x92>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a15      	ldr	r2, [pc, #84]	; (800c2ec <TIM_OC3_SetConfig+0xe4>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d113      	bne.n	800c2c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	371c      	adds	r7, #28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	40010000 	.word	0x40010000
 800c2ec:	40010400 	.word	0x40010400

0800c2f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	021b      	lsls	r3, r3, #8
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	4313      	orrs	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	031b      	lsls	r3, r3, #12
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4a12      	ldr	r2, [pc, #72]	; (800c394 <TIM_OC4_SetConfig+0xa4>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d003      	beq.n	800c358 <TIM_OC4_SetConfig+0x68>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a11      	ldr	r2, [pc, #68]	; (800c398 <TIM_OC4_SetConfig+0xa8>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d109      	bne.n	800c36c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c35e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	019b      	lsls	r3, r3, #6
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	4313      	orrs	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	621a      	str	r2, [r3, #32]
}
 800c386:	bf00      	nop
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	40010000 	.word	0x40010000
 800c398:	40010400 	.word	0x40010400

0800c39c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	f023 0201 	bic.w	r2, r3, #1
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f023 030a 	bic.w	r3, r3, #10
 800c3d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	621a      	str	r2, [r3, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	371c      	adds	r7, #28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b087      	sub	sp, #28
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	f023 0210 	bic.w	r2, r3, #16
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6a1b      	ldr	r3, [r3, #32]
 800c41c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	031b      	lsls	r3, r3, #12
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4313      	orrs	r3, r2
 800c440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	621a      	str	r2, [r3, #32]
}
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b085      	sub	sp, #20
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4313      	orrs	r3, r2
 800c478:	f043 0307 	orr.w	r3, r3, #7
 800c47c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	609a      	str	r2, [r3, #8]
}
 800c484:	bf00      	nop
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	021a      	lsls	r2, r3, #8
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	609a      	str	r2, [r3, #8]
}
 800c4c4:	bf00      	nop
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f003 031f 	and.w	r3, r3, #31
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6a1a      	ldr	r2, [r3, #32]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	43db      	mvns	r3, r3
 800c4f2:	401a      	ands	r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6a1a      	ldr	r2, [r3, #32]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f003 031f 	and.w	r3, r3, #31
 800c502:	6879      	ldr	r1, [r7, #4]
 800c504:	fa01 f303 	lsl.w	r3, r1, r3
 800c508:	431a      	orrs	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	621a      	str	r2, [r3, #32]
}
 800c50e:	bf00      	nop
 800c510:	371c      	adds	r7, #28
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
	...

0800c51c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d101      	bne.n	800c534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c530:	2302      	movs	r3, #2
 800c532:	e05a      	b.n	800c5ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a21      	ldr	r2, [pc, #132]	; (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d022      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c580:	d01d      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a1d      	ldr	r2, [pc, #116]	; (800c5fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d018      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a1b      	ldr	r2, [pc, #108]	; (800c600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d013      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a1a      	ldr	r2, [pc, #104]	; (800c604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d00e      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a18      	ldr	r2, [pc, #96]	; (800c608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d009      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a17      	ldr	r2, [pc, #92]	; (800c60c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d004      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a15      	ldr	r2, [pc, #84]	; (800c610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	40010000 	.word	0x40010000
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800
 800c604:	40000c00 	.word	0x40000c00
 800c608:	40010400 	.word	0x40010400
 800c60c:	40014000 	.word	0x40014000
 800c610:	40001800 	.word	0x40001800

0800c614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e03f      	b.n	800c6ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7f9 fa5c 	bl	8005b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2224      	movs	r2, #36	; 0x24
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c67e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 ff65 	bl	800d550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	691a      	ldr	r2, [r3, #16]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	695a      	ldr	r2, [r3, #20]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b08a      	sub	sp, #40	; 0x28
 800c6da:	af02      	add	r7, sp, #8
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	603b      	str	r3, [r7, #0]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	d17c      	bne.n	800c7f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <HAL_UART_Transmit+0x2c>
 800c6fc:	88fb      	ldrh	r3, [r7, #6]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e075      	b.n	800c7f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d101      	bne.n	800c714 <HAL_UART_Transmit+0x3e>
 800c710:	2302      	movs	r3, #2
 800c712:	e06e      	b.n	800c7f2 <HAL_UART_Transmit+0x11c>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2221      	movs	r2, #33	; 0x21
 800c726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c72a:	f7fc fc11 	bl	8008f50 <HAL_GetTick>
 800c72e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	88fa      	ldrh	r2, [r7, #6]
 800c734:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	88fa      	ldrh	r2, [r7, #6]
 800c73a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c744:	d108      	bne.n	800c758 <HAL_UART_Transmit+0x82>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c74e:	2300      	movs	r3, #0
 800c750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	61bb      	str	r3, [r7, #24]
 800c756:	e003      	b.n	800c760 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c75c:	2300      	movs	r3, #0
 800c75e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c768:	e02a      	b.n	800c7c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2200      	movs	r2, #0
 800c772:	2180      	movs	r1, #128	; 0x80
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f000 fc21 	bl	800cfbc <UART_WaitOnFlagUntilTimeout>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e036      	b.n	800c7f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10b      	bne.n	800c7a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	3302      	adds	r3, #2
 800c79e:	61bb      	str	r3, [r7, #24]
 800c7a0:	e007      	b.n	800c7b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1cf      	bne.n	800c76a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2140      	movs	r1, #64	; 0x40
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f000 fbf1 	bl	800cfbc <UART_WaitOnFlagUntilTimeout>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e006      	b.n	800c7f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e000      	b.n	800c7f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c7f0:	2302      	movs	r3, #2
  }
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3720      	adds	r7, #32
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	4613      	mov	r3, r2
 800c806:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b20      	cmp	r3, #32
 800c812:	d11d      	bne.n	800c850 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d002      	beq.n	800c820 <HAL_UART_Receive_DMA+0x26>
 800c81a:	88fb      	ldrh	r3, [r7, #6]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	e016      	b.n	800c852 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <HAL_UART_Receive_DMA+0x38>
 800c82e:	2302      	movs	r3, #2
 800c830:	e00f      	b.n	800c852 <HAL_UART_Receive_DMA+0x58>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c840:	88fb      	ldrh	r3, [r7, #6]
 800c842:	461a      	mov	r2, r3
 800c844:	68b9      	ldr	r1, [r7, #8]
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f000 fc26 	bl	800d098 <UART_Start_Receive_DMA>
 800c84c:	4603      	mov	r3, r0
 800c84e:	e000      	b.n	800c852 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c850:	2302      	movs	r3, #2
  }
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b0ba      	sub	sp, #232	; 0xe8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c882:	2300      	movs	r3, #0
 800c884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c888:	2300      	movs	r3, #0
 800c88a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c892:	f003 030f 	and.w	r3, r3, #15
 800c896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c89a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10f      	bne.n	800c8c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8a6:	f003 0320 	and.w	r3, r3, #32
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d009      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x66>
 800c8ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fd8d 	bl	800d3da <UART_Receive_IT>
      return;
 800c8c0:	e256      	b.n	800cd70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c8c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80de 	beq.w	800ca88 <HAL_UART_IRQHandler+0x22c>
 800c8cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d106      	bne.n	800c8e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 80d1 	beq.w	800ca88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00b      	beq.n	800c90a <HAL_UART_IRQHandler+0xae>
 800c8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c902:	f043 0201 	orr.w	r2, r3, #1
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c90e:	f003 0304 	and.w	r3, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00b      	beq.n	800c92e <HAL_UART_IRQHandler+0xd2>
 800c916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c926:	f043 0202 	orr.w	r2, r3, #2
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00b      	beq.n	800c952 <HAL_UART_IRQHandler+0xf6>
 800c93a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f043 0204 	orr.w	r2, r3, #4
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c956:	f003 0308 	and.w	r3, r3, #8
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d011      	beq.n	800c982 <HAL_UART_IRQHandler+0x126>
 800c95e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	d105      	bne.n	800c976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d005      	beq.n	800c982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	f043 0208 	orr.w	r2, r3, #8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 81ed 	beq.w	800cd66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b00      	cmp	r3, #0
 800c996:	d008      	beq.n	800c9aa <HAL_UART_IRQHandler+0x14e>
 800c998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c99c:	f003 0320 	and.w	r3, r3, #32
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd18 	bl	800d3da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b4:	2b40      	cmp	r3, #64	; 0x40
 800c9b6:	bf0c      	ite	eq
 800c9b8:	2301      	moveq	r3, #1
 800c9ba:	2300      	movne	r3, #0
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c6:	f003 0308 	and.w	r3, r3, #8
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d103      	bne.n	800c9d6 <HAL_UART_IRQHandler+0x17a>
 800c9ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d04f      	beq.n	800ca76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fc20 	bl	800d21c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e6:	2b40      	cmp	r3, #64	; 0x40
 800c9e8:	d141      	bne.n	800ca6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3314      	adds	r3, #20
 800c9f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9f8:	e853 3f00 	ldrex	r3, [r3]
 800c9fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ca00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3314      	adds	r3, #20
 800ca12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ca16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ca1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ca22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ca2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1d9      	bne.n	800c9ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d013      	beq.n	800ca66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca42:	4a7d      	ldr	r2, [pc, #500]	; (800cc38 <HAL_UART_IRQHandler+0x3dc>)
 800ca44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fc fd14 	bl	8009478 <HAL_DMA_Abort_IT>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d016      	beq.n	800ca84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ca60:	4610      	mov	r0, r2
 800ca62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca64:	e00e      	b.n	800ca84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f99a 	bl	800cda0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca6c:	e00a      	b.n	800ca84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f996 	bl	800cda0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca74:	e006      	b.n	800ca84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f992 	bl	800cda0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ca82:	e170      	b.n	800cd66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca84:	bf00      	nop
    return;
 800ca86:	e16e      	b.n	800cd66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	f040 814a 	bne.w	800cd26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ca92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca96:	f003 0310 	and.w	r3, r3, #16
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 8143 	beq.w	800cd26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800caa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caa4:	f003 0310 	and.w	r3, r3, #16
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 813c 	beq.w	800cd26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800caae:	2300      	movs	r3, #0
 800cab0:	60bb      	str	r3, [r7, #8]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60bb      	str	r3, [r7, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	60bb      	str	r3, [r7, #8]
 800cac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cace:	2b40      	cmp	r3, #64	; 0x40
 800cad0:	f040 80b4 	bne.w	800cc3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f000 8140 	beq.w	800cd6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800caee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800caf2:	429a      	cmp	r2, r3
 800caf4:	f080 8139 	bcs.w	800cd6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cafe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb04:	69db      	ldr	r3, [r3, #28]
 800cb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb0a:	f000 8088 	beq.w	800cc1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	330c      	adds	r3, #12
 800cb14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb1c:	e853 3f00 	ldrex	r3, [r3]
 800cb20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cb24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	330c      	adds	r3, #12
 800cb36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cb3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cb46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cb52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1d9      	bne.n	800cb0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb64:	e853 3f00 	ldrex	r3, [r3]
 800cb68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cb6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb6c:	f023 0301 	bic.w	r3, r3, #1
 800cb70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3314      	adds	r3, #20
 800cb7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cb82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cb8a:	e841 2300 	strex	r3, r2, [r1]
 800cb8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cb90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e1      	bne.n	800cb5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cbba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cbbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cbc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbc2:	e841 2300 	strex	r3, r2, [r1]
 800cbc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cbc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e3      	bne.n	800cb96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe6:	e853 3f00 	ldrex	r3, [r3]
 800cbea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cbec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbee:	f023 0310 	bic.w	r3, r3, #16
 800cbf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cc00:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e3      	bne.n	800cbdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7fc fbbd 	bl	8009398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f8c0 	bl	800cdb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc34:	e099      	b.n	800cd6a <HAL_UART_IRQHandler+0x50e>
 800cc36:	bf00      	nop
 800cc38:	0800d2e3 	.word	0x0800d2e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 808b 	beq.w	800cd6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cc58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8086 	beq.w	800cd6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	330c      	adds	r3, #12
 800cc68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6c:	e853 3f00 	ldrex	r3, [r3]
 800cc70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	330c      	adds	r3, #12
 800cc82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cc86:	647a      	str	r2, [r7, #68]	; 0x44
 800cc88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc8e:	e841 2300 	strex	r3, r2, [r1]
 800cc92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1e3      	bne.n	800cc62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3314      	adds	r3, #20
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	623b      	str	r3, [r7, #32]
   return(result);
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	f023 0301 	bic.w	r3, r3, #1
 800ccb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3314      	adds	r3, #20
 800ccba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ccbe:	633a      	str	r2, [r7, #48]	; 0x30
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc6:	e841 2300 	strex	r3, r2, [r1]
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e3      	bne.n	800cc9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	330c      	adds	r3, #12
 800cce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	e853 3f00 	ldrex	r3, [r3]
 800ccee:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f023 0310 	bic.w	r3, r3, #16
 800ccf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	330c      	adds	r3, #12
 800cd00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cd04:	61fa      	str	r2, [r7, #28]
 800cd06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd08:	69b9      	ldr	r1, [r7, #24]
 800cd0a:	69fa      	ldr	r2, [r7, #28]
 800cd0c:	e841 2300 	strex	r3, r2, [r1]
 800cd10:	617b      	str	r3, [r7, #20]
   return(result);
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1e3      	bne.n	800cce0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cd18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f848 	bl	800cdb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd24:	e023      	b.n	800cd6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d009      	beq.n	800cd46 <HAL_UART_IRQHandler+0x4ea>
 800cd32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fae3 	bl	800d30a <UART_Transmit_IT>
    return;
 800cd44:	e014      	b.n	800cd70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00e      	beq.n	800cd70 <HAL_UART_IRQHandler+0x514>
 800cd52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d008      	beq.n	800cd70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fb23 	bl	800d3aa <UART_EndTransmit_IT>
    return;
 800cd64:	e004      	b.n	800cd70 <HAL_UART_IRQHandler+0x514>
    return;
 800cd66:	bf00      	nop
 800cd68:	e002      	b.n	800cd70 <HAL_UART_IRQHandler+0x514>
      return;
 800cd6a:	bf00      	nop
 800cd6c:	e000      	b.n	800cd70 <HAL_UART_IRQHandler+0x514>
      return;
 800cd6e:	bf00      	nop
  }
}
 800cd70:	37e8      	adds	r7, #232	; 0xe8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop

0800cd78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cd80:	bf00      	nop
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cd94:	bf00      	nop
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b09c      	sub	sp, #112	; 0x70
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d172      	bne.n	800cece <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cde8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdea:	2200      	movs	r2, #0
 800cdec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	330c      	adds	r3, #12
 800cdf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdf8:	e853 3f00 	ldrex	r3, [r3]
 800cdfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce04:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	330c      	adds	r3, #12
 800ce0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce0e:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce16:	e841 2300 	strex	r3, r2, [r1]
 800ce1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e5      	bne.n	800cdee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3314      	adds	r3, #20
 800ce28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	e853 3f00 	ldrex	r3, [r3]
 800ce30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	f023 0301 	bic.w	r3, r3, #1
 800ce38:	667b      	str	r3, [r7, #100]	; 0x64
 800ce3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3314      	adds	r3, #20
 800ce40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce42:	647a      	str	r2, [r7, #68]	; 0x44
 800ce44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce4a:	e841 2300 	strex	r3, r2, [r1]
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e5      	bne.n	800ce22 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3314      	adds	r3, #20
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	623b      	str	r3, [r7, #32]
   return(result);
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce6c:	663b      	str	r3, [r7, #96]	; 0x60
 800ce6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3314      	adds	r3, #20
 800ce74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce76:	633a      	str	r2, [r7, #48]	; 0x30
 800ce78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7e:	e841 2300 	strex	r3, r2, [r1]
 800ce82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1e5      	bne.n	800ce56 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d119      	bne.n	800cece <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	330c      	adds	r3, #12
 800cea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	e853 3f00 	ldrex	r3, [r3]
 800cea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f023 0310 	bic.w	r3, r3, #16
 800ceb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	330c      	adds	r3, #12
 800ceb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceba:	61fa      	str	r2, [r7, #28]
 800cebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebe:	69b9      	ldr	r1, [r7, #24]
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	e841 2300 	strex	r3, r2, [r1]
 800cec6:	617b      	str	r3, [r7, #20]
   return(result);
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1e5      	bne.n	800ce9a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d106      	bne.n	800cee4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ced6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ceda:	4619      	mov	r1, r3
 800cedc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cede:	f7ff ff69 	bl	800cdb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cee2:	e002      	b.n	800ceea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cee4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cee6:	f7f5 fab3 	bl	8002450 <HAL_UART_RxCpltCallback>
}
 800ceea:	bf00      	nop
 800ceec:	3770      	adds	r7, #112	; 0x70
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d108      	bne.n	800cf1a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf0c:	085b      	lsrs	r3, r3, #1
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4619      	mov	r1, r3
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff ff4e 	bl	800cdb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf18:	e002      	b.n	800cf20 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff ff36 	bl	800cd8c <HAL_UART_RxHalfCpltCallback>
}
 800cf20:	bf00      	nop
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf38:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	695b      	ldr	r3, [r3, #20]
 800cf40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf44:	2b80      	cmp	r3, #128	; 0x80
 800cf46:	bf0c      	ite	eq
 800cf48:	2301      	moveq	r3, #1
 800cf4a:	2300      	movne	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b21      	cmp	r3, #33	; 0x21
 800cf5a:	d108      	bne.n	800cf6e <UART_DMAError+0x46>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d005      	beq.n	800cf6e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2200      	movs	r2, #0
 800cf66:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f000 f92f 	bl	800d1cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	695b      	ldr	r3, [r3, #20]
 800cf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf78:	2b40      	cmp	r3, #64	; 0x40
 800cf7a:	bf0c      	ite	eq
 800cf7c:	2301      	moveq	r3, #1
 800cf7e:	2300      	movne	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b22      	cmp	r3, #34	; 0x22
 800cf8e:	d108      	bne.n	800cfa2 <UART_DMAError+0x7a>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cf9c:	68b8      	ldr	r0, [r7, #8]
 800cf9e:	f000 f93d 	bl	800d21c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa6:	f043 0210 	orr.w	r2, r3, #16
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f7ff fef6 	bl	800cda0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b090      	sub	sp, #64	; 0x40
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfcc:	e050      	b.n	800d070 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd4:	d04c      	beq.n	800d070 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cfd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d007      	beq.n	800cfec <UART_WaitOnFlagUntilTimeout+0x30>
 800cfdc:	f7fb ffb8 	bl	8008f50 <HAL_GetTick>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d241      	bcs.n	800d070 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	330c      	adds	r3, #12
 800cff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	330c      	adds	r3, #12
 800d00a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d00c:	637a      	str	r2, [r7, #52]	; 0x34
 800d00e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e5      	bne.n	800cfec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3314      	adds	r3, #20
 800d026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	e853 3f00 	ldrex	r3, [r3]
 800d02e:	613b      	str	r3, [r7, #16]
   return(result);
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f023 0301 	bic.w	r3, r3, #1
 800d036:	63bb      	str	r3, [r7, #56]	; 0x38
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3314      	adds	r3, #20
 800d03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d040:	623a      	str	r2, [r7, #32]
 800d042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d044:	69f9      	ldr	r1, [r7, #28]
 800d046:	6a3a      	ldr	r2, [r7, #32]
 800d048:	e841 2300 	strex	r3, r2, [r1]
 800d04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1e5      	bne.n	800d020 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2220      	movs	r2, #32
 800d058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2220      	movs	r2, #32
 800d060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e00f      	b.n	800d090 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	4013      	ands	r3, r2
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	bf0c      	ite	eq
 800d080:	2301      	moveq	r3, #1
 800d082:	2300      	movne	r3, #0
 800d084:	b2db      	uxtb	r3, r3
 800d086:	461a      	mov	r2, r3
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d09f      	beq.n	800cfce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3740      	adds	r7, #64	; 0x40
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b098      	sub	sp, #96	; 0x60
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	88fa      	ldrh	r2, [r7, #6]
 800d0b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2222      	movs	r2, #34	; 0x22
 800d0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	4a3e      	ldr	r2, [pc, #248]	; (800d1c0 <UART_Start_Receive_DMA+0x128>)
 800d0c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0cc:	4a3d      	ldr	r2, [pc, #244]	; (800d1c4 <UART_Start_Receive_DMA+0x12c>)
 800d0ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d4:	4a3c      	ldr	r2, [pc, #240]	; (800d1c8 <UART_Start_Receive_DMA+0x130>)
 800d0d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0dc:	2200      	movs	r2, #0
 800d0de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	88fb      	ldrh	r3, [r7, #6]
 800d0f8:	f7fc f8f6 	bl	80092e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	613b      	str	r3, [r7, #16]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	613b      	str	r3, [r7, #16]
 800d110:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	330c      	adds	r3, #12
 800d120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d124:	e853 3f00 	ldrex	r3, [r3]
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d130:	65bb      	str	r3, [r7, #88]	; 0x58
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	330c      	adds	r3, #12
 800d138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d13a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d13c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d13e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d142:	e841 2300 	strex	r3, r2, [r1]
 800d146:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1e5      	bne.n	800d11a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3314      	adds	r3, #20
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	e853 3f00 	ldrex	r3, [r3]
 800d15c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	f043 0301 	orr.w	r3, r3, #1
 800d164:	657b      	str	r3, [r7, #84]	; 0x54
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3314      	adds	r3, #20
 800d16c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d16e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d176:	e841 2300 	strex	r3, r2, [r1]
 800d17a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1e5      	bne.n	800d14e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3314      	adds	r3, #20
 800d188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	e853 3f00 	ldrex	r3, [r3]
 800d190:	617b      	str	r3, [r7, #20]
   return(result);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d198:	653b      	str	r3, [r7, #80]	; 0x50
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3314      	adds	r3, #20
 800d1a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1a2:	627a      	str	r2, [r7, #36]	; 0x24
 800d1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a6:	6a39      	ldr	r1, [r7, #32]
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1aa:	e841 2300 	strex	r3, r2, [r1]
 800d1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1e5      	bne.n	800d182 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3760      	adds	r7, #96	; 0x60
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	0800cdcd 	.word	0x0800cdcd
 800d1c4:	0800cef3 	.word	0x0800cef3
 800d1c8:	0800cf29 	.word	0x0800cf29

0800d1cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b089      	sub	sp, #36	; 0x24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	330c      	adds	r3, #12
 800d1da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	e853 3f00 	ldrex	r3, [r3]
 800d1e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d1ea:	61fb      	str	r3, [r7, #28]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	330c      	adds	r3, #12
 800d1f2:	69fa      	ldr	r2, [r7, #28]
 800d1f4:	61ba      	str	r2, [r7, #24]
 800d1f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	6979      	ldr	r1, [r7, #20]
 800d1fa:	69ba      	ldr	r2, [r7, #24]
 800d1fc:	e841 2300 	strex	r3, r2, [r1]
 800d200:	613b      	str	r3, [r7, #16]
   return(result);
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e5      	bne.n	800d1d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2220      	movs	r2, #32
 800d20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d210:	bf00      	nop
 800d212:	3724      	adds	r7, #36	; 0x24
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b095      	sub	sp, #84	; 0x54
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	330c      	adds	r3, #12
 800d22a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22e:	e853 3f00 	ldrex	r3, [r3]
 800d232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d23a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	330c      	adds	r3, #12
 800d242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d244:	643a      	str	r2, [r7, #64]	; 0x40
 800d246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d24a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d24c:	e841 2300 	strex	r3, r2, [r1]
 800d250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1e5      	bne.n	800d224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3314      	adds	r3, #20
 800d25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	e853 3f00 	ldrex	r3, [r3]
 800d266:	61fb      	str	r3, [r7, #28]
   return(result);
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	f023 0301 	bic.w	r3, r3, #1
 800d26e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3314      	adds	r3, #20
 800d276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d27a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d280:	e841 2300 	strex	r3, r2, [r1]
 800d284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1e5      	bne.n	800d258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d290:	2b01      	cmp	r3, #1
 800d292:	d119      	bne.n	800d2c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	330c      	adds	r3, #12
 800d29a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	e853 3f00 	ldrex	r3, [r3]
 800d2a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	f023 0310 	bic.w	r3, r3, #16
 800d2aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	330c      	adds	r3, #12
 800d2b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b4:	61ba      	str	r2, [r7, #24]
 800d2b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	6979      	ldr	r1, [r7, #20]
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	e841 2300 	strex	r3, r2, [r1]
 800d2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e5      	bne.n	800d294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d2d6:	bf00      	nop
 800d2d8:	3754      	adds	r7, #84	; 0x54
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7ff fd4f 	bl	800cda0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b21      	cmp	r3, #33	; 0x21
 800d31c:	d13e      	bne.n	800d39c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d326:	d114      	bne.n	800d352 <UART_Transmit_IT+0x48>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d110      	bne.n	800d352 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	461a      	mov	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d344:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	1c9a      	adds	r2, r3, #2
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	621a      	str	r2, [r3, #32]
 800d350:	e008      	b.n	800d364 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6211      	str	r1, [r2, #32]
 800d35c:	781a      	ldrb	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d368:	b29b      	uxth	r3, r3
 800d36a:	3b01      	subs	r3, #1
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	4619      	mov	r1, r3
 800d372:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10f      	bne.n	800d398 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	68da      	ldr	r2, [r3, #12]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d386:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	68da      	ldr	r2, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d396:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	e000      	b.n	800d39e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d39c:	2302      	movs	r3, #2
  }
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b082      	sub	sp, #8
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68da      	ldr	r2, [r3, #12]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2220      	movs	r2, #32
 800d3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fcd4 	bl	800cd78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b08c      	sub	sp, #48	; 0x30
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b22      	cmp	r3, #34	; 0x22
 800d3ec:	f040 80ab 	bne.w	800d546 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3f8:	d117      	bne.n	800d42a <UART_Receive_IT+0x50>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d113      	bne.n	800d42a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	b29b      	uxth	r3, r3
 800d414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d418:	b29a      	uxth	r2, r3
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d422:	1c9a      	adds	r2, r3, #2
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	629a      	str	r2, [r3, #40]	; 0x28
 800d428:	e026      	b.n	800d478 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d430:	2300      	movs	r3, #0
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d43c:	d007      	beq.n	800d44e <UART_Receive_IT+0x74>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10a      	bne.n	800d45c <UART_Receive_IT+0x82>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	b2da      	uxtb	r2, r3
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	e008      	b.n	800d46e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	3b01      	subs	r3, #1
 800d480:	b29b      	uxth	r3, r3
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4619      	mov	r1, r3
 800d486:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d15a      	bne.n	800d542 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f022 0220 	bic.w	r2, r2, #32
 800d49a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d4aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	695a      	ldr	r2, [r3, #20]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f022 0201 	bic.w	r2, r2, #1
 800d4ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2220      	movs	r2, #32
 800d4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d135      	bne.n	800d538 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	330c      	adds	r3, #12
 800d4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f023 0310 	bic.w	r3, r3, #16
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	330c      	adds	r3, #12
 800d4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f2:	623a      	str	r2, [r7, #32]
 800d4f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	69f9      	ldr	r1, [r7, #28]
 800d4f8:	6a3a      	ldr	r2, [r7, #32]
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e5      	bne.n	800d4d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 0310 	and.w	r3, r3, #16
 800d510:	2b10      	cmp	r3, #16
 800d512:	d10a      	bne.n	800d52a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d514:	2300      	movs	r3, #0
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff fc3f 	bl	800cdb4 <HAL_UARTEx_RxEventCallback>
 800d536:	e002      	b.n	800d53e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7f4 ff89 	bl	8002450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	e002      	b.n	800d548 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	e000      	b.n	800d548 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d546:	2302      	movs	r3, #2
  }
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3730      	adds	r7, #48	; 0x30
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	b09f      	sub	sp, #124	; 0x7c
 800d556:	af00      	add	r7, sp, #0
 800d558:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d566:	68d9      	ldr	r1, [r3, #12]
 800d568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	ea40 0301 	orr.w	r3, r0, r1
 800d570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	431a      	orrs	r2, r3
 800d57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	431a      	orrs	r2, r3
 800d582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	4313      	orrs	r3, r2
 800d588:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d594:	f021 010c 	bic.w	r1, r1, #12
 800d598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d59e:	430b      	orrs	r3, r1
 800d5a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ae:	6999      	ldr	r1, [r3, #24]
 800d5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	ea40 0301 	orr.w	r3, r0, r1
 800d5b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	4bc5      	ldr	r3, [pc, #788]	; (800d8d4 <UART_SetConfig+0x384>)
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d004      	beq.n	800d5ce <UART_SetConfig+0x7e>
 800d5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	4bc3      	ldr	r3, [pc, #780]	; (800d8d8 <UART_SetConfig+0x388>)
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d103      	bne.n	800d5d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d5ce:	f7fc fd17 	bl	800a000 <HAL_RCC_GetPCLK2Freq>
 800d5d2:	6778      	str	r0, [r7, #116]	; 0x74
 800d5d4:	e002      	b.n	800d5dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d5d6:	f7fc fcff 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800d5da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5e4:	f040 80b6 	bne.w	800d754 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d5e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5ea:	461c      	mov	r4, r3
 800d5ec:	f04f 0500 	mov.w	r5, #0
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	1891      	adds	r1, r2, r2
 800d5f6:	6439      	str	r1, [r7, #64]	; 0x40
 800d5f8:	415b      	adcs	r3, r3
 800d5fa:	647b      	str	r3, [r7, #68]	; 0x44
 800d5fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d600:	1912      	adds	r2, r2, r4
 800d602:	eb45 0303 	adc.w	r3, r5, r3
 800d606:	f04f 0000 	mov.w	r0, #0
 800d60a:	f04f 0100 	mov.w	r1, #0
 800d60e:	00d9      	lsls	r1, r3, #3
 800d610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d614:	00d0      	lsls	r0, r2, #3
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	1911      	adds	r1, r2, r4
 800d61c:	6639      	str	r1, [r7, #96]	; 0x60
 800d61e:	416b      	adcs	r3, r5
 800d620:	667b      	str	r3, [r7, #100]	; 0x64
 800d622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	461a      	mov	r2, r3
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	1891      	adds	r1, r2, r2
 800d62e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d630:	415b      	adcs	r3, r3
 800d632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d638:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d63c:	f7f3 fae8 	bl	8000c10 <__aeabi_uldivmod>
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	4ba5      	ldr	r3, [pc, #660]	; (800d8dc <UART_SetConfig+0x38c>)
 800d646:	fba3 2302 	umull	r2, r3, r3, r2
 800d64a:	095b      	lsrs	r3, r3, #5
 800d64c:	011e      	lsls	r6, r3, #4
 800d64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d650:	461c      	mov	r4, r3
 800d652:	f04f 0500 	mov.w	r5, #0
 800d656:	4622      	mov	r2, r4
 800d658:	462b      	mov	r3, r5
 800d65a:	1891      	adds	r1, r2, r2
 800d65c:	6339      	str	r1, [r7, #48]	; 0x30
 800d65e:	415b      	adcs	r3, r3
 800d660:	637b      	str	r3, [r7, #52]	; 0x34
 800d662:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d666:	1912      	adds	r2, r2, r4
 800d668:	eb45 0303 	adc.w	r3, r5, r3
 800d66c:	f04f 0000 	mov.w	r0, #0
 800d670:	f04f 0100 	mov.w	r1, #0
 800d674:	00d9      	lsls	r1, r3, #3
 800d676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d67a:	00d0      	lsls	r0, r2, #3
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	1911      	adds	r1, r2, r4
 800d682:	65b9      	str	r1, [r7, #88]	; 0x58
 800d684:	416b      	adcs	r3, r5
 800d686:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	461a      	mov	r2, r3
 800d68e:	f04f 0300 	mov.w	r3, #0
 800d692:	1891      	adds	r1, r2, r2
 800d694:	62b9      	str	r1, [r7, #40]	; 0x28
 800d696:	415b      	adcs	r3, r3
 800d698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d69a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d69e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d6a2:	f7f3 fab5 	bl	8000c10 <__aeabi_uldivmod>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4b8c      	ldr	r3, [pc, #560]	; (800d8dc <UART_SetConfig+0x38c>)
 800d6ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d6b0:	095b      	lsrs	r3, r3, #5
 800d6b2:	2164      	movs	r1, #100	; 0x64
 800d6b4:	fb01 f303 	mul.w	r3, r1, r3
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	00db      	lsls	r3, r3, #3
 800d6bc:	3332      	adds	r3, #50	; 0x32
 800d6be:	4a87      	ldr	r2, [pc, #540]	; (800d8dc <UART_SetConfig+0x38c>)
 800d6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c4:	095b      	lsrs	r3, r3, #5
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d6cc:	441e      	add	r6, r3
 800d6ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f04f 0100 	mov.w	r1, #0
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	1894      	adds	r4, r2, r2
 800d6dc:	623c      	str	r4, [r7, #32]
 800d6de:	415b      	adcs	r3, r3
 800d6e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6e6:	1812      	adds	r2, r2, r0
 800d6e8:	eb41 0303 	adc.w	r3, r1, r3
 800d6ec:	f04f 0400 	mov.w	r4, #0
 800d6f0:	f04f 0500 	mov.w	r5, #0
 800d6f4:	00dd      	lsls	r5, r3, #3
 800d6f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d6fa:	00d4      	lsls	r4, r2, #3
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	462b      	mov	r3, r5
 800d700:	1814      	adds	r4, r2, r0
 800d702:	653c      	str	r4, [r7, #80]	; 0x50
 800d704:	414b      	adcs	r3, r1
 800d706:	657b      	str	r3, [r7, #84]	; 0x54
 800d708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	461a      	mov	r2, r3
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	1891      	adds	r1, r2, r2
 800d714:	61b9      	str	r1, [r7, #24]
 800d716:	415b      	adcs	r3, r3
 800d718:	61fb      	str	r3, [r7, #28]
 800d71a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d71e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d722:	f7f3 fa75 	bl	8000c10 <__aeabi_uldivmod>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4b6c      	ldr	r3, [pc, #432]	; (800d8dc <UART_SetConfig+0x38c>)
 800d72c:	fba3 1302 	umull	r1, r3, r3, r2
 800d730:	095b      	lsrs	r3, r3, #5
 800d732:	2164      	movs	r1, #100	; 0x64
 800d734:	fb01 f303 	mul.w	r3, r1, r3
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	3332      	adds	r3, #50	; 0x32
 800d73e:	4a67      	ldr	r2, [pc, #412]	; (800d8dc <UART_SetConfig+0x38c>)
 800d740:	fba2 2303 	umull	r2, r3, r2, r3
 800d744:	095b      	lsrs	r3, r3, #5
 800d746:	f003 0207 	and.w	r2, r3, #7
 800d74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4432      	add	r2, r6
 800d750:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d752:	e0b9      	b.n	800d8c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d756:	461c      	mov	r4, r3
 800d758:	f04f 0500 	mov.w	r5, #0
 800d75c:	4622      	mov	r2, r4
 800d75e:	462b      	mov	r3, r5
 800d760:	1891      	adds	r1, r2, r2
 800d762:	6139      	str	r1, [r7, #16]
 800d764:	415b      	adcs	r3, r3
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d76c:	1912      	adds	r2, r2, r4
 800d76e:	eb45 0303 	adc.w	r3, r5, r3
 800d772:	f04f 0000 	mov.w	r0, #0
 800d776:	f04f 0100 	mov.w	r1, #0
 800d77a:	00d9      	lsls	r1, r3, #3
 800d77c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d780:	00d0      	lsls	r0, r2, #3
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	eb12 0804 	adds.w	r8, r2, r4
 800d78a:	eb43 0905 	adc.w	r9, r3, r5
 800d78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	4618      	mov	r0, r3
 800d794:	f04f 0100 	mov.w	r1, #0
 800d798:	f04f 0200 	mov.w	r2, #0
 800d79c:	f04f 0300 	mov.w	r3, #0
 800d7a0:	008b      	lsls	r3, r1, #2
 800d7a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d7a6:	0082      	lsls	r2, r0, #2
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	f7f3 fa30 	bl	8000c10 <__aeabi_uldivmod>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4b49      	ldr	r3, [pc, #292]	; (800d8dc <UART_SetConfig+0x38c>)
 800d7b6:	fba3 2302 	umull	r2, r3, r3, r2
 800d7ba:	095b      	lsrs	r3, r3, #5
 800d7bc:	011e      	lsls	r6, r3, #4
 800d7be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f04f 0100 	mov.w	r1, #0
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	1894      	adds	r4, r2, r2
 800d7cc:	60bc      	str	r4, [r7, #8]
 800d7ce:	415b      	adcs	r3, r3
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d7d6:	1812      	adds	r2, r2, r0
 800d7d8:	eb41 0303 	adc.w	r3, r1, r3
 800d7dc:	f04f 0400 	mov.w	r4, #0
 800d7e0:	f04f 0500 	mov.w	r5, #0
 800d7e4:	00dd      	lsls	r5, r3, #3
 800d7e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d7ea:	00d4      	lsls	r4, r2, #3
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	462b      	mov	r3, r5
 800d7f0:	1814      	adds	r4, r2, r0
 800d7f2:	64bc      	str	r4, [r7, #72]	; 0x48
 800d7f4:	414b      	adcs	r3, r1
 800d7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f04f 0100 	mov.w	r1, #0
 800d802:	f04f 0200 	mov.w	r2, #0
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	008b      	lsls	r3, r1, #2
 800d80c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d810:	0082      	lsls	r2, r0, #2
 800d812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d816:	f7f3 f9fb 	bl	8000c10 <__aeabi_uldivmod>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	4b2f      	ldr	r3, [pc, #188]	; (800d8dc <UART_SetConfig+0x38c>)
 800d820:	fba3 1302 	umull	r1, r3, r3, r2
 800d824:	095b      	lsrs	r3, r3, #5
 800d826:	2164      	movs	r1, #100	; 0x64
 800d828:	fb01 f303 	mul.w	r3, r1, r3
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	011b      	lsls	r3, r3, #4
 800d830:	3332      	adds	r3, #50	; 0x32
 800d832:	4a2a      	ldr	r2, [pc, #168]	; (800d8dc <UART_SetConfig+0x38c>)
 800d834:	fba2 2303 	umull	r2, r3, r2, r3
 800d838:	095b      	lsrs	r3, r3, #5
 800d83a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d83e:	441e      	add	r6, r3
 800d840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d842:	4618      	mov	r0, r3
 800d844:	f04f 0100 	mov.w	r1, #0
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	1894      	adds	r4, r2, r2
 800d84e:	603c      	str	r4, [r7, #0]
 800d850:	415b      	adcs	r3, r3
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d858:	1812      	adds	r2, r2, r0
 800d85a:	eb41 0303 	adc.w	r3, r1, r3
 800d85e:	f04f 0400 	mov.w	r4, #0
 800d862:	f04f 0500 	mov.w	r5, #0
 800d866:	00dd      	lsls	r5, r3, #3
 800d868:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d86c:	00d4      	lsls	r4, r2, #3
 800d86e:	4622      	mov	r2, r4
 800d870:	462b      	mov	r3, r5
 800d872:	eb12 0a00 	adds.w	sl, r2, r0
 800d876:	eb43 0b01 	adc.w	fp, r3, r1
 800d87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	4618      	mov	r0, r3
 800d880:	f04f 0100 	mov.w	r1, #0
 800d884:	f04f 0200 	mov.w	r2, #0
 800d888:	f04f 0300 	mov.w	r3, #0
 800d88c:	008b      	lsls	r3, r1, #2
 800d88e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d892:	0082      	lsls	r2, r0, #2
 800d894:	4650      	mov	r0, sl
 800d896:	4659      	mov	r1, fp
 800d898:	f7f3 f9ba 	bl	8000c10 <__aeabi_uldivmod>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	; (800d8dc <UART_SetConfig+0x38c>)
 800d8a2:	fba3 1302 	umull	r1, r3, r3, r2
 800d8a6:	095b      	lsrs	r3, r3, #5
 800d8a8:	2164      	movs	r1, #100	; 0x64
 800d8aa:	fb01 f303 	mul.w	r3, r1, r3
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	3332      	adds	r3, #50	; 0x32
 800d8b4:	4a09      	ldr	r2, [pc, #36]	; (800d8dc <UART_SetConfig+0x38c>)
 800d8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ba:	095b      	lsrs	r3, r3, #5
 800d8bc:	f003 020f 	and.w	r2, r3, #15
 800d8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4432      	add	r2, r6
 800d8c6:	609a      	str	r2, [r3, #8]
}
 800d8c8:	bf00      	nop
 800d8ca:	377c      	adds	r7, #124	; 0x7c
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d2:	bf00      	nop
 800d8d4:	40011000 	.word	0x40011000
 800d8d8:	40011400 	.word	0x40011400
 800d8dc:	51eb851f 	.word	0x51eb851f

0800d8e0 <__errno>:
 800d8e0:	4b01      	ldr	r3, [pc, #4]	; (800d8e8 <__errno+0x8>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	200001e8 	.word	0x200001e8

0800d8ec <__libc_init_array>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	4d0d      	ldr	r5, [pc, #52]	; (800d924 <__libc_init_array+0x38>)
 800d8f0:	4c0d      	ldr	r4, [pc, #52]	; (800d928 <__libc_init_array+0x3c>)
 800d8f2:	1b64      	subs	r4, r4, r5
 800d8f4:	10a4      	asrs	r4, r4, #2
 800d8f6:	2600      	movs	r6, #0
 800d8f8:	42a6      	cmp	r6, r4
 800d8fa:	d109      	bne.n	800d910 <__libc_init_array+0x24>
 800d8fc:	4d0b      	ldr	r5, [pc, #44]	; (800d92c <__libc_init_array+0x40>)
 800d8fe:	4c0c      	ldr	r4, [pc, #48]	; (800d930 <__libc_init_array+0x44>)
 800d900:	f001 f91c 	bl	800eb3c <_init>
 800d904:	1b64      	subs	r4, r4, r5
 800d906:	10a4      	asrs	r4, r4, #2
 800d908:	2600      	movs	r6, #0
 800d90a:	42a6      	cmp	r6, r4
 800d90c:	d105      	bne.n	800d91a <__libc_init_array+0x2e>
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
 800d910:	f855 3b04 	ldr.w	r3, [r5], #4
 800d914:	4798      	blx	r3
 800d916:	3601      	adds	r6, #1
 800d918:	e7ee      	b.n	800d8f8 <__libc_init_array+0xc>
 800d91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d91e:	4798      	blx	r3
 800d920:	3601      	adds	r6, #1
 800d922:	e7f2      	b.n	800d90a <__libc_init_array+0x1e>
 800d924:	0800f018 	.word	0x0800f018
 800d928:	0800f018 	.word	0x0800f018
 800d92c:	0800f018 	.word	0x0800f018
 800d930:	0800f01c 	.word	0x0800f01c

0800d934 <memcpy>:
 800d934:	440a      	add	r2, r1
 800d936:	4291      	cmp	r1, r2
 800d938:	f100 33ff 	add.w	r3, r0, #4294967295
 800d93c:	d100      	bne.n	800d940 <memcpy+0xc>
 800d93e:	4770      	bx	lr
 800d940:	b510      	push	{r4, lr}
 800d942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d94a:	4291      	cmp	r1, r2
 800d94c:	d1f9      	bne.n	800d942 <memcpy+0xe>
 800d94e:	bd10      	pop	{r4, pc}

0800d950 <memset>:
 800d950:	4402      	add	r2, r0
 800d952:	4603      	mov	r3, r0
 800d954:	4293      	cmp	r3, r2
 800d956:	d100      	bne.n	800d95a <memset+0xa>
 800d958:	4770      	bx	lr
 800d95a:	f803 1b01 	strb.w	r1, [r3], #1
 800d95e:	e7f9      	b.n	800d954 <memset+0x4>

0800d960 <ceil>:
 800d960:	ec51 0b10 	vmov	r0, r1, d0
 800d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d96c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d970:	2e13      	cmp	r6, #19
 800d972:	ee10 5a10 	vmov	r5, s0
 800d976:	ee10 8a10 	vmov	r8, s0
 800d97a:	460c      	mov	r4, r1
 800d97c:	dc30      	bgt.n	800d9e0 <ceil+0x80>
 800d97e:	2e00      	cmp	r6, #0
 800d980:	da12      	bge.n	800d9a8 <ceil+0x48>
 800d982:	a335      	add	r3, pc, #212	; (adr r3, 800da58 <ceil+0xf8>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f2 fc44 	bl	8000214 <__adddf3>
 800d98c:	2200      	movs	r2, #0
 800d98e:	2300      	movs	r3, #0
 800d990:	f7f3 f886 	bl	8000aa0 <__aeabi_dcmpgt>
 800d994:	b128      	cbz	r0, 800d9a2 <ceil+0x42>
 800d996:	2c00      	cmp	r4, #0
 800d998:	db55      	blt.n	800da46 <ceil+0xe6>
 800d99a:	432c      	orrs	r4, r5
 800d99c:	d057      	beq.n	800da4e <ceil+0xee>
 800d99e:	4c30      	ldr	r4, [pc, #192]	; (800da60 <ceil+0x100>)
 800d9a0:	2500      	movs	r5, #0
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e025      	b.n	800d9f4 <ceil+0x94>
 800d9a8:	4f2e      	ldr	r7, [pc, #184]	; (800da64 <ceil+0x104>)
 800d9aa:	4137      	asrs	r7, r6
 800d9ac:	ea01 0307 	and.w	r3, r1, r7
 800d9b0:	4303      	orrs	r3, r0
 800d9b2:	d01f      	beq.n	800d9f4 <ceil+0x94>
 800d9b4:	a328      	add	r3, pc, #160	; (adr r3, 800da58 <ceil+0xf8>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fc2b 	bl	8000214 <__adddf3>
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f7f3 f86d 	bl	8000aa0 <__aeabi_dcmpgt>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0eb      	beq.n	800d9a2 <ceil+0x42>
 800d9ca:	2c00      	cmp	r4, #0
 800d9cc:	bfc2      	ittt	gt
 800d9ce:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d9d2:	fa43 f606 	asrgt.w	r6, r3, r6
 800d9d6:	19a4      	addgt	r4, r4, r6
 800d9d8:	ea24 0407 	bic.w	r4, r4, r7
 800d9dc:	2500      	movs	r5, #0
 800d9de:	e7e0      	b.n	800d9a2 <ceil+0x42>
 800d9e0:	2e33      	cmp	r6, #51	; 0x33
 800d9e2:	dd0b      	ble.n	800d9fc <ceil+0x9c>
 800d9e4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d9e8:	d104      	bne.n	800d9f4 <ceil+0x94>
 800d9ea:	ee10 2a10 	vmov	r2, s0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	f7f2 fc10 	bl	8000214 <__adddf3>
 800d9f4:	ec41 0b10 	vmov	d0, r0, r1
 800d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	fa23 f707 	lsr.w	r7, r3, r7
 800da08:	4207      	tst	r7, r0
 800da0a:	d0f3      	beq.n	800d9f4 <ceil+0x94>
 800da0c:	a312      	add	r3, pc, #72	; (adr r3, 800da58 <ceil+0xf8>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	f7f2 fbff 	bl	8000214 <__adddf3>
 800da16:	2200      	movs	r2, #0
 800da18:	2300      	movs	r3, #0
 800da1a:	f7f3 f841 	bl	8000aa0 <__aeabi_dcmpgt>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d0bf      	beq.n	800d9a2 <ceil+0x42>
 800da22:	2c00      	cmp	r4, #0
 800da24:	dd02      	ble.n	800da2c <ceil+0xcc>
 800da26:	2e14      	cmp	r6, #20
 800da28:	d103      	bne.n	800da32 <ceil+0xd2>
 800da2a:	3401      	adds	r4, #1
 800da2c:	ea25 0507 	bic.w	r5, r5, r7
 800da30:	e7b7      	b.n	800d9a2 <ceil+0x42>
 800da32:	2301      	movs	r3, #1
 800da34:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da38:	fa03 f606 	lsl.w	r6, r3, r6
 800da3c:	4435      	add	r5, r6
 800da3e:	4545      	cmp	r5, r8
 800da40:	bf38      	it	cc
 800da42:	18e4      	addcc	r4, r4, r3
 800da44:	e7f2      	b.n	800da2c <ceil+0xcc>
 800da46:	2500      	movs	r5, #0
 800da48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800da4c:	e7a9      	b.n	800d9a2 <ceil+0x42>
 800da4e:	4625      	mov	r5, r4
 800da50:	e7a7      	b.n	800d9a2 <ceil+0x42>
 800da52:	bf00      	nop
 800da54:	f3af 8000 	nop.w
 800da58:	8800759c 	.word	0x8800759c
 800da5c:	7e37e43c 	.word	0x7e37e43c
 800da60:	3ff00000 	.word	0x3ff00000
 800da64:	000fffff 	.word	0x000fffff

0800da68 <floor>:
 800da68:	ec51 0b10 	vmov	r0, r1, d0
 800da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800da74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800da78:	2e13      	cmp	r6, #19
 800da7a:	ee10 5a10 	vmov	r5, s0
 800da7e:	ee10 8a10 	vmov	r8, s0
 800da82:	460c      	mov	r4, r1
 800da84:	dc32      	bgt.n	800daec <floor+0x84>
 800da86:	2e00      	cmp	r6, #0
 800da88:	da14      	bge.n	800dab4 <floor+0x4c>
 800da8a:	a333      	add	r3, pc, #204	; (adr r3, 800db58 <floor+0xf0>)
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	f7f2 fbc0 	bl	8000214 <__adddf3>
 800da94:	2200      	movs	r2, #0
 800da96:	2300      	movs	r3, #0
 800da98:	f7f3 f802 	bl	8000aa0 <__aeabi_dcmpgt>
 800da9c:	b138      	cbz	r0, 800daae <floor+0x46>
 800da9e:	2c00      	cmp	r4, #0
 800daa0:	da57      	bge.n	800db52 <floor+0xea>
 800daa2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800daa6:	431d      	orrs	r5, r3
 800daa8:	d001      	beq.n	800daae <floor+0x46>
 800daaa:	4c2d      	ldr	r4, [pc, #180]	; (800db60 <floor+0xf8>)
 800daac:	2500      	movs	r5, #0
 800daae:	4621      	mov	r1, r4
 800dab0:	4628      	mov	r0, r5
 800dab2:	e025      	b.n	800db00 <floor+0x98>
 800dab4:	4f2b      	ldr	r7, [pc, #172]	; (800db64 <floor+0xfc>)
 800dab6:	4137      	asrs	r7, r6
 800dab8:	ea01 0307 	and.w	r3, r1, r7
 800dabc:	4303      	orrs	r3, r0
 800dabe:	d01f      	beq.n	800db00 <floor+0x98>
 800dac0:	a325      	add	r3, pc, #148	; (adr r3, 800db58 <floor+0xf0>)
 800dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac6:	f7f2 fba5 	bl	8000214 <__adddf3>
 800daca:	2200      	movs	r2, #0
 800dacc:	2300      	movs	r3, #0
 800dace:	f7f2 ffe7 	bl	8000aa0 <__aeabi_dcmpgt>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d0eb      	beq.n	800daae <floor+0x46>
 800dad6:	2c00      	cmp	r4, #0
 800dad8:	bfbe      	ittt	lt
 800dada:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dade:	fa43 f606 	asrlt.w	r6, r3, r6
 800dae2:	19a4      	addlt	r4, r4, r6
 800dae4:	ea24 0407 	bic.w	r4, r4, r7
 800dae8:	2500      	movs	r5, #0
 800daea:	e7e0      	b.n	800daae <floor+0x46>
 800daec:	2e33      	cmp	r6, #51	; 0x33
 800daee:	dd0b      	ble.n	800db08 <floor+0xa0>
 800daf0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800daf4:	d104      	bne.n	800db00 <floor+0x98>
 800daf6:	ee10 2a10 	vmov	r2, s0
 800dafa:	460b      	mov	r3, r1
 800dafc:	f7f2 fb8a 	bl	8000214 <__adddf3>
 800db00:	ec41 0b10 	vmov	d0, r0, r1
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800db0c:	f04f 33ff 	mov.w	r3, #4294967295
 800db10:	fa23 f707 	lsr.w	r7, r3, r7
 800db14:	4207      	tst	r7, r0
 800db16:	d0f3      	beq.n	800db00 <floor+0x98>
 800db18:	a30f      	add	r3, pc, #60	; (adr r3, 800db58 <floor+0xf0>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 fb79 	bl	8000214 <__adddf3>
 800db22:	2200      	movs	r2, #0
 800db24:	2300      	movs	r3, #0
 800db26:	f7f2 ffbb 	bl	8000aa0 <__aeabi_dcmpgt>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d0bf      	beq.n	800daae <floor+0x46>
 800db2e:	2c00      	cmp	r4, #0
 800db30:	da02      	bge.n	800db38 <floor+0xd0>
 800db32:	2e14      	cmp	r6, #20
 800db34:	d103      	bne.n	800db3e <floor+0xd6>
 800db36:	3401      	adds	r4, #1
 800db38:	ea25 0507 	bic.w	r5, r5, r7
 800db3c:	e7b7      	b.n	800daae <floor+0x46>
 800db3e:	2301      	movs	r3, #1
 800db40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db44:	fa03 f606 	lsl.w	r6, r3, r6
 800db48:	4435      	add	r5, r6
 800db4a:	4545      	cmp	r5, r8
 800db4c:	bf38      	it	cc
 800db4e:	18e4      	addcc	r4, r4, r3
 800db50:	e7f2      	b.n	800db38 <floor+0xd0>
 800db52:	2500      	movs	r5, #0
 800db54:	462c      	mov	r4, r5
 800db56:	e7aa      	b.n	800daae <floor+0x46>
 800db58:	8800759c 	.word	0x8800759c
 800db5c:	7e37e43c 	.word	0x7e37e43c
 800db60:	bff00000 	.word	0xbff00000
 800db64:	000fffff 	.word	0x000fffff

0800db68 <pow>:
 800db68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db6c:	ec59 8b10 	vmov	r8, r9, d0
 800db70:	ec57 6b11 	vmov	r6, r7, d1
 800db74:	f000 f8dc 	bl	800dd30 <__ieee754_pow>
 800db78:	4b4e      	ldr	r3, [pc, #312]	; (800dcb4 <pow+0x14c>)
 800db7a:	f993 3000 	ldrsb.w	r3, [r3]
 800db7e:	3301      	adds	r3, #1
 800db80:	ec55 4b10 	vmov	r4, r5, d0
 800db84:	d015      	beq.n	800dbb2 <pow+0x4a>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	4630      	mov	r0, r6
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 ff91 	bl	8000ab4 <__aeabi_dcmpun>
 800db92:	b970      	cbnz	r0, 800dbb2 <pow+0x4a>
 800db94:	4642      	mov	r2, r8
 800db96:	464b      	mov	r3, r9
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 ff8a 	bl	8000ab4 <__aeabi_dcmpun>
 800dba0:	2200      	movs	r2, #0
 800dba2:	2300      	movs	r3, #0
 800dba4:	b148      	cbz	r0, 800dbba <pow+0x52>
 800dba6:	4630      	mov	r0, r6
 800dba8:	4639      	mov	r1, r7
 800dbaa:	f7f2 ff51 	bl	8000a50 <__aeabi_dcmpeq>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d17d      	bne.n	800dcae <pow+0x146>
 800dbb2:	ec45 4b10 	vmov	d0, r4, r5
 800dbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbba:	4640      	mov	r0, r8
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	f7f2 ff47 	bl	8000a50 <__aeabi_dcmpeq>
 800dbc2:	b1e0      	cbz	r0, 800dbfe <pow+0x96>
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	4630      	mov	r0, r6
 800dbca:	4639      	mov	r1, r7
 800dbcc:	f7f2 ff40 	bl	8000a50 <__aeabi_dcmpeq>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d16c      	bne.n	800dcae <pow+0x146>
 800dbd4:	ec47 6b10 	vmov	d0, r6, r7
 800dbd8:	f000 fe89 	bl	800e8ee <finite>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d0e8      	beq.n	800dbb2 <pow+0x4a>
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f7f2 ff3c 	bl	8000a64 <__aeabi_dcmplt>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d0e0      	beq.n	800dbb2 <pow+0x4a>
 800dbf0:	f7ff fe76 	bl	800d8e0 <__errno>
 800dbf4:	2321      	movs	r3, #33	; 0x21
 800dbf6:	6003      	str	r3, [r0, #0]
 800dbf8:	2400      	movs	r4, #0
 800dbfa:	4d2f      	ldr	r5, [pc, #188]	; (800dcb8 <pow+0x150>)
 800dbfc:	e7d9      	b.n	800dbb2 <pow+0x4a>
 800dbfe:	ec45 4b10 	vmov	d0, r4, r5
 800dc02:	f000 fe74 	bl	800e8ee <finite>
 800dc06:	bbb8      	cbnz	r0, 800dc78 <pow+0x110>
 800dc08:	ec49 8b10 	vmov	d0, r8, r9
 800dc0c:	f000 fe6f 	bl	800e8ee <finite>
 800dc10:	b390      	cbz	r0, 800dc78 <pow+0x110>
 800dc12:	ec47 6b10 	vmov	d0, r6, r7
 800dc16:	f000 fe6a 	bl	800e8ee <finite>
 800dc1a:	b368      	cbz	r0, 800dc78 <pow+0x110>
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	462b      	mov	r3, r5
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 ff46 	bl	8000ab4 <__aeabi_dcmpun>
 800dc28:	b160      	cbz	r0, 800dc44 <pow+0xdc>
 800dc2a:	f7ff fe59 	bl	800d8e0 <__errno>
 800dc2e:	2321      	movs	r3, #33	; 0x21
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	4610      	mov	r0, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7f2 fdcb 	bl	80007d4 <__aeabi_ddiv>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	460d      	mov	r5, r1
 800dc42:	e7b6      	b.n	800dbb2 <pow+0x4a>
 800dc44:	f7ff fe4c 	bl	800d8e0 <__errno>
 800dc48:	2322      	movs	r3, #34	; 0x22
 800dc4a:	6003      	str	r3, [r0, #0]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2300      	movs	r3, #0
 800dc50:	4640      	mov	r0, r8
 800dc52:	4649      	mov	r1, r9
 800dc54:	f7f2 ff06 	bl	8000a64 <__aeabi_dcmplt>
 800dc58:	2400      	movs	r4, #0
 800dc5a:	b158      	cbz	r0, 800dc74 <pow+0x10c>
 800dc5c:	ec47 6b10 	vmov	d0, r6, r7
 800dc60:	f000 fe5a 	bl	800e918 <rint>
 800dc64:	4632      	mov	r2, r6
 800dc66:	ec51 0b10 	vmov	r0, r1, d0
 800dc6a:	463b      	mov	r3, r7
 800dc6c:	f7f2 fef0 	bl	8000a50 <__aeabi_dcmpeq>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d0c2      	beq.n	800dbfa <pow+0x92>
 800dc74:	4d11      	ldr	r5, [pc, #68]	; (800dcbc <pow+0x154>)
 800dc76:	e79c      	b.n	800dbb2 <pow+0x4a>
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	4629      	mov	r1, r5
 800dc80:	f7f2 fee6 	bl	8000a50 <__aeabi_dcmpeq>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d094      	beq.n	800dbb2 <pow+0x4a>
 800dc88:	ec49 8b10 	vmov	d0, r8, r9
 800dc8c:	f000 fe2f 	bl	800e8ee <finite>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d08e      	beq.n	800dbb2 <pow+0x4a>
 800dc94:	ec47 6b10 	vmov	d0, r6, r7
 800dc98:	f000 fe29 	bl	800e8ee <finite>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d088      	beq.n	800dbb2 <pow+0x4a>
 800dca0:	f7ff fe1e 	bl	800d8e0 <__errno>
 800dca4:	2322      	movs	r3, #34	; 0x22
 800dca6:	6003      	str	r3, [r0, #0]
 800dca8:	2400      	movs	r4, #0
 800dcaa:	2500      	movs	r5, #0
 800dcac:	e781      	b.n	800dbb2 <pow+0x4a>
 800dcae:	4d04      	ldr	r5, [pc, #16]	; (800dcc0 <pow+0x158>)
 800dcb0:	2400      	movs	r4, #0
 800dcb2:	e77e      	b.n	800dbb2 <pow+0x4a>
 800dcb4:	2000024c 	.word	0x2000024c
 800dcb8:	fff00000 	.word	0xfff00000
 800dcbc:	7ff00000 	.word	0x7ff00000
 800dcc0:	3ff00000 	.word	0x3ff00000

0800dcc4 <sqrt>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	ed2d 8b02 	vpush	{d8}
 800dcca:	ec55 4b10 	vmov	r4, r5, d0
 800dcce:	f000 fd51 	bl	800e774 <__ieee754_sqrt>
 800dcd2:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <sqrt+0x64>)
 800dcd4:	eeb0 8a40 	vmov.f32	s16, s0
 800dcd8:	eef0 8a60 	vmov.f32	s17, s1
 800dcdc:	f993 3000 	ldrsb.w	r3, [r3]
 800dce0:	3301      	adds	r3, #1
 800dce2:	d019      	beq.n	800dd18 <sqrt+0x54>
 800dce4:	4622      	mov	r2, r4
 800dce6:	462b      	mov	r3, r5
 800dce8:	4620      	mov	r0, r4
 800dcea:	4629      	mov	r1, r5
 800dcec:	f7f2 fee2 	bl	8000ab4 <__aeabi_dcmpun>
 800dcf0:	b990      	cbnz	r0, 800dd18 <sqrt+0x54>
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	f7f2 feb3 	bl	8000a64 <__aeabi_dcmplt>
 800dcfe:	b158      	cbz	r0, 800dd18 <sqrt+0x54>
 800dd00:	f7ff fdee 	bl	800d8e0 <__errno>
 800dd04:	2321      	movs	r3, #33	; 0x21
 800dd06:	6003      	str	r3, [r0, #0]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	4619      	mov	r1, r3
 800dd10:	f7f2 fd60 	bl	80007d4 <__aeabi_ddiv>
 800dd14:	ec41 0b18 	vmov	d8, r0, r1
 800dd18:	eeb0 0a48 	vmov.f32	s0, s16
 800dd1c:	eef0 0a68 	vmov.f32	s1, s17
 800dd20:	ecbd 8b02 	vpop	{d8}
 800dd24:	bd38      	pop	{r3, r4, r5, pc}
 800dd26:	bf00      	nop
 800dd28:	2000024c 	.word	0x2000024c
 800dd2c:	00000000 	.word	0x00000000

0800dd30 <__ieee754_pow>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	ed2d 8b06 	vpush	{d8-d10}
 800dd38:	b08d      	sub	sp, #52	; 0x34
 800dd3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dd3e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dd42:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dd46:	ea56 0100 	orrs.w	r1, r6, r0
 800dd4a:	ec53 2b10 	vmov	r2, r3, d0
 800dd4e:	f000 84d1 	beq.w	800e6f4 <__ieee754_pow+0x9c4>
 800dd52:	497f      	ldr	r1, [pc, #508]	; (800df50 <__ieee754_pow+0x220>)
 800dd54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dd58:	428c      	cmp	r4, r1
 800dd5a:	ee10 8a10 	vmov	r8, s0
 800dd5e:	4699      	mov	r9, r3
 800dd60:	dc09      	bgt.n	800dd76 <__ieee754_pow+0x46>
 800dd62:	d103      	bne.n	800dd6c <__ieee754_pow+0x3c>
 800dd64:	b97a      	cbnz	r2, 800dd86 <__ieee754_pow+0x56>
 800dd66:	42a6      	cmp	r6, r4
 800dd68:	dd02      	ble.n	800dd70 <__ieee754_pow+0x40>
 800dd6a:	e00c      	b.n	800dd86 <__ieee754_pow+0x56>
 800dd6c:	428e      	cmp	r6, r1
 800dd6e:	dc02      	bgt.n	800dd76 <__ieee754_pow+0x46>
 800dd70:	428e      	cmp	r6, r1
 800dd72:	d110      	bne.n	800dd96 <__ieee754_pow+0x66>
 800dd74:	b178      	cbz	r0, 800dd96 <__ieee754_pow+0x66>
 800dd76:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dd7a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd7e:	ea54 0308 	orrs.w	r3, r4, r8
 800dd82:	f000 84b7 	beq.w	800e6f4 <__ieee754_pow+0x9c4>
 800dd86:	4873      	ldr	r0, [pc, #460]	; (800df54 <__ieee754_pow+0x224>)
 800dd88:	b00d      	add	sp, #52	; 0x34
 800dd8a:	ecbd 8b06 	vpop	{d8-d10}
 800dd8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd92:	f000 bdb9 	b.w	800e908 <nan>
 800dd96:	f1b9 0f00 	cmp.w	r9, #0
 800dd9a:	da36      	bge.n	800de0a <__ieee754_pow+0xda>
 800dd9c:	496e      	ldr	r1, [pc, #440]	; (800df58 <__ieee754_pow+0x228>)
 800dd9e:	428e      	cmp	r6, r1
 800dda0:	dc51      	bgt.n	800de46 <__ieee754_pow+0x116>
 800dda2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dda6:	428e      	cmp	r6, r1
 800dda8:	f340 84af 	ble.w	800e70a <__ieee754_pow+0x9da>
 800ddac:	1531      	asrs	r1, r6, #20
 800ddae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ddb2:	2914      	cmp	r1, #20
 800ddb4:	dd0f      	ble.n	800ddd6 <__ieee754_pow+0xa6>
 800ddb6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800ddba:	fa20 fc01 	lsr.w	ip, r0, r1
 800ddbe:	fa0c f101 	lsl.w	r1, ip, r1
 800ddc2:	4281      	cmp	r1, r0
 800ddc4:	f040 84a1 	bne.w	800e70a <__ieee754_pow+0x9da>
 800ddc8:	f00c 0c01 	and.w	ip, ip, #1
 800ddcc:	f1cc 0102 	rsb	r1, ip, #2
 800ddd0:	9100      	str	r1, [sp, #0]
 800ddd2:	b180      	cbz	r0, 800ddf6 <__ieee754_pow+0xc6>
 800ddd4:	e059      	b.n	800de8a <__ieee754_pow+0x15a>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d155      	bne.n	800de86 <__ieee754_pow+0x156>
 800ddda:	f1c1 0114 	rsb	r1, r1, #20
 800ddde:	fa46 fc01 	asr.w	ip, r6, r1
 800dde2:	fa0c f101 	lsl.w	r1, ip, r1
 800dde6:	42b1      	cmp	r1, r6
 800dde8:	f040 848c 	bne.w	800e704 <__ieee754_pow+0x9d4>
 800ddec:	f00c 0c01 	and.w	ip, ip, #1
 800ddf0:	f1cc 0102 	rsb	r1, ip, #2
 800ddf4:	9100      	str	r1, [sp, #0]
 800ddf6:	4959      	ldr	r1, [pc, #356]	; (800df5c <__ieee754_pow+0x22c>)
 800ddf8:	428e      	cmp	r6, r1
 800ddfa:	d12d      	bne.n	800de58 <__ieee754_pow+0x128>
 800ddfc:	2f00      	cmp	r7, #0
 800ddfe:	da79      	bge.n	800def4 <__ieee754_pow+0x1c4>
 800de00:	4956      	ldr	r1, [pc, #344]	; (800df5c <__ieee754_pow+0x22c>)
 800de02:	2000      	movs	r0, #0
 800de04:	f7f2 fce6 	bl	80007d4 <__aeabi_ddiv>
 800de08:	e016      	b.n	800de38 <__ieee754_pow+0x108>
 800de0a:	2100      	movs	r1, #0
 800de0c:	9100      	str	r1, [sp, #0]
 800de0e:	2800      	cmp	r0, #0
 800de10:	d13b      	bne.n	800de8a <__ieee754_pow+0x15a>
 800de12:	494f      	ldr	r1, [pc, #316]	; (800df50 <__ieee754_pow+0x220>)
 800de14:	428e      	cmp	r6, r1
 800de16:	d1ee      	bne.n	800ddf6 <__ieee754_pow+0xc6>
 800de18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800de1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800de20:	ea53 0308 	orrs.w	r3, r3, r8
 800de24:	f000 8466 	beq.w	800e6f4 <__ieee754_pow+0x9c4>
 800de28:	4b4d      	ldr	r3, [pc, #308]	; (800df60 <__ieee754_pow+0x230>)
 800de2a:	429c      	cmp	r4, r3
 800de2c:	dd0d      	ble.n	800de4a <__ieee754_pow+0x11a>
 800de2e:	2f00      	cmp	r7, #0
 800de30:	f280 8464 	bge.w	800e6fc <__ieee754_pow+0x9cc>
 800de34:	2000      	movs	r0, #0
 800de36:	2100      	movs	r1, #0
 800de38:	ec41 0b10 	vmov	d0, r0, r1
 800de3c:	b00d      	add	sp, #52	; 0x34
 800de3e:	ecbd 8b06 	vpop	{d8-d10}
 800de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de46:	2102      	movs	r1, #2
 800de48:	e7e0      	b.n	800de0c <__ieee754_pow+0xdc>
 800de4a:	2f00      	cmp	r7, #0
 800de4c:	daf2      	bge.n	800de34 <__ieee754_pow+0x104>
 800de4e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800de52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de56:	e7ef      	b.n	800de38 <__ieee754_pow+0x108>
 800de58:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800de5c:	d104      	bne.n	800de68 <__ieee754_pow+0x138>
 800de5e:	4610      	mov	r0, r2
 800de60:	4619      	mov	r1, r3
 800de62:	f7f2 fb8d 	bl	8000580 <__aeabi_dmul>
 800de66:	e7e7      	b.n	800de38 <__ieee754_pow+0x108>
 800de68:	493e      	ldr	r1, [pc, #248]	; (800df64 <__ieee754_pow+0x234>)
 800de6a:	428f      	cmp	r7, r1
 800de6c:	d10d      	bne.n	800de8a <__ieee754_pow+0x15a>
 800de6e:	f1b9 0f00 	cmp.w	r9, #0
 800de72:	db0a      	blt.n	800de8a <__ieee754_pow+0x15a>
 800de74:	ec43 2b10 	vmov	d0, r2, r3
 800de78:	b00d      	add	sp, #52	; 0x34
 800de7a:	ecbd 8b06 	vpop	{d8-d10}
 800de7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de82:	f000 bc77 	b.w	800e774 <__ieee754_sqrt>
 800de86:	2100      	movs	r1, #0
 800de88:	9100      	str	r1, [sp, #0]
 800de8a:	ec43 2b10 	vmov	d0, r2, r3
 800de8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de92:	f000 fd23 	bl	800e8dc <fabs>
 800de96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de9a:	ec51 0b10 	vmov	r0, r1, d0
 800de9e:	f1b8 0f00 	cmp.w	r8, #0
 800dea2:	d12a      	bne.n	800defa <__ieee754_pow+0x1ca>
 800dea4:	b12c      	cbz	r4, 800deb2 <__ieee754_pow+0x182>
 800dea6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800df5c <__ieee754_pow+0x22c>
 800deaa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800deae:	45e6      	cmp	lr, ip
 800deb0:	d123      	bne.n	800defa <__ieee754_pow+0x1ca>
 800deb2:	2f00      	cmp	r7, #0
 800deb4:	da05      	bge.n	800dec2 <__ieee754_pow+0x192>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	2000      	movs	r0, #0
 800debc:	4927      	ldr	r1, [pc, #156]	; (800df5c <__ieee754_pow+0x22c>)
 800debe:	f7f2 fc89 	bl	80007d4 <__aeabi_ddiv>
 800dec2:	f1b9 0f00 	cmp.w	r9, #0
 800dec6:	dab7      	bge.n	800de38 <__ieee754_pow+0x108>
 800dec8:	9b00      	ldr	r3, [sp, #0]
 800deca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dece:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ded2:	4323      	orrs	r3, r4
 800ded4:	d108      	bne.n	800dee8 <__ieee754_pow+0x1b8>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	4610      	mov	r0, r2
 800dedc:	4619      	mov	r1, r3
 800dede:	f7f2 f997 	bl	8000210 <__aeabi_dsub>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	e78d      	b.n	800de04 <__ieee754_pow+0xd4>
 800dee8:	9b00      	ldr	r3, [sp, #0]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d1a4      	bne.n	800de38 <__ieee754_pow+0x108>
 800deee:	4602      	mov	r2, r0
 800def0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800def4:	4610      	mov	r0, r2
 800def6:	4619      	mov	r1, r3
 800def8:	e79e      	b.n	800de38 <__ieee754_pow+0x108>
 800defa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800defe:	f10c 35ff 	add.w	r5, ip, #4294967295
 800df02:	950a      	str	r5, [sp, #40]	; 0x28
 800df04:	9d00      	ldr	r5, [sp, #0]
 800df06:	46ac      	mov	ip, r5
 800df08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800df0a:	ea5c 0505 	orrs.w	r5, ip, r5
 800df0e:	d0e4      	beq.n	800deda <__ieee754_pow+0x1aa>
 800df10:	4b15      	ldr	r3, [pc, #84]	; (800df68 <__ieee754_pow+0x238>)
 800df12:	429e      	cmp	r6, r3
 800df14:	f340 80fc 	ble.w	800e110 <__ieee754_pow+0x3e0>
 800df18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800df1c:	429e      	cmp	r6, r3
 800df1e:	4b10      	ldr	r3, [pc, #64]	; (800df60 <__ieee754_pow+0x230>)
 800df20:	dd07      	ble.n	800df32 <__ieee754_pow+0x202>
 800df22:	429c      	cmp	r4, r3
 800df24:	dc0a      	bgt.n	800df3c <__ieee754_pow+0x20c>
 800df26:	2f00      	cmp	r7, #0
 800df28:	da84      	bge.n	800de34 <__ieee754_pow+0x104>
 800df2a:	a307      	add	r3, pc, #28	; (adr r3, 800df48 <__ieee754_pow+0x218>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	e795      	b.n	800de5e <__ieee754_pow+0x12e>
 800df32:	429c      	cmp	r4, r3
 800df34:	dbf7      	blt.n	800df26 <__ieee754_pow+0x1f6>
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <__ieee754_pow+0x22c>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	dd17      	ble.n	800df6c <__ieee754_pow+0x23c>
 800df3c:	2f00      	cmp	r7, #0
 800df3e:	dcf4      	bgt.n	800df2a <__ieee754_pow+0x1fa>
 800df40:	e778      	b.n	800de34 <__ieee754_pow+0x104>
 800df42:	bf00      	nop
 800df44:	f3af 8000 	nop.w
 800df48:	8800759c 	.word	0x8800759c
 800df4c:	7e37e43c 	.word	0x7e37e43c
 800df50:	7ff00000 	.word	0x7ff00000
 800df54:	0800efc8 	.word	0x0800efc8
 800df58:	433fffff 	.word	0x433fffff
 800df5c:	3ff00000 	.word	0x3ff00000
 800df60:	3fefffff 	.word	0x3fefffff
 800df64:	3fe00000 	.word	0x3fe00000
 800df68:	41e00000 	.word	0x41e00000
 800df6c:	4b64      	ldr	r3, [pc, #400]	; (800e100 <__ieee754_pow+0x3d0>)
 800df6e:	2200      	movs	r2, #0
 800df70:	f7f2 f94e 	bl	8000210 <__aeabi_dsub>
 800df74:	a356      	add	r3, pc, #344	; (adr r3, 800e0d0 <__ieee754_pow+0x3a0>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	f7f2 faff 	bl	8000580 <__aeabi_dmul>
 800df82:	a355      	add	r3, pc, #340	; (adr r3, 800e0d8 <__ieee754_pow+0x3a8>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 faf6 	bl	8000580 <__aeabi_dmul>
 800df94:	4b5b      	ldr	r3, [pc, #364]	; (800e104 <__ieee754_pow+0x3d4>)
 800df96:	4682      	mov	sl, r0
 800df98:	468b      	mov	fp, r1
 800df9a:	2200      	movs	r2, #0
 800df9c:	4620      	mov	r0, r4
 800df9e:	4629      	mov	r1, r5
 800dfa0:	f7f2 faee 	bl	8000580 <__aeabi_dmul>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	a14d      	add	r1, pc, #308	; (adr r1, 800e0e0 <__ieee754_pow+0x3b0>)
 800dfaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfae:	f7f2 f92f 	bl	8000210 <__aeabi_dsub>
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	f7f2 fae3 	bl	8000580 <__aeabi_dmul>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	4951      	ldr	r1, [pc, #324]	; (800e108 <__ieee754_pow+0x3d8>)
 800dfc2:	f7f2 f925 	bl	8000210 <__aeabi_dsub>
 800dfc6:	4622      	mov	r2, r4
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4689      	mov	r9, r1
 800dfcc:	462b      	mov	r3, r5
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 fad5 	bl	8000580 <__aeabi_dmul>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 facf 	bl	8000580 <__aeabi_dmul>
 800dfe2:	a341      	add	r3, pc, #260	; (adr r3, 800e0e8 <__ieee754_pow+0x3b8>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 faca 	bl	8000580 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4650      	mov	r0, sl
 800dff2:	4659      	mov	r1, fp
 800dff4:	f7f2 f90c 	bl	8000210 <__aeabi_dsub>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	4630      	mov	r0, r6
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 f906 	bl	8000214 <__adddf3>
 800e008:	2400      	movs	r4, #0
 800e00a:	4632      	mov	r2, r6
 800e00c:	463b      	mov	r3, r7
 800e00e:	4620      	mov	r0, r4
 800e010:	460d      	mov	r5, r1
 800e012:	f7f2 f8fd 	bl	8000210 <__aeabi_dsub>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 f8f7 	bl	8000210 <__aeabi_dsub>
 800e022:	9b00      	ldr	r3, [sp, #0]
 800e024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e026:	3b01      	subs	r3, #1
 800e028:	4313      	orrs	r3, r2
 800e02a:	4682      	mov	sl, r0
 800e02c:	468b      	mov	fp, r1
 800e02e:	f040 81f1 	bne.w	800e414 <__ieee754_pow+0x6e4>
 800e032:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e0f0 <__ieee754_pow+0x3c0>
 800e036:	eeb0 8a47 	vmov.f32	s16, s14
 800e03a:	eef0 8a67 	vmov.f32	s17, s15
 800e03e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e042:	2600      	movs	r6, #0
 800e044:	4632      	mov	r2, r6
 800e046:	463b      	mov	r3, r7
 800e048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e04c:	f7f2 f8e0 	bl	8000210 <__aeabi_dsub>
 800e050:	4622      	mov	r2, r4
 800e052:	462b      	mov	r3, r5
 800e054:	f7f2 fa94 	bl	8000580 <__aeabi_dmul>
 800e058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	f7f2 fa8c 	bl	8000580 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4640      	mov	r0, r8
 800e06e:	4649      	mov	r1, r9
 800e070:	f7f2 f8d0 	bl	8000214 <__adddf3>
 800e074:	4632      	mov	r2, r6
 800e076:	463b      	mov	r3, r7
 800e078:	4680      	mov	r8, r0
 800e07a:	4689      	mov	r9, r1
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 fa7e 	bl	8000580 <__aeabi_dmul>
 800e084:	460b      	mov	r3, r1
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	4602      	mov	r2, r0
 800e08c:	4649      	mov	r1, r9
 800e08e:	4640      	mov	r0, r8
 800e090:	f7f2 f8c0 	bl	8000214 <__adddf3>
 800e094:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <__ieee754_pow+0x3dc>)
 800e096:	4299      	cmp	r1, r3
 800e098:	ec45 4b19 	vmov	d9, r4, r5
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	468b      	mov	fp, r1
 800e0a2:	f340 82fe 	ble.w	800e6a2 <__ieee754_pow+0x972>
 800e0a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e0aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e0ae:	4303      	orrs	r3, r0
 800e0b0:	f000 81f0 	beq.w	800e494 <__ieee754_pow+0x764>
 800e0b4:	a310      	add	r3, pc, #64	; (adr r3, 800e0f8 <__ieee754_pow+0x3c8>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	ec51 0b18 	vmov	r0, r1, d8
 800e0be:	f7f2 fa5f 	bl	8000580 <__aeabi_dmul>
 800e0c2:	a30d      	add	r3, pc, #52	; (adr r3, 800e0f8 <__ieee754_pow+0x3c8>)
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	e6cb      	b.n	800de62 <__ieee754_pow+0x132>
 800e0ca:	bf00      	nop
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	60000000 	.word	0x60000000
 800e0d4:	3ff71547 	.word	0x3ff71547
 800e0d8:	f85ddf44 	.word	0xf85ddf44
 800e0dc:	3e54ae0b 	.word	0x3e54ae0b
 800e0e0:	55555555 	.word	0x55555555
 800e0e4:	3fd55555 	.word	0x3fd55555
 800e0e8:	652b82fe 	.word	0x652b82fe
 800e0ec:	3ff71547 	.word	0x3ff71547
 800e0f0:	00000000 	.word	0x00000000
 800e0f4:	bff00000 	.word	0xbff00000
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	7e37e43c 	.word	0x7e37e43c
 800e100:	3ff00000 	.word	0x3ff00000
 800e104:	3fd00000 	.word	0x3fd00000
 800e108:	3fe00000 	.word	0x3fe00000
 800e10c:	408fffff 	.word	0x408fffff
 800e110:	4bd7      	ldr	r3, [pc, #860]	; (800e470 <__ieee754_pow+0x740>)
 800e112:	ea03 0309 	and.w	r3, r3, r9
 800e116:	2200      	movs	r2, #0
 800e118:	b92b      	cbnz	r3, 800e126 <__ieee754_pow+0x3f6>
 800e11a:	4bd6      	ldr	r3, [pc, #856]	; (800e474 <__ieee754_pow+0x744>)
 800e11c:	f7f2 fa30 	bl	8000580 <__aeabi_dmul>
 800e120:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e124:	460c      	mov	r4, r1
 800e126:	1523      	asrs	r3, r4, #20
 800e128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e12c:	4413      	add	r3, r2
 800e12e:	9309      	str	r3, [sp, #36]	; 0x24
 800e130:	4bd1      	ldr	r3, [pc, #836]	; (800e478 <__ieee754_pow+0x748>)
 800e132:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e136:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e13a:	429c      	cmp	r4, r3
 800e13c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e140:	dd08      	ble.n	800e154 <__ieee754_pow+0x424>
 800e142:	4bce      	ldr	r3, [pc, #824]	; (800e47c <__ieee754_pow+0x74c>)
 800e144:	429c      	cmp	r4, r3
 800e146:	f340 8163 	ble.w	800e410 <__ieee754_pow+0x6e0>
 800e14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e14c:	3301      	adds	r3, #1
 800e14e:	9309      	str	r3, [sp, #36]	; 0x24
 800e150:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e154:	2400      	movs	r4, #0
 800e156:	00e3      	lsls	r3, r4, #3
 800e158:	930b      	str	r3, [sp, #44]	; 0x2c
 800e15a:	4bc9      	ldr	r3, [pc, #804]	; (800e480 <__ieee754_pow+0x750>)
 800e15c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e160:	ed93 7b00 	vldr	d7, [r3]
 800e164:	4629      	mov	r1, r5
 800e166:	ec53 2b17 	vmov	r2, r3, d7
 800e16a:	eeb0 8a47 	vmov.f32	s16, s14
 800e16e:	eef0 8a67 	vmov.f32	s17, s15
 800e172:	4682      	mov	sl, r0
 800e174:	f7f2 f84c 	bl	8000210 <__aeabi_dsub>
 800e178:	4652      	mov	r2, sl
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	462b      	mov	r3, r5
 800e180:	ec51 0b18 	vmov	r0, r1, d8
 800e184:	f7f2 f846 	bl	8000214 <__adddf3>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	2000      	movs	r0, #0
 800e18e:	49bd      	ldr	r1, [pc, #756]	; (800e484 <__ieee754_pow+0x754>)
 800e190:	f7f2 fb20 	bl	80007d4 <__aeabi_ddiv>
 800e194:	ec41 0b19 	vmov	d9, r0, r1
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4630      	mov	r0, r6
 800e19e:	4639      	mov	r1, r7
 800e1a0:	f7f2 f9ee 	bl	8000580 <__aeabi_dmul>
 800e1a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e1a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	9304      	str	r3, [sp, #16]
 800e1b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e1b8:	46ab      	mov	fp, r5
 800e1ba:	106d      	asrs	r5, r5, #1
 800e1bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e1c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e1c4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	4649      	mov	r1, r9
 800e1ce:	4614      	mov	r4, r2
 800e1d0:	461d      	mov	r5, r3
 800e1d2:	f7f2 f9d5 	bl	8000580 <__aeabi_dmul>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	4630      	mov	r0, r6
 800e1dc:	4639      	mov	r1, r7
 800e1de:	f7f2 f817 	bl	8000210 <__aeabi_dsub>
 800e1e2:	ec53 2b18 	vmov	r2, r3, d8
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	460f      	mov	r7, r1
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	f7f2 f80f 	bl	8000210 <__aeabi_dsub>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4650      	mov	r0, sl
 800e1f8:	4659      	mov	r1, fp
 800e1fa:	f7f2 f809 	bl	8000210 <__aeabi_dsub>
 800e1fe:	4642      	mov	r2, r8
 800e200:	464b      	mov	r3, r9
 800e202:	f7f2 f9bd 	bl	8000580 <__aeabi_dmul>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4630      	mov	r0, r6
 800e20c:	4639      	mov	r1, r7
 800e20e:	f7f1 ffff 	bl	8000210 <__aeabi_dsub>
 800e212:	ec53 2b19 	vmov	r2, r3, d9
 800e216:	f7f2 f9b3 	bl	8000580 <__aeabi_dmul>
 800e21a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e21e:	ec41 0b18 	vmov	d8, r0, r1
 800e222:	4610      	mov	r0, r2
 800e224:	4619      	mov	r1, r3
 800e226:	f7f2 f9ab 	bl	8000580 <__aeabi_dmul>
 800e22a:	a37d      	add	r3, pc, #500	; (adr r3, 800e420 <__ieee754_pow+0x6f0>)
 800e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e230:	4604      	mov	r4, r0
 800e232:	460d      	mov	r5, r1
 800e234:	f7f2 f9a4 	bl	8000580 <__aeabi_dmul>
 800e238:	a37b      	add	r3, pc, #492	; (adr r3, 800e428 <__ieee754_pow+0x6f8>)
 800e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23e:	f7f1 ffe9 	bl	8000214 <__adddf3>
 800e242:	4622      	mov	r2, r4
 800e244:	462b      	mov	r3, r5
 800e246:	f7f2 f99b 	bl	8000580 <__aeabi_dmul>
 800e24a:	a379      	add	r3, pc, #484	; (adr r3, 800e430 <__ieee754_pow+0x700>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	f7f1 ffe0 	bl	8000214 <__adddf3>
 800e254:	4622      	mov	r2, r4
 800e256:	462b      	mov	r3, r5
 800e258:	f7f2 f992 	bl	8000580 <__aeabi_dmul>
 800e25c:	a376      	add	r3, pc, #472	; (adr r3, 800e438 <__ieee754_pow+0x708>)
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	f7f1 ffd7 	bl	8000214 <__adddf3>
 800e266:	4622      	mov	r2, r4
 800e268:	462b      	mov	r3, r5
 800e26a:	f7f2 f989 	bl	8000580 <__aeabi_dmul>
 800e26e:	a374      	add	r3, pc, #464	; (adr r3, 800e440 <__ieee754_pow+0x710>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f7f1 ffce 	bl	8000214 <__adddf3>
 800e278:	4622      	mov	r2, r4
 800e27a:	462b      	mov	r3, r5
 800e27c:	f7f2 f980 	bl	8000580 <__aeabi_dmul>
 800e280:	a371      	add	r3, pc, #452	; (adr r3, 800e448 <__ieee754_pow+0x718>)
 800e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e286:	f7f1 ffc5 	bl	8000214 <__adddf3>
 800e28a:	4622      	mov	r2, r4
 800e28c:	4606      	mov	r6, r0
 800e28e:	460f      	mov	r7, r1
 800e290:	462b      	mov	r3, r5
 800e292:	4620      	mov	r0, r4
 800e294:	4629      	mov	r1, r5
 800e296:	f7f2 f973 	bl	8000580 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4630      	mov	r0, r6
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	f7f2 f96d 	bl	8000580 <__aeabi_dmul>
 800e2a6:	4642      	mov	r2, r8
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	464b      	mov	r3, r9
 800e2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2b2:	f7f1 ffaf 	bl	8000214 <__adddf3>
 800e2b6:	ec53 2b18 	vmov	r2, r3, d8
 800e2ba:	f7f2 f961 	bl	8000580 <__aeabi_dmul>
 800e2be:	4622      	mov	r2, r4
 800e2c0:	462b      	mov	r3, r5
 800e2c2:	f7f1 ffa7 	bl	8000214 <__adddf3>
 800e2c6:	4642      	mov	r2, r8
 800e2c8:	4682      	mov	sl, r0
 800e2ca:	468b      	mov	fp, r1
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	f7f2 f955 	bl	8000580 <__aeabi_dmul>
 800e2d6:	4b6c      	ldr	r3, [pc, #432]	; (800e488 <__ieee754_pow+0x758>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460f      	mov	r7, r1
 800e2de:	f7f1 ff99 	bl	8000214 <__adddf3>
 800e2e2:	4652      	mov	r2, sl
 800e2e4:	465b      	mov	r3, fp
 800e2e6:	f7f1 ff95 	bl	8000214 <__adddf3>
 800e2ea:	9c04      	ldr	r4, [sp, #16]
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	4640      	mov	r0, r8
 800e2f4:	4649      	mov	r1, r9
 800e2f6:	f7f2 f943 	bl	8000580 <__aeabi_dmul>
 800e2fa:	4b63      	ldr	r3, [pc, #396]	; (800e488 <__ieee754_pow+0x758>)
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	4689      	mov	r9, r1
 800e300:	2200      	movs	r2, #0
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ff83 	bl	8000210 <__aeabi_dsub>
 800e30a:	4632      	mov	r2, r6
 800e30c:	463b      	mov	r3, r7
 800e30e:	f7f1 ff7f 	bl	8000210 <__aeabi_dsub>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4650      	mov	r0, sl
 800e318:	4659      	mov	r1, fp
 800e31a:	f7f1 ff79 	bl	8000210 <__aeabi_dsub>
 800e31e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e322:	f7f2 f92d 	bl	8000580 <__aeabi_dmul>
 800e326:	4622      	mov	r2, r4
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	462b      	mov	r3, r5
 800e32e:	ec51 0b18 	vmov	r0, r1, d8
 800e332:	f7f2 f925 	bl	8000580 <__aeabi_dmul>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f1 ff69 	bl	8000214 <__adddf3>
 800e342:	4606      	mov	r6, r0
 800e344:	460f      	mov	r7, r1
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	4640      	mov	r0, r8
 800e34c:	4649      	mov	r1, r9
 800e34e:	f7f1 ff61 	bl	8000214 <__adddf3>
 800e352:	9c04      	ldr	r4, [sp, #16]
 800e354:	a33e      	add	r3, pc, #248	; (adr r3, 800e450 <__ieee754_pow+0x720>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	4620      	mov	r0, r4
 800e35c:	460d      	mov	r5, r1
 800e35e:	f7f2 f90f 	bl	8000580 <__aeabi_dmul>
 800e362:	4642      	mov	r2, r8
 800e364:	ec41 0b18 	vmov	d8, r0, r1
 800e368:	464b      	mov	r3, r9
 800e36a:	4620      	mov	r0, r4
 800e36c:	4629      	mov	r1, r5
 800e36e:	f7f1 ff4f 	bl	8000210 <__aeabi_dsub>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4630      	mov	r0, r6
 800e378:	4639      	mov	r1, r7
 800e37a:	f7f1 ff49 	bl	8000210 <__aeabi_dsub>
 800e37e:	a336      	add	r3, pc, #216	; (adr r3, 800e458 <__ieee754_pow+0x728>)
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f7f2 f8fc 	bl	8000580 <__aeabi_dmul>
 800e388:	a335      	add	r3, pc, #212	; (adr r3, 800e460 <__ieee754_pow+0x730>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	4606      	mov	r6, r0
 800e390:	460f      	mov	r7, r1
 800e392:	4620      	mov	r0, r4
 800e394:	4629      	mov	r1, r5
 800e396:	f7f2 f8f3 	bl	8000580 <__aeabi_dmul>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4630      	mov	r0, r6
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	f7f1 ff37 	bl	8000214 <__adddf3>
 800e3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3a8:	4b38      	ldr	r3, [pc, #224]	; (800e48c <__ieee754_pow+0x75c>)
 800e3aa:	4413      	add	r3, r2
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	f7f1 ff30 	bl	8000214 <__adddf3>
 800e3b4:	4682      	mov	sl, r0
 800e3b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3b8:	468b      	mov	fp, r1
 800e3ba:	f7f2 f877 	bl	80004ac <__aeabi_i2d>
 800e3be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3c0:	4b33      	ldr	r3, [pc, #204]	; (800e490 <__ieee754_pow+0x760>)
 800e3c2:	4413      	add	r3, r2
 800e3c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	460f      	mov	r7, r1
 800e3cc:	4652      	mov	r2, sl
 800e3ce:	465b      	mov	r3, fp
 800e3d0:	ec51 0b18 	vmov	r0, r1, d8
 800e3d4:	f7f1 ff1e 	bl	8000214 <__adddf3>
 800e3d8:	4642      	mov	r2, r8
 800e3da:	464b      	mov	r3, r9
 800e3dc:	f7f1 ff1a 	bl	8000214 <__adddf3>
 800e3e0:	4632      	mov	r2, r6
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	f7f1 ff16 	bl	8000214 <__adddf3>
 800e3e8:	9c04      	ldr	r4, [sp, #16]
 800e3ea:	4632      	mov	r2, r6
 800e3ec:	463b      	mov	r3, r7
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	f7f1 ff0d 	bl	8000210 <__aeabi_dsub>
 800e3f6:	4642      	mov	r2, r8
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	f7f1 ff09 	bl	8000210 <__aeabi_dsub>
 800e3fe:	ec53 2b18 	vmov	r2, r3, d8
 800e402:	f7f1 ff05 	bl	8000210 <__aeabi_dsub>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	4650      	mov	r0, sl
 800e40c:	4659      	mov	r1, fp
 800e40e:	e606      	b.n	800e01e <__ieee754_pow+0x2ee>
 800e410:	2401      	movs	r4, #1
 800e412:	e6a0      	b.n	800e156 <__ieee754_pow+0x426>
 800e414:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e468 <__ieee754_pow+0x738>
 800e418:	e60d      	b.n	800e036 <__ieee754_pow+0x306>
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w
 800e420:	4a454eef 	.word	0x4a454eef
 800e424:	3fca7e28 	.word	0x3fca7e28
 800e428:	93c9db65 	.word	0x93c9db65
 800e42c:	3fcd864a 	.word	0x3fcd864a
 800e430:	a91d4101 	.word	0xa91d4101
 800e434:	3fd17460 	.word	0x3fd17460
 800e438:	518f264d 	.word	0x518f264d
 800e43c:	3fd55555 	.word	0x3fd55555
 800e440:	db6fabff 	.word	0xdb6fabff
 800e444:	3fdb6db6 	.word	0x3fdb6db6
 800e448:	33333303 	.word	0x33333303
 800e44c:	3fe33333 	.word	0x3fe33333
 800e450:	e0000000 	.word	0xe0000000
 800e454:	3feec709 	.word	0x3feec709
 800e458:	dc3a03fd 	.word	0xdc3a03fd
 800e45c:	3feec709 	.word	0x3feec709
 800e460:	145b01f5 	.word	0x145b01f5
 800e464:	be3e2fe0 	.word	0xbe3e2fe0
 800e468:	00000000 	.word	0x00000000
 800e46c:	3ff00000 	.word	0x3ff00000
 800e470:	7ff00000 	.word	0x7ff00000
 800e474:	43400000 	.word	0x43400000
 800e478:	0003988e 	.word	0x0003988e
 800e47c:	000bb679 	.word	0x000bb679
 800e480:	0800efd0 	.word	0x0800efd0
 800e484:	3ff00000 	.word	0x3ff00000
 800e488:	40080000 	.word	0x40080000
 800e48c:	0800eff0 	.word	0x0800eff0
 800e490:	0800efe0 	.word	0x0800efe0
 800e494:	a3b5      	add	r3, pc, #724	; (adr r3, 800e76c <__ieee754_pow+0xa3c>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	4640      	mov	r0, r8
 800e49c:	4649      	mov	r1, r9
 800e49e:	f7f1 feb9 	bl	8000214 <__adddf3>
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	ec41 0b1a 	vmov	d10, r0, r1
 800e4a8:	462b      	mov	r3, r5
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	f7f1 feaf 	bl	8000210 <__aeabi_dsub>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	ec51 0b1a 	vmov	r0, r1, d10
 800e4ba:	f7f2 faf1 	bl	8000aa0 <__aeabi_dcmpgt>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f47f adf8 	bne.w	800e0b4 <__ieee754_pow+0x384>
 800e4c4:	4aa4      	ldr	r2, [pc, #656]	; (800e758 <__ieee754_pow+0xa28>)
 800e4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	f340 810b 	ble.w	800e6e6 <__ieee754_pow+0x9b6>
 800e4d0:	151b      	asrs	r3, r3, #20
 800e4d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e4d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e4da:	fa4a f303 	asr.w	r3, sl, r3
 800e4de:	445b      	add	r3, fp
 800e4e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e4e4:	4e9d      	ldr	r6, [pc, #628]	; (800e75c <__ieee754_pow+0xa2c>)
 800e4e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e4ea:	4116      	asrs	r6, r2
 800e4ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	ea23 0106 	bic.w	r1, r3, r6
 800e4f6:	f1c2 0214 	rsb	r2, r2, #20
 800e4fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e4fe:	fa4a fa02 	asr.w	sl, sl, r2
 800e502:	f1bb 0f00 	cmp.w	fp, #0
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4620      	mov	r0, r4
 800e50c:	4629      	mov	r1, r5
 800e50e:	bfb8      	it	lt
 800e510:	f1ca 0a00 	rsblt	sl, sl, #0
 800e514:	f7f1 fe7c 	bl	8000210 <__aeabi_dsub>
 800e518:	ec41 0b19 	vmov	d9, r0, r1
 800e51c:	4642      	mov	r2, r8
 800e51e:	464b      	mov	r3, r9
 800e520:	ec51 0b19 	vmov	r0, r1, d9
 800e524:	f7f1 fe76 	bl	8000214 <__adddf3>
 800e528:	2400      	movs	r4, #0
 800e52a:	a379      	add	r3, pc, #484	; (adr r3, 800e710 <__ieee754_pow+0x9e0>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	4620      	mov	r0, r4
 800e532:	460d      	mov	r5, r1
 800e534:	f7f2 f824 	bl	8000580 <__aeabi_dmul>
 800e538:	ec53 2b19 	vmov	r2, r3, d9
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f1 fe64 	bl	8000210 <__aeabi_dsub>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4640      	mov	r0, r8
 800e54e:	4649      	mov	r1, r9
 800e550:	f7f1 fe5e 	bl	8000210 <__aeabi_dsub>
 800e554:	a370      	add	r3, pc, #448	; (adr r3, 800e718 <__ieee754_pow+0x9e8>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	f7f2 f811 	bl	8000580 <__aeabi_dmul>
 800e55e:	a370      	add	r3, pc, #448	; (adr r3, 800e720 <__ieee754_pow+0x9f0>)
 800e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e564:	4680      	mov	r8, r0
 800e566:	4689      	mov	r9, r1
 800e568:	4620      	mov	r0, r4
 800e56a:	4629      	mov	r1, r5
 800e56c:	f7f2 f808 	bl	8000580 <__aeabi_dmul>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4640      	mov	r0, r8
 800e576:	4649      	mov	r1, r9
 800e578:	f7f1 fe4c 	bl	8000214 <__adddf3>
 800e57c:	4604      	mov	r4, r0
 800e57e:	460d      	mov	r5, r1
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4630      	mov	r0, r6
 800e586:	4639      	mov	r1, r7
 800e588:	f7f1 fe44 	bl	8000214 <__adddf3>
 800e58c:	4632      	mov	r2, r6
 800e58e:	463b      	mov	r3, r7
 800e590:	4680      	mov	r8, r0
 800e592:	4689      	mov	r9, r1
 800e594:	f7f1 fe3c 	bl	8000210 <__aeabi_dsub>
 800e598:	4602      	mov	r2, r0
 800e59a:	460b      	mov	r3, r1
 800e59c:	4620      	mov	r0, r4
 800e59e:	4629      	mov	r1, r5
 800e5a0:	f7f1 fe36 	bl	8000210 <__aeabi_dsub>
 800e5a4:	4642      	mov	r2, r8
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	464b      	mov	r3, r9
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	f7f1 ffe6 	bl	8000580 <__aeabi_dmul>
 800e5b4:	a35c      	add	r3, pc, #368	; (adr r3, 800e728 <__ieee754_pow+0x9f8>)
 800e5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	460d      	mov	r5, r1
 800e5be:	f7f1 ffdf 	bl	8000580 <__aeabi_dmul>
 800e5c2:	a35b      	add	r3, pc, #364	; (adr r3, 800e730 <__ieee754_pow+0xa00>)
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f7f1 fe22 	bl	8000210 <__aeabi_dsub>
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	f7f1 ffd6 	bl	8000580 <__aeabi_dmul>
 800e5d4:	a358      	add	r3, pc, #352	; (adr r3, 800e738 <__ieee754_pow+0xa08>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f1 fe1b 	bl	8000214 <__adddf3>
 800e5de:	4622      	mov	r2, r4
 800e5e0:	462b      	mov	r3, r5
 800e5e2:	f7f1 ffcd 	bl	8000580 <__aeabi_dmul>
 800e5e6:	a356      	add	r3, pc, #344	; (adr r3, 800e740 <__ieee754_pow+0xa10>)
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7f1 fe10 	bl	8000210 <__aeabi_dsub>
 800e5f0:	4622      	mov	r2, r4
 800e5f2:	462b      	mov	r3, r5
 800e5f4:	f7f1 ffc4 	bl	8000580 <__aeabi_dmul>
 800e5f8:	a353      	add	r3, pc, #332	; (adr r3, 800e748 <__ieee754_pow+0xa18>)
 800e5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fe:	f7f1 fe09 	bl	8000214 <__adddf3>
 800e602:	4622      	mov	r2, r4
 800e604:	462b      	mov	r3, r5
 800e606:	f7f1 ffbb 	bl	8000580 <__aeabi_dmul>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4640      	mov	r0, r8
 800e610:	4649      	mov	r1, r9
 800e612:	f7f1 fdfd 	bl	8000210 <__aeabi_dsub>
 800e616:	4604      	mov	r4, r0
 800e618:	460d      	mov	r5, r1
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	4640      	mov	r0, r8
 800e620:	4649      	mov	r1, r9
 800e622:	f7f1 ffad 	bl	8000580 <__aeabi_dmul>
 800e626:	2200      	movs	r2, #0
 800e628:	ec41 0b19 	vmov	d9, r0, r1
 800e62c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e630:	4620      	mov	r0, r4
 800e632:	4629      	mov	r1, r5
 800e634:	f7f1 fdec 	bl	8000210 <__aeabi_dsub>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	ec51 0b19 	vmov	r0, r1, d9
 800e640:	f7f2 f8c8 	bl	80007d4 <__aeabi_ddiv>
 800e644:	4632      	mov	r2, r6
 800e646:	4604      	mov	r4, r0
 800e648:	460d      	mov	r5, r1
 800e64a:	463b      	mov	r3, r7
 800e64c:	4640      	mov	r0, r8
 800e64e:	4649      	mov	r1, r9
 800e650:	f7f1 ff96 	bl	8000580 <__aeabi_dmul>
 800e654:	4632      	mov	r2, r6
 800e656:	463b      	mov	r3, r7
 800e658:	f7f1 fddc 	bl	8000214 <__adddf3>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4620      	mov	r0, r4
 800e662:	4629      	mov	r1, r5
 800e664:	f7f1 fdd4 	bl	8000210 <__aeabi_dsub>
 800e668:	4642      	mov	r2, r8
 800e66a:	464b      	mov	r3, r9
 800e66c:	f7f1 fdd0 	bl	8000210 <__aeabi_dsub>
 800e670:	460b      	mov	r3, r1
 800e672:	4602      	mov	r2, r0
 800e674:	493a      	ldr	r1, [pc, #232]	; (800e760 <__ieee754_pow+0xa30>)
 800e676:	2000      	movs	r0, #0
 800e678:	f7f1 fdca 	bl	8000210 <__aeabi_dsub>
 800e67c:	e9cd 0100 	strd	r0, r1, [sp]
 800e680:	9b01      	ldr	r3, [sp, #4]
 800e682:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e68a:	da2f      	bge.n	800e6ec <__ieee754_pow+0x9bc>
 800e68c:	4650      	mov	r0, sl
 800e68e:	ed9d 0b00 	vldr	d0, [sp]
 800e692:	f000 f9cd 	bl	800ea30 <scalbn>
 800e696:	ec51 0b10 	vmov	r0, r1, d0
 800e69a:	ec53 2b18 	vmov	r2, r3, d8
 800e69e:	f7ff bbe0 	b.w	800de62 <__ieee754_pow+0x132>
 800e6a2:	4b30      	ldr	r3, [pc, #192]	; (800e764 <__ieee754_pow+0xa34>)
 800e6a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e6a8:	429e      	cmp	r6, r3
 800e6aa:	f77f af0b 	ble.w	800e4c4 <__ieee754_pow+0x794>
 800e6ae:	4b2e      	ldr	r3, [pc, #184]	; (800e768 <__ieee754_pow+0xa38>)
 800e6b0:	440b      	add	r3, r1
 800e6b2:	4303      	orrs	r3, r0
 800e6b4:	d00b      	beq.n	800e6ce <__ieee754_pow+0x99e>
 800e6b6:	a326      	add	r3, pc, #152	; (adr r3, 800e750 <__ieee754_pow+0xa20>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	ec51 0b18 	vmov	r0, r1, d8
 800e6c0:	f7f1 ff5e 	bl	8000580 <__aeabi_dmul>
 800e6c4:	a322      	add	r3, pc, #136	; (adr r3, 800e750 <__ieee754_pow+0xa20>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7ff bbca 	b.w	800de62 <__ieee754_pow+0x132>
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	f7f1 fd9d 	bl	8000210 <__aeabi_dsub>
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	464b      	mov	r3, r9
 800e6da:	f7f2 f9d7 	bl	8000a8c <__aeabi_dcmpge>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f43f aef0 	beq.w	800e4c4 <__ieee754_pow+0x794>
 800e6e4:	e7e7      	b.n	800e6b6 <__ieee754_pow+0x986>
 800e6e6:	f04f 0a00 	mov.w	sl, #0
 800e6ea:	e717      	b.n	800e51c <__ieee754_pow+0x7ec>
 800e6ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	e7d2      	b.n	800e69a <__ieee754_pow+0x96a>
 800e6f4:	491a      	ldr	r1, [pc, #104]	; (800e760 <__ieee754_pow+0xa30>)
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	f7ff bb9e 	b.w	800de38 <__ieee754_pow+0x108>
 800e6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e700:	f7ff bb9a 	b.w	800de38 <__ieee754_pow+0x108>
 800e704:	9000      	str	r0, [sp, #0]
 800e706:	f7ff bb76 	b.w	800ddf6 <__ieee754_pow+0xc6>
 800e70a:	2100      	movs	r1, #0
 800e70c:	f7ff bb60 	b.w	800ddd0 <__ieee754_pow+0xa0>
 800e710:	00000000 	.word	0x00000000
 800e714:	3fe62e43 	.word	0x3fe62e43
 800e718:	fefa39ef 	.word	0xfefa39ef
 800e71c:	3fe62e42 	.word	0x3fe62e42
 800e720:	0ca86c39 	.word	0x0ca86c39
 800e724:	be205c61 	.word	0xbe205c61
 800e728:	72bea4d0 	.word	0x72bea4d0
 800e72c:	3e663769 	.word	0x3e663769
 800e730:	c5d26bf1 	.word	0xc5d26bf1
 800e734:	3ebbbd41 	.word	0x3ebbbd41
 800e738:	af25de2c 	.word	0xaf25de2c
 800e73c:	3f11566a 	.word	0x3f11566a
 800e740:	16bebd93 	.word	0x16bebd93
 800e744:	3f66c16c 	.word	0x3f66c16c
 800e748:	5555553e 	.word	0x5555553e
 800e74c:	3fc55555 	.word	0x3fc55555
 800e750:	c2f8f359 	.word	0xc2f8f359
 800e754:	01a56e1f 	.word	0x01a56e1f
 800e758:	3fe00000 	.word	0x3fe00000
 800e75c:	000fffff 	.word	0x000fffff
 800e760:	3ff00000 	.word	0x3ff00000
 800e764:	4090cbff 	.word	0x4090cbff
 800e768:	3f6f3400 	.word	0x3f6f3400
 800e76c:	652b82fe 	.word	0x652b82fe
 800e770:	3c971547 	.word	0x3c971547

0800e774 <__ieee754_sqrt>:
 800e774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e778:	ec55 4b10 	vmov	r4, r5, d0
 800e77c:	4e56      	ldr	r6, [pc, #344]	; (800e8d8 <__ieee754_sqrt+0x164>)
 800e77e:	43ae      	bics	r6, r5
 800e780:	ee10 0a10 	vmov	r0, s0
 800e784:	ee10 3a10 	vmov	r3, s0
 800e788:	4629      	mov	r1, r5
 800e78a:	462a      	mov	r2, r5
 800e78c:	d110      	bne.n	800e7b0 <__ieee754_sqrt+0x3c>
 800e78e:	ee10 2a10 	vmov	r2, s0
 800e792:	462b      	mov	r3, r5
 800e794:	f7f1 fef4 	bl	8000580 <__aeabi_dmul>
 800e798:	4602      	mov	r2, r0
 800e79a:	460b      	mov	r3, r1
 800e79c:	4620      	mov	r0, r4
 800e79e:	4629      	mov	r1, r5
 800e7a0:	f7f1 fd38 	bl	8000214 <__adddf3>
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	460d      	mov	r5, r1
 800e7a8:	ec45 4b10 	vmov	d0, r4, r5
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b0:	2d00      	cmp	r5, #0
 800e7b2:	dc10      	bgt.n	800e7d6 <__ieee754_sqrt+0x62>
 800e7b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e7b8:	4330      	orrs	r0, r6
 800e7ba:	d0f5      	beq.n	800e7a8 <__ieee754_sqrt+0x34>
 800e7bc:	b15d      	cbz	r5, 800e7d6 <__ieee754_sqrt+0x62>
 800e7be:	ee10 2a10 	vmov	r2, s0
 800e7c2:	462b      	mov	r3, r5
 800e7c4:	ee10 0a10 	vmov	r0, s0
 800e7c8:	f7f1 fd22 	bl	8000210 <__aeabi_dsub>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	f7f2 f800 	bl	80007d4 <__aeabi_ddiv>
 800e7d4:	e7e6      	b.n	800e7a4 <__ieee754_sqrt+0x30>
 800e7d6:	1509      	asrs	r1, r1, #20
 800e7d8:	d076      	beq.n	800e8c8 <__ieee754_sqrt+0x154>
 800e7da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e7de:	07ce      	lsls	r6, r1, #31
 800e7e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e7e4:	bf5e      	ittt	pl
 800e7e6:	0fda      	lsrpl	r2, r3, #31
 800e7e8:	005b      	lslpl	r3, r3, #1
 800e7ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e7ee:	0fda      	lsrs	r2, r3, #31
 800e7f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e7f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	106d      	asrs	r5, r5, #1
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	f04f 0e16 	mov.w	lr, #22
 800e802:	4684      	mov	ip, r0
 800e804:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e808:	eb0c 0401 	add.w	r4, ip, r1
 800e80c:	4294      	cmp	r4, r2
 800e80e:	bfde      	ittt	le
 800e810:	1b12      	suble	r2, r2, r4
 800e812:	eb04 0c01 	addle.w	ip, r4, r1
 800e816:	1840      	addle	r0, r0, r1
 800e818:	0052      	lsls	r2, r2, #1
 800e81a:	f1be 0e01 	subs.w	lr, lr, #1
 800e81e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e822:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e82a:	d1ed      	bne.n	800e808 <__ieee754_sqrt+0x94>
 800e82c:	4671      	mov	r1, lr
 800e82e:	2720      	movs	r7, #32
 800e830:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e834:	4562      	cmp	r2, ip
 800e836:	eb04 060e 	add.w	r6, r4, lr
 800e83a:	dc02      	bgt.n	800e842 <__ieee754_sqrt+0xce>
 800e83c:	d113      	bne.n	800e866 <__ieee754_sqrt+0xf2>
 800e83e:	429e      	cmp	r6, r3
 800e840:	d811      	bhi.n	800e866 <__ieee754_sqrt+0xf2>
 800e842:	2e00      	cmp	r6, #0
 800e844:	eb06 0e04 	add.w	lr, r6, r4
 800e848:	da43      	bge.n	800e8d2 <__ieee754_sqrt+0x15e>
 800e84a:	f1be 0f00 	cmp.w	lr, #0
 800e84e:	db40      	blt.n	800e8d2 <__ieee754_sqrt+0x15e>
 800e850:	f10c 0801 	add.w	r8, ip, #1
 800e854:	eba2 020c 	sub.w	r2, r2, ip
 800e858:	429e      	cmp	r6, r3
 800e85a:	bf88      	it	hi
 800e85c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e860:	1b9b      	subs	r3, r3, r6
 800e862:	4421      	add	r1, r4
 800e864:	46c4      	mov	ip, r8
 800e866:	0052      	lsls	r2, r2, #1
 800e868:	3f01      	subs	r7, #1
 800e86a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e86e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e876:	d1dd      	bne.n	800e834 <__ieee754_sqrt+0xc0>
 800e878:	4313      	orrs	r3, r2
 800e87a:	d006      	beq.n	800e88a <__ieee754_sqrt+0x116>
 800e87c:	1c4c      	adds	r4, r1, #1
 800e87e:	bf13      	iteet	ne
 800e880:	3101      	addne	r1, #1
 800e882:	3001      	addeq	r0, #1
 800e884:	4639      	moveq	r1, r7
 800e886:	f021 0101 	bicne.w	r1, r1, #1
 800e88a:	1043      	asrs	r3, r0, #1
 800e88c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e890:	0849      	lsrs	r1, r1, #1
 800e892:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e896:	07c2      	lsls	r2, r0, #31
 800e898:	bf48      	it	mi
 800e89a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e89e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e8a2:	460c      	mov	r4, r1
 800e8a4:	463d      	mov	r5, r7
 800e8a6:	e77f      	b.n	800e7a8 <__ieee754_sqrt+0x34>
 800e8a8:	0ada      	lsrs	r2, r3, #11
 800e8aa:	3815      	subs	r0, #21
 800e8ac:	055b      	lsls	r3, r3, #21
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	d0fa      	beq.n	800e8a8 <__ieee754_sqrt+0x134>
 800e8b2:	02d7      	lsls	r7, r2, #11
 800e8b4:	d50a      	bpl.n	800e8cc <__ieee754_sqrt+0x158>
 800e8b6:	f1c1 0420 	rsb	r4, r1, #32
 800e8ba:	fa23 f404 	lsr.w	r4, r3, r4
 800e8be:	1e4d      	subs	r5, r1, #1
 800e8c0:	408b      	lsls	r3, r1
 800e8c2:	4322      	orrs	r2, r4
 800e8c4:	1b41      	subs	r1, r0, r5
 800e8c6:	e788      	b.n	800e7da <__ieee754_sqrt+0x66>
 800e8c8:	4608      	mov	r0, r1
 800e8ca:	e7f0      	b.n	800e8ae <__ieee754_sqrt+0x13a>
 800e8cc:	0052      	lsls	r2, r2, #1
 800e8ce:	3101      	adds	r1, #1
 800e8d0:	e7ef      	b.n	800e8b2 <__ieee754_sqrt+0x13e>
 800e8d2:	46e0      	mov	r8, ip
 800e8d4:	e7be      	b.n	800e854 <__ieee754_sqrt+0xe0>
 800e8d6:	bf00      	nop
 800e8d8:	7ff00000 	.word	0x7ff00000

0800e8dc <fabs>:
 800e8dc:	ec51 0b10 	vmov	r0, r1, d0
 800e8e0:	ee10 2a10 	vmov	r2, s0
 800e8e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8e8:	ec43 2b10 	vmov	d0, r2, r3
 800e8ec:	4770      	bx	lr

0800e8ee <finite>:
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	ed8d 0b00 	vstr	d0, [sp]
 800e8f4:	9801      	ldr	r0, [sp, #4]
 800e8f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e8fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e8fe:	0fc0      	lsrs	r0, r0, #31
 800e900:	b002      	add	sp, #8
 800e902:	4770      	bx	lr
 800e904:	0000      	movs	r0, r0
	...

0800e908 <nan>:
 800e908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e910 <nan+0x8>
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	00000000 	.word	0x00000000
 800e914:	7ff80000 	.word	0x7ff80000

0800e918 <rint>:
 800e918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e91a:	ec51 0b10 	vmov	r0, r1, d0
 800e91e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e922:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e926:	2e13      	cmp	r6, #19
 800e928:	ee10 4a10 	vmov	r4, s0
 800e92c:	460b      	mov	r3, r1
 800e92e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e932:	dc58      	bgt.n	800e9e6 <rint+0xce>
 800e934:	2e00      	cmp	r6, #0
 800e936:	da2b      	bge.n	800e990 <rint+0x78>
 800e938:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e93c:	4302      	orrs	r2, r0
 800e93e:	d023      	beq.n	800e988 <rint+0x70>
 800e940:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e944:	4302      	orrs	r2, r0
 800e946:	4254      	negs	r4, r2
 800e948:	4314      	orrs	r4, r2
 800e94a:	0c4b      	lsrs	r3, r1, #17
 800e94c:	0b24      	lsrs	r4, r4, #12
 800e94e:	045b      	lsls	r3, r3, #17
 800e950:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e954:	ea44 0103 	orr.w	r1, r4, r3
 800e958:	4b32      	ldr	r3, [pc, #200]	; (800ea24 <rint+0x10c>)
 800e95a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e95e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	4630      	mov	r0, r6
 800e968:	4639      	mov	r1, r7
 800e96a:	f7f1 fc53 	bl	8000214 <__adddf3>
 800e96e:	e9cd 0100 	strd	r0, r1, [sp]
 800e972:	463b      	mov	r3, r7
 800e974:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e978:	4632      	mov	r2, r6
 800e97a:	f7f1 fc49 	bl	8000210 <__aeabi_dsub>
 800e97e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e982:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e986:	4639      	mov	r1, r7
 800e988:	ec41 0b10 	vmov	d0, r0, r1
 800e98c:	b003      	add	sp, #12
 800e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e990:	4a25      	ldr	r2, [pc, #148]	; (800ea28 <rint+0x110>)
 800e992:	4132      	asrs	r2, r6
 800e994:	ea01 0702 	and.w	r7, r1, r2
 800e998:	4307      	orrs	r7, r0
 800e99a:	d0f5      	beq.n	800e988 <rint+0x70>
 800e99c:	0851      	lsrs	r1, r2, #1
 800e99e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e9a2:	4314      	orrs	r4, r2
 800e9a4:	d00c      	beq.n	800e9c0 <rint+0xa8>
 800e9a6:	ea23 0201 	bic.w	r2, r3, r1
 800e9aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e9ae:	2e13      	cmp	r6, #19
 800e9b0:	fa43 f606 	asr.w	r6, r3, r6
 800e9b4:	bf0c      	ite	eq
 800e9b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e9ba:	2400      	movne	r4, #0
 800e9bc:	ea42 0306 	orr.w	r3, r2, r6
 800e9c0:	4918      	ldr	r1, [pc, #96]	; (800ea24 <rint+0x10c>)
 800e9c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f7f1 fc20 	bl	8000214 <__adddf3>
 800e9d4:	e9cd 0100 	strd	r0, r1, [sp]
 800e9d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9dc:	4622      	mov	r2, r4
 800e9de:	462b      	mov	r3, r5
 800e9e0:	f7f1 fc16 	bl	8000210 <__aeabi_dsub>
 800e9e4:	e7d0      	b.n	800e988 <rint+0x70>
 800e9e6:	2e33      	cmp	r6, #51	; 0x33
 800e9e8:	dd07      	ble.n	800e9fa <rint+0xe2>
 800e9ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e9ee:	d1cb      	bne.n	800e988 <rint+0x70>
 800e9f0:	ee10 2a10 	vmov	r2, s0
 800e9f4:	f7f1 fc0e 	bl	8000214 <__adddf3>
 800e9f8:	e7c6      	b.n	800e988 <rint+0x70>
 800e9fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e9fe:	f04f 36ff 	mov.w	r6, #4294967295
 800ea02:	40d6      	lsrs	r6, r2
 800ea04:	4230      	tst	r0, r6
 800ea06:	d0bf      	beq.n	800e988 <rint+0x70>
 800ea08:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ea0c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ea10:	bf1f      	itttt	ne
 800ea12:	ea24 0101 	bicne.w	r1, r4, r1
 800ea16:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ea1a:	fa44 f202 	asrne.w	r2, r4, r2
 800ea1e:	ea41 0402 	orrne.w	r4, r1, r2
 800ea22:	e7cd      	b.n	800e9c0 <rint+0xa8>
 800ea24:	0800f000 	.word	0x0800f000
 800ea28:	000fffff 	.word	0x000fffff
 800ea2c:	00000000 	.word	0x00000000

0800ea30 <scalbn>:
 800ea30:	b570      	push	{r4, r5, r6, lr}
 800ea32:	ec55 4b10 	vmov	r4, r5, d0
 800ea36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	462b      	mov	r3, r5
 800ea3e:	b99a      	cbnz	r2, 800ea68 <scalbn+0x38>
 800ea40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea44:	4323      	orrs	r3, r4
 800ea46:	d036      	beq.n	800eab6 <scalbn+0x86>
 800ea48:	4b39      	ldr	r3, [pc, #228]	; (800eb30 <scalbn+0x100>)
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	ee10 0a10 	vmov	r0, s0
 800ea50:	2200      	movs	r2, #0
 800ea52:	f7f1 fd95 	bl	8000580 <__aeabi_dmul>
 800ea56:	4b37      	ldr	r3, [pc, #220]	; (800eb34 <scalbn+0x104>)
 800ea58:	429e      	cmp	r6, r3
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	da10      	bge.n	800ea82 <scalbn+0x52>
 800ea60:	a32b      	add	r3, pc, #172	; (adr r3, 800eb10 <scalbn+0xe0>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	e03a      	b.n	800eade <scalbn+0xae>
 800ea68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ea6c:	428a      	cmp	r2, r1
 800ea6e:	d10c      	bne.n	800ea8a <scalbn+0x5a>
 800ea70:	ee10 2a10 	vmov	r2, s0
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fbcc 	bl	8000214 <__adddf3>
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	460d      	mov	r5, r1
 800ea80:	e019      	b.n	800eab6 <scalbn+0x86>
 800ea82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea86:	460b      	mov	r3, r1
 800ea88:	3a36      	subs	r2, #54	; 0x36
 800ea8a:	4432      	add	r2, r6
 800ea8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea90:	428a      	cmp	r2, r1
 800ea92:	dd08      	ble.n	800eaa6 <scalbn+0x76>
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	a120      	add	r1, pc, #128	; (adr r1, 800eb18 <scalbn+0xe8>)
 800ea98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea9c:	da1c      	bge.n	800ead8 <scalbn+0xa8>
 800ea9e:	a120      	add	r1, pc, #128	; (adr r1, 800eb20 <scalbn+0xf0>)
 800eaa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaa4:	e018      	b.n	800ead8 <scalbn+0xa8>
 800eaa6:	2a00      	cmp	r2, #0
 800eaa8:	dd08      	ble.n	800eabc <scalbn+0x8c>
 800eaaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eab2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eab6:	ec45 4b10 	vmov	d0, r4, r5
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eac0:	da19      	bge.n	800eaf6 <scalbn+0xc6>
 800eac2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eac6:	429e      	cmp	r6, r3
 800eac8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800eacc:	dd0a      	ble.n	800eae4 <scalbn+0xb4>
 800eace:	a112      	add	r1, pc, #72	; (adr r1, 800eb18 <scalbn+0xe8>)
 800ead0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1e2      	bne.n	800ea9e <scalbn+0x6e>
 800ead8:	a30f      	add	r3, pc, #60	; (adr r3, 800eb18 <scalbn+0xe8>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f1 fd4f 	bl	8000580 <__aeabi_dmul>
 800eae2:	e7cb      	b.n	800ea7c <scalbn+0x4c>
 800eae4:	a10a      	add	r1, pc, #40	; (adr r1, 800eb10 <scalbn+0xe0>)
 800eae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d0b8      	beq.n	800ea60 <scalbn+0x30>
 800eaee:	a10e      	add	r1, pc, #56	; (adr r1, 800eb28 <scalbn+0xf8>)
 800eaf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaf4:	e7b4      	b.n	800ea60 <scalbn+0x30>
 800eaf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eafa:	3236      	adds	r2, #54	; 0x36
 800eafc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb04:	4620      	mov	r0, r4
 800eb06:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <scalbn+0x108>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	e7e8      	b.n	800eade <scalbn+0xae>
 800eb0c:	f3af 8000 	nop.w
 800eb10:	c2f8f359 	.word	0xc2f8f359
 800eb14:	01a56e1f 	.word	0x01a56e1f
 800eb18:	8800759c 	.word	0x8800759c
 800eb1c:	7e37e43c 	.word	0x7e37e43c
 800eb20:	8800759c 	.word	0x8800759c
 800eb24:	fe37e43c 	.word	0xfe37e43c
 800eb28:	c2f8f359 	.word	0xc2f8f359
 800eb2c:	81a56e1f 	.word	0x81a56e1f
 800eb30:	43500000 	.word	0x43500000
 800eb34:	ffff3cb0 	.word	0xffff3cb0
 800eb38:	3c900000 	.word	0x3c900000

0800eb3c <_init>:
 800eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3e:	bf00      	nop
 800eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb42:	bc08      	pop	{r3}
 800eb44:	469e      	mov	lr, r3
 800eb46:	4770      	bx	lr

0800eb48 <_fini>:
 800eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb4a:	bf00      	nop
 800eb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb4e:	bc08      	pop	{r3}
 800eb50:	469e      	mov	lr, r3
 800eb52:	4770      	bx	lr
