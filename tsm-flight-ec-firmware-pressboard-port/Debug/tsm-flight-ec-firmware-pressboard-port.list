
tsm-flight-ec-firmware-pressboard-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800f5c0  0800f5c0  0001f5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa78  0800fa78  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa78  0800fa78  0001fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa80  0800fa80  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa80  0800fa80  0001fa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa84  0800fa84  0001fa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800fa88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000214c  20000240  0800fcc8  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000238c  0800fcc8  0002238c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b62b  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fe  00000000  00000000  0004b89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  000500a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  00051620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267c8  00000000  00000000  000529b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd7c  00000000  00000000  00079180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db070  00000000  00000000  00096efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00171fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000240 	.word	0x20000240
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800f5a4 	.word	0x0800f5a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000244 	.word	0x20000244
 8000204:	0800f5a4 	.word	0x0800f5a4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96e 	b.w	8000f04 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468c      	mov	ip, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8083 	bne.w	8000d56 <__udivmoddi4+0x116>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d947      	bls.n	8000ce6 <__udivmoddi4+0xa6>
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	b142      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5c:	f1c2 0020 	rsb	r0, r2, #32
 8000c60:	fa24 f000 	lsr.w	r0, r4, r0
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4097      	lsls	r7, r2
 8000c68:	ea40 0c01 	orr.w	ip, r0, r1
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fbbc f6f8 	udiv	r6, ip, r8
 8000c78:	fa1f fe87 	uxth.w	lr, r7
 8000c7c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb06 f10e 	mul.w	r1, r6, lr
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x60>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 8119 	bcs.w	8000ec8 <__udivmoddi4+0x288>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 8116 	bls.w	8000ec8 <__udivmoddi4+0x288>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x8c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	f080 8105 	bcs.w	8000ecc <__udivmoddi4+0x28c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8102 	bls.w	8000ecc <__udivmoddi4+0x28c>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd0:	eba4 040e 	sub.w	r4, r4, lr
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa0>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	b902      	cbnz	r2, 8000cea <__udivmoddi4+0xaa>
 8000ce8:	deff      	udf	#255	; 0xff
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d150      	bne.n	8000d94 <__udivmoddi4+0x154>
 8000cf2:	1bcb      	subs	r3, r1, r7
 8000cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d02:	0c21      	lsrs	r1, r4, #16
 8000d04:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0xe4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0xe2>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	f200 80e9 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x10c>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x10a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80d9 	bhi.w	8000efc <__udivmoddi4+0x2bc>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e7bf      	b.n	8000cd6 <__udivmoddi4+0x96>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0x12e>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <__udivmoddi4+0x282>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x1cc>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0x140>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80b8 	bhi.w	8000ef0 <__udivmoddi4+0x2b0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0103 	sbc.w	r1, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	468c      	mov	ip, r1
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0a8      	beq.n	8000ce0 <__udivmoddi4+0xa0>
 8000d8e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000d94:	f1c2 0320 	rsb	r3, r2, #32
 8000d98:	fa20 f603 	lsr.w	r6, r0, r3
 8000d9c:	4097      	lsls	r7, r2
 8000d9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000da2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da6:	40d9      	lsrs	r1, r3
 8000da8:	4330      	orrs	r0, r6
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f108 	mul.w	r1, r6, r8
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x19c>
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dce:	f080 808d 	bcs.w	8000eec <__udivmoddi4+0x2ac>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 808a 	bls.w	8000eec <__udivmoddi4+0x2ac>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	443b      	add	r3, r7
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b281      	uxth	r1, r0
 8000de0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb00 f308 	mul.w	r3, r0, r8
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x1c4>
 8000df4:	1879      	adds	r1, r7, r1
 8000df6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfa:	d273      	bcs.n	8000ee4 <__udivmoddi4+0x2a4>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d971      	bls.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4439      	add	r1, r7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e0a:	e778      	b.n	8000cfe <__udivmoddi4+0xbe>
 8000e0c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e10:	fa03 f406 	lsl.w	r4, r3, r6
 8000e14:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e26:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	0c3b      	lsrs	r3, r7, #16
 8000e2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e32:	fa1f f884 	uxth.w	r8, r4
 8000e36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e42:	458a      	cmp	sl, r1
 8000e44:	fa02 f206 	lsl.w	r2, r2, r6
 8000e48:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x220>
 8000e4e:	1861      	adds	r1, r4, r1
 8000e50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e54:	d248      	bcs.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e56:	458a      	cmp	sl, r1
 8000e58:	d946      	bls.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5e:	4421      	add	r1, r4
 8000e60:	eba1 010a 	sub.w	r1, r1, sl
 8000e64:	b2bf      	uxth	r7, r7
 8000e66:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e72:	fb00 f808 	mul.w	r8, r0, r8
 8000e76:	45b8      	cmp	r8, r7
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x24a>
 8000e7a:	19e7      	adds	r7, r4, r7
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d22e      	bcs.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d92c      	bls.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4427      	add	r7, r4
 8000e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8e:	eba7 0708 	sub.w	r7, r7, r8
 8000e92:	fba0 8902 	umull	r8, r9, r0, r2
 8000e96:	454f      	cmp	r7, r9
 8000e98:	46c6      	mov	lr, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	d31a      	bcc.n	8000ed4 <__udivmoddi4+0x294>
 8000e9e:	d017      	beq.n	8000ed0 <__udivmoddi4+0x290>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x27a>
 8000ea2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eaa:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eae:	40f2      	lsrs	r2, r6
 8000eb0:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb4:	40f7      	lsrs	r7, r6
 8000eb6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	462e      	mov	r6, r5
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	e70b      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fd      	b.n	8000ccc <__udivmoddi4+0x8c>
 8000ed0:	4543      	cmp	r3, r8
 8000ed2:	d2e5      	bcs.n	8000ea0 <__udivmoddi4+0x260>
 8000ed4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed8:	eb69 0104 	sbc.w	r1, r9, r4
 8000edc:	3801      	subs	r0, #1
 8000ede:	e7df      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e7d2      	b.n	8000e8a <__udivmoddi4+0x24a>
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	e78d      	b.n	8000e04 <__udivmoddi4+0x1c4>
 8000ee8:	4681      	mov	r9, r0
 8000eea:	e7b9      	b.n	8000e60 <__udivmoddi4+0x220>
 8000eec:	4666      	mov	r6, ip
 8000eee:	e775      	b.n	8000ddc <__udivmoddi4+0x19c>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e74a      	b.n	8000d8a <__udivmoddi4+0x14a>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	4439      	add	r1, r7
 8000efa:	e713      	b.n	8000d24 <__udivmoddi4+0xe4>
 8000efc:	3802      	subs	r0, #2
 8000efe:	443c      	add	r4, r7
 8000f00:	e724      	b.n	8000d4c <__udivmoddi4+0x10c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <init_autosequence_constants>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_constants() {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	// Hardcoded timings
	autosequence.startup_motor_start_delay_ms = 500;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f12:	601a      	str	r2, [r3, #0]
	autosequence.post_vent_on_time_ms = 1000;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1a:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_off_time_ms = 6000;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f22:	61da      	str	r2, [r3, #28]
	autosequence.post_purge_off_time_ms = 10000;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2a:	621a      	str	r2, [r3, #32]

	// Detection thresholds
	autosequence.ignition_ignitor_current_lower_bound = 3;  // TODO: fix this
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <init_autosequence_constants+0x60>)
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
	autosequence.ignition_ignitor_current_lower_bound_pass_min_detections = 30;  // 150ms
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f34:	221e      	movs	r2, #30
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34

	autosequence.hotfire_chamber_pres_lower_bound = 140.64; // Nominal * 0.5
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <init_autosequence_constants+0x64>)
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
	autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections = 10;  // 50ms
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f40:	220a      	movs	r2, #10
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c
	autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms = 1000;  // Wait 1s
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	655a      	str	r2, [r3, #84]	; 0x54

	autosequence.hotfire_chamber_pres_upper_bound = 421.9;  // Nominal * 1.5
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <init_autosequence_constants+0x68>)
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
	autosequence.hotfire_chamber_pres_upper_bound_pass_min_detections = 3;  // 15ms
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000062c 	.word	0x2000062c
 8000f68:	40400000 	.word	0x40400000
 8000f6c:	430ca3d7 	.word	0x430ca3d7
 8000f70:	43d2f333 	.word	0x43d2f333

08000f74 <init_tank_pressure_control_configuration>:
 * Configuring tank settings that don't change between tests.
 * Variables stored in nonvolatile memory are initialized elsewhere.
 *
 * TODO: say where they're initialized.
 */
void init_tank_pressure_control_configuration() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

	// LOX tank configuration
	tanks[LOX_TANK_NUM].is_cryogenic = 1;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	705a      	strb	r2, [r3, #1]
	tanks[LOX_TANK_NUM].control_valve_channel = LOX_CONTROL_VALVE_CH;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	709a      	strb	r2, [r3, #2]
	tanks[LOX_TANK_NUM].control_pres = &pressure[LOX_TANK_PRES_CH];  // TODO: change
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <init_tank_pressure_control_configuration+0x84>)
 8000f88:	605a      	str	r2, [r3, #4]
	tanks[LOX_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000f8e:	609a      	str	r2, [r3, #8]
	tanks[LOX_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000f94:	60da      	str	r2, [r3, #12]
	tanks[LOX_TANK_NUM].PID_ctrl_loop_period_ms = 50;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f98:	2232      	movs	r2, #50	; 0x32
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

	// Fuel tank configuration
	tanks[FUEL_TANK_NUM].is_cryogenic = 0;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tanks[FUEL_TANK_NUM].control_valve_channel = FUEL_CONTROL_VALVE_CH;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tanks[FUEL_TANK_NUM].control_pres = &pressure[FUEL_TANK_PRES_CH];  // TODO: change
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <init_tank_pressure_control_configuration+0x90>)
 8000fb0:	659a      	str	r2, [r3, #88]	; 0x58
	tanks[FUEL_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c
	tanks[FUEL_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000fbc:	661a      	str	r2, [r3, #96]	; 0x60
	tanks[FUEL_TANK_NUM].PID_ctrl_loop_period_ms = 50;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc0:	2232      	movs	r2, #50	; 0x32
 8000fc2:	679a      	str	r2, [r3, #120]	; 0x78

	// Motor info
	tanks[LOX_TANK_NUM].motor_num = LOX_TANK_NUM;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
	tanks[LOX_TANK_NUM].motor_num = FUEL_TANK_NUM;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	70da      	strb	r2, [r3, #3]

	// Bang bang thresholds
	tanks[LOX_TANK_NUM].bang_bang_low_pres_diff = 10;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fd4:	615a      	str	r2, [r3, #20]
	tanks[LOX_TANK_NUM].bang_bang_high_pres_diff = 15;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <init_tank_pressure_control_configuration+0x98>)
 8000fda:	619a      	str	r2, [r3, #24]
	tanks[FUEL_TANK_NUM].bang_bang_low_pres_diff = 5;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <init_tank_pressure_control_configuration+0x9c>)
 8000fe0:	669a      	str	r2, [r3, #104]	; 0x68
	tanks[FUEL_TANK_NUM].bang_bang_high_pres_diff = 10;
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fe6:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000584 	.word	0x20000584
 8000ff8:	200002f4 	.word	0x200002f4
 8000ffc:	200002fc 	.word	0x200002fc
 8001000:	20000360 	.word	0x20000360
 8001004:	200002f8 	.word	0x200002f8
 8001008:	41200000 	.word	0x41200000
 800100c:	41700000 	.word	0x41700000
 8001010:	40a00000 	.word	0x40a00000

08001014 <init_autosequence_control_variables>:

/**
 * Call this on initialization and every time you exit the autosequence
 */
void init_autosequence_control_variables() {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	autosequence.startup_init_motor_pos_complete = 0;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <init_autosequence_control_variables+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <init_autosequence_control_variables+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	871a      	strh	r2, [r3, #56]	; 0x38
	autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	autosequence.post_gse_fuel_vent_signal = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	autosequence.post_gse_fuel_vent_command_enable = 0;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	2000062c 	.word	0x2000062c

0800107c <enter_abort_state>:

/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 */
void enter_abort_state() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	// Enter Abort state
	// This line is for in case someone forgets to set Abort elsewhere
	STATE = Abort;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <enter_abort_state+0x90>)
 8001082:	2206      	movs	r2, #6
 8001084:	701a      	strb	r2, [r3, #0]

	// Close MPVs
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8001086:	2100      	movs	r1, #0
 8001088:	2004      	movs	r0, #4
 800108a:	f006 fd9c 	bl	8007bc6 <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 800108e:	2100      	movs	r1, #0
 8001090:	2005      	movs	r0, #5
 8001092:	f006 fd98 	bl	8007bc6 <set_valve_channel>
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 8001096:	2100      	movs	r1, #0
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fd94 	bl	8007bc6 <set_valve_channel>

	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 800109e:	2100      	movs	r1, #0
 80010a0:	2007      	movs	r0, #7
 80010a2:	f006 fd90 	bl	8007bc6 <set_valve_channel>

	// Close control valves
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f006 fd8c 	bl	8007bc6 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2003      	movs	r0, #3
 80010b2:	f006 fd88 	bl	8007bc6 <set_valve_channel>

	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);
 80010b6:	2100      	movs	r1, #0
 80010b8:	2006      	movs	r0, #6
 80010ba:	f006 fd84 	bl	8007bc6 <set_valve_channel>

	// Open vent valves
	// Fuel vent is handled by GSE controller
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 80010be:	2101      	movs	r1, #1
 80010c0:	2002      	movs	r0, #2
 80010c2:	f006 fd80 	bl	8007bc6 <set_valve_channel>
	autosequence.post_gse_fuel_vent_command_enable = 1;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <enter_abort_state+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	autosequence.post_gse_fuel_vent_signal = VALVE_ON;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <enter_abort_state+0x94>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 80010d6:	2101      	movs	r1, #1
 80010d8:	2008      	movs	r0, #8
 80010da:	f006 fd74 	bl	8007bc6 <set_valve_channel>

	// Close motors (needle valves), 0 degrees should be closed.
	moveMotorToPos(0, LOX_TANK_NUM);
 80010de:	2000      	movs	r0, #0
 80010e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001114 <enter_abort_state+0x98>
 80010e4:	f000 ffc6 	bl	8002074 <moveMotorToPos>
	moveMotorToPos(0, FUEL_TANK_NUM);
 80010e8:	2001      	movs	r0, #1
 80010ea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001114 <enter_abort_state+0x98>
 80010ee:	f000 ffc1 	bl	8002074 <moveMotorToPos>

	// Stop TPC (not an actuation)
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <enter_abort_state+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <enter_abort_state+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	// Make sure telem is enabled, in case it aborted during
	// the MPV delay
	telem_disabled = 0;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <enter_abort_state+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002ac 	.word	0x200002ac
 8001110:	2000062c 	.word	0x2000062c
 8001114:	00000000 	.word	0x00000000
 8001118:	20000582 	.word	0x20000582

0800111c <enter_safe_disarm_state>:
 * Call this function to safe the system.
 * Not the same as abort.
 *
 * Can only be called in AutoPress and Startup.
 */
void enter_safe_disarm_state() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	// Including this line in case programmer forgets to set it elsewhere
	STATE = Safe;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <enter_safe_disarm_state+0x24>)
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]

	// Close control valves and go back to Manual.
	// TODO: should tank enable be looked at here?
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f006 fd4c 	bl	8007bc6 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 800112e:	2100      	movs	r1, #0
 8001130:	2003      	movs	r0, #3
 8001132:	f006 fd48 	bl	8007bc6 <set_valve_channel>

	// Reset all control variables whenever exiting the autosequence
	init_autosequence_control_variables();
 8001136:	f7ff ff6d 	bl	8001014 <init_autosequence_control_variables>

	// TODO: go back to Manual?
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002ac 	.word	0x200002ac

08001144 <update_ignitor_break_detector>:
 * reaches a certain count, set a flag. Current should drop
 * out after the ematch burns and the ignitor lights.
 *
 *  This function is called every 5ms during the detection period.
 */
void update_ignitor_break_detector() {			  // Counter
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	  if (ivlv[IGNITOR_CH] < autosequence.ignition_ignitor_current_lower_bound) {
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <update_ignitor_break_detector+0x58>)
 800114a:	ed93 7a06 	vldr	s14, [r3, #24]
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001150:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d506      	bpl.n	800116c <update_ignitor_break_detector+0x28>
		  ++autosequence.ignition_ignitor_current_lower_bound_pass_count;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001160:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001162:	3301      	adds	r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001168:	871a      	strh	r2, [r3, #56]	; 0x38
 800116a:	e002      	b.n	8001172 <update_ignitor_break_detector+0x2e>
	  }
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800116e:	2200      	movs	r2, #0
 8001170:	871a      	strh	r2, [r3, #56]	; 0x38
	  }

	  // Threshold check
	  if (autosequence.ignition_ignitor_current_lower_bound_pass_count
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001174:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001176:	461a      	mov	r2, r3
			  >= autosequence.ignition_ignitor_current_lower_bound_pass_min_detections) {
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	  if (autosequence.ignition_ignitor_current_lower_bound_pass_count
 800117c:	429a      	cmp	r2, r3
 800117e:	d304      	bcc.n	800118a <update_ignitor_break_detector+0x46>
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 1;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	  }
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
	  }
}
 8001188:	e003      	b.n	8001192 <update_ignitor_break_detector+0x4e>
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	2000030c 	.word	0x2000030c
 80011a0:	2000062c 	.word	0x2000062c

080011a4 <update_combustion_failure_detector>:
 * Pressure should stay above this threshold during
 * a nominal hotfire.
 *
 * This function is called every 5ms during the detection period.
 */
void update_combustion_failure_detector() {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	  // Counter
	  if (pressure[CHAMBER_PRES_CH] < autosequence.hotfire_chamber_pres_lower_bound) {
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <update_combustion_failure_detector+0x60>)
 80011aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d508      	bpl.n	80011d0 <update_combustion_failure_detector+0x2c>
		  ++autosequence.hotfire_chamber_pres_lower_bound_pass_count;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80011ce:	e003      	b.n	80011d8 <update_combustion_failure_detector+0x34>
	  }
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  }

	  // Threshold check
	  if (autosequence.hotfire_chamber_pres_lower_bound_pass_count
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011de:	461a      	mov	r2, r3
			  >= autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections) {
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	  if (autosequence.hotfire_chamber_pres_lower_bound_pass_count
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d304      	bcc.n	80011f2 <update_combustion_failure_detector+0x4e>
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 1;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	  }
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
	  }
}
 80011f0:	e003      	b.n	80011fa <update_combustion_failure_detector+0x56>
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200002f4 	.word	0x200002f4
 8001208:	2000062c 	.word	0x2000062c

0800120c <update_hard_start_detector>:
 * set a flag. Pressure should stay below this threshold for
 * the entire hotfire.
 *
 * This function is called every 5ms during the detection period.
 */
void update_hard_start_detector() {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	// Counter
	if (pressure[CHAMBER_PRES_CH] > autosequence.hotfire_chamber_pres_upper_bound) {
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <update_hard_start_detector+0x60>)
 8001212:	ed93 7a05 	vldr	s14, [r3, #20]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <update_hard_start_detector+0x64>)
 8001218:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd08      	ble.n	8001238 <update_hard_start_detector+0x2c>
		++autosequence.hotfire_chamber_pres_upper_bound_pass_count;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <update_hard_start_detector+0x64>)
 8001228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <update_hard_start_detector+0x64>)
 8001232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001236:	e003      	b.n	8001240 <update_hard_start_detector+0x34>
	}
	else {
		autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <update_hard_start_detector+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	// Threshold check
	if (autosequence.hotfire_chamber_pres_upper_bound_pass_count
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <update_hard_start_detector+0x64>)
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	461a      	mov	r2, r3
			>= autosequence.hotfire_chamber_pres_upper_bound_pass_min_detections) {
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <update_hard_start_detector+0x64>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	if (autosequence.hotfire_chamber_pres_upper_bound_pass_count
 800124c:	429a      	cmp	r2, r3
 800124e:	d304      	bcc.n	800125a <update_hard_start_detector+0x4e>
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 1;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <update_hard_start_detector+0x64>)
 8001252:	2201      	movs	r2, #1
 8001254:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	else {
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
	}
}
 8001258:	e003      	b.n	8001262 <update_hard_start_detector+0x56>
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <update_hard_start_detector+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	200002f4 	.word	0x200002f4
 8001270:	2000062c 	.word	0x2000062c

08001274 <manual_state_transition>:


void manual_state_transition(uint8_t next_state) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]

	// Aborts work in any state
	if (next_state == Abort) {
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d108      	bne.n	8001296 <manual_state_transition+0x22>
		STATE = Abort;
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <manual_state_transition+0x13c>)
 8001286:	2206      	movs	r2, #6
 8001288:	701a      	strb	r2, [r3, #0]
		enter_abort_state();
 800128a:	f7ff fef7 	bl	800107c <enter_abort_state>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
 800128e:	2001      	movs	r0, #1
 8001290:	f004 ff5a 	bl	8006148 <set_status_flag>
		return;
 8001294:	e089      	b.n	80013aa <manual_state_transition+0x136>
	}

	// Check current state to determine next state transition
	if (STATE == Manual) {
 8001296:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <manual_state_transition+0x13c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <manual_state_transition+0x3a>
		if (next_state == Armed) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 8082 	bne.w	80013aa <manual_state_transition+0x136>
			STATE = Armed;
 80012a6:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <manual_state_transition+0x13c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e07d      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Armed) {
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <manual_state_transition+0x13c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10d      	bne.n	80012d2 <manual_state_transition+0x5e>
		if (next_state == Manual) {
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <manual_state_transition+0x50>
			STATE = Manual;
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <manual_state_transition+0x13c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e072      	b.n	80013aa <manual_state_transition+0x136>
		}
		else if (next_state == AutoPress) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d16f      	bne.n	80013aa <manual_state_transition+0x136>
			STATE = AutoPress;
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <manual_state_transition+0x13c>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e06b      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == AutoPress) {
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <manual_state_transition+0x13c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d120      	bne.n	800131c <manual_state_transition+0xa8>
		if (next_state == Manual) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <manual_state_transition+0x78>
			STATE = Safe;
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <manual_state_transition+0x13c>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 80012e6:	f7ff ff19 	bl	800111c <enter_safe_disarm_state>
 80012ea:	e05e      	b.n	80013aa <manual_state_transition+0x136>
		}
		else if (next_state == Startup) {
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d15b      	bne.n	80013aa <manual_state_transition+0x136>
			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f006 fc66 	bl	8007bc6 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2003      	movs	r0, #3
 80012fe:	f006 fc62 	bl	8007bc6 <set_valve_channel>

			autosequence.startup_start_time_ms = SYS_MILLIS;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <manual_state_transition+0x140>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <manual_state_transition+0x144>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <manual_state_transition+0x148>)
 8001312:	65d3      	str	r3, [r2, #92]	; 0x5c
			STATE = Startup;
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <manual_state_transition+0x13c>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e046      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Startup) {
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <manual_state_transition+0x13c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d125      	bne.n	8001370 <manual_state_transition+0xfc>
		if (next_state == Manual) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <manual_state_transition+0xc2>
			STATE = Safe;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <manual_state_transition+0x13c>)
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001330:	f7ff fef4 	bl	800111c <enter_safe_disarm_state>
 8001334:	e039      	b.n	80013aa <manual_state_transition+0x136>
		}
		// GUI sends continue command for some reason
		else if (next_state == Continue) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d136      	bne.n	80013aa <manual_state_transition+0x136>
			// Only allow ignition after initial motor position is handled
			if (autosequence.startup_init_motor_pos_complete) {
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <manual_state_transition+0x148>)
 800133e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001342:	2b00      	cmp	r3, #0
 8001344:	d031      	beq.n	80013aa <manual_state_transition+0x136>
				autosequence.startup_init_motor_pos_complete = 0;  // Reset flag
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <manual_state_transition+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				STATE = Ignition;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <manual_state_transition+0x13c>)
 8001350:	2204      	movs	r2, #4
 8001352:	701a      	strb	r2, [r3, #0]
				autosequence.ignition_start_time_ms = SYS_MILLIS;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <manual_state_transition+0x140>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <manual_state_transition+0x144>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <manual_state_transition+0x148>)
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
				set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
 8001366:	2101      	movs	r1, #1
 8001368:	2008      	movs	r0, #8
 800136a:	f006 fc2c 	bl	8007bc6 <set_valve_channel>
 800136e:	e01c      	b.n	80013aa <manual_state_transition+0x136>
			}
		}
	}
	else if (STATE == IgnitionFail) {
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <manual_state_transition+0x13c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d108      	bne.n	800138a <manual_state_transition+0x116>
		if (next_state == Manual) {
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <manual_state_transition+0x136>
			init_autosequence_control_variables();
 800137e:	f7ff fe49 	bl	8001014 <init_autosequence_control_variables>
			STATE = Manual;  // Operator must dismiss IgnitionFail condition
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <manual_state_transition+0x13c>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e00f      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Abort) {
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <manual_state_transition+0x13c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d10b      	bne.n	80013aa <manual_state_transition+0x136>
		if (next_state == Manual) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d108      	bne.n	80013aa <manual_state_transition+0x136>
			init_autosequence_control_variables();
 8001398:	f7ff fe3c 	bl	8001014 <init_autosequence_control_variables>
			// Stop venting fuel tank
			autosequence.post_gse_fuel_vent_command_enable = 0;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <manual_state_transition+0x148>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			STATE = Manual;  // Operator must dismiss Abort condition
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <manual_state_transition+0x13c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002ac 	.word	0x200002ac
 80013b4:	20000904 	.word	0x20000904
 80013b8:	10624dd3 	.word	0x10624dd3
 80013bc:	2000062c 	.word	0x2000062c

080013c0 <get_ellapsed_time_in_autosequence_state_ms>:

/**
 * Only works for Startup, Ignition, Hotfire, and Post
 */
uint32_t get_ellapsed_time_in_autosequence_state_ms() {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	if (STATE == Startup) {
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d10a      	bne.n	80013e2 <get_ellapsed_time_in_autosequence_state_ms+0x22>
		return SYS_MILLIS - autosequence.startup_start_time_ms;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099a      	lsrs	r2, r3, #6
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	e02d      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Ignition) {
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d10a      	bne.n	8001400 <get_ellapsed_time_in_autosequence_state_ms+0x40>
		return SYS_MILLIS - autosequence.ignition_start_time_ms;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	099a      	lsrs	r2, r3, #6
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	e01e      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Hotfire) {
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10a      	bne.n	800141e <get_ellapsed_time_in_autosequence_state_ms+0x5e>
		return SYS_MILLIS - autosequence.hotfire_start_time_ms;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099a      	lsrs	r2, r3, #6
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	e00f      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Post) {
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d10a      	bne.n	800143c <get_ellapsed_time_in_autosequence_state_ms+0x7c>
		return SYS_MILLIS - autosequence.post_start_time_ms;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099a      	lsrs	r2, r3, #6
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	e000      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else {
		return 0;
 800143c:	2300      	movs	r3, #0
	}
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200002ac 	.word	0x200002ac
 800144c:	20000904 	.word	0x20000904
 8001450:	10624dd3 	.word	0x10624dd3
 8001454:	2000062c 	.word	0x2000062c

08001458 <get_remaining_time_in_autosequence_state>:

/*
 * Only Ignition, Hotfire, and Post have defined time limits
 */
uint32_t get_remaining_time_in_autosequence_state(uint32_t T_state) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if (STATE == Ignition) {
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d10b      	bne.n	8001480 <get_remaining_time_in_autosequence_state+0x28>
		return (autosequence.ignition_ignitor_on_delay_ms
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
				+ autosequence.ignition_ignitor_high_duration_ms) - T_state;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	e012      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Hotfire) {
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d104      	bne.n	8001492 <get_remaining_time_in_autosequence_state+0x3a>
		return autosequence.hotfire_test_duration_ms - T_state;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	e009      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Post) {
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d104      	bne.n	80014a4 <get_remaining_time_in_autosequence_state+0x4c>
		return autosequence.post_purge_off_time_ms - T_state;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	e000      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else {
		return 0;
 80014a4:	2300      	movs	r3, #0
	}
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200002ac 	.word	0x200002ac
 80014b8:	2000062c 	.word	0x2000062c

080014bc <execute_autosequence>:

/**
 * Called every main while loop
 */
void execute_autosequence() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	// Autosequence timings are done relative to the start of the state
	autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();
 80014c0:	f7ff ff7e 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4ab7      	ldr	r2, [pc, #732]	; (80017a4 <execute_autosequence+0x2e8>)
 80014c8:	6293      	str	r3, [r2, #40]	; 0x28

	// Update time remaining in state for GUI
	state_rem_duration =
			get_remaining_time_in_autosequence_state(autosequence.T_state);
 80014ca:	4bb6      	ldr	r3, [pc, #728]	; (80017a4 <execute_autosequence+0x2e8>)
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffc2 	bl	8001458 <get_remaining_time_in_autosequence_state>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
	state_rem_duration =
 80014d8:	4bb3      	ldr	r3, [pc, #716]	; (80017a8 <execute_autosequence+0x2ec>)
 80014da:	601a      	str	r2, [r3, #0]

	// Doesn't use if else within each state in case the timings overlap
	if (STATE == Ignition) {
 80014dc:	4bb3      	ldr	r3, [pc, #716]	; (80017ac <execute_autosequence+0x2f0>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d15a      	bne.n	800159a <execute_autosequence+0xde>
		// Purge should've turned on when entering Ignition
		// Wait for the delay, then turn ignitor on
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms) {
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <execute_autosequence+0x2e8>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	4aae      	ldr	r2, [pc, #696]	; (80017a4 <execute_autosequence+0x2e8>)
 80014ea:	8892      	ldrh	r2, [r2, #4]
 80014ec:	b292      	uxth	r2, r2
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d303      	bcc.n	80014fa <execute_autosequence+0x3e>
			set_valve_channel(IGNITOR_CH, VALVE_ON);
 80014f2:	2101      	movs	r1, #1
 80014f4:	2006      	movs	r0, #6
 80014f6:	f006 fb66 	bl	8007bc6 <set_valve_channel>
		}
		// Hold ignitor high for a certain amount of time
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms
 80014fa:	4baa      	ldr	r3, [pc, #680]	; (80017a4 <execute_autosequence+0x2e8>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4aa9      	ldr	r2, [pc, #676]	; (80017a4 <execute_autosequence+0x2e8>)
 8001500:	8892      	ldrh	r2, [r2, #4]
 8001502:	b292      	uxth	r2, r2
 8001504:	4611      	mov	r1, r2
				+ autosequence.ignition_ignitor_high_duration_ms) {
 8001506:	4aa7      	ldr	r2, [pc, #668]	; (80017a4 <execute_autosequence+0x2e8>)
 8001508:	88d2      	ldrh	r2, [r2, #6]
 800150a:	b292      	uxth	r2, r2
 800150c:	440a      	add	r2, r1
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms
 800150e:	4293      	cmp	r3, r2
 8001510:	f0c0 816c 	bcc.w	80017ec <execute_autosequence+0x330>

			// Only proceed to Hotfire if the ignitor break is detected
			// and automatic aborts are enabled
			if (autosequence.enable_auto_aborts &&
 8001514:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <execute_autosequence+0x2e8>)
 8001516:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <execute_autosequence+0xa6>
					!autosequence.ignition_ignitor_current_lower_bound_threshold_passed) {
 8001520:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <execute_autosequence+0x2e8>)
 8001522:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
			if (autosequence.enable_auto_aborts &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11b      	bne.n	8001562 <execute_autosequence+0xa6>
				// Transition to IgnitionFail state
				STATE = IgnitionFail;
 800152a:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <execute_autosequence+0x2f0>)
 800152c:	2209      	movs	r2, #9
 800152e:	701a      	strb	r2, [r3, #0]

				// Reset all control variables whenever exiting the autosequence
				autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;  // Not needed
 8001530:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <execute_autosequence+0x2e8>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				init_autosequence_control_variables();
 8001538:	f7ff fd6c 	bl	8001014 <init_autosequence_control_variables>

				// Reset all control variables whenever exiting the autosequence
				init_autosequence_control_variables();
 800153c:	f7ff fd6a 	bl	8001014 <init_autosequence_control_variables>

				// Close control valves
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f006 fb3f 	bl	8007bc6 <set_valve_channel>
				set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8001548:	2100      	movs	r1, #0
 800154a:	2003      	movs	r0, #3
 800154c:	f006 fb3b 	bl	8007bc6 <set_valve_channel>

				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8001550:	2100      	movs	r1, #0
 8001552:	2006      	movs	r0, #6
 8001554:	f006 fb37 	bl	8007bc6 <set_valve_channel>

				// Purge low
				set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 8001558:	2100      	movs	r1, #0
 800155a:	2008      	movs	r0, #8
 800155c:	f006 fb33 	bl	8007bc6 <set_valve_channel>
 8001560:	e144      	b.n	80017ec <execute_autosequence+0x330>
				// Now wait for operator to go to Manual
			}
			// Successful ignitor break OR auto aborts disabled
			else {
				// Transition to Hotfire state
				STATE = Hotfire;
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <execute_autosequence+0x2f0>)
 8001564:	2205      	movs	r2, #5
 8001566:	701a      	strb	r2, [r3, #0]
				autosequence.hotfire_start_time_ms = SYS_MILLIS;
 8001568:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <execute_autosequence+0x2f4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a91      	ldr	r2, [pc, #580]	; (80017b4 <execute_autosequence+0x2f8>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <execute_autosequence+0x2e8>)
 8001578:	6653      	str	r3, [r2, #100]	; 0x64

				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 800157a:	2100      	movs	r1, #0
 800157c:	2006      	movs	r0, #6
 800157e:	f006 fb22 	bl	8007bc6 <set_valve_channel>

				// Open LOX MPV
				set_valve_channel(LOX_MPV_VALVE_CH, VALVE_ON);
 8001582:	2101      	movs	r1, #1
 8001584:	2001      	movs	r0, #1
 8001586:	f006 fb1e 	bl	8007bc6 <set_valve_channel>

				// Open LOX control valve
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_ON);
 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f006 fb1a 	bl	8007bc6 <set_valve_channel>

				// Disable telemetry to prevent telem from blocking valve
				// timings to prevent a hard start
				// TODO: get rid of this when DMA tx is working?
				telem_disabled = 1;
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <execute_autosequence+0x2fc>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e128      	b.n	80017ec <execute_autosequence+0x330>
			}
		}
	}

	else if (STATE == Hotfire) {
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <execute_autosequence+0x2f0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	f040 80c0 	bne.w	8001724 <execute_autosequence+0x268>
		// Tank pressure control periodic function calls handled in main()
		// Not using else if in case the timings overlap

		// Automatic abort cases
		if (autosequence.enable_auto_aborts) {
 80015a4:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <execute_autosequence+0x2e8>)
 80015a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02b      	beq.n	8001608 <execute_autosequence+0x14c>
			// Chamber pressure too low - only active 1s after Hotfire
			// see update_combustion_failure() and its call in main()
			// Double check that it waits until after the startup transient
			if (autosequence.T_state > autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms
 80015b0:	4b7c      	ldr	r3, [pc, #496]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d911      	bls.n	80015e0 <execute_autosequence+0x124>
					&& autosequence.hotfire_chamber_pres_lower_bound_threshold_passed) {
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <execute_autosequence+0x2e8>)
 80015be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <execute_autosequence+0x124>
				// Reset abort flag
				autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <execute_autosequence+0x2e8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

				// Handle abort
				STATE = Abort;
 80015ce:	4b77      	ldr	r3, [pc, #476]	; (80017ac <execute_autosequence+0x2f0>)
 80015d0:	2206      	movs	r2, #6
 80015d2:	701a      	strb	r2, [r3, #0]
				enter_abort_state();
 80015d4:	f7ff fd52 	bl	800107c <enter_abort_state>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_LOW);
 80015d8:	2002      	movs	r0, #2
 80015da:	f004 fdb5 	bl	8006148 <set_status_flag>
				return;  // Stop other valves from actuating this loop
 80015de:	e115      	b.n	800180c <execute_autosequence+0x350>
			}

			// Chamber pressure too high - active through entire Hotfire
			// Aborts on first instance of detection to catch hard starts
			if (pressure[CHAMBER_PRES_CH]
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <execute_autosequence+0x300>)
 80015e2:	ed93 7a05 	vldr	s14, [r3, #20]
						 > autosequence.hotfire_chamber_pres_upper_bound) {
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <execute_autosequence+0x2e8>)
 80015e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
			if (pressure[CHAMBER_PRES_CH]
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd08      	ble.n	8001608 <execute_autosequence+0x14c>
				STATE = Abort;
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <execute_autosequence+0x2f0>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	701a      	strb	r2, [r3, #0]
				enter_abort_state();
 80015fc:	f7ff fd3e 	bl	800107c <enter_abort_state>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_HIGH);
 8001600:	2003      	movs	r0, #3
 8001602:	f004 fda1 	bl	8006148 <set_status_flag>
				return;  // Stop other valves from actuating this loop
 8001606:	e101      	b.n	800180c <execute_autosequence+0x350>
			}
		}

		// Turn on LOX pressure control
		// Relative to 0 because LOX leads
		if (autosequence.T_state >= (0 + autosequence.hotfire_pid_start_delay_ms)
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <execute_autosequence+0x2e8>)
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <execute_autosequence+0x2e8>)
 800160e:	8992      	ldrh	r2, [r2, #12]
 8001610:	b292      	uxth	r2, r2
 8001612:	4293      	cmp	r3, r2
 8001614:	d30b      	bcc.n	800162e <execute_autosequence+0x172>
				&& !autosequence.hotfire_lox_tank_enable_PID_control) {
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <execute_autosequence+0x2e8>)
 8001618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <execute_autosequence+0x172>
			// Should only get called once when it starts pressure control
			tank_init_control_loop(&tanks[LOX_TANK_NUM]);
 8001620:	4867      	ldr	r0, [pc, #412]	; (80017c0 <execute_autosequence+0x304>)
 8001622:	f005 f8ea 	bl	80067fa <tank_init_control_loop>
			autosequence.hotfire_lox_tank_enable_PID_control = 1;
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <execute_autosequence+0x2e8>)
 8001628:	2201      	movs	r2, #1
 800162a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}

		// Fuel on
		if (autosequence.T_state >= autosequence.hotfire_fuel_mpv_delay_ms) {
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <execute_autosequence+0x2e8>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <execute_autosequence+0x2e8>)
 8001634:	7a12      	ldrb	r2, [r2, #8]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	4293      	cmp	r3, r2
 800163a:	d30e      	bcc.n	800165a <execute_autosequence+0x19e>
			// Open Fuel MPV (Press AND Vent)
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_ON);
 800163c:	2101      	movs	r1, #1
 800163e:	2005      	movs	r0, #5
 8001640:	f006 fac1 	bl	8007bc6 <set_valve_channel>
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_ON);
 8001644:	2101      	movs	r1, #1
 8001646:	2004      	movs	r0, #4
 8001648:	f006 fabd 	bl	8007bc6 <set_valve_channel>

			// Open Fuel control valve
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_ON);
 800164c:	2101      	movs	r1, #1
 800164e:	2003      	movs	r0, #3
 8001650:	f006 fab9 	bl	8007bc6 <set_valve_channel>

			// Re-enable telemetry
			// TODO: remove this when DMA tx is working?
			telem_disabled = 0;
 8001654:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <execute_autosequence+0x2fc>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		}

		// Turn on Fuel pressure control
		// Delay is relative to MPV opening
		if (autosequence.T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 800165a:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <execute_autosequence+0x2e8>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <execute_autosequence+0x2e8>)
 8001660:	7a12      	ldrb	r2, [r2, #8]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	4611      	mov	r1, r2
				+ autosequence.hotfire_pid_start_delay_ms)
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <execute_autosequence+0x2e8>)
 8001668:	8992      	ldrh	r2, [r2, #12]
 800166a:	b292      	uxth	r2, r2
 800166c:	440a      	add	r2, r1
		if (autosequence.T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 800166e:	4293      	cmp	r3, r2
 8001670:	d30b      	bcc.n	800168a <execute_autosequence+0x1ce>
				&& !autosequence.hotfire_fuel_tank_enable_PID_control) {
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <execute_autosequence+0x2e8>)
 8001674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <execute_autosequence+0x1ce>
			// Should only get called once when it starts pressure control
			tank_init_control_loop(&tanks[FUEL_TANK_NUM]);
 800167c:	4851      	ldr	r0, [pc, #324]	; (80017c4 <execute_autosequence+0x308>)
 800167e:	f005 f8bc 	bl	80067fa <tank_init_control_loop>
			autosequence.hotfire_fuel_tank_enable_PID_control = 1;
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <execute_autosequence+0x2e8>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}

		// Nozzle film cooling timing is relative to LOX MPV opening
		if (autosequence.T_state >= autosequence.hotfire_film_cooling_on_time_ms) {
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <execute_autosequence+0x2e8>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <execute_autosequence+0x2e8>)
 8001690:	8952      	ldrh	r2, [r2, #10]
 8001692:	b292      	uxth	r2, r2
 8001694:	4293      	cmp	r3, r2
 8001696:	d303      	bcc.n	80016a0 <execute_autosequence+0x1e4>
			// Nozzle film cooling on
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_ON);
 8001698:	2101      	movs	r1, #1
 800169a:	2007      	movs	r0, #7
 800169c:	f006 fa93 	bl	8007bc6 <set_valve_channel>
		}

		// After combustion starts, turn off purge
		if (autosequence.T_state >= autosequence.hotfire_purge_off_time_ms) {
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d303      	bcc.n	80016b4 <execute_autosequence+0x1f8>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 80016ac:	2100      	movs	r1, #0
 80016ae:	2008      	movs	r0, #8
 80016b0:	f006 fa89 	bl	8007bc6 <set_valve_channel>
		}

		// Stop hotfire
		if (autosequence.T_state >= autosequence.hotfire_test_duration_ms) {
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <execute_autosequence+0x2e8>)
 80016b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <execute_autosequence+0x2e8>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f0c0 8095 	bcc.w	80017ec <execute_autosequence+0x330>
			// Transition to Post state
			STATE = Post;
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <execute_autosequence+0x2f0>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	701a      	strb	r2, [r3, #0]
			autosequence.post_start_time_ms = SYS_MILLIS;
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <execute_autosequence+0x2f4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <execute_autosequence+0x2f8>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <execute_autosequence+0x2e8>)
 80016d8:	6693      	str	r3, [r2, #104]	; 0x68

			// Close LOX and Fuel MPVs
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 80016da:	2100      	movs	r1, #0
 80016dc:	2004      	movs	r0, #4
 80016de:	f006 fa72 	bl	8007bc6 <set_valve_channel>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2005      	movs	r0, #5
 80016e6:	f006 fa6e 	bl	8007bc6 <set_valve_channel>
			set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f006 fa6a 	bl	8007bc6 <set_valve_channel>

			// Nozzle film cooling off
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2007      	movs	r0, #7
 80016f6:	f006 fa66 	bl	8007bc6 <set_valve_channel>

			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80016fa:	2100      	movs	r1, #0
 80016fc:	2000      	movs	r0, #0
 80016fe:	f006 fa62 	bl	8007bc6 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8001702:	2100      	movs	r1, #0
 8001704:	2003      	movs	r0, #3
 8001706:	f006 fa5e 	bl	8007bc6 <set_valve_channel>

			// Stop tank pressure control
			autosequence.hotfire_lox_tank_enable_PID_control = 0;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <execute_autosequence+0x2e8>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <execute_autosequence+0x2e8>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			// Purge high
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 800171a:	2101      	movs	r1, #1
 800171c:	2008      	movs	r0, #8
 800171e:	f006 fa52 	bl	8007bc6 <set_valve_channel>
 8001722:	e063      	b.n	80017ec <execute_autosequence+0x330>
		}
	}

	else if (STATE == Post) {
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <execute_autosequence+0x2f0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d14d      	bne.n	80017c8 <execute_autosequence+0x30c>
		// MPVs should already be closed and purge should've started by now

		if (autosequence.T_state >= autosequence.post_vent_on_time_ms) {
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <execute_autosequence+0x2e8>)
 800172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <execute_autosequence+0x2e8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	429a      	cmp	r2, r3
 8001736:	d30b      	bcc.n	8001750 <execute_autosequence+0x294>
			// Vent both tanks
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 8001738:	2101      	movs	r1, #1
 800173a:	2002      	movs	r0, #2
 800173c:	f006 fa43 	bl	8007bc6 <set_valve_channel>

			// Fuel vent handled by GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 1;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <execute_autosequence+0x2e8>)
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_ON;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <execute_autosequence+0x2e8>)
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		if (autosequence.T_state >= autosequence.post_vent_off_time_ms) {
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <execute_autosequence+0x2e8>)
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <execute_autosequence+0x2e8>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	d30b      	bcc.n	8001774 <execute_autosequence+0x2b8>
			// Close tank vents
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_OFF);
 800175c:	2100      	movs	r1, #0
 800175e:	2002      	movs	r0, #2
 8001760:	f006 fa31 	bl	8007bc6 <set_valve_channel>

			// Fuel vent handled by GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <execute_autosequence+0x2e8>)
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <execute_autosequence+0x2e8>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		if (autosequence.T_state >= autosequence.post_purge_off_time_ms) {
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <execute_autosequence+0x2e8>)
 8001776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <execute_autosequence+0x2e8>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d335      	bcc.n	80017ec <execute_autosequence+0x330>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 8001780:	2100      	movs	r1, #0
 8001782:	2008      	movs	r0, #8
 8001784:	f006 fa1f 	bl	8007bc6 <set_valve_channel>

			// Stop valve commands to the GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 0;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <execute_autosequence+0x2e8>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <execute_autosequence+0x2e8>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			// Reset all control variables whenever exiting the autosequence
			init_autosequence_control_variables();
 8001798:	f7ff fc3c 	bl	8001014 <init_autosequence_control_variables>

			// Transition back to Manual
			STATE = Manual;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <execute_autosequence+0x2f0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e023      	b.n	80017ec <execute_autosequence+0x330>
 80017a4:	2000062c 	.word	0x2000062c
 80017a8:	200002e4 	.word	0x200002e4
 80017ac:	200002ac 	.word	0x200002ac
 80017b0:	20000904 	.word	0x20000904
 80017b4:	10624dd3 	.word	0x10624dd3
 80017b8:	20000582 	.word	0x20000582
 80017bc:	200002f4 	.word	0x200002f4
 80017c0:	20000584 	.word	0x20000584
 80017c4:	200005d8 	.word	0x200005d8
		}
	}

	else if (STATE == Safe) {
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <execute_autosequence+0x354>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d103      	bne.n	80017d8 <execute_autosequence+0x31c>
		// Safing the system should've already happened
		// lmao what do you even do here?
		STATE = Manual;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <execute_autosequence+0x354>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e009      	b.n	80017ec <execute_autosequence+0x330>
	}

	else if (STATE == IgnitionFail) {
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <execute_autosequence+0x354>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d005      	beq.n	80017ec <execute_autosequence+0x330>
		// Wait for the operator to go back to Manual.
	}

	else if (STATE == Abort) {
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <execute_autosequence+0x354>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d101      	bne.n	80017ec <execute_autosequence+0x330>
		// Actuations should've been handled already during state transition.
		// Wait for the operator to go back to Manual.

		// To catch any additional bugs in the state transition,
		// Constantly actuate the proper valves during the Abort state.
		enter_abort_state();
 80017e8:	f7ff fc48 	bl	800107c <enter_abort_state>
	}

	// To catch bugs related to the Manual transition not
	// shutting down the GSE controller fuel vent valve,
	// constantly refresh those control variables
	if (STATE != Post && STATE != Abort) {
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <execute_autosequence+0x354>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d00b      	beq.n	800180c <execute_autosequence+0x350>
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <execute_autosequence+0x354>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d007      	beq.n	800180c <execute_autosequence+0x350>
		autosequence.post_gse_fuel_vent_command_enable = 0;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <execute_autosequence+0x358>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		autosequence.post_gse_fuel_vent_signal = 0;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <execute_autosequence+0x358>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002ac 	.word	0x200002ac
 8001814:	2000062c 	.word	0x2000062c

08001818 <pt_counts_to_psi>:
}

/**
 * Use the channel-specific calibrations to convert voltage back to pressure
 */
float pt_counts_to_psi(uint8_t pt_num, uint16_t pt_counts) {
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	80bb      	strh	r3, [r7, #4]

	if (pt_num < NUM_PTS) {
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b05      	cmp	r3, #5
 800182c:	f200 80a1 	bhi.w	8001972 <pt_counts_to_psi+0x15a>
		// Convert adc counts to ducer volts
		float pt_volts;
		if (pt_num == 5) {  // Channel 5 is 12V with 0.5 gain
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d11a      	bne.n	800186c <pt_counts_to_psi+0x54>
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_12_KULITE_VDIV_GAIN;
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe37 	bl	80004ac <__aeabi_i2d>
 800183e:	a352      	add	r3, pc, #328	; (adr r3, 8001988 <pt_counts_to_psi+0x170>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fe9c 	bl	8000580 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <pt_counts_to_psi+0x180>)
 8001856:	f7fe ffbd 	bl	80007d4 <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f985 	bl	8000b70 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e019      	b.n	80018a0 <pt_counts_to_psi+0x88>
		}
		else {  // Channel 0-4 are 5V with ~0.65 gain
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_5V_VDIV_GAIN;
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe1c 	bl	80004ac <__aeabi_i2d>
 8001874:	a344      	add	r3, pc, #272	; (adr r3, 8001988 <pt_counts_to_psi+0x170>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe fe81 	bl	8000580 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	a342      	add	r3, pc, #264	; (adr r3, 8001990 <pt_counts_to_psi+0x178>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe ffa2 	bl	80007d4 <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f96a 	bl	8000b70 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]
		}

		// Convert from ducer volts to pressure
		float epsilon = 0.00001;
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <pt_counts_to_psi+0x184>)
 80018a2:	60bb      	str	r3, [r7, #8]
		if (-epsilon < pt_cal_slope[pt_num] && pt_cal_slope[pt_num] < epsilon) {
 80018a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a8:	eeb1 7a67 	vneg.f32	s14, s15
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <pt_counts_to_psi+0x188>)
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d50e      	bpl.n	80018e0 <pt_counts_to_psi+0xc8>
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <pt_counts_to_psi+0x188>)
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80018d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd01      	ble.n	80018e0 <pt_counts_to_psi+0xc8>
			return -1;
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <pt_counts_to_psi+0x18c>)
 80018de:	e049      	b.n	8001974 <pt_counts_to_psi+0x15c>
		}
		else {  // Avoid divide by zero
			// Calibrations are in mV
			return (pt_volts - (pt_cal_offset[pt_num]/1000.0)) / (pt_cal_slope[pt_num]/1000.0) - pt_ambients[pt_num];
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fdf5 	bl	80004d0 <__aeabi_f2d>
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <pt_counts_to_psi+0x190>)
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fdeb 	bl	80004d0 <__aeabi_f2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <pt_counts_to_psi+0x194>)
 8001900:	f7fe ff68 	bl	80007d4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fc80 	bl	8000210 <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4614      	mov	r4, r2
 8001916:	461d      	mov	r5, r3
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <pt_counts_to_psi+0x188>)
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdd4 	bl	80004d0 <__aeabi_f2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <pt_counts_to_psi+0x194>)
 800192e:	f7fe ff51 	bl	80007d4 <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f7fe ff4b 	bl	80007d4 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4614      	mov	r4, r2
 8001944:	461d      	mov	r5, r3
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <pt_counts_to_psi+0x198>)
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fdbd 	bl	80004d0 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fc57 	bl	8000210 <__aeabi_dsub>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f901 	bl	8000b70 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	e000      	b.n	8001974 <pt_counts_to_psi+0x15c>
		}
	}
	return -1;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <pt_counts_to_psi+0x18c>)
 8001974:	ee07 3a90 	vmov	s15, r3
}
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	66666666 	.word	0x66666666
 800198c:	3f4a6666 	.word	0x3f4a6666
 8001990:	594db709 	.word	0x594db709
 8001994:	3fe4d653 	.word	0x3fe4d653
 8001998:	3fe00000 	.word	0x3fe00000
 800199c:	3727c5ac 	.word	0x3727c5ac
 80019a0:	2000027c 	.word	0x2000027c
 80019a4:	bf800000 	.word	0xbf800000
 80019a8:	20000294 	.word	0x20000294
 80019ac:	408f4000 	.word	0x408f4000
 80019b0:	2000025c 	.word	0x2000025c

080019b4 <init_hardware>:

Potentiometer_Cal pot_cal_info;
Stepper_Pinfo stepper_pinfo[2]; // information about stepper motor pin outs


void init_hardware() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

    initAdcs(&hspi1, adc_pins);   // initialize adcs
 80019b8:	4939      	ldr	r1, [pc, #228]	; (8001aa0 <init_hardware+0xec>)
 80019ba:	483a      	ldr	r0, [pc, #232]	; (8001aa4 <init_hardware+0xf0>)
 80019bc:	f000 f888 	bl	8001ad0 <initAdcs>

    // init stepper motor pins
    stepper_pinfo[0].motor_ports[0] = mtr0_inA0_GPIO_Port;
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <init_hardware+0xf4>)
 80019c2:	4a3a      	ldr	r2, [pc, #232]	; (8001aac <init_hardware+0xf8>)
 80019c4:	601a      	str	r2, [r3, #0]
    stepper_pinfo[0].motor_ports[1] = mtr0_inA1_GPIO_Port;
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <init_hardware+0xf4>)
 80019c8:	4a38      	ldr	r2, [pc, #224]	; (8001aac <init_hardware+0xf8>)
 80019ca:	605a      	str	r2, [r3, #4]
    stepper_pinfo[0].motor_ports[2] = mtr0_inB0_GPIO_Port;
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <init_hardware+0xf4>)
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <init_hardware+0xf8>)
 80019d0:	609a      	str	r2, [r3, #8]
    stepper_pinfo[0].motor_ports[3] = mtr0_inB1_GPIO_Port;
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <init_hardware+0xf4>)
 80019d4:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <init_hardware+0xfc>)
 80019d6:	60da      	str	r2, [r3, #12]
    stepper_pinfo[0].motor_pins[0] = mtr0_inA0_Pin;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <init_hardware+0xf4>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	821a      	strh	r2, [r3, #16]
    stepper_pinfo[0].motor_pins[1] = mtr0_inA1_Pin;
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <init_hardware+0xf4>)
 80019e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e6:	825a      	strh	r2, [r3, #18]
    stepper_pinfo[0].motor_pins[2] = mtr0_inB0_Pin;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <init_hardware+0xf4>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	829a      	strh	r2, [r3, #20]
    stepper_pinfo[0].motor_pins[3] = mtr0_inB1_Pin;
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <init_hardware+0xf4>)
 80019f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f6:	82da      	strh	r2, [r3, #22]
    stepper_pinfo[0].pwm_channel[0] = TIM_CHANNEL_1;
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <init_hardware+0xf4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    stepper_pinfo[0].pwm_channel[1] = TIM_CHANNEL_2;
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <init_hardware+0xf4>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	61da      	str	r2, [r3, #28]

    stepper_pinfo[1].motor_ports[0] = mtr1_inA0_GPIO_Port;
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <init_hardware+0xf4>)
 8001a06:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <init_hardware+0x100>)
 8001a08:	621a      	str	r2, [r3, #32]
    stepper_pinfo[1].motor_ports[1] = mtr1_inA1_GPIO_Port;
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <init_hardware+0xf4>)
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <init_hardware+0x100>)
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    stepper_pinfo[1].motor_ports[2] = mtr1_inB0_GPIO_Port;
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <init_hardware+0xf4>)
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <init_hardware+0x100>)
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    stepper_pinfo[1].motor_ports[3] = mtr1_inB1_GPIO_Port;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <init_hardware+0xf4>)
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <init_hardware+0x100>)
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    stepper_pinfo[1].motor_pins[0] = mtr1_inA0_Pin;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <init_hardware+0xf4>)
 8001a1e:	2204      	movs	r2, #4
 8001a20:	861a      	strh	r2, [r3, #48]	; 0x30
    stepper_pinfo[1].motor_pins[1] = mtr1_inA1_Pin;
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <init_hardware+0xf4>)
 8001a24:	2208      	movs	r2, #8
 8001a26:	865a      	strh	r2, [r3, #50]	; 0x32
    stepper_pinfo[1].motor_pins[2] = mtr1_inB0_Pin;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <init_hardware+0xf4>)
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	869a      	strh	r2, [r3, #52]	; 0x34
    stepper_pinfo[1].motor_pins[3] = mtr1_inB1_Pin;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <init_hardware+0xf4>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	86da      	strh	r2, [r3, #54]	; 0x36
    stepper_pinfo[1].pwm_channel[0] = TIM_CHANNEL_1;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <init_hardware+0xf4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38
    stepper_pinfo[1].pwm_channel[1] = TIM_CHANNEL_2;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <init_hardware+0xf4>)
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    tc_pins[0].MAX31855_CS_PORT = tc0_cs_GPIO_Port;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <init_hardware+0x104>)
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <init_hardware+0x108>)
 8001a44:	601a      	str	r2, [r3, #0]
    tc_pins[1].MAX31855_CS_PORT = tc1_cs_GPIO_Port;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <init_hardware+0x104>)
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <init_hardware+0x108>)
 8001a4a:	609a      	str	r2, [r3, #8]
    tc_pins[2].MAX31855_CS_PORT = tc2_cs_GPIO_Port;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <init_hardware+0x104>)
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <init_hardware+0x108>)
 8001a50:	611a      	str	r2, [r3, #16]
    tc_pins[3].MAX31855_CS_PORT = tc3_cs_GPIO_Port;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <init_hardware+0x104>)
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <init_hardware+0x108>)
 8001a56:	619a      	str	r2, [r3, #24]
    tc_pins[4].MAX31855_CS_PORT = tc4_cs_GPIO_Port;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <init_hardware+0x104>)
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <init_hardware+0x10c>)
 8001a5c:	621a      	str	r2, [r3, #32]
    tc_pins[0].MAX31855_CS_ADDR = tc0_cs_Pin;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <init_hardware+0x104>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	809a      	strh	r2, [r3, #4]
    tc_pins[1].MAX31855_CS_ADDR = tc1_cs_Pin;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <init_hardware+0x104>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6c:	819a      	strh	r2, [r3, #12]
    tc_pins[2].MAX31855_CS_ADDR = tc2_cs_Pin;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <init_hardware+0x104>)
 8001a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a74:	829a      	strh	r2, [r3, #20]
    tc_pins[3].MAX31855_CS_ADDR = tc3_cs_Pin;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <init_hardware+0x104>)
 8001a78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a7c:	839a      	strh	r2, [r3, #28]
    tc_pins[4].MAX31855_CS_ADDR = tc4_cs_Pin;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <init_hardware+0x104>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a84:	849a      	strh	r2, [r3, #36]	; 0x24

    // Potentiometer Calibrations
    pot_cal_info.slope = (EPOT_DMAX - EPOT_DMIN)*(EPOT_RES_POT+2*EPOT_RES_LEAD)
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <init_hardware+0x110>)
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <init_hardware+0x114>)
 8001a8a:	601a      	str	r2, [r3, #0]
                            /(EPOT_MAX_COUNTS*(EPOT_RES_POT - 2.0*EPOT_RES_POT_MIN));
    pot_cal_info.offset = ((EPOT_MAX_COUNTS*(EPOT_RES_POT_MIN + EPOT_RES_LEAD))
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <init_hardware+0x110>)
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <init_hardware+0x118>)
 8001a90:	605a      	str	r2, [r3, #4]

    // Reamining time in current state
    //state_rem_duration = 0;

    // IWDG status LED
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // turns off when something has gone wrong
 8001a92:	2201      	movs	r2, #1
 8001a94:	2108      	movs	r1, #8
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <init_hardware+0xf8>)
 8001a98:	f008 fe58 	bl	800a74c <HAL_GPIO_WritePin>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000780 	.word	0x20000780
 8001aa4:	20001f8c 	.word	0x20001f8c
 8001aa8:	20000698 	.word	0x20000698
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	200006f8 	.word	0x200006f8
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	200006f0 	.word	0x200006f0
 8001ac8:	3f627bee 	.word	0x3f627bee
 8001acc:	40f896df 	.word	0x40f896df

08001ad0 <initAdcs>:

// private helpers
static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state);

void initAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo *adc_pins) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    adc_pins[0].MAX11131_CS_PORT       = adc0_cs_GPIO_Port;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4a3c      	ldr	r2, [pc, #240]	; (8001bd0 <initAdcs+0x100>)
 8001ade:	601a      	str	r2, [r3, #0]
    adc_pins[0].MAX11131_EOC_PORT      = adc0_eoc_GPIO_Port;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <initAdcs+0x100>)
 8001ae4:	605a      	str	r2, [r3, #4]
    adc_pins[0].MAX11131_CNVST_PORT    = adc0_cnvst_GPIO_Port;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <initAdcs+0x104>)
 8001aea:	609a      	str	r2, [r3, #8]
    adc_pins[0].MAX11131_CS_ADDR       = adc0_cs_Pin;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2208      	movs	r2, #8
 8001af0:	819a      	strh	r2, [r3, #12]
    adc_pins[0].MAX11131_EOC_ADDR      = adc0_eoc_Pin;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	81da      	strh	r2, [r3, #14]
    adc_pins[0].MAX11131_CNVST_ADDR    = adc0_cnvst_Pin;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2210      	movs	r2, #16
 8001afc:	821a      	strh	r2, [r3, #16]
    adc_pins[1].MAX11131_CS_PORT       = adc1_cs_GPIO_Port;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	3324      	adds	r3, #36	; 0x24
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <initAdcs+0x108>)
 8001b04:	601a      	str	r2, [r3, #0]
    adc_pins[1].MAX11131_EOC_PORT      = adc1_eoc_GPIO_Port;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3324      	adds	r3, #36	; 0x24
 8001b0a:	4a32      	ldr	r2, [pc, #200]	; (8001bd4 <initAdcs+0x104>)
 8001b0c:	605a      	str	r2, [r3, #4]
    adc_pins[1].MAX11131_CNVST_PORT    = adc1_cnvst_GPIO_Port;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3324      	adds	r3, #36	; 0x24
 8001b12:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <initAdcs+0x108>)
 8001b14:	609a      	str	r2, [r3, #8]
    adc_pins[1].MAX11131_CS_ADDR       = adc1_cs_Pin;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3324      	adds	r3, #36	; 0x24
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	819a      	strh	r2, [r3, #12]
    adc_pins[1].MAX11131_EOC_ADDR      = adc1_eoc_Pin;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	3324      	adds	r3, #36	; 0x24
 8001b22:	2220      	movs	r2, #32
 8001b24:	81da      	strh	r2, [r3, #14]
    adc_pins[1].MAX11131_CNVST_ADDR    = adc1_cnvst_Pin;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3324      	adds	r3, #36	; 0x24
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	821a      	strh	r2, [r3, #16]
    adc_pins[2].MAX11131_CS_PORT       = adc2_cs_GPIO_Port;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3348      	adds	r3, #72	; 0x48
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <initAdcs+0x108>)
 8001b34:	601a      	str	r2, [r3, #0]
    adc_pins[2].MAX11131_EOC_PORT      = adc2_eoc_GPIO_Port;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3348      	adds	r3, #72	; 0x48
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <initAdcs+0x10c>)
 8001b3c:	605a      	str	r2, [r3, #4]
    adc_pins[2].MAX11131_CNVST_PORT    = adc2_cnvst_GPIO_Port;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3348      	adds	r3, #72	; 0x48
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <initAdcs+0x10c>)
 8001b44:	609a      	str	r2, [r3, #8]
    adc_pins[2].MAX11131_CS_ADDR       = adc2_cs_Pin;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3348      	adds	r3, #72	; 0x48
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	819a      	strh	r2, [r3, #12]
    adc_pins[2].MAX11131_EOC_ADDR      = adc2_eoc_Pin;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3348      	adds	r3, #72	; 0x48
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	81da      	strh	r2, [r3, #14]
    adc_pins[2].MAX11131_CNVST_ADDR    = adc2_cnvst_Pin;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3348      	adds	r3, #72	; 0x48
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	821a      	strh	r2, [r3, #16]
    init_adc(hspix, &adc_pins[0]);
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f006 f867 	bl	8007c36 <init_adc>
    init_adc(hspix, &adc_pins[1]);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3324      	adds	r3, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f006 f861 	bl	8007c36 <init_adc>
    init_adc(hspix, &adc_pins[2]);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	3348      	adds	r3, #72	; 0x48
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f006 f85b 	bl	8007c36 <init_adc>

    // Initialize ADC offset and slopes, defaults to 0 and 1 for offset and slopes
    for (uint8_t i = 0; i < 3; ++i) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e01c      	b.n	8001bc0 <initAdcs+0xf0>
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	81bb      	strh	r3, [r7, #12]
 8001b8a:	e013      	b.n	8001bb4 <initAdcs+0xe4>
    		adc_calibrations[i].offset[ch] 	= 0;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	4913      	ldr	r1, [pc, #76]	; (8001be0 <initAdcs+0x110>)
 8001b92:	0152      	lsls	r2, r2, #5
 8001b94:	4413      	add	r3, r2
 8001b96:	3310      	adds	r3, #16
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    		adc_calibrations[i].slope[ch] 	= 1;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	89bb      	ldrh	r3, [r7, #12]
 8001ba2:	490f      	ldr	r1, [pc, #60]	; (8001be0 <initAdcs+0x110>)
 8001ba4:	0152      	lsls	r2, r2, #5
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001bae:	89bb      	ldrh	r3, [r7, #12]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	81bb      	strh	r3, [r7, #12]
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d9e8      	bls.n	8001b8c <initAdcs+0xbc>
    for (uint8_t i = 0; i < 3; ++i) {
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d9df      	bls.n	8001b86 <initAdcs+0xb6>
    	}
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	200003b4 	.word	0x200003b4

08001be4 <isMotorAtPos>:
    HAL_TIM_Base_Init(htimx);

    HAL_TIM_Base_Start_IT(htimx);
}

uint8_t isMotorAtPos(float target, uint8_t tank_num) {
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	70fb      	strb	r3, [r7, #3]
    return fabs(target-curPos[tank_num]) < posErrorMargin;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <isMotorAtPos+0x48>)
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <isMotorAtPos+0x4c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	bf4c      	ite	mi
 8001c1a:	2301      	movmi	r3, #1
 8001c1c:	2300      	movpl	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	200003a8 	.word	0x200003a8
 8001c30:	20000014 	.word	0x20000014

08001c34 <normalizeMotorStep>:

static inline int8_t normalizeMotorStep(int8_t step_num) {
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
    if(step_num == 4) {
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d101      	bne.n	8001c4a <normalizeMotorStep+0x16>
        return 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e008      	b.n	8001c5c <normalizeMotorStep+0x28>
    } else if (step_num == -1) {
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c52:	d101      	bne.n	8001c58 <normalizeMotorStep+0x24>
        return 3;// reset step stage if reached
 8001c54:	2303      	movs	r3, #3
 8001c56:	e001      	b.n	8001c5c <normalizeMotorStep+0x28>
    }
    return step_num;
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <handleMotorStepping>:


void handleMotorStepping(uint8_t motor_num) {
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    // Stepper motor linear ramp variables
    static int8_t step_stage[NUM_TANKS] = { 0, 0 }; // polarity of stepper motor coil
    static int8_t prevDir[NUM_TANKS] = {0};

    if (prevDir[motor_num]==0) {
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4a85      	ldr	r2, [pc, #532]	; (8001e8c <handleMotorStepping+0x224>)
 8001c76:	56d3      	ldrsb	r3, [r2, r3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d106      	bne.n	8001c8a <handleMotorStepping+0x22>
        prevDir[motor_num] = curDir[motor_num];
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4983      	ldr	r1, [pc, #524]	; (8001e90 <handleMotorStepping+0x228>)
 8001c82:	5c8a      	ldrb	r2, [r1, r2]
 8001c84:	b251      	sxtb	r1, r2
 8001c86:	4a81      	ldr	r2, [pc, #516]	; (8001e8c <handleMotorStepping+0x224>)
 8001c88:	54d1      	strb	r1, [r2, r3]
    }

    // Step the motor if in running or override
    if ((STATE==Hotfire || STATE==Startup || STATE==Post || STATE==Abort
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <handleMotorStepping+0x22c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d012      	beq.n	8001cb8 <handleMotorStepping+0x50>
 8001c92:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <handleMotorStepping+0x22c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d00e      	beq.n	8001cb8 <handleMotorStepping+0x50>
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <handleMotorStepping+0x22c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d00a      	beq.n	8001cb8 <handleMotorStepping+0x50>
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <handleMotorStepping+0x22c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d006      	beq.n	8001cb8 <handleMotorStepping+0x50>
            || manual_stepper_pos_override[motor_num])
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <handleMotorStepping+0x230>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80ab 	beq.w	8001e0e <handleMotorStepping+0x1a6>
            && !isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4a78      	ldr	r2, [pc, #480]	; (8001e9c <handleMotorStepping+0x234>)
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f7ff ff8a 	bl	8001be4 <isMotorAtPos>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 809b 	bne.w	8001e0e <handleMotorStepping+0x1a6>

        if (prevDir[motor_num] != curDir[motor_num]) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4a6c      	ldr	r2, [pc, #432]	; (8001e8c <handleMotorStepping+0x224>)
 8001cdc:	56d2      	ldrsb	r2, [r2, r3]
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	496b      	ldr	r1, [pc, #428]	; (8001e90 <handleMotorStepping+0x228>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d01d      	beq.n	8001d26 <handleMotorStepping+0xbe>
            if (prevDir[motor_num] == -1) {
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <handleMotorStepping+0x224>)
 8001cee:	56d3      	ldrsb	r3, [r2, r3]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d109      	bne.n	8001d0a <handleMotorStepping+0xa2>
                ++step_stage[motor_num];
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a69      	ldr	r2, [pc, #420]	; (8001ea0 <handleMotorStepping+0x238>)
 8001cfa:	56d2      	ldrsb	r2, [r2, r3]
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	3201      	adds	r2, #1
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	b251      	sxtb	r1, r2
 8001d04:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d06:	54d1      	strb	r1, [r2, r3]
 8001d08:	e00d      	b.n	8001d26 <handleMotorStepping+0xbe>
            } else if (prevDir[motor_num] == 1) {
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a5f      	ldr	r2, [pc, #380]	; (8001e8c <handleMotorStepping+0x224>)
 8001d0e:	56d3      	ldrsb	r3, [r2, r3]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <handleMotorStepping+0xbe>
                --step_stage[motor_num];
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d18:	56d2      	ldrsb	r2, [r2, r3]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	b251      	sxtb	r1, r2
 8001d22:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d24:	54d1      	strb	r1, [r2, r3]
            }
        }

        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d2a:	56d3      	ldrsb	r3, [r2, r3]
 8001d2c:	79fc      	ldrb	r4, [r7, #7]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff80 	bl	8001c34 <normalizeMotorStep>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d3a:	551a      	strb	r2, [r3, r4]

        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a59      	ldr	r2, [pc, #356]	; (8001ea4 <handleMotorStepping+0x23c>)
 8001d40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <handleMotorStepping+0x228>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	b25a      	sxtb	r2, r3
                           curDir[motor_num], step_stage[motor_num]);
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4954      	ldr	r1, [pc, #336]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d50:	56cb      	ldrsb	r3, [r1, r3]
        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	79f9      	ldrb	r1, [r7, #7]
 8001d56:	f000 f8b3 	bl	8001ec0 <turn_stepper_motor>

        step_stage[motor_num] += curDir[motor_num];
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	; (8001e90 <handleMotorStepping+0x228>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	b259      	sxtb	r1, r3
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d66:	56d3      	ldrsb	r3, [r2, r3]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	b2cb      	uxtb	r3, r1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	b251      	sxtb	r1, r2
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d76:	54d1      	strb	r1, [r2, r3]
        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d7c:	56d3      	ldrsb	r3, [r2, r3]
 8001d7e:	79fc      	ldrb	r4, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff57 	bl	8001c34 <normalizeMotorStep>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <handleMotorStepping+0x238>)
 8001d8c:	551a      	strb	r2, [r3, r4]
        prevDir[motor_num] = curDir[motor_num];
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	493f      	ldr	r1, [pc, #252]	; (8001e90 <handleMotorStepping+0x228>)
 8001d94:	5c8a      	ldrb	r2, [r1, r2]
 8001d96:	b251      	sxtb	r1, r2
 8001d98:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <handleMotorStepping+0x224>)
 8001d9a:	54d1      	strb	r1, [r2, r3]
//                changeStepperPeriod(&htim6, &stepper);
//                stepper.acc_step = 0;
//            } else {
//                ++stepper.acc_step;
//            } // ensures SPSPS is followed properly
        curPos[motor_num] = curPos[motor_num] + degPerStep*curDir[motor_num];
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <handleMotorStepping+0x240>)
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <handleMotorStepping+0x228>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001eac <handleMotorStepping+0x244>
 8001dbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	4a38      	ldr	r2, [pc, #224]	; (8001ea8 <handleMotorStepping+0x240>)
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	edc3 7a00 	vstr	s15, [r3]

        /* Update telem packet motor info */
        mtr_pos[motor_num] = curPos[motor_num]; // for motor 1
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4934      	ldr	r1, [pc, #208]	; (8001ea8 <handleMotorStepping+0x240>)
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	440a      	add	r2, r1
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4934      	ldr	r1, [pc, #208]	; (8001eb0 <handleMotorStepping+0x248>)
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	601a      	str	r2, [r3, #0]
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <handleMotorStepping+0x24c>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001df0:	3301      	adds	r3, #1
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001df2:	b29a      	uxth	r2, r3
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4926      	ldr	r1, [pc, #152]	; (8001e90 <handleMotorStepping+0x228>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	b25b      	sxtb	r3, r3
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	fb12 f303 	smulbb	r3, r2, r3
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	b211      	sxth	r1, r2
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <handleMotorStepping+0x250>)
 8001e0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <handleMotorStepping+0x234>)
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	f7ff fedf 	bl	8001be4 <isMotorAtPos>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02a      	beq.n	8001e82 <handleMotorStepping+0x21a>
        // auto disable override once position is reached
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <handleMotorStepping+0x23c>)
 8001e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4921      	ldr	r1, [pc, #132]	; (8001ebc <handleMotorStepping+0x254>)
 8001e38:	015b      	lsls	r3, r3, #5
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f00a fa62 	bl	800c30c <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[0]);
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <handleMotorStepping+0x23c>)
 8001e4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	491a      	ldr	r1, [pc, #104]	; (8001ebc <handleMotorStepping+0x254>)
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	440b      	add	r3, r1
 8001e58:	331c      	adds	r3, #28
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f00a fa54 	bl	800c30c <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[1]);
        if (manual_stepper_pos_override[motor_num]) {
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <handleMotorStepping+0x230>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <handleMotorStepping+0x210>
            manual_stepper_pos_override[motor_num] = 0;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <handleMotorStepping+0x230>)
 8001e74:	2100      	movs	r1, #0
 8001e76:	54d1      	strb	r1, [r2, r3]
        }
        mtr_vel[motor_num] = 0;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <handleMotorStepping+0x250>)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // reset stepper linear ramping variables
        // stepper.num_steps = stepper.curr_step = 0;
    }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000474 	.word	0x20000474
 8001e90:	200003b0 	.word	0x200003b0
 8001e94:	200002ac 	.word	0x200002ac
 8001e98:	2000039c 	.word	0x2000039c
 8001e9c:	200003a0 	.word	0x200003a0
 8001ea0:	20000478 	.word	0x20000478
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	200003a8 	.word	0x200003a8
 8001eac:	3eb33333 	.word	0x3eb33333
 8001eb0:	20000368 	.word	0x20000368
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000370 	.word	0x20000370
 8001ebc:	20000698 	.word	0x20000698

08001ec0 <turn_stepper_motor>:

void turn_stepper_motor(TIM_HandleTypeDef *htimx, uint8_t motor_num, int8_t direction, uint8_t step_stage) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	70fb      	strb	r3, [r7, #3]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70bb      	strb	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
    // A-
    // B-
    // For VNH7070AS chip, INA = clockwise, INB = counterclockwise (actually not really)
    // reset all gpio logic before changing step
    // Note: this only works for motor 0 currently 1 is CW, -1 is CCW
	GPIO_TypeDef * mtrx_portA0 = stepper_pinfo[motor_num].motor_ports[0];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	4a64      	ldr	r2, [pc, #400]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	4413      	add	r3, r2
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * mtrx_portA1 = stepper_pinfo[motor_num].motor_ports[1];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	4a61      	ldr	r2, [pc, #388]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001eea:	015b      	lsls	r3, r3, #5
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	623b      	str	r3, [r7, #32]
	GPIO_TypeDef * mtrx_portB0 = stepper_pinfo[motor_num].motor_ports[2];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001ef8:	015b      	lsls	r3, r3, #5
 8001efa:	4413      	add	r3, r2
 8001efc:	3308      	adds	r3, #8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61fb      	str	r3, [r7, #28]
	GPIO_TypeDef * mtrx_portB1 = stepper_pinfo[motor_num].motor_ports[3];
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f06:	015b      	lsls	r3, r3, #5
 8001f08:	4413      	add	r3, r2
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
	uint16_t mtrx_pinA0 = stepper_pinfo[motor_num].motor_pins[0];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	4a57      	ldr	r2, [pc, #348]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	4413      	add	r3, r2
 8001f18:	3310      	adds	r3, #16
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	82fb      	strh	r3, [r7, #22]
	uint16_t mtrx_pinA1 = stepper_pinfo[motor_num].motor_pins[1];
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	4a53      	ldr	r2, [pc, #332]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	4413      	add	r3, r2
 8001f26:	3312      	adds	r3, #18
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	82bb      	strh	r3, [r7, #20]
	uint16_t mtrx_pinB0 = stepper_pinfo[motor_num].motor_pins[2];
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	4a50      	ldr	r2, [pc, #320]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	4413      	add	r3, r2
 8001f34:	3314      	adds	r3, #20
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	827b      	strh	r3, [r7, #18]
	uint16_t mtrx_pinB1 = stepper_pinfo[motor_num].motor_pins[3];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f3e:	015b      	lsls	r3, r3, #5
 8001f40:	4413      	add	r3, r2
 8001f42:	3316      	adds	r3, #22
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	823b      	strh	r3, [r7, #16]
	uint32_t pwm_channela = stepper_pinfo[motor_num].pwm_channel[0];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	4a49      	ldr	r2, [pc, #292]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f4c:	015b      	lsls	r3, r3, #5
 8001f4e:	4413      	add	r3, r2
 8001f50:	3318      	adds	r3, #24
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_channelb = stepper_pinfo[motor_num].pwm_channel[1];
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <turn_stepper_motor+0x1b0>)
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	4413      	add	r3, r2
 8001f5e:	331c      	adds	r3, #28
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60bb      	str	r3, [r7, #8]

    // reset all motor logic inputs low and speed to 0
    HAL_TIM_PWM_Stop(htimx, pwm_channela);
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f00a f9d0 	bl	800c30c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htimx, pwm_channelb);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f00a f9cc 	bl	800c30c <HAL_TIM_PWM_Stop>
    // stepper motor channels
    switch(step_stage) { // TODO figure out steps tmrw
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d86e      	bhi.n	8002058 <turn_stepper_motor+0x198>
 8001f7a:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <turn_stepper_motor+0xc0>)
 8001f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001fc3 	.word	0x08001fc3
 8001f88:	08001ff5 	.word	0x08001ff5
 8001f8c:	08002027 	.word	0x08002027
        case 0: {   // A0 high B0 low
        	HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001f90:	8abb      	ldrh	r3, [r7, #20]
 8001f92:	2200      	movs	r2, #0
 8001f94:	4619      	mov	r1, r3
 8001f96:	6a38      	ldr	r0, [r7, #32]
 8001f98:	f008 fbd8 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001f9c:	8a3b      	ldrh	r3, [r7, #16]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	69b8      	ldr	r0, [r7, #24]
 8001fa4:	f008 fbd2 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001fa8:	8afb      	ldrh	r3, [r7, #22]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb0:	f008 fbcc 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001fb4:	8a7b      	ldrh	r3, [r7, #18]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	69f8      	ldr	r0, [r7, #28]
 8001fbc:	f008 fbc6 	bl	800a74c <HAL_GPIO_WritePin>
            break;
 8001fc0:	e04a      	b.n	8002058 <turn_stepper_motor+0x198>
        } case 1: {
        	HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001fc2:	8a3b      	ldrh	r3, [r7, #16]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	69b8      	ldr	r0, [r7, #24]
 8001fca:	f008 fbbf 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001fce:	8afb      	ldrh	r3, [r7, #22]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd6:	f008 fbb9 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001fda:	8a7b      	ldrh	r3, [r7, #18]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	69f8      	ldr	r0, [r7, #28]
 8001fe2:	f008 fbb3 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001fe6:	8abb      	ldrh	r3, [r7, #20]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4619      	mov	r1, r3
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f008 fbad 	bl	800a74c <HAL_GPIO_WritePin>
            break;
 8001ff2:	e031      	b.n	8002058 <turn_stepper_motor+0x198>
        } case 2: {
        	HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001ff4:	8afb      	ldrh	r3, [r7, #22]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ffc:	f008 fba6 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8002000:	8a7b      	ldrh	r3, [r7, #18]
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	69f8      	ldr	r0, [r7, #28]
 8002008:	f008 fba0 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 800200c:	8abb      	ldrh	r3, [r7, #20]
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	6a38      	ldr	r0, [r7, #32]
 8002014:	f008 fb9a 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8002018:	8a3b      	ldrh	r3, [r7, #16]
 800201a:	2201      	movs	r2, #1
 800201c:	4619      	mov	r1, r3
 800201e:	69b8      	ldr	r0, [r7, #24]
 8002020:	f008 fb94 	bl	800a74c <HAL_GPIO_WritePin>
            break;  // swap which input is high/low for for negative polarity
 8002024:	e018      	b.n	8002058 <turn_stepper_motor+0x198>
        } case 3: {
        	HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8002026:	8a7b      	ldrh	r3, [r7, #18]
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	69f8      	ldr	r0, [r7, #28]
 800202e:	f008 fb8d 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8002032:	8abb      	ldrh	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f008 fb87 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	2201      	movs	r2, #1
 8002042:	4619      	mov	r1, r3
 8002044:	69b8      	ldr	r0, [r7, #24]
 8002046:	f008 fb81 	bl	800a74c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 800204a:	8afb      	ldrh	r3, [r7, #22]
 800204c:	2201      	movs	r2, #1
 800204e:	4619      	mov	r1, r3
 8002050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002052:	f008 fb7b 	bl	800a74c <HAL_GPIO_WritePin>
            break;
 8002056:	bf00      	nop
        }
    }
    HAL_TIM_PWM_Start(htimx, pwm_channela); // start pwm on channels 1 and 2 for stepper
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f00a f88e 	bl	800c17c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htimx, pwm_channelb);
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f00a f88a 	bl	800c17c <HAL_TIM_PWM_Start>
}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000698 	.word	0x20000698

08002074 <moveMotorToPos>:

void moveMotorToPos(float deg, uint8_t motor_num) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	ed87 0a01 	vstr	s0, [r7, #4]
 800207e:	4603      	mov	r3, r0
 8002080:	70fb      	strb	r3, [r7, #3]
	manual_stepper_pos_override[motor_num] = 1;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <moveMotorToPos+0x6c>)
 8002086:	2101      	movs	r1, #1
 8002088:	54d1      	strb	r1, [r2, r3]
	targetPos[motor_num] = deg; // position given in deg
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <moveMotorToPos+0x70>)
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
	curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <moveMotorToPos+0x74>)
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <moveMotorToPos+0x70>)
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	d501      	bpl.n	80020bc <moveMotorToPos+0x48>
 80020b8:	2101      	movs	r1, #1
 80020ba:	e001      	b.n	80020c0 <moveMotorToPos+0x4c>
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <moveMotorToPos+0x78>)
 80020c4:	54d1      	strb	r1, [r2, r3]
	mtr_set[motor_num] = deg; // save new motor position setpoint
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <moveMotorToPos+0x7c>)
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000039c 	.word	0x2000039c
 80020e4:	200003a0 	.word	0x200003a0
 80020e8:	200003a8 	.word	0x200003a8
 80020ec:	200003b0 	.word	0x200003b0
 80020f0:	2000038c 	.word	0x2000038c

080020f4 <readAdcs>:

void readAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo* adc_pins, uint16_t (*adc_counts)[16]) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e03d      	b.n	8002182 <readAdcs+0x8e>
        read_adc(hspix, &adc_pins[i], adc_counts[i]);
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1899      	adds	r1, r3, r2
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	461a      	mov	r2, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f005 fdd4 	bl	8007cce <read_adc>
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8002126:	2300      	movs	r3, #0
 8002128:	74fb      	strb	r3, [r7, #19]
 800212a:	e024      	b.n	8002176 <readAdcs+0x82>
			adc_counts[i][ch] = adc_counts[i][ch]*adc_calibrations[i].slope[ch] + adc_calibrations[i].offset[ch];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	7cfa      	ldrb	r2, [r7, #19]
 8002136:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	4815      	ldr	r0, [pc, #84]	; (8002194 <readAdcs+0xa0>)
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	0149      	lsls	r1, r1, #5
 8002142:	440b      	add	r3, r1
 8002144:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002148:	fb12 f303 	smulbb	r3, r2, r3
 800214c:	b298      	uxth	r0, r3
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	4910      	ldr	r1, [pc, #64]	; (8002194 <readAdcs+0xa0>)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	0152      	lsls	r2, r2, #5
 8002156:	4413      	add	r3, r2
 8002158:	3310      	adds	r3, #16
 800215a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	015b      	lsls	r3, r3, #5
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7cfa      	ldrb	r2, [r7, #19]
 8002168:	4401      	add	r1, r0
 800216a:	b289      	uxth	r1, r1
 800216c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	3301      	adds	r3, #1
 8002174:	74fb      	strb	r3, [r7, #19]
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d9d7      	bls.n	800212c <readAdcs+0x38>
    for (int i = 0; i < 3; ++i) {
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b02      	cmp	r3, #2
 8002186:	ddbe      	ble.n	8002106 <readAdcs+0x12>
        } // apply adc offset and slope to raw counts
    }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200003b4 	.word	0x200003b4

08002198 <setValve>:

void setValve(uint32_t vlv_num, uint8_t state) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
    GPIO_PinState gpio_state = (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75fb      	strb	r3, [r7, #23]
    uint32_t vlv_bit = 1<<vlv_num;
 80021b2:	2201      	movs	r2, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	613b      	str	r3, [r7, #16]
    uint32_t vlv_value = state<<vlv_num;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	60fb      	str	r3, [r7, #12]
	setValveHelper(vlv_num, gpio_state);
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f814 	bl	80021f8 <setValveHelper>

    // set valves states variable
    valve_states &= ~vlv_bit;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <setValve+0x5c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4013      	ands	r3, r2
 80021da:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <setValve+0x5c>)
 80021dc:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <setValve+0x5c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <setValve+0x5c>)
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200002b8 	.word	0x200002b8

080021f8 <setValveHelper>:

static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d856      	bhi.n	80022b8 <setValveHelper+0xc0>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <setValveHelper+0x18>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002235 	.word	0x08002235
 8002214:	08002243 	.word	0x08002243
 8002218:	08002253 	.word	0x08002253
 800221c:	08002263 	.word	0x08002263
 8002220:	08002273 	.word	0x08002273
 8002224:	08002281 	.word	0x08002281
 8002228:	0800228f 	.word	0x0800228f
 800222c:	0800229d 	.word	0x0800229d
 8002230:	080022ab 	.word	0x080022ab
	 switch(vlv_num) {
	    case 0: {
	        HAL_GPIO_WritePin(en_vlv0_GPIO_Port, en_vlv0_Pin, gpio_state);
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	461a      	mov	r2, r3
 8002238:	2102      	movs	r1, #2
 800223a:	4821      	ldr	r0, [pc, #132]	; (80022c0 <setValveHelper+0xc8>)
 800223c:	f008 fa86 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 8002240:	e03a      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 1: {
	        HAL_GPIO_WritePin(en_vlv1_GPIO_Port, en_vlv1_Pin, gpio_state);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800224a:	481e      	ldr	r0, [pc, #120]	; (80022c4 <setValveHelper+0xcc>)
 800224c:	f008 fa7e 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 8002250:	e032      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 2: {
	        HAL_GPIO_WritePin(en_vlv2_GPIO_Port, en_vlv2_Pin, gpio_state);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800225a:	481a      	ldr	r0, [pc, #104]	; (80022c4 <setValveHelper+0xcc>)
 800225c:	f008 fa76 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 8002260:	e02a      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 3: {
	        HAL_GPIO_WritePin(en_vlv3_GPIO_Port, en_vlv3_Pin, gpio_state);
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	4816      	ldr	r0, [pc, #88]	; (80022c4 <setValveHelper+0xcc>)
 800226c:	f008 fa6e 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 8002270:	e022      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 4: {
	        HAL_GPIO_WritePin(en_vlv4_GPIO_Port, en_vlv4_Pin, gpio_state);
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	461a      	mov	r2, r3
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	4811      	ldr	r0, [pc, #68]	; (80022c0 <setValveHelper+0xc8>)
 800227a:	f008 fa67 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 800227e:	e01b      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 5: {
	        HAL_GPIO_WritePin(en_vlv5_GPIO_Port, en_vlv5_Pin, gpio_state);
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	461a      	mov	r2, r3
 8002284:	2120      	movs	r1, #32
 8002286:	480e      	ldr	r0, [pc, #56]	; (80022c0 <setValveHelper+0xc8>)
 8002288:	f008 fa60 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 800228c:	e014      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 6: {
	        HAL_GPIO_WritePin(en_vlv6_GPIO_Port, en_vlv6_Pin, gpio_state);
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	461a      	mov	r2, r3
 8002292:	2110      	movs	r1, #16
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <setValveHelper+0xc8>)
 8002296:	f008 fa59 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 800229a:	e00d      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 7: {
	        HAL_GPIO_WritePin(en_vlv7_GPIO_Port, en_vlv7_Pin, gpio_state);
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	461a      	mov	r2, r3
 80022a0:	2108      	movs	r1, #8
 80022a2:	4807      	ldr	r0, [pc, #28]	; (80022c0 <setValveHelper+0xc8>)
 80022a4:	f008 fa52 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 80022a8:	e006      	b.n	80022b8 <setValveHelper+0xc0>
	    } case 8: {
	        HAL_GPIO_WritePin(en_vlv8_GPIO_Port, en_vlv8_Pin, gpio_state);
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	461a      	mov	r2, r3
 80022ae:	2104      	movs	r1, #4
 80022b0:	4803      	ldr	r0, [pc, #12]	; (80022c0 <setValveHelper+0xc8>)
 80022b2:	f008 fa4b 	bl	800a74c <HAL_GPIO_WritePin>
	        break;
 80022b6:	bf00      	nop
	    }
	}
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40020800 	.word	0x40020800

080022c8 <readThermocouples>:

void readThermocouples(SPI_HandleTypeDef* hspix, MAX31855_Pinfo *tc_pins,
                                                            uint8_t tc_num) {
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < tc_num; ++i) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
 80022da:	e012      	b.n	8002302 <readThermocouples+0x3a>
    	tc[i] = read_tc(hspix, &tc_pins[i]);
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4413      	add	r3, r2
 80022e4:	7dfc      	ldrb	r4, [r7, #23]
 80022e6:	4619      	mov	r1, r3
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f005 fe81 	bl	8007ff0 <read_tc>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <readThermocouples+0x4c>)
 80022f4:	00a3      	lsls	r3, r4, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < tc_num; ++i) {
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	3301      	adds	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
 8002302:	7dfa      	ldrb	r2, [r7, #23]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3e8      	bcc.n	80022dc <readThermocouples+0x14>
    }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	20000354 	.word	0x20000354

08002318 <updatePeripherals>:

void updatePeripherals(uint16_t (*adc_counts)[16]) {
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    // Programmer defined, transfer adc readings to correct memory arrays based on schematic

    /* Load vlv voltages */
    ivlv[0] = vlvCountsToVolts(adc_counts[0][0]);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fa0b 	bl	8002740 <vlvCountsToVolts>
 800232a:	eef0 7a40 	vmov.f32	s15, s0
 800232e:	4ba7      	ldr	r3, [pc, #668]	; (80025cc <updatePeripherals+0x2b4>)
 8002330:	edc3 7a00 	vstr	s15, [r3]
    ivlv[1] = vlvCountsToVolts(adc_counts[1][10]);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3320      	adds	r3, #32
 8002338:	8a9b      	ldrh	r3, [r3, #20]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fa00 	bl	8002740 <vlvCountsToVolts>
 8002340:	eef0 7a40 	vmov.f32	s15, s0
 8002344:	4ba1      	ldr	r3, [pc, #644]	; (80025cc <updatePeripherals+0x2b4>)
 8002346:	edc3 7a01 	vstr	s15, [r3, #4]
    ivlv[2] = vlvCountsToVolts(adc_counts[1][8]);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3320      	adds	r3, #32
 800234e:	8a1b      	ldrh	r3, [r3, #16]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f9f5 	bl	8002740 <vlvCountsToVolts>
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	4b9c      	ldr	r3, [pc, #624]	; (80025cc <updatePeripherals+0x2b4>)
 800235c:	edc3 7a02 	vstr	s15, [r3, #8]
    ivlv[3] = vlvCountsToVolts(adc_counts[1][6]);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3320      	adds	r3, #32
 8002364:	899b      	ldrh	r3, [r3, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f9ea 	bl	8002740 <vlvCountsToVolts>
 800236c:	eef0 7a40 	vmov.f32	s15, s0
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <updatePeripherals+0x2b4>)
 8002372:	edc3 7a03 	vstr	s15, [r3, #12]
    ivlv[4] = vlvCountsToVolts(adc_counts[1][4]);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3320      	adds	r3, #32
 800237a:	891b      	ldrh	r3, [r3, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f9df 	bl	8002740 <vlvCountsToVolts>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	4b91      	ldr	r3, [pc, #580]	; (80025cc <updatePeripherals+0x2b4>)
 8002388:	edc3 7a04 	vstr	s15, [r3, #16]
    ivlv[5] = vlvCountsToVolts(adc_counts[1][2]);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3320      	adds	r3, #32
 8002390:	889b      	ldrh	r3, [r3, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f9d4 	bl	8002740 <vlvCountsToVolts>
 8002398:	eef0 7a40 	vmov.f32	s15, s0
 800239c:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <updatePeripherals+0x2b4>)
 800239e:	edc3 7a05 	vstr	s15, [r3, #20]
    ivlv[6] = vlvCountsToVolts(adc_counts[1][0]);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3320      	adds	r3, #32
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f9c9 	bl	8002740 <vlvCountsToVolts>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <updatePeripherals+0x2b4>)
 80023b4:	edc3 7a06 	vstr	s15, [r3, #24]
    ivlv[7] = vlvCountsToVolts(adc_counts[0][11]);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8adb      	ldrh	r3, [r3, #22]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f9bf 	bl	8002740 <vlvCountsToVolts>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <updatePeripherals+0x2b4>)
 80023c8:	edc3 7a07 	vstr	s15, [r3, #28]
    ivlv[8] = vlvCountsToVolts(adc_counts[0][13]);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8b5b      	ldrh	r3, [r3, #26]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f9b5 	bl	8002740 <vlvCountsToVolts>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <updatePeripherals+0x2b4>)
 80023dc:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load vlv currents */
    evlv[0] = vlvCountsToAmps(adc_counts[0][1]);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	885b      	ldrh	r3, [r3, #2]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f9cb 	bl	8002780 <vlvCountsToAmps>
 80023ea:	eef0 7a40 	vmov.f32	s15, s0
 80023ee:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <updatePeripherals+0x2b8>)
 80023f0:	edc3 7a00 	vstr	s15, [r3]
    evlv[1] = vlvCountsToAmps(adc_counts[1][11]);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3320      	adds	r3, #32
 80023f8:	8adb      	ldrh	r3, [r3, #22]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f9c0 	bl	8002780 <vlvCountsToAmps>
 8002400:	eef0 7a40 	vmov.f32	s15, s0
 8002404:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <updatePeripherals+0x2b8>)
 8002406:	edc3 7a01 	vstr	s15, [r3, #4]
    evlv[2] = vlvCountsToAmps(adc_counts[1][9]);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3320      	adds	r3, #32
 800240e:	8a5b      	ldrh	r3, [r3, #18]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f9b5 	bl	8002780 <vlvCountsToAmps>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <updatePeripherals+0x2b8>)
 800241c:	edc3 7a02 	vstr	s15, [r3, #8]
    evlv[3] = vlvCountsToAmps(adc_counts[1][7]);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3320      	adds	r3, #32
 8002424:	89db      	ldrh	r3, [r3, #14]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f9aa 	bl	8002780 <vlvCountsToAmps>
 800242c:	eef0 7a40 	vmov.f32	s15, s0
 8002430:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <updatePeripherals+0x2b8>)
 8002432:	edc3 7a03 	vstr	s15, [r3, #12]
    evlv[4] = vlvCountsToAmps(adc_counts[1][5]);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3320      	adds	r3, #32
 800243a:	895b      	ldrh	r3, [r3, #10]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f99f 	bl	8002780 <vlvCountsToAmps>
 8002442:	eef0 7a40 	vmov.f32	s15, s0
 8002446:	4b62      	ldr	r3, [pc, #392]	; (80025d0 <updatePeripherals+0x2b8>)
 8002448:	edc3 7a04 	vstr	s15, [r3, #16]
    evlv[5] = vlvCountsToAmps(adc_counts[1][3]);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3320      	adds	r3, #32
 8002450:	88db      	ldrh	r3, [r3, #6]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f994 	bl	8002780 <vlvCountsToAmps>
 8002458:	eef0 7a40 	vmov.f32	s15, s0
 800245c:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <updatePeripherals+0x2b8>)
 800245e:	edc3 7a05 	vstr	s15, [r3, #20]
    evlv[6] = vlvCountsToAmps(adc_counts[1][1]);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3320      	adds	r3, #32
 8002466:	885b      	ldrh	r3, [r3, #2]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f989 	bl	8002780 <vlvCountsToAmps>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <updatePeripherals+0x2b8>)
 8002474:	edc3 7a06 	vstr	s15, [r3, #24]
    evlv[7] = vlvCountsToAmps(adc_counts[0][10]);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8a9b      	ldrh	r3, [r3, #20]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f97f 	bl	8002780 <vlvCountsToAmps>
 8002482:	eef0 7a40 	vmov.f32	s15, s0
 8002486:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <updatePeripherals+0x2b8>)
 8002488:	edc3 7a07 	vstr	s15, [r3, #28]
    evlv[8] = vlvCountsToAmps(adc_counts[0][12]);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8b1b      	ldrh	r3, [r3, #24]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f975 	bl	8002780 <vlvCountsToAmps>
 8002496:	eef0 7a40 	vmov.f32	s15, s0
 800249a:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <updatePeripherals+0x2b8>)
 800249c:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load pressure transducer voltages */
    for (int8_t i = 7; i >= 2; --i) {
 80024a0:	2307      	movs	r3, #7
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e021      	b.n	80024ea <updatePeripherals+0x1d2>
        uint8_t channel = 7-i;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	f1c3 0307 	rsb	r3, r3, #7
 80024ac:	72fb      	strb	r3, [r7, #11]
        pressure[channel] = pt_counts_to_psi( channel, adc_counts[0][i]) - pt_ambients[channel];
 80024ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f9ab 	bl	8001818 <pt_counts_to_psi>
 80024c2:	eeb0 7a40 	vmov.f32	s14, s0
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <updatePeripherals+0x2bc>)
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <updatePeripherals+0x2c0>)
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 7; i >= 2; --i) {
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	dcd9      	bgt.n	80024a6 <updatePeripherals+0x18e>
    }

    /* Load mtr currents */
    i_mtr_ab[0] = mtrCountsToAmps(adc_counts[2][5]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3340      	adds	r3, #64	; 0x40
 80024f6:	895b      	ldrh	r3, [r3, #10]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f961 	bl	80027c0 <mtrCountsToAmps>
 80024fe:	eef0 7a40 	vmov.f32	s15, s0
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <updatePeripherals+0x2c4>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
    i_mtr_ab[1] = mtrCountsToAmps(adc_counts[2][4]);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3340      	adds	r3, #64	; 0x40
 800250c:	891b      	ldrh	r3, [r3, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f956 	bl	80027c0 <mtrCountsToAmps>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <updatePeripherals+0x2c4>)
 800251a:	edc3 7a01 	vstr	s15, [r3, #4]
    i_mtr_ab[2] = mtrCountsToAmps(adc_counts[2][0]);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f94b 	bl	80027c0 <mtrCountsToAmps>
 800252a:	eef0 7a40 	vmov.f32	s15, s0
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <updatePeripherals+0x2c4>)
 8002530:	edc3 7a02 	vstr	s15, [r3, #8]
    i_mtr_ab[3] = mtrCountsToAmps(adc_counts[2][1]);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3340      	adds	r3, #64	; 0x40
 8002538:	885b      	ldrh	r3, [r3, #2]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f940 	bl	80027c0 <mtrCountsToAmps>
 8002540:	eef0 7a40 	vmov.f32	s15, s0
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <updatePeripherals+0x2c4>)
 8002546:	edc3 7a03 	vstr	s15, [r3, #12]

    i_mtr[0]    = mtrCountsToAmps(adc_counts[2][2]);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3340      	adds	r3, #64	; 0x40
 800254e:	889b      	ldrh	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f935 	bl	80027c0 <mtrCountsToAmps>
 8002556:	eef0 7a40 	vmov.f32	s15, s0
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <updatePeripherals+0x2c8>)
 800255c:	edc3 7a00 	vstr	s15, [r3]
    i_mtr[1]    = mtrCountsToAmps(adc_counts[2][3]);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3340      	adds	r3, #64	; 0x40
 8002564:	88db      	ldrh	r3, [r3, #6]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f92a 	bl	80027c0 <mtrCountsToAmps>
 800256c:	eef0 7a40 	vmov.f32	s15, s0
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <updatePeripherals+0x2c8>)
 8002572:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Load thermocouples temps above */

    /* Load potentiometer degrees */
    for (int8_t i = 9; i >= 6; --i) {
 8002576:	2309      	movs	r3, #9
 8002578:	73bb      	strb	r3, [r7, #14]
 800257a:	e020      	b.n	80025be <updatePeripherals+0x2a6>
        int8_t channel  = 9-i;
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	f1c3 0309 	rsb	r3, r3, #9
 8002582:	b2db      	uxtb	r3, r3
 8002584:	733b      	strb	r3, [r7, #12]
        if (channel < NUM_POTS) {  // Press board code uses 4 pots
 8002586:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	dc13      	bgt.n	80025b6 <updatePeripherals+0x29e>
        	epot[channel]   = potCountsToDegrees(adc_counts[2][i], channel);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3340      	adds	r3, #64	; 0x40
 8002592:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800259a:	7b3a      	ldrb	r2, [r7, #12]
 800259c:	f997 400c 	ldrsb.w	r4, [r7, #12]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f92c 	bl	8002800 <potCountsToDegrees>
 80025a8:	eef0 7a40 	vmov.f32	s15, s0
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <updatePeripherals+0x2cc>)
 80025ae:	00a3      	lsls	r3, r4, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 9; i >= 6; --i) {
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	73bb      	strb	r3, [r7, #14]
 80025be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	dcda      	bgt.n	800257c <updatePeripherals+0x264>
        }
    }

    /* Load stepper motor position */
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	737b      	strb	r3, [r7, #13]
 80025ca:	e01a      	b.n	8002602 <updatePeripherals+0x2ea>
 80025cc:	2000030c 	.word	0x2000030c
 80025d0:	20000330 	.word	0x20000330
 80025d4:	2000025c 	.word	0x2000025c
 80025d8:	200002f4 	.word	0x200002f4
 80025dc:	20000374 	.word	0x20000374
 80025e0:	20000384 	.word	0x20000384
 80025e4:	20000394 	.word	0x20000394
        mtr_pos[i] = curPos[i];
 80025e8:	7b7a      	ldrb	r2, [r7, #13]
 80025ea:	7b7b      	ldrb	r3, [r7, #13]
 80025ec:	494c      	ldr	r1, [pc, #304]	; (8002720 <updatePeripherals+0x408>)
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	440a      	add	r2, r1
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	494b      	ldr	r1, [pc, #300]	; (8002724 <updatePeripherals+0x40c>)
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 80025fc:	7b7b      	ldrb	r3, [r7, #13]
 80025fe:	3301      	adds	r3, #1
 8002600:	737b      	strb	r3, [r7, #13]
 8002602:	7b7b      	ldrb	r3, [r7, #13]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d9ef      	bls.n	80025e8 <updatePeripherals+0x2d0>
    }

    /* Load board currents and voltages */
    i_batt  = adc_counts[2][12]*ibatt_cal;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3340      	adds	r3, #64	; 0x40
 800260c:	8b1b      	ldrh	r3, [r3, #24]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff4c 	bl	80004ac <__aeabi_i2d>
 8002614:	a33a      	add	r3, pc, #232	; (adr r3, 8002700 <updatePeripherals+0x3e8>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd ffb1 	bl	8000580 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe faa3 	bl	8000b70 <__aeabi_d2f>
 800262a:	4603      	mov	r3, r0
 800262c:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <updatePeripherals+0x410>)
 800262e:	6013      	str	r3, [r2, #0]
    e_batt  = adc_counts[2][13]*ebatt_slope + ebatt_offset;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3340      	adds	r3, #64	; 0x40
 8002634:	8b5b      	ldrh	r3, [r3, #26]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff38 	bl	80004ac <__aeabi_i2d>
 800263c:	a332      	add	r3, pc, #200	; (adr r3, 8002708 <updatePeripherals+0x3f0>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ff9d 	bl	8000580 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	a330      	add	r3, pc, #192	; (adr r3, 8002710 <updatePeripherals+0x3f8>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fddc 	bl	8000210 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fa86 	bl	8000b70 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	4a31      	ldr	r2, [pc, #196]	; (800272c <updatePeripherals+0x414>)
 8002668:	6013      	str	r3, [r2, #0]
    i3v     = adc_counts[2][10]*i3v_cal;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3340      	adds	r3, #64	; 0x40
 800266e:	8a9b      	ldrh	r3, [r3, #20]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd ff1b 	bl	80004ac <__aeabi_i2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fa77 	bl	8000b70 <__aeabi_d2f>
 8002682:	4603      	mov	r3, r0
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <updatePeripherals+0x418>)
 8002686:	6013      	str	r3, [r2, #0]
    e3v     = adc_counts[2][11]*e3v_cal;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3340      	adds	r3, #64	; 0x40
 800268c:	8adb      	ldrh	r3, [r3, #22]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff0c 	bl	80004ac <__aeabi_i2d>
 8002694:	a320      	add	r3, pc, #128	; (adr r3, 8002718 <updatePeripherals+0x400>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fd ff71 	bl	8000580 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fa63 	bl	8000b70 <__aeabi_d2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <updatePeripherals+0x41c>)
 80026ae:	6013      	str	r3, [r2, #0]
    i5v     = adc_counts[0][8]*i5v_cal;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8a1b      	ldrh	r3, [r3, #16]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fef9 	bl	80004ac <__aeabi_i2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe fa55 	bl	8000b70 <__aeabi_d2f>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <updatePeripherals+0x420>)
 80026ca:	6013      	str	r3, [r2, #0]
    e5v     = adc_counts[0][9]*e5v_cal;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8a5b      	ldrh	r3, [r3, #18]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd feeb 	bl	80004ac <__aeabi_i2d>
 80026d6:	a310      	add	r3, pc, #64	; (adr r3, 8002718 <updatePeripherals+0x400>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ff50 	bl	8000580 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa42 	bl	8000b70 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <updatePeripherals+0x424>)
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	f3af 8000 	nop.w
 8002700:	a7693b02 	.word	0xa7693b02
 8002704:	3f908107 	.word	0x3f908107
 8002708:	77318fc5 	.word	0x77318fc5
 800270c:	3f6f212d 	.word	0x3f6f212d
 8002710:	c5d63886 	.word	0xc5d63886
 8002714:	3fe2346d 	.word	0x3fe2346d
 8002718:	ad045a83 	.word	0xad045a83
 800271c:	3f5a665d 	.word	0x3f5a665d
 8002720:	200003a8 	.word	0x200003a8
 8002724:	20000368 	.word	0x20000368
 8002728:	200002b4 	.word	0x200002b4
 800272c:	200002b0 	.word	0x200002b0
 8002730:	200002c8 	.word	0x200002c8
 8002734:	200002bc 	.word	0x200002bc
 8002738:	200002c4 	.word	0x200002c4
 800273c:	200002c0 	.word	0x200002c0

08002740 <vlvCountsToVolts>:

float vlvCountsToVolts(uint16_t counts) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
    return counts*evlv_cal;
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fead 	bl	80004ac <__aeabi_i2d>
 8002752:	a309      	add	r3, pc, #36	; (adr r3, 8002778 <vlvCountsToVolts+0x38>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fd ff12 	bl	8000580 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa04 	bl	8000b70 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	ee07 3a90 	vmov	s15, r3
}
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	6ea67bd5 	.word	0x6ea67bd5
 800277c:	3f6a9999 	.word	0x3f6a9999

08002780 <vlvCountsToAmps>:

float vlvCountsToAmps(uint16_t counts) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
    return counts*ivlv_cal;
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe8d 	bl	80004ac <__aeabi_i2d>
 8002792:	a309      	add	r3, pc, #36	; (adr r3, 80027b8 <vlvCountsToAmps+0x38>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd fef2 	bl	8000580 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f7fe f9e4 	bl	8000b70 <__aeabi_d2f>
 80027a8:	4603      	mov	r3, r0
 80027aa:	ee07 3a90 	vmov	s15, r3
}
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	0b68130f 	.word	0x0b68130f
 80027bc:	3f6a6663 	.word	0x3f6a6663

080027c0 <mtrCountsToAmps>:
    return ( counts- pt_offset[pt_num]) *pt_slope[pt_num] - pt_ambients[pt_num];
	//return 0;
}
*/

float mtrCountsToAmps(uint16_t counts) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
    return counts*imtr_cal;
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe6d 	bl	80004ac <__aeabi_i2d>
 80027d2:	a309      	add	r3, pc, #36	; (adr r3, 80027f8 <mtrCountsToAmps+0x38>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd fed2 	bl	8000580 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f9c4 	bl	8000b70 <__aeabi_d2f>
 80027e8:	4603      	mov	r3, r0
 80027ea:	ee07 3a90 	vmov	s15, r3
}
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	0b68130f 	.word	0x0b68130f
 80027fc:	3f6a6663 	.word	0x3f6a6663

08002800 <potCountsToDegrees>:

float potCountsToDegrees(uint16_t counts, uint8_t pot_num) {
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	460a      	mov	r2, r1
 800280a:	80fb      	strh	r3, [r7, #6]
 800280c:	4613      	mov	r3, r2
 800280e:	717b      	strb	r3, [r7, #5]
    // negative sign to align motor pos direction with pot pos direction
    return -EPOT_CHAR_SLOPE*(
                        (pot_cal_info.slope * (counts - pot_cal_info.offset))
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <potCountsToDegrees+0x50>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <potCountsToDegrees+0x50>)
 8002822:	edd3 7a01 	vldr	s15, [r3, #4]
 8002826:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800282a:	ee27 7a27 	vmul.f32	s14, s14, s15
                         - pot_ambients[pot_num] - EPOT_CHAR_OFFSET
 800282e:	797b      	ldrb	r3, [r7, #5]
 8002830:	4a08      	ldr	r2, [pc, #32]	; (8002854 <potCountsToDegrees+0x54>)
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ee77 7a67 	vsub.f32	s15, s14, s15
    return -EPOT_CHAR_SLOPE*(
 800283e:	eef1 7a67 	vneg.f32	s15, s15
                           );
}
 8002842:	eeb0 0a67 	vmov.f32	s0, s15
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	200006f0 	.word	0x200006f0
 8002854:	20000274 	.word	0x20000274

08002858 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d103      	bne.n	8002870 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		handleMotorStepping(0);
	}
	else if (htim == &TIM_MTR1_STEP) {
		handleMotorStepping(1);
	}
}
 800286e:	e01e      	b.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_50MS) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
}
 800287e:	e016      	b.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_100MS) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x38>
		periodic_flag_100ms = 1;
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
}
 800288e:	e00e      	b.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR0_STEP) {
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <HAL_TIM_PeriodElapsedCallback+0x48>
		handleMotorStepping(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff f9e5 	bl	8001c68 <handleMotorStepping>
}
 800289e:	e006      	b.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR1_STEP) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d102      	bne.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x56>
		handleMotorStepping(1);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff f9dd 	bl	8001c68 <handleMotorStepping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20002080 	.word	0x20002080
 80028bc:	200007f0 	.word	0x200007f0
 80028c0:	200008ac 	.word	0x200008ac
 80028c4:	2000207c 	.word	0x2000207c
 80028c8:	20000bdc 	.word	0x20000bdc
 80028cc:	20000900 	.word	0x20000900
 80028d0:	20000a94 	.word	0x20000a94
 80028d4:	20000d48 	.word	0x20000d48

080028d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    // idle detection needs at least one UART clock to detect the bus is idle. So
    // in the case, that the transmission length is one full buffer length
    // and the start buffer pointer is at 0, it will be also 0 at the end of the
    // transmission. In this case the DMA rollover will increment the RxRollover
    // variable first and len will not be zero.
    if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {                    // Check if it is an "Idle Interrupt"
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	f040 8083 	bne.w	80029f6 <HAL_UART_RxCpltCallback+0x11e>
        __HAL_UART_CLEAR_IDLEFLAG(huart);                             // clear the interrupt
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]

        uint16_t start = RxBfrPos;                                        // Rx bytes start position (=last buffer position)
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	823b      	strh	r3, [r7, #16]
        RxBfrPos = DMA_RX_BUFFER_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;// determine actual buffer position
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 800291e:	801a      	strh	r2, [r3, #0]
        uint16_t len = DMA_RX_BUFFER_SIZE;                                // init len with max. size
 8002920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002924:	82fb      	strh	r3, [r7, #22]

        if(RxRollover < 2)  {
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_UART_RxCpltCallback+0x138>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d81b      	bhi.n	8002966 <HAL_UART_RxCpltCallback+0x8e>
            if(RxRollover) {                                                        // rolled over once
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_UART_RxCpltCallback+0x138>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d011      	beq.n	800295a <HAL_UART_RxCpltCallback+0x82>
                if(RxBfrPos <= start) {
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	8a3a      	ldrh	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d308      	bcc.n	8002952 <HAL_UART_RxCpltCallback+0x7a>
                    len = RxBfrPos + DMA_RX_BUFFER_SIZE - start;  // no bytes overwritten
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	8a3b      	ldrh	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	82fb      	strh	r3, [r7, #22]
 8002950:	e00c      	b.n	800296c <HAL_UART_RxCpltCallback+0x94>
                } else {
                    len = DMA_RX_BUFFER_SIZE + 1;                 // bytes overwritten error
 8002952:	f640 0301 	movw	r3, #2049	; 0x801
 8002956:	82fb      	strh	r3, [r7, #22]
 8002958:	e008      	b.n	800296c <HAL_UART_RxCpltCallback+0x94>
                }
            } else {
                len = RxBfrPos - start;                           // no bytes overwritten
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	8a3b      	ldrh	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	82fb      	strh	r3, [r7, #22]
 8002964:	e002      	b.n	800296c <HAL_UART_RxCpltCallback+0x94>
            }
        } else {
            len = DMA_RX_BUFFER_SIZE + 2;                         // dual rollover error
 8002966:	f640 0302 	movw	r3, #2050	; 0x802
 800296a:	82fb      	strh	r3, [r7, #22]
        }

        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02d      	beq.n	80029ce <HAL_UART_RxCpltCallback+0xf6>
 8002972:	8afb      	ldrh	r3, [r7, #22]
 8002974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002978:	d829      	bhi.n	80029ce <HAL_UART_RxCpltCallback+0xf6>
            uint16_t bytes_in_first_part = len;
 800297a:	8afb      	ldrh	r3, [r7, #22]
 800297c:	82bb      	strh	r3, [r7, #20]
            uint16_t bytes_in_second_part = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	827b      	strh	r3, [r7, #18]
            if (RxBfrPos < start) { // if data loops in buffer
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_UART_RxCpltCallback+0x134>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	8a3a      	ldrh	r2, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d907      	bls.n	800299c <HAL_UART_RxCpltCallback+0xc4>
                bytes_in_first_part = DMA_RX_BUFFER_SIZE - start;
 800298c:	8a3b      	ldrh	r3, [r7, #16]
 800298e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002992:	82bb      	strh	r3, [r7, #20]
                bytes_in_second_part= len - bytes_in_first_part;
 8002994:	8afa      	ldrh	r2, [r7, #22]
 8002996:	8abb      	ldrh	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	827b      	strh	r3, [r7, #18]
            }

            // handle telem for yourself immediately
            memcpy(temp_telem_buffer, DMA_RX_Buffer+start, bytes_in_first_part);
 800299c:	8a3b      	ldrh	r3, [r7, #16]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_UART_RxCpltCallback+0x13c>)
 80029a0:	4413      	add	r3, r2
 80029a2:	8aba      	ldrh	r2, [r7, #20]
 80029a4:	4619      	mov	r1, r3
 80029a6:	481c      	ldr	r0, [pc, #112]	; (8002a18 <HAL_UART_RxCpltCallback+0x140>)
 80029a8:	f00b fcf6 	bl	800e398 <memcpy>
            memcpy(temp_telem_buffer+bytes_in_first_part, DMA_RX_Buffer, bytes_in_second_part);
 80029ac:	8abb      	ldrh	r3, [r7, #20]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_UART_RxCpltCallback+0x140>)
 80029b0:	4413      	add	r3, r2
 80029b2:	8a7a      	ldrh	r2, [r7, #18]
 80029b4:	4917      	ldr	r1, [pc, #92]	; (8002a14 <HAL_UART_RxCpltCallback+0x13c>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f00b fcee 	bl	800e398 <memcpy>
            uint8_t cmd_status = receive_data(huart, temp_telem_buffer, len);
 80029bc:	8afb      	ldrh	r3, [r7, #22]
 80029be:	461a      	mov	r2, r3
 80029c0:	4915      	ldr	r1, [pc, #84]	; (8002a18 <HAL_UART_RxCpltCallback+0x140>)
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f005 fdb8 	bl	8008538 <receive_data>
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 80029cc:	e00f      	b.n	80029ee <HAL_UART_RxCpltCallback+0x116>
                last_telem_packet_pos = (last_telem_packet_pos + 1) % NUM_BUFFER_PACKETS;
            }
            */
        } else {
            // buffer overflow error:
            HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80029ce:	2102      	movs	r1, #2
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <HAL_UART_RxCpltCallback+0x144>)
 80029d2:	f007 fed4 	bl	800a77e <HAL_GPIO_TogglePin>
			init_board(OWN_BOARD_ADDR); //Fixes an issue with CLB_board_addr changing
 80029d6:	2003      	movs	r0, #3
 80029d8:	f005 fc7c 	bl	80082d4 <init_board>
			last_telem_packet_pos = 0;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_UART_RxCpltCallback+0x148>)
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // dma buffer overflowed
 80029e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e6:	490b      	ldr	r1, [pc, #44]	; (8002a14 <HAL_UART_RxCpltCallback+0x13c>)
 80029e8:	480e      	ldr	r0, [pc, #56]	; (8002a24 <HAL_UART_RxCpltCallback+0x14c>)
 80029ea:	f00a fc38 	bl	800d25e <HAL_UART_Receive_DMA>
        }

        RxRollover = 0;                                                    // reset the Rollover variable
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_UART_RxCpltCallback+0x138>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
    } else {
        // no idle flag? --> DMA rollover occurred
        RxRollover++;       // increment Rollover Counter
    }
}
 80029f4:	e005      	b.n	8002a02 <HAL_UART_RxCpltCallback+0x12a>
        RxRollover++;       // increment Rollover Counter
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_UART_RxCpltCallback+0x138>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_UART_RxCpltCallback+0x138>)
 8002a00:	701a      	strb	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000057e 	.word	0x2000057e
 8002a10:	20000580 	.word	0x20000580
 8002a14:	2000178c 	.word	0x2000178c
 8002a18:	2000047c 	.word	0x2000047c
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	2000057c 	.word	0x2000057c
 8002a24:	2000202c 	.word	0x2000202c

08002a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2c:	f006 ff1e 	bl	800986c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a30:	f000 f97e 	bl	8002d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a34:	f000 fd18 	bl	8003468 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a38:	f000 fcf6 	bl	8003428 <MX_DMA_Init>
  MX_SPI1_Init();
 8002a3c:	f000 fa00 	bl	8002e40 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a40:	f000 fa34 	bl	8002eac <MX_SPI2_Init>
  MX_SPI4_Init();
 8002a44:	f000 fa68 	bl	8002f18 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002a48:	f000 fcc4 	bl	80033d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002a4c:	f000 fa9a 	bl	8002f84 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002a50:	f000 fbe8 	bl	8003224 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002a54:	f000 fc1c 	bl	8003290 <MX_TIM7_Init>
  MX_TIM10_Init();
 8002a58:	f000 fc50 	bl	80032fc <MX_TIM10_Init>
  MX_TIM11_Init();
 8002a5c:	f000 fc72 	bl	8003344 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002a60:	f000 fb10 	bl	8003084 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002a64:	f000 fb90 	bl	8003188 <MX_TIM5_Init>
  MX_TIM13_Init();
 8002a68:	f000 fc90 	bl	800338c <MX_TIM13_Init>
  MX_IWDG_Init();
 8002a6c:	f000 f9ce 	bl	8002e0c <MX_IWDG_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8002a70:	488f      	ldr	r0, [pc, #572]	; (8002cb0 <main+0x288>)
 8002a72:	f009 fa51 	bl	800bf18 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 8002a76:	488f      	ldr	r0, [pc, #572]	; (8002cb4 <main+0x28c>)
 8002a78:	f009 fab6 	bl	800bfe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8002a7c:	488e      	ldr	r0, [pc, #568]	; (8002cb8 <main+0x290>)
 8002a7e:	f009 fab3 	bl	800bfe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8002a82:	488e      	ldr	r0, [pc, #568]	; (8002cbc <main+0x294>)
 8002a84:	f009 fab0 	bl	800bfe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&TIM_MTR0_PWM);
 8002a88:	488d      	ldr	r0, [pc, #564]	; (8002cc0 <main+0x298>)
 8002a8a:	f009 fa45 	bl	800bf18 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&TIM_MTR1_PWM);
 8002a8e:	488d      	ldr	r0, [pc, #564]	; (8002cc4 <main+0x29c>)
 8002a90:	f009 fa42 	bl	800bf18 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_MTR0_STEP);
 8002a94:	488c      	ldr	r0, [pc, #560]	; (8002cc8 <main+0x2a0>)
 8002a96:	f009 faa7 	bl	800bfe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_MTR1_STEP);
 8002a9a:	488c      	ldr	r0, [pc, #560]	; (8002ccc <main+0x2a4>)
 8002a9c:	f009 faa4 	bl	800bfe8 <HAL_TIM_Base_Start_IT>

  // UART DMA
  __HAL_UART_ENABLE_IT(&COM_UART, UART_IT_IDLE);   // enable idle line interrupt
 8002aa0:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <main+0x2a8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b8a      	ldr	r3, [pc, #552]	; (8002cd0 <main+0x2a8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0210 	orr.w	r2, r2, #16
 8002aae:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	4987      	ldr	r1, [pc, #540]	; (8002cd4 <main+0x2ac>)
 8002ab6:	4886      	ldr	r0, [pc, #536]	; (8002cd0 <main+0x2a8>)
 8002ab8:	f00a fbd1 	bl	800d25e <HAL_UART_Receive_DMA>

  // Read variables from flash: this must be called very early in initialization!
  HAL_Delay(100);  // Small delay to ensure flash boots up completely
 8002abc:	2064      	movs	r0, #100	; 0x64
 8002abe:	f006 ff47 	bl	8009950 <HAL_Delay>
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8002ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac6:	4a84      	ldr	r2, [pc, #528]	; (8002cd8 <main+0x2b0>)
 8002ac8:	4984      	ldr	r1, [pc, #528]	; (8002cdc <main+0x2b4>)
 8002aca:	4885      	ldr	r0, [pc, #532]	; (8002ce0 <main+0x2b8>)
 8002acc:	f006 fbe5 	bl	800929a <init_flash>
  read_nonvolatile_variables();
 8002ad0:	f000 fe4c 	bl	800376c <read_nonvolatile_variables>

  // Initializations
  init_board(OWN_BOARD_ADDR);  // Comms
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f005 fbfd 	bl	80082d4 <init_board>
  init_autosequence_constants();  // Hardcoded values
 8002ada:	f7fe fa15 	bl	8000f08 <init_autosequence_constants>
  init_autosequence_control_variables();
 8002ade:	f7fe fa99 	bl	8001014 <init_autosequence_control_variables>
  init_tank_pressure_control_configuration();  // PID
 8002ae2:	f7fe fa47 	bl	8000f74 <init_tank_pressure_control_configuration>
  init_hardware();  // Press board sensors, etc
 8002ae6:	f7fe ff65 	bl	80019b4 <init_hardware>

  // Packet values
  telem_rate = 1000/(TIM_100MS.Init.Period+1);
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <main+0x294>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	3301      	adds	r3, #1
 8002af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <main+0x2bc>)
 8002afc:	701a      	strb	r2, [r3, #0]
  adc_rate = 1000/(TIM_5MS.Init.Period+1);
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <main+0x28c>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <main+0x2c0>)
 8002b10:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  execute_autosequence();
 8002b12:	f7fe fcd3 	bl	80014bc <execute_autosequence>

	  if (periodic_flag_50ms) {
 8002b16:	4b75      	ldr	r3, [pc, #468]	; (8002cec <main+0x2c4>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <main+0x126>
		  periodic_flag_50ms = 0;
 8002b20:	4b72      	ldr	r3, [pc, #456]	; (8002cec <main+0x2c4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <main+0x2c8>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10f      	bne.n	8002b4e <main+0x126>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002b2e:	4b71      	ldr	r3, [pc, #452]	; (8002cf4 <main+0x2cc>)
 8002b30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <main+0x116>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 8002b38:	486f      	ldr	r0, [pc, #444]	; (8002cf8 <main+0x2d0>)
 8002b3a:	f003 feb9 	bl	80068b0 <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <main+0x2cc>)
 8002b40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <main+0x126>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 8002b48:	486c      	ldr	r0, [pc, #432]	; (8002cfc <main+0x2d4>)
 8002b4a:	f003 feb1 	bl	80068b0 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <main+0x2d8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d079      	beq.n	8002c4c <main+0x224>
		  periodic_flag_5ms = 0;
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <main+0x2d8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]

		  // sample adcs and thermocouples
		  readAdcs(&SPI_ADC, adc_pins, adc_counts);
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <main+0x2dc>)
 8002b60:	4969      	ldr	r1, [pc, #420]	; (8002d08 <main+0x2e0>)
 8002b62:	486a      	ldr	r0, [pc, #424]	; (8002d0c <main+0x2e4>)
 8002b64:	f7ff fac6 	bl	80020f4 <readAdcs>
		  readThermocouples(&SPI_TC, tc_pins, 5);
 8002b68:	2205      	movs	r2, #5
 8002b6a:	4969      	ldr	r1, [pc, #420]	; (8002d10 <main+0x2e8>)
 8002b6c:	4869      	ldr	r0, [pc, #420]	; (8002d14 <main+0x2ec>)
 8002b6e:	f7ff fbab 	bl	80022c8 <readThermocouples>
		  updatePeripherals(adc_counts);
 8002b72:	4864      	ldr	r0, [pc, #400]	; (8002d04 <main+0x2dc>)
 8002b74:	f7ff fbd0 	bl	8002318 <updatePeripherals>

		  update_serial_data_vars();
 8002b78:	f003 f9d0 	bl	8005f1c <update_serial_data_vars>

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 8002b7c:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <main+0x2c8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d105      	bne.n	8002b90 <main+0x168>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 8002b84:	485c      	ldr	r0, [pc, #368]	; (8002cf8 <main+0x2d0>)
 8002b86:	f003 fe5e 	bl	8006846 <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 8002b8a:	485c      	ldr	r0, [pc, #368]	; (8002cfc <main+0x2d4>)
 8002b8c:	f003 fe5b 	bl	8006846 <tank_autopress_bang_bang>
		  }

		  // Initial motor position
		  if (STATE == Startup || STATE == Ignition) {
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <main+0x2c8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d003      	beq.n	8002ba0 <main+0x178>
 8002b98:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <main+0x2c8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d11c      	bne.n	8002bda <main+0x1b2>
			  autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();
 8002ba0:	f7fe fc0e 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <main+0x2cc>)
 8002ba8:	6293      	str	r3, [r2, #40]	; 0x28

			  // Initial motor position is arbitrarily put in the 5ms loop
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002baa:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <main+0x2c8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d009      	beq.n	8002bc6 <main+0x19e>
 8002bb2:	4b4f      	ldr	r3, [pc, #316]	; (8002cf0 <main+0x2c8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d10f      	bne.n	8002bda <main+0x1b2>
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <main+0x2cc>)
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
					  >= autosequence.startup_motor_start_delay_ms)) {
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <main+0x2cc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d309      	bcc.n	8002bda <main+0x1b2>
				  // Allow manual transition to Ignition
				  autosequence.startup_init_motor_pos_complete = 1;
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <main+0x2cc>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

				  // Set motors to initial position
				  tank_startup_init_motor_position(&tanks[LOX_TANK_NUM]);
 8002bce:	484a      	ldr	r0, [pc, #296]	; (8002cf8 <main+0x2d0>)
 8002bd0:	f003 ff8e 	bl	8006af0 <tank_startup_init_motor_position>
				  tank_startup_init_motor_position(&tanks[FUEL_TANK_NUM]);
 8002bd4:	4849      	ldr	r0, [pc, #292]	; (8002cfc <main+0x2d4>)
 8002bd6:	f003 ff8b 	bl	8006af0 <tank_startup_init_motor_position>
			  }
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002bda:	4b45      	ldr	r3, [pc, #276]	; (8002cf0 <main+0x2c8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10f      	bne.n	8002c02 <main+0x1da>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <main+0x2cc>)
 8002be4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <main+0x1ca>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 8002bec:	4842      	ldr	r0, [pc, #264]	; (8002cf8 <main+0x2d0>)
 8002bee:	f003 ff55 	bl	8006a9c <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002bf2:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <main+0x2cc>)
 8002bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <main+0x1da>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 8002bfc:	483f      	ldr	r0, [pc, #252]	; (8002cfc <main+0x2d4>)
 8002bfe:	f003 ff4d 	bl	8006a9c <tank_check_control_valve_threshold>
			  }
		  }

		  // Ignitor break detection
		  if (STATE == Ignition && autosequence.T_state
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <main+0x2c8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d108      	bne.n	8002c1c <main+0x1f4>
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <main+0x2cc>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				  >= autosequence.ignition_ignitor_on_delay_ms) {
 8002c0e:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <main+0x2cc>)
 8002c10:	8892      	ldrh	r2, [r2, #4]
 8002c12:	b292      	uxth	r2, r2
		  if (STATE == Ignition && autosequence.T_state
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d301      	bcc.n	8002c1c <main+0x1f4>
			  update_ignitor_break_detector();
 8002c18:	f7fe fa94 	bl	8001144 <update_ignitor_break_detector>
		  }

		  // Combustion failure detection
		  if (STATE == Hotfire && autosequence.T_state
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <main+0x2c8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d107      	bne.n	8002c34 <main+0x20c>
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <main+0x2cc>)
 8002c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
				  >= autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms) {
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <main+0x2cc>)
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		  if (STATE == Hotfire && autosequence.T_state
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d301      	bcc.n	8002c34 <main+0x20c>
			  update_combustion_failure_detector();
 8002c30:	f7fe fab8 	bl	80011a4 <update_combustion_failure_detector>
		  }

		  // Hard start detection
		  if (STATE == Hotfire) {
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <main+0x2c8>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d101      	bne.n	8002c40 <main+0x218>
			  update_hard_start_detector();
 8002c3c:	f7fe fae6 	bl	800120c <update_hard_start_detector>
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <main+0x2f0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <main+0x224>
			  save_flash_packet();
 8002c48:	f003 f9c8 	bl	8005fdc <save_flash_packet>

	  }


	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <main+0x2f4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d028      	beq.n	8002ca8 <main+0x280>
		  periodic_flag_100ms = 0;
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <main+0x2f4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

		  // Every 2 seconds, send a calibration packet instead
		  // of a telemetry packet (once every 20 packets)
		  if (telem_calibration_packet_counter == 0) {
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <main+0x2f8>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <main+0x24a>
			  send_calibration_data();
 8002c64:	f003 fa40 	bl	80060e8 <send_calibration_data>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	482e      	ldr	r0, [pc, #184]	; (8002d24 <main+0x2fc>)
 8002c6c:	f007 fd87 	bl	800a77e <HAL_GPIO_TogglePin>
 8002c70:	e006      	b.n	8002c80 <main+0x258>
		  }
		  else {
			  send_telem_packet(SERVER_ADDR);
 8002c72:	2007      	movs	r0, #7
 8002c74:	f003 f990 	bl	8005f98 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002c78:	2101      	movs	r1, #1
 8002c7a:	482a      	ldr	r0, [pc, #168]	; (8002d24 <main+0x2fc>)
 8002c7c:	f007 fd7f 	bl	800a77e <HAL_GPIO_TogglePin>
		  }
		  // Increment up counter
		  telem_calibration_packet_counter++;
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <main+0x2f8>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <main+0x2f8>)
 8002c8a:	701a      	strb	r2, [r3, #0]
		  telem_calibration_packet_counter %= 20;
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <main+0x2f8>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <main+0x300>)
 8002c92:	fba3 1302 	umull	r1, r3, r3, r2
 8002c96:	0919      	lsrs	r1, r3, #4
 8002c98:	460b      	mov	r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <main+0x2f8>)
 8002ca6:	701a      	strb	r2, [r3, #0]
	  }

	  // Refresh watchdog timer to keep the board running
	  HAL_IWDG_Refresh(&hiwdg);
 8002ca8:	4820      	ldr	r0, [pc, #128]	; (8002d2c <main+0x304>)
 8002caa:	f007 fdc4 	bl	800a836 <HAL_IWDG_Refresh>
	  execute_autosequence();
 8002cae:	e730      	b.n	8002b12 <main+0xea>
 8002cb0:	20000904 	.word	0x20000904
 8002cb4:	20002080 	.word	0x20002080
 8002cb8:	200008ac 	.word	0x200008ac
 8002cbc:	20000bdc 	.word	0x20000bdc
 8002cc0:	20001fe4 	.word	0x20001fe4
 8002cc4:	2000094c 	.word	0x2000094c
 8002cc8:	20000a94 	.word	0x20000a94
 8002ccc:	20000d48 	.word	0x20000d48
 8002cd0:	2000202c 	.word	0x2000202c
 8002cd4:	2000178c 	.word	0x2000178c
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	20000854 	.word	0x20000854
 8002ce0:	20002170 	.word	0x20002170
 8002ce4:	200002e8 	.word	0x200002e8
 8002ce8:	200002e9 	.word	0x200002e9
 8002cec:	2000207c 	.word	0x2000207c
 8002cf0:	200002ac 	.word	0x200002ac
 8002cf4:	2000062c 	.word	0x2000062c
 8002cf8:	20000584 	.word	0x20000584
 8002cfc:	200005d8 	.word	0x200005d8
 8002d00:	200007f0 	.word	0x200007f0
 8002d04:	20000720 	.word	0x20000720
 8002d08:	20000780 	.word	0x20000780
 8002d0c:	20001f8c 	.word	0x20001f8c
 8002d10:	200006f8 	.word	0x200006f8
 8002d14:	20000c24 	.word	0x20000c24
 8002d18:	200002f0 	.word	0x200002f0
 8002d1c:	20000900 	.word	0x20000900
 8002d20:	20000581 	.word	0x20000581
 8002d24:	40020800 	.word	0x40020800
 8002d28:	cccccccd 	.word	0xcccccccd
 8002d2c:	200008f4 	.word	0x200008f4

08002d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	; 0x50
 8002d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	2234      	movs	r2, #52	; 0x34
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00b fb38 	bl	800e3b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <SystemClock_Config+0xd4>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <SystemClock_Config+0xd4>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <SystemClock_Config+0xd4>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d70:	2300      	movs	r3, #0
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <SystemClock_Config+0xd8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <SystemClock_Config+0xd8>)
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <SystemClock_Config+0xd8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d90:	2309      	movs	r3, #9
 8002d92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002da8:	2308      	movs	r3, #8
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002dac:	235a      	movs	r3, #90	; 0x5a
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002db0:	2302      	movs	r3, #2
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002db4:	2302      	movs	r3, #2
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002db8:	2302      	movs	r3, #2
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f008 f813 	bl	800adec <HAL_RCC_OscConfig>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002dcc:	f000 fcc8 	bl	8003760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f007 fd34 	bl	800a858 <HAL_RCC_ClockConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002df6:	f000 fcb3 	bl	8003760 <Error_Handler>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3750      	adds	r7, #80	; 0x50
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000

08002e0c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_IWDG_Init+0x2c>)
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <MX_IWDG_Init+0x30>)
 8002e14:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <MX_IWDG_Init+0x2c>)
 8002e18:	2206      	movs	r2, #6
 8002e1a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 624;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_IWDG_Init+0x2c>)
 8002e1e:	f44f 721c 	mov.w	r2, #624	; 0x270
 8002e22:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_IWDG_Init+0x2c>)
 8002e26:	f007 fcc4 	bl	800a7b2 <HAL_IWDG_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002e30:	f000 fc96 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200008f4 	.word	0x200008f4
 8002e3c:	40003000 	.word	0x40003000

08002e40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <MX_SPI1_Init+0x68>)
 8002e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e8c:	220a      	movs	r2, #10
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <MX_SPI1_Init+0x64>)
 8002e92:	f008 fa49 	bl	800b328 <HAL_SPI_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e9c:	f000 fc60 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20001f8c 	.word	0x20001f8c
 8002ea8:	40013000 	.word	0x40013000

08002eac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <MX_SPI2_Init+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ebc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002edc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002ef8:	220a      	movs	r2, #10
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <MX_SPI2_Init+0x64>)
 8002efe:	f008 fa13 	bl	800b328 <HAL_SPI_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f08:	f000 fc2a 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000854 	.word	0x20000854
 8002f14:	40003800 	.word	0x40003800

08002f18 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <MX_SPI4_Init+0x68>)
 8002f20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f4c:	2218      	movs	r2, #24
 8002f4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f64:	220a      	movs	r2, #10
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <MX_SPI4_Init+0x64>)
 8002f6a:	f008 f9dd 	bl	800b328 <HAL_SPI_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002f74:	f000 fbf4 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000c24 	.word	0x20000c24
 8002f80:	40013400 	.word	0x40013400

08002f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08e      	sub	sp, #56	; 0x38
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	f107 0320 	add.w	r3, r7, #32
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
 8002fb0:	615a      	str	r2, [r3, #20]
 8002fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44999;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fbe:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fcc:	2263      	movs	r2, #99	; 0x63
 8002fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fdc:	4828      	ldr	r0, [pc, #160]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002fde:	f008 ff4b 	bl	800be78 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002fe8:	f000 fbba 	bl	8003760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4821      	ldr	r0, [pc, #132]	; (8003080 <MX_TIM2_Init+0xfc>)
 8002ffa:	f009 fbc1 	bl	800c780 <HAL_TIM_ConfigClockSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003004:	f000 fbac 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003008:	481d      	ldr	r0, [pc, #116]	; (8003080 <MX_TIM2_Init+0xfc>)
 800300a:	f009 f85d 	bl	800c0c8 <HAL_TIM_PWM_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003014:	f000 fba4 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003020:	f107 0320 	add.w	r3, r7, #32
 8003024:	4619      	mov	r1, r3
 8003026:	4816      	ldr	r0, [pc, #88]	; (8003080 <MX_TIM2_Init+0xfc>)
 8003028:	f009 ffaa 	bl	800cf80 <HAL_TIMEx_MasterConfigSynchronization>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003032:	f000 fb95 	bl	8003760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003036:	2360      	movs	r3, #96	; 0x60
 8003038:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800303e:	2302      	movs	r3, #2
 8003040:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	2200      	movs	r2, #0
 800304a:	4619      	mov	r1, r3
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <MX_TIM2_Init+0xfc>)
 800304e:	f009 fad5 	bl	800c5fc <HAL_TIM_PWM_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003058:	f000 fb82 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2204      	movs	r2, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4807      	ldr	r0, [pc, #28]	; (8003080 <MX_TIM2_Init+0xfc>)
 8003064:	f009 faca 	bl	800c5fc <HAL_TIM_PWM_ConfigChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800306e:	f000 fb77 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003072:	4803      	ldr	r0, [pc, #12]	; (8003080 <MX_TIM2_Init+0xfc>)
 8003074:	f003 fa3c 	bl	80064f0 <HAL_TIM_MspPostInit>

}
 8003078:	bf00      	nop
 800307a:	3738      	adds	r7, #56	; 0x38
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20001fe4 	.word	0x20001fe4

08003084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003098:	f107 0320 	add.w	r3, r7, #32
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <MX_TIM3_Init+0x100>)
 80030b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44999;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030bc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80030c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030ca:	2263      	movs	r2, #99	; 0x63
 80030cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030da:	4829      	ldr	r0, [pc, #164]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030dc:	f008 fecc 	bl	800be78 <HAL_TIM_Base_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030e6:	f000 fb3b 	bl	8003760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f4:	4619      	mov	r1, r3
 80030f6:	4822      	ldr	r0, [pc, #136]	; (8003180 <MX_TIM3_Init+0xfc>)
 80030f8:	f009 fb42 	bl	800c780 <HAL_TIM_ConfigClockSource>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003102:	f000 fb2d 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003106:	481e      	ldr	r0, [pc, #120]	; (8003180 <MX_TIM3_Init+0xfc>)
 8003108:	f008 ffde 	bl	800c0c8 <HAL_TIM_PWM_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003112:	f000 fb25 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800311e:	f107 0320 	add.w	r3, r7, #32
 8003122:	4619      	mov	r1, r3
 8003124:	4816      	ldr	r0, [pc, #88]	; (8003180 <MX_TIM3_Init+0xfc>)
 8003126:	f009 ff2b 	bl	800cf80 <HAL_TIMEx_MasterConfigSynchronization>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003130:	f000 fb16 	bl	8003760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003134:	2360      	movs	r3, #96	; 0x60
 8003136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800313c:	2302      	movs	r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2200      	movs	r2, #0
 8003148:	4619      	mov	r1, r3
 800314a:	480d      	ldr	r0, [pc, #52]	; (8003180 <MX_TIM3_Init+0xfc>)
 800314c:	f009 fa56 	bl	800c5fc <HAL_TIM_PWM_ConfigChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003156:	f000 fb03 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	2204      	movs	r2, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <MX_TIM3_Init+0xfc>)
 8003162:	f009 fa4b 	bl	800c5fc <HAL_TIM_PWM_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800316c:	f000 faf8 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003170:	4803      	ldr	r0, [pc, #12]	; (8003180 <MX_TIM3_Init+0xfc>)
 8003172:	f003 f9bd 	bl	80064f0 <HAL_TIM_MspPostInit>

}
 8003176:	bf00      	nop
 8003178:	3738      	adds	r7, #56	; 0x38
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000094c 	.word	0x2000094c
 8003184:	40000400 	.word	0x40000400

08003188 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319c:	463b      	mov	r3, r7
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <MX_TIM5_Init+0x94>)
 80031a6:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <MX_TIM5_Init+0x98>)
 80031a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 44;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <MX_TIM5_Init+0x94>)
 80031ac:	222c      	movs	r2, #44	; 0x2c
 80031ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <MX_TIM5_Init+0x94>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <MX_TIM5_Init+0x94>)
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <MX_TIM5_Init+0x94>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <MX_TIM5_Init+0x94>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031ca:	4814      	ldr	r0, [pc, #80]	; (800321c <MX_TIM5_Init+0x94>)
 80031cc:	f008 fe54 	bl	800be78 <HAL_TIM_Base_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80031d6:	f000 fac3 	bl	8003760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80031e0:	f107 0308 	add.w	r3, r7, #8
 80031e4:	4619      	mov	r1, r3
 80031e6:	480d      	ldr	r0, [pc, #52]	; (800321c <MX_TIM5_Init+0x94>)
 80031e8:	f009 faca 	bl	800c780 <HAL_TIM_ConfigClockSource>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80031f2:	f000 fab5 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031fe:	463b      	mov	r3, r7
 8003200:	4619      	mov	r1, r3
 8003202:	4806      	ldr	r0, [pc, #24]	; (800321c <MX_TIM5_Init+0x94>)
 8003204:	f009 febc 	bl	800cf80 <HAL_TIMEx_MasterConfigSynchronization>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800320e:	f000 faa7 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000904 	.word	0x20000904
 8003220:	40000c00 	.word	0x40000c00

08003224 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322a:	463b      	mov	r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <MX_TIM6_Init+0x64>)
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <MX_TIM6_Init+0x68>)
 8003236:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <MX_TIM6_Init+0x64>)
 800323a:	222c      	movs	r2, #44	; 0x2c
 800323c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <MX_TIM6_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <MX_TIM6_Init+0x64>)
 8003246:	f240 32e7 	movw	r2, #999	; 0x3e7
 800324a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <MX_TIM6_Init+0x64>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003252:	480d      	ldr	r0, [pc, #52]	; (8003288 <MX_TIM6_Init+0x64>)
 8003254:	f008 fe10 	bl	800be78 <HAL_TIM_Base_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800325e:	f000 fa7f 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800326a:	463b      	mov	r3, r7
 800326c:	4619      	mov	r1, r3
 800326e:	4806      	ldr	r0, [pc, #24]	; (8003288 <MX_TIM6_Init+0x64>)
 8003270:	f009 fe86 	bl	800cf80 <HAL_TIMEx_MasterConfigSynchronization>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800327a:	f000 fa71 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000d48 	.word	0x20000d48
 800328c:	40001000 	.word	0x40001000

08003290 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003296:	463b      	mov	r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <MX_TIM7_Init+0x68>)
 80032a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 44999;
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032a6:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80032aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4;
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032b4:	2204      	movs	r2, #4
 80032b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032c0:	f008 fdda 	bl	800be78 <HAL_TIM_Base_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80032ca:	f000 fa49 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032d6:	463b      	mov	r3, r7
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	; (80032f4 <MX_TIM7_Init+0x64>)
 80032dc:	f009 fe50 	bl	800cf80 <HAL_TIMEx_MasterConfigSynchronization>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80032e6:	f000 fa3b 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20002080 	.word	0x20002080
 80032f8:	40001400 	.word	0x40001400

080032fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_TIM10_Init+0x40>)
 8003302:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <MX_TIM10_Init+0x44>)
 8003304:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 44999;
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <MX_TIM10_Init+0x40>)
 8003308:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800330c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <MX_TIM10_Init+0x40>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49;
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <MX_TIM10_Init+0x40>)
 8003316:	2231      	movs	r2, #49	; 0x31
 8003318:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <MX_TIM10_Init+0x40>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_TIM10_Init+0x40>)
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_TIM10_Init+0x40>)
 8003328:	f008 fda6 	bl	800be78 <HAL_TIM_Base_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003332:	f000 fa15 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200008ac 	.word	0x200008ac
 8003340:	40014400 	.word	0x40014400

08003344 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <MX_TIM11_Init+0x40>)
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <MX_TIM11_Init+0x44>)
 800334c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 44999;
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <MX_TIM11_Init+0x40>)
 8003350:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003354:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <MX_TIM11_Init+0x40>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <MX_TIM11_Init+0x40>)
 800335e:	2263      	movs	r2, #99	; 0x63
 8003360:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <MX_TIM11_Init+0x40>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <MX_TIM11_Init+0x40>)
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_TIM11_Init+0x40>)
 8003370:	f008 fd82 	bl	800be78 <HAL_TIM_Base_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800337a:	f000 f9f1 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000bdc 	.word	0x20000bdc
 8003388:	40014800 	.word	0x40014800

0800338c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_TIM13_Init+0x40>)
 8003392:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <MX_TIM13_Init+0x44>)
 8003394:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 44;
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <MX_TIM13_Init+0x40>)
 8003398:	222c      	movs	r2, #44	; 0x2c
 800339a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_TIM13_Init+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <MX_TIM13_Init+0x40>)
 80033a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_TIM13_Init+0x40>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_TIM13_Init+0x40>)
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_TIM13_Init+0x40>)
 80033b8:	f008 fd5e 	bl	800be78 <HAL_TIM_Base_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80033c2:	f000 f9cd 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000a94 	.word	0x20000a94
 80033d0:	40001c00 	.word	0x40001c00

080033d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <MX_USART2_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 800340c:	f009 fe48 	bl	800d0a0 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f000 f9a3 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000202c 	.word	0x2000202c
 8003424:	40004400 	.word	0x40004400

08003428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MX_DMA_Init+0x3c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <MX_DMA_Init+0x3c>)
 8003438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <MX_DMA_Init+0x3c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2010      	movs	r0, #16
 8003450:	f006 fb93 	bl	8009b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003454:	2010      	movs	r0, #16
 8003456:	f006 fbac 	bl	8009bb2 <HAL_NVIC_EnableIRQ>

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	4bb1      	ldr	r3, [pc, #708]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4ab0      	ldr	r2, [pc, #704]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003488:	f043 0310 	orr.w	r3, r3, #16
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4bae      	ldr	r3, [pc, #696]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	4baa      	ldr	r3, [pc, #680]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4aa9      	ldr	r2, [pc, #676]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4ba7      	ldr	r3, [pc, #668]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4ba3      	ldr	r3, [pc, #652]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4aa2      	ldr	r2, [pc, #648]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b9c      	ldr	r3, [pc, #624]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a9b      	ldr	r2, [pc, #620]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b99      	ldr	r3, [pc, #612]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b95      	ldr	r3, [pc, #596]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a94      	ldr	r2, [pc, #592]	; (8003748 <MX_GPIO_Init+0x2e0>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b92      	ldr	r3, [pc, #584]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a8d      	ldr	r2, [pc, #564]	; (8003748 <MX_GPIO_Init+0x2e0>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <MX_GPIO_Init+0x2e0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 8003526:	2200      	movs	r2, #0
 8003528:	217f      	movs	r1, #127	; 0x7f
 800352a:	4888      	ldr	r0, [pc, #544]	; (800374c <MX_GPIO_Init+0x2e4>)
 800352c:	f007 f90e 	bl	800a74c <HAL_GPIO_WritePin>
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003530:	2200      	movs	r2, #0
 8003532:	f64f 610f 	movw	r1, #65039	; 0xfe0f
 8003536:	4886      	ldr	r0, [pc, #536]	; (8003750 <MX_GPIO_Init+0x2e8>)
 8003538:	f007 f908 	bl	800a74c <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin|mtr0_inB0_Pin
                          |mtr0_inA0_Pin|mtr0_inA1_Pin|mtr3_in0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cs_GPIO_Port, adc0_cs_Pin, GPIO_PIN_SET);
 800353c:	2201      	movs	r2, #1
 800353e:	2108      	movs	r1, #8
 8003540:	4884      	ldr	r0, [pc, #528]	; (8003754 <MX_GPIO_Init+0x2ec>)
 8003542:	f007 f903 	bl	800a74c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cnvst_GPIO_Port, adc0_cnvst_Pin, GPIO_PIN_SET);
 8003546:	2201      	movs	r2, #1
 8003548:	2110      	movs	r1, #16
 800354a:	4881      	ldr	r0, [pc, #516]	; (8003750 <MX_GPIO_Init+0x2e8>)
 800354c:	f007 f8fe 	bl	800a74c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 8003550:	2201      	movs	r2, #1
 8003552:	f241 4107 	movw	r1, #5127	; 0x1407
 8003556:	4880      	ldr	r0, [pc, #512]	; (8003758 <MX_GPIO_Init+0x2f0>)
 8003558:	f007 f8f8 	bl	800a74c <HAL_GPIO_WritePin>
                          |SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 800355c:	2201      	movs	r2, #1
 800355e:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8003562:	487a      	ldr	r0, [pc, #488]	; (800374c <MX_GPIO_Init+0x2e4>)
 8003564:	f007 f8f2 	bl	800a74c <HAL_GPIO_WritePin>
                          |tc3_cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003568:	2201      	movs	r2, #1
 800356a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800356e:	487b      	ldr	r0, [pc, #492]	; (800375c <MX_GPIO_Init+0x2f4>)
 8003570:	f007 f8ec 	bl	800a74c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin|mtr3_in1_Pin
 8003574:	2200      	movs	r2, #0
 8003576:	f640 619f 	movw	r1, #3743	; 0xe9f
 800357a:	4878      	ldr	r0, [pc, #480]	; (800375c <MX_GPIO_Init+0x2f4>)
 800357c:	f007 f8e6 	bl	800a74c <HAL_GPIO_WritePin>
                          |mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin|mtr1_inB0_Pin
                          |mtr1_inB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, mtr0_inB1_Pin|GPIO_3_Pin, GPIO_PIN_RESET);
 8003580:	2200      	movs	r2, #0
 8003582:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003586:	4873      	ldr	r0, [pc, #460]	; (8003754 <MX_GPIO_Init+0x2ec>)
 8003588:	f007 f8e0 	bl	800a74c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : en_vlv8_Pin en_vlv7_Pin en_vlv6_Pin en_vlv5_Pin
                           en_vlv4_Pin GPIO_1_Pin en_vlv0_Pin */
  GPIO_InitStruct.Pin = en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 800358c:	237f      	movs	r3, #127	; 0x7f
 800358e:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	2301      	movs	r3, #1
 8003592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	4619      	mov	r1, r3
 80035a2:	486a      	ldr	r0, [pc, #424]	; (800374c <MX_GPIO_Init+0x2e4>)
 80035a4:	f006 ff26 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv3_Pin en_vlv2_Pin en_vlv1_Pin LED0_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 80035a8:	f24e 030f 	movw	r3, #57359	; 0xe00f
 80035ac:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	4619      	mov	r1, r3
 80035c0:	4863      	ldr	r0, [pc, #396]	; (8003750 <MX_GPIO_Init+0x2e8>)
 80035c2:	f006 ff17 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall1A_Pin e_hall1B_Pin e_hall1C_Pin adc0_eoc_Pin */
  GPIO_InitStruct.Pin = e_hall1A_Pin|e_hall1B_Pin|e_hall1C_Pin|adc0_eoc_Pin;
 80035c6:	2317      	movs	r3, #23
 80035c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	485e      	ldr	r0, [pc, #376]	; (8003754 <MX_GPIO_Init+0x2ec>)
 80035da:	f006 ff0b 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cs_Pin mtr0_inB1_Pin */
  GPIO_InitStruct.Pin = adc0_cs_Pin|mtr0_inB1_Pin;
 80035de:	f640 0308 	movw	r3, #2056	; 0x808
 80035e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	4619      	mov	r1, r3
 80035f6:	4857      	ldr	r0, [pc, #348]	; (8003754 <MX_GPIO_Init+0x2ec>)
 80035f8:	f006 fefc 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cnvst_Pin mtr0_inB0_Pin mtr0_inA0_Pin mtr0_inA1_Pin
                           mtr3_in0_Pin */
  GPIO_InitStruct.Pin = adc0_cnvst_Pin|mtr0_inB0_Pin|mtr0_inA0_Pin|mtr0_inA1_Pin
 80035fc:	f641 6310 	movw	r3, #7696	; 0x1e10
 8003600:	61fb      	str	r3, [r7, #28]
                          |mtr3_in0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003602:	2301      	movs	r3, #1
 8003604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 031c 	add.w	r3, r7, #28
 8003612:	4619      	mov	r1, r3
 8003614:	484e      	ldr	r0, [pc, #312]	; (8003750 <MX_GPIO_Init+0x2e8>)
 8003616:	f006 feed 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : adc1_eoc_Pin */
  GPIO_InitStruct.Pin = adc1_eoc_Pin;
 800361a:	2320      	movs	r3, #32
 800361c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc1_eoc_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 031c 	add.w	r3, r7, #28
 800362a:	4619      	mov	r1, r3
 800362c:	4848      	ldr	r0, [pc, #288]	; (8003750 <MX_GPIO_Init+0x2e8>)
 800362e:	f006 fee1 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc1_cs_Pin adc1_cnvst_Pin adc2_cs_Pin tc4_cs_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 8003632:	f241 4307 	movw	r3, #5127	; 0x1407
 8003636:	61fb      	str	r3, [r7, #28]
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003638:	2301      	movs	r3, #1
 800363a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4843      	ldr	r0, [pc, #268]	; (8003758 <MX_GPIO_Init+0x2f0>)
 800364c:	f006 fed2 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : adc2_eoc_Pin */
  GPIO_InitStruct.Pin = adc2_eoc_Pin;
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003654:	2300      	movs	r3, #0
 8003656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc2_eoc_GPIO_Port, &GPIO_InitStruct);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	483a      	ldr	r0, [pc, #232]	; (800374c <MX_GPIO_Init+0x2e4>)
 8003664:	f006 fec6 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : adc2_cnvst_Pin tc0_cs_Pin tc1_cs_Pin tc2_cs_Pin
                           tc3_cs_Pin */
  GPIO_InitStruct.Pin = adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 8003668:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 800366c:	61fb      	str	r3, [r7, #28]
                          |tc3_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366e:	2301      	movs	r3, #1
 8003670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003676:	2303      	movs	r3, #3
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	4619      	mov	r1, r3
 8003680:	4832      	ldr	r0, [pc, #200]	; (800374c <MX_GPIO_Init+0x2e4>)
 8003682:	f006 feb7 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin mtr2_in0_Pin mtr2_in1_Pin mtr2_in2_Pin
                           mtr3_in1_Pin mtr3_in2_Pin mtr1_inA0_Pin mtr1_inA1_Pin
                           mtr1_inB0_Pin mtr1_inB1_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin
 8003686:	f640 739f 	movw	r3, #3999	; 0xf9f
 800368a:	61fb      	str	r3, [r7, #28]
                          |mtr3_in1_Pin|mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin
                          |mtr1_inB0_Pin|mtr1_inB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368c:	2301      	movs	r3, #1
 800368e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	482f      	ldr	r0, [pc, #188]	; (800375c <MX_GPIO_Init+0x2f4>)
 80036a0:	f006 fea8 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall0A_Pin e_hall0B_Pin e_hall0C_Pin */
  GPIO_InitStruct.Pin = e_hall0A_Pin|e_hall0B_Pin|e_hall0C_Pin;
 80036a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80036a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b2:	f107 031c 	add.w	r3, r7, #28
 80036b6:	4619      	mov	r1, r3
 80036b8:	4828      	ldr	r0, [pc, #160]	; (800375c <MX_GPIO_Init+0x2f4>)
 80036ba:	f006 fe9b 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr2_pwm0_Pin mtr2_pwm1_Pin mtr2_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr2_pwm0_Pin|mtr2_pwm1_Pin|mtr2_pwm2_Pin;
 80036be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036d0:	2303      	movs	r3, #3
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	4619      	mov	r1, r3
 80036da:	481d      	ldr	r0, [pc, #116]	; (8003750 <MX_GPIO_Init+0x2e8>)
 80036dc:	f006 fe8a 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr3_pwm0_Pin mtr3_pwm1_Pin mtr3_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr3_pwm0_Pin|mtr3_pwm1_Pin|mtr3_pwm2_Pin;
 80036e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80036e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4815      	ldr	r0, [pc, #84]	; (8003754 <MX_GPIO_Init+0x2ec>)
 80036fe:	f006 fe79 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 8003702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003708:	2301      	movs	r3, #1
 800370a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003710:	2300      	movs	r3, #0
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <MX_GPIO_Init+0x2ec>)
 800371c:	f006 fe6a 	bl	800a3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003720:	23c0      	movs	r3, #192	; 0xc0
 8003722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003730:	2307      	movs	r3, #7
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	4619      	mov	r1, r3
 800373a:	4807      	ldr	r0, [pc, #28]	; (8003758 <MX_GPIO_Init+0x2f0>)
 800373c:	f006 fe5a 	bl	800a3f4 <HAL_GPIO_Init>

}
 8003740:	bf00      	nop
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	40021000 	.word	0x40021000
 8003750:	40020800 	.word	0x40020800
 8003754:	40020000 	.word	0x40020000
 8003758:	40020400 	.word	0x40020400
 800375c:	40020c00 	.word	0x40020c00

08003760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003764:	b672      	cpsid	i
}
 8003766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003768:	e7fe      	b.n	8003768 <Error_Handler+0x8>
	...

0800376c <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003772:	b672      	cpsid	i
}
 8003774:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8003776:	237d      	movs	r3, #125	; 0x7d
 8003778:	4a94      	ldr	r2, [pc, #592]	; (80039cc <read_nonvolatile_variables+0x260>)
 800377a:	2100      	movs	r1, #0
 800377c:	4894      	ldr	r0, [pc, #592]	; (80039d0 <read_nonvolatile_variables+0x264>)
 800377e:	f006 f828 	bl	80097d2 <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 8003782:	4b92      	ldr	r3, [pc, #584]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <read_nonvolatile_variables+0x22>
		return 0;
 800378a:	2300      	movs	r3, #0
 800378c:	e22c      	b.n	8003be8 <read_nonvolatile_variables+0x47c>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 800378e:	4b8f      	ldr	r3, [pc, #572]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8003794:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003796:	789b      	ldrb	r3, [r3, #2]
 8003798:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 800379a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a4:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80039d4 <read_nonvolatile_variables+0x268>
 80037a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 80037ac:	4b8a      	ldr	r3, [pc, #552]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 80037ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80037b2:	4b86      	ldr	r3, [pc, #536]	; (80039cc <read_nonvolatile_variables+0x260>)
 80037b4:	78db      	ldrb	r3, [r3, #3]
 80037b6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80037b8:	4b84      	ldr	r3, [pc, #528]	; (80039cc <read_nonvolatile_variables+0x260>)
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80037be:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c8:	eddf 6a82 	vldr	s13, [pc, #520]	; 80039d4 <read_nonvolatile_variables+0x268>
 80037cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 80037d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <read_nonvolatile_variables+0x260>)
 80037d8:	795b      	ldrb	r3, [r3, #5]
 80037da:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <read_nonvolatile_variables+0x260>)
 80037de:	799b      	ldrb	r3, [r3, #6]
 80037e0:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037e2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ec:	eddf 6a79 	vldr	s13, [pc, #484]	; 80039d4 <read_nonvolatile_variables+0x268>
 80037f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037f4:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 80037f6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80037fa:	4b74      	ldr	r3, [pc, #464]	; (80039cc <read_nonvolatile_variables+0x260>)
 80037fc:	79db      	ldrb	r3, [r3, #7]
 80037fe:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8003800:	4b72      	ldr	r3, [pc, #456]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003802:	7a1b      	ldrb	r3, [r3, #8]
 8003804:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003806:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003810:	eddf 6a70 	vldr	s13, [pc, #448]	; 80039d4 <read_nonvolatile_variables+0x268>
 8003814:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 800381a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800381e:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003820:	7a5b      	ldrb	r3, [r3, #9]
 8003822:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8003824:	4b69      	ldr	r3, [pc, #420]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003826:	7a9b      	ldrb	r3, [r3, #10]
 8003828:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800382a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003834:	eddf 6a67 	vldr	s13, [pc, #412]	; 80039d4 <read_nonvolatile_variables+0x268>
 8003838:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800383c:	4b66      	ldr	r3, [pc, #408]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 800383e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8003842:	4b62      	ldr	r3, [pc, #392]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003844:	7adb      	ldrb	r3, [r3, #11]
 8003846:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8003848:	4b60      	ldr	r3, [pc, #384]	; (80039cc <read_nonvolatile_variables+0x260>)
 800384a:	7b1b      	ldrb	r3, [r3, #12]
 800384c:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 800384e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003858:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80039d4 <read_nonvolatile_variables+0x268>
 800385c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8003860:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 8003862:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8003866:	4b59      	ldr	r3, [pc, #356]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003868:	7b5b      	ldrb	r3, [r3, #13]
 800386a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 800386c:	4b57      	ldr	r3, [pc, #348]	; (80039cc <read_nonvolatile_variables+0x260>)
 800386e:	7b9b      	ldrb	r3, [r3, #14]
 8003870:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8003872:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003876:	7bdb      	ldrb	r3, [r3, #15]
 8003878:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 800387a:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <read_nonvolatile_variables+0x260>)
 800387e:	7c1b      	ldrb	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8003882:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80039d4 <read_nonvolatile_variables+0x268>
 8003890:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 8003896:	edc3 7a04 	vstr	s15, [r3, #16]
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 800389a:	4b4c      	ldr	r3, [pc, #304]	; (80039cc <read_nonvolatile_variables+0x260>)
 800389c:	7c5b      	ldrb	r3, [r3, #17]
 800389e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038a2:	7c9b      	ldrb	r3, [r3, #18]
 80038a4:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80038a6:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038aa:	7cdb      	ldrb	r3, [r3, #19]
 80038ac:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 80038ae:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038b2:	7d1b      	ldrb	r3, [r3, #20]
 80038b4:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 80038b6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80039d4 <read_nonvolatile_variables+0x268>
 80038c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 80038ca:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038ce:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038d0:	7d5b      	ldrb	r3, [r3, #21]
 80038d2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80038d4:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038d6:	7d9b      	ldrb	r3, [r3, #22]
 80038d8:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038da:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038ec:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 80038ee:	edc3 7a08 	vstr	s15, [r3, #32]
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038f4:	7ddb      	ldrb	r3, [r3, #23]
 80038f6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 80038f8:	4b34      	ldr	r3, [pc, #208]	; (80039cc <read_nonvolatile_variables+0x260>)
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80038fe:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003908:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800390c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 8003912:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003918:	7f5b      	ldrb	r3, [r3, #29]
 800391a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <read_nonvolatile_variables+0x260>)
 800391e:	7f9b      	ldrb	r3, [r3, #30]
 8003920:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8003922:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8003924:	ee07 3a90 	vmov	s15, r3
 8003928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800392c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003930:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 8003936:	edc3 7a07 	vstr	s15, [r3, #28]
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <read_nonvolatile_variables+0x260>)
 800393c:	7fdb      	ldrb	r3, [r3, #31]
 800393e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8003948:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003952:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003956:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 800395a:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <read_nonvolatile_variables+0x26c>)
 800395c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003960:	2300      	movs	r3, #0
 8003962:	71fb      	strb	r3, [r7, #7]
 8003964:	e02c      	b.n	80039c0 <read_nonvolatile_variables+0x254>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3325      	adds	r3, #37	; 0x25
 800396c:	4a17      	ldr	r2, [pc, #92]	; (80039cc <read_nonvolatile_variables+0x260>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3326      	adds	r3, #38	; 0x26
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <read_nonvolatile_variables+0x260>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800397e:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	3327      	adds	r3, #39	; 0x27
 8003988:	4910      	ldr	r1, [pc, #64]	; (80039cc <read_nonvolatile_variables+0x260>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 800398e:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	330a      	adds	r3, #10
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <read_nonvolatile_variables+0x260>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 800399c:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039a6:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80039a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80039ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <read_nonvolatile_variables+0x270>)
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	3301      	adds	r3, #1
 80039be:	71fb      	strb	r3, [r7, #7]
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d9cf      	bls.n	8003966 <read_nonvolatile_variables+0x1fa>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	71bb      	strb	r3, [r7, #6]
 80039ca:	e036      	b.n	8003a3a <read_nonvolatile_variables+0x2ce>
 80039cc:	200020cc 	.word	0x200020cc
 80039d0:	20002170 	.word	0x20002170
 80039d4:	42c80000 	.word	0x42c80000
 80039d8:	20000584 	.word	0x20000584
 80039dc:	2000025c 	.word	0x2000025c
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039e0:	79bb      	ldrb	r3, [r7, #6]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	333d      	adds	r3, #61	; 0x3d
 80039e6:	4a82      	ldr	r2, [pc, #520]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80039ec:	79bb      	ldrb	r3, [r7, #6]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	333e      	adds	r3, #62	; 0x3e
 80039f2:	4a7f      	ldr	r2, [pc, #508]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039f8:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80039fc:	79bb      	ldrb	r3, [r7, #6]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	333f      	adds	r3, #63	; 0x3f
 8003a02:	497b      	ldr	r1, [pc, #492]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003a08:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003a0a:	79bb      	ldrb	r3, [r7, #6]
 8003a0c:	3310      	adds	r3, #16
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4977      	ldr	r1, [pc, #476]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003a16:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003a20:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003a22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003a2a:	4a72      	ldr	r2, [pc, #456]	; (8003bf4 <read_nonvolatile_variables+0x488>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003a34:	79bb      	ldrb	r3, [r7, #6]
 8003a36:	3301      	adds	r3, #1
 8003a38:	71bb      	strb	r3, [r7, #6]
 8003a3a:	79bb      	ldrb	r3, [r7, #6]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d9cf      	bls.n	80039e0 <read_nonvolatile_variables+0x274>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 8003a40:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a42:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003a46:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <read_nonvolatile_variables+0x48c>)
 8003a48:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 8003a4a:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a4c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003a50:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <read_nonvolatile_variables+0x48c>)
 8003a52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a58:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a5c:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8003a5e:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003a64:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a66:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a6a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003a6e:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8003a70:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a74:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003a78:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003a80:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a84:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003a88:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003a8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003a90:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003a9c:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003a9e:	4b54      	ldr	r3, [pc, #336]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003aa0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003aa4:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 8003aa6:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003aa8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003aac:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003ab8:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8003aba:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003abc:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8003ac0:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003ac2:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003ac4:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aca:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8003acc:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad2:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003ade:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003ae2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003ae6:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003aea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003aee:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003afa:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003afc:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003afe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b02:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003b04:	4b3a      	ldr	r3, [pc, #232]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b06:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003b0a:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003b0c:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003b14:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003b16:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b1a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003b1e:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003b20:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2a:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003c00 <read_nonvolatile_variables+0x494>
 8003b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <read_nonvolatile_variables+0x498>)
 8003b34:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	717b      	strb	r3, [r7, #5]
 8003b3c:	e048      	b.n	8003bd0 <read_nonvolatile_variables+0x464>
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b3e:	797b      	ldrb	r3, [r7, #5]
 8003b40:	3316      	adds	r3, #22
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] << 8) |
 8003b4a:	797b      	ldrb	r3, [r7, #5]
 8003b4c:	3316      	adds	r3, #22
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	021b      	lsls	r3, r3, #8
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b58:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] << 16) |
 8003b5c:	797b      	ldrb	r3, [r7, #5]
 8003b5e:	3316      	adds	r3, #22
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] << 8) |
 8003b6a:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b6c:	797b      	ldrb	r3, [r7, #5]
 8003b6e:	3316      	adds	r3, #22
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	3303      	adds	r3, #3
 8003b74:	491e      	ldr	r1, [pc, #120]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] << 16) |
 8003b7a:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b84:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b86:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003c00 <read_nonvolatile_variables+0x494>
 8003b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <read_nonvolatile_variables+0x49c>)
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_offset[i] = ((nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] << 0) |
 8003b98:	797b      	ldrb	r3, [r7, #5]
 8003b9a:	3338      	adds	r3, #56	; 0x38
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 1] << 8));
 8003ba4:	797b      	ldrb	r3, [r7, #5]
 8003ba6:	3338      	adds	r3, #56	; 0x38
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003bae:	5cd3      	ldrb	r3, [r2, r3]
 8003bb0:	021b      	lsls	r3, r3, #8
		pt_cal_offset[i] = ((nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] << 0) |
 8003bb2:	ea41 0203 	orr.w	r2, r1, r3
 8003bb6:	797b      	ldrb	r3, [r7, #5]
 8003bb8:	ee07 2a90 	vmov	s15, r2
 8003bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <read_nonvolatile_variables+0x4a0>)
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003bca:	797b      	ldrb	r3, [r7, #5]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	717b      	strb	r3, [r7, #5]
 8003bd0:	797b      	ldrb	r3, [r7, #5]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d9b3      	bls.n	8003b3e <read_nonvolatile_variables+0x3d2>
	}

	// Autosequence automatic abort enable
	autosequence.enable_auto_aborts = nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR];
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <read_nonvolatile_variables+0x484>)
 8003bd8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <read_nonvolatile_variables+0x490>)
 8003bde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  __ASM volatile ("cpsie i" : : : "memory");
 8003be2:	b662      	cpsie	i
}
 8003be4:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM

	// Successful read
	return 1;
 8003be6:	2301      	movs	r3, #1
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200020cc 	.word	0x200020cc
 8003bf4:	20000274 	.word	0x20000274
 8003bf8:	20000584 	.word	0x20000584
 8003bfc:	2000062c 	.word	0x2000062c
 8003c00:	461c4000 	.word	0x461c4000
 8003c04:	200002e0 	.word	0x200002e0
 8003c08:	2000027c 	.word	0x2000027c
 8003c0c:	20000294 	.word	0x20000294

08003c10 <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c16:	b672      	cpsid	i
}
 8003c18:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 8003c1a:	4bcb      	ldr	r3, [pc, #812]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 8003c20:	4bca      	ldr	r3, [pc, #808]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003c22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c26:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c32:	ee17 3a90 	vmov	r3, s15
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4bc3      	ldr	r3, [pc, #780]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003c3c:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 8003c3e:	4bc3      	ldr	r3, [pc, #780]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003c40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c44:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 3a90 	vmov	r3, s15
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4bba      	ldr	r3, [pc, #744]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003c5e:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8003c60:	4bba      	ldr	r3, [pc, #744]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003c62:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c66:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c72:	ee17 3a90 	vmov	r3, s15
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4bb3      	ldr	r3, [pc, #716]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003c7c:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 8003c7e:	4bb3      	ldr	r3, [pc, #716]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003c80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c84:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c90:	ee17 3a90 	vmov	r3, s15
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	4baa      	ldr	r3, [pc, #680]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003c9e:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8003ca0:	4baa      	ldr	r3, [pc, #680]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003ca2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003ca6:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb2:	ee17 3a90 	vmov	r3, s15
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4ba3      	ldr	r3, [pc, #652]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003cbc:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 8003cbe:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003cc0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003cc4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd0:	ee17 3a90 	vmov	r3, s15
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	4b9a      	ldr	r3, [pc, #616]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003cde:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8003ce0:	4b9a      	ldr	r3, [pc, #616]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003ce2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003ce6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf2:	ee17 3a90 	vmov	r3, s15
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003cfc:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 8003cfe:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003d00:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003d04:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d10:	ee17 3a90 	vmov	r3, s15
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b8a      	ldr	r3, [pc, #552]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003d1e:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 8003d20:	4b8a      	ldr	r3, [pc, #552]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003d22:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d26:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d32:	ee17 3a90 	vmov	r3, s15
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b83      	ldr	r3, [pc, #524]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003d3c:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 8003d3e:	4b83      	ldr	r3, [pc, #524]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003d40:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d44:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d50:	ee17 3a90 	vmov	r3, s15
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b7a      	ldr	r3, [pc, #488]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003d5e:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8003d60:	4b7a      	ldr	r3, [pc, #488]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003d62:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d66:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d72:	ee17 3a90 	vmov	r3, s15
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003d7c:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003d80:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d84:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d90:	ee17 3a90 	vmov	r3, s15
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003d9e:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003da6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003db2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003db6:	793a      	ldrb	r2, [r7, #4]
 8003db8:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003dba:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 8003dbc:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003dbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dc2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dce:	ee17 3a90 	vmov	r3, s15
 8003dd2:	121b      	asrs	r3, r3, #8
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003dd8:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 8003dda:	4b5c      	ldr	r3, [pc, #368]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003ddc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003de0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dec:	ee17 3a90 	vmov	r3, s15
 8003df0:	141b      	asrs	r3, r3, #16
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	4b54      	ldr	r3, [pc, #336]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003df6:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8003df8:	4b54      	ldr	r3, [pc, #336]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003dfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dfe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0a:	ee17 3a90 	vmov	r3, s15
 8003e0e:	161b      	asrs	r3, r3, #24
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003e14:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003e18:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e1c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e28:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e2c:	793a      	ldrb	r2, [r7, #4]
 8003e2e:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003e30:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 8003e32:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003e34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e38:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e44:	ee17 3a90 	vmov	r3, s15
 8003e48:	121b      	asrs	r3, r3, #8
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003e4e:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 8003e50:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003e52:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e56:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e62:	ee17 3a90 	vmov	r3, s15
 8003e66:	141b      	asrs	r3, r3, #16
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003e6c:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003e70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f50 <save_nonvolatile_variables+0x340>
 8003e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e80:	ee17 3a90 	vmov	r3, s15
 8003e84:	161b      	asrs	r3, r3, #24
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003e8a:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003e8c:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003e8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e9e:	ee17 3a90 	vmov	r3, s15
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003ea8:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003eaa:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003eac:	edd3 7a08 	vldr	s15, [r3, #32]
 8003eb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ebc:	ee17 3a90 	vmov	r3, s15
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	121b      	asrs	r3, r3, #8
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003eca:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003ece:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ed2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ede:	ee17 3a90 	vmov	r3, s15
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003ee8:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003eec:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ef0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efc:	ee17 3a90 	vmov	r3, s15
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	121b      	asrs	r3, r3, #8
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003f0a:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003f0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f1e:	ee17 3a90 	vmov	r3, s15
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <save_nonvolatile_variables+0x338>)
 8003f28:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <save_nonvolatile_variables+0x33c>)
 8003f2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3c:	ee17 3a90 	vmov	r3, s15
 8003f40:	b21b      	sxth	r3, r3
 8003f42:	121b      	asrs	r3, r3, #8
 8003f44:	e006      	b.n	8003f54 <save_nonvolatile_variables+0x344>
 8003f46:	bf00      	nop
 8003f48:	200020cc 	.word	0x200020cc
 8003f4c:	20000584 	.word	0x20000584
 8003f50:	42c80000 	.word	0x42c80000
 8003f54:	b21b      	sxth	r3, r3
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b40      	ldr	r3, [pc, #256]	; (800405c <save_nonvolatile_variables+0x44c>)
 8003f5a:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <save_nonvolatile_variables+0x450>)
 8003f5e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6e:	ee17 3a90 	vmov	r3, s15
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <save_nonvolatile_variables+0x44c>)
 8003f78:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <save_nonvolatile_variables+0x450>)
 8003f7c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8c:	ee17 3a90 	vmov	r3, s15
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	121b      	asrs	r3, r3, #8
 8003f94:	b21b      	sxth	r3, r3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <save_nonvolatile_variables+0x44c>)
 8003f9a:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e055      	b.n	8004050 <save_nonvolatile_variables+0x440>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <save_nonvolatile_variables+0x454>)
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fbc:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3325      	adds	r3, #37	; 0x25
 8003fc6:	7939      	ldrb	r1, [r7, #4]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <save_nonvolatile_variables+0x44c>)
 8003fca:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <save_nonvolatile_variables+0x454>)
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe4:	ee17 3a90 	vmov	r3, s15
 8003fe8:	121a      	asrs	r2, r3, #8
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3326      	adds	r3, #38	; 0x26
 8003ff0:	b2d1      	uxtb	r1, r2
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <save_nonvolatile_variables+0x44c>)
 8003ff4:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <save_nonvolatile_variables+0x454>)
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800400a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800400e:	ee17 3a90 	vmov	r3, s15
 8004012:	141a      	asrs	r2, r3, #16
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3327      	adds	r3, #39	; 0x27
 800401a:	b2d1      	uxtb	r1, r2
 800401c:	4a0f      	ldr	r2, [pc, #60]	; (800405c <save_nonvolatile_variables+0x44c>)
 800401e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <save_nonvolatile_variables+0x454>)
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004038:	ee17 3a90 	vmov	r3, s15
 800403c:	161a      	asrs	r2, r3, #24
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	330a      	adds	r3, #10
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	b2d1      	uxtb	r1, r2
 8004046:	4a05      	ldr	r2, [pc, #20]	; (800405c <save_nonvolatile_variables+0x44c>)
 8004048:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3301      	adds	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d9a6      	bls.n	8003fa4 <save_nonvolatile_variables+0x394>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8004056:	2300      	movs	r3, #0
 8004058:	73bb      	strb	r3, [r7, #14]
 800405a:	e05b      	b.n	8004114 <save_nonvolatile_variables+0x504>
 800405c:	200020cc 	.word	0x200020cc
 8004060:	20000584 	.word	0x20000584
 8004064:	2000025c 	.word	0x2000025c
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	4a84      	ldr	r2, [pc, #528]	; (800427c <save_nonvolatile_variables+0x66c>)
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004080:	edc7 7a01 	vstr	s15, [r7, #4]
 8004084:	7bbb      	ldrb	r3, [r7, #14]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	333d      	adds	r3, #61	; 0x3d
 800408a:	7939      	ldrb	r1, [r7, #4]
 800408c:	4a7c      	ldr	r2, [pc, #496]	; (8004280 <save_nonvolatile_variables+0x670>)
 800408e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 8004090:	7bbb      	ldrb	r3, [r7, #14]
 8004092:	4a7a      	ldr	r2, [pc, #488]	; (800427c <save_nonvolatile_variables+0x66c>)
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a8:	ee17 3a90 	vmov	r3, s15
 80040ac:	121a      	asrs	r2, r3, #8
 80040ae:	7bbb      	ldrb	r3, [r7, #14]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	333e      	adds	r3, #62	; 0x3e
 80040b4:	b2d1      	uxtb	r1, r2
 80040b6:	4a72      	ldr	r2, [pc, #456]	; (8004280 <save_nonvolatile_variables+0x670>)
 80040b8:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 80040ba:	7bbb      	ldrb	r3, [r7, #14]
 80040bc:	4a6f      	ldr	r2, [pc, #444]	; (800427c <save_nonvolatile_variables+0x66c>)
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d2:	ee17 3a90 	vmov	r3, s15
 80040d6:	141a      	asrs	r2, r3, #16
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	333f      	adds	r3, #63	; 0x3f
 80040de:	b2d1      	uxtb	r1, r2
 80040e0:	4a67      	ldr	r2, [pc, #412]	; (8004280 <save_nonvolatile_variables+0x670>)
 80040e2:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 80040e4:	7bbb      	ldrb	r3, [r7, #14]
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <save_nonvolatile_variables+0x66c>)
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	ee17 3a90 	vmov	r3, s15
 8004100:	161a      	asrs	r2, r3, #24
 8004102:	7bbb      	ldrb	r3, [r7, #14]
 8004104:	3310      	adds	r3, #16
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	b2d1      	uxtb	r1, r2
 800410a:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <save_nonvolatile_variables+0x670>)
 800410c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	3301      	adds	r3, #1
 8004112:	73bb      	strb	r3, [r7, #14]
 8004114:	7bbb      	ldrb	r3, [r7, #14]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d9a6      	bls.n	8004068 <save_nonvolatile_variables+0x458>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 800411a:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <save_nonvolatile_variables+0x674>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b57      	ldr	r3, [pc, #348]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <save_nonvolatile_variables+0x674>)
 8004128:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 0;
 8004134:	4b54      	ldr	r3, [pc, #336]	; (8004288 <save_nonvolatile_variables+0x678>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b51      	ldr	r3, [pc, #324]	; (8004280 <save_nonvolatile_variables+0x670>)
 800413c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 8;
 8004140:	4b51      	ldr	r3, [pc, #324]	; (8004288 <save_nonvolatile_variables+0x678>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <save_nonvolatile_variables+0x670>)
 800414a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 16;
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <save_nonvolatile_variables+0x678>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004158:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 24;
 800415c:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <save_nonvolatile_variables+0x678>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	0e1b      	lsrs	r3, r3, #24
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004166:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <save_nonvolatile_variables+0x678>)
 800416c:	889b      	ldrh	r3, [r3, #4]
 800416e:	b29b      	uxth	r3, r3
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004174:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <save_nonvolatile_variables+0x678>)
 800417a:	889b      	ldrh	r3, [r3, #4]
 800417c:	b29b      	uxth	r3, r3
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	b29b      	uxth	r3, r3
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <save_nonvolatile_variables+0x678>)
 800418c:	88db      	ldrh	r3, [r3, #6]
 800418e:	b29b      	uxth	r3, r3
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <save_nonvolatile_variables+0x678>)
 800419a:	88db      	ldrh	r3, [r3, #6]
 800419c:	b29b      	uxth	r3, r3
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_delay_ms;
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <save_nonvolatile_variables+0x678>)
 80041ac:	7a1b      	ldrb	r3, [r3, #8]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	4b33      	ldr	r3, [pc, #204]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041b2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <save_nonvolatile_variables+0x678>)
 80041b8:	895b      	ldrh	r3, [r3, #10]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 80041c4:	4b30      	ldr	r3, [pc, #192]	; (8004288 <save_nonvolatile_variables+0x678>)
 80041c6:	895b      	ldrh	r3, [r3, #10]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <save_nonvolatile_variables+0x678>)
 80041d8:	899b      	ldrh	r3, [r3, #12]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <save_nonvolatile_variables+0x678>)
 80041e6:	899b      	ldrh	r3, [r3, #12]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	4b23      	ldr	r3, [pc, #140]	; (8004280 <save_nonvolatile_variables+0x670>)
 80041f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 80041f6:	4b25      	ldr	r3, [pc, #148]	; (800428c <save_nonvolatile_variables+0x67c>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004290 <save_nonvolatile_variables+0x680>
 8004200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004208:	edc7 7a01 	vstr	s15, [r7, #4]
 800420c:	793a      	ldrb	r2, [r7, #4]
 800420e:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <save_nonvolatile_variables+0x67c>)
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004290 <save_nonvolatile_variables+0x680>
 800421e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004226:	ee17 3a90 	vmov	r3, s15
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004230:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <save_nonvolatile_variables+0x67c>)
 8004236:	edd3 7a00 	vldr	s15, [r3]
 800423a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004290 <save_nonvolatile_variables+0x680>
 800423e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 3a90 	vmov	r3, s15
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004250:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <save_nonvolatile_variables+0x67c>)
 8004256:	edd3 7a00 	vldr	s15, [r3]
 800425a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004290 <save_nonvolatile_variables+0x680>
 800425e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004266:	ee17 3a90 	vmov	r3, s15
 800426a:	0e1b      	lsrs	r3, r3, #24
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <save_nonvolatile_variables+0x670>)
 8004270:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8004274:	2300      	movs	r3, #0
 8004276:	737b      	strb	r3, [r7, #13]
 8004278:	e08a      	b.n	8004390 <save_nonvolatile_variables+0x780>
 800427a:	bf00      	nop
 800427c:	20000274 	.word	0x20000274
 8004280:	200020cc 	.word	0x200020cc
 8004284:	20000584 	.word	0x20000584
 8004288:	2000062c 	.word	0x2000062c
 800428c:	200002e0 	.word	0x200002e0
 8004290:	461c4000 	.word	0x461c4000
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 0;
 8004294:	7b7b      	ldrb	r3, [r7, #13]
 8004296:	4a4d      	ldr	r2, [pc, #308]	; (80043cc <save_nonvolatile_variables+0x7bc>)
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80043d0 <save_nonvolatile_variables+0x7c0>
 80042a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80042b0:	7b7b      	ldrb	r3, [r7, #13]
 80042b2:	3316      	adds	r3, #22
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	7939      	ldrb	r1, [r7, #4]
 80042b8:	4a46      	ldr	r2, [pc, #280]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 80042ba:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 8;
 80042bc:	7b7b      	ldrb	r3, [r7, #13]
 80042be:	4a43      	ldr	r2, [pc, #268]	; (80043cc <save_nonvolatile_variables+0x7bc>)
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80043d0 <save_nonvolatile_variables+0x7c0>
 80042cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d4:	ee17 3a90 	vmov	r3, s15
 80042d8:	121a      	asrs	r2, r3, #8
 80042da:	7b7b      	ldrb	r3, [r7, #13]
 80042dc:	3316      	adds	r3, #22
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	3301      	adds	r3, #1
 80042e2:	b2d1      	uxtb	r1, r2
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 80042e6:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 16;
 80042e8:	7b7b      	ldrb	r3, [r7, #13]
 80042ea:	4a38      	ldr	r2, [pc, #224]	; (80043cc <save_nonvolatile_variables+0x7bc>)
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80043d0 <save_nonvolatile_variables+0x7c0>
 80042f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004300:	ee17 3a90 	vmov	r3, s15
 8004304:	141a      	asrs	r2, r3, #16
 8004306:	7b7b      	ldrb	r3, [r7, #13]
 8004308:	3316      	adds	r3, #22
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3302      	adds	r3, #2
 800430e:	b2d1      	uxtb	r1, r2
 8004310:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 8004312:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 24;
 8004314:	7b7b      	ldrb	r3, [r7, #13]
 8004316:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <save_nonvolatile_variables+0x7bc>)
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043d0 <save_nonvolatile_variables+0x7c0>
 8004324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800432c:	ee17 3a90 	vmov	r3, s15
 8004330:	161a      	asrs	r2, r3, #24
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	3316      	adds	r3, #22
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	3303      	adds	r3, #3
 800433a:	b2d1      	uxtb	r1, r2
 800433c:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 800433e:	54d1      	strb	r1, [r2, r3]

		nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] = ((int16_t) (pt_cal_offset[i])) >> 0;
 8004340:	7b7b      	ldrb	r3, [r7, #13]
 8004342:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <save_nonvolatile_variables+0x7c8>)
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004350:	ee17 3a90 	vmov	r3, s15
 8004354:	b21a      	sxth	r2, r3
 8004356:	7b7b      	ldrb	r3, [r7, #13]
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	b2d1      	uxtb	r1, r2
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 8004360:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 1] = ((int16_t) (pt_cal_offset[i])) >> 8;
 8004362:	7b7b      	ldrb	r3, [r7, #13]
 8004364:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <save_nonvolatile_variables+0x7c8>)
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004372:	ee17 3a90 	vmov	r3, s15
 8004376:	b21b      	sxth	r3, r3
 8004378:	121b      	asrs	r3, r3, #8
 800437a:	b21a      	sxth	r2, r3
 800437c:	7b7b      	ldrb	r3, [r7, #13]
 800437e:	3338      	adds	r3, #56	; 0x38
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	3301      	adds	r3, #1
 8004384:	b2d1      	uxtb	r1, r2
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 8004388:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	3301      	adds	r3, #1
 800438e:	737b      	strb	r3, [r7, #13]
 8004390:	7b7b      	ldrb	r3, [r7, #13]
 8004392:	2b05      	cmp	r3, #5
 8004394:	f67f af7e 	bls.w	8004294 <save_nonvolatile_variables+0x684>
	}

	// Autosequence automatic abort enable
	nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR] = autosequence.enable_auto_aborts;
 8004398:	4b10      	ldr	r3, [pc, #64]	; (80043dc <save_nonvolatile_variables+0x7cc>)
 800439a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 80043a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 80043a6:	480e      	ldr	r0, [pc, #56]	; (80043e0 <save_nonvolatile_variables+0x7d0>)
 80043a8:	f005 fa2c 	bl	8009804 <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 80043ac:	237d      	movs	r3, #125	; 0x7d
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <save_nonvolatile_variables+0x7c4>)
 80043b0:	2100      	movs	r1, #0
 80043b2:	480b      	ldr	r0, [pc, #44]	; (80043e0 <save_nonvolatile_variables+0x7d0>)
 80043b4:	f005 f9eb 	bl	800978e <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 80043b8:	f7ff f9d8 	bl	800376c <read_nonvolatile_variables>
  __ASM volatile ("cpsie i" : : : "memory");
 80043bc:	b662      	cpsie	i
}
 80043be:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM
	return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000027c 	.word	0x2000027c
 80043d0:	461c4000 	.word	0x461c4000
 80043d4:	200020cc 	.word	0x200020cc
 80043d8:	20000294 	.word	0x20000294
 80043dc:	2000062c 	.word	0x2000062c
 80043e0:	20002170 	.word	0x20002170

080043e4 <pack_calibration_data>:
/// pack_calibration_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/calibration_file_generator.py on Sun Aug 22 17:24:44 2021

#include "pack_calibration_defines.h"

void pack_calibration_data(uint8_t* dst){
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	*(dst + 0) = CALIBRATION_ITEM_0;
 80043ec:	4bd1      	ldr	r3, [pc, #836]	; (8004734 <pack_calibration_data+0x350>)
 80043ee:	edd3 7a00 	vldr	s15, [r3]
 80043f2:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8004738 <pack_calibration_data+0x354>
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043fe:	edc7 7a00 	vstr	s15, [r7]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = CALIBRATION_ITEM_1;
 800440a:	4bca      	ldr	r3, [pc, #808]	; (8004734 <pack_calibration_data+0x350>)
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8004738 <pack_calibration_data+0x354>
 8004414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	121a      	asrs	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3301      	adds	r3, #1
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = CALIBRATION_ITEM_2;
 800442a:	4bc2      	ldr	r3, [pc, #776]	; (8004734 <pack_calibration_data+0x350>)
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8004738 <pack_calibration_data+0x354>
 8004434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443c:	ee17 3a90 	vmov	r3, s15
 8004440:	141a      	asrs	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3302      	adds	r3, #2
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = CALIBRATION_ITEM_3;
 800444a:	4bba      	ldr	r3, [pc, #744]	; (8004734 <pack_calibration_data+0x350>)
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004738 <pack_calibration_data+0x354>
 8004454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800445c:	ee17 3a90 	vmov	r3, s15
 8004460:	161a      	asrs	r2, r3, #24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3303      	adds	r3, #3
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = CALIBRATION_ITEM_4;
 800446a:	4bb2      	ldr	r3, [pc, #712]	; (8004734 <pack_calibration_data+0x350>)
 800446c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004470:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004738 <pack_calibration_data+0x354>
 8004474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800447c:	edc7 7a00 	vstr	s15, [r7]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = CALIBRATION_ITEM_5;
 800448a:	4baa      	ldr	r3, [pc, #680]	; (8004734 <pack_calibration_data+0x350>)
 800448c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004490:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004738 <pack_calibration_data+0x354>
 8004494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800449c:	ee17 3a90 	vmov	r3, s15
 80044a0:	121a      	asrs	r2, r3, #8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3305      	adds	r3, #5
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = CALIBRATION_ITEM_6;
 80044aa:	4ba2      	ldr	r3, [pc, #648]	; (8004734 <pack_calibration_data+0x350>)
 80044ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80044b0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8004738 <pack_calibration_data+0x354>
 80044b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044bc:	ee17 3a90 	vmov	r3, s15
 80044c0:	141a      	asrs	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3306      	adds	r3, #6
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = CALIBRATION_ITEM_7;
 80044ca:	4b9a      	ldr	r3, [pc, #616]	; (8004734 <pack_calibration_data+0x350>)
 80044cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80044d0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004738 <pack_calibration_data+0x354>
 80044d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044dc:	ee17 3a90 	vmov	r3, s15
 80044e0:	161a      	asrs	r2, r3, #24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3307      	adds	r3, #7
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = CALIBRATION_ITEM_8;
 80044ea:	4b92      	ldr	r3, [pc, #584]	; (8004734 <pack_calibration_data+0x350>)
 80044ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80044f0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004738 <pack_calibration_data+0x354>
 80044f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fc:	edc7 7a00 	vstr	s15, [r7]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3308      	adds	r3, #8
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = CALIBRATION_ITEM_9;
 800450a:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <pack_calibration_data+0x350>)
 800450c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004510:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004738 <pack_calibration_data+0x354>
 8004514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800451c:	ee17 3a90 	vmov	r3, s15
 8004520:	121a      	asrs	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3309      	adds	r3, #9
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = CALIBRATION_ITEM_10;
 800452a:	4b82      	ldr	r3, [pc, #520]	; (8004734 <pack_calibration_data+0x350>)
 800452c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004530:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004738 <pack_calibration_data+0x354>
 8004534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800453c:	ee17 3a90 	vmov	r3, s15
 8004540:	141a      	asrs	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	330a      	adds	r3, #10
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = CALIBRATION_ITEM_11;
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <pack_calibration_data+0x350>)
 800454c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004550:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004738 <pack_calibration_data+0x354>
 8004554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800455c:	ee17 3a90 	vmov	r3, s15
 8004560:	161a      	asrs	r2, r3, #24
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	330b      	adds	r3, #11
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = CALIBRATION_ITEM_12;
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <pack_calibration_data+0x350>)
 800456c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004570:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004738 <pack_calibration_data+0x354>
 8004574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800457c:	edc7 7a00 	vstr	s15, [r7]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	330c      	adds	r3, #12
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = CALIBRATION_ITEM_13;
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <pack_calibration_data+0x350>)
 800458c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004590:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004738 <pack_calibration_data+0x354>
 8004594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800459c:	ee17 3a90 	vmov	r3, s15
 80045a0:	121a      	asrs	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	330d      	adds	r3, #13
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = CALIBRATION_ITEM_14;
 80045aa:	4b62      	ldr	r3, [pc, #392]	; (8004734 <pack_calibration_data+0x350>)
 80045ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80045b0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004738 <pack_calibration_data+0x354>
 80045b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045bc:	ee17 3a90 	vmov	r3, s15
 80045c0:	141a      	asrs	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	330e      	adds	r3, #14
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = CALIBRATION_ITEM_15;
 80045ca:	4b5a      	ldr	r3, [pc, #360]	; (8004734 <pack_calibration_data+0x350>)
 80045cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80045d0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004738 <pack_calibration_data+0x354>
 80045d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045dc:	ee17 3a90 	vmov	r3, s15
 80045e0:	161a      	asrs	r2, r3, #24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	330f      	adds	r3, #15
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = CALIBRATION_ITEM_16;
 80045ea:	4b52      	ldr	r3, [pc, #328]	; (8004734 <pack_calibration_data+0x350>)
 80045ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80045f0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004738 <pack_calibration_data+0x354>
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fc:	edc7 7a00 	vstr	s15, [r7]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3310      	adds	r3, #16
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = CALIBRATION_ITEM_17;
 800460a:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <pack_calibration_data+0x350>)
 800460c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004610:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004738 <pack_calibration_data+0x354>
 8004614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461c:	ee17 3a90 	vmov	r3, s15
 8004620:	121a      	asrs	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3311      	adds	r3, #17
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = CALIBRATION_ITEM_18;
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <pack_calibration_data+0x350>)
 800462c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004630:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004738 <pack_calibration_data+0x354>
 8004634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800463c:	ee17 3a90 	vmov	r3, s15
 8004640:	141a      	asrs	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3312      	adds	r3, #18
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = CALIBRATION_ITEM_19;
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <pack_calibration_data+0x350>)
 800464c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004650:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004738 <pack_calibration_data+0x354>
 8004654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800465c:	ee17 3a90 	vmov	r3, s15
 8004660:	161a      	asrs	r2, r3, #24
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3313      	adds	r3, #19
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = CALIBRATION_ITEM_20;
 800466a:	4b32      	ldr	r3, [pc, #200]	; (8004734 <pack_calibration_data+0x350>)
 800466c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004670:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004738 <pack_calibration_data+0x354>
 8004674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467c:	edc7 7a00 	vstr	s15, [r7]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3314      	adds	r3, #20
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = CALIBRATION_ITEM_21;
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <pack_calibration_data+0x350>)
 800468c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004690:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004738 <pack_calibration_data+0x354>
 8004694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800469c:	ee17 3a90 	vmov	r3, s15
 80046a0:	121a      	asrs	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3315      	adds	r3, #21
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = CALIBRATION_ITEM_22;
 80046aa:	4b22      	ldr	r3, [pc, #136]	; (8004734 <pack_calibration_data+0x350>)
 80046ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80046b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004738 <pack_calibration_data+0x354>
 80046b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046bc:	ee17 3a90 	vmov	r3, s15
 80046c0:	141a      	asrs	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3316      	adds	r3, #22
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = CALIBRATION_ITEM_23;
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <pack_calibration_data+0x350>)
 80046cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80046d0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004738 <pack_calibration_data+0x354>
 80046d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046dc:	ee17 3a90 	vmov	r3, s15
 80046e0:	161a      	asrs	r2, r3, #24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3317      	adds	r3, #23
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = CALIBRATION_ITEM_24;
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <pack_calibration_data+0x358>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f4:	ee17 3a90 	vmov	r3, s15
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3318      	adds	r3, #24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = CALIBRATION_ITEM_25;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <pack_calibration_data+0x358>)
 8004704:	edd3 7a00 	vldr	s15, [r3]
 8004708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470c:	ee17 3a90 	vmov	r3, s15
 8004710:	b29b      	uxth	r3, r3
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3319      	adds	r3, #25
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = CALIBRATION_ITEM_26;
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <pack_calibration_data+0x358>)
 8004720:	edd3 7a01 	vldr	s15, [r3, #4]
 8004724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004728:	ee17 3a90 	vmov	r3, s15
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	e006      	b.n	8004740 <pack_calibration_data+0x35c>
 8004732:	bf00      	nop
 8004734:	2000027c 	.word	0x2000027c
 8004738:	461c4000 	.word	0x461c4000
 800473c:	20000294 	.word	0x20000294
 8004740:	331a      	adds	r3, #26
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = CALIBRATION_ITEM_27;
 8004746:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <pack_calibration_data+0x45c>)
 8004748:	edd3 7a01 	vldr	s15, [r3, #4]
 800474c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004750:	ee17 3a90 	vmov	r3, s15
 8004754:	b29b      	uxth	r3, r3
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	331b      	adds	r3, #27
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = CALIBRATION_ITEM_28;
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <pack_calibration_data+0x45c>)
 8004764:	edd3 7a02 	vldr	s15, [r3, #8]
 8004768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476c:	ee17 3a90 	vmov	r3, s15
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	331c      	adds	r3, #28
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = CALIBRATION_ITEM_29;
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <pack_calibration_data+0x45c>)
 800477c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	ee17 3a90 	vmov	r3, s15
 8004788:	b29b      	uxth	r3, r3
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	331d      	adds	r3, #29
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = CALIBRATION_ITEM_30;
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <pack_calibration_data+0x45c>)
 8004798:	edd3 7a03 	vldr	s15, [r3, #12]
 800479c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a0:	ee17 3a90 	vmov	r3, s15
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	331e      	adds	r3, #30
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = CALIBRATION_ITEM_31;
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <pack_calibration_data+0x45c>)
 80047b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80047b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b8:	ee17 3a90 	vmov	r3, s15
 80047bc:	b29b      	uxth	r3, r3
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	331f      	adds	r3, #31
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = CALIBRATION_ITEM_32;
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <pack_calibration_data+0x45c>)
 80047cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 3a90 	vmov	r3, s15
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3320      	adds	r3, #32
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = CALIBRATION_ITEM_33;
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <pack_calibration_data+0x45c>)
 80047e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80047e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ec:	ee17 3a90 	vmov	r3, s15
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3321      	adds	r3, #33	; 0x21
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = CALIBRATION_ITEM_34;
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <pack_calibration_data+0x45c>)
 8004800:	edd3 7a05 	vldr	s15, [r3, #20]
 8004804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004808:	ee17 3a90 	vmov	r3, s15
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3322      	adds	r3, #34	; 0x22
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = CALIBRATION_ITEM_35;
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <pack_calibration_data+0x45c>)
 8004818:	edd3 7a05 	vldr	s15, [r3, #20]
 800481c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004820:	ee17 3a90 	vmov	r3, s15
 8004824:	b29b      	uxth	r3, r3
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3323      	adds	r3, #35	; 0x23
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000294 	.word	0x20000294

08004844 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Sun Aug 22 15:40:40 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 800484c:	4bc3      	ldr	r3, [pc, #780]	; (8004b5c <pack_telem_data+0x318>)
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 8004854:	4bc2      	ldr	r3, [pc, #776]	; (8004b60 <pack_telem_data+0x31c>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004b64 <pack_telem_data+0x320>
 800485e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004866:	ee17 3a90 	vmov	r3, s15
 800486a:	b21a      	sxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 8004874:	4bba      	ldr	r3, [pc, #744]	; (8004b60 <pack_telem_data+0x31c>)
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8004b64 <pack_telem_data+0x320>
 800487e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004886:	ee17 3a90 	vmov	r3, s15
 800488a:	b21b      	sxth	r3, r3
 800488c:	121b      	asrs	r3, r3, #8
 800488e:	b21a      	sxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3302      	adds	r3, #2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 8004898:	4bb3      	ldr	r3, [pc, #716]	; (8004b68 <pack_telem_data+0x324>)
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004b64 <pack_telem_data+0x320>
 80048a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	b21a      	sxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3303      	adds	r3, #3
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 80048b8:	4bab      	ldr	r3, [pc, #684]	; (8004b68 <pack_telem_data+0x324>)
 80048ba:	edd3 7a00 	vldr	s15, [r3]
 80048be:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004b64 <pack_telem_data+0x320>
 80048c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ca:	ee17 3a90 	vmov	r3, s15
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	121b      	asrs	r3, r3, #8
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 80048dc:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <pack_telem_data+0x328>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3305      	adds	r3, #5
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 80048e8:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <pack_telem_data+0x328>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	0a1a      	lsrs	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3306      	adds	r3, #6
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 80048f6:	4b9d      	ldr	r3, [pc, #628]	; (8004b6c <pack_telem_data+0x328>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	0c1a      	lsrs	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3307      	adds	r3, #7
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <pack_telem_data+0x328>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e1a      	lsrs	r2, r3, #24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3308      	adds	r3, #8
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 8004912:	4b97      	ldr	r3, [pc, #604]	; (8004b70 <pack_telem_data+0x32c>)
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004b64 <pack_telem_data+0x320>
 800491c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004924:	ee17 3a90 	vmov	r3, s15
 8004928:	b21a      	sxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3309      	adds	r3, #9
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 8004932:	4b8f      	ldr	r3, [pc, #572]	; (8004b70 <pack_telem_data+0x32c>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004b64 <pack_telem_data+0x320>
 800493c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004944:	ee17 3a90 	vmov	r3, s15
 8004948:	b21b      	sxth	r3, r3
 800494a:	121b      	asrs	r3, r3, #8
 800494c:	b21a      	sxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	330a      	adds	r3, #10
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 8004956:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <pack_telem_data+0x330>)
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004b64 <pack_telem_data+0x320>
 8004960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004968:	ee17 3a90 	vmov	r3, s15
 800496c:	b21a      	sxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	330b      	adds	r3, #11
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <pack_telem_data+0x330>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004b64 <pack_telem_data+0x320>
 8004980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004988:	ee17 3a90 	vmov	r3, s15
 800498c:	b21b      	sxth	r3, r3
 800498e:	121b      	asrs	r3, r3, #8
 8004990:	b21a      	sxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	330c      	adds	r3, #12
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 800499a:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <pack_telem_data+0x334>)
 800499c:	edd3 7a00 	vldr	s15, [r3]
 80049a0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004b64 <pack_telem_data+0x320>
 80049a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	330d      	adds	r3, #13
 80049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b0:	edc7 7a00 	vstr	s15, [r7]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 80049ba:	4b70      	ldr	r3, [pc, #448]	; (8004b7c <pack_telem_data+0x338>)
 80049bc:	edd3 7a00 	vldr	s15, [r3]
 80049c0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004b64 <pack_telem_data+0x320>
 80049c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	330e      	adds	r3, #14
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	edc7 7a00 	vstr	s15, [r7]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	330f      	adds	r3, #15
 80049de:	4a68      	ldr	r2, [pc, #416]	; (8004b80 <pack_telem_data+0x33c>)
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 80049e4:	4b67      	ldr	r3, [pc, #412]	; (8004b84 <pack_telem_data+0x340>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3310      	adds	r3, #16
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 80049f0:	4b64      	ldr	r3, [pc, #400]	; (8004b84 <pack_telem_data+0x340>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0a1a      	lsrs	r2, r3, #8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3311      	adds	r3, #17
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 80049fe:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <pack_telem_data+0x340>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0c1a      	lsrs	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3312      	adds	r3, #18
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 8004a0c:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <pack_telem_data+0x340>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0e1a      	lsrs	r2, r3, #24
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3313      	adds	r3, #19
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <pack_telem_data+0x344>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a2c:	edc7 7a00 	vstr	s15, [r7]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3314      	adds	r3, #20
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <pack_telem_data+0x344>)
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a4c:	ee17 3a90 	vmov	r3, s15
 8004a50:	121a      	asrs	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3315      	adds	r3, #21
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	; (8004b88 <pack_telem_data+0x344>)
 8004a5c:	edd3 7a00 	vldr	s15, [r3]
 8004a60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6c:	ee17 3a90 	vmov	r3, s15
 8004a70:	141a      	asrs	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3316      	adds	r3, #22
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 8004a7a:	4b43      	ldr	r3, [pc, #268]	; (8004b88 <pack_telem_data+0x344>)
 8004a7c:	edd3 7a00 	vldr	s15, [r3]
 8004a80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a8c:	ee17 3a90 	vmov	r3, s15
 8004a90:	161a      	asrs	r2, r3, #24
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3317      	adds	r3, #23
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <pack_telem_data+0x344>)
 8004a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aa0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aac:	edc7 7a00 	vstr	s15, [r7]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3318      	adds	r3, #24
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 8004aba:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <pack_telem_data+0x344>)
 8004abc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ac0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004acc:	ee17 3a90 	vmov	r3, s15
 8004ad0:	121a      	asrs	r2, r3, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3319      	adds	r3, #25
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8004ada:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <pack_telem_data+0x344>)
 8004adc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aec:	ee17 3a90 	vmov	r3, s15
 8004af0:	141a      	asrs	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	331a      	adds	r3, #26
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <pack_telem_data+0x344>)
 8004afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b0c:	ee17 3a90 	vmov	r3, s15
 8004b10:	161a      	asrs	r2, r3, #24
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	331b      	adds	r3, #27
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <pack_telem_data+0x344>)
 8004b1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b2c:	edc7 7a00 	vstr	s15, [r7]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	331c      	adds	r3, #28
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <pack_telem_data+0x344>)
 8004b3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4c:	ee17 3a90 	vmov	r3, s15
 8004b50:	121a      	asrs	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	331d      	adds	r3, #29
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e017      	b.n	8004b8c <pack_telem_data+0x348>
 8004b5c:	200002ac 	.word	0x200002ac
 8004b60:	200002b0 	.word	0x200002b0
 8004b64:	42c80000 	.word	0x42c80000
 8004b68:	200002b4 	.word	0x200002b4
 8004b6c:	200002b8 	.word	0x200002b8
 8004b70:	200002bc 	.word	0x200002bc
 8004b74:	200002c0 	.word	0x200002c0
 8004b78:	200002c4 	.word	0x200002c4
 8004b7c:	200002c8 	.word	0x200002c8
 8004b80:	200002cc 	.word	0x200002cc
 8004b84:	200002d0 	.word	0x200002d0
 8004b88:	200002f4 	.word	0x200002f4
	*(dst + 30) = TELEM_ITEM_30;
 8004b8c:	4bcf      	ldr	r3, [pc, #828]	; (8004ecc <pack_telem_data+0x688>)
 8004b8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b9e:	ee17 3a90 	vmov	r3, s15
 8004ba2:	141a      	asrs	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	331e      	adds	r3, #30
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 8004bac:	4bc7      	ldr	r3, [pc, #796]	; (8004ecc <pack_telem_data+0x688>)
 8004bae:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bbe:	ee17 3a90 	vmov	r3, s15
 8004bc2:	161a      	asrs	r2, r3, #24
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	331f      	adds	r3, #31
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 8004bcc:	4bbf      	ldr	r3, [pc, #764]	; (8004ecc <pack_telem_data+0x688>)
 8004bce:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bde:	edc7 7a00 	vstr	s15, [r7]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3320      	adds	r3, #32
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 8004bec:	4bb7      	ldr	r3, [pc, #732]	; (8004ecc <pack_telem_data+0x688>)
 8004bee:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bfe:	ee17 3a90 	vmov	r3, s15
 8004c02:	121a      	asrs	r2, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3321      	adds	r3, #33	; 0x21
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 8004c0c:	4baf      	ldr	r3, [pc, #700]	; (8004ecc <pack_telem_data+0x688>)
 8004c0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c1e:	ee17 3a90 	vmov	r3, s15
 8004c22:	141a      	asrs	r2, r3, #16
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3322      	adds	r3, #34	; 0x22
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 8004c2c:	4ba7      	ldr	r3, [pc, #668]	; (8004ecc <pack_telem_data+0x688>)
 8004c2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c3e:	ee17 3a90 	vmov	r3, s15
 8004c42:	161a      	asrs	r2, r3, #24
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3323      	adds	r3, #35	; 0x23
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 8004c4c:	4b9f      	ldr	r3, [pc, #636]	; (8004ecc <pack_telem_data+0x688>)
 8004c4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c52:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c5e:	edc7 7a00 	vstr	s15, [r7]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3324      	adds	r3, #36	; 0x24
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 8004c6c:	4b97      	ldr	r3, [pc, #604]	; (8004ecc <pack_telem_data+0x688>)
 8004c6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c7e:	ee17 3a90 	vmov	r3, s15
 8004c82:	121a      	asrs	r2, r3, #8
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3325      	adds	r3, #37	; 0x25
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8004c8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <pack_telem_data+0x688>)
 8004c8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c9e:	ee17 3a90 	vmov	r3, s15
 8004ca2:	141a      	asrs	r2, r3, #16
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3326      	adds	r3, #38	; 0x26
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8004cac:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <pack_telem_data+0x688>)
 8004cae:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cbe:	ee17 3a90 	vmov	r3, s15
 8004cc2:	161a      	asrs	r2, r3, #24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3327      	adds	r3, #39	; 0x27
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8004ccc:	4b7f      	ldr	r3, [pc, #508]	; (8004ecc <pack_telem_data+0x688>)
 8004cce:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cde:	edc7 7a00 	vstr	s15, [r7]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3328      	adds	r3, #40	; 0x28
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8004cec:	4b77      	ldr	r3, [pc, #476]	; (8004ecc <pack_telem_data+0x688>)
 8004cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cfe:	ee17 3a90 	vmov	r3, s15
 8004d02:	121a      	asrs	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3329      	adds	r3, #41	; 0x29
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8004d0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ecc <pack_telem_data+0x688>)
 8004d0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d1e:	ee17 3a90 	vmov	r3, s15
 8004d22:	141a      	asrs	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	332a      	adds	r3, #42	; 0x2a
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8004d2c:	4b67      	ldr	r3, [pc, #412]	; (8004ecc <pack_telem_data+0x688>)
 8004d2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d3e:	ee17 3a90 	vmov	r3, s15
 8004d42:	161a      	asrs	r2, r3, #24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	332b      	adds	r3, #43	; 0x2b
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8004d4c:	4b60      	ldr	r3, [pc, #384]	; (8004ed0 <pack_telem_data+0x68c>)
 8004d4e:	edd3 7a00 	vldr	s15, [r3]
 8004d52:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	332c      	adds	r3, #44	; 0x2c
 8004d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d62:	edc7 7a00 	vstr	s15, [r7]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8004d6c:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <pack_telem_data+0x68c>)
 8004d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	332d      	adds	r3, #45	; 0x2d
 8004d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d82:	edc7 7a00 	vstr	s15, [r7]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <pack_telem_data+0x68c>)
 8004d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	332e      	adds	r3, #46	; 0x2e
 8004d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da2:	edc7 7a00 	vstr	s15, [r7]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8004dac:	4b48      	ldr	r3, [pc, #288]	; (8004ed0 <pack_telem_data+0x68c>)
 8004dae:	edd3 7a03 	vldr	s15, [r3, #12]
 8004db2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	332f      	adds	r3, #47	; 0x2f
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	edc7 7a00 	vstr	s15, [r7]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8004dcc:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <pack_telem_data+0x68c>)
 8004dce:	edd3 7a04 	vldr	s15, [r3, #16]
 8004dd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3330      	adds	r3, #48	; 0x30
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	edc7 7a00 	vstr	s15, [r7]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <pack_telem_data+0x68c>)
 8004dee:	edd3 7a05 	vldr	s15, [r3, #20]
 8004df2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3331      	adds	r3, #49	; 0x31
 8004dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e02:	edc7 7a00 	vstr	s15, [r7]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8004e0c:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <pack_telem_data+0x68c>)
 8004e0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e22:	edc7 7a00 	vstr	s15, [r7]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <pack_telem_data+0x68c>)
 8004e2e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3333      	adds	r3, #51	; 0x33
 8004e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e42:	edc7 7a00 	vstr	s15, [r7]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <pack_telem_data+0x68c>)
 8004e4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e52:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3334      	adds	r3, #52	; 0x34
 8004e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e62:	edc7 7a00 	vstr	s15, [r7]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8004e6c:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <pack_telem_data+0x690>)
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3335      	adds	r3, #53	; 0x35
 8004e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e82:	edc7 7a00 	vstr	s15, [r7]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <pack_telem_data+0x690>)
 8004e8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3336      	adds	r3, #54	; 0x36
 8004e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea2:	edc7 7a00 	vstr	s15, [r7]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <pack_telem_data+0x690>)
 8004eae:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3337      	adds	r3, #55	; 0x37
 8004ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec2:	edc7 7a00 	vstr	s15, [r7]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	e005      	b.n	8004ed8 <pack_telem_data+0x694>
 8004ecc:	200002f4 	.word	0x200002f4
 8004ed0:	2000030c 	.word	0x2000030c
 8004ed4:	20000330 	.word	0x20000330
 8004ed8:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8004eda:	4bc7      	ldr	r3, [pc, #796]	; (80051f8 <pack_telem_data+0x9b4>)
 8004edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ee0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3338      	adds	r3, #56	; 0x38
 8004eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef0:	edc7 7a00 	vstr	s15, [r7]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8004efa:	4bbf      	ldr	r3, [pc, #764]	; (80051f8 <pack_telem_data+0x9b4>)
 8004efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3339      	adds	r3, #57	; 0x39
 8004f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f10:	edc7 7a00 	vstr	s15, [r7]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8004f1a:	4bb7      	ldr	r3, [pc, #732]	; (80051f8 <pack_telem_data+0x9b4>)
 8004f1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	333a      	adds	r3, #58	; 0x3a
 8004f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f30:	edc7 7a00 	vstr	s15, [r7]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8004f3a:	4baf      	ldr	r3, [pc, #700]	; (80051f8 <pack_telem_data+0x9b4>)
 8004f3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	333b      	adds	r3, #59	; 0x3b
 8004f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f50:	edc7 7a00 	vstr	s15, [r7]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8004f5a:	4ba7      	ldr	r3, [pc, #668]	; (80051f8 <pack_telem_data+0x9b4>)
 8004f5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	333c      	adds	r3, #60	; 0x3c
 8004f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f70:	edc7 7a00 	vstr	s15, [r7]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8004f7a:	4b9f      	ldr	r3, [pc, #636]	; (80051f8 <pack_telem_data+0x9b4>)
 8004f7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	333d      	adds	r3, #61	; 0x3d
 8004f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f90:	edc7 7a00 	vstr	s15, [r7]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8004f9a:	4b98      	ldr	r3, [pc, #608]	; (80051fc <pack_telem_data+0x9b8>)
 8004f9c:	edd3 7a00 	vldr	s15, [r3]
 8004fa0:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8005200 <pack_telem_data+0x9bc>
 8004fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fac:	ee17 3a90 	vmov	r3, s15
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	333e      	adds	r3, #62	; 0x3e
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8004fba:	4b90      	ldr	r3, [pc, #576]	; (80051fc <pack_telem_data+0x9b8>)
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005200 <pack_telem_data+0x9bc>
 8004fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fcc:	ee17 3a90 	vmov	r3, s15
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	333f      	adds	r3, #63	; 0x3f
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8004fde:	4b87      	ldr	r3, [pc, #540]	; (80051fc <pack_telem_data+0x9b8>)
 8004fe0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fe4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8005200 <pack_telem_data+0x9bc>
 8004fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff0:	ee17 3a90 	vmov	r3, s15
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3340      	adds	r3, #64	; 0x40
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8004ffe:	4b7f      	ldr	r3, [pc, #508]	; (80051fc <pack_telem_data+0x9b8>)
 8005000:	edd3 7a01 	vldr	s15, [r3, #4]
 8005004:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005200 <pack_telem_data+0x9bc>
 8005008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800500c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005010:	ee17 3a90 	vmov	r3, s15
 8005014:	b29b      	uxth	r3, r3
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3341      	adds	r3, #65	; 0x41
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <pack_telem_data+0x9b8>)
 8005024:	edd3 7a02 	vldr	s15, [r3, #8]
 8005028:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005200 <pack_telem_data+0x9bc>
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005034:	ee17 3a90 	vmov	r3, s15
 8005038:	b29a      	uxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3342      	adds	r3, #66	; 0x42
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8005042:	4b6e      	ldr	r3, [pc, #440]	; (80051fc <pack_telem_data+0x9b8>)
 8005044:	edd3 7a02 	vldr	s15, [r3, #8]
 8005048:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005200 <pack_telem_data+0x9bc>
 800504c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005054:	ee17 3a90 	vmov	r3, s15
 8005058:	b29b      	uxth	r3, r3
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3343      	adds	r3, #67	; 0x43
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8005066:	4b65      	ldr	r3, [pc, #404]	; (80051fc <pack_telem_data+0x9b8>)
 8005068:	edd3 7a03 	vldr	s15, [r3, #12]
 800506c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005200 <pack_telem_data+0x9bc>
 8005070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005078:	ee17 3a90 	vmov	r3, s15
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3344      	adds	r3, #68	; 0x44
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 8005086:	4b5d      	ldr	r3, [pc, #372]	; (80051fc <pack_telem_data+0x9b8>)
 8005088:	edd3 7a03 	vldr	s15, [r3, #12]
 800508c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005200 <pack_telem_data+0x9bc>
 8005090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	ee17 3a90 	vmov	r3, s15
 800509c:	b29b      	uxth	r3, r3
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3345      	adds	r3, #69	; 0x45
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 80050aa:	4b54      	ldr	r3, [pc, #336]	; (80051fc <pack_telem_data+0x9b8>)
 80050ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80050b0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005200 <pack_telem_data+0x9bc>
 80050b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050bc:	ee17 3a90 	vmov	r3, s15
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3346      	adds	r3, #70	; 0x46
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 80050ca:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <pack_telem_data+0x9b8>)
 80050cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80050d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005200 <pack_telem_data+0x9bc>
 80050d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050dc:	ee17 3a90 	vmov	r3, s15
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3347      	adds	r3, #71	; 0x47
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 80050ee:	4b45      	ldr	r3, [pc, #276]	; (8005204 <pack_telem_data+0x9c0>)
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	b21a      	sxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3348      	adds	r3, #72	; 0x48
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <pack_telem_data+0x9c0>)
 8005110:	edd3 7a00 	vldr	s15, [r3]
 8005114:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800511c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005120:	ee17 3a90 	vmov	r3, s15
 8005124:	b21b      	sxth	r3, r3
 8005126:	121b      	asrs	r3, r3, #8
 8005128:	b21a      	sxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3349      	adds	r3, #73	; 0x49
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 8005132:	4b34      	ldr	r3, [pc, #208]	; (8005204 <pack_telem_data+0x9c0>)
 8005134:	edd3 7a01 	vldr	s15, [r3, #4]
 8005138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800513c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005144:	ee17 3a90 	vmov	r3, s15
 8005148:	b21a      	sxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	334a      	adds	r3, #74	; 0x4a
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <pack_telem_data+0x9c0>)
 8005154:	edd3 7a01 	vldr	s15, [r3, #4]
 8005158:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800515c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005164:	ee17 3a90 	vmov	r3, s15
 8005168:	b21b      	sxth	r3, r3
 800516a:	121b      	asrs	r3, r3, #8
 800516c:	b21a      	sxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	334b      	adds	r3, #75	; 0x4b
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <pack_telem_data+0x9c4>)
 8005178:	f9b3 2000 	ldrsh.w	r2, [r3]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	334c      	adds	r3, #76	; 0x4c
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <pack_telem_data+0x9c4>)
 8005186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518a:	121b      	asrs	r3, r3, #8
 800518c:	b21a      	sxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	334d      	adds	r3, #77	; 0x4d
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 8005196:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <pack_telem_data+0x9c4>)
 8005198:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	334e      	adds	r3, #78	; 0x4e
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <pack_telem_data+0x9c4>)
 80051a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051aa:	121b      	asrs	r3, r3, #8
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	334f      	adds	r3, #79	; 0x4f
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <pack_telem_data+0x9c8>)
 80051b8:	edd3 7a00 	vldr	s15, [r3]
 80051bc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005200 <pack_telem_data+0x9bc>
 80051c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c8:	ee17 3a90 	vmov	r3, s15
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3350      	adds	r3, #80	; 0x50
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <pack_telem_data+0x9c8>)
 80051d8:	edd3 7a00 	vldr	s15, [r3]
 80051dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005200 <pack_telem_data+0x9bc>
 80051e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e8:	ee17 3a90 	vmov	r3, s15
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3351      	adds	r3, #81	; 0x51
 80051f6:	e00b      	b.n	8005210 <pack_telem_data+0x9cc>
 80051f8:	20000330 	.word	0x20000330
 80051fc:	20000354 	.word	0x20000354
 8005200:	42c80000 	.word	0x42c80000
 8005204:	20000368 	.word	0x20000368
 8005208:	20000370 	.word	0x20000370
 800520c:	20000374 	.word	0x20000374
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 8005214:	4bcc      	ldr	r3, [pc, #816]	; (8005548 <pack_telem_data+0xd04>)
 8005216:	edd3 7a01 	vldr	s15, [r3, #4]
 800521a:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800554c <pack_telem_data+0xd08>
 800521e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005226:	ee17 3a90 	vmov	r3, s15
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3352      	adds	r3, #82	; 0x52
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 8005234:	4bc4      	ldr	r3, [pc, #784]	; (8005548 <pack_telem_data+0xd04>)
 8005236:	edd3 7a01 	vldr	s15, [r3, #4]
 800523a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800554c <pack_telem_data+0xd08>
 800523e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	ee17 3a90 	vmov	r3, s15
 800524a:	b29b      	uxth	r3, r3
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3353      	adds	r3, #83	; 0x53
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 8005258:	4bbb      	ldr	r3, [pc, #748]	; (8005548 <pack_telem_data+0xd04>)
 800525a:	edd3 7a02 	vldr	s15, [r3, #8]
 800525e:	ed9f 7abb 	vldr	s14, [pc, #748]	; 800554c <pack_telem_data+0xd08>
 8005262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526a:	ee17 3a90 	vmov	r3, s15
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3354      	adds	r3, #84	; 0x54
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 8005278:	4bb3      	ldr	r3, [pc, #716]	; (8005548 <pack_telem_data+0xd04>)
 800527a:	edd3 7a02 	vldr	s15, [r3, #8]
 800527e:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800554c <pack_telem_data+0xd08>
 8005282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528a:	ee17 3a90 	vmov	r3, s15
 800528e:	b29b      	uxth	r3, r3
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3355      	adds	r3, #85	; 0x55
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 800529c:	4baa      	ldr	r3, [pc, #680]	; (8005548 <pack_telem_data+0xd04>)
 800529e:	edd3 7a03 	vldr	s15, [r3, #12]
 80052a2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800554c <pack_telem_data+0xd08>
 80052a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ae:	ee17 3a90 	vmov	r3, s15
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3356      	adds	r3, #86	; 0x56
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 80052bc:	4ba2      	ldr	r3, [pc, #648]	; (8005548 <pack_telem_data+0xd04>)
 80052be:	edd3 7a03 	vldr	s15, [r3, #12]
 80052c2:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800554c <pack_telem_data+0xd08>
 80052c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ce:	ee17 3a90 	vmov	r3, s15
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3357      	adds	r3, #87	; 0x57
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 80052e0:	4b9b      	ldr	r3, [pc, #620]	; (8005550 <pack_telem_data+0xd0c>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800554c <pack_telem_data+0xd08>
 80052ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f2:	ee17 3a90 	vmov	r3, s15
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3358      	adds	r3, #88	; 0x58
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 8005300:	4b93      	ldr	r3, [pc, #588]	; (8005550 <pack_telem_data+0xd0c>)
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800554c <pack_telem_data+0xd08>
 800530a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005312:	ee17 3a90 	vmov	r3, s15
 8005316:	b29b      	uxth	r3, r3
 8005318:	0a1b      	lsrs	r3, r3, #8
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3359      	adds	r3, #89	; 0x59
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 8005324:	4b8a      	ldr	r3, [pc, #552]	; (8005550 <pack_telem_data+0xd0c>)
 8005326:	edd3 7a01 	vldr	s15, [r3, #4]
 800532a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800554c <pack_telem_data+0xd08>
 800532e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005336:	ee17 3a90 	vmov	r3, s15
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	335a      	adds	r3, #90	; 0x5a
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 8005344:	4b82      	ldr	r3, [pc, #520]	; (8005550 <pack_telem_data+0xd0c>)
 8005346:	edd3 7a01 	vldr	s15, [r3, #4]
 800534a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800554c <pack_telem_data+0xd08>
 800534e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005356:	ee17 3a90 	vmov	r3, s15
 800535a:	b29b      	uxth	r3, r3
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	335b      	adds	r3, #91	; 0x5b
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 8005368:	4b7a      	ldr	r3, [pc, #488]	; (8005554 <pack_telem_data+0xd10>)
 800536a:	edd3 7a00 	vldr	s15, [r3]
 800536e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800554c <pack_telem_data+0xd08>
 8005372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800537a:	edc7 7a00 	vstr	s15, [r7]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	335c      	adds	r3, #92	; 0x5c
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 8005388:	4b72      	ldr	r3, [pc, #456]	; (8005554 <pack_telem_data+0xd10>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800554c <pack_telem_data+0xd08>
 8005392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800539a:	ee17 3a90 	vmov	r3, s15
 800539e:	121a      	asrs	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	335d      	adds	r3, #93	; 0x5d
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 80053a8:	4b6a      	ldr	r3, [pc, #424]	; (8005554 <pack_telem_data+0xd10>)
 80053aa:	edd3 7a00 	vldr	s15, [r3]
 80053ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800554c <pack_telem_data+0xd08>
 80053b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ba:	ee17 3a90 	vmov	r3, s15
 80053be:	141a      	asrs	r2, r3, #16
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	335e      	adds	r3, #94	; 0x5e
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 80053c8:	4b62      	ldr	r3, [pc, #392]	; (8005554 <pack_telem_data+0xd10>)
 80053ca:	edd3 7a00 	vldr	s15, [r3]
 80053ce:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800554c <pack_telem_data+0xd08>
 80053d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053da:	ee17 3a90 	vmov	r3, s15
 80053de:	161a      	asrs	r2, r3, #24
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	335f      	adds	r3, #95	; 0x5f
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 80053e8:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <pack_telem_data+0xd10>)
 80053ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ee:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800554c <pack_telem_data+0xd08>
 80053f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053fa:	edc7 7a00 	vstr	s15, [r7]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3360      	adds	r3, #96	; 0x60
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 8005408:	4b52      	ldr	r3, [pc, #328]	; (8005554 <pack_telem_data+0xd10>)
 800540a:	edd3 7a01 	vldr	s15, [r3, #4]
 800540e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800554c <pack_telem_data+0xd08>
 8005412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800541a:	ee17 3a90 	vmov	r3, s15
 800541e:	121a      	asrs	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3361      	adds	r3, #97	; 0x61
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 8005428:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <pack_telem_data+0xd10>)
 800542a:	edd3 7a01 	vldr	s15, [r3, #4]
 800542e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800554c <pack_telem_data+0xd08>
 8005432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800543a:	ee17 3a90 	vmov	r3, s15
 800543e:	141a      	asrs	r2, r3, #16
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3362      	adds	r3, #98	; 0x62
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 8005448:	4b42      	ldr	r3, [pc, #264]	; (8005554 <pack_telem_data+0xd10>)
 800544a:	edd3 7a01 	vldr	s15, [r3, #4]
 800544e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800554c <pack_telem_data+0xd08>
 8005452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545a:	ee17 3a90 	vmov	r3, s15
 800545e:	161a      	asrs	r2, r3, #24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3363      	adds	r3, #99	; 0x63
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <pack_telem_data+0xd14>)
 800546a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800546e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800554c <pack_telem_data+0xd08>
 8005472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800547a:	ee17 3a90 	vmov	r3, s15
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3364      	adds	r3, #100	; 0x64
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 8005488:	4b33      	ldr	r3, [pc, #204]	; (8005558 <pack_telem_data+0xd14>)
 800548a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800548e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800554c <pack_telem_data+0xd08>
 8005492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549a:	ee17 3a90 	vmov	r3, s15
 800549e:	b29b      	uxth	r3, r3
 80054a0:	0a1b      	lsrs	r3, r3, #8
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3365      	adds	r3, #101	; 0x65
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 80054ac:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <pack_telem_data+0xd14>)
 80054ae:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80054b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800554c <pack_telem_data+0xd08>
 80054b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054be:	ee17 3a90 	vmov	r3, s15
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3366      	adds	r3, #102	; 0x66
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <pack_telem_data+0xd14>)
 80054ce:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80054d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800554c <pack_telem_data+0xd08>
 80054d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054de:	ee17 3a90 	vmov	r3, s15
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3367      	adds	r3, #103	; 0x67
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <pack_telem_data+0xd14>)
 80054f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800554c <pack_telem_data+0xd08>
 80054fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 3a90 	vmov	r3, s15
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3368      	adds	r3, #104	; 0x68
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <pack_telem_data+0xd14>)
 8005512:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005516:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800554c <pack_telem_data+0xd08>
 800551a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800551e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005522:	ee17 3a90 	vmov	r3, s15
 8005526:	b29b      	uxth	r3, r3
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3369      	adds	r3, #105	; 0x69
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <pack_telem_data+0xd14>)
 8005536:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800553a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800554c <pack_telem_data+0xd08>
 800553e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005546:	e009      	b.n	800555c <pack_telem_data+0xd18>
 8005548:	20000374 	.word	0x20000374
 800554c:	42c80000 	.word	0x42c80000
 8005550:	20000384 	.word	0x20000384
 8005554:	2000038c 	.word	0x2000038c
 8005558:	20000584 	.word	0x20000584
 800555c:	ee17 3a90 	vmov	r3, s15
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	336a      	adds	r3, #106	; 0x6a
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 800556a:	4bcb      	ldr	r3, [pc, #812]	; (8005898 <pack_telem_data+0x1054>)
 800556c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005570:	ed9f 7aca 	vldr	s14, [pc, #808]	; 800589c <pack_telem_data+0x1058>
 8005574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557c:	ee17 3a90 	vmov	r3, s15
 8005580:	b29b      	uxth	r3, r3
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	336b      	adds	r3, #107	; 0x6b
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 800558e:	4bc2      	ldr	r3, [pc, #776]	; (8005898 <pack_telem_data+0x1054>)
 8005590:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005594:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800589c <pack_telem_data+0x1058>
 8005598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800559c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a0:	ee17 3a90 	vmov	r3, s15
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	336c      	adds	r3, #108	; 0x6c
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 80055ae:	4bba      	ldr	r3, [pc, #744]	; (8005898 <pack_telem_data+0x1054>)
 80055b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055b4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800589c <pack_telem_data+0x1058>
 80055b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c0:	ee17 3a90 	vmov	r3, s15
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	336d      	adds	r3, #109	; 0x6d
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = TELEM_ITEM_110;
 80055d2:	4bb1      	ldr	r3, [pc, #708]	; (8005898 <pack_telem_data+0x1054>)
 80055d4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80055d8:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800589c <pack_telem_data+0x1058>
 80055dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e4:	ee17 3a90 	vmov	r3, s15
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	336e      	adds	r3, #110	; 0x6e
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 80055f2:	4ba9      	ldr	r3, [pc, #676]	; (8005898 <pack_telem_data+0x1054>)
 80055f4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80055f8:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800589c <pack_telem_data+0x1058>
 80055fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005604:	ee17 3a90 	vmov	r3, s15
 8005608:	b29b      	uxth	r3, r3
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b29a      	uxth	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	336f      	adds	r3, #111	; 0x6f
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 8005616:	4ba0      	ldr	r3, [pc, #640]	; (8005898 <pack_telem_data+0x1054>)
 8005618:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800561c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005628:	ee17 3a90 	vmov	r3, s15
 800562c:	b21a      	sxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3370      	adds	r3, #112	; 0x70
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 8005636:	4b98      	ldr	r3, [pc, #608]	; (8005898 <pack_telem_data+0x1054>)
 8005638:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800563c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005648:	ee17 3a90 	vmov	r3, s15
 800564c:	b21b      	sxth	r3, r3
 800564e:	121b      	asrs	r3, r3, #8
 8005650:	b21a      	sxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3371      	adds	r3, #113	; 0x71
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 800565a:	4b8f      	ldr	r3, [pc, #572]	; (8005898 <pack_telem_data+0x1054>)
 800565c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800566c:	ee17 3a90 	vmov	r3, s15
 8005670:	b21a      	sxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3372      	adds	r3, #114	; 0x72
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 800567a:	4b87      	ldr	r3, [pc, #540]	; (8005898 <pack_telem_data+0x1054>)
 800567c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005680:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800568c:	ee17 3a90 	vmov	r3, s15
 8005690:	b21b      	sxth	r3, r3
 8005692:	121b      	asrs	r3, r3, #8
 8005694:	b21a      	sxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3373      	adds	r3, #115	; 0x73
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 800569e:	4b7e      	ldr	r3, [pc, #504]	; (8005898 <pack_telem_data+0x1054>)
 80056a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80056a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b0:	ee17 3a90 	vmov	r3, s15
 80056b4:	b21a      	sxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3374      	adds	r3, #116	; 0x74
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 80056be:	4b76      	ldr	r3, [pc, #472]	; (8005898 <pack_telem_data+0x1054>)
 80056c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80056c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d0:	ee17 3a90 	vmov	r3, s15
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	121b      	asrs	r3, r3, #8
 80056d8:	b21a      	sxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3375      	adds	r3, #117	; 0x75
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 80056e2:	4b6d      	ldr	r3, [pc, #436]	; (8005898 <pack_telem_data+0x1054>)
 80056e4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80056e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056f4:	ee17 3a90 	vmov	r3, s15
 80056f8:	b21a      	sxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3376      	adds	r3, #118	; 0x76
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <pack_telem_data+0x1054>)
 8005704:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005708:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800570c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005714:	ee17 3a90 	vmov	r3, s15
 8005718:	b21b      	sxth	r3, r3
 800571a:	121b      	asrs	r3, r3, #8
 800571c:	b21a      	sxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3377      	adds	r3, #119	; 0x77
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 8005726:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <pack_telem_data+0x1054>)
 8005728:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800572c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005738:	ee17 3a90 	vmov	r3, s15
 800573c:	b21a      	sxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3378      	adds	r3, #120	; 0x78
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 8005746:	4b54      	ldr	r3, [pc, #336]	; (8005898 <pack_telem_data+0x1054>)
 8005748:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800574c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005758:	ee17 3a90 	vmov	r3, s15
 800575c:	b21b      	sxth	r3, r3
 800575e:	121b      	asrs	r3, r3, #8
 8005760:	b21a      	sxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3379      	adds	r3, #121	; 0x79
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 800576a:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <pack_telem_data+0x1054>)
 800576c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005770:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800577c:	ee17 3a90 	vmov	r3, s15
 8005780:	b21a      	sxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	337a      	adds	r3, #122	; 0x7a
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 800578a:	4b43      	ldr	r3, [pc, #268]	; (8005898 <pack_telem_data+0x1054>)
 800578c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005790:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579c:	ee17 3a90 	vmov	r3, s15
 80057a0:	b21b      	sxth	r3, r3
 80057a2:	121b      	asrs	r3, r3, #8
 80057a4:	b21a      	sxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	337b      	adds	r3, #123	; 0x7b
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 80057ae:	4b3a      	ldr	r3, [pc, #232]	; (8005898 <pack_telem_data+0x1054>)
 80057b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80057b4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800589c <pack_telem_data+0x1058>
 80057b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057c0:	edc7 7a00 	vstr	s15, [r7]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	337c      	adds	r3, #124	; 0x7c
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 80057ce:	4b32      	ldr	r3, [pc, #200]	; (8005898 <pack_telem_data+0x1054>)
 80057d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80057d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800589c <pack_telem_data+0x1058>
 80057d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e0:	ee17 3a90 	vmov	r3, s15
 80057e4:	121a      	asrs	r2, r3, #8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	337d      	adds	r3, #125	; 0x7d
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 80057ee:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <pack_telem_data+0x1054>)
 80057f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80057f4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800589c <pack_telem_data+0x1058>
 80057f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005800:	ee17 3a90 	vmov	r3, s15
 8005804:	141a      	asrs	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	337e      	adds	r3, #126	; 0x7e
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 800580e:	4b22      	ldr	r3, [pc, #136]	; (8005898 <pack_telem_data+0x1054>)
 8005810:	edd3 7a04 	vldr	s15, [r3, #16]
 8005814:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800589c <pack_telem_data+0x1058>
 8005818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800581c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005820:	ee17 3a90 	vmov	r3, s15
 8005824:	161a      	asrs	r2, r3, #24
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	337f      	adds	r3, #127	; 0x7f
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <pack_telem_data+0x1054>)
 8005830:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005834:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800589c <pack_telem_data+0x1058>
 8005838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800583c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005840:	edc7 7a00 	vstr	s15, [r7]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3380      	adds	r3, #128	; 0x80
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <pack_telem_data+0x1054>)
 8005850:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005854:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800589c <pack_telem_data+0x1058>
 8005858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800585c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005860:	ee17 3a90 	vmov	r3, s15
 8005864:	121a      	asrs	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3381      	adds	r3, #129	; 0x81
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <pack_telem_data+0x1054>)
 8005870:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005874:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800589c <pack_telem_data+0x1058>
 8005878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800587c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005880:	ee17 3a90 	vmov	r3, s15
 8005884:	141a      	asrs	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3382      	adds	r3, #130	; 0x82
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 800588e:	4b02      	ldr	r3, [pc, #8]	; (8005898 <pack_telem_data+0x1054>)
 8005890:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005894:	e004      	b.n	80058a0 <pack_telem_data+0x105c>
 8005896:	bf00      	nop
 8005898:	20000584 	.word	0x20000584
 800589c:	42c80000 	.word	0x42c80000
 80058a0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800589c <pack_telem_data+0x1058>
 80058a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ac:	ee17 3a90 	vmov	r3, s15
 80058b0:	161a      	asrs	r2, r3, #24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3383      	adds	r3, #131	; 0x83
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 80058ba:	4bd0      	ldr	r3, [pc, #832]	; (8005bfc <pack_telem_data+0x13b8>)
 80058bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80058c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058cc:	ee17 3a90 	vmov	r3, s15
 80058d0:	b21a      	sxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3384      	adds	r3, #132	; 0x84
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 80058da:	4bc8      	ldr	r3, [pc, #800]	; (8005bfc <pack_telem_data+0x13b8>)
 80058dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80058e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ec:	ee17 3a90 	vmov	r3, s15
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	121b      	asrs	r3, r3, #8
 80058f4:	b21a      	sxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3385      	adds	r3, #133	; 0x85
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 80058fe:	4bbf      	ldr	r3, [pc, #764]	; (8005bfc <pack_telem_data+0x13b8>)
 8005900:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005904:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800590c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005910:	ee17 3a90 	vmov	r3, s15
 8005914:	b21a      	sxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3386      	adds	r3, #134	; 0x86
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 800591e:	4bb7      	ldr	r3, [pc, #732]	; (8005bfc <pack_telem_data+0x13b8>)
 8005920:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005924:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005930:	ee17 3a90 	vmov	r3, s15
 8005934:	b21b      	sxth	r3, r3
 8005936:	121b      	asrs	r3, r3, #8
 8005938:	b21a      	sxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3387      	adds	r3, #135	; 0x87
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 8005942:	4bae      	ldr	r3, [pc, #696]	; (8005bfc <pack_telem_data+0x13b8>)
 8005944:	edd3 7a07 	vldr	s15, [r3, #28]
 8005948:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800594c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005954:	ee17 3a90 	vmov	r3, s15
 8005958:	b21a      	sxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3388      	adds	r3, #136	; 0x88
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 8005962:	4ba6      	ldr	r3, [pc, #664]	; (8005bfc <pack_telem_data+0x13b8>)
 8005964:	edd3 7a07 	vldr	s15, [r3, #28]
 8005968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800596c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005974:	ee17 3a90 	vmov	r3, s15
 8005978:	b21b      	sxth	r3, r3
 800597a:	121b      	asrs	r3, r3, #8
 800597c:	b21a      	sxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3389      	adds	r3, #137	; 0x89
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 8005986:	4b9d      	ldr	r3, [pc, #628]	; (8005bfc <pack_telem_data+0x13b8>)
 8005988:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800598c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005998:	ee17 3a90 	vmov	r3, s15
 800599c:	b21a      	sxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	338a      	adds	r3, #138	; 0x8a
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 80059a6:	4b95      	ldr	r3, [pc, #596]	; (8005bfc <pack_telem_data+0x13b8>)
 80059a8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80059ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b8:	ee17 3a90 	vmov	r3, s15
 80059bc:	b21b      	sxth	r3, r3
 80059be:	121b      	asrs	r3, r3, #8
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	338b      	adds	r3, #139	; 0x8b
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 80059ca:	4b8d      	ldr	r3, [pc, #564]	; (8005c00 <pack_telem_data+0x13bc>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059dc:	edc7 7a00 	vstr	s15, [r7]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	338c      	adds	r3, #140	; 0x8c
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 80059ea:	4b85      	ldr	r3, [pc, #532]	; (8005c00 <pack_telem_data+0x13bc>)
 80059ec:	edd3 7a00 	vldr	s15, [r3]
 80059f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059fc:	ee17 3a90 	vmov	r3, s15
 8005a00:	121a      	asrs	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	338d      	adds	r3, #141	; 0x8d
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 8005a0a:	4b7d      	ldr	r3, [pc, #500]	; (8005c00 <pack_telem_data+0x13bc>)
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a1c:	ee17 3a90 	vmov	r3, s15
 8005a20:	141a      	asrs	r2, r3, #16
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	338e      	adds	r3, #142	; 0x8e
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 8005a2a:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <pack_telem_data+0x13bc>)
 8005a2c:	edd3 7a00 	vldr	s15, [r3]
 8005a30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3c:	ee17 3a90 	vmov	r3, s15
 8005a40:	161a      	asrs	r2, r3, #24
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	338f      	adds	r3, #143	; 0x8f
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 8005a4a:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <pack_telem_data+0x13bc>)
 8005a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a5c:	edc7 7a00 	vstr	s15, [r7]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3390      	adds	r3, #144	; 0x90
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 8005a6a:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <pack_telem_data+0x13bc>)
 8005a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a7c:	ee17 3a90 	vmov	r3, s15
 8005a80:	121a      	asrs	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3391      	adds	r3, #145	; 0x91
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <pack_telem_data+0x13bc>)
 8005a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a9c:	ee17 3a90 	vmov	r3, s15
 8005aa0:	141a      	asrs	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3392      	adds	r3, #146	; 0x92
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 8005aaa:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <pack_telem_data+0x13bc>)
 8005aac:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ab0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005abc:	ee17 3a90 	vmov	r3, s15
 8005ac0:	161a      	asrs	r2, r3, #24
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3393      	adds	r3, #147	; 0x93
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 8005aca:	4b4e      	ldr	r3, [pc, #312]	; (8005c04 <pack_telem_data+0x13c0>)
 8005acc:	edd3 7a00 	vldr	s15, [r3]
 8005ad0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005adc:	edc7 7a00 	vstr	s15, [r7]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3394      	adds	r3, #148	; 0x94
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 8005aea:	4b46      	ldr	r3, [pc, #280]	; (8005c04 <pack_telem_data+0x13c0>)
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005afc:	ee17 3a90 	vmov	r3, s15
 8005b00:	121a      	asrs	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3395      	adds	r3, #149	; 0x95
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 8005b0a:	4b3e      	ldr	r3, [pc, #248]	; (8005c04 <pack_telem_data+0x13c0>)
 8005b0c:	edd3 7a00 	vldr	s15, [r3]
 8005b10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b1c:	ee17 3a90 	vmov	r3, s15
 8005b20:	141a      	asrs	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3396      	adds	r3, #150	; 0x96
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 8005b2a:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <pack_telem_data+0x13c0>)
 8005b2c:	edd3 7a00 	vldr	s15, [r3]
 8005b30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b3c:	ee17 3a90 	vmov	r3, s15
 8005b40:	161a      	asrs	r2, r3, #24
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3397      	adds	r3, #151	; 0x97
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <pack_telem_data+0x13c4>)
 8005b4c:	edd3 7a00 	vldr	s15, [r3]
 8005b50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b5c:	edc7 7a00 	vstr	s15, [r7]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3398      	adds	r3, #152	; 0x98
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 8005b6a:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <pack_telem_data+0x13c4>)
 8005b6c:	edd3 7a00 	vldr	s15, [r3]
 8005b70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b7c:	ee17 3a90 	vmov	r3, s15
 8005b80:	121a      	asrs	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3399      	adds	r3, #153	; 0x99
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <pack_telem_data+0x13c4>)
 8005b8c:	edd3 7a00 	vldr	s15, [r3]
 8005b90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b9c:	ee17 3a90 	vmov	r3, s15
 8005ba0:	141a      	asrs	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	339a      	adds	r3, #154	; 0x9a
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <pack_telem_data+0x13c4>)
 8005bac:	edd3 7a00 	vldr	s15, [r3]
 8005bb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bbc:	ee17 3a90 	vmov	r3, s15
 8005bc0:	161a      	asrs	r2, r3, #24
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	339b      	adds	r3, #155	; 0x9b
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <pack_telem_data+0x13c8>)
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bdc:	edc7 7a00 	vstr	s15, [r7]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	339c      	adds	r3, #156	; 0x9c
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <pack_telem_data+0x13c8>)
 8005bec:	edd3 7a00 	vldr	s15, [r3]
 8005bf0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bf8:	e00a      	b.n	8005c10 <pack_telem_data+0x13cc>
 8005bfa:	bf00      	nop
 8005bfc:	20000584 	.word	0x20000584
 8005c00:	20000394 	.word	0x20000394
 8005c04:	200002d4 	.word	0x200002d4
 8005c08:	200002d8 	.word	0x200002d8
 8005c0c:	200002dc 	.word	0x200002dc
 8005c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c14:	ee17 3a90 	vmov	r3, s15
 8005c18:	121a      	asrs	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	339d      	adds	r3, #157	; 0x9d
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8005c22:	4bad      	ldr	r3, [pc, #692]	; (8005ed8 <pack_telem_data+0x1694>)
 8005c24:	edd3 7a00 	vldr	s15, [r3]
 8005c28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c34:	ee17 3a90 	vmov	r3, s15
 8005c38:	141a      	asrs	r2, r3, #16
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	339e      	adds	r3, #158	; 0x9e
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8005c42:	4ba5      	ldr	r3, [pc, #660]	; (8005ed8 <pack_telem_data+0x1694>)
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c54:	ee17 3a90 	vmov	r3, s15
 8005c58:	161a      	asrs	r2, r3, #24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	339f      	adds	r3, #159	; 0x9f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	33a0      	adds	r3, #160	; 0xa0
 8005c66:	4a9d      	ldr	r2, [pc, #628]	; (8005edc <pack_telem_data+0x1698>)
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	33a1      	adds	r3, #161	; 0xa1
 8005c72:	4a9a      	ldr	r2, [pc, #616]	; (8005edc <pack_telem_data+0x1698>)
 8005c74:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8005c7c:	4b98      	ldr	r3, [pc, #608]	; (8005ee0 <pack_telem_data+0x169c>)
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	33a2      	adds	r3, #162	; 0xa2
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8005c88:	4b95      	ldr	r3, [pc, #596]	; (8005ee0 <pack_telem_data+0x169c>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	0a1a      	lsrs	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	33a3      	adds	r3, #163	; 0xa3
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8005c96:	4b92      	ldr	r3, [pc, #584]	; (8005ee0 <pack_telem_data+0x169c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	0c1a      	lsrs	r2, r3, #16
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	33a4      	adds	r3, #164	; 0xa4
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8005ca4:	4b8e      	ldr	r3, [pc, #568]	; (8005ee0 <pack_telem_data+0x169c>)
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	0e1a      	lsrs	r2, r3, #24
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	33a5      	adds	r3, #165	; 0xa5
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8005cb2:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <pack_telem_data+0x169c>)
 8005cb4:	889b      	ldrh	r3, [r3, #4]
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	33a6      	adds	r3, #166	; 0xa6
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8005cc0:	4b87      	ldr	r3, [pc, #540]	; (8005ee0 <pack_telem_data+0x169c>)
 8005cc2:	889b      	ldrh	r3, [r3, #4]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	33a7      	adds	r3, #167	; 0xa7
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8005cd2:	4b83      	ldr	r3, [pc, #524]	; (8005ee0 <pack_telem_data+0x169c>)
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	33a8      	adds	r3, #168	; 0xa8
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8005ce0:	4b7f      	ldr	r3, [pc, #508]	; (8005ee0 <pack_telem_data+0x169c>)
 8005ce2:	88db      	ldrh	r3, [r3, #6]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	33a9      	adds	r3, #169	; 0xa9
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	33aa      	adds	r3, #170	; 0xaa
 8005cf6:	4a7a      	ldr	r2, [pc, #488]	; (8005ee0 <pack_telem_data+0x169c>)
 8005cf8:	7a12      	ldrb	r2, [r2, #8]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8005cfe:	4b78      	ldr	r3, [pc, #480]	; (8005ee0 <pack_telem_data+0x169c>)
 8005d00:	895b      	ldrh	r3, [r3, #10]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	33ab      	adds	r3, #171	; 0xab
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8005d0c:	4b74      	ldr	r3, [pc, #464]	; (8005ee0 <pack_telem_data+0x169c>)
 8005d0e:	895b      	ldrh	r3, [r3, #10]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	33ac      	adds	r3, #172	; 0xac
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8005d1e:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <pack_telem_data+0x169c>)
 8005d20:	899b      	ldrh	r3, [r3, #12]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	33ad      	adds	r3, #173	; 0xad
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8005d2c:	4b6c      	ldr	r3, [pc, #432]	; (8005ee0 <pack_telem_data+0x169c>)
 8005d2e:	899b      	ldrh	r3, [r3, #12]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	33ae      	adds	r3, #174	; 0xae
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8005d3e:	4b69      	ldr	r3, [pc, #420]	; (8005ee4 <pack_telem_data+0x16a0>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005ee8 <pack_telem_data+0x16a4>
 8005d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d50:	edc7 7a00 	vstr	s15, [r7]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	33af      	adds	r3, #175	; 0xaf
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8005d5e:	4b61      	ldr	r3, [pc, #388]	; (8005ee4 <pack_telem_data+0x16a0>)
 8005d60:	edd3 7a00 	vldr	s15, [r3]
 8005d64:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005ee8 <pack_telem_data+0x16a4>
 8005d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d70:	ee17 3a90 	vmov	r3, s15
 8005d74:	121a      	asrs	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	33b0      	adds	r3, #176	; 0xb0
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8005d7e:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <pack_telem_data+0x16a0>)
 8005d80:	edd3 7a00 	vldr	s15, [r3]
 8005d84:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005ee8 <pack_telem_data+0x16a4>
 8005d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d90:	ee17 3a90 	vmov	r3, s15
 8005d94:	141a      	asrs	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	33b1      	adds	r3, #177	; 0xb1
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8005d9e:	4b51      	ldr	r3, [pc, #324]	; (8005ee4 <pack_telem_data+0x16a0>)
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005ee8 <pack_telem_data+0x16a4>
 8005da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005db0:	ee17 3a90 	vmov	r3, s15
 8005db4:	161a      	asrs	r2, r3, #24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	33b2      	adds	r3, #178	; 0xb2
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8005dbe:	4b4b      	ldr	r3, [pc, #300]	; (8005eec <pack_telem_data+0x16a8>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	33b3      	adds	r3, #179	; 0xb3
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8005dca:	4b48      	ldr	r3, [pc, #288]	; (8005eec <pack_telem_data+0x16a8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	121a      	asrs	r2, r3, #8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	33b4      	adds	r3, #180	; 0xb4
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8005dd8:	4b44      	ldr	r3, [pc, #272]	; (8005eec <pack_telem_data+0x16a8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	141a      	asrs	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	33b5      	adds	r3, #181	; 0xb5
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <pack_telem_data+0x16a8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	161a      	asrs	r2, r3, #24
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	33b6      	adds	r3, #182	; 0xb6
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	33b7      	adds	r3, #183	; 0xb7
 8005df8:	4a3d      	ldr	r2, [pc, #244]	; (8005ef0 <pack_telem_data+0x16ac>)
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	33b8      	adds	r3, #184	; 0xb8
 8005e02:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <pack_telem_data+0x16b0>)
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8005e08:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <pack_telem_data+0x16b4>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	33b9      	adds	r3, #185	; 0xb9
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8005e14:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <pack_telem_data+0x16b4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	0a1a      	lsrs	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	33ba      	adds	r3, #186	; 0xba
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8005e22:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <pack_telem_data+0x16b4>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	0c1a      	lsrs	r2, r3, #16
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	33bb      	adds	r3, #187	; 0xbb
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8005e30:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <pack_telem_data+0x16b4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	0e1a      	lsrs	r2, r3, #24
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	33bc      	adds	r3, #188	; 0xbc
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	33bd      	adds	r3, #189	; 0xbd
 8005e42:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <pack_telem_data+0x16b8>)
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	33be      	adds	r3, #190	; 0xbe
 8005e4c:	4a24      	ldr	r2, [pc, #144]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e4e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8005e56:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e58:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	33bf      	adds	r3, #191	; 0xbf
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8005e62:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e64:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	33c0      	adds	r3, #192	; 0xc0
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e74:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	33c1      	adds	r3, #193	; 0xc1
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8005e80:	4b17      	ldr	r3, [pc, #92]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	33c2      	adds	r3, #194	; 0xc2
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <pack_telem_data+0x169c>)
 8005e94:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	33c3      	adds	r3, #195	; 0xc3
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <pack_telem_data+0x169c>)
 8005ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	33c4      	adds	r3, #196	; 0xc4
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	33c5      	adds	r3, #197	; 0xc5
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <pack_telem_data+0x169c>)
 8005eb8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005ebc:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	33c6      	adds	r3, #198	; 0xc6
 8005ec2:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <pack_telem_data+0x169c>)
 8005ec4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005ec8:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	33c7      	adds	r3, #199	; 0xc7
 8005ece:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <pack_telem_data+0x169c>)
 8005ed0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e013      	b.n	8005f00 <pack_telem_data+0x16bc>
 8005ed8:	200002dc 	.word	0x200002dc
 8005edc:	20000584 	.word	0x20000584
 8005ee0:	2000062c 	.word	0x2000062c
 8005ee4:	200002e0 	.word	0x200002e0
 8005ee8:	461c4000 	.word	0x461c4000
 8005eec:	200002e4 	.word	0x200002e4
 8005ef0:	200002e8 	.word	0x200002e8
 8005ef4:	200002e9 	.word	0x200002e9
 8005ef8:	200002ec 	.word	0x200002ec
 8005efc:	200002f0 	.word	0x200002f0
	*(dst + 200) = TELEM_ITEM_200;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	33c8      	adds	r3, #200	; 0xc8
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <pack_telem_data+0x16d4>)
 8005f06:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	2000062c 	.word	0x2000062c

08005f1c <update_serial_data_vars>:
		buffer_info->telem_buffer[i] = 0;
	}
	*/
}

void update_serial_data_vars() {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
    flash_mem = get_bytes_remaining(&flash);
 8005f20:	4805      	ldr	r0, [pc, #20]	; (8005f38 <update_serial_data_vars+0x1c>)
 8005f22:	f003 fc1a 	bl	800975a <get_bytes_remaining>
 8005f26:	4603      	mov	r3, r0
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <update_serial_data_vars+0x20>)
 8005f2a:	6013      	str	r3, [r2, #0]

    // Update last command received
    last_command_id = CLB_last_cmd_received;
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <update_serial_data_vars+0x24>)
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <update_serial_data_vars+0x28>)
 8005f32:	701a      	strb	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20002170 	.word	0x20002170
 8005f3c:	200002ec 	.word	0x200002ec
 8005f40:	20000d90 	.word	0x20000d90
 8005f44:	200002cc 	.word	0x200002cc

08005f48 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
	header->origin_addr = OWN_BOARD_ADDR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	70da      	strb	r2, [r3, #3]
	header->num_packets = 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	711a      	strb	r2, [r3, #4]
	header->do_cobbs = 1; // enable COBS
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	715a      	strb	r2, [r3, #5]
	header->checksum = 0;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	80da      	strh	r2, [r3, #6]
	header->timestamp = SYS_MICROS;
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <init_packet_header+0x4c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	20000904 	.word	0x20000904

08005f98 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 8005fa2:	79fa      	ldrb	r2, [r7, #7]
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	4611      	mov	r1, r2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff ffcc 	bl	8005f48 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8005fb0:	f107 0314 	add.w	r3, r7, #20
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f002 f9a0 	bl	8008300 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <send_telem_packet+0x40>)
 8005fc2:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 f9c4 	bl	8008358 <send_data>
}
 8005fd0:	bf00      	nop
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	2000202c 	.word	0x2000202c

08005fdc <save_flash_packet>:

void save_flash_packet() {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b0c8      	sub	sp, #288	; 0x120
 8005fe0:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 8005fe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fe6:	2107      	movs	r1, #7
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff ffad 	bl	8005f48 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 8005fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f002 f981 	bl	8008300 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 8005ffe:	f107 0310 	add.w	r3, r7, #16
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	3304      	adds	r3, #4
 8006008:	22f9      	movs	r2, #249	; 0xf9
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f008 f9d1 	bl	800e3b4 <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	2200      	movs	r2, #0
 8006016:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	22fd      	movs	r2, #253	; 0xfd
 800601c:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	f107 0210 	add.w	r2, r7, #16
 8006024:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 8006026:	1d3b      	adds	r3, r7, #4
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f002 f994 	bl	8008358 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 800603a:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800603e:	f107 0310 	add.w	r3, r7, #16
 8006042:	4619      	mov	r1, r3
 8006044:	4803      	ldr	r0, [pc, #12]	; (8006054 <save_flash_packet+0x78>)
 8006046:	f003 fa18 	bl	800947a <write_to_flash>
}
 800604a:	bf00      	nop
 800604c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20002170 	.word	0x20002170

08006058 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 8006058:	b580      	push	{r7, lr}
 800605a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800605e:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 8006060:	481e      	ldr	r0, [pc, #120]	; (80060dc <transmit_flash_data+0x84>)
 8006062:	f003 fad5 	bl	8009610 <finish_flash_write>

	uint32_t page = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <transmit_flash_data+0x84>)
 800606e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <transmit_flash_data+0x84>)
 800607a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <transmit_flash_data+0x34>
		end_page--;
 8006082:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006086:	3b01      	subs	r3, #1
 8006088:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 800608c:	4813      	ldr	r0, [pc, #76]	; (80060dc <transmit_flash_data+0x84>)
 800608e:	f003 fb05 	bl	800969c <reset_flash_read_pointer>
	while (page < end_page) {
 8006092:	e014      	b.n	80060be <transmit_flash_data+0x66>
	    read_next_2KB_from_flash(&flash, read_buffer);
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	4810      	ldr	r0, [pc, #64]	; (80060dc <transmit_flash_data+0x84>)
 800609a:	f003 fb0d 	bl	80096b8 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 800609e:	4639      	mov	r1, r7
 80060a0:	f04f 33ff 	mov.w	r3, #4294967295
 80060a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a8:	480d      	ldr	r0, [pc, #52]	; (80060e0 <transmit_flash_data+0x88>)
 80060aa:	f007 f846 	bl	800d13a <HAL_UART_Transmit>
	    ++page;
 80060ae:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80060b2:	3301      	adds	r3, #1
 80060b4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
		HAL_IWDG_Refresh(&hiwdg);
 80060b8:	480a      	ldr	r0, [pc, #40]	; (80060e4 <transmit_flash_data+0x8c>)
 80060ba:	f004 fbbc 	bl	800a836 <HAL_IWDG_Refresh>
	while (page < end_page) {
 80060be:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80060c2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3e4      	bcc.n	8006094 <transmit_flash_data+0x3c>
	}
	reset_flash_read_pointer(&flash);
 80060ca:	4804      	ldr	r0, [pc, #16]	; (80060dc <transmit_flash_data+0x84>)
 80060cc:	f003 fae6 	bl	800969c <reset_flash_read_pointer>
}
 80060d0:	bf00      	nop
 80060d2:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20002170 	.word	0x20002170
 80060e0:	2000202c 	.word	0x2000202c
 80060e4:	200008f4 	.word	0x200008f4

080060e8 <send_calibration_data>:
        RxRollover++;       // increment Rollover Counter
    }
}
*/

void send_calibration_data() {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
	CLB_Packet_Header cal_header;

	cal_header.packet_type = 2; // calibration packet
 80060ee:	2302      	movs	r3, #2
 80060f0:	733b      	strb	r3, [r7, #12]
	cal_header.origin_addr = OWN_BOARD_ADDR;
 80060f2:	2303      	movs	r3, #3
 80060f4:	737b      	strb	r3, [r7, #13]
	cal_header.target_addr = SERVER_ADDR;
 80060f6:	2307      	movs	r3, #7
 80060f8:	73bb      	strb	r3, [r7, #14]
	cal_header.priority = 1; // medium
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
	cal_header.num_packets = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	743b      	strb	r3, [r7, #16]
	cal_header.do_cobbs = 1; // enable COBS
 8006102:	2301      	movs	r3, #1
 8006104:	747b      	strb	r3, [r7, #17]
	cal_header.checksum = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	827b      	strh	r3, [r7, #18]
	cal_header.timestamp = SYS_MICROS;
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <send_calibration_data+0x54>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	617b      	str	r3, [r7, #20]

	pack_calibration_data(calibration_telem_buffer);
 8006112:	480b      	ldr	r0, [pc, #44]	; (8006140 <send_calibration_data+0x58>)
 8006114:	f7fe f966 	bl	80043e4 <pack_calibration_data>
    init_data(calibration_telem_buffer, CLB_NUM_CALIBRATION_ITEMS, &cal_header);  // Comms library (tx, so no buffer)
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	461a      	mov	r2, r3
 800611e:	2124      	movs	r1, #36	; 0x24
 8006120:	4807      	ldr	r0, [pc, #28]	; (8006140 <send_calibration_data+0x58>)
 8006122:	f002 f8ed 	bl	8008300 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <send_calibration_data+0x5c>)
 8006128:	603b      	str	r3, [r7, #0]
    send_data(&info, CLB_Telem);
 800612a:	463b      	mov	r3, r7
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f002 f912 	bl	8008358 <send_data>
}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000904 	.word	0x20000904
 8006140:	2000214c 	.word	0x2000214c
 8006144:	2000202c 	.word	0x2000202c

08006148 <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 8006150:	2201      	movs	r2, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	461a      	mov	r2, r3
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <set_status_flag+0x28>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	4a03      	ldr	r2, [pc, #12]	; (8006170 <set_status_flag+0x28>)
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	200002d0 	.word	0x200002d0

08006174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <HAL_MspInit+0x4c>)
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <HAL_MspInit+0x4c>)
 8006184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006188:	6453      	str	r3, [r2, #68]	; 0x44
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <HAL_MspInit+0x4c>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_MspInit+0x4c>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <HAL_MspInit+0x4c>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6413      	str	r3, [r2, #64]	; 0x40
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_MspInit+0x4c>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80061b2:	2004      	movs	r0, #4
 80061b4:	f003 fcd6 	bl	8009b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40023800 	.word	0x40023800

080061c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08e      	sub	sp, #56	; 0x38
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a4c      	ldr	r2, [pc, #304]	; (8006314 <HAL_SPI_MspInit+0x150>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d12c      	bne.n	8006240 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	4b4b      	ldr	r3, [pc, #300]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	4a4a      	ldr	r2, [pc, #296]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80061f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061f4:	6453      	str	r3, [r2, #68]	; 0x44
 80061f6:	4b48      	ldr	r3, [pc, #288]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	61fb      	str	r3, [r7, #28]
 8006206:	4b44      	ldr	r3, [pc, #272]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4a43      	ldr	r2, [pc, #268]	; (8006318 <HAL_SPI_MspInit+0x154>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6313      	str	r3, [r2, #48]	; 0x30
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800621e:	23e0      	movs	r3, #224	; 0xe0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006222:	2302      	movs	r3, #2
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006226:	2300      	movs	r3, #0
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622a:	2303      	movs	r3, #3
 800622c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800622e:	2305      	movs	r3, #5
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006236:	4619      	mov	r1, r3
 8006238:	4838      	ldr	r0, [pc, #224]	; (800631c <HAL_SPI_MspInit+0x158>)
 800623a:	f004 f8db 	bl	800a3f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800623e:	e064      	b.n	800630a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a36      	ldr	r2, [pc, #216]	; (8006320 <HAL_SPI_MspInit+0x15c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d12d      	bne.n	80062a6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	4a31      	ldr	r2, [pc, #196]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006258:	6413      	str	r3, [r2, #64]	; 0x40
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <HAL_SPI_MspInit+0x154>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_SPI_MspInit+0x154>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	6313      	str	r3, [r2, #48]	; 0x30
 8006276:	4b28      	ldr	r3, [pc, #160]	; (8006318 <HAL_SPI_MspInit+0x154>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006282:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006290:	2303      	movs	r3, #3
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006294:	2305      	movs	r3, #5
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800629c:	4619      	mov	r1, r3
 800629e:	4821      	ldr	r0, [pc, #132]	; (8006324 <HAL_SPI_MspInit+0x160>)
 80062a0:	f004 f8a8 	bl	800a3f4 <HAL_GPIO_Init>
}
 80062a4:	e031      	b.n	800630a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI4)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_SPI_MspInit+0x164>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d12c      	bne.n	800630a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	4b18      	ldr	r3, [pc, #96]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	4a17      	ldr	r2, [pc, #92]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062be:	6453      	str	r3, [r2, #68]	; 0x44
 80062c0:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	4a10      	ldr	r2, [pc, #64]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062d6:	f043 0310 	orr.w	r3, r3, #16
 80062da:	6313      	str	r3, [r2, #48]	; 0x30
 80062dc:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <HAL_SPI_MspInit+0x154>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80062e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ee:	2302      	movs	r3, #2
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f6:	2303      	movs	r3, #3
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80062fa:	2305      	movs	r3, #5
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006302:	4619      	mov	r1, r3
 8006304:	4809      	ldr	r0, [pc, #36]	; (800632c <HAL_SPI_MspInit+0x168>)
 8006306:	f004 f875 	bl	800a3f4 <HAL_GPIO_Init>
}
 800630a:	bf00      	nop
 800630c:	3738      	adds	r7, #56	; 0x38
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40013000 	.word	0x40013000
 8006318:	40023800 	.word	0x40023800
 800631c:	40020000 	.word	0x40020000
 8006320:	40003800 	.word	0x40003800
 8006324:	40020400 	.word	0x40020400
 8006328:	40013400 	.word	0x40013400
 800632c:	40021000 	.word	0x40021000

08006330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	4b62      	ldr	r3, [pc, #392]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	4a61      	ldr	r2, [pc, #388]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	6413      	str	r3, [r2, #64]	; 0x40
 8006352:	4b5f      	ldr	r3, [pc, #380]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800635e:	e0b2      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM3)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5b      	ldr	r2, [pc, #364]	; (80064d4 <HAL_TIM_Base_MspInit+0x1a4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	4b58      	ldr	r3, [pc, #352]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	4a57      	ldr	r2, [pc, #348]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	6413      	str	r3, [r2, #64]	; 0x40
 800637a:	4b55      	ldr	r3, [pc, #340]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	6a3b      	ldr	r3, [r7, #32]
}
 8006386:	e09e      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM5)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a52      	ldr	r2, [pc, #328]	; (80064d8 <HAL_TIM_Base_MspInit+0x1a8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10e      	bne.n	80063b0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	4b4e      	ldr	r3, [pc, #312]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4a4d      	ldr	r2, [pc, #308]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 800639c:	f043 0308 	orr.w	r3, r3, #8
 80063a0:	6413      	str	r3, [r2, #64]	; 0x40
 80063a2:	4b4b      	ldr	r3, [pc, #300]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	69fb      	ldr	r3, [r7, #28]
}
 80063ae:	e08a      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM6)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a49      	ldr	r2, [pc, #292]	; (80064dc <HAL_TIM_Base_MspInit+0x1ac>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d116      	bne.n	80063e8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	4b44      	ldr	r3, [pc, #272]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a43      	ldr	r2, [pc, #268]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063c4:	f043 0310 	orr.w	r3, r3, #16
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b41      	ldr	r3, [pc, #260]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2101      	movs	r1, #1
 80063da:	2036      	movs	r0, #54	; 0x36
 80063dc:	f003 fbcd 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80063e0:	2036      	movs	r0, #54	; 0x36
 80063e2:	f003 fbe6 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
}
 80063e6:	e06e      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM7)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3c      	ldr	r2, [pc, #240]	; (80064e0 <HAL_TIM_Base_MspInit+0x1b0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d116      	bne.n	8006420 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80063fc:	f043 0320 	orr.w	r3, r3, #32
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b33      	ldr	r3, [pc, #204]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800640e:	2200      	movs	r2, #0
 8006410:	2102      	movs	r1, #2
 8006412:	2037      	movs	r0, #55	; 0x37
 8006414:	f003 fbb1 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006418:	2037      	movs	r0, #55	; 0x37
 800641a:	f003 fbca 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
}
 800641e:	e052      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM10)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2f      	ldr	r2, [pc, #188]	; (80064e4 <HAL_TIM_Base_MspInit+0x1b4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d116      	bne.n	8006458 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006438:	6453      	str	r3, [r2, #68]	; 0x44
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2102      	movs	r1, #2
 800644a:	2019      	movs	r0, #25
 800644c:	f003 fb95 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006450:	2019      	movs	r0, #25
 8006452:	f003 fbae 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
}
 8006456:	e036      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM11)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a22      	ldr	r2, [pc, #136]	; (80064e8 <HAL_TIM_Base_MspInit+0x1b8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d116      	bne.n	8006490 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 800646c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006470:	6453      	str	r3, [r2, #68]	; 0x44
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 800647e:	2200      	movs	r2, #0
 8006480:	2102      	movs	r1, #2
 8006482:	201a      	movs	r0, #26
 8006484:	f003 fb79 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006488:	201a      	movs	r0, #26
 800648a:	f003 fb92 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
}
 800648e:	e01a      	b.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM13)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a15      	ldr	r2, [pc, #84]	; (80064ec <HAL_TIM_Base_MspInit+0x1bc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d115      	bne.n	80064c6 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	6413      	str	r3, [r2, #64]	; 0x40
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_TIM_Base_MspInit+0x1a0>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80064b6:	2200      	movs	r2, #0
 80064b8:	2101      	movs	r1, #1
 80064ba:	202c      	movs	r0, #44	; 0x2c
 80064bc:	f003 fb5d 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80064c0:	202c      	movs	r0, #44	; 0x2c
 80064c2:	f003 fb76 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
}
 80064c6:	bf00      	nop
 80064c8:	3728      	adds	r7, #40	; 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800
 80064d4:	40000400 	.word	0x40000400
 80064d8:	40000c00 	.word	0x40000c00
 80064dc:	40001000 	.word	0x40001000
 80064e0:	40001400 	.word	0x40001400
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800
 80064ec:	40001c00 	.word	0x40001c00

080064f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	609a      	str	r2, [r3, #8]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006510:	d11f      	bne.n	8006552 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	6313      	str	r3, [r2, #48]	; 0x30
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = mtr0_pwmA_Pin|mtr0_pwmB_Pin;
 800652e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006534:	2302      	movs	r3, #2
 8006536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800653c:	2300      	movs	r3, #0
 800653e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006540:	2301      	movs	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4619      	mov	r1, r3
 800654a:	4816      	ldr	r0, [pc, #88]	; (80065a4 <HAL_TIM_MspPostInit+0xb4>)
 800654c:	f003 ff52 	bl	800a3f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006550:	e022      	b.n	8006598 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <HAL_TIM_MspPostInit+0xb8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d11d      	bne.n	8006598 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	6313      	str	r3, [r2, #48]	; 0x30
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_TIM_MspPostInit+0xb0>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mtr1_pwmA_Pin|mtr1_pwmB_Pin;
 8006578:	2330      	movs	r3, #48	; 0x30
 800657a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657c:	2302      	movs	r3, #2
 800657e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006584:	2300      	movs	r3, #0
 8006586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006588:	2302      	movs	r3, #2
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	4619      	mov	r1, r3
 8006592:	4804      	ldr	r0, [pc, #16]	; (80065a4 <HAL_TIM_MspPostInit+0xb4>)
 8006594:	f003 ff2e 	bl	800a3f4 <HAL_GPIO_Init>
}
 8006598:	bf00      	nop
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40020400 	.word	0x40020400
 80065a8:	40000400 	.word	0x40000400

080065ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a35      	ldr	r2, [pc, #212]	; (80066a0 <HAL_UART_MspInit+0xf4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d163      	bne.n	8006696 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a33      	ldr	r2, [pc, #204]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065f4:	f043 0308 	orr.w	r3, r3, #8
 80065f8:	6313      	str	r3, [r2, #48]	; 0x30
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <HAL_UART_MspInit+0xf8>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006606:	2360      	movs	r3, #96	; 0x60
 8006608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660a:	2302      	movs	r3, #2
 800660c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006612:	2303      	movs	r3, #3
 8006614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006616:	2307      	movs	r3, #7
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800661a:	f107 0314 	add.w	r3, r7, #20
 800661e:	4619      	mov	r1, r3
 8006620:	4821      	ldr	r0, [pc, #132]	; (80066a8 <HAL_UART_MspInit+0xfc>)
 8006622:	f003 fee7 	bl	800a3f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006626:	4b21      	ldr	r3, [pc, #132]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006628:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <HAL_UART_MspInit+0x104>)
 800662a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <HAL_UART_MspInit+0x100>)
 800662e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006632:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006634:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <HAL_UART_MspInit+0x100>)
 800663c:	2200      	movs	r2, #0
 800663e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006646:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006648:	4b18      	ldr	r3, [pc, #96]	; (80066ac <HAL_UART_MspInit+0x100>)
 800664a:	2200      	movs	r2, #0
 800664c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800664e:	4b17      	ldr	r3, [pc, #92]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006650:	2200      	movs	r2, #0
 8006652:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006654:	4b15      	ldr	r3, [pc, #84]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800665a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800665c:	4b13      	ldr	r3, [pc, #76]	; (80066ac <HAL_UART_MspInit+0x100>)
 800665e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006662:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006666:	2200      	movs	r2, #0
 8006668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800666a:	4810      	ldr	r0, [pc, #64]	; (80066ac <HAL_UART_MspInit+0x100>)
 800666c:	f003 fac0 	bl	8009bf0 <HAL_DMA_Init>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006676:	f7fd f873 	bl	8003760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a0b      	ldr	r2, [pc, #44]	; (80066ac <HAL_UART_MspInit+0x100>)
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <HAL_UART_MspInit+0x100>)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	2026      	movs	r0, #38	; 0x26
 800668c:	f003 fa75 	bl	8009b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006690:	2026      	movs	r0, #38	; 0x26
 8006692:	f003 fa8e 	bl	8009bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006696:	bf00      	nop
 8006698:	3728      	adds	r7, #40	; 0x28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40020c00 	.word	0x40020c00
 80066ac:	200007f4 	.word	0x200007f4
 80066b0:	40026088 	.word	0x40026088

080066b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066b8:	e7fe      	b.n	80066b8 <NMI_Handler+0x4>

080066ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066ba:	b480      	push	{r7}
 80066bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066be:	e7fe      	b.n	80066be <HardFault_Handler+0x4>

080066c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066c4:	e7fe      	b.n	80066c4 <MemManage_Handler+0x4>

080066c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066ca:	e7fe      	b.n	80066ca <BusFault_Handler+0x4>

080066cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066d0:	e7fe      	b.n	80066d0 <UsageFault_Handler+0x4>

080066d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066ee:	b480      	push	{r7}
 80066f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066f2:	bf00      	nop
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006700:	f003 f906 	bl	8009910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}

08006708 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800670c:	4802      	ldr	r0, [pc, #8]	; (8006718 <DMA1_Stream5_IRQHandler+0x10>)
 800670e:	f003 fc07 	bl	8009f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200007f4 	.word	0x200007f4

0800671c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006720:	4802      	ldr	r0, [pc, #8]	; (800672c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006722:	f005 fe63 	bl	800c3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	200008ac 	.word	0x200008ac

08006730 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006734:	4802      	ldr	r0, [pc, #8]	; (8006740 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006736:	f005 fe59 	bl	800c3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000bdc 	.word	0x20000bdc

08006744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006748:	4807      	ldr	r0, [pc, #28]	; (8006768 <USART2_IRQHandler+0x24>)
 800674a:	f006 fdb9 	bl	800d2c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <USART2_IRQHandler+0x24>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d102      	bne.n	8006762 <USART2_IRQHandler+0x1e>
      HAL_UART_RxCpltCallback(&huart2);
 800675c:	4802      	ldr	r0, [pc, #8]	; (8006768 <USART2_IRQHandler+0x24>)
 800675e:	f7fc f8bb 	bl	80028d8 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	2000202c 	.word	0x2000202c

0800676c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8006770:	4802      	ldr	r0, [pc, #8]	; (800677c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8006772:	f005 fe3b 	bl	800c3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000a94 	.word	0x20000a94

08006780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006784:	4802      	ldr	r0, [pc, #8]	; (8006790 <TIM6_DAC_IRQHandler+0x10>)
 8006786:	f005 fe31 	bl	800c3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000d48 	.word	0x20000d48

08006794 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006798:	4802      	ldr	r0, [pc, #8]	; (80067a4 <TIM7_IRQHandler+0x10>)
 800679a:	f005 fe27 	bl	800c3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800679e:	bf00      	nop
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20002080 	.word	0x20002080

080067a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SystemInit+0x20>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <SystemInit+0x20>)
 80067b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	461a      	mov	r2, r3
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f001 f9ea 	bl	8007bc6 <set_valve_channel>
	}
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <tank_init_control_loop>:

/**
 * Call this right before entering the control loop
 */
void tank_init_control_loop(TPC_Info* tank) {
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
	tank->Kp_error = 0,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	635a      	str	r2, [r3, #52]	; 0x34
	tank->Ki_error = 0;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
	tank->Kd_error = 0;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	63da      	str	r2, [r3, #60]	; 0x3c
	tank->PID_error_sum = 0;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	ed93 7a04 	vldr	s14, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	edd3 7a00 	vldr	s15, [r3]
 8006830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <tank_autopress_bang_bang>:


void tank_autopress_bang_bang(TPC_Info* tank) {
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	ed93 7a00 	vldr	s14, [r3]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_low_pres_diff)) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006862:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 8006866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800686a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686e:	d504      	bpl.n	800687a <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 8006870:	2101      	movs	r1, #1
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ffaa 	bl	80067cc <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8006878:	e015      	b.n	80068a6 <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	ed93 7a00 	vldr	s14, [r3]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_high_pres_diff)) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	edd3 7a06 	vldr	s15, [r3, #24]
 800688e:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 8006892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	dc00      	bgt.n	800689e <tank_autopress_bang_bang+0x58>
}
 800689c:	e003      	b.n	80068a6 <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 800689e:	2100      	movs	r1, #0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ff93 	bl	80067cc <actuate_tank_control_valve>
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7f9 fde5 	bl	800048c <__aeabi_ui2d>
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	4b6f      	ldr	r3, [pc, #444]	; (8006a84 <tank_PID_pressure_control+0x1d4>)
 80068c8:	f7f9 ff84 	bl	80007d4 <__aeabi_ddiv>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fa f94c 	bl	8000b70 <__aeabi_d2f>
 80068d8:	4603      	mov	r3, r0
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
    float max_motor_delta = maxPos - curPos[tank->motor_num]; //distance from maxPos
 80068dc:	4b6a      	ldr	r3, [pc, #424]	; (8006a88 <tank_PID_pressure_control+0x1d8>)
 80068de:	ed93 7a00 	vldr	s14, [r3]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	4a69      	ldr	r2, [pc, #420]	; (8006a8c <tank_PID_pressure_control+0x1dc>)
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	edd3 7a00 	vldr	s15, [r3]
 80068f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	edd3 7a00 	vldr	s15, [r3]
 8006906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800690a:	edc7 7a08 	vstr	s15, [r7, #32]
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006914:	edd7 6a08 	vldr	s13, [r7, #32]
 8006918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800691c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006924:	edc7 7a07 	vstr	s15, [r7, #28]
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800692e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006936:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693e:	edc7 7a06 	vstr	s15, [r7, #24]
	tank->PID_prev_step_error = error;  // store for next D calculation
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a3a      	ldr	r2, [r7, #32]
 8006946:	645a      	str	r2, [r3, #68]	; 0x44

	// Apply gains
	float Kp_term = tank->K_p * error;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800694e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006956:	edc7 7a05 	vstr	s15, [r7, #20]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc7 7a04 	vstr	s15, [r7, #16]
	float Kd_term = tank->K_d * slope;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006974:	ed97 7a06 	vldr	s14, [r7, #24]
 8006978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697c:	edc7 7a03 	vstr	s15, [r7, #12]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8006980:	ed97 7a05 	vldr	s14, [r7, #20]
 8006984:	edd7 7a04 	vldr	s15, [r7, #16]
 8006988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800698c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006994:	edc7 7a02 	vstr	s15, [r7, #8]

	// Limit output
	float motor_delta;
	if (PID_total_output < -curPos[tank->motor_num]) {  // Lower bound
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	78db      	ldrb	r3, [r3, #3]
 800699c:	4a3b      	ldr	r2, [pc, #236]	; (8006a8c <tank_PID_pressure_control+0x1dc>)
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	edd3 7a00 	vldr	s15, [r3]
 80069a6:	eef1 7a67 	vneg.f32	s15, s15
 80069aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80069ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b6:	d50b      	bpl.n	80069d0 <tank_PID_pressure_control+0x120>
		motor_delta = -curPos[tank->motor_num];
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	78db      	ldrb	r3, [r3, #3]
 80069bc:	4a33      	ldr	r2, [pc, #204]	; (8006a8c <tank_PID_pressure_control+0x1dc>)
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	edd3 7a00 	vldr	s15, [r3]
 80069c6:	eef1 7a67 	vneg.f32	s15, s15
 80069ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80069ce:	e010      	b.n	80069f2 <tank_PID_pressure_control+0x142>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 80069d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80069d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80069d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e0:	dd02      	ble.n	80069e8 <tank_PID_pressure_control+0x138>
		motor_delta = max_motor_delta;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e6:	e004      	b.n	80069f2 <tank_PID_pressure_control+0x142>
	}
	else {
		motor_delta = PID_total_output;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// Actuate motor to new position
	//actuate_tank_motor_pos(tank, motor_pos + motor_delta);  Not yet lol
    targetPos[tank->motor_num] = curPos[tank->motor_num] + motor_delta;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	78db      	ldrb	r3, [r3, #3]
 80069f6:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <tank_PID_pressure_control+0x1dc>)
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	ed93 7a00 	vldr	s14, [r3]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0c:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <tank_PID_pressure_control+0x1e0>)
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	edc3 7a00 	vstr	s15, [r3]
    curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <tank_PID_pressure_control+0x1dc>)
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	ed93 7a00 	vldr	s14, [r3]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <tank_PID_pressure_control+0x1e0>)
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	edd3 7a00 	vldr	s15, [r3]
 8006a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	d501      	bpl.n	8006a40 <tank_PID_pressure_control+0x190>
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	e001      	b.n	8006a44 <tank_PID_pressure_control+0x194>
 8006a40:	f04f 31ff 	mov.w	r1, #4294967295
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	78db      	ldrb	r3, [r3, #3]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <tank_PID_pressure_control+0x1e4>)
 8006a4c:	5499      	strb	r1, [r3, r2]

	// Log data
    mtr_set[tank->motor_num] = targetPos[tank->motor_num];
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	4619      	mov	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	78db      	ldrb	r3, [r3, #3]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <tank_PID_pressure_control+0x1e0>)
 8006a5c:	008b      	lsls	r3, r1, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	490d      	ldr	r1, [pc, #52]	; (8006a98 <tank_PID_pressure_control+0x1e8>)
 8006a64:	0083      	lsls	r3, r0, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	601a      	str	r2, [r3, #0]
    tank->Kp_error = Kp_term;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
    tank->Ki_error = Ki_term;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
    tank->Kd_error = Kd_term;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a7c:	bf00      	nop
 8006a7e:	3730      	adds	r7, #48	; 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	408f4000 	.word	0x408f4000
 8006a88:	20000010 	.word	0x20000010
 8006a8c:	200003a8 	.word	0x200003a8
 8006a90:	200003a0 	.word	0x200003a0
 8006a94:	200003b0 	.word	0x200003b0
 8006a98:	2000038c 	.word	0x2000038c

08006a9c <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	ed93 7a00 	vldr	s14, [r3]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	d504      	bpl.n	8006ac6 <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8006abc:	2101      	movs	r1, #1
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fe84 	bl	80067cc <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8006ac4:	e010      	b.n	8006ae8 <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	ed93 7a00 	vldr	s14, [r3]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	edd3 7a08 	vldr	s15, [r3, #32]
 8006ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006adc:	dc00      	bgt.n	8006ae0 <tank_check_control_valve_threshold+0x44>
}
 8006ade:	e003      	b.n	8006ae8 <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe72 	bl	80067cc <actuate_tank_control_valve>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <tank_startup_init_motor_position>:


// TODO: refactor this bigly
void tank_startup_init_motor_position(TPC_Info* tank) {
 8006af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006af4:	ed2d 8b02 	vpush	{d8}
 8006af8:	b09a      	sub	sp, #104	; 0x68
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
	static double c2     = 6140;
	static double c3     = 5360;
	static double c4     = 769.8;

	double crit_pr, t_r, valve_cv, t_f, /*p_rat, t_rat,*/ q_acf, q_scf, vdot;
	double deg = 0;
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double p_i    = (double)(*(tank->COPV_pres));       // cng pressure
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7f9 fcdd 	bl	80004d0 <__aeabi_f2d>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double p_o    = (double)(*(tank->control_pres));     // tank pressure
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7f9 fcd3 	bl	80004d0 <__aeabi_f2d>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Avoid divide by zero error
	if (p_i == 0) {
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b3e:	f7f9 ff87 	bl	8000a50 <__aeabi_dcmpeq>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <tank_startup_init_motor_position+0x62>
		p_i = 0.1;
 8006b48:	a392      	add	r3, pc, #584	; (adr r3, 8006d94 <tank_startup_init_motor_position+0x2a4>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (p_o == 0) {
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006b5e:	f7f9 ff77 	bl	8000a50 <__aeabi_dcmpeq>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <tank_startup_init_motor_position+0x82>
		p_o = 0.1;
 8006b68:	a38a      	add	r3, pc, #552	; (adr r3, 8006d94 <tank_startup_init_motor_position+0x2a4>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	t_f = 300; // K  TODO: what are these, and why aren't they also static?
 8006b72:	a38a      	add	r3, pc, #552	; (adr r3, 8006d9c <tank_startup_init_motor_position+0x2ac>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_std = 288; // K
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	4b7f      	ldr	r3, [pc, #508]	; (8006d80 <tank_startup_init_motor_position+0x290>)
 8006b82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p_std = 14.7; // psi
 8006b86:	a372      	add	r3, pc, #456	; (adr r3, 8006d50 <tank_startup_init_motor_position+0x260>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (tank->is_cryogenic) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <tank_startup_init_motor_position+0xb4>
		vdot   = 0.00317;
 8006b98:	a36f      	add	r3, pc, #444	; (adr r3, 8006d58 <tank_startup_init_motor_position+0x268>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006ba2:	e004      	b.n	8006bae <tank_startup_init_motor_position+0xbe>
	}
	else {
		vdot   = 0.00361;
 8006ba4:	a36e      	add	r3, pc, #440	; (adr r3, 8006d60 <tank_startup_init_motor_position+0x270>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	// Calculations
	crit_pr = pow(2.0 / (gamma + 1), gamma / (gamma - 1));
 8006bae:	4b75      	ldr	r3, [pc, #468]	; (8006d84 <tank_startup_init_motor_position+0x294>)
 8006bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	4b73      	ldr	r3, [pc, #460]	; (8006d88 <tank_startup_init_motor_position+0x298>)
 8006bba:	f7f9 fb2b 	bl	8000214 <__adddf3>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bca:	f7f9 fe03 	bl	80007d4 <__aeabi_ddiv>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	ec43 2b18 	vmov	d8, r2, r3
 8006bd6:	4b6b      	ldr	r3, [pc, #428]	; (8006d84 <tank_startup_init_motor_position+0x294>)
 8006bd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006bdc:	4b69      	ldr	r3, [pc, #420]	; (8006d84 <tank_startup_init_motor_position+0x294>)
 8006bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b68      	ldr	r3, [pc, #416]	; (8006d88 <tank_startup_init_motor_position+0x298>)
 8006be8:	f7f9 fb12 	bl	8000210 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fdee 	bl	80007d4 <__aeabi_ddiv>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	ec43 2b17 	vmov	d7, r2, r3
 8006c00:	eeb0 1a47 	vmov.f32	s2, s14
 8006c04:	eef0 1a67 	vmov.f32	s3, s15
 8006c08:	eeb0 0a48 	vmov.f32	s0, s16
 8006c0c:	eef0 0a68 	vmov.f32	s1, s17
 8006c10:	f007 fcde 	bl	800e5d0 <pow>
 8006c14:	ed87 0b06 	vstr	d0, [r7, #24]
	t_r     = (double)(300) * (9.0/5);  // Hardcoded temp bc tcs are buggy
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <tank_startup_init_motor_position+0x29c>)
 8006c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// TODO: uncomment that when tcs are fixed
	//t_r     = (double)(*(tank->COPV_temp)) * (9.0/5);
	q_acf = vdot*2118.88; // cfm
 8006c22:	a351      	add	r3, pc, #324	; (adr r3, 8006d68 <tank_startup_init_motor_position+0x278>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c2c:	f7f9 fca8 	bl	8000580 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (tank->is_cryogenic) { // cryogenic liquid case
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <tank_startup_init_motor_position+0x188>
		q_scf = q_acf*p_o/(p_std)*1.3;
 8006c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c48:	f7f9 fc9a 	bl	8000580 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c58:	f7f9 fdbc 	bl	80007d4 <__aeabi_ddiv>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	a342      	add	r3, pc, #264	; (adr r3, 8006d70 <tank_startup_init_motor_position+0x280>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fc89 	bl	8000580 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8006c76:	e021      	b.n	8006cbc <tank_startup_init_motor_position+0x1cc>
	}
	else {
		q_scf = q_acf*p_o*t_std/(p_std*t_f);
 8006c78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c80:	f7f9 fc7e 	bl	8000580 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c90:	f7f9 fc76 	bl	8000580 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ca0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ca4:	f7f9 fc6c 	bl	8000580 <__aeabi_dmul>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 fd90 	bl	80007d4 <__aeabi_ddiv>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	if (crit_pr >= p_o/p_i) { // Critical flows
 8006cbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006cc4:	f7f9 fd86 	bl	80007d4 <__aeabi_ddiv>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cd0:	f7f9 fedc 	bl	8000a8c <__aeabi_dcmpge>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d064      	beq.n	8006da4 <tank_startup_init_motor_position+0x2b4>
		valve_cv = q_scf/13.61/p_i/sqrt(1.0/sg/t_r);
 8006cda:	a327      	add	r3, pc, #156	; (adr r3, 8006d78 <tank_startup_init_motor_position+0x288>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ce4:	f7f9 fd76 	bl	80007d4 <__aeabi_ddiv>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4610      	mov	r0, r2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cf4:	f7f9 fd6e 	bl	80007d4 <__aeabi_ddiv>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	461d      	mov	r5, r3
 8006d00:	4b23      	ldr	r3, [pc, #140]	; (8006d90 <tank_startup_init_motor_position+0x2a0>)
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f04f 0000 	mov.w	r0, #0
 8006d0a:	491f      	ldr	r1, [pc, #124]	; (8006d88 <tank_startup_init_motor_position+0x298>)
 8006d0c:	f7f9 fd62 	bl	80007d4 <__aeabi_ddiv>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d1c:	f7f9 fd5a 	bl	80007d4 <__aeabi_ddiv>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	ec43 2b17 	vmov	d7, r2, r3
 8006d28:	eeb0 0a47 	vmov.f32	s0, s14
 8006d2c:	eef0 0a67 	vmov.f32	s1, s15
 8006d30:	f007 fcfc 	bl	800e72c <sqrt>
 8006d34:	ec53 2b10 	vmov	r2, r3, d0
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f7f9 fd4a 	bl	80007d4 <__aeabi_ddiv>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8006d48:	e070      	b.n	8006e2c <tank_startup_init_motor_position+0x33c>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	66666666 	.word	0x66666666
 8006d54:	402d6666 	.word	0x402d6666
 8006d58:	ca8198f2 	.word	0xca8198f2
 8006d5c:	3f69f7f8 	.word	0x3f69f7f8
 8006d60:	fe08aefb 	.word	0xfe08aefb
 8006d64:	3f6d92b7 	.word	0x3f6d92b7
 8006d68:	8f5c28f6 	.word	0x8f5c28f6
 8006d6c:	40a08dc2 	.word	0x40a08dc2
 8006d70:	cccccccd 	.word	0xcccccccd
 8006d74:	3ff4cccc 	.word	0x3ff4cccc
 8006d78:	eb851eb8 	.word	0xeb851eb8
 8006d7c:	402b3851 	.word	0x402b3851
 8006d80:	40720000 	.word	0x40720000
 8006d84:	200001a0 	.word	0x200001a0
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	4080e000 	.word	0x4080e000
 8006d90:	200001a8 	.word	0x200001a8
 8006d94:	9999999a 	.word	0x9999999a
 8006d98:	3fb99999 	.word	0x3fb99999
 8006d9c:	00000000 	.word	0x00000000
 8006da0:	4072c000 	.word	0x4072c000
	} else {
		valve_cv = q_scf/16.05/sqrt((pow(p_i,2)-pow(p_o,2))/sg/t_r);
 8006da4:	a397      	add	r3, pc, #604	; (adr r3, 8007004 <tank_startup_init_motor_position+0x514>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dae:	f7f9 fd11 	bl	80007d4 <__aeabi_ddiv>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4614      	mov	r4, r2
 8006db8:	461d      	mov	r5, r3
 8006dba:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8006fb8 <tank_startup_init_motor_position+0x4c8>
 8006dbe:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006dc2:	f007 fc05 	bl	800e5d0 <pow>
 8006dc6:	ec59 8b10 	vmov	r8, r9, d0
 8006dca:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8006fb8 <tank_startup_init_motor_position+0x4c8>
 8006dce:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006dd2:	f007 fbfd 	bl	800e5d0 <pow>
 8006dd6:	ec53 2b10 	vmov	r2, r3, d0
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa17 	bl	8000210 <__aeabi_dsub>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	4b7b      	ldr	r3, [pc, #492]	; (8006fd8 <tank_startup_init_motor_position+0x4e8>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fcf0 	bl	80007d4 <__aeabi_ddiv>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e00:	f7f9 fce8 	bl	80007d4 <__aeabi_ddiv>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	ec43 2b17 	vmov	d7, r2, r3
 8006e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8006e10:	eef0 0a67 	vmov.f32	s1, s15
 8006e14:	f007 fc8a 	bl	800e72c <sqrt>
 8006e18:	ec53 2b10 	vmov	r2, r3, d0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fcd8 	bl	80007d4 <__aeabi_ddiv>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e2c:	4b6b      	ldr	r3, [pc, #428]	; (8006fdc <tank_startup_init_motor_position+0x4ec>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7f9 fb4d 	bl	80004d0 <__aeabi_f2d>
 8006e36:	4604      	mov	r4, r0
 8006e38:	460d      	mov	r5, r1
 8006e3a:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8006fc0 <tank_startup_init_motor_position+0x4d0>
 8006e3e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e42:	f007 fbc5 	bl	800e5d0 <pow>
 8006e46:	ec51 0b10 	vmov	r0, r1, d0
 8006e4a:	4b65      	ldr	r3, [pc, #404]	; (8006fe0 <tank_startup_init_motor_position+0x4f0>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fb96 	bl	8000580 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4690      	mov	r8, r2
 8006e5a:	4699      	mov	r9, r3
		  c2*pow(valve_cv, 3) +
 8006e5c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8006fc8 <tank_startup_init_motor_position+0x4d8>
 8006e60:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e64:	f007 fbb4 	bl	800e5d0 <pow>
 8006e68:	ec51 0b10 	vmov	r0, r1, d0
 8006e6c:	4b5d      	ldr	r3, [pc, #372]	; (8006fe4 <tank_startup_init_motor_position+0x4f4>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 fb85 	bl	8000580 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 f9c9 	bl	8000214 <__adddf3>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4690      	mov	r8, r2
 8006e88:	4699      	mov	r9, r3
		  c3*pow(valve_cv, 2) +
 8006e8a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8006fb8 <tank_startup_init_motor_position+0x4c8>
 8006e8e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e92:	f007 fb9d 	bl	800e5d0 <pow>
 8006e96:	ec51 0b10 	vmov	r0, r1, d0
 8006e9a:	4b53      	ldr	r3, [pc, #332]	; (8006fe8 <tank_startup_init_motor_position+0x4f8>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 fb6e 	bl	8000580 <__aeabi_dmul>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
		  c2*pow(valve_cv, 3) +
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 f9b2 	bl	8000214 <__adddf3>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4690      	mov	r8, r2
 8006eb6:	4699      	mov	r9, r3
		  c4*valve_cv);
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	; (8006fec <tank_startup_init_motor_position+0x4fc>)
 8006eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ebe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006ec2:	f7f9 fb5d 	bl	8000580 <__aeabi_dmul>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
		  c3*pow(valve_cv, 2) +
 8006eca:	4640      	mov	r0, r8
 8006ecc:	4649      	mov	r1, r9
 8006ece:	f7f9 f9a1 	bl	8000214 <__adddf3>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fb51 	bl	8000580 <__aeabi_dmul>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Output limiting
	if (deg < 0) { deg = 0; }
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ef2:	f7f9 fdb7 	bl	8000a64 <__aeabi_dcmplt>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <tank_startup_init_motor_position+0x418>
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (deg > 2460) { deg = 2460; }
 8006f08:	a331      	add	r3, pc, #196	; (adr r3, 8006fd0 <tank_startup_init_motor_position+0x4e0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f12:	f7f9 fdc5 	bl	8000aa0 <__aeabi_dcmpgt>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <tank_startup_init_motor_position+0x436>
 8006f1c:	a32c      	add	r3, pc, #176	; (adr r3, 8006fd0 <tank_startup_init_motor_position+0x4e0>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	// TODO: where does 2460 come from?

	// TODO: Why is the direction manually set here?
	// can it just be the shortest path?
	if (tank->tank_enable) {
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d039      	beq.n	8006fa4 <tank_startup_init_motor_position+0x4b4>
		manual_stepper_pos_override[tank->motor_num] = 1;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	78db      	ldrb	r3, [r3, #3]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <tank_startup_init_motor_position+0x500>)
 8006f38:	2101      	movs	r1, #1
 8006f3a:	5499      	strb	r1, [r3, r2]
		targetPos[tank->motor_num] = deg; // position given in deg
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	78db      	ldrb	r3, [r3, #3]
 8006f40:	461c      	mov	r4, r3
 8006f42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f46:	f7f9 fe13 	bl	8000b70 <__aeabi_d2f>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4929      	ldr	r1, [pc, #164]	; (8006ff4 <tank_startup_init_motor_position+0x504>)
 8006f4e:	00a3      	lsls	r3, r4, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	601a      	str	r2, [r3, #0]
		curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1; // CCW facing the motor
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	78db      	ldrb	r3, [r3, #3]
 8006f58:	4a27      	ldr	r2, [pc, #156]	; (8006ff8 <tank_startup_init_motor_position+0x508>)
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	ed93 7a00 	vldr	s14, [r3]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	4a23      	ldr	r2, [pc, #140]	; (8006ff4 <tank_startup_init_motor_position+0x504>)
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	edd3 7a00 	vldr	s15, [r3]
 8006f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f78:	d501      	bpl.n	8006f7e <tank_startup_init_motor_position+0x48e>
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	e001      	b.n	8006f82 <tank_startup_init_motor_position+0x492>
 8006f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	461a      	mov	r2, r3
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <tank_startup_init_motor_position+0x50c>)
 8006f8a:	5499      	strb	r1, [r3, r2]
		mtr_set[tank->motor_num] = deg; // save new motor position setpoint
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	78db      	ldrb	r3, [r3, #3]
 8006f90:	461c      	mov	r4, r3
 8006f92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f96:	f7f9 fdeb 	bl	8000b70 <__aeabi_d2f>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4918      	ldr	r1, [pc, #96]	; (8007000 <tank_startup_init_motor_position+0x510>)
 8006f9e:	00a3      	lsls	r3, r4, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	601a      	str	r2, [r3, #0]
	}
}
 8006fa4:	bf00      	nop
 8006fa6:	3768      	adds	r7, #104	; 0x68
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	ecbd 8b02 	vpop	{d8}
 8006fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006fb2:	bf00      	nop
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	40000000 	.word	0x40000000
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	40100000 	.word	0x40100000
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	40080000 	.word	0x40080000
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	40a33800 	.word	0x40a33800
 8006fd8:	200001a8 	.word	0x200001a8
 8006fdc:	200002e0 	.word	0x200002e0
 8006fe0:	200001b0 	.word	0x200001b0
 8006fe4:	200001b8 	.word	0x200001b8
 8006fe8:	200001c0 	.word	0x200001c0
 8006fec:	200001c8 	.word	0x200001c8
 8006ff0:	2000039c 	.word	0x2000039c
 8006ff4:	200003a0 	.word	0x200003a0
 8006ff8:	200003a8 	.word	0x200003a8
 8006ffc:	200003b0 	.word	0x200003b0
 8007000:	2000038c 	.word	0x2000038c
 8007004:	cccccccd 	.word	0xcccccccd
 8007008:	40300ccc 	.word	0x40300ccc

0800700c <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3303      	adds	r3, #3
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	061a      	lsls	r2, r3, #24
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3302      	adds	r3, #2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3301      	adds	r3, #1
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	4313      	orrs	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	791b      	ldrb	r3, [r3, #4]
 800703e:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// Don't allow operator intervention during the autosequence
	if (STATE == Ignition ||
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <set_vlv+0x68>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d011      	beq.n	800706c <set_vlv+0x60>
			STATE == Hotfire ||
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <set_vlv+0x68>)
 800704a:	781b      	ldrb	r3, [r3, #0]
	if (STATE == Ignition ||
 800704c:	2b05      	cmp	r3, #5
 800704e:	d00d      	beq.n	800706c <set_vlv+0x60>
			STATE == Post ||
 8007050:	4b08      	ldr	r3, [pc, #32]	; (8007074 <set_vlv+0x68>)
 8007052:	781b      	ldrb	r3, [r3, #0]
			STATE == Hotfire ||
 8007054:	2b07      	cmp	r3, #7
 8007056:	d009      	beq.n	800706c <set_vlv+0x60>
			STATE == Abort) {
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <set_vlv+0x68>)
 800705a:	781b      	ldrb	r3, [r3, #0]
			STATE == Post ||
 800705c:	2b06      	cmp	r3, #6
 800705e:	d005      	beq.n	800706c <set_vlv+0x60>
		return;
	}
	else {
		set_valve_channel(vlv_num, state);
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	4619      	mov	r1, r3
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fdae 	bl	8007bc6 <set_valve_channel>
 800706a:	e000      	b.n	800706e <set_vlv+0x62>
		return;
 800706c:	bf00      	nop
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200002ac 	.word	0x200002ac

08007078 <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3308      	adds	r3, #8
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	2338      	movs	r3, #56	; 0x38
 8007092:	409a      	lsls	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3307      	adds	r3, #7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3306      	adds	r3, #6
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	2328      	movs	r3, #40	; 0x28
 80070ae:	fa01 f303 	lsl.w	r3, r1, r3
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3305      	adds	r3, #5
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	4619      	mov	r1, r3
 80070bc:	2320      	movs	r3, #32
 80070be:	fa01 f303 	lsl.w	r3, r1, r3
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3304      	adds	r3, #4
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3303      	adds	r3, #3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3302      	adds	r3, #2
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	4313      	orrs	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	3201      	adds	r2, #1
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7f9 f9de 	bl	80004ac <__aeabi_i2d>
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <set_kp+0xb8>)
 80070f6:	f7f9 fb6d 	bl	80007d4 <__aeabi_ddiv>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d80e      	bhi.n	8007126 <set_kp+0xae>
		tanks[motor_num].K_p = gain;
 8007108:	7dfc      	ldrb	r4, [r7, #23]
 800710a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800710e:	f7f9 fd2f 	bl	8000b70 <__aeabi_d2f>
 8007112:	4602      	mov	r2, r0
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <set_kp+0xbc>)
 8007116:	2354      	movs	r3, #84	; 0x54
 8007118:	fb03 f304 	mul.w	r3, r3, r4
 800711c:	440b      	add	r3, r1
 800711e:	3328      	adds	r3, #40	; 0x28
 8007120:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007122:	f7fc fd75 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}
 800712e:	bf00      	nop
 8007130:	40590000 	.word	0x40590000
 8007134:	20000584 	.word	0x20000584

08007138 <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3308      	adds	r3, #8
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	2338      	movs	r3, #56	; 0x38
 8007152:	409a      	lsls	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3307      	adds	r3, #7
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	4619      	mov	r1, r3
 800715c:	2330      	movs	r3, #48	; 0x30
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3306      	adds	r3, #6
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	2328      	movs	r3, #40	; 0x28
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3305      	adds	r3, #5
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	4619      	mov	r1, r3
 800717c:	2320      	movs	r3, #32
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	061b      	lsls	r3, r3, #24
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3303      	adds	r3, #3
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3302      	adds	r3, #2
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	4313      	orrs	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	3201      	adds	r2, #1
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7f9 f97e 	bl	80004ac <__aeabi_i2d>
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <set_ki+0xb8>)
 80071b6:	f7f9 fb0d 	bl	80007d4 <__aeabi_ddiv>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d80e      	bhi.n	80071e6 <set_ki+0xae>
		tanks[motor_num].K_i = gain;
 80071c8:	7dfc      	ldrb	r4, [r7, #23]
 80071ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ce:	f7f9 fccf 	bl	8000b70 <__aeabi_d2f>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <set_ki+0xbc>)
 80071d6:	2354      	movs	r3, #84	; 0x54
 80071d8:	fb03 f304 	mul.w	r3, r3, r4
 80071dc:	440b      	add	r3, r1
 80071de:	332c      	adds	r3, #44	; 0x2c
 80071e0:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80071e2:	f7fc fd15 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40590000 	.word	0x40590000
 80071f4:	20000584 	.word	0x20000584

080071f8 <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3308      	adds	r3, #8
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	2338      	movs	r3, #56	; 0x38
 8007212:	409a      	lsls	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3307      	adds	r3, #7
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	4619      	mov	r1, r3
 800721c:	2330      	movs	r3, #48	; 0x30
 800721e:	fa01 f303 	lsl.w	r3, r1, r3
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3306      	adds	r3, #6
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	2328      	movs	r3, #40	; 0x28
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3305      	adds	r3, #5
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	4619      	mov	r1, r3
 800723c:	2320      	movs	r3, #32
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	061b      	lsls	r3, r3, #24
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3303      	adds	r3, #3
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3302      	adds	r3, #2
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	4313      	orrs	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	3201      	adds	r2, #1
 8007266:	7812      	ldrb	r2, [r2, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f91e 	bl	80004ac <__aeabi_i2d>
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <set_kd+0xb8>)
 8007276:	f7f9 faad 	bl	80007d4 <__aeabi_ddiv>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d80e      	bhi.n	80072a6 <set_kd+0xae>
		tanks[motor_num].K_d = gain;
 8007288:	7dfc      	ldrb	r4, [r7, #23]
 800728a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800728e:	f7f9 fc6f 	bl	8000b70 <__aeabi_d2f>
 8007292:	4602      	mov	r2, r0
 8007294:	4907      	ldr	r1, [pc, #28]	; (80072b4 <set_kd+0xbc>)
 8007296:	2354      	movs	r3, #84	; 0x54
 8007298:	fb03 f304 	mul.w	r3, r3, r4
 800729c:	440b      	add	r3, r1
 800729e:	3330      	adds	r3, #48	; 0x30
 80072a0:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80072a2:	f7fc fcb5 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40590000 	.word	0x40590000
 80072b4:	20000584 	.word	0x20000584

080072b8 <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f9 ffd2 	bl	8001274 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072d0:	bf00      	nop
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 80072e2:	f7fe feb9 	bl	8006058 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 80072fa:	4803      	ldr	r0, [pc, #12]	; (8007308 <wipe_flash+0x18>)
 80072fc:	f002 f9fb 	bl	80096f6 <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20002170 	.word	0x20002170

0800730c <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <start_logging+0x28>)
 8007318:	2201      	movs	r2, #1
 800731a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 800731c:	2201      	movs	r2, #1
 800731e:	2101      	movs	r1, #1
 8007320:	4805      	ldr	r0, [pc, #20]	; (8007338 <start_logging+0x2c>)
 8007322:	f003 fa13 	bl	800a74c <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 8007326:	4805      	ldr	r0, [pc, #20]	; (800733c <start_logging+0x30>)
 8007328:	f002 fa82 	bl	8009830 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	200002f0 	.word	0x200002f0
 8007338:	40020800 	.word	0x40020800
 800733c:	20002170 	.word	0x20002170

08007340 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <stop_logging+0x28>)
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 8007350:	4806      	ldr	r0, [pc, #24]	; (800736c <stop_logging+0x2c>)
 8007352:	f002 f95d 	bl	8009610 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 8007356:	2200      	movs	r2, #0
 8007358:	2102      	movs	r1, #2
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <stop_logging+0x30>)
 800735c:	f003 f9f6 	bl	800a74c <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200002f0 	.word	0x200002f0
 800736c:	20002170 	.word	0x20002170
 8007370:	40020800 	.word	0x40020800

08007374 <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	061a      	lsls	r2, r3, #24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3303      	adds	r3, #3
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3302      	adds	r3, #2
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	4313      	orrs	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	3201      	adds	r2, #1
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 f87f 	bl	80004ac <__aeabi_i2d>
 80073ae:	f04f 0200 	mov.w	r2, #0
 80073b2:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <set_stepper_pos+0xb4>)
 80073b4:	f7f9 fa0e 	bl	80007d4 <__aeabi_ddiv>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	f7f9 fbd6 	bl	8000b70 <__aeabi_d2f>
 80073c4:	4603      	mov	r3, r0
 80073c6:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d827      	bhi.n	800741e <set_stepper_pos+0xaa>
		manual_stepper_pos_override[motor_num] = 1;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	4a16      	ldr	r2, [pc, #88]	; (800742c <set_stepper_pos+0xb8>)
 80073d2:	2101      	movs	r1, #1
 80073d4:	54d1      	strb	r1, [r2, r3]
		targetPos[motor_num] = position; // position converted form deg to steps
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <set_stepper_pos+0xbc>)
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	601a      	str	r2, [r3, #0]
		curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	4a13      	ldr	r2, [pc, #76]	; (8007434 <set_stepper_pos+0xc0>)
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	ed93 7a00 	vldr	s14, [r3]
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <set_stepper_pos+0xbc>)
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	edd3 7a00 	vldr	s15, [r3]
 80073fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	d501      	bpl.n	8007408 <set_stepper_pos+0x94>
 8007404:	2101      	movs	r1, #1
 8007406:	e001      	b.n	800740c <set_stepper_pos+0x98>
 8007408:	f04f 31ff 	mov.w	r1, #4294967295
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <set_stepper_pos+0xc4>)
 8007410:	54d1      	strb	r1, [r2, r3]
		mtr_set[motor_num] = position; // save new motor position setpoint
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4a09      	ldr	r2, [pc, #36]	; (800743c <set_stepper_pos+0xc8>)
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	601a      	str	r2, [r3, #0]
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40590000 	.word	0x40590000
 800742c:	2000039c 	.word	0x2000039c
 8007430:	200003a0 	.word	0x200003a0
 8007434:	200003a8 	.word	0x200003a8
 8007438:	200003b0 	.word	0x200003b0
 800743c:	2000038c 	.word	0x2000038c

08007440 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d80d      	bhi.n	8007472 <set_stepper_zero+0x32>
	    mtr_pos[motor_num] = 0;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	4a09      	ldr	r2, [pc, #36]	; (8007480 <set_stepper_zero+0x40>)
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
	    curPos[motor_num] = 0;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	4a07      	ldr	r2, [pc, #28]	; (8007484 <set_stepper_zero+0x44>)
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
		//L6470_zero_motor(&(tanks[motor_num].motor));
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000368 	.word	0x20000368
 8007484:	200003a8 	.word	0x200003a8

08007488 <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	061a      	lsls	r2, r3, #24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3303      	adds	r3, #3
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3302      	adds	r3, #2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	4313      	orrs	r3, r2
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	3201      	adds	r2, #1
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f8 fff5 	bl	80004ac <__aeabi_i2d>
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <set_control_target_pressure+0x78>)
 80074c8:	f7f9 f984 	bl	80007d4 <__aeabi_ddiv>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4610      	mov	r0, r2
 80074d2:	4619      	mov	r1, r3
 80074d4:	f7f9 fb4c 	bl	8000b70 <__aeabi_d2f>
 80074d8:	4603      	mov	r3, r0
 80074da:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d80a      	bhi.n	80074f8 <set_control_target_pressure+0x70>
		tanks[tank_num].target_pres = target_pressure;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	4a07      	ldr	r2, [pc, #28]	; (8007504 <set_control_target_pressure+0x7c>)
 80074e6:	2154      	movs	r1, #84	; 0x54
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	3310      	adds	r3, #16
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80074f4:	f7fc fb8c 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	408f4000 	.word	0x408f4000
 8007504:	20000584 	.word	0x20000584

08007508 <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	e016      	b.n	8007546 <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <ambientize_pressure_transducers+0x50>)
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	ed93 7a00 	vldr	s14, [r3]
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4a0d      	ldr	r2, [pc, #52]	; (800755c <ambientize_pressure_transducers+0x54>)
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	edd3 7a00 	vldr	s15, [r3]
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007536:	4a09      	ldr	r2, [pc, #36]	; (800755c <ambientize_pressure_transducers+0x54>)
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	3301      	adds	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	2b05      	cmp	r3, #5
 800754a:	d9e5      	bls.n	8007518 <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 800754c:	f7fc fb60 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	200002f4 	.word	0x200002f4
 800755c:	2000025c 	.word	0x2000025c

08007560 <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	061a      	lsls	r2, r3, #24
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3303      	adds	r3, #3
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3302      	adds	r3, #2
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	4313      	orrs	r3, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	3201      	adds	r2, #1
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	4313      	orrs	r3, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7f8 ff89 	bl	80004ac <__aeabi_i2d>
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <set_low_toggle_percent+0x94>)
 80075a0:	f7f9 f918 	bl	80007d4 <__aeabi_ddiv>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4610      	mov	r0, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	f7f9 fae0 	bl	8000b70 <__aeabi_d2f>
 80075b0:	4603      	mov	r3, r0
 80075b2:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d817      	bhi.n	80075ea <set_low_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	4a0e      	ldr	r2, [pc, #56]	; (80075f8 <set_low_toggle_percent+0x98>)
 80075be:	2154      	movs	r1, #84	; 0x54
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	4413      	add	r3, r2
 80075c6:	3310      	adds	r3, #16
 80075c8:	ed93 7a00 	vldr	s14, [r3]
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
				* lower_threshold_pct;
 80075ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <set_low_toggle_percent+0x98>)
 80075d8:	2154      	movs	r1, #84	; 0x54
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	331c      	adds	r3, #28
 80075e2:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 80075e6:	f7fc fb13 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	408f4000 	.word	0x408f4000
 80075f8:	20000584 	.word	0x20000584

080075fc <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	061a      	lsls	r2, r3, #24
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3303      	adds	r3, #3
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3302      	adds	r3, #2
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	4313      	orrs	r3, r2
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	3201      	adds	r2, #1
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	4313      	orrs	r3, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7f8 ff3b 	bl	80004ac <__aeabi_i2d>
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <set_high_toggle_percent+0x94>)
 800763c:	f7f9 f8ca 	bl	80007d4 <__aeabi_ddiv>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	f7f9 fa92 	bl	8000b70 <__aeabi_d2f>
 800764c:	4603      	mov	r3, r0
 800764e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d817      	bhi.n	8007686 <set_high_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	4a0e      	ldr	r2, [pc, #56]	; (8007694 <set_high_toggle_percent+0x98>)
 800765a:	2154      	movs	r1, #84	; 0x54
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	3310      	adds	r3, #16
 8007664:	ed93 7a00 	vldr	s14, [r3]
 8007668:	7bfb      	ldrb	r3, [r7, #15]
				* upper_threshold_pct;
 800766a:	edd7 7a02 	vldr	s15, [r7, #8]
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8007672:	4a08      	ldr	r2, [pc, #32]	; (8007694 <set_high_toggle_percent+0x98>)
 8007674:	2154      	movs	r1, #84	; 0x54
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	3320      	adds	r3, #32
 800767e:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8007682:	f7fc fac5 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	408f4000 	.word	0x408f4000
 8007694:	20000584 	.word	0x20000584

08007698 <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	telem_disabled = state;
 80076a8:	4a04      	ldr	r2, [pc, #16]	; (80076bc <set_telem+0x24>)
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	7013      	strb	r3, [r2, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000582 	.word	0x20000582

080076c0 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d809      	bhi.n	80076f0 <set_presstank_status+0x30>
		tanks[tank_num].tank_enable = state;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	4a06      	ldr	r2, [pc, #24]	; (80076f8 <set_presstank_status+0x38>)
 80076e0:	2154      	movs	r1, #84	; 0x54
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	7bba      	ldrb	r2, [r7, #14]
 80076ea:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 80076ec:	f7fc fa90 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000584 	.word	0x20000584

080076fc <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pot_num < NUM_POTS) {
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d815      	bhi.n	800773e <ambientize_pot+0x42>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[pot_num] = -epot[pot_num]+pot_ambients[pot_num];
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <ambientize_pot+0x4c>)
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	ed93 7a00 	vldr	s14, [r3]
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <ambientize_pot+0x50>)
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	edd3 7a00 	vldr	s15, [r3]
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007730:	4a05      	ldr	r2, [pc, #20]	; (8007748 <ambientize_pot+0x4c>)
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 800773a:	f7fc fa69 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000274 	.word	0x20000274
 800774c:	20000394 	.word	0x20000394

08007750 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d827      	bhi.n	80077bc <led_write+0x6c>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <led_write+0x24>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007785 	.word	0x08007785
 8007778:	08007793 	.word	0x08007793
 800777c:	080077a1 	.word	0x080077a1
 8007780:	080077af 	.word	0x080077af
	case 0:
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state);
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	461a      	mov	r2, r3
 8007788:	2101      	movs	r1, #1
 800778a:	480f      	ldr	r0, [pc, #60]	; (80077c8 <led_write+0x78>)
 800778c:	f002 ffde 	bl	800a74c <HAL_GPIO_WritePin>
		break;
 8007790:	e015      	b.n	80077be <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	461a      	mov	r2, r3
 8007796:	2102      	movs	r1, #2
 8007798:	480b      	ldr	r0, [pc, #44]	; (80077c8 <led_write+0x78>)
 800779a:	f002 ffd7 	bl	800a74c <HAL_GPIO_WritePin>
		break;
 800779e:	e00e      	b.n	80077be <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	461a      	mov	r2, r3
 80077a4:	2104      	movs	r1, #4
 80077a6:	4808      	ldr	r0, [pc, #32]	; (80077c8 <led_write+0x78>)
 80077a8:	f002 ffd0 	bl	800a74c <HAL_GPIO_WritePin>
		break;
 80077ac:	e007      	b.n	80077be <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	461a      	mov	r2, r3
 80077b2:	2108      	movs	r1, #8
 80077b4:	4804      	ldr	r0, [pc, #16]	; (80077c8 <led_write+0x78>)
 80077b6:	f002 ffc9 	bl	800a74c <HAL_GPIO_WritePin>
		break;
 80077ba:	e000      	b.n	80077be <led_write+0x6e>
	default:
		break;
 80077bc:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40020800 	.word	0x40020800

080077cc <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3303      	adds	r3, #3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	061a      	lsls	r2, r3, #24
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3302      	adds	r3, #2
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3301      	adds	r3, #1
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	4313      	orrs	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 80077fa:	4b05      	ldr	r3, [pc, #20]	; (8007810 <set_system_clock+0x44>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000904 	.word	0x20000904

08007814 <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
 8007822:	e009      	b.n	8007838 <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <remove_pressure_ambients+0x38>)
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	3301      	adds	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	2b05      	cmp	r3, #5
 800783c:	d9f2      	bls.n	8007824 <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 800783e:	f7fc f9e7 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000025c 	.word	0x2000025c

08007850 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_delay_ms = mpv_delay_ms;
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <set_fuel_mpv_on_delay+0x24>)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	7213      	strb	r3, [r2, #8]
	save_nonvolatile_variables();
 8007866:	f7fc f9d3 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2000062c 	.word	0x2000062c

08007878 <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3303      	adds	r3, #3
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	061a      	lsls	r2, r3, #24
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3302      	adds	r3, #2
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3301      	adds	r3, #1
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	4313      	orrs	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	7812      	ldrb	r2, [r2, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_test_duration_ms = engine_test_duration_ms;
 80078a6:	4a04      	ldr	r2, [pc, #16]	; (80078b8 <set_engine_test_duration+0x40>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6153      	str	r3, [r2, #20]
	save_nonvolatile_variables();
 80078ac:	f7fc f9b0 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2000062c 	.word	0x2000062c

080078bc <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3301      	adds	r3, #1
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b21b      	sxth	r3, r3
 80078da:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <set_pid_start_delay+0x34>)
 80078de:	89fb      	ldrh	r3, [r7, #14]
 80078e0:	8193      	strh	r3, [r2, #12]
	save_nonvolatile_variables();
 80078e2:	f7fc f995 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	2000062c 	.word	0x2000062c

080078f4 <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3301      	adds	r3, #1
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	b21a      	sxth	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b21b      	sxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b21b      	sxth	r3, r3
 8007912:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 8007914:	4a04      	ldr	r2, [pc, #16]	; (8007928 <set_ignitor_on_delay+0x34>)
 8007916:	89fb      	ldrh	r3, [r7, #14]
 8007918:	8093      	strh	r3, [r2, #4]
	save_nonvolatile_variables();
 800791a:	f7fc f979 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	2000062c 	.word	0x2000062c

0800792c <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3301      	adds	r3, #1
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b21a      	sxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b21b      	sxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b21b      	sxth	r3, r3
 800794a:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 800794c:	4a04      	ldr	r2, [pc, #16]	; (8007960 <set_ignitor_high_duration+0x34>)
 800794e:	89fb      	ldrh	r3, [r7, #14]
 8007950:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 8007952:	f7fc f95d 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	2000062c 	.word	0x2000062c

08007964 <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3301      	adds	r3, #1
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	b21a      	sxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b21b      	sxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b21b      	sxth	r3, r3
 8007982:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 8007984:	4a04      	ldr	r2, [pc, #16]	; (8007998 <set_film_cooling_on_delay+0x34>)
 8007986:	89fb      	ldrh	r3, [r7, #14]
 8007988:	8153      	strh	r3, [r2, #10]
	save_nonvolatile_variables();
 800798a:	f7fc f941 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000062c 	.word	0x2000062c
 800799c:	00000000 	.word	0x00000000

080079a0 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3307      	adds	r3, #7
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	2338      	movs	r3, #56	; 0x38
 80079b4:	409a      	lsls	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3306      	adds	r3, #6
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	2330      	movs	r3, #48	; 0x30
 80079c0:	fa01 f303 	lsl.w	r3, r1, r3
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3305      	adds	r3, #5
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	2328      	movs	r3, #40	; 0x28
 80079d0:	fa01 f303 	lsl.w	r3, r1, r3
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3304      	adds	r3, #4
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	2320      	movs	r3, #32
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	061b      	lsls	r3, r3, #24
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3302      	adds	r3, #2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3301      	adds	r3, #1
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	4313      	orrs	r3, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7f8 fd4e 	bl	80004ac <__aeabi_i2d>
 8007a10:	a30c      	add	r3, pc, #48	; (adr r3, 8007a44 <set_init_motor_deg_factor+0xa4>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fedd 	bl	80007d4 <__aeabi_ddiv>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 8007a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a26:	f7f9 f8a3 	bl	8000b70 <__aeabi_d2f>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <set_init_motor_deg_factor+0xa0>)
 8007a2e:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 8007a30:	f7fc f8ee 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a34:	bf00      	nop
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	f3af 8000 	nop.w
 8007a40:	200002e0 	.word	0x200002e0
 8007a44:	00000000 	.word	0x00000000
 8007a48:	40c38800 	.word	0x40c38800

08007a4c <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <clear_status_flags+0x1c>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	200002d0 	.word	0x200002d0

08007a6c <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <set_pt_slope_offset>:

void set_pt_slope_offset(uint8_t* data, uint8_t* status){
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	75fb      	strb	r3, [r7, #23]
	float mV_per_psi = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10000.0;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	061a      	lsls	r2, r3, #24
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3303      	adds	r3, #3
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	4313      	orrs	r3, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	3201      	adds	r2, #1
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7f8 fce1 	bl	80004ac <__aeabi_i2d>
 8007aea:	a321      	add	r3, pc, #132	; (adr r3, 8007b70 <set_pt_slope_offset+0xc0>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fe70 	bl	80007d4 <__aeabi_ddiv>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4610      	mov	r0, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7f9 f838 	bl	8000b70 <__aeabi_d2f>
 8007b00:	4603      	mov	r3, r0
 8007b02:	613b      	str	r3, [r7, #16]
	float mV_offset = (data[8]<<24|data[7]<<16|data[6]<<8|data[5])/1.0;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3308      	adds	r3, #8
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	061a      	lsls	r2, r3, #24
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3307      	adds	r3, #7
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	041b      	lsls	r3, r3, #16
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3306      	adds	r3, #6
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	3205      	adds	r2, #5
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f8 fcbf 	bl	80004ac <__aeabi_i2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4610      	mov	r0, r2
 8007b34:	4619      	mov	r1, r3
 8007b36:	f7f9 f81b 	bl	8000b70 <__aeabi_d2f>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d80d      	bhi.n	8007b60 <set_pt_slope_offset+0xb0>
		pt_cal_slope[pt_num] = mV_per_psi;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <set_pt_slope_offset+0xb8>)
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	601a      	str	r2, [r3, #0]
		pt_cal_offset[pt_num] = mV_offset;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	4a06      	ldr	r2, [pc, #24]	; (8007b6c <set_pt_slope_offset+0xbc>)
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007b5c:	f7fc f858 	bl	8003c10 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	2000027c 	.word	0x2000027c
 8007b6c:	20000294 	.word	0x20000294
 8007b70:	00000000 	.word	0x00000000
 8007b74:	40c38800 	.word	0x40c38800

08007b78 <set_automatic_abort_enable>:

void set_automatic_abort_enable(uint8_t* data, uint8_t* status){
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]

	uint8_t abort_enable_status = (data[0])/1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (abort_enable_status) {
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <set_automatic_abort_enable+0x20>
		autosequence.enable_auto_aborts = 1;
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <set_automatic_abort_enable+0x34>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007b96:	e003      	b.n	8007ba0 <set_automatic_abort_enable+0x28>
	}
	else {
		autosequence.enable_auto_aborts = 0;
 8007b98:	4b04      	ldr	r3, [pc, #16]	; (8007bac <set_automatic_abort_enable+0x34>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	save_nonvolatile_variables();
 8007ba0:	f7fc f836 	bl	8003c10 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	2000062c 	.word	0x2000062c

08007bb0 <reset_micro>:

void reset_micro(uint8_t* data, uint8_t* status){
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	HAL_NVIC_SystemReset();
 8007bba:	f002 f808 	bl	8009bce <HAL_NVIC_SystemReset>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <set_valve_channel>:
		en_vlv12_Pin,
		en_vlv13_Pin
};
*/

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
    valve_states |= vlv_value;  // Set the new valve state
    */

	// Press board
	setValve(vlv_num, vlv_state);
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa fade 	bl	8002198 <setValve>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007be8:	480d      	ldr	r0, [pc, #52]	; (8007c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007bea:	490e      	ldr	r1, [pc, #56]	; (8007c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007bec:	4a0e      	ldr	r2, [pc, #56]	; (8007c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bf0:	e002      	b.n	8007bf8 <LoopCopyDataInit>

08007bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bf6:	3304      	adds	r3, #4

08007bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bfc:	d3f9      	bcc.n	8007bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bfe:	4a0b      	ldr	r2, [pc, #44]	; (8007c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007c00:	4c0b      	ldr	r4, [pc, #44]	; (8007c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c04:	e001      	b.n	8007c0a <LoopFillZerobss>

08007c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c08:	3204      	adds	r2, #4

08007c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c0c:	d3fb      	bcc.n	8007c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c0e:	f7fe fdcb 	bl	80067a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c12:	f006 fb9d 	bl	800e350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c16:	f7fa ff07 	bl	8002a28 <main>
  bx  lr    
 8007c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c24:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8007c28:	0800fa88 	.word	0x0800fa88
  ldr r2, =_sbss
 8007c2c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8007c30:	2000238c 	.word	0x2000238c

08007c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c34:	e7fe      	b.n	8007c34 <ADC_IRQHandler>

08007c36 <init_adc>:
 */
static inline void package_cmd(uint16_t cmd, uint8_t *tx);

/*-------------------------Public Interface Functions-------------------------*/

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
     *      7. Select the right SWCNV bit
     *
     *
     */
    // Configure settings for all ADCs
    uint8_t tx[2] = {0, 0};
 8007c40:	2300      	movs	r3, #0
 8007c42:	813b      	strh	r3, [r7, #8]

    // 	note: these types are taken from the GPIO_TypeDef line 486
    //          in file stm32f446x.h

    // Generate adc config data
    uint16_t ADC_CONFIG_REG	   = MAX11131_CONFIG|SET_MAX11131_AVGON;
 8007c44:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8007c48:	81fb      	strh	r3, [r7, #14]
    uint16_t ADC_MODE_CNTL_REG = MAX11131_MODE_CNTL|(CUSTOM_INT<<11);
 8007c4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c4e:	81bb      	strh	r3, [r7, #12]

    configure_read_adc_all(pinfo);
 8007c50:	6838      	ldr	r0, [r7, #0]
 8007c52:	f000 f91e 	bl	8007e92 <configure_read_adc_all>
    set_read_adc_range(SPI_BUS, pinfo);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8a7 	bl	8007dac <set_read_adc_range>

    package_cmd(ADC_CONFIG_REG, tx);
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f944 	bl	8007ef4 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007c6c:	b672      	cpsid	i
}
 8007c6e:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007c70:	2100      	movs	r1, #0
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f000 f955 	bl	8007f22 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	2202      	movs	r2, #2
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f003 fbda 	bl	800b43a <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007c86:	2101      	movs	r1, #1
 8007c88:	6838      	ldr	r0, [r7, #0]
 8007c8a:	f000 f94a 	bl	8007f22 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007c8e:	b662      	cpsie	i
}
 8007c90:	bf00      	nop
    __enable_irq();

    package_cmd(ADC_MODE_CNTL_REG, tx);
 8007c92:	f107 0208 	add.w	r2, r7, #8
 8007c96:	89bb      	ldrh	r3, [r7, #12]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f92a 	bl	8007ef4 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007ca0:	b672      	cpsid	i
}
 8007ca2:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f000 f93b 	bl	8007f22 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f003 fbc0 	bl	800b43a <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007cba:	2101      	movs	r1, #1
 8007cbc:	6838      	ldr	r0, [r7, #0]
 8007cbe:	f000 f930 	bl	8007f22 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007cc2:	b662      	cpsie	i
}
 8007cc4:	bf00      	nop
    __enable_irq();
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo,
                                                uint16_t *adc_out) {
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b088      	sub	sp, #32
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
            not complete within the maximum acquistion time, we terminate
            early to avoid an infinite loop
    */
    /* ADC startup and FIFO register intialization */

    set_adc(pinfo, GPIO_PIN_SET);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	68b8      	ldr	r0, [r7, #8]
 8007cde:	f000 f920 	bl	8007f22 <set_adc>
    cycle_cnvst(pinfo);
 8007ce2:	68b8      	ldr	r0, [r7, #8]
 8007ce4:	f000 f92f 	bl	8007f46 <cycle_cnvst>
    
    uint16_t elapsed_cycles = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007cec:	e005      	b.n	8007cfa <read_adc+0x2c>
                            pinfo->MAX11131_EOC_ADDR)) {
        if (elapsed_cycles > MAX11131_EOC_WAIT_TIME) {
 8007cee:	8bfb      	ldrh	r3, [r7, #30]
 8007cf0:	2b14      	cmp	r3, #20
 8007cf2:	d80e      	bhi.n	8007d12 <read_adc+0x44>
            break;
        }
        ++elapsed_cycles;
 8007cf4:	8bfb      	ldrh	r3, [r7, #30]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	89db      	ldrh	r3, [r3, #14]
 8007d02:	4619      	mov	r1, r3
 8007d04:	4610      	mov	r0, r2
 8007d06:	f002 fd09 	bl	800a71c <HAL_GPIO_ReadPin>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1ee      	bne.n	8007cee <read_adc+0x20>
 8007d10:	e000      	b.n	8007d14 <read_adc+0x46>
            break;
 8007d12:	bf00      	nop

    /* Serial communications with ADC */

    // The number of bytes in the FIFO is simply the
    // number of channels * 2 (bytes for each channel)
    uint8_t rx[2] = {0};
 8007d14:	2300      	movs	r3, #0
 8007d16:	82bb      	strh	r3, [r7, #20]
    uint8_t tx[2] = {0};
 8007d18:	2300      	movs	r3, #0
 8007d1a:	823b      	strh	r3, [r7, #16]
    uint16_t adc_counts = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	837b      	strh	r3, [r7, #26]
    uint16_t channelId  = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007d24:	2300      	movs	r3, #0
 8007d26:	777b      	strb	r3, [r7, #29]
 8007d28:	e036      	b.n	8007d98 <read_adc+0xca>
        rx[0] = rx[1] = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	757b      	strb	r3, [r7, #21]
 8007d2e:	7d7b      	ldrb	r3, [r7, #21]
 8007d30:	753b      	strb	r3, [r7, #20]
        tx[0] = tx[1] = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	747b      	strb	r3, [r7, #17]
 8007d36:	7c7b      	ldrb	r3, [r7, #17]
 8007d38:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d3a:	b672      	cpsid	i
}
 8007d3c:	bf00      	nop
        __disable_irq();
        set_adc(pinfo, GPIO_PIN_RESET);
 8007d3e:	2100      	movs	r1, #0
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f000 f8ee 	bl	8007f22 <set_adc>
        write_adc_reg(SPI_BUS, tx, rx);
 8007d46:	f107 0214 	add.w	r2, r7, #20
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f8bd 	bl	8007ed0 <write_adc_reg>
        set_adc(pinfo, GPIO_PIN_SET);
 8007d56:	2101      	movs	r1, #1
 8007d58:	68b8      	ldr	r0, [r7, #8]
 8007d5a:	f000 f8e2 	bl	8007f22 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d5e:	b662      	cpsie	i
}
 8007d60:	bf00      	nop
        __enable_irq();

        adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 8007d62:	7d3b      	ldrb	r3, [r7, #20]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b21a      	sxth	r2, r3
 8007d68:	7d7b      	ldrb	r3, [r7, #21]
 8007d6a:	b21b      	sxth	r3, r3
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d76:	837b      	strh	r3, [r7, #26]
        channelId = (rx[0] >> 4) & 0x0F;
 8007d78:	7d3b      	ldrb	r3, [r7, #20]
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	833b      	strh	r3, [r7, #24]
        adc_out[channelId] = adc_counts;
 8007d86:	8b3b      	ldrh	r3, [r7, #24]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	8b7a      	ldrh	r2, [r7, #26]
 8007d90:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007d92:	7f7b      	ldrb	r3, [r7, #29]
 8007d94:	3301      	adds	r3, #1
 8007d96:	777b      	strb	r3, [r7, #29]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	7c9b      	ldrb	r3, [r3, #18]
 8007d9c:	7f7a      	ldrb	r2, [r7, #29]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d3c3      	bcc.n	8007d2a <read_adc+0x5c>
    }

}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	3720      	adds	r7, #32
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
     5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
     6. Set SWCNV bit to 1 to enable conversions with chip select
     */
    uint8_t tx[2];

    uint16_t SET_SCAN_REGISTER_0 = MAX11131_CUSTOM_SCAN0;
 8007db6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007dba:	82fb      	strh	r3, [r7, #22]
    uint16_t SET_SCAN_REGISTER_1 = MAX11131_CUSTOM_SCAN1;
 8007dbc:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8007dc0:	82bb      	strh	r3, [r7, #20]
    uint8_t num_channels		= pinfo->NUM_CHANNELS;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	7c9b      	ldrb	r3, [r3, #18]
 8007dc6:	74bb      	strb	r3, [r7, #18]

    for (uint8_t i = 0; i < num_channels; ++i) {
 8007dc8:	2300      	movs	r3, #0
 8007dca:	74fb      	strb	r3, [r7, #19]
 8007dcc:	e025      	b.n	8007e1a <set_read_adc_range+0x6e>
        uint8_t ch = pinfo->MAX11131_CHANNELS[i];
 8007dce:	7cfb      	ldrb	r3, [r7, #19]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	7cdb      	ldrb	r3, [r3, #19]
 8007dd6:	747b      	strb	r3, [r7, #17]
        if (ch > 7) {
 8007dd8:	7c7b      	ldrb	r3, [r7, #17]
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	d90d      	bls.n	8007dfa <set_read_adc_range+0x4e>
            ch -= MAX11131_CUSTOM_SCAN0_SUB;
 8007dde:	7c7b      	ldrb	r3, [r7, #17]
 8007de0:	3b05      	subs	r3, #5
 8007de2:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 8007de4:	7c7b      	ldrb	r3, [r7, #17]
 8007de6:	2201      	movs	r2, #1
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	82fb      	strh	r3, [r7, #22]
 8007df8:	e00c      	b.n	8007e14 <set_read_adc_range+0x68>
        } else {
            ch += MAX11131_CUSTOM_SCAN1_ADD;
 8007dfa:	7c7b      	ldrb	r3, [r7, #17]
 8007dfc:	3303      	adds	r3, #3
 8007dfe:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 8007e00:	7c7b      	ldrb	r3, [r7, #17]
 8007e02:	2201      	movs	r2, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	b21a      	sxth	r2, r3
 8007e0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b21b      	sxth	r3, r3
 8007e12:	82bb      	strh	r3, [r7, #20]
    for (uint8_t i = 0; i < num_channels; ++i) {
 8007e14:	7cfb      	ldrb	r3, [r7, #19]
 8007e16:	3301      	adds	r3, #1
 8007e18:	74fb      	strb	r3, [r7, #19]
 8007e1a:	7cfa      	ldrb	r2, [r7, #19]
 8007e1c:	7cbb      	ldrb	r3, [r7, #18]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3d5      	bcc.n	8007dce <set_read_adc_range+0x22>
    }

    /* Set ADC to custom scan channel range */

    /* Transmit custom channels to send data from */
    package_cmd(SET_SCAN_REGISTER_0, tx);
 8007e22:	f107 020c 	add.w	r2, r7, #12
 8007e26:	8afb      	ldrh	r3, [r7, #22]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f862 	bl	8007ef4 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e30:	b672      	cpsid	i
}
 8007e32:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007e34:	2100      	movs	r1, #0
 8007e36:	6838      	ldr	r0, [r7, #0]
 8007e38:	f000 f873 	bl	8007f22 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007e3c:	f107 010c 	add.w	r1, r7, #12
 8007e40:	2301      	movs	r3, #1
 8007e42:	2202      	movs	r2, #2
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f003 faf8 	bl	800b43a <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6838      	ldr	r0, [r7, #0]
 8007e4e:	f000 f868 	bl	8007f22 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e52:	b662      	cpsie	i
}
 8007e54:	bf00      	nop
    __enable_irq();

    package_cmd(SET_SCAN_REGISTER_1, tx);
 8007e56:	f107 020c 	add.w	r2, r7, #12
 8007e5a:	8abb      	ldrh	r3, [r7, #20]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f848 	bl	8007ef4 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e64:	b672      	cpsid	i
}
 8007e66:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007e68:	2100      	movs	r1, #0
 8007e6a:	6838      	ldr	r0, [r7, #0]
 8007e6c:	f000 f859 	bl	8007f22 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007e70:	f107 010c 	add.w	r1, r7, #12
 8007e74:	2301      	movs	r3, #1
 8007e76:	2202      	movs	r2, #2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f003 fade 	bl	800b43a <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f000 f84e 	bl	8007f22 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e86:	b662      	cpsie	i
}
 8007e88:	bf00      	nop
    __enable_irq();
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <configure_read_adc_all>:

void configure_read_adc_all(GPIO_MAX11131_Pinfo *pinfo) {
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
    // Convenience function for reading all channels on adc
    pinfo->NUM_CHANNELS = MAX11131_MAX_CHANNELS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220f      	movs	r2, #15
 8007e9e:	749a      	strb	r2, [r3, #18]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
 8007ea4:	e007      	b.n	8007eb6 <configure_read_adc_all+0x24>
        pinfo->MAX11131_CHANNELS[i] = i;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	7bfa      	ldrb	r2, [r7, #15]
 8007eae:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	73fb      	strb	r3, [r7, #15]
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b0e      	cmp	r3, #14
 8007eba:	d9f4      	bls.n	8007ea6 <configure_read_adc_all+0x14>
    }
    pinfo->MAX11131_CHANNELS[14] = 15;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220f      	movs	r2, #15
 8007ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <write_adc_reg>:

static inline void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
    if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
 8007edc:	2301      	movs	r3, #1
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f003 fcf4 	bl	800b8d4 <HAL_SPI_TransmitReceive>
    }
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <package_cmd>:


static inline void package_cmd(uint16_t cmd, uint8_t *tx) {
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	80fb      	strh	r3, [r7, #6]
    tx[0] = (cmd >> 8) & 0x00ff;
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	701a      	strb	r2, [r3, #0]
    tx[1] = (cmd & 0x00ff);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <set_adc>:

static inline void set_adc(GPIO_MAX11131_Pinfo *pinfo, GPIO_PinState state) {
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pinfo->MAX11131_CS_PORT, pinfo->MAX11131_CS_ADDR, state);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	899b      	ldrh	r3, [r3, #12]
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f002 fc07 	bl	800a74c <HAL_GPIO_WritePin>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <cycle_cnvst>:

void cycle_cnvst(GPIO_MAX11131_Pinfo *pinfo) {
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6898      	ldr	r0, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8a1b      	ldrh	r3, [r3, #16]
 8007f56:	2200      	movs	r2, #0
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f002 fbf7 	bl	800a74c <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_RESET
    );
    asm("nop");  // Clock Freq maxes at 180 MHz, at which each noop instruction
 8007f5e:	bf00      	nop
    asm("nop");  // takes about 5.5 ns to complete
 8007f60:	bf00      	nop
    HAL_GPIO_WritePin(
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6898      	ldr	r0, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8a1b      	ldrh	r3, [r3, #16]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f002 fbed 	bl	800a74c <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_SET
    );
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <findClosestTTMV>:
 *  Created on: Jan 4, 2021
 *      Author: arthur
 */
#include "MAX31855.h"

int32_t findClosestTTMV(float target) {
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t right = MAX31855_TTMV_LUT_SZ - 1;
 8007f86:	f240 2326 	movw	r3, #550	; 0x226
 8007f8a:	617b      	str	r3, [r7, #20]
	int32_t left = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
	int32_t mid = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
    // Find the two closest microvolt points
    while (left < right) {
 8007f94:	e01e      	b.n	8007fd4 <findClosestTTMV+0x58>
        mid = ((right-left)/2)+left;
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	0fda      	lsrs	r2, r3, #31
 8007f9e:	4413      	add	r3, r2
 8007fa0:	105b      	asrs	r3, r3, #1
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
        if (MAX31855_TTMV_LUT[mid] < target) {
 8007faa:	4a10      	ldr	r2, [pc, #64]	; (8007fec <findClosestTTMV+0x70>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fba:	ed97 7a01 	vldr	s14, [r7, #4]
 8007fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	dd03      	ble.n	8007fd0 <findClosestTTMV+0x54>
            left = mid+1;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	e001      	b.n	8007fd4 <findClosestTTMV+0x58>
        } else {
            right = mid;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	617b      	str	r3, [r7, #20]
    while (left < right) {
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	dbdc      	blt.n	8007f96 <findClosestTTMV+0x1a>
        }
    } // TODO: write bs alg to find correct microvolt conversions
    return left;
 8007fdc:	693b      	ldr	r3, [r7, #16]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	0800f5d8 	.word	0x0800f5d8

08007ff0 <read_tc>:

float read_tc(SPI_HandleTypeDef *SPI_BUS, MAX31855_Pinfo *pinfo) {
 8007ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ff4:	b096      	sub	sp, #88	; 0x58
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
	uint8_t tx[4] = { 0 };
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
    uint8_t rx[4] = { 0 };
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8008004:	b672      	cpsid	i
}
 8008006:	bf00      	nop
    // Read thermocouples raw temperature
    __disable_irq();
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	889b      	ldrh	r3, [r3, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	4619      	mov	r1, r3
 8008014:	f002 fb9a 	bl	800a74c <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_SPI_Receive(SPI_BUS, rx, 4, 1);
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	2301      	movs	r3, #1
 800801e:	2204      	movs	r2, #4
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f003 fb46 	bl	800b6b2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	889b      	ldrh	r3, [r3, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	4619      	mov	r1, r3
 8008032:	f002 fb8b 	bl	800a74c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008036:	b662      	cpsie	i
}
 8008038:	bf00      	nop
            GPIO_PIN_SET);
    __enable_irq();

    int32_t spiData = rx[0] << 24 | rx[1] << 16 | rx[2] << 8 | rx[3];
 800803a:	7a3b      	ldrb	r3, [r7, #8]
 800803c:	061a      	lsls	r2, r3, #24
 800803e:	7a7b      	ldrb	r3, [r7, #9]
 8008040:	041b      	lsls	r3, r3, #16
 8008042:	431a      	orrs	r2, r3
 8008044:	7abb      	ldrb	r3, [r7, #10]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	4313      	orrs	r3, r2
 800804a:	7afa      	ldrb	r2, [r7, #11]
 800804c:	4313      	orrs	r3, r2
 800804e:	64bb      	str	r3, [r7, #72]	; 0x48
    float uncorrectedThermocoupleTemp;
    float refJuncTemp;
    float totalOutputMicroVolts;
    float refJuncMicroVolts;
    float thermocoupleMicroVolts;
    float correctedThermocoupleTemp = 0.0f;
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t ocFaultFlag = rx[3]&0b1;
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    faultFlag = (spiData & 0x00010000) >> 16;
 8008060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008062:	141b      	asrs	r3, r3, #16
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
    if ((spiData & 0x80000000) == 0x80000000) {
 800806a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806c:	2b00      	cmp	r3, #0
 800806e:	da0a      	bge.n	8008086 <read_tc+0x96>
        thermocoupleData = (spiData ^ 0xFFFFFFFF) >> 18;
 8008070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008072:	43db      	mvns	r3, r3
 8008074:	0c9b      	lsrs	r3, r3, #18
 8008076:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData++;
 8008078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800807a:	3301      	adds	r3, #1
 800807c:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData = thermocoupleData * -1;
 800807e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008080:	425b      	negs	r3, r3
 8008082:	657b      	str	r3, [r7, #84]	; 0x54
 8008084:	e002      	b.n	800808c <read_tc+0x9c>
    } else {
        thermocoupleData = spiData >> 18;
 8008086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008088:	149b      	asrs	r3, r3, #18
 800808a:	657b      	str	r3, [r7, #84]	; 0x54
    }
    if ((spiData & 0x00008000) == 0x00008000) {
 800808c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00c      	beq.n	80080b0 <read_tc+0xc0>
        refJuncData = ((spiData ^ 0xFFFFFFFF) >> 4) & 0x00000FFF;
 8008096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008098:	43db      	mvns	r3, r3
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a0:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData++;
 80080a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a4:	3301      	adds	r3, #1
 80080a6:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData = refJuncData * -1;
 80080a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080aa:	425b      	negs	r3, r3
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
 80080ae:	e004      	b.n	80080ba <read_tc+0xca>
    } else {
        refJuncData = (spiData >> 4) & 0x00000FFF;
 80080b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b2:	111b      	asrs	r3, r3, #4
 80080b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b8:	653b      	str	r3, [r7, #80]	; 0x50
    }
    // Calculate out the uncorrected temperatures from the MAX31855 and
    // find the total output voltage in micro volts
    // (using the MAX31855 equation from datasheet)
    uncorrectedThermocoupleTemp = thermocoupleData * 0.25;
 80080ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80080bc:	f7f8 f9f6 	bl	80004ac <__aeabi_i2d>
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	4b7e      	ldr	r3, [pc, #504]	; (80082c0 <read_tc+0x2d0>)
 80080c6:	f7f8 fa5b 	bl	8000580 <__aeabi_dmul>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4610      	mov	r0, r2
 80080d0:	4619      	mov	r1, r3
 80080d2:	f7f8 fd4d 	bl	8000b70 <__aeabi_d2f>
 80080d6:	4603      	mov	r3, r0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    refJuncTemp = refJuncData * 0.0625;
 80080da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080dc:	f7f8 f9e6 	bl	80004ac <__aeabi_i2d>
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	4b77      	ldr	r3, [pc, #476]	; (80082c4 <read_tc+0x2d4>)
 80080e6:	f7f8 fa4b 	bl	8000580 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	f7f8 fd3d 	bl	8000b70 <__aeabi_d2f>
 80080f6:	4603      	mov	r3, r0
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
            * (uncorrectedThermocoupleTemp - refJuncTemp);
 80080fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80080fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008106:	ee17 0a90 	vmov	r0, s15
 800810a:	f7f8 f9e1 	bl	80004d0 <__aeabi_f2d>
 800810e:	a368      	add	r3, pc, #416	; (adr r3, 80082b0 <read_tc+0x2c0>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 fa34 	bl	8000580 <__aeabi_dmul>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
 800811c:	4610      	mov	r0, r2
 800811e:	4619      	mov	r1, r3
 8008120:	f7f8 fd26 	bl	8000b70 <__aeabi_d2f>
 8008124:	4603      	mov	r3, r0
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
    // given temperature --> y2 = m(x2-x1) + y1 (we must cast back as a signed
    // int since pgm_read returns unsigned)
    int refJuncMicrovoltsHigh;
    int refJuncMicrovoltsLow;
    int refJuncMicrovoltsSlope;
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 8008128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800812a:	f7f8 f9d1 	bl	80004d0 <__aeabi_f2d>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	ec43 2b10 	vmov	d0, r2, r3
 8008136:	f006 f947 	bl	800e3c8 <ceil>
 800813a:	ec53 2b10 	vmov	r2, r3, d0
 800813e:	4610      	mov	r0, r2
 8008140:	4619      	mov	r1, r3
 8008142:	f7f8 fccd 	bl	8000ae0 <__aeabi_d2iz>
 8008146:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 8008148:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 800814a:	4a5f      	ldr	r2, [pc, #380]	; (80082c8 <read_tc+0x2d8>)
 800814c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008150:	633b      	str	r3, [r7, #48]	; 0x30
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 8008152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008154:	f7f8 f9bc 	bl	80004d0 <__aeabi_f2d>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	ec43 2b10 	vmov	d0, r2, r3
 8008160:	f006 f9b6 	bl	800e4d0 <floor>
 8008164:	ec53 2b10 	vmov	r2, r3, d0
 8008168:	4610      	mov	r0, r2
 800816a:	4619      	mov	r1, r3
 800816c:	f7f8 fcb8 	bl	8000ae0 <__aeabi_d2iz>
 8008170:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 8008172:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 8008174:	4a54      	ldr	r2, [pc, #336]	; (80082c8 <read_tc+0x2d8>)
 8008176:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
    refJuncMicrovoltsSlope = (refJuncMicrovoltsHigh - refJuncMicrovoltsLow);
 800817c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
    refJuncMicroVolts = refJuncMicrovoltsSlope
            * (refJuncTemp - floor(refJuncTemp)) + refJuncMicrovoltsLow;
 8008184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008186:	f7f8 f991 	bl	80004ac <__aeabi_i2d>
 800818a:	4604      	mov	r4, r0
 800818c:	460d      	mov	r5, r1
 800818e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008190:	f7f8 f99e 	bl	80004d0 <__aeabi_f2d>
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800819a:	f7f8 f999 	bl	80004d0 <__aeabi_f2d>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	ec43 2b10 	vmov	d0, r2, r3
 80081a6:	f006 f993 	bl	800e4d0 <floor>
 80081aa:	ec53 2b10 	vmov	r2, r3, d0
 80081ae:	4640      	mov	r0, r8
 80081b0:	4649      	mov	r1, r9
 80081b2:	f7f8 f82d 	bl	8000210 <__aeabi_dsub>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f7f8 f9df 	bl	8000580 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4614      	mov	r4, r2
 80081c8:	461d      	mov	r5, r3
 80081ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081cc:	f7f8 f96e 	bl	80004ac <__aeabi_i2d>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f81c 	bl	8000214 <__adddf3>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
    refJuncMicroVolts = refJuncMicrovoltsSlope
 80081e0:	4610      	mov	r0, r2
 80081e2:	4619      	mov	r1, r3
 80081e4:	f7f8 fcc4 	bl	8000b70 <__aeabi_d2f>
 80081e8:	4603      	mov	r3, r0
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
    // Calculate the voltage of the desired thermocouple junction itself (thermocouple junction and ref junction polarities are opposing in our application
    // with a type T thermocouple --> V_out = V_tc - V_ref)
    thermocoupleMicroVolts = totalOutputMicroVolts + refJuncMicroVolts;
 80081ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80081f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80081f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081f8:	edc7 7a08 	vstr	s15, [r7, #32]
    // Check to make sure this voltage is within our range of -200 to 350C then proceed to lookup table processing, or else return an out or range error
    if (thermocoupleMicroVolts < MAX31855_minVoltage
 80081fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8008200:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80082cc <read_tc+0x2dc>
 8008204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820c:	d436      	bmi.n	800827c <read_tc+0x28c>
            || thermocoupleMicroVolts > MAX31855_maxVoltage) {
 800820e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008212:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80082d0 <read_tc+0x2e0>
 8008216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821e:	dc2d      	bgt.n	800827c <read_tc+0x28c>
        int32_t correctedMicrovoltsHigh;
        int32_t correctedMicrovoltsLow;
        int32_t correctedMicrovoltsSlope;
        int32_t closestIdx;
        // Set the starting points
        closestIdx = findClosestTTMV(thermocoupleMicroVolts);
 8008220:	ed97 0a08 	vldr	s0, [r7, #32]
 8008224:	f7ff feaa 	bl	8007f7c <findClosestTTMV>
 8008228:	61f8      	str	r0, [r7, #28]
        correctedMicrovoltsHigh = (int32_t) MAX31855_TTMV_LUT[closestIdx];
 800822a:	4a27      	ldr	r2, [pc, #156]	; (80082c8 <read_tc+0x2d8>)
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008232:	61bb      	str	r3, [r7, #24]
        correctedMicrovoltsLow  = (int32_t) MAX31855_TTMV_LUT[closestIdx-1];
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	3b01      	subs	r3, #1
 8008238:	4a23      	ldr	r2, [pc, #140]	; (80082c8 <read_tc+0x2d8>)
 800823a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800823e:	617b      	str	r3, [r7, #20]

        // Find the final corrected temperature from microvolts using
        // linear interpolation - x2 = (y2-y1)/m + x1
        correctedMicrovoltsSlope = correctedMicrovoltsHigh
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	613b      	str	r3, [r7, #16]
                - correctedMicrovoltsLow;
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
                - correctedMicrovoltsLow) / correctedMicrovoltsSlope)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008252:	ed97 7a08 	vldr	s14, [r7, #32]
 8008256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                + ((closestIdx - 1) - MAX31855_LUT_OFFSET);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3bc9      	subs	r3, #201	; 0xc9
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
 8008274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008278:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    }

    return correctedThermocoupleTemp + 273.15; // replace with return value
 800827c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800827e:	f7f8 f927 	bl	80004d0 <__aeabi_f2d>
 8008282:	a30d      	add	r3, pc, #52	; (adr r3, 80082b8 <read_tc+0x2c8>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f7 ffc4 	bl	8000214 <__adddf3>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	f7f8 fc6c 	bl	8000b70 <__aeabi_d2f>
 8008298:	4603      	mov	r3, r0
 800829a:	ee07 3a90 	vmov	s15, r3
}
 800829e:	eeb0 0a67 	vmov.f32	s0, s15
 80082a2:	3758      	adds	r7, #88	; 0x58
 80082a4:	46bd      	mov	sp, r7
 80082a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80082aa:	bf00      	nop
 80082ac:	f3af 8000 	nop.w
 80082b0:	3d70a3d7 	.word	0x3d70a3d7
 80082b4:	404a170a 	.word	0x404a170a
 80082b8:	66666666 	.word	0x66666666
 80082bc:	40711266 	.word	0x40711266
 80082c0:	3fd00000 	.word	0x3fd00000
 80082c4:	3fb00000 	.word	0x3fb00000
 80082c8:	0800f5d8 	.word	0x0800f5d8
 80082cc:	c5af1800 	.word	0xc5af1800
 80082d0:	468b3600 	.word	0x468b3600

080082d4 <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 80082de:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <init_board+0x24>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 80082e4:	4a05      	ldr	r2, [pc, #20]	; (80082fc <init_board+0x28>)
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	7013      	strb	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20002070 	.word	0x20002070
 80082fc:	20000a93 	.word	0x20000a93

08008300 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	460b      	mov	r3, r1
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 800830e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d109      	bne.n	800832c <init_data+0x2c>
	    // repack CLB_telem_data
		pack_telem_data(CLB_telem_data);
 8008318:	480b      	ldr	r0, [pc, #44]	; (8008348 <init_data+0x48>)
 800831a:	f7fc fa93 	bl	8004844 <pack_telem_data>
		CLB_buffer = CLB_telem_data;
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <init_data+0x4c>)
 8008320:	4a09      	ldr	r2, [pc, #36]	; (8008348 <init_data+0x48>)
 8008322:	601a      	str	r2, [r3, #0]
		CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <init_data+0x50>)
 8008326:	22c9      	movs	r2, #201	; 0xc9
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e005      	b.n	8008338 <init_data+0x38>
	} else {				// custom telem
		CLB_buffer = buffer;
 800832c:	4a07      	ldr	r2, [pc, #28]	; (800834c <init_data+0x4c>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 8008332:	897a      	ldrh	r2, [r7, #10]
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <init_data+0x50>)
 8008336:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 8008338:	4a06      	ldr	r2, [pc, #24]	; (8008354 <init_data+0x54>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6013      	str	r3, [r2, #0]
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000c7c 	.word	0x20000c7c
 800834c:	200007ec 	.word	0x200007ec
 8008350:	2000178a 	.word	0x2000178a
 8008354:	200020c8 	.word	0x200020c8

08008358 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b08d      	sub	sp, #52	; 0x34
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 8008364:	2300      	movs	r3, #0
 8008366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 800836a:	2300      	movs	r3, #0
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 800836e:	2300      	movs	r3, #0
 8008370:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 8008372:	4b6c      	ldr	r3, [pc, #432]	; (8008524 <send_data+0x1cc>)
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 8008378:	2300      	movs	r3, #0
 800837a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 800837c:	23fd      	movs	r3, #253	; 0xfd
 800837e:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
 8008384:	f107 030c 	add.w	r3, r7, #12
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 800838e:	4b66      	ldr	r3, [pc, #408]	; (8008528 <send_data+0x1d0>)
 8008390:	681c      	ldr	r4, [r3, #0]
 8008392:	f000 fa3f 	bl	8008814 <compute_checksum>
 8008396:	4603      	mov	r3, r0
 8008398:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 800839a:	4b63      	ldr	r3, [pc, #396]	; (8008528 <send_data+0x1d0>)
 800839c:	681c      	ldr	r4, [r3, #0]
 800839e:	f000 fa43 	bl	8008828 <compute_packet_sz>
 80083a2:	4603      	mov	r3, r0
 80083a4:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 80083a6:	4b60      	ldr	r3, [pc, #384]	; (8008528 <send_data+0x1d0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f107 0208 	add.w	r2, r7, #8
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f9b1 	bl	8008718 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 80083b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083b8:	4a5c      	ldr	r2, [pc, #368]	; (800852c <send_data+0x1d4>)
 80083ba:	1899      	adds	r1, r3, r2
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	220c      	movs	r2, #12
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f9f9 	bl	80087ba <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 80083c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083ca:	330c      	adds	r3, #12
 80083cc:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 80083d4:	e08c      	b.n	80084f0 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 80083d6:	8bfa      	ldrh	r2, [r7, #30]
 80083d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 80083de:	8bba      	ldrh	r2, [r7, #28]
 80083e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 80083e6:	8b7a      	ldrh	r2, [r7, #26]
 80083e8:	8b3b      	ldrh	r3, [r7, #24]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bf28      	it	cs
 80083ee:	4613      	movcs	r3, r2
 80083f0:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 80083f2:	4b4f      	ldr	r3, [pc, #316]	; (8008530 <send_data+0x1d8>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083f8:	18d0      	adds	r0, r2, r3
 80083fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083fc:	4a4b      	ldr	r2, [pc, #300]	; (800852c <send_data+0x1d4>)
 80083fe:	4413      	add	r3, r2
 8008400:	8afa      	ldrh	r2, [r7, #22]
 8008402:	4619      	mov	r1, r3
 8008404:	f000 f9d9 	bl	80087ba <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8008408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800840a:	8afb      	ldrh	r3, [r7, #22]
 800840c:	4413      	add	r3, r2
 800840e:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8008410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008412:	8afb      	ldrh	r3, [r7, #22]
 8008414:	4413      	add	r3, r2
 8008416:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d121      	bne.n	8008466 <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8008422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008424:	461a      	mov	r2, r3
 8008426:	4943      	ldr	r1, [pc, #268]	; (8008534 <send_data+0x1dc>)
 8008428:	4840      	ldr	r0, [pc, #256]	; (800852c <send_data+0x1d4>)
 800842a:	f000 fa2b 	bl	8008884 <stuff_packet>
 800842e:	4603      	mov	r3, r0
 8008430:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 8008432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008434:	8bfb      	ldrh	r3, [r7, #30]
 8008436:	429a      	cmp	r2, r3
 8008438:	d10d      	bne.n	8008456 <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 800843a:	8c3b      	ldrh	r3, [r7, #32]
 800843c:	2bfe      	cmp	r3, #254	; 0xfe
 800843e:	d807      	bhi.n	8008450 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8008440:	8c3b      	ldrh	r3, [r7, #32]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	843a      	strh	r2, [r7, #32]
 8008446:	461a      	mov	r2, r3
 8008448:	4b3a      	ldr	r3, [pc, #232]	; (8008534 <send_data+0x1dc>)
 800844a:	2100      	movs	r1, #0
 800844c:	5499      	strb	r1, [r3, r2]
 800844e:	e002      	b.n	8008456 <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	8c3a      	ldrh	r2, [r7, #32]
 800845c:	4611      	mov	r1, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f900 	bl	8008664 <transmit_packet>
 8008464:	e03e      	b.n	80084e4 <send_data+0x18c>
		} else if (type == CLB_Flash) {
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d13b      	bne.n	80084e4 <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	4413      	add	r3, r2
 8008474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008476:	4619      	mov	r1, r3
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <send_data+0x1d4>)
 800847a:	f000 fa03 	bl	8008884 <stuff_packet>
 800847e:	4603      	mov	r3, r0
 8008480:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 8008482:	8c3b      	ldrh	r3, [r7, #32]
 8008484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008486:	4413      	add	r3, r2
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008490:	b29a      	uxth	r2, r3
 8008492:	8c3b      	ldrh	r3, [r7, #32]
 8008494:	4413      	add	r3, r2
 8008496:	b29b      	uxth	r3, r3
 8008498:	b21a      	sxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 800849e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084a0:	8bfb      	ldrh	r3, [r7, #30]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d115      	bne.n	80084d2 <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 80084a6:	8c3b      	ldrh	r3, [r7, #32]
 80084a8:	2bfe      	cmp	r3, #254	; 0xfe
 80084aa:	d80f      	bhi.n	80084cc <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80084b6:	b28a      	uxth	r2, r1
 80084b8:	3201      	adds	r2, #1
 80084ba:	b292      	uxth	r2, r2
 80084bc:	b210      	sxth	r0, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	80d0      	strh	r0, [r2, #6]
 80084c2:	460a      	mov	r2, r1
 80084c4:	4413      	add	r3, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
 80084ca:	e002      	b.n	80084d2 <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da03      	bge.n	80084e4 <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80084e2:	e00b      	b.n	80084fc <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 80084e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084e6:	8bbb      	ldrh	r3, [r7, #28]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d301      	bcc.n	80084f0 <send_data+0x198>
			ping_pos = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <send_data+0x1cc>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084f6:	429a      	cmp	r2, r3
 80084f8:	f4ff af6d 	bcc.w	80083d6 <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 80084fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <send_data+0x1dc>)
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2101      	movs	r1, #1
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8a7 	bl	8008664 <transmit_packet>
	}

	return status; // TODO: return better error handling
 8008516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800851a:	4618      	mov	r0, r3
 800851c:	3734      	adds	r7, #52	; 0x34
 800851e:	46bd      	mov	sp, r7
 8008520:	bd90      	pop	{r4, r7, pc}
 8008522:	bf00      	nop
 8008524:	2000178a 	.word	0x2000178a
 8008528:	200020c8 	.word	0x200020c8
 800852c:	20000adc 	.word	0x20000adc
 8008530:	200007ec 	.word	0x200007ec
 8008534:	20000994 	.word	0x20000994

08008538 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8008546:	2300      	movs	r3, #0
 8008548:	83fb      	strh	r3, [r7, #30]
 800854a:	e009      	b.n	8008560 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 800854c:	8bfb      	ldrh	r3, [r7, #30]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	441a      	add	r2, r3
 8008552:	8bfb      	ldrh	r3, [r7, #30]
 8008554:	7811      	ldrb	r1, [r2, #0]
 8008556:	4a2d      	ldr	r2, [pc, #180]	; (800860c <receive_data+0xd4>)
 8008558:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 800855a:	8bfb      	ldrh	r3, [r7, #30]
 800855c:	3301      	adds	r3, #1
 800855e:	83fb      	strh	r3, [r7, #30]
 8008560:	8bfa      	ldrh	r2, [r7, #30]
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	429a      	cmp	r2, r3
 8008566:	d3f1      	bcc.n	800854c <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	461a      	mov	r2, r3
 800856c:	4928      	ldr	r1, [pc, #160]	; (8008610 <receive_data+0xd8>)
 800856e:	4827      	ldr	r0, [pc, #156]	; (800860c <receive_data+0xd4>)
 8008570:	f000 f9ee 	bl	8008950 <unstuff_packet>
 8008574:	4603      	mov	r3, r0
 8008576:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 8008578:	4925      	ldr	r1, [pc, #148]	; (8008610 <receive_data+0xd8>)
 800857a:	4826      	ldr	r0, [pc, #152]	; (8008614 <receive_data+0xdc>)
 800857c:	f000 f886 	bl	800868c <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 8008580:	4b24      	ldr	r3, [pc, #144]	; (8008614 <receive_data+0xdc>)
 8008582:	88db      	ldrh	r3, [r3, #6]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 f939 	bl	80087fc <verify_checksum>
 800858a:	4603      	mov	r3, r0
 800858c:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 800858e:	7efb      	ldrb	r3, [r7, #27]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 8008594:	2303      	movs	r3, #3
 8008596:	e034      	b.n	8008602 <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 800859c:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <receive_data+0xdc>)
 800859e:	789a      	ldrb	r2, [r3, #2]
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <receive_data+0xe0>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d129      	bne.n	80085fc <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <receive_data+0xdc>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b33      	cmp	r3, #51	; 0x33
 80085ae:	d827      	bhi.n	8008600 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 80085b0:	4b18      	ldr	r3, [pc, #96]	; (8008614 <receive_data+0xdc>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b19      	ldr	r3, [pc, #100]	; (800861c <receive_data+0xe4>)
 80085b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80085bc:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 80085be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d01b      	beq.n	8008600 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <receive_data+0xdc>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b21b      	sxth	r3, r3
 80085ce:	8bba      	ldrh	r2, [r7, #28]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f82a 	bl	800862c <validate_command>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d110      	bne.n	8008600 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 80085de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80085e2:	4a0f      	ldr	r2, [pc, #60]	; (8008620 <receive_data+0xe8>)
 80085e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e8:	480e      	ldr	r0, [pc, #56]	; (8008624 <receive_data+0xec>)
 80085ea:	f107 0217 	add.w	r2, r7, #23
 80085ee:	4611      	mov	r1, r2
 80085f0:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <receive_data+0xdc>)
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <receive_data+0xf0>)
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e001      	b.n	8008600 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 80085fc:	2302      	movs	r3, #2
 80085fe:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000994 	.word	0x20000994
 8008610:	20000adc 	.word	0x20000adc
 8008614:	20002070 	.word	0x20002070
 8008618:	20000a93 	.word	0x20000a93
 800861c:	20000018 	.word	0x20000018
 8008620:	200000e8 	.word	0x200000e8
 8008624:	20000ae8 	.word	0x20000ae8
 8008628:	20000d90 	.word	0x20000d90

0800862c <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	460a      	mov	r2, r1
 8008636:	80fb      	strh	r3, [r7, #6]
 8008638:	4613      	mov	r3, r2
 800863a:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 800863c:	88bb      	ldrh	r3, [r7, #4]
 800863e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008642:	4907      	ldr	r1, [pc, #28]	; (8008660 <validate_command+0x34>)
 8008644:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8008648:	4293      	cmp	r3, r2
 800864a:	d101      	bne.n	8008650 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 800864c:	2300      	movs	r3, #0
 800864e:	e000      	b.n	8008652 <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 8008650:	2301      	movs	r3, #1
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	20000080 	.word	0x20000080

08008664 <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 8008670:	887a      	ldrh	r2, [r7, #2]
 8008672:	f04f 33ff 	mov.w	r3, #4294967295
 8008676:	4904      	ldr	r1, [pc, #16]	; (8008688 <transmit_packet+0x24>)
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f004 fd5e 	bl	800d13a <HAL_UART_Transmit>
//	__enable_irq();
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000994 	.word	0x20000994

0800868c <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781a      	ldrb	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	785a      	ldrb	r2, [r3, #1]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	789a      	ldrb	r2, [r3, #2]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	78da      	ldrb	r2, [r3, #3]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	791a      	ldrb	r2, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	795a      	ldrb	r2, [r3, #5]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	3306      	adds	r3, #6
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	b21a      	sxth	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	3307      	adds	r3, #7
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b21b      	sxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b21b      	sxth	r3, r3
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	061a      	lsls	r2, r3, #24
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3309      	adds	r3, #9
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	041b      	lsls	r3, r3, #16
 80086f2:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	330a      	adds	r3, #10
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 80086fc:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	320b      	adds	r2, #11
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	4313      	orrs	r3, r2
 8008706:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	781a      	ldrb	r2, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	7852      	ldrb	r2, [r2, #1]
 8008732:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	3302      	adds	r3, #2
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	7892      	ldrb	r2, [r2, #2]
 800873c:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	3303      	adds	r3, #3
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	78d2      	ldrb	r2, [r2, #3]
 8008746:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	3304      	adds	r3, #4
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	7912      	ldrb	r2, [r2, #4]
 8008750:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3305      	adds	r3, #5
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	7952      	ldrb	r2, [r2, #5]
 800875a:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	88da      	ldrh	r2, [r3, #6]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	3306      	adds	r3, #6
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	b29a      	uxth	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	3307      	adds	r3, #7
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	0a1a      	lsrs	r2, r3, #8
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3309      	adds	r3, #9
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	0c1a      	lsrs	r2, r3, #16
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	330a      	adds	r3, #10
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	0e1a      	lsrs	r2, r3, #24
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	330b      	adds	r3, #11
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 80087ba:	b480      	push	{r7}
 80087bc:	b087      	sub	sp, #28
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4613      	mov	r3, r2
 80087c6:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 80087cc:	88fb      	ldrh	r3, [r7, #6]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 80087d4:	e007      	b.n	80087e6 <pack_packet+0x2c>
		*dst++ = *curr++;
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	1c53      	adds	r3, r2, #1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	1c59      	adds	r1, r3, #1
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d1f3      	bne.n	80087d6 <pack_packet+0x1c>
	}
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <compute_checksum>:

uint16_t compute_checksum() {
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	0000      	movs	r0, r0
	...

08008828 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 800882e:	4b14      	ldr	r3, [pc, #80]	; (8008880 <compute_packet_sz+0x58>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	330d      	adds	r3, #13
 8008834:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	4618      	mov	r0, r3
 800883a:	f7f7 fe37 	bl	80004ac <__aeabi_i2d>
 800883e:	a30e      	add	r3, pc, #56	; (adr r3, 8008878 <compute_packet_sz+0x50>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f7 ffc6 	bl	80007d4 <__aeabi_ddiv>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	ec43 2b17 	vmov	d7, r2, r3
 8008850:	eeb0 0a47 	vmov.f32	s0, s14
 8008854:	eef0 0a67 	vmov.f32	s1, s15
 8008858:	f005 fdb6 	bl	800e3c8 <ceil>
 800885c:	ec53 2b10 	vmov	r2, r3, d0
 8008860:	4610      	mov	r0, r2
 8008862:	4619      	mov	r1, r3
 8008864:	f7f8 f964 	bl	8000b30 <__aeabi_d2uiz>
 8008868:	4603      	mov	r3, r0
 800886a:	717b      	strb	r3, [r7, #5]
    return num_packets;
 800886c:	797b      	ldrb	r3, [r7, #5]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	00000000 	.word	0x00000000
 800887c:	406fe000 	.word	0x406fe000
 8008880:	2000178a 	.word	0x2000178a

08008884 <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 8008884:	b480      	push	{r7}
 8008886:	b089      	sub	sp, #36	; 0x24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 8008896:	4b2d      	ldr	r3, [pc, #180]	; (800894c <stuff_packet+0xc8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	795b      	ldrb	r3, [r3, #5]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d038      	beq.n	8008912 <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	60ba      	str	r2, [r7, #8]
 80088a6:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
        while (length--)
 80088ae:	e02a      	b.n	8008906 <stuff_packet+0x82>
        {
            if (*unstuffed) {
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00e      	beq.n	80088d6 <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	1c53      	adds	r3, r2, #1
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	1c59      	adds	r1, r3, #1
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e009      	b.n	80088ea <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	60ba      	str	r2, [r7, #8]
 80088dc:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2201      	movs	r2, #1
 80088e2:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2bff      	cmp	r3, #255	; 0xff
 80088f0:	d109      	bne.n	8008906 <stuff_packet+0x82>
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	60ba      	str	r2, [r7, #8]
 80088fe:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2201      	movs	r2, #1
 8008904:	701a      	strb	r2, [r3, #0]
        while (length--)
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	1e5a      	subs	r2, r3, #1
 800890a:	80fa      	strh	r2, [r7, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1cf      	bne.n	80088b0 <stuff_packet+0x2c>
 8008910:	e011      	b.n	8008936 <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 8008912:	2300      	movs	r3, #0
 8008914:	837b      	strh	r3, [r7, #26]
 8008916:	e00a      	b.n	800892e <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	1c53      	adds	r3, r2, #1
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	1c59      	adds	r1, r3, #1
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8008928:	8b7b      	ldrh	r3, [r7, #26]
 800892a:	3301      	adds	r3, #1
 800892c:	837b      	strh	r3, [r7, #26]
 800892e:	8b7a      	ldrh	r2, [r7, #26]
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	429a      	cmp	r2, r3
 8008934:	d3f0      	bcc.n	8008918 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	b29b      	uxth	r3, r3
}
 800893e:	4618      	mov	r0, r3
 8008940:	3724      	adds	r7, #36	; 0x24
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	200020c8 	.word	0x200020c8

08008950 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	; 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	4613      	mov	r3, r2
 800895c:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 800896a:	23ff      	movs	r3, #255	; 0xff
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	2300      	movs	r3, #0
 8008970:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 8008972:	e024      	b.n	80089be <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d025      	beq.n	80089c8 <unstuff_packet+0x78>
		if (copy != 0) {
 800897c:	7fbb      	ldrb	r3, [r7, #30]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	1c53      	adds	r3, r2, #1
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	1c59      	adds	r1, r3, #1
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	7812      	ldrb	r2, [r2, #0]
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e011      	b.n	80089b8 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 8008994:	7ffb      	ldrb	r3, [r7, #31]
 8008996:	2bff      	cmp	r3, #255	; 0xff
 8008998:	d004      	beq.n	80089a4 <unstuff_packet+0x54>
				*unstuffed++ = 0;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	60ba      	str	r2, [r7, #8]
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	60fa      	str	r2, [r7, #12]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	77fb      	strb	r3, [r7, #31]
 80089ae:	7ffb      	ldrb	r3, [r7, #31]
 80089b0:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 80089b2:	7ffb      	ldrb	r3, [r7, #31]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 80089b8:	7fbb      	ldrb	r3, [r7, #30]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	77bb      	strb	r3, [r7, #30]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d3d6      	bcc.n	8008974 <unstuff_packet+0x24>
 80089c6:	e002      	b.n	80089ce <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <unstuff_packet+0x7e>
				break; /* Source length too long */
 80089cc:	bf00      	nop
		}
	}
	return unstuffed - start;
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	b29b      	uxth	r3, r3
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3724      	adds	r7, #36	; 0x24
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80089f0:	b672      	cpsid	i
}
 80089f2:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a00:	2200      	movs	r2, #0
 8008a02:	4619      	mov	r1, r3
 8008a04:	f001 fea2 	bl	800a74c <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	23ff      	movs	r3, #255	; 0xff
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f002 fd11 	bl	800b43a <HAL_SPI_Transmit>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4619      	mov	r1, r3
 8008a32:	f001 fe8b 	bl	800a74c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a36:	b662      	cpsie	i
}
 8008a38:	bf00      	nop
	__enable_irq();

}
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a52:	b672      	cpsid	i
}
 8008a54:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a62:	2200      	movs	r2, #0
 8008a64:	4619      	mov	r1, r3
 8008a66:	f001 fe71 	bl	800a74c <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a70:	88fa      	ldrh	r2, [r7, #6]
 8008a72:	23ff      	movs	r3, #255	; 0xff
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	f002 fce0 	bl	800b43a <HAL_SPI_Transmit>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a8a:	8b3a      	ldrh	r2, [r7, #24]
 8008a8c:	23ff      	movs	r3, #255	; 0xff
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	f002 fe0f 	bl	800b6b2 <HAL_SPI_Receive>
 8008a94:	4603      	mov	r3, r0
 8008a96:	461a      	mov	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4619      	mov	r1, r3
 8008aae:	f001 fe4d 	bl	800a74c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008ab2:	b662      	cpsie	i
}
 8008ab4:	bf00      	nop
	__enable_irq();

}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af02      	add	r7, sp, #8
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8008aca:	230f      	movs	r3, #15
 8008acc:	733b      	strb	r3, [r7, #12]
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	f107 010c 	add.w	r1, r7, #12
 8008ada:	2201      	movs	r2, #1
 8008adc:	9200      	str	r2, [sp, #0]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ffae 	bl	8008a42 <spi_transmit_receive>

	return *rx;
 8008ae6:	7a3b      	ldrb	r3, [r7, #8]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008af8:	21c0      	movs	r1, #192	; 0xc0
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ffdf 	bl	8008abe <read_status_register>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008b22:	e002      	b.n	8008b2a <wait_for_operation+0x16>
		++count;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ffe0 	bl	8008af0 <flash_is_busy>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d008      	beq.n	8008b48 <wait_for_operation+0x34>
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	4413      	add	r3, r2
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	461a      	mov	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d3ed      	bcc.n	8008b24 <wait_for_operation+0x10>
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8008b60:	231f      	movs	r3, #31
 8008b62:	733b      	strb	r3, [r7, #12]
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	737b      	strb	r3, [r7, #13]
 8008b68:	78bb      	ldrb	r3, [r7, #2]
 8008b6a:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	2203      	movs	r2, #3
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ff34 	bl	80089e2 <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8008b7a:	2132      	movs	r1, #50	; 0x32
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ffc9 	bl	8008b14 <wait_for_operation>
}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	733b      	strb	r3, [r7, #12]
 8008ba0:	887b      	ldrh	r3, [r7, #2]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8008ba6:	2313      	movs	r3, #19
 8008ba8:	723b      	strb	r3, [r7, #8]
 8008baa:	2300      	movs	r3, #0
 8008bac:	727b      	strb	r3, [r7, #9]
 8008bae:	7b3b      	ldrb	r3, [r7, #12]
 8008bb0:	72bb      	strb	r3, [r7, #10]
 8008bb2:	7b7b      	ldrb	r3, [r7, #13]
 8008bb4:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008bb6:	f107 0308 	add.w	r3, r7, #8
 8008bba:	2204      	movs	r2, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff ff0f 	bl	80089e2 <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8008bc4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff ffa3 	bl	8008b14 <wait_for_operation>
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008bde:	21a0      	movs	r1, #160	; 0xa0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ff6c 	bl	8008abe <read_status_register>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008bf0:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	21a0      	movs	r1, #160	; 0xa0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ffa9 	bl	8008b50 <write_status_register>
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008c0e:	21a0      	movs	r1, #160	; 0xa0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff ff54 	bl	8008abe <read_status_register>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008c20:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c28:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	21a0      	movs	r1, #160	; 0xa0
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ff8d 	bl	8008b50 <write_status_register>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8008c46:	2306      	movs	r3, #6
 8008c48:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fec5 	bl	80089e2 <spi_transmit>
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8008c68:	2304      	movs	r3, #4
 8008c6a:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008c6c:	f107 030c 	add.w	r3, r7, #12
 8008c70:	2201      	movs	r2, #1
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff feb4 	bl	80089e2 <spi_transmit>
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	461a      	mov	r2, r3
 8008c90:	460b      	mov	r3, r1
 8008c92:	80fb      	strh	r3, [r7, #6]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008c98:	88bb      	ldrh	r3, [r7, #4]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	753b      	strb	r3, [r7, #20]
 8008ca2:	88bb      	ldrh	r3, [r7, #4]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8008ca8:	2302      	movs	r3, #2
 8008caa:	743b      	strb	r3, [r7, #16]
 8008cac:	7d3b      	ldrb	r3, [r7, #20]
 8008cae:	747b      	strb	r3, [r7, #17]
 8008cb0:	7d7b      	ldrb	r3, [r7, #21]
 8008cb2:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cba:	d902      	bls.n	8008cc2 <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8008cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cc0:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cc2:	b672      	cpsid	i
}
 8008cc4:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f001 fd39 	bl	800a74c <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008ce0:	f107 0110 	add.w	r1, r7, #16
 8008ce4:	23ff      	movs	r3, #255	; 0xff
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f002 fba7 	bl	800b43a <HAL_SPI_Transmit>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	23ff      	movs	r3, #255	; 0xff
 8008d00:	68b9      	ldr	r1, [r7, #8]
 8008d02:	f002 fb9a 	bl	800b43a <HAL_SPI_Transmit>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4619      	mov	r1, r3
 8008d20:	f001 fd14 	bl	800a74c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008d24:	b662      	cpsie	i
}
 8008d26:	bf00      	nop
	__enable_irq();
}
 8008d28:	bf00      	nop
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008d3c:	887b      	ldrh	r3, [r7, #2]
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	733b      	strb	r3, [r7, #12]
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	723b      	strb	r3, [r7, #8]
 8008d50:	2300      	movs	r3, #0
 8008d52:	727b      	strb	r3, [r7, #9]
 8008d54:	7b3b      	ldrb	r3, [r7, #12]
 8008d56:	72bb      	strb	r3, [r7, #10]
 8008d58:	7b7b      	ldrb	r3, [r7, #13]
 8008d5a:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	2204      	movs	r2, #4
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fe3c 	bl	80089e2 <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8008d6a:	4904      	ldr	r1, [pc, #16]	; (8008d7c <program_buffer_to_memory+0x4c>)
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fed1 	bl	8008b14 <wait_for_operation>
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	000aae60 	.word	0x000aae60

08008d80 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fabd 	bl	8009308 <ping_flash>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00d      	beq.n	8008db0 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008d94:	21c0      	movs	r1, #192	; 0xc0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fe91 	bl	8008abe <read_status_register>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8008dae:	e003      	b.n	8008db8 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2208      	movs	r2, #8
 8008db4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa9a 	bl	8009308 <ping_flash>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00d      	beq.n	8008df6 <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008dda:	21c0      	movs	r1, #192	; 0xc0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fe6e 	bl	8008abe <read_status_register>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8008df4:	e003      	b.n	8008dfe <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff10 	bl	8008c3e <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008e1e:	887b      	ldrh	r3, [r7, #2]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	733b      	strb	r3, [r7, #12]
 8008e28:	887b      	ldrh	r3, [r7, #2]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8008e2e:	23d8      	movs	r3, #216	; 0xd8
 8008e30:	723b      	strb	r3, [r7, #8]
 8008e32:	2300      	movs	r3, #0
 8008e34:	727b      	strb	r3, [r7, #9]
 8008e36:	7b3b      	ldrb	r3, [r7, #12]
 8008e38:	72bb      	strb	r3, [r7, #10]
 8008e3a:	7b7b      	ldrb	r3, [r7, #13]
 8008e3c:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	2204      	movs	r2, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fdcb 	bl	80089e2 <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff07 	bl	8008c60 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 8008e52:	4905      	ldr	r1, [pc, #20]	; (8008e68 <erase_block+0x5c>)
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fe5d 	bl	8008b14 <wait_for_operation>

	get_erase_failure_status(flash);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff ffb3 	bl	8008dc6 <get_erase_failure_status>
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	003d0900 	.word	0x003d0900

08008e6c <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa47 	bl	8009308 <ping_flash>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d033      	beq.n	8008ee8 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008e80:	21c0      	movs	r1, #192	; 0xc0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fe1b 	bl	8008abe <read_status_register>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d107      	bne.n	8008eb2 <get_ECC_status+0x46>
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008eb0:	e01f      	b.n	8008ef2 <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <get_ECC_status+0x5c>
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008ec6:	e014      	b.n	8008ef2 <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d007      	beq.n	8008ede <get_ECC_status+0x72>
 8008ece:	7b7b      	ldrb	r3, [r7, #13]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008edc:	e009      	b.n	8008ef2 <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2203      	movs	r2, #3
 8008ee2:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8008ee6:	e004      	b.n	8008ef2 <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2204      	movs	r2, #4
 8008eec:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8008ef0:	e7ff      	b.n	8008ef2 <get_ECC_status+0x86>
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b088      	sub	sp, #32
 8008efe:	af02      	add	r7, sp, #8
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	4611      	mov	r1, r2
 8008f06:	461a      	mov	r2, r3
 8008f08:	460b      	mov	r3, r1
 8008f0a:	80fb      	strh	r3, [r7, #6]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008f10:	88bb      	ldrh	r3, [r7, #4]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	753b      	strb	r3, [r7, #20]
 8008f1a:	88bb      	ldrh	r3, [r7, #4]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8008f20:	2303      	movs	r3, #3
 8008f22:	743b      	strb	r3, [r7, #16]
 8008f24:	7d3b      	ldrb	r3, [r7, #20]
 8008f26:	747b      	strb	r3, [r7, #17]
 8008f28:	7d7b      	ldrb	r3, [r7, #21]
 8008f2a:	74bb      	strb	r3, [r7, #18]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8008f30:	f107 0110 	add.w	r1, r7, #16
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff fd80 	bl	8008a42 <spi_transmit_receive>
}
 8008f42:	bf00      	nop
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	4611      	mov	r1, r2
 8008f56:	461a      	mov	r2, r3
 8008f58:	460b      	mov	r3, r1
 8008f5a:	80fb      	strh	r3, [r7, #6]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8008f60:	88bb      	ldrh	r3, [r7, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fe10 	bl	8008b8a <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8008f6a:	8b3b      	ldrh	r3, [r7, #24]
 8008f6c:	88fa      	ldrh	r2, [r7, #6]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff ffc2 	bl	8008efa <read_flash_buffer>

	get_ECC_status(flash);
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff ff78 	bl	8008e6c <get_ECC_status>
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	460b      	mov	r3, r1
 8008f94:	80fb      	strh	r3, [r7, #6]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fe4f 	bl	8008c3e <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 8008fa0:	8b3b      	ldrh	r3, [r7, #24]
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff fe6b 	bl	8008c82 <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8008fac:	88bb      	ldrh	r3, [r7, #4]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff febd 	bl	8008d30 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff fe52 	bl	8008c60 <disable_write>

	get_write_failure_status(flash);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fedf 	bl	8008d80 <get_write_failure_status>
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8008fd2:	21b0      	movs	r1, #176	; 0xb0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fd72 	bl	8008abe <read_status_register>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	f043 0310 	orr.w	r3, r3, #16
 8008fe4:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8008fe6:	7bba      	ldrb	r2, [r7, #14]
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d005      	beq.n	8008ffa <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	21b0      	movs	r1, #176	; 0xb0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fdab 	bl	8008b50 <write_status_register>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800900a:	21b0      	movs	r1, #176	; 0xb0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fd56 	bl	8008abe <read_status_register>
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	f043 0308 	orr.w	r3, r3, #8
 800901c:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 800901e:	7bba      	ldrb	r2, [r7, #14]
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	429a      	cmp	r2, r3
 8009024:	d005      	beq.n	8009032 <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	461a      	mov	r2, r3
 800902a:	21b0      	movs	r1, #176	; 0xb0
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff fd8f 	bl	8008b50 <write_status_register>
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 800903a:	b580      	push	{r7, lr}
 800903c:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8009040:	af02      	add	r7, sp, #8
 8009042:	1d3b      	adds	r3, r7, #4
 8009044:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 8009046:	f107 0108 	add.w	r1, r7, #8
 800904a:	1d38      	adds	r0, r7, #4
 800904c:	2300      	movs	r3, #0
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2300      	movs	r3, #0
 8009052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009056:	6800      	ldr	r0, [r0, #0]
 8009058:	f7ff ff77 	bl	8008f4a <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 800905c:	2301      	movs	r3, #1
 800905e:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8009062:	2300      	movs	r3, #0
 8009064:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8009068:	e00e      	b.n	8009088 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 800906a:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800906e:	f107 0208 	add.w	r2, r7, #8
 8009072:	5cd3      	ldrb	r3, [r2, r3]
 8009074:	2bff      	cmp	r3, #255	; 0xff
 8009076:	d002      	beq.n	800907e <find_write_ptr+0x44>
			first_page_empty = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 800907e:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8009082:	3301      	adds	r3, #1
 8009084:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8009088:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800908c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009090:	d3eb      	bcc.n	800906a <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 8009092:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <find_write_ptr+0x76>
		flash->current_page = 0;
 800909a:	1d3b      	adds	r3, r7, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 80090a4:	1d3b      	adds	r3, r7, #4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80090ae:	e0f0      	b.n	8009292 <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 80090b0:	2300      	movs	r3, #0
 80090b2:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 80090b6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80090ba:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80090be:	e041      	b.n	8009144 <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 80090c0:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80090c4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4413      	add	r3, r2
 80090d6:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 80090da:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80090de:	f107 0108 	add.w	r1, r7, #8
 80090e2:	1d38      	adds	r0, r7, #4
 80090e4:	2200      	movs	r2, #0
 80090e6:	9200      	str	r2, [sp, #0]
 80090e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090ec:	6800      	ldr	r0, [r0, #0]
 80090ee:	f7ff ff2c 	bl	8008f4a <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 80090f8:	2300      	movs	r3, #0
 80090fa:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 80090fe:	e00f      	b.n	8009120 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8009100:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8009104:	f107 0208 	add.w	r2, r7, #8
 8009108:	5cd3      	ldrb	r3, [r2, r3]
 800910a:	2bff      	cmp	r3, #255	; 0xff
 800910c:	d003      	beq.n	8009116 <find_write_ptr+0xdc>
				cur_page_empty = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 8009114:	e009      	b.n	800912a <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 8009116:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800911a:	3301      	adds	r3, #1
 800911c:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8009120:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8009124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009128:	d3ea      	bcc.n	8009100 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 800912a:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <find_write_ptr+0x102>
			max = cur_search_page;
 8009132:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8009136:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800913a:	e003      	b.n	8009144 <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 800913c:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8009140:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8009144:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8009148:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	d8b6      	bhi.n	80090c0 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 8009152:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8009156:	b29a      	uxth	r2, r3
 8009158:	1d3b      	adds	r3, r7, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8009160:	1d3b      	adds	r3, r7, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009168:	f107 0108 	add.w	r1, r7, #8
 800916c:	1d38      	adds	r0, r7, #4
 800916e:	2200      	movs	r2, #0
 8009170:	9200      	str	r2, [sp, #0]
 8009172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009176:	6800      	ldr	r0, [r0, #0]
 8009178:	f7ff fee7 	bl	8008f4a <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	d01e      	beq.n	80091c6 <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8009188:	1d3b      	adds	r3, r7, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009190:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8009194:	4293      	cmp	r3, r2
 8009196:	d106      	bne.n	80091a6 <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 8009198:	1d3b      	adds	r3, r7, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091a0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 80091a4:	e075      	b.n	8009292 <find_write_ptr+0x258>
			flash->current_page++;
 80091a6:	1d3b      	adds	r3, r7, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80091ae:	3301      	adds	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	1d3b      	adds	r3, r7, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 80091ba:	1d3b      	adds	r3, r7, #4
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80091c4:	e065      	b.n	8009292 <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 80091cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80091d0:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80091d4:	e019      	b.n	800920a <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 80091d6:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80091da:	f107 0208 	add.w	r2, r7, #8
 80091de:	5cd3      	ldrb	r3, [r2, r3]
 80091e0:	2bff      	cmp	r3, #255	; 0xff
 80091e2:	d00b      	beq.n	80091fc <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 80091e4:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80091e8:	3301      	adds	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 80091fa:	e00a      	b.n	8009212 <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 80091fc:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29b      	uxth	r3, r3
 8009206:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 800920a:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 800920e:	2b00      	cmp	r3, #0
 8009210:	dae1      	bge.n	80091d6 <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 8009212:	1d3b      	adds	r3, r7, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800921a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921e:	d806      	bhi.n	800922e <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8009220:	1d3b      	adds	r3, r7, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009228:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800922c:	e031      	b.n	8009292 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 800922e:	1d3b      	adds	r3, r7, #4
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800923a:	d806      	bhi.n	800924a <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 800923c:	1d3b      	adds	r3, r7, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009244:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009248:	e023      	b.n	8009292 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 800924a:	1d3b      	adds	r3, r7, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009252:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009256:	d806      	bhi.n	8009266 <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8009258:	1d3b      	adds	r3, r7, #4
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009260:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009264:	e015      	b.n	8009292 <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 8009266:	1d3b      	adds	r3, r7, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800926e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009272:	d20e      	bcs.n	8009292 <find_write_ptr+0x258>
		flash->next_free_column = 0;
 8009274:	1d3b      	adds	r3, r7, #4
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2200      	movs	r2, #0
 800927a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009286:	3301      	adds	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 8009292:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	887a      	ldrh	r2, [r7, #2]
 80092bc:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f837 	bl	800935c <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fe6b 	bl	8008fca <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7ff fe84 	bl	8009002 <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fe9d 	bl	800903a <find_write_ptr>
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8009310:	239f      	movs	r3, #159	; 0x9f
 8009312:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8009314:	f107 030c 	add.w	r3, r7, #12
 8009318:	f107 0110 	add.w	r1, r7, #16
 800931c:	2203      	movs	r2, #3
 800931e:	9200      	str	r2, [sp, #0]
 8009320:	2202      	movs	r2, #2
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fb8d 	bl	8008a42 <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8009328:	7b3b      	ldrb	r3, [r7, #12]
 800932a:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 800932c:	7b7b      	ldrb	r3, [r7, #13]
 800932e:	b29b      	uxth	r3, r3
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	b29a      	uxth	r2, r3
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	b29b      	uxth	r3, r3
 8009338:	4413      	add	r3, r2
 800933a:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	2bef      	cmp	r3, #239	; 0xef
 8009340:	d106      	bne.n	8009350 <ping_flash+0x48>
 8009342:	8abb      	ldrh	r3, [r7, #20]
 8009344:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8009348:	4293      	cmp	r3, r2
 800934a:	d101      	bne.n	8009350 <ping_flash+0x48>
		return 1;
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <ping_flash+0x4a>
	else
		return 0;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fbc3 	bl	8008af0 <flash_is_busy>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <reset_flash+0x18>
		return 0;
 8009370:	2300      	movs	r3, #0
 8009372:	e00d      	b.n	8009390 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8009374:	23ff      	movs	r3, #255	; 0xff
 8009376:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	2201      	movs	r2, #1
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff fb2e 	bl	80089e2 <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8009386:	4904      	ldr	r1, [pc, #16]	; (8009398 <reset_flash+0x3c>)
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fbc3 	bl	8008b14 <wait_for_operation>

	return 1;
 800938e:	2301      	movs	r3, #1
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0007a120 	.word	0x0007a120

0800939c <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 80093a8:	2300      	movs	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 80093ac:	2300      	movs	r3, #0
 80093ae:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 80093b0:	e05a      	b.n	8009468 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 80093be:	8a3a      	ldrh	r2, [r7, #16]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093c6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80093ca:	429a      	cmp	r2, r3
 80093cc:	dd05      	ble.n	80093da <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093d4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80093d8:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	18d1      	adds	r1, r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093ec:	8a3a      	ldrh	r2, [r7, #16]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	4603      	mov	r3, r0
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fdc6 	bl	8008f84 <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <write_to_flash_contiguous+0x6c>
			write_failures++;
 8009402:	8a7b      	ldrh	r3, [r7, #18]
 8009404:	3301      	adds	r3, #1
 8009406:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8009408:	8a3b      	ldrh	r3, [r7, #16]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009416:	461a      	mov	r2, r3
 8009418:	8a3b      	ldrh	r3, [r7, #16]
 800941a:	4413      	add	r3, r2
 800941c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009420:	da09      	bge.n	8009436 <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8009428:	8a3b      	ldrh	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009434:	e018      	b.n	8009468 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800943c:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8009440:	4293      	cmp	r3, r2
 8009442:	d105      	bne.n	8009450 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800944e:	e00b      	b.n	8009468 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800945e:	3301      	adds	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	d3a0      	bcc.n	80093b2 <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 8009470:	8a7b      	ldrh	r3, [r7, #18]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 800947a:	b580      	push	{r7, lr}
 800947c:	b08c      	sub	sp, #48	; 0x30
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 f967 	bl	800975a <get_bytes_remaining>
 800948c:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	429a      	cmp	r2, r3
 8009494:	d901      	bls.n	800949a <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 800949a:	2300      	movs	r3, #0
 800949c:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 800949e:	2300      	movs	r3, #0
 80094a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d035      	beq.n	800951a <write_to_flash+0xa0>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094be:	d32c      	bcc.n	800951a <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80094ca:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80094cc:	2300      	movs	r3, #0
 80094ce:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094d0:	e00e      	b.n	80094f0 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 80094d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	441a      	add	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094de:	4619      	mov	r1, r3
 80094e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094e2:	440b      	add	r3, r1
 80094e4:	7811      	ldrb	r1, [r2, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80094ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094ec:	3301      	adds	r3, #1
 80094ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094f0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80094f2:	8bfb      	ldrh	r3, [r7, #30]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d3ec      	bcc.n	80094d2 <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094fe:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8009508:	8bfb      	ldrh	r3, [r7, #30]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8009510:	8bfb      	ldrh	r3, [r7, #30]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8009518:	e02a      	b.n	8009570 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009520:	461a      	mov	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4413      	add	r3, r2
 8009526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800952a:	d221      	bcs.n	8009570 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 800952c:	2300      	movs	r3, #0
 800952e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009530:	e00e      	b.n	8009550 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8009532:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	441a      	add	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800953e:	4619      	mov	r1, r3
 8009540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009542:	440b      	add	r3, r1
 8009544:	7811      	ldrb	r1, [r2, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 800954a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800954c:	3301      	adds	r3, #1
 800954e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d8ec      	bhi.n	8009532 <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	b29b      	uxth	r3, r3
 8009562:	4413      	add	r3, r2
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 800956c:	2300      	movs	r3, #0
 800956e:	e04b      	b.n	8009608 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009584:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	4413      	add	r3, r2
 800958c:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fb21 	bl	8008bd6 <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 8009594:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00f      	beq.n	80095bc <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095a2:	4619      	mov	r1, r3
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff fef9 	bl	800939c <write_to_flash_contiguous>
 80095aa:	4603      	mov	r3, r0
 80095ac:	461a      	mov	r2, r3
 80095ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095b0:	4413      	add	r3, r2
 80095b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d009      	beq.n	80095d6 <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fee8 	bl	800939c <write_to_flash_contiguous>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095d2:	4413      	add	r3, r2
 80095d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7ff fb15 	bl	8008c06 <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 80095dc:	2300      	movs	r3, #0
 80095de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80095e0:	e009      	b.n	80095f6 <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 80095e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	441a      	add	r2, r3
 80095e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095ea:	7811      	ldrb	r1, [r2, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 80095f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095f2:	3301      	adds	r3, #1
 80095f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80095f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095f8:	8afb      	ldrh	r3, [r7, #22]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d3f1      	bcc.n	80095e2 <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8afa      	ldrh	r2, [r7, #22]
 8009602:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 8009606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8009608:	4618      	mov	r0, r3
 800960a:	3730      	adds	r7, #48	; 0x30
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10d      	bne.n	800963e <finish_flash_write+0x2e>
		return 0;
 8009622:	2300      	movs	r3, #0
 8009624:	e036      	b.n	8009694 <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	b291      	uxth	r1, r2
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2100      	movs	r1, #0
 800963c:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009648:	d3ed      	bcc.n	8009626 <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f885 	bl	800975a <get_bytes_remaining>
 8009650:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009658:	461a      	mov	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4293      	cmp	r3, r2
 800965e:	d204      	bcs.n	800966a <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fab3 	bl	8008bd6 <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8009670:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8009678:	461a      	mov	r2, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff fe8e 	bl	800939c <write_to_flash_contiguous>
 8009680:	4603      	mov	r3, r0
 8009682:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff faba 	bl	8008c06 <lock_flash>

	return write_failures;
 8009692:	897b      	ldrh	r3, [r7, #10]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af02      	add	r7, sp, #8
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2200      	movs	r2, #0
 80096cc:	9200      	str	r2, [sp, #0]
 80096ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fc38 	bl	8008f4a <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7ff fbbf 	bl	8008e6c <get_ECC_status>
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fa67 	bl	8008bd6 <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8009708:	2300      	movs	r3, #0
 800970a:	81bb      	strh	r3, [r7, #12]
 800970c:	e011      	b.n	8009732 <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 800970e:	89bb      	ldrh	r3, [r7, #12]
 8009710:	019b      	lsls	r3, r3, #6
 8009712:	b29b      	uxth	r3, r3
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fb78 	bl	8008e0c <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <erase_flash+0x36>
			erase_failures++;
 8009726:	89fb      	ldrh	r3, [r7, #14]
 8009728:	3301      	adds	r3, #1
 800972a:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 800972c:	89bb      	ldrh	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	81bb      	strh	r3, [r7, #12]
 8009732:	89bb      	ldrh	r3, [r7, #12]
 8009734:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009738:	4293      	cmp	r3, r2
 800973a:	d9e8      	bls.n	800970e <erase_flash+0x18>
	}

	lock_flash(flash);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fa62 	bl	8008c06 <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fc79 	bl	800903a <find_write_ptr>
	flash->write_buffer_size = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 8009750:	89fb      	ldrh	r3, [r7, #14]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009768:	02db      	lsls	r3, r3, #11
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 8009770:	4413      	add	r3, r2
 8009772:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 8009776:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8009780:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 800978e:	b580      	push	{r7, lr}
 8009790:	b086      	sub	sp, #24
 8009792:	af02      	add	r7, sp, #8
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	461a      	mov	r2, r3
 800979a:	460b      	mov	r3, r1
 800979c:	72fb      	strb	r3, [r7, #11]
 800979e:	4613      	mov	r3, r2
 80097a0:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fa17 	bl	8008bd6 <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b40      	subs	r3, #64	; 0x40
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	893a      	ldrh	r2, [r7, #8]
 80097b2:	2100      	movs	r1, #0
 80097b4:	9100      	str	r1, [sp, #0]
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff fbe3 	bl	8008f84 <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff fa21 	bl	8008c06 <lock_flash>

	return flash->last_write_failure_status;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	461a      	mov	r2, r3
 80097de:	460b      	mov	r3, r1
 80097e0:	72fb      	strb	r3, [r7, #11]
 80097e2:	4613      	mov	r3, r2
 80097e4:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b40      	subs	r3, #64	; 0x40
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	893a      	ldrh	r2, [r7, #8]
 80097f0:	2100      	movs	r1, #0
 80097f2:	9100      	str	r1, [sp, #0]
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fba7 	bl	8008f4a <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff f9e2 	bl	8008bd6 <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 8009812:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff faf8 	bl	8008e0c <erase_block>
	lock_flash(flash);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff f9f2 	bl	8008c06 <lock_flash>
	return flash->last_erase_failure_status;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8009830:	b580      	push	{r7, lr}
 8009832:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8009836:	af00      	add	r7, sp, #0
 8009838:	1d3b      	adds	r3, r7, #4
 800983a:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	3304      	adds	r3, #4
 8009846:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800984a:	2100      	movs	r1, #0
 800984c:	4618      	mov	r0, r3
 800984e:	f004 fdb1 	bl	800e3b4 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 8009852:	f107 0108 	add.w	r1, r7, #8
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f7ff fe0c 	bl	800947a <write_to_flash>
}
 8009862:	bf00      	nop
 8009864:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <HAL_Init+0x40>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <HAL_Init+0x40>)
 8009876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800987a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <HAL_Init+0x40>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <HAL_Init+0x40>)
 8009882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009888:	4b08      	ldr	r3, [pc, #32]	; (80098ac <HAL_Init+0x40>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a07      	ldr	r2, [pc, #28]	; (80098ac <HAL_Init+0x40>)
 800988e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009894:	2003      	movs	r0, #3
 8009896:	f000 f965 	bl	8009b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800989a:	2000      	movs	r0, #0
 800989c:	f000 f808 	bl	80098b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098a0:	f7fc fc68 	bl	8006174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	40023c00 	.word	0x40023c00

080098b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098b8:	4b12      	ldr	r3, [pc, #72]	; (8009904 <HAL_InitTick+0x54>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b12      	ldr	r3, [pc, #72]	; (8009908 <HAL_InitTick+0x58>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	4619      	mov	r1, r3
 80098c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f981 	bl	8009bd6 <HAL_SYSTICK_Config>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e00e      	b.n	80098fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b0f      	cmp	r3, #15
 80098e2:	d80a      	bhi.n	80098fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098e4:	2200      	movs	r2, #0
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ec:	f000 f945 	bl	8009b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80098f0:	4a06      	ldr	r2, [pc, #24]	; (800990c <HAL_InitTick+0x5c>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	e000      	b.n	80098fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000198 	.word	0x20000198
 8009908:	200001d4 	.word	0x200001d4
 800990c:	200001d0 	.word	0x200001d0

08009910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <HAL_IncTick+0x20>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <HAL_IncTick+0x24>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4413      	add	r3, r2
 8009920:	4a04      	ldr	r2, [pc, #16]	; (8009934 <HAL_IncTick+0x24>)
 8009922:	6013      	str	r3, [r2, #0]
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	200001d4 	.word	0x200001d4
 8009934:	20002388 	.word	0x20002388

08009938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  return uwTick;
 800993c:	4b03      	ldr	r3, [pc, #12]	; (800994c <HAL_GetTick+0x14>)
 800993e:	681b      	ldr	r3, [r3, #0]
}
 8009940:	4618      	mov	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20002388 	.word	0x20002388

08009950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009958:	f7ff ffee 	bl	8009938 <HAL_GetTick>
 800995c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009968:	d005      	beq.n	8009976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <HAL_Delay+0x44>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009976:	bf00      	nop
 8009978:	f7ff ffde 	bl	8009938 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	429a      	cmp	r2, r3
 8009986:	d8f7      	bhi.n	8009978 <HAL_Delay+0x28>
  {
  }
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	200001d4 	.word	0x200001d4

08009998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099a8:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <__NVIC_SetPriorityGrouping+0x44>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099b4:	4013      	ands	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099ca:	4a04      	ldr	r2, [pc, #16]	; (80099dc <__NVIC_SetPriorityGrouping+0x44>)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	60d3      	str	r3, [r2, #12]
}
 80099d0:	bf00      	nop
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	e000ed00 	.word	0xe000ed00

080099e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099e4:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <__NVIC_GetPriorityGrouping+0x18>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	0a1b      	lsrs	r3, r3, #8
 80099ea:	f003 0307 	and.w	r3, r3, #7
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	e000ed00 	.word	0xe000ed00

080099fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	db0b      	blt.n	8009a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	f003 021f 	and.w	r2, r3, #31
 8009a14:	4907      	ldr	r1, [pc, #28]	; (8009a34 <__NVIC_EnableIRQ+0x38>)
 8009a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1a:	095b      	lsrs	r3, r3, #5
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8009a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	e000e100 	.word	0xe000e100

08009a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6039      	str	r1, [r7, #0]
 8009a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	db0a      	blt.n	8009a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	490c      	ldr	r1, [pc, #48]	; (8009a84 <__NVIC_SetPriority+0x4c>)
 8009a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a56:	0112      	lsls	r2, r2, #4
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a60:	e00a      	b.n	8009a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	4908      	ldr	r1, [pc, #32]	; (8009a88 <__NVIC_SetPriority+0x50>)
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	f003 030f 	and.w	r3, r3, #15
 8009a6e:	3b04      	subs	r3, #4
 8009a70:	0112      	lsls	r2, r2, #4
 8009a72:	b2d2      	uxtb	r2, r2
 8009a74:	440b      	add	r3, r1
 8009a76:	761a      	strb	r2, [r3, #24]
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	e000e100 	.word	0xe000e100
 8009a88:	e000ed00 	.word	0xe000ed00

08009a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b089      	sub	sp, #36	; 0x24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f1c3 0307 	rsb	r3, r3, #7
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	bf28      	it	cs
 8009aaa:	2304      	movcs	r3, #4
 8009aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	2b06      	cmp	r3, #6
 8009ab4:	d902      	bls.n	8009abc <NVIC_EncodePriority+0x30>
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	3b03      	subs	r3, #3
 8009aba:	e000      	b.n	8009abe <NVIC_EncodePriority+0x32>
 8009abc:	2300      	movs	r3, #0
 8009abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	43da      	mvns	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	401a      	ands	r2, r3
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	fa01 f303 	lsl.w	r3, r1, r3
 8009ade:	43d9      	mvns	r1, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ae4:	4313      	orrs	r3, r2
         );
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3724      	adds	r7, #36	; 0x24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009af8:	f3bf 8f4f 	dsb	sy
}
 8009afc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009afe:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <__NVIC_SystemReset+0x24>)
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b06:	4904      	ldr	r1, [pc, #16]	; (8009b18 <__NVIC_SystemReset+0x24>)
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <__NVIC_SystemReset+0x28>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b0e:	f3bf 8f4f 	dsb	sy
}
 8009b12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <__NVIC_SystemReset+0x20>
 8009b18:	e000ed00 	.word	0xe000ed00
 8009b1c:	05fa0004 	.word	0x05fa0004

08009b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b30:	d301      	bcc.n	8009b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b32:	2301      	movs	r3, #1
 8009b34:	e00f      	b.n	8009b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b36:	4a0a      	ldr	r2, [pc, #40]	; (8009b60 <SysTick_Config+0x40>)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b3e:	210f      	movs	r1, #15
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	f7ff ff78 	bl	8009a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <SysTick_Config+0x40>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b4e:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <SysTick_Config+0x40>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	e000e010 	.word	0xe000e010

08009b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff ff13 	bl	8009998 <__NVIC_SetPriorityGrouping>
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	4603      	mov	r3, r0
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b8c:	f7ff ff28 	bl	80099e0 <__NVIC_GetPriorityGrouping>
 8009b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	6978      	ldr	r0, [r7, #20]
 8009b98:	f7ff ff78 	bl	8009a8c <NVIC_EncodePriority>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff ff47 	bl	8009a38 <__NVIC_SetPriority>
}
 8009baa:	bf00      	nop
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	4603      	mov	r3, r0
 8009bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff ff1b 	bl	80099fc <__NVIC_EnableIRQ>
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009bd2:	f7ff ff8f 	bl	8009af4 <__NVIC_SystemReset>

08009bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ff9e 	bl	8009b20 <SysTick_Config>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009bfc:	f7ff fe9c 	bl	8009938 <HAL_GetTick>
 8009c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e099      	b.n	8009d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c2c:	e00f      	b.n	8009c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c2e:	f7ff fe83 	bl	8009938 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b05      	cmp	r3, #5
 8009c3a:	d908      	bls.n	8009c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2203      	movs	r2, #3
 8009c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e078      	b.n	8009d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e8      	bne.n	8009c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4b38      	ldr	r3, [pc, #224]	; (8009d48 <HAL_DMA_Init+0x158>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d107      	bne.n	8009cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0307 	bic.w	r3, r3, #7
 8009cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d117      	bne.n	8009d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fb01 	bl	800a2fc <DMA_CheckFifoParam>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d008      	beq.n	8009d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2240      	movs	r2, #64	; 0x40
 8009d04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e016      	b.n	8009d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fab8 	bl	800a290 <DMA_CalcBaseAndBitshift>
 8009d20:	4603      	mov	r3, r0
 8009d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d28:	223f      	movs	r2, #63	; 0x3f
 8009d2a:	409a      	lsls	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	f010803f 	.word	0xf010803f

08009d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_DMA_Start_IT+0x26>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e040      	b.n	8009df4 <HAL_DMA_Start_IT+0xa8>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d12f      	bne.n	8009de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fa4a 	bl	800a234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009da4:	223f      	movs	r2, #63	; 0x3f
 8009da6:	409a      	lsls	r2, r3
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0216 	orr.w	r2, r2, #22
 8009dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0208 	orr.w	r2, r2, #8
 8009dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e005      	b.n	8009df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009dee:	2302      	movs	r3, #2
 8009df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009e0a:	f7ff fd95 	bl	8009938 <HAL_GetTick>
 8009e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d008      	beq.n	8009e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2280      	movs	r2, #128	; 0x80
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e052      	b.n	8009ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0216 	bic.w	r2, r2, #22
 8009e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	695a      	ldr	r2, [r3, #20]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d103      	bne.n	8009e5e <HAL_DMA_Abort+0x62>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0208 	bic.w	r2, r2, #8
 8009e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e7e:	e013      	b.n	8009ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e80:	f7ff fd5a 	bl	8009938 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d90c      	bls.n	8009ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2203      	movs	r2, #3
 8009e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e015      	b.n	8009ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e4      	bne.n	8009e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eba:	223f      	movs	r2, #63	; 0x3f
 8009ebc:	409a      	lsls	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d004      	beq.n	8009efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2280      	movs	r2, #128	; 0x80
 8009ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e00c      	b.n	8009f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2205      	movs	r2, #5
 8009efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 0201 	bic.w	r2, r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009f2c:	4b92      	ldr	r3, [pc, #584]	; (800a178 <HAL_DMA_IRQHandler+0x258>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a92      	ldr	r2, [pc, #584]	; (800a17c <HAL_DMA_IRQHandler+0x25c>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	0a9b      	lsrs	r3, r3, #10
 8009f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	409a      	lsls	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4013      	ands	r3, r2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01a      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d013      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0204 	bic.w	r2, r2, #4
 8009f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f78:	2208      	movs	r2, #8
 8009f7a:	409a      	lsls	r2, r3
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f84:	f043 0201 	orr.w	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f90:	2201      	movs	r2, #1
 8009f92:	409a      	lsls	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4013      	ands	r3, r2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d012      	beq.n	8009fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00b      	beq.n	8009fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fae:	2201      	movs	r2, #1
 8009fb0:	409a      	lsls	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	f043 0202 	orr.w	r2, r3, #2
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	409a      	lsls	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d012      	beq.n	8009ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe4:	2204      	movs	r2, #4
 8009fe6:	409a      	lsls	r2, r3
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff0:	f043 0204 	orr.w	r2, r3, #4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	409a      	lsls	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d043      	beq.n	800a090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d03c      	beq.n	800a090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01a:	2210      	movs	r2, #16
 800a01c:	409a      	lsls	r2, r3
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d018      	beq.n	800a062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d108      	bne.n	800a050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d024      	beq.n	800a090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
 800a04e:	e01f      	b.n	800a090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01b      	beq.n	800a090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
 800a060:	e016      	b.n	800a090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d107      	bne.n	800a080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 0208 	bic.w	r2, r2, #8
 800a07e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a094:	2220      	movs	r2, #32
 800a096:	409a      	lsls	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 808e 	beq.w	800a1be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8086 	beq.w	800a1be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	409a      	lsls	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d136      	bne.n	800a138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0216 	bic.w	r2, r2, #22
 800a0d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	695a      	ldr	r2, [r3, #20]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d103      	bne.n	800a0fa <HAL_DMA_IRQHandler+0x1da>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0208 	bic.w	r2, r2, #8
 800a108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a10e:	223f      	movs	r2, #63	; 0x3f
 800a110:	409a      	lsls	r2, r3
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d07d      	beq.n	800a22a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4798      	blx	r3
        }
        return;
 800a136:	e078      	b.n	800a22a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01c      	beq.n	800a180 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d108      	bne.n	800a166 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d030      	beq.n	800a1be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
 800a164:	e02b      	b.n	800a1be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d027      	beq.n	800a1be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	e022      	b.n	800a1be <HAL_DMA_IRQHandler+0x29e>
 800a178:	20000198 	.word	0x20000198
 800a17c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10f      	bne.n	800a1ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0210 	bic.w	r2, r2, #16
 800a19c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d032      	beq.n	800a22c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d022      	beq.n	800a218 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0201 	bic.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	60bb      	str	r3, [r7, #8]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d307      	bcc.n	800a206 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1f2      	bne.n	800a1ea <HAL_DMA_IRQHandler+0x2ca>
 800a204:	e000      	b.n	800a208 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a206:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
 800a228:	e000      	b.n	800a22c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a22a:	bf00      	nop
    }
  }
}
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop

0800a234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2b40      	cmp	r3, #64	; 0x40
 800a260:	d108      	bne.n	800a274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a272:	e007      	b.n	800a284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	60da      	str	r2, [r3, #12]
}
 800a284:	bf00      	nop
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	3b10      	subs	r3, #16
 800a2a0:	4a14      	ldr	r2, [pc, #80]	; (800a2f4 <DMA_CalcBaseAndBitshift+0x64>)
 800a2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a6:	091b      	lsrs	r3, r3, #4
 800a2a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a2aa:	4a13      	ldr	r2, [pc, #76]	; (800a2f8 <DMA_CalcBaseAndBitshift+0x68>)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d909      	bls.n	800a2d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	659a      	str	r2, [r3, #88]	; 0x58
 800a2d0:	e007      	b.n	800a2e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	aaaaaaab 	.word	0xaaaaaaab
 800a2f8:	0800fa28 	.word	0x0800fa28

0800a2fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d11f      	bne.n	800a356 <DMA_CheckFifoParam+0x5a>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d856      	bhi.n	800a3ca <DMA_CheckFifoParam+0xce>
 800a31c:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <DMA_CheckFifoParam+0x28>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a335 	.word	0x0800a335
 800a328:	0800a347 	.word	0x0800a347
 800a32c:	0800a335 	.word	0x0800a335
 800a330:	0800a3cb 	.word	0x0800a3cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d046      	beq.n	800a3ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a344:	e043      	b.n	800a3ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a34e:	d140      	bne.n	800a3d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a354:	e03d      	b.n	800a3d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a35e:	d121      	bne.n	800a3a4 <DMA_CheckFifoParam+0xa8>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b03      	cmp	r3, #3
 800a364:	d837      	bhi.n	800a3d6 <DMA_CheckFifoParam+0xda>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <DMA_CheckFifoParam+0x70>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a37d 	.word	0x0800a37d
 800a370:	0800a383 	.word	0x0800a383
 800a374:	0800a37d 	.word	0x0800a37d
 800a378:	0800a395 	.word	0x0800a395
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	73fb      	strb	r3, [r7, #15]
      break;
 800a380:	e030      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d025      	beq.n	800a3da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a392:	e022      	b.n	800a3da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a39c:	d11f      	bne.n	800a3de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a3a2:	e01c      	b.n	800a3de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d903      	bls.n	800a3b2 <DMA_CheckFifoParam+0xb6>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d003      	beq.n	800a3b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a3b0:	e018      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b6:	e015      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00e      	beq.n	800a3e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c8:	e00b      	b.n	800a3e2 <DMA_CheckFifoParam+0xe6>
      break;
 800a3ca:	bf00      	nop
 800a3cc:	e00a      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a3ce:	bf00      	nop
 800a3d0:	e008      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a3d2:	bf00      	nop
 800a3d4:	e006      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a3d6:	bf00      	nop
 800a3d8:	e004      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a3da:	bf00      	nop
 800a3dc:	e002      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a3de:	bf00      	nop
 800a3e0:	e000      	b.n	800a3e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a3e2:	bf00      	nop
    }
  } 
  
  return status; 
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop

0800a3f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b089      	sub	sp, #36	; 0x24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a402:	2300      	movs	r3, #0
 800a404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a406:	2300      	movs	r3, #0
 800a408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a40a:	2300      	movs	r3, #0
 800a40c:	61fb      	str	r3, [r7, #28]
 800a40e:	e165      	b.n	800a6dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a410:	2201      	movs	r2, #1
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4013      	ands	r3, r2
 800a422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	429a      	cmp	r2, r3
 800a42a:	f040 8154 	bne.w	800a6d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	2b01      	cmp	r3, #1
 800a438:	d005      	beq.n	800a446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a442:	2b02      	cmp	r3, #2
 800a444:	d130      	bne.n	800a4a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	2203      	movs	r2, #3
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	43db      	mvns	r3, r3
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	4013      	ands	r3, r2
 800a45c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a47c:	2201      	movs	r2, #1
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	fa02 f303 	lsl.w	r3, r2, r3
 800a484:	43db      	mvns	r3, r3
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	4013      	ands	r3, r2
 800a48a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	091b      	lsrs	r3, r3, #4
 800a492:	f003 0201 	and.w	r2, r3, #1
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	fa02 f303 	lsl.w	r3, r2, r3
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d017      	beq.n	800a4e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	2203      	movs	r2, #3
 800a4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69ba      	ldr	r2, [r7, #24]
 800a4e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d123      	bne.n	800a538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	08da      	lsrs	r2, r3, #3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3208      	adds	r2, #8
 800a4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	220f      	movs	r2, #15
 800a508:	fa02 f303 	lsl.w	r3, r2, r3
 800a50c:	43db      	mvns	r3, r3
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	4013      	ands	r3, r2
 800a512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	691a      	ldr	r2, [r3, #16]
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	4313      	orrs	r3, r2
 800a528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	08da      	lsrs	r2, r3, #3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3208      	adds	r2, #8
 800a532:	69b9      	ldr	r1, [r7, #24]
 800a534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	2203      	movs	r2, #3
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	43db      	mvns	r3, r3
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	4013      	ands	r3, r2
 800a54e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f003 0203 	and.w	r2, r3, #3
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	fa02 f303 	lsl.w	r3, r2, r3
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	4313      	orrs	r3, r2
 800a564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80ae 	beq.w	800a6d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	4b5d      	ldr	r3, [pc, #372]	; (800a6f4 <HAL_GPIO_Init+0x300>)
 800a580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a582:	4a5c      	ldr	r2, [pc, #368]	; (800a6f4 <HAL_GPIO_Init+0x300>)
 800a584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a588:	6453      	str	r3, [r2, #68]	; 0x44
 800a58a:	4b5a      	ldr	r3, [pc, #360]	; (800a6f4 <HAL_GPIO_Init+0x300>)
 800a58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a596:	4a58      	ldr	r2, [pc, #352]	; (800a6f8 <HAL_GPIO_Init+0x304>)
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	089b      	lsrs	r3, r3, #2
 800a59c:	3302      	adds	r3, #2
 800a59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	220f      	movs	r2, #15
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	43db      	mvns	r3, r3
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a4f      	ldr	r2, [pc, #316]	; (800a6fc <HAL_GPIO_Init+0x308>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d025      	beq.n	800a60e <HAL_GPIO_Init+0x21a>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a4e      	ldr	r2, [pc, #312]	; (800a700 <HAL_GPIO_Init+0x30c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d01f      	beq.n	800a60a <HAL_GPIO_Init+0x216>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a4d      	ldr	r2, [pc, #308]	; (800a704 <HAL_GPIO_Init+0x310>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d019      	beq.n	800a606 <HAL_GPIO_Init+0x212>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a4c      	ldr	r2, [pc, #304]	; (800a708 <HAL_GPIO_Init+0x314>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d013      	beq.n	800a602 <HAL_GPIO_Init+0x20e>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a4b      	ldr	r2, [pc, #300]	; (800a70c <HAL_GPIO_Init+0x318>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d00d      	beq.n	800a5fe <HAL_GPIO_Init+0x20a>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a4a      	ldr	r2, [pc, #296]	; (800a710 <HAL_GPIO_Init+0x31c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d007      	beq.n	800a5fa <HAL_GPIO_Init+0x206>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a49      	ldr	r2, [pc, #292]	; (800a714 <HAL_GPIO_Init+0x320>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d101      	bne.n	800a5f6 <HAL_GPIO_Init+0x202>
 800a5f2:	2306      	movs	r3, #6
 800a5f4:	e00c      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a5f6:	2307      	movs	r3, #7
 800a5f8:	e00a      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a5fa:	2305      	movs	r3, #5
 800a5fc:	e008      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a5fe:	2304      	movs	r3, #4
 800a600:	e006      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a602:	2303      	movs	r3, #3
 800a604:	e004      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a606:	2302      	movs	r3, #2
 800a608:	e002      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <HAL_GPIO_Init+0x21c>
 800a60e:	2300      	movs	r3, #0
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	f002 0203 	and.w	r2, r2, #3
 800a616:	0092      	lsls	r2, r2, #2
 800a618:	4093      	lsls	r3, r2
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a620:	4935      	ldr	r1, [pc, #212]	; (800a6f8 <HAL_GPIO_Init+0x304>)
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	089b      	lsrs	r3, r3, #2
 800a626:	3302      	adds	r3, #2
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a62e:	4b3a      	ldr	r3, [pc, #232]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	43db      	mvns	r3, r3
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	4013      	ands	r3, r2
 800a63c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	4313      	orrs	r3, r2
 800a650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a652:	4a31      	ldr	r2, [pc, #196]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a658:	4b2f      	ldr	r3, [pc, #188]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	43db      	mvns	r3, r3
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	4013      	ands	r3, r2
 800a666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a67c:	4a26      	ldr	r2, [pc, #152]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a682:	4b25      	ldr	r3, [pc, #148]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	43db      	mvns	r3, r3
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	4013      	ands	r3, r2
 800a690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a69e:	69ba      	ldr	r2, [r7, #24]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a6a6:	4a1c      	ldr	r2, [pc, #112]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	43db      	mvns	r3, r3
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a6d0:	4a11      	ldr	r2, [pc, #68]	; (800a718 <HAL_GPIO_Init+0x324>)
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2b0f      	cmp	r3, #15
 800a6e0:	f67f ae96 	bls.w	800a410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	3724      	adds	r7, #36	; 0x24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	40023800 	.word	0x40023800
 800a6f8:	40013800 	.word	0x40013800
 800a6fc:	40020000 	.word	0x40020000
 800a700:	40020400 	.word	0x40020400
 800a704:	40020800 	.word	0x40020800
 800a708:	40020c00 	.word	0x40020c00
 800a70c:	40021000 	.word	0x40021000
 800a710:	40021400 	.word	0x40021400
 800a714:	40021800 	.word	0x40021800
 800a718:	40013c00 	.word	0x40013c00

0800a71c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	887b      	ldrh	r3, [r7, #2]
 800a72e:	4013      	ands	r3, r2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
 800a738:	e001      	b.n	800a73e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	807b      	strh	r3, [r7, #2]
 800a758:	4613      	mov	r3, r2
 800a75a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a75c:	787b      	ldrb	r3, [r7, #1]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a762:	887a      	ldrh	r2, [r7, #2]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a768:	e003      	b.n	800a772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a76a:	887b      	ldrh	r3, [r7, #2]
 800a76c:	041a      	lsls	r2, r3, #16
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	619a      	str	r2, [r3, #24]
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a790:	887a      	ldrh	r2, [r7, #2]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4013      	ands	r3, r2
 800a796:	041a      	lsls	r2, r3, #16
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	43d9      	mvns	r1, r3
 800a79c:	887b      	ldrh	r3, [r7, #2]
 800a79e:	400b      	ands	r3, r1
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	619a      	str	r2, [r3, #24]
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e034      	b.n	800a82e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a7cc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f245 5255 	movw	r2, #21845	; 0x5555
 800a7d6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6852      	ldr	r2, [r2, #4]
 800a7e0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6892      	ldr	r2, [r2, #8]
 800a7ea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a7ec:	f7ff f8a4 	bl	8009938 <HAL_GetTick>
 800a7f0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a7f2:	e00f      	b.n	800a814 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a7f4:	f7ff f8a0 	bl	8009938 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b31      	cmp	r3, #49	; 0x31
 800a800:	d908      	bls.n	800a814 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	e00c      	b.n	800a82e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e8      	bne.n	800a7f4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a82a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a846:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
	...

0800a858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d101      	bne.n	800a86c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0cc      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a86c:	4b68      	ldr	r3, [pc, #416]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 030f 	and.w	r3, r3, #15
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	429a      	cmp	r2, r3
 800a878:	d90c      	bls.n	800a894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a87a:	4b65      	ldr	r3, [pc, #404]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	b2d2      	uxtb	r2, r2
 800a880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a882:	4b63      	ldr	r3, [pc, #396]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d001      	beq.n	800a894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e0b8      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0302 	and.w	r3, r3, #2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d020      	beq.n	800a8e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8ac:	4b59      	ldr	r3, [pc, #356]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	4a58      	ldr	r2, [pc, #352]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a8b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8c4:	4b53      	ldr	r3, [pc, #332]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	4a52      	ldr	r2, [pc, #328]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a8ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8d0:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	494d      	ldr	r1, [pc, #308]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d044      	beq.n	800a978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d107      	bne.n	800a906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8f6:	4b47      	ldr	r3, [pc, #284]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d119      	bne.n	800a936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e07f      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d003      	beq.n	800a916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a912:	2b03      	cmp	r3, #3
 800a914:	d107      	bne.n	800a926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a916:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d109      	bne.n	800a936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e06f      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a926:	4b3b      	ldr	r3, [pc, #236]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e067      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a936:	4b37      	ldr	r3, [pc, #220]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f023 0203 	bic.w	r2, r3, #3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	4934      	ldr	r1, [pc, #208]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a944:	4313      	orrs	r3, r2
 800a946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a948:	f7fe fff6 	bl	8009938 <HAL_GetTick>
 800a94c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a94e:	e00a      	b.n	800a966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a950:	f7fe fff2 	bl	8009938 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95e:	4293      	cmp	r3, r2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e04f      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a966:	4b2b      	ldr	r3, [pc, #172]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f003 020c 	and.w	r2, r3, #12
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	429a      	cmp	r2, r3
 800a976:	d1eb      	bne.n	800a950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a978:	4b25      	ldr	r3, [pc, #148]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d20c      	bcs.n	800a9a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a986:	4b22      	ldr	r3, [pc, #136]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a98e:	4b20      	ldr	r3, [pc, #128]	; (800aa10 <HAL_RCC_ClockConfig+0x1b8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d001      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e032      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d008      	beq.n	800a9be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9ac:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	4916      	ldr	r1, [pc, #88]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9ca:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	490e      	ldr	r1, [pc, #56]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9de:	f000 f855 	bl	800aa8c <HAL_RCC_GetSysClockFreq>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <HAL_RCC_ClockConfig+0x1bc>)
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	490a      	ldr	r1, [pc, #40]	; (800aa18 <HAL_RCC_ClockConfig+0x1c0>)
 800a9f0:	5ccb      	ldrb	r3, [r1, r3]
 800a9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <HAL_RCC_ClockConfig+0x1c4>)
 800a9f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <HAL_RCC_ClockConfig+0x1c8>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe ff56 	bl	80098b0 <HAL_InitTick>

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	40023c00 	.word	0x40023c00
 800aa14:	40023800 	.word	0x40023800
 800aa18:	0800f5c0 	.word	0x0800f5c0
 800aa1c:	20000198 	.word	0x20000198
 800aa20:	200001d0 	.word	0x200001d0

0800aa24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20000198 	.word	0x20000198

0800aa3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa40:	f7ff fff0 	bl	800aa24 <HAL_RCC_GetHCLKFreq>
 800aa44:	4602      	mov	r2, r0
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	0a9b      	lsrs	r3, r3, #10
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	4903      	ldr	r1, [pc, #12]	; (800aa60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa52:	5ccb      	ldrb	r3, [r1, r3]
 800aa54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	0800f5d0 	.word	0x0800f5d0

0800aa64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa68:	f7ff ffdc 	bl	800aa24 <HAL_RCC_GetHCLKFreq>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	0b5b      	lsrs	r3, r3, #13
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	4903      	ldr	r1, [pc, #12]	; (800aa88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa7a:	5ccb      	ldrb	r3, [r1, r3]
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40023800 	.word	0x40023800
 800aa88:	0800f5d0 	.word	0x0800f5d0

0800aa8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa90:	b088      	sub	sp, #32
 800aa92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaa8:	4bce      	ldr	r3, [pc, #824]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f003 030c 	and.w	r3, r3, #12
 800aab0:	2b0c      	cmp	r3, #12
 800aab2:	f200 818d 	bhi.w	800add0 <HAL_RCC_GetSysClockFreq+0x344>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <HAL_RCC_GetSysClockFreq+0x30>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800add1 	.word	0x0800add1
 800aac4:	0800add1 	.word	0x0800add1
 800aac8:	0800add1 	.word	0x0800add1
 800aacc:	0800aaf7 	.word	0x0800aaf7
 800aad0:	0800add1 	.word	0x0800add1
 800aad4:	0800add1 	.word	0x0800add1
 800aad8:	0800add1 	.word	0x0800add1
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800add1 	.word	0x0800add1
 800aae4:	0800add1 	.word	0x0800add1
 800aae8:	0800add1 	.word	0x0800add1
 800aaec:	0800ac71 	.word	0x0800ac71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aaf0:	4bbd      	ldr	r3, [pc, #756]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800aaf2:	61bb      	str	r3, [r7, #24]
       break;
 800aaf4:	e16f      	b.n	800add6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aaf6:	4bbc      	ldr	r3, [pc, #752]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800aaf8:	61bb      	str	r3, [r7, #24]
      break;
 800aafa:	e16c      	b.n	800add6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aafc:	4bb9      	ldr	r3, [pc, #740]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab04:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab06:	4bb7      	ldr	r3, [pc, #732]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d053      	beq.n	800abba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab12:	4bb4      	ldr	r3, [pc, #720]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	099b      	lsrs	r3, r3, #6
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ab22:	f04f 0100 	mov.w	r1, #0
 800ab26:	ea02 0400 	and.w	r4, r2, r0
 800ab2a:	603c      	str	r4, [r7, #0]
 800ab2c:	400b      	ands	r3, r1
 800ab2e:	607b      	str	r3, [r7, #4]
 800ab30:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	f04f 0300 	mov.w	r3, #0
 800ab40:	014b      	lsls	r3, r1, #5
 800ab42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab46:	0142      	lsls	r2, r0, #5
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4623      	mov	r3, r4
 800ab4e:	1ac0      	subs	r0, r0, r3
 800ab50:	462b      	mov	r3, r5
 800ab52:	eb61 0103 	sbc.w	r1, r1, r3
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	018b      	lsls	r3, r1, #6
 800ab60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab64:	0182      	lsls	r2, r0, #6
 800ab66:	1a12      	subs	r2, r2, r0
 800ab68:	eb63 0301 	sbc.w	r3, r3, r1
 800ab6c:	f04f 0000 	mov.w	r0, #0
 800ab70:	f04f 0100 	mov.w	r1, #0
 800ab74:	00d9      	lsls	r1, r3, #3
 800ab76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab7a:	00d0      	lsls	r0, r2, #3
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4621      	mov	r1, r4
 800ab82:	1852      	adds	r2, r2, r1
 800ab84:	4629      	mov	r1, r5
 800ab86:	eb43 0101 	adc.w	r1, r3, r1
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	f04f 0000 	mov.w	r0, #0
 800ab90:	f04f 0100 	mov.w	r1, #0
 800ab94:	0299      	lsls	r1, r3, #10
 800ab96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ab9a:	0290      	lsls	r0, r2, #10
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4610      	mov	r0, r2
 800aba2:	4619      	mov	r1, r3
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f04f 0300 	mov.w	r3, #0
 800abac:	f7f6 f830 	bl	8000c10 <__aeabi_uldivmod>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4613      	mov	r3, r2
 800abb6:	61fb      	str	r3, [r7, #28]
 800abb8:	e04c      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abba:	4b8a      	ldr	r3, [pc, #552]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	099b      	lsrs	r3, r3, #6
 800abc0:	461a      	mov	r2, r3
 800abc2:	f04f 0300 	mov.w	r3, #0
 800abc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800abca:	f04f 0100 	mov.w	r1, #0
 800abce:	ea02 0a00 	and.w	sl, r2, r0
 800abd2:	ea03 0b01 	and.w	fp, r3, r1
 800abd6:	4650      	mov	r0, sl
 800abd8:	4659      	mov	r1, fp
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	014b      	lsls	r3, r1, #5
 800abe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800abe8:	0142      	lsls	r2, r0, #5
 800abea:	4610      	mov	r0, r2
 800abec:	4619      	mov	r1, r3
 800abee:	ebb0 000a 	subs.w	r0, r0, sl
 800abf2:	eb61 010b 	sbc.w	r1, r1, fp
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 0300 	mov.w	r3, #0
 800abfe:	018b      	lsls	r3, r1, #6
 800ac00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac04:	0182      	lsls	r2, r0, #6
 800ac06:	1a12      	subs	r2, r2, r0
 800ac08:	eb63 0301 	sbc.w	r3, r3, r1
 800ac0c:	f04f 0000 	mov.w	r0, #0
 800ac10:	f04f 0100 	mov.w	r1, #0
 800ac14:	00d9      	lsls	r1, r3, #3
 800ac16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac1a:	00d0      	lsls	r0, r2, #3
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	eb12 020a 	adds.w	r2, r2, sl
 800ac24:	eb43 030b 	adc.w	r3, r3, fp
 800ac28:	f04f 0000 	mov.w	r0, #0
 800ac2c:	f04f 0100 	mov.w	r1, #0
 800ac30:	0299      	lsls	r1, r3, #10
 800ac32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ac36:	0290      	lsls	r0, r2, #10
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f04f 0300 	mov.w	r3, #0
 800ac48:	f7f5 ffe2 	bl	8000c10 <__aeabi_uldivmod>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4613      	mov	r3, r2
 800ac52:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac54:	4b63      	ldr	r3, [pc, #396]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	0c1b      	lsrs	r3, r3, #16
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	3301      	adds	r3, #1
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	61bb      	str	r3, [r7, #24]
      break;
 800ac6e:	e0b2      	b.n	800add6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac70:	4b5c      	ldr	r3, [pc, #368]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac78:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac7a:	4b5a      	ldr	r3, [pc, #360]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d04d      	beq.n	800ad22 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac86:	4b57      	ldr	r3, [pc, #348]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	099b      	lsrs	r3, r3, #6
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac96:	f04f 0100 	mov.w	r1, #0
 800ac9a:	ea02 0800 	and.w	r8, r2, r0
 800ac9e:	ea03 0901 	and.w	r9, r3, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f04f 0200 	mov.w	r2, #0
 800acaa:	f04f 0300 	mov.w	r3, #0
 800acae:	014b      	lsls	r3, r1, #5
 800acb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800acb4:	0142      	lsls	r2, r0, #5
 800acb6:	4610      	mov	r0, r2
 800acb8:	4619      	mov	r1, r3
 800acba:	ebb0 0008 	subs.w	r0, r0, r8
 800acbe:	eb61 0109 	sbc.w	r1, r1, r9
 800acc2:	f04f 0200 	mov.w	r2, #0
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	018b      	lsls	r3, r1, #6
 800accc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800acd0:	0182      	lsls	r2, r0, #6
 800acd2:	1a12      	subs	r2, r2, r0
 800acd4:	eb63 0301 	sbc.w	r3, r3, r1
 800acd8:	f04f 0000 	mov.w	r0, #0
 800acdc:	f04f 0100 	mov.w	r1, #0
 800ace0:	00d9      	lsls	r1, r3, #3
 800ace2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ace6:	00d0      	lsls	r0, r2, #3
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	eb12 0208 	adds.w	r2, r2, r8
 800acf0:	eb43 0309 	adc.w	r3, r3, r9
 800acf4:	f04f 0000 	mov.w	r0, #0
 800acf8:	f04f 0100 	mov.w	r1, #0
 800acfc:	0299      	lsls	r1, r3, #10
 800acfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad02:	0290      	lsls	r0, r2, #10
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	f7f5 ff7c 	bl	8000c10 <__aeabi_uldivmod>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	e04a      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad22:	4b30      	ldr	r3, [pc, #192]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	099b      	lsrs	r3, r3, #6
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ad32:	f04f 0100 	mov.w	r1, #0
 800ad36:	ea02 0400 	and.w	r4, r2, r0
 800ad3a:	ea03 0501 	and.w	r5, r3, r1
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	f04f 0200 	mov.w	r2, #0
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	014b      	lsls	r3, r1, #5
 800ad4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad50:	0142      	lsls	r2, r0, #5
 800ad52:	4610      	mov	r0, r2
 800ad54:	4619      	mov	r1, r3
 800ad56:	1b00      	subs	r0, r0, r4
 800ad58:	eb61 0105 	sbc.w	r1, r1, r5
 800ad5c:	f04f 0200 	mov.w	r2, #0
 800ad60:	f04f 0300 	mov.w	r3, #0
 800ad64:	018b      	lsls	r3, r1, #6
 800ad66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad6a:	0182      	lsls	r2, r0, #6
 800ad6c:	1a12      	subs	r2, r2, r0
 800ad6e:	eb63 0301 	sbc.w	r3, r3, r1
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f04f 0100 	mov.w	r1, #0
 800ad7a:	00d9      	lsls	r1, r3, #3
 800ad7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad80:	00d0      	lsls	r0, r2, #3
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	1912      	adds	r2, r2, r4
 800ad88:	eb45 0303 	adc.w	r3, r5, r3
 800ad8c:	f04f 0000 	mov.w	r0, #0
 800ad90:	f04f 0100 	mov.w	r1, #0
 800ad94:	0299      	lsls	r1, r3, #10
 800ad96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad9a:	0290      	lsls	r0, r2, #10
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4610      	mov	r0, r2
 800ada2:	4619      	mov	r1, r3
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	f7f5 ff30 	bl	8000c10 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4613      	mov	r3, r2
 800adb6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	0f1b      	lsrs	r3, r3, #28
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adcc:	61bb      	str	r3, [r7, #24]
      break;
 800adce:	e002      	b.n	800add6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800add2:	61bb      	str	r3, [r7, #24]
      break;
 800add4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800add6:	69bb      	ldr	r3, [r7, #24]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ade2:	bf00      	nop
 800ade4:	40023800 	.word	0x40023800
 800ade8:	00f42400 	.word	0x00f42400

0800adec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e28d      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8083 	beq.w	800af12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae0c:	4b94      	ldr	r3, [pc, #592]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f003 030c 	and.w	r3, r3, #12
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d019      	beq.n	800ae4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae18:	4b91      	ldr	r3, [pc, #580]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d106      	bne.n	800ae32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae24:	4b8e      	ldr	r3, [pc, #568]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae30:	d00c      	beq.n	800ae4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae32:	4b8b      	ldr	r3, [pc, #556]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae3a:	2b0c      	cmp	r3, #12
 800ae3c:	d112      	bne.n	800ae64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae3e:	4b88      	ldr	r3, [pc, #544]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae4a:	d10b      	bne.n	800ae64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae4c:	4b84      	ldr	r3, [pc, #528]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05b      	beq.n	800af10 <HAL_RCC_OscConfig+0x124>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d157      	bne.n	800af10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e25a      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6c:	d106      	bne.n	800ae7c <HAL_RCC_OscConfig+0x90>
 800ae6e:	4b7c      	ldr	r3, [pc, #496]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a7b      	ldr	r2, [pc, #492]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	e01d      	b.n	800aeb8 <HAL_RCC_OscConfig+0xcc>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae84:	d10c      	bne.n	800aea0 <HAL_RCC_OscConfig+0xb4>
 800ae86:	4b76      	ldr	r3, [pc, #472]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a75      	ldr	r2, [pc, #468]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	4b73      	ldr	r3, [pc, #460]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a72      	ldr	r2, [pc, #456]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800ae98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	e00b      	b.n	800aeb8 <HAL_RCC_OscConfig+0xcc>
 800aea0:	4b6f      	ldr	r3, [pc, #444]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a6e      	ldr	r2, [pc, #440]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	4b6c      	ldr	r3, [pc, #432]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a6b      	ldr	r2, [pc, #428]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aeb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d013      	beq.n	800aee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec0:	f7fe fd3a 	bl	8009938 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aec8:	f7fe fd36 	bl	8009938 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b64      	cmp	r3, #100	; 0x64
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e21f      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aeda:	4b61      	ldr	r3, [pc, #388]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <HAL_RCC_OscConfig+0xdc>
 800aee6:	e014      	b.n	800af12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee8:	f7fe fd26 	bl	8009938 <HAL_GetTick>
 800aeec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aeee:	e008      	b.n	800af02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aef0:	f7fe fd22 	bl	8009938 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	2b64      	cmp	r3, #100	; 0x64
 800aefc:	d901      	bls.n	800af02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e20b      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af02:	4b57      	ldr	r3, [pc, #348]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1f0      	bne.n	800aef0 <HAL_RCC_OscConfig+0x104>
 800af0e:	e000      	b.n	800af12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d06f      	beq.n	800affe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af1e:	4b50      	ldr	r3, [pc, #320]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f003 030c 	and.w	r3, r3, #12
 800af26:	2b00      	cmp	r3, #0
 800af28:	d017      	beq.n	800af5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af2a:	4b4d      	ldr	r3, [pc, #308]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af32:	2b08      	cmp	r3, #8
 800af34:	d105      	bne.n	800af42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af36:	4b4a      	ldr	r3, [pc, #296]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00b      	beq.n	800af5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af42:	4b47      	ldr	r3, [pc, #284]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af4a:	2b0c      	cmp	r3, #12
 800af4c:	d11c      	bne.n	800af88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af4e:	4b44      	ldr	r3, [pc, #272]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d116      	bne.n	800af88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af5a:	4b41      	ldr	r3, [pc, #260]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d005      	beq.n	800af72 <HAL_RCC_OscConfig+0x186>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d001      	beq.n	800af72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e1d3      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af72:	4b3b      	ldr	r3, [pc, #236]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	4937      	ldr	r1, [pc, #220]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800af82:	4313      	orrs	r3, r2
 800af84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af86:	e03a      	b.n	800affe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d020      	beq.n	800afd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af90:	4b34      	ldr	r3, [pc, #208]	; (800b064 <HAL_RCC_OscConfig+0x278>)
 800af92:	2201      	movs	r2, #1
 800af94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af96:	f7fe fccf 	bl	8009938 <HAL_GetTick>
 800af9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af9c:	e008      	b.n	800afb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af9e:	f7fe fccb 	bl	8009938 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d901      	bls.n	800afb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e1b4      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afb0:	4b2b      	ldr	r3, [pc, #172]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0302 	and.w	r3, r3, #2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0f0      	beq.n	800af9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afbc:	4b28      	ldr	r3, [pc, #160]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4925      	ldr	r1, [pc, #148]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	600b      	str	r3, [r1, #0]
 800afd0:	e015      	b.n	800affe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afd2:	4b24      	ldr	r3, [pc, #144]	; (800b064 <HAL_RCC_OscConfig+0x278>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd8:	f7fe fcae 	bl	8009938 <HAL_GetTick>
 800afdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afde:	e008      	b.n	800aff2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afe0:	f7fe fcaa 	bl	8009938 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d901      	bls.n	800aff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e193      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aff2:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0302 	and.w	r3, r3, #2
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f0      	bne.n	800afe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0308 	and.w	r3, r3, #8
 800b006:	2b00      	cmp	r3, #0
 800b008:	d036      	beq.n	800b078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d016      	beq.n	800b040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <HAL_RCC_OscConfig+0x27c>)
 800b014:	2201      	movs	r2, #1
 800b016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b018:	f7fe fc8e 	bl	8009938 <HAL_GetTick>
 800b01c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b01e:	e008      	b.n	800b032 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b020:	f7fe fc8a 	bl	8009938 <HAL_GetTick>
 800b024:	4602      	mov	r2, r0
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d901      	bls.n	800b032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e173      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <HAL_RCC_OscConfig+0x274>)
 800b034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0f0      	beq.n	800b020 <HAL_RCC_OscConfig+0x234>
 800b03e:	e01b      	b.n	800b078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <HAL_RCC_OscConfig+0x27c>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b046:	f7fe fc77 	bl	8009938 <HAL_GetTick>
 800b04a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b04c:	e00e      	b.n	800b06c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b04e:	f7fe fc73 	bl	8009938 <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d907      	bls.n	800b06c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e15c      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
 800b060:	40023800 	.word	0x40023800
 800b064:	42470000 	.word	0x42470000
 800b068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b06c:	4b8a      	ldr	r3, [pc, #552]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b070:	f003 0302 	and.w	r3, r3, #2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1ea      	bne.n	800b04e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 8097 	beq.w	800b1b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b086:	2300      	movs	r3, #0
 800b088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b08a:	4b83      	ldr	r3, [pc, #524]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10f      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b096:	2300      	movs	r3, #0
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	4b7f      	ldr	r3, [pc, #508]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	4a7e      	ldr	r2, [pc, #504]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0a6:	4b7c      	ldr	r3, [pc, #496]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ae:	60bb      	str	r3, [r7, #8]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0b6:	4b79      	ldr	r3, [pc, #484]	; (800b29c <HAL_RCC_OscConfig+0x4b0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d118      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0c2:	4b76      	ldr	r3, [pc, #472]	; (800b29c <HAL_RCC_OscConfig+0x4b0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a75      	ldr	r2, [pc, #468]	; (800b29c <HAL_RCC_OscConfig+0x4b0>)
 800b0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0ce:	f7fe fc33 	bl	8009938 <HAL_GetTick>
 800b0d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0d4:	e008      	b.n	800b0e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0d6:	f7fe fc2f 	bl	8009938 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d901      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e118      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0e8:	4b6c      	ldr	r3, [pc, #432]	; (800b29c <HAL_RCC_OscConfig+0x4b0>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d0f0      	beq.n	800b0d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d106      	bne.n	800b10a <HAL_RCC_OscConfig+0x31e>
 800b0fc:	4b66      	ldr	r3, [pc, #408]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b100:	4a65      	ldr	r2, [pc, #404]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	6713      	str	r3, [r2, #112]	; 0x70
 800b108:	e01c      	b.n	800b144 <HAL_RCC_OscConfig+0x358>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	2b05      	cmp	r3, #5
 800b110:	d10c      	bne.n	800b12c <HAL_RCC_OscConfig+0x340>
 800b112:	4b61      	ldr	r3, [pc, #388]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b116:	4a60      	ldr	r2, [pc, #384]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b118:	f043 0304 	orr.w	r3, r3, #4
 800b11c:	6713      	str	r3, [r2, #112]	; 0x70
 800b11e:	4b5e      	ldr	r3, [pc, #376]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b122:	4a5d      	ldr	r2, [pc, #372]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b124:	f043 0301 	orr.w	r3, r3, #1
 800b128:	6713      	str	r3, [r2, #112]	; 0x70
 800b12a:	e00b      	b.n	800b144 <HAL_RCC_OscConfig+0x358>
 800b12c:	4b5a      	ldr	r3, [pc, #360]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b130:	4a59      	ldr	r2, [pc, #356]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b132:	f023 0301 	bic.w	r3, r3, #1
 800b136:	6713      	str	r3, [r2, #112]	; 0x70
 800b138:	4b57      	ldr	r3, [pc, #348]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13c:	4a56      	ldr	r2, [pc, #344]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b13e:	f023 0304 	bic.w	r3, r3, #4
 800b142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d015      	beq.n	800b178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b14c:	f7fe fbf4 	bl	8009938 <HAL_GetTick>
 800b150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b152:	e00a      	b.n	800b16a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b154:	f7fe fbf0 	bl	8009938 <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b162:	4293      	cmp	r3, r2
 800b164:	d901      	bls.n	800b16a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e0d7      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b16a:	4b4b      	ldr	r3, [pc, #300]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0ee      	beq.n	800b154 <HAL_RCC_OscConfig+0x368>
 800b176:	e014      	b.n	800b1a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b178:	f7fe fbde 	bl	8009938 <HAL_GetTick>
 800b17c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b17e:	e00a      	b.n	800b196 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b180:	f7fe fbda 	bl	8009938 <HAL_GetTick>
 800b184:	4602      	mov	r2, r0
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b18e:	4293      	cmp	r3, r2
 800b190:	d901      	bls.n	800b196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e0c1      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b196:	4b40      	ldr	r3, [pc, #256]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19a:	f003 0302 	and.w	r3, r3, #2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1ee      	bne.n	800b180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d105      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1a8:	4b3b      	ldr	r3, [pc, #236]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	4a3a      	ldr	r2, [pc, #232]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b1ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80ad 	beq.w	800b318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1be:	4b36      	ldr	r3, [pc, #216]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 030c 	and.w	r3, r3, #12
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d060      	beq.n	800b28c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d145      	bne.n	800b25e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1d2:	4b33      	ldr	r3, [pc, #204]	; (800b2a0 <HAL_RCC_OscConfig+0x4b4>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d8:	f7fe fbae 	bl	8009938 <HAL_GetTick>
 800b1dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1de:	e008      	b.n	800b1f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1e0:	f7fe fbaa 	bl	8009938 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e093      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1f2:	4b29      	ldr	r3, [pc, #164]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1f0      	bne.n	800b1e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	69da      	ldr	r2, [r3, #28]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	019b      	lsls	r3, r3, #6
 800b20e:	431a      	orrs	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b214:	085b      	lsrs	r3, r3, #1
 800b216:	3b01      	subs	r3, #1
 800b218:	041b      	lsls	r3, r3, #16
 800b21a:	431a      	orrs	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	061b      	lsls	r3, r3, #24
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b228:	071b      	lsls	r3, r3, #28
 800b22a:	491b      	ldr	r1, [pc, #108]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b22c:	4313      	orrs	r3, r2
 800b22e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b230:	4b1b      	ldr	r3, [pc, #108]	; (800b2a0 <HAL_RCC_OscConfig+0x4b4>)
 800b232:	2201      	movs	r2, #1
 800b234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b236:	f7fe fb7f 	bl	8009938 <HAL_GetTick>
 800b23a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b23c:	e008      	b.n	800b250 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b23e:	f7fe fb7b 	bl	8009938 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d901      	bls.n	800b250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e064      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b250:	4b11      	ldr	r3, [pc, #68]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0f0      	beq.n	800b23e <HAL_RCC_OscConfig+0x452>
 800b25c:	e05c      	b.n	800b318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b25e:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <HAL_RCC_OscConfig+0x4b4>)
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b264:	f7fe fb68 	bl	8009938 <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b26a:	e008      	b.n	800b27e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b26c:	f7fe fb64 	bl	8009938 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	2b02      	cmp	r3, #2
 800b278:	d901      	bls.n	800b27e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e04d      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b27e:	4b06      	ldr	r3, [pc, #24]	; (800b298 <HAL_RCC_OscConfig+0x4ac>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f0      	bne.n	800b26c <HAL_RCC_OscConfig+0x480>
 800b28a:	e045      	b.n	800b318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d107      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e040      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
 800b298:	40023800 	.word	0x40023800
 800b29c:	40007000 	.word	0x40007000
 800b2a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2a4:	4b1f      	ldr	r3, [pc, #124]	; (800b324 <HAL_RCC_OscConfig+0x538>)
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d030      	beq.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d129      	bne.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d122      	bne.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d119      	bne.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d10f      	bne.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b300:	429a      	cmp	r2, r3
 800b302:	d107      	bne.n	800b314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b310:	429a      	cmp	r2, r3
 800b312:	d001      	beq.n	800b318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e000      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	40023800 	.word	0x40023800

0800b328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e07b      	b.n	800b432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d108      	bne.n	800b354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b34a:	d009      	beq.n	800b360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	61da      	str	r2, [r3, #28]
 800b352:	e005      	b.n	800b360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fa ff22 	bl	80061c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f003 0302 	and.w	r3, r3, #2
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e4:	ea42 0103 	orr.w	r1, r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	0c1b      	lsrs	r3, r3, #16
 800b3fe:	f003 0104 	and.w	r1, r3, #4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	f003 0210 	and.w	r2, r3, #16
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69da      	ldr	r2, [r3, #28]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b088      	sub	sp, #32
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b454:	2b01      	cmp	r3, #1
 800b456:	d101      	bne.n	800b45c <HAL_SPI_Transmit+0x22>
 800b458:	2302      	movs	r3, #2
 800b45a:	e126      	b.n	800b6aa <HAL_SPI_Transmit+0x270>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b464:	f7fe fa68 	bl	8009938 <HAL_GetTick>
 800b468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b46a:	88fb      	ldrh	r3, [r7, #6]
 800b46c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b01      	cmp	r3, #1
 800b478:	d002      	beq.n	800b480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b47a:	2302      	movs	r3, #2
 800b47c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b47e:	e10b      	b.n	800b698 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_SPI_Transmit+0x52>
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b490:	e102      	b.n	800b698 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2203      	movs	r2, #3
 800b496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	88fa      	ldrh	r2, [r7, #6]
 800b4aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	88fa      	ldrh	r2, [r7, #6]
 800b4b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d8:	d10f      	bne.n	800b4fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b504:	2b40      	cmp	r3, #64	; 0x40
 800b506:	d007      	beq.n	800b518 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b520:	d14b      	bne.n	800b5ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <HAL_SPI_Transmit+0xf6>
 800b52a:	8afb      	ldrh	r3, [r7, #22]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d13e      	bne.n	800b5ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b534:	881a      	ldrh	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	1c9a      	adds	r2, r3, #2
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	3b01      	subs	r3, #1
 800b54e:	b29a      	uxth	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b554:	e02b      	b.n	800b5ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b02      	cmp	r3, #2
 800b562:	d112      	bne.n	800b58a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b568:	881a      	ldrh	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b574:	1c9a      	adds	r2, r3, #2
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b57e:	b29b      	uxth	r3, r3
 800b580:	3b01      	subs	r3, #1
 800b582:	b29a      	uxth	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	86da      	strh	r2, [r3, #54]	; 0x36
 800b588:	e011      	b.n	800b5ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b58a:	f7fe f9d5 	bl	8009938 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	683a      	ldr	r2, [r7, #0]
 800b596:	429a      	cmp	r2, r3
 800b598:	d803      	bhi.n	800b5a2 <HAL_SPI_Transmit+0x168>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a0:	d102      	bne.n	800b5a8 <HAL_SPI_Transmit+0x16e>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b5ac:	e074      	b.n	800b698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1ce      	bne.n	800b556 <HAL_SPI_Transmit+0x11c>
 800b5b8:	e04c      	b.n	800b654 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <HAL_SPI_Transmit+0x18e>
 800b5c2:	8afb      	ldrh	r3, [r7, #22]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d140      	bne.n	800b64a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b5ee:	e02c      	b.n	800b64a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d113      	bne.n	800b626 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	7812      	ldrb	r2, [r2, #0]
 800b60a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	86da      	strh	r2, [r3, #54]	; 0x36
 800b624:	e011      	b.n	800b64a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b626:	f7fe f987 	bl	8009938 <HAL_GetTick>
 800b62a:	4602      	mov	r2, r0
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d803      	bhi.n	800b63e <HAL_SPI_Transmit+0x204>
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63c:	d102      	bne.n	800b644 <HAL_SPI_Transmit+0x20a>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b648:	e026      	b.n	800b698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1cd      	bne.n	800b5f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 fbcb 	bl	800bdf4 <SPI_EndRxTxTransaction>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2220      	movs	r2, #32
 800b668:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b672:	2300      	movs	r3, #0
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	613b      	str	r3, [r7, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	613b      	str	r3, [r7, #16]
 800b686:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	77fb      	strb	r3, [r7, #31]
 800b694:	e000      	b.n	800b698 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3720      	adds	r7, #32
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b088      	sub	sp, #32
 800b6b6:	af02      	add	r7, sp, #8
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	603b      	str	r3, [r7, #0]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6ce:	d112      	bne.n	800b6f6 <HAL_SPI_Receive+0x44>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10e      	bne.n	800b6f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b6e0:	88fa      	ldrh	r2, [r7, #6]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 f8f1 	bl	800b8d4 <HAL_SPI_TransmitReceive>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	e0ea      	b.n	800b8cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d101      	bne.n	800b704 <HAL_SPI_Receive+0x52>
 800b700:	2302      	movs	r3, #2
 800b702:	e0e3      	b.n	800b8cc <HAL_SPI_Receive+0x21a>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b70c:	f7fe f914 	bl	8009938 <HAL_GetTick>
 800b710:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d002      	beq.n	800b724 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b71e:	2302      	movs	r3, #2
 800b720:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b722:	e0ca      	b.n	800b8ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <HAL_SPI_Receive+0x7e>
 800b72a:	88fb      	ldrh	r3, [r7, #6]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d102      	bne.n	800b736 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b734:	e0c1      	b.n	800b8ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2204      	movs	r2, #4
 800b73a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	88fa      	ldrh	r2, [r7, #6]
 800b74e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	88fa      	ldrh	r2, [r7, #6]
 800b754:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b77c:	d10f      	bne.n	800b79e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b78c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b79c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a8:	2b40      	cmp	r3, #64	; 0x40
 800b7aa:	d007      	beq.n	800b7bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d162      	bne.n	800b88a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b7c4:	e02e      	b.n	800b824 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d115      	bne.n	800b800 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f103 020c 	add.w	r2, r3, #12
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	7812      	ldrb	r2, [r2, #0]
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7fe:	e011      	b.n	800b824 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b800:	f7fe f89a 	bl	8009938 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d803      	bhi.n	800b818 <HAL_SPI_Receive+0x166>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d102      	bne.n	800b81e <HAL_SPI_Receive+0x16c>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b822:	e04a      	b.n	800b8ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1cb      	bne.n	800b7c6 <HAL_SPI_Receive+0x114>
 800b82e:	e031      	b.n	800b894 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d113      	bne.n	800b866 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68da      	ldr	r2, [r3, #12]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	b292      	uxth	r2, r2
 800b84a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b850:	1c9a      	adds	r2, r3, #2
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29a      	uxth	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b864:	e011      	b.n	800b88a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b866:	f7fe f867 	bl	8009938 <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	429a      	cmp	r2, r3
 800b874:	d803      	bhi.n	800b87e <HAL_SPI_Receive+0x1cc>
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d102      	bne.n	800b884 <HAL_SPI_Receive+0x1d2>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d102      	bne.n	800b88a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b888:	e017      	b.n	800b8ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b88e:	b29b      	uxth	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1cd      	bne.n	800b830 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fa45 	bl	800bd28 <SPI_EndRxTransaction>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	75fb      	strb	r3, [r7, #23]
 800b8b6:	e000      	b.n	800b8ba <HAL_SPI_Receive+0x208>
  }

error :
 800b8b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	; 0x30
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_SPI_TransmitReceive+0x26>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e18a      	b.n	800bc10 <HAL_SPI_TransmitReceive+0x33c>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b902:	f7fe f819 	bl	8009938 <HAL_GetTick>
 800b906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b90e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b918:	887b      	ldrh	r3, [r7, #2]
 800b91a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b91c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b920:	2b01      	cmp	r3, #1
 800b922:	d00f      	beq.n	800b944 <HAL_SPI_TransmitReceive+0x70>
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b92a:	d107      	bne.n	800b93c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <HAL_SPI_TransmitReceive+0x68>
 800b934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d003      	beq.n	800b944 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b93c:	2302      	movs	r3, #2
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b942:	e15b      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d005      	beq.n	800b956 <HAL_SPI_TransmitReceive+0x82>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <HAL_SPI_TransmitReceive+0x82>
 800b950:	887b      	ldrh	r3, [r7, #2]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d103      	bne.n	800b95e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b95c:	e14e      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b04      	cmp	r3, #4
 800b968:	d003      	beq.n	800b972 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2205      	movs	r2, #5
 800b96e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	887a      	ldrh	r2, [r7, #2]
 800b982:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	887a      	ldrh	r2, [r7, #2]
 800b988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	887a      	ldrh	r2, [r7, #2]
 800b994:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	887a      	ldrh	r2, [r7, #2]
 800b99a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b2:	2b40      	cmp	r3, #64	; 0x40
 800b9b4:	d007      	beq.n	800b9c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ce:	d178      	bne.n	800bac2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <HAL_SPI_TransmitReceive+0x10a>
 800b9d8:	8b7b      	ldrh	r3, [r7, #26]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d166      	bne.n	800baac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e2:	881a      	ldrh	r2, [r3, #0]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ee:	1c9a      	adds	r2, r3, #2
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba02:	e053      	b.n	800baac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 0302 	and.w	r3, r3, #2
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d11b      	bne.n	800ba4a <HAL_SPI_TransmitReceive+0x176>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d016      	beq.n	800ba4a <HAL_SPI_TransmitReceive+0x176>
 800ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d113      	bne.n	800ba4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba26:	881a      	ldrh	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	1c9a      	adds	r2, r3, #2
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d119      	bne.n	800ba8c <HAL_SPI_TransmitReceive+0x1b8>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d014      	beq.n	800ba8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68da      	ldr	r2, [r3, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba74:	1c9a      	adds	r2, r3, #2
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	3b01      	subs	r3, #1
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba8c:	f7fd ff54 	bl	8009938 <HAL_GetTick>
 800ba90:	4602      	mov	r2, r0
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d807      	bhi.n	800baac <HAL_SPI_TransmitReceive+0x1d8>
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d003      	beq.n	800baac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800baaa:	e0a7      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1a6      	bne.n	800ba04 <HAL_SPI_TransmitReceive+0x130>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1a1      	bne.n	800ba04 <HAL_SPI_TransmitReceive+0x130>
 800bac0:	e07c      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <HAL_SPI_TransmitReceive+0x1fc>
 800baca:	8b7b      	ldrh	r3, [r7, #26]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d16b      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	330c      	adds	r3, #12
 800bada:	7812      	ldrb	r2, [r2, #0]
 800badc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baf6:	e057      	b.n	800bba8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d11c      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x26c>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d017      	beq.n	800bb40 <HAL_SPI_TransmitReceive+0x26c>
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d114      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d119      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x2ae>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d014      	beq.n	800bb82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	b2d2      	uxtb	r2, r2
 800bb64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb82:	f7fd fed9 	bl	8009938 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d803      	bhi.n	800bb9a <HAL_SPI_TransmitReceive+0x2c6>
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb98:	d102      	bne.n	800bba0 <HAL_SPI_TransmitReceive+0x2cc>
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d103      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bba6:	e029      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1a2      	bne.n	800baf8 <HAL_SPI_TransmitReceive+0x224>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d19d      	bne.n	800baf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 f917 	bl	800bdf4 <SPI_EndRxTxTransaction>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d006      	beq.n	800bbda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bbd8:	e010      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10b      	bne.n	800bbfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	617b      	str	r3, [r7, #20]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	617b      	str	r3, [r7, #20]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	e000      	b.n	800bbfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bbfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3730      	adds	r7, #48	; 0x30
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc28:	f7fd fe86 	bl	8009938 <HAL_GetTick>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	1a9b      	subs	r3, r3, r2
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	4413      	add	r3, r2
 800bc36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc38:	f7fd fe7e 	bl	8009938 <HAL_GetTick>
 800bc3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc3e:	4b39      	ldr	r3, [pc, #228]	; (800bd24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	015b      	lsls	r3, r3, #5
 800bc44:	0d1b      	lsrs	r3, r3, #20
 800bc46:	69fa      	ldr	r2, [r7, #28]
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc4e:	e054      	b.n	800bcfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc56:	d050      	beq.n	800bcfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc58:	f7fd fe6e 	bl	8009938 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d902      	bls.n	800bc6e <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d13d      	bne.n	800bcea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc86:	d111      	bne.n	800bcac <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc90:	d004      	beq.n	800bc9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc9a:	d107      	bne.n	800bcac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcb4:	d10f      	bne.n	800bcd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bcd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e017      	b.n	800bd1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4013      	ands	r3, r2
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	bf0c      	ite	eq
 800bd0a:	2301      	moveq	r3, #1
 800bd0c:	2300      	movne	r3, #0
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	461a      	mov	r2, r3
 800bd12:	79fb      	ldrb	r3, [r7, #7]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d19b      	bne.n	800bc50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3720      	adds	r7, #32
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000198 	.word	0x20000198

0800bd28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd3c:	d111      	bne.n	800bd62 <SPI_EndRxTransaction+0x3a>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd46:	d004      	beq.n	800bd52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd50:	d107      	bne.n	800bd62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd6a:	d12a      	bne.n	800bdc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd74:	d012      	beq.n	800bd9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2180      	movs	r1, #128	; 0x80
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff ff49 	bl	800bc18 <SPI_WaitFlagStateUntilTimeout>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d02d      	beq.n	800bde8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd90:	f043 0220 	orr.w	r2, r3, #32
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e026      	b.n	800bdea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2200      	movs	r2, #0
 800bda4:	2101      	movs	r1, #1
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff ff36 	bl	800bc18 <SPI_WaitFlagStateUntilTimeout>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01a      	beq.n	800bde8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	f043 0220 	orr.w	r2, r3, #32
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e013      	b.n	800bdea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2101      	movs	r1, #1
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7ff ff23 	bl	800bc18 <SPI_WaitFlagStateUntilTimeout>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d007      	beq.n	800bde8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bddc:	f043 0220 	orr.w	r2, r3, #32
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e000      	b.n	800bdea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be00:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <SPI_EndRxTxTransaction+0x7c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a1b      	ldr	r2, [pc, #108]	; (800be74 <SPI_EndRxTxTransaction+0x80>)
 800be06:	fba2 2303 	umull	r2, r3, r2, r3
 800be0a:	0d5b      	lsrs	r3, r3, #21
 800be0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be10:	fb02 f303 	mul.w	r3, r2, r3
 800be14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be1e:	d112      	bne.n	800be46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	2180      	movs	r1, #128	; 0x80
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff fef4 	bl	800bc18 <SPI_WaitFlagStateUntilTimeout>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d016      	beq.n	800be64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be3a:	f043 0220 	orr.w	r2, r3, #32
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e00f      	b.n	800be66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00a      	beq.n	800be62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	3b01      	subs	r3, #1
 800be50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be5c:	2b80      	cmp	r3, #128	; 0x80
 800be5e:	d0f2      	beq.n	800be46 <SPI_EndRxTxTransaction+0x52>
 800be60:	e000      	b.n	800be64 <SPI_EndRxTxTransaction+0x70>
        break;
 800be62:	bf00      	nop
  }

  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000198 	.word	0x20000198
 800be74:	165e9f81 	.word	0x165e9f81

0800be78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e041      	b.n	800bf0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7fa fa46 	bl	8006330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	f000 fd52 	bl	800c960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d001      	beq.n	800bf30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e046      	b.n	800bfbe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a23      	ldr	r2, [pc, #140]	; (800bfcc <HAL_TIM_Base_Start+0xb4>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d022      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4a:	d01d      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <HAL_TIM_Base_Start+0xb8>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d018      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a1e      	ldr	r2, [pc, #120]	; (800bfd4 <HAL_TIM_Base_Start+0xbc>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d013      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a1c      	ldr	r2, [pc, #112]	; (800bfd8 <HAL_TIM_Base_Start+0xc0>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d00e      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a1b      	ldr	r2, [pc, #108]	; (800bfdc <HAL_TIM_Base_Start+0xc4>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d009      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a19      	ldr	r2, [pc, #100]	; (800bfe0 <HAL_TIM_Base_Start+0xc8>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d004      	beq.n	800bf88 <HAL_TIM_Base_Start+0x70>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a18      	ldr	r2, [pc, #96]	; (800bfe4 <HAL_TIM_Base_Start+0xcc>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d111      	bne.n	800bfac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b06      	cmp	r3, #6
 800bf98:	d010      	beq.n	800bfbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f042 0201 	orr.w	r2, r2, #1
 800bfa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfaa:	e007      	b.n	800bfbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0201 	orr.w	r2, r2, #1
 800bfba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	40010000 	.word	0x40010000
 800bfd0:	40000400 	.word	0x40000400
 800bfd4:	40000800 	.word	0x40000800
 800bfd8:	40000c00 	.word	0x40000c00
 800bfdc:	40010400 	.word	0x40010400
 800bfe0:	40014000 	.word	0x40014000
 800bfe4:	40001800 	.word	0x40001800

0800bfe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d001      	beq.n	800c000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e04e      	b.n	800c09e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2202      	movs	r2, #2
 800c004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68da      	ldr	r2, [r3, #12]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 0201 	orr.w	r2, r2, #1
 800c016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a23      	ldr	r2, [pc, #140]	; (800c0ac <HAL_TIM_Base_Start_IT+0xc4>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d022      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c02a:	d01d      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d018      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a1e      	ldr	r2, [pc, #120]	; (800c0b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d013      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a1c      	ldr	r2, [pc, #112]	; (800c0b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d00e      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a1b      	ldr	r2, [pc, #108]	; (800c0bc <HAL_TIM_Base_Start_IT+0xd4>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d009      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d004      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x80>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a18      	ldr	r2, [pc, #96]	; (800c0c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d111      	bne.n	800c08c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b06      	cmp	r3, #6
 800c078:	d010      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f042 0201 	orr.w	r2, r2, #1
 800c088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c08a:	e007      	b.n	800c09c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f042 0201 	orr.w	r2, r2, #1
 800c09a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	40010000 	.word	0x40010000
 800c0b0:	40000400 	.word	0x40000400
 800c0b4:	40000800 	.word	0x40000800
 800c0b8:	40000c00 	.word	0x40000c00
 800c0bc:	40010400 	.word	0x40010400
 800c0c0:	40014000 	.word	0x40014000
 800c0c4:	40001800 	.word	0x40001800

0800c0c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e041      	b.n	800c15e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d106      	bne.n	800c0f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f839 	bl	800c166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	4610      	mov	r0, r2
 800c108:	f000 fc2a 	bl	800c960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
	...

0800c17c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d109      	bne.n	800c1a0 <HAL_TIM_PWM_Start+0x24>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b01      	cmp	r3, #1
 800c196:	bf14      	ite	ne
 800c198:	2301      	movne	r3, #1
 800c19a:	2300      	moveq	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	e022      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x6a>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d109      	bne.n	800c1ba <HAL_TIM_PWM_Start+0x3e>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	bf14      	ite	ne
 800c1b2:	2301      	movne	r3, #1
 800c1b4:	2300      	moveq	r3, #0
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	e015      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x6a>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d109      	bne.n	800c1d4 <HAL_TIM_PWM_Start+0x58>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	bf14      	ite	ne
 800c1cc:	2301      	movne	r3, #1
 800c1ce:	2300      	moveq	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	e008      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x6a>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	bf14      	ite	ne
 800c1e0:	2301      	movne	r3, #1
 800c1e2:	2300      	moveq	r3, #0
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e07c      	b.n	800c2e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_PWM_Start+0x82>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1fc:	e013      	b.n	800c226 <HAL_TIM_PWM_Start+0xaa>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b04      	cmp	r3, #4
 800c202:	d104      	bne.n	800c20e <HAL_TIM_PWM_Start+0x92>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c20c:	e00b      	b.n	800c226 <HAL_TIM_PWM_Start+0xaa>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b08      	cmp	r3, #8
 800c212:	d104      	bne.n	800c21e <HAL_TIM_PWM_Start+0xa2>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c21c:	e003      	b.n	800c226 <HAL_TIM_PWM_Start+0xaa>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2202      	movs	r2, #2
 800c222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2201      	movs	r2, #1
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 fe80 	bl	800cf34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a2d      	ldr	r2, [pc, #180]	; (800c2f0 <HAL_TIM_PWM_Start+0x174>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d004      	beq.n	800c248 <HAL_TIM_PWM_Start+0xcc>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a2c      	ldr	r2, [pc, #176]	; (800c2f4 <HAL_TIM_PWM_Start+0x178>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d101      	bne.n	800c24c <HAL_TIM_PWM_Start+0xd0>
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <HAL_TIM_PWM_Start+0xd2>
 800c24c:	2300      	movs	r3, #0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d007      	beq.n	800c262 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a22      	ldr	r2, [pc, #136]	; (800c2f0 <HAL_TIM_PWM_Start+0x174>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d022      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c274:	d01d      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a1f      	ldr	r2, [pc, #124]	; (800c2f8 <HAL_TIM_PWM_Start+0x17c>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d018      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a1d      	ldr	r2, [pc, #116]	; (800c2fc <HAL_TIM_PWM_Start+0x180>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d013      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a1c      	ldr	r2, [pc, #112]	; (800c300 <HAL_TIM_PWM_Start+0x184>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d00e      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a16      	ldr	r2, [pc, #88]	; (800c2f4 <HAL_TIM_PWM_Start+0x178>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d009      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a18      	ldr	r2, [pc, #96]	; (800c304 <HAL_TIM_PWM_Start+0x188>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d004      	beq.n	800c2b2 <HAL_TIM_PWM_Start+0x136>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a16      	ldr	r2, [pc, #88]	; (800c308 <HAL_TIM_PWM_Start+0x18c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d111      	bne.n	800c2d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	f003 0307 	and.w	r3, r3, #7
 800c2bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b06      	cmp	r3, #6
 800c2c2:	d010      	beq.n	800c2e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f042 0201 	orr.w	r2, r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2d4:	e007      	b.n	800c2e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 0201 	orr.w	r2, r2, #1
 800c2e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400
 800c2f8:	40000400 	.word	0x40000400
 800c2fc:	40000800 	.word	0x40000800
 800c300:	40000c00 	.word	0x40000c00
 800c304:	40014000 	.word	0x40014000
 800c308:	40001800 	.word	0x40001800

0800c30c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fe08 	bl	800cf34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a2e      	ldr	r2, [pc, #184]	; (800c3e4 <HAL_TIM_PWM_Stop+0xd8>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d004      	beq.n	800c338 <HAL_TIM_PWM_Stop+0x2c>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2d      	ldr	r2, [pc, #180]	; (800c3e8 <HAL_TIM_PWM_Stop+0xdc>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d101      	bne.n	800c33c <HAL_TIM_PWM_Stop+0x30>
 800c338:	2301      	movs	r3, #1
 800c33a:	e000      	b.n	800c33e <HAL_TIM_PWM_Stop+0x32>
 800c33c:	2300      	movs	r3, #0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d017      	beq.n	800c372 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6a1a      	ldr	r2, [r3, #32]
 800c348:	f241 1311 	movw	r3, #4369	; 0x1111
 800c34c:	4013      	ands	r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10f      	bne.n	800c372 <HAL_TIM_PWM_Stop+0x66>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6a1a      	ldr	r2, [r3, #32]
 800c358:	f240 4344 	movw	r3, #1092	; 0x444
 800c35c:	4013      	ands	r3, r2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d107      	bne.n	800c372 <HAL_TIM_PWM_Stop+0x66>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6a1a      	ldr	r2, [r3, #32]
 800c378:	f241 1311 	movw	r3, #4369	; 0x1111
 800c37c:	4013      	ands	r3, r2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10f      	bne.n	800c3a2 <HAL_TIM_PWM_Stop+0x96>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	f240 4344 	movw	r3, #1092	; 0x444
 800c38c:	4013      	ands	r3, r2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d107      	bne.n	800c3a2 <HAL_TIM_PWM_Stop+0x96>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d104      	bne.n	800c3b2 <HAL_TIM_PWM_Stop+0xa6>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3b0:	e013      	b.n	800c3da <HAL_TIM_PWM_Stop+0xce>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d104      	bne.n	800c3c2 <HAL_TIM_PWM_Stop+0xb6>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3c0:	e00b      	b.n	800c3da <HAL_TIM_PWM_Stop+0xce>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d104      	bne.n	800c3d2 <HAL_TIM_PWM_Stop+0xc6>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3d0:	e003      	b.n	800c3da <HAL_TIM_PWM_Stop+0xce>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	40010400 	.word	0x40010400

0800c3ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d122      	bne.n	800c448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	f003 0302 	and.w	r3, r3, #2
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d11b      	bne.n	800c448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f06f 0202 	mvn.w	r2, #2
 800c418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa77 	bl	800c922 <HAL_TIM_IC_CaptureCallback>
 800c434:	e005      	b.n	800c442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fa69 	bl	800c90e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fa7a 	bl	800c936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	f003 0304 	and.w	r3, r3, #4
 800c452:	2b04      	cmp	r3, #4
 800c454:	d122      	bne.n	800c49c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b04      	cmp	r3, #4
 800c462:	d11b      	bne.n	800c49c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f06f 0204 	mvn.w	r2, #4
 800c46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2202      	movs	r2, #2
 800c472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa4d 	bl	800c922 <HAL_TIM_IC_CaptureCallback>
 800c488:	e005      	b.n	800c496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fa3f 	bl	800c90e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa50 	bl	800c936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	f003 0308 	and.w	r3, r3, #8
 800c4a6:	2b08      	cmp	r3, #8
 800c4a8:	d122      	bne.n	800c4f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f003 0308 	and.w	r3, r3, #8
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	d11b      	bne.n	800c4f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f06f 0208 	mvn.w	r2, #8
 800c4c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2204      	movs	r2, #4
 800c4c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	f003 0303 	and.w	r3, r3, #3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa23 	bl	800c922 <HAL_TIM_IC_CaptureCallback>
 800c4dc:	e005      	b.n	800c4ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fa15 	bl	800c90e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fa26 	bl	800c936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	f003 0310 	and.w	r3, r3, #16
 800c4fa:	2b10      	cmp	r3, #16
 800c4fc:	d122      	bne.n	800c544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b10      	cmp	r3, #16
 800c50a:	d11b      	bne.n	800c544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f06f 0210 	mvn.w	r2, #16
 800c514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2208      	movs	r2, #8
 800c51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f9f9 	bl	800c922 <HAL_TIM_IC_CaptureCallback>
 800c530:	e005      	b.n	800c53e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 f9eb 	bl	800c90e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f9fc 	bl	800c936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d10e      	bne.n	800c570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d107      	bne.n	800c570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f06f 0201 	mvn.w	r2, #1
 800c568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7f6 f974 	bl	8002858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c57a:	2b80      	cmp	r3, #128	; 0x80
 800c57c:	d10e      	bne.n	800c59c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c588:	2b80      	cmp	r3, #128	; 0x80
 800c58a:	d107      	bne.n	800c59c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fd78 	bl	800d08c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a6:	2b40      	cmp	r3, #64	; 0x40
 800c5a8:	d10e      	bne.n	800c5c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b4:	2b40      	cmp	r3, #64	; 0x40
 800c5b6:	d107      	bne.n	800c5c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f9c1 	bl	800c94a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	d10e      	bne.n	800c5f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	d107      	bne.n	800c5f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f06f 0220 	mvn.w	r2, #32
 800c5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fd42 	bl	800d078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5f4:	bf00      	nop
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c616:	2302      	movs	r3, #2
 800c618:	e0ae      	b.n	800c778 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b0c      	cmp	r3, #12
 800c626:	f200 809f 	bhi.w	800c768 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c665 	.word	0x0800c665
 800c634:	0800c769 	.word	0x0800c769
 800c638:	0800c769 	.word	0x0800c769
 800c63c:	0800c769 	.word	0x0800c769
 800c640:	0800c6a5 	.word	0x0800c6a5
 800c644:	0800c769 	.word	0x0800c769
 800c648:	0800c769 	.word	0x0800c769
 800c64c:	0800c769 	.word	0x0800c769
 800c650:	0800c6e7 	.word	0x0800c6e7
 800c654:	0800c769 	.word	0x0800c769
 800c658:	0800c769 	.word	0x0800c769
 800c65c:	0800c769 	.word	0x0800c769
 800c660:	0800c727 	.word	0x0800c727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fa18 	bl	800caa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	699a      	ldr	r2, [r3, #24]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f042 0208 	orr.w	r2, r2, #8
 800c67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	699a      	ldr	r2, [r3, #24]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f022 0204 	bic.w	r2, r2, #4
 800c68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6999      	ldr	r1, [r3, #24]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	691a      	ldr	r2, [r3, #16]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	619a      	str	r2, [r3, #24]
      break;
 800c6a2:	e064      	b.n	800c76e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68b9      	ldr	r1, [r7, #8]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fa68 	bl	800cb80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	699a      	ldr	r2, [r3, #24]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	699a      	ldr	r2, [r3, #24]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6999      	ldr	r1, [r3, #24]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	021a      	lsls	r2, r3, #8
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	619a      	str	r2, [r3, #24]
      break;
 800c6e4:	e043      	b.n	800c76e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fabd 	bl	800cc6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69da      	ldr	r2, [r3, #28]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f042 0208 	orr.w	r2, r2, #8
 800c700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	69da      	ldr	r2, [r3, #28]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f022 0204 	bic.w	r2, r2, #4
 800c710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69d9      	ldr	r1, [r3, #28]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	691a      	ldr	r2, [r3, #16]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	61da      	str	r2, [r3, #28]
      break;
 800c724:	e023      	b.n	800c76e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68b9      	ldr	r1, [r7, #8]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fb11 	bl	800cd54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69da      	ldr	r2, [r3, #28]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69da      	ldr	r2, [r3, #28]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	69d9      	ldr	r1, [r3, #28]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	021a      	lsls	r2, r3, #8
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	61da      	str	r2, [r3, #28]
      break;
 800c766:	e002      	b.n	800c76e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	75fb      	strb	r3, [r7, #23]
      break;
 800c76c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c776:	7dfb      	ldrb	r3, [r7, #23]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c794:	2b01      	cmp	r3, #1
 800c796:	d101      	bne.n	800c79c <HAL_TIM_ConfigClockSource+0x1c>
 800c798:	2302      	movs	r3, #2
 800c79a:	e0b4      	b.n	800c906 <HAL_TIM_ConfigClockSource+0x186>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7d4:	d03e      	beq.n	800c854 <HAL_TIM_ConfigClockSource+0xd4>
 800c7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7da:	f200 8087 	bhi.w	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7e2:	f000 8086 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x172>
 800c7e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7ea:	d87f      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c7ec:	2b70      	cmp	r3, #112	; 0x70
 800c7ee:	d01a      	beq.n	800c826 <HAL_TIM_ConfigClockSource+0xa6>
 800c7f0:	2b70      	cmp	r3, #112	; 0x70
 800c7f2:	d87b      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c7f4:	2b60      	cmp	r3, #96	; 0x60
 800c7f6:	d050      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x11a>
 800c7f8:	2b60      	cmp	r3, #96	; 0x60
 800c7fa:	d877      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c7fc:	2b50      	cmp	r3, #80	; 0x50
 800c7fe:	d03c      	beq.n	800c87a <HAL_TIM_ConfigClockSource+0xfa>
 800c800:	2b50      	cmp	r3, #80	; 0x50
 800c802:	d873      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c804:	2b40      	cmp	r3, #64	; 0x40
 800c806:	d058      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x13a>
 800c808:	2b40      	cmp	r3, #64	; 0x40
 800c80a:	d86f      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c80c:	2b30      	cmp	r3, #48	; 0x30
 800c80e:	d064      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0x15a>
 800c810:	2b30      	cmp	r3, #48	; 0x30
 800c812:	d86b      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c814:	2b20      	cmp	r3, #32
 800c816:	d060      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0x15a>
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d867      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d05c      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0x15a>
 800c820:	2b10      	cmp	r3, #16
 800c822:	d05a      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0x15a>
 800c824:	e062      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	6899      	ldr	r1, [r3, #8]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	f000 fb5d 	bl	800cef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	609a      	str	r2, [r3, #8]
      break;
 800c852:	e04f      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	6899      	ldr	r1, [r3, #8]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f000 fb46 	bl	800cef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c876:	609a      	str	r2, [r3, #8]
      break;
 800c878:	e03c      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6818      	ldr	r0, [r3, #0]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	6859      	ldr	r1, [r3, #4]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	461a      	mov	r2, r3
 800c888:	f000 faba 	bl	800ce00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2150      	movs	r1, #80	; 0x50
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fb13 	bl	800cebe <TIM_ITRx_SetConfig>
      break;
 800c898:	e02c      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	6859      	ldr	r1, [r3, #4]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f000 fad9 	bl	800ce5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2160      	movs	r1, #96	; 0x60
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fb03 	bl	800cebe <TIM_ITRx_SetConfig>
      break;
 800c8b8:	e01c      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	6859      	ldr	r1, [r3, #4]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f000 fa9a 	bl	800ce00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2140      	movs	r1, #64	; 0x40
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 faf3 	bl	800cebe <TIM_ITRx_SetConfig>
      break;
 800c8d8:	e00c      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f000 faea 	bl	800cebe <TIM_ITRx_SetConfig>
      break;
 800c8ea:	e003      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c8f0:	e000      	b.n	800c8f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c8f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c922:	b480      	push	{r7}
 800c924:	b083      	sub	sp, #12
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c92a:	bf00      	nop
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c936:	b480      	push	{r7}
 800c938:	b083      	sub	sp, #12
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c93e:	bf00      	nop
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c952:	bf00      	nop
 800c954:	370c      	adds	r7, #12
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
	...

0800c960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a40      	ldr	r2, [pc, #256]	; (800ca74 <TIM_Base_SetConfig+0x114>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d013      	beq.n	800c9a0 <TIM_Base_SetConfig+0x40>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c97e:	d00f      	beq.n	800c9a0 <TIM_Base_SetConfig+0x40>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a3d      	ldr	r2, [pc, #244]	; (800ca78 <TIM_Base_SetConfig+0x118>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d00b      	beq.n	800c9a0 <TIM_Base_SetConfig+0x40>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a3c      	ldr	r2, [pc, #240]	; (800ca7c <TIM_Base_SetConfig+0x11c>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d007      	beq.n	800c9a0 <TIM_Base_SetConfig+0x40>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a3b      	ldr	r2, [pc, #236]	; (800ca80 <TIM_Base_SetConfig+0x120>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d003      	beq.n	800c9a0 <TIM_Base_SetConfig+0x40>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a3a      	ldr	r2, [pc, #232]	; (800ca84 <TIM_Base_SetConfig+0x124>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d108      	bne.n	800c9b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ca74 <TIM_Base_SetConfig+0x114>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d02b      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c0:	d027      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ca78 <TIM_Base_SetConfig+0x118>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d023      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a2b      	ldr	r2, [pc, #172]	; (800ca7c <TIM_Base_SetConfig+0x11c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d01f      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a2a      	ldr	r2, [pc, #168]	; (800ca80 <TIM_Base_SetConfig+0x120>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d01b      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a29      	ldr	r2, [pc, #164]	; (800ca84 <TIM_Base_SetConfig+0x124>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d017      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a28      	ldr	r2, [pc, #160]	; (800ca88 <TIM_Base_SetConfig+0x128>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d013      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a27      	ldr	r2, [pc, #156]	; (800ca8c <TIM_Base_SetConfig+0x12c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d00f      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a26      	ldr	r2, [pc, #152]	; (800ca90 <TIM_Base_SetConfig+0x130>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d00b      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a25      	ldr	r2, [pc, #148]	; (800ca94 <TIM_Base_SetConfig+0x134>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d007      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a24      	ldr	r2, [pc, #144]	; (800ca98 <TIM_Base_SetConfig+0x138>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d003      	beq.n	800ca12 <TIM_Base_SetConfig+0xb2>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a23      	ldr	r2, [pc, #140]	; (800ca9c <TIM_Base_SetConfig+0x13c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d108      	bne.n	800ca24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	689a      	ldr	r2, [r3, #8]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a0a      	ldr	r2, [pc, #40]	; (800ca74 <TIM_Base_SetConfig+0x114>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d003      	beq.n	800ca58 <TIM_Base_SetConfig+0xf8>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a0c      	ldr	r2, [pc, #48]	; (800ca84 <TIM_Base_SetConfig+0x124>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d103      	bne.n	800ca60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	691a      	ldr	r2, [r3, #16]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	615a      	str	r2, [r3, #20]
}
 800ca66:	bf00      	nop
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	40010000 	.word	0x40010000
 800ca78:	40000400 	.word	0x40000400
 800ca7c:	40000800 	.word	0x40000800
 800ca80:	40000c00 	.word	0x40000c00
 800ca84:	40010400 	.word	0x40010400
 800ca88:	40014000 	.word	0x40014000
 800ca8c:	40014400 	.word	0x40014400
 800ca90:	40014800 	.word	0x40014800
 800ca94:	40001800 	.word	0x40001800
 800ca98:	40001c00 	.word	0x40001c00
 800ca9c:	40002000 	.word	0x40002000

0800caa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f023 0201 	bic.w	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f023 0302 	bic.w	r3, r3, #2
 800cae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a20      	ldr	r2, [pc, #128]	; (800cb78 <TIM_OC1_SetConfig+0xd8>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d003      	beq.n	800cb04 <TIM_OC1_SetConfig+0x64>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a1f      	ldr	r2, [pc, #124]	; (800cb7c <TIM_OC1_SetConfig+0xdc>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d10c      	bne.n	800cb1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f023 0308 	bic.w	r3, r3, #8
 800cb0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 0304 	bic.w	r3, r3, #4
 800cb1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <TIM_OC1_SetConfig+0xd8>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d003      	beq.n	800cb2e <TIM_OC1_SetConfig+0x8e>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a14      	ldr	r2, [pc, #80]	; (800cb7c <TIM_OC1_SetConfig+0xdc>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d111      	bne.n	800cb52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	621a      	str	r2, [r3, #32]
}
 800cb6c:	bf00      	nop
 800cb6e:	371c      	adds	r7, #28
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	40010000 	.word	0x40010000
 800cb7c:	40010400 	.word	0x40010400

0800cb80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	f023 0210 	bic.w	r2, r3, #16
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f023 0320 	bic.w	r3, r3, #32
 800cbca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a22      	ldr	r2, [pc, #136]	; (800cc64 <TIM_OC2_SetConfig+0xe4>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d003      	beq.n	800cbe8 <TIM_OC2_SetConfig+0x68>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a21      	ldr	r2, [pc, #132]	; (800cc68 <TIM_OC2_SetConfig+0xe8>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d10d      	bne.n	800cc04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	011b      	lsls	r3, r3, #4
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a17      	ldr	r2, [pc, #92]	; (800cc64 <TIM_OC2_SetConfig+0xe4>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d003      	beq.n	800cc14 <TIM_OC2_SetConfig+0x94>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a16      	ldr	r2, [pc, #88]	; (800cc68 <TIM_OC2_SetConfig+0xe8>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d113      	bne.n	800cc3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	621a      	str	r2, [r3, #32]
}
 800cc56:	bf00      	nop
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40010400 	.word	0x40010400

0800cc6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a21      	ldr	r2, [pc, #132]	; (800cd4c <TIM_OC3_SetConfig+0xe0>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d003      	beq.n	800ccd2 <TIM_OC3_SetConfig+0x66>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a20      	ldr	r2, [pc, #128]	; (800cd50 <TIM_OC3_SetConfig+0xe4>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d10d      	bne.n	800ccee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a16      	ldr	r2, [pc, #88]	; (800cd4c <TIM_OC3_SetConfig+0xe0>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d003      	beq.n	800ccfe <TIM_OC3_SetConfig+0x92>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4a15      	ldr	r2, [pc, #84]	; (800cd50 <TIM_OC3_SetConfig+0xe4>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d113      	bne.n	800cd26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	011b      	lsls	r3, r3, #4
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	697a      	ldr	r2, [r7, #20]
 800cd3e:	621a      	str	r2, [r3, #32]
}
 800cd40:	bf00      	nop
 800cd42:	371c      	adds	r7, #28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	40010000 	.word	0x40010000
 800cd50:	40010400 	.word	0x40010400

0800cd54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	021b      	lsls	r3, r3, #8
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	031b      	lsls	r3, r3, #12
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4a12      	ldr	r2, [pc, #72]	; (800cdf8 <TIM_OC4_SetConfig+0xa4>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d003      	beq.n	800cdbc <TIM_OC4_SetConfig+0x68>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4a11      	ldr	r2, [pc, #68]	; (800cdfc <TIM_OC4_SetConfig+0xa8>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d109      	bne.n	800cdd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	019b      	lsls	r3, r3, #6
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	621a      	str	r2, [r3, #32]
}
 800cdea:	bf00      	nop
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400

0800ce00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a1b      	ldr	r3, [r3, #32]
 800ce10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	f023 0201 	bic.w	r2, r3, #1
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f023 030a 	bic.w	r3, r3, #10
 800ce3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	621a      	str	r2, [r3, #32]
}
 800ce52:	bf00      	nop
 800ce54:	371c      	adds	r7, #28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b087      	sub	sp, #28
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	f023 0210 	bic.w	r2, r3, #16
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	031b      	lsls	r3, r3, #12
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	621a      	str	r2, [r3, #32]
}
 800ceb2:	bf00      	nop
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cebe:	b480      	push	{r7}
 800cec0:	b085      	sub	sp, #20
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f043 0307 	orr.w	r3, r3, #7
 800cee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	609a      	str	r2, [r3, #8]
}
 800cee8:	bf00      	nop
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b087      	sub	sp, #28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	021a      	lsls	r2, r3, #8
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	431a      	orrs	r2, r3
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	609a      	str	r2, [r3, #8]
}
 800cf28:	bf00      	nop
 800cf2a:	371c      	adds	r7, #28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b087      	sub	sp, #28
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f003 031f 	and.w	r3, r3, #31
 800cf46:	2201      	movs	r2, #1
 800cf48:	fa02 f303 	lsl.w	r3, r2, r3
 800cf4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a1a      	ldr	r2, [r3, #32]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	43db      	mvns	r3, r3
 800cf56:	401a      	ands	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6a1a      	ldr	r2, [r3, #32]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f003 031f 	and.w	r3, r3, #31
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6c:	431a      	orrs	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	621a      	str	r2, [r3, #32]
}
 800cf72:	bf00      	nop
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
	...

0800cf80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e05a      	b.n	800d04e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a21      	ldr	r2, [pc, #132]	; (800d05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d022      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfe4:	d01d      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1d      	ldr	r2, [pc, #116]	; (800d060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d018      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a1b      	ldr	r2, [pc, #108]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d013      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1a      	ldr	r2, [pc, #104]	; (800d068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00e      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a18      	ldr	r2, [pc, #96]	; (800d06c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d009      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a17      	ldr	r2, [pc, #92]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d004      	beq.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a15      	ldr	r2, [pc, #84]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d10c      	bne.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	4313      	orrs	r3, r2
 800d032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	40010000 	.word	0x40010000
 800d060:	40000400 	.word	0x40000400
 800d064:	40000800 	.word	0x40000800
 800d068:	40000c00 	.word	0x40000c00
 800d06c:	40010400 	.word	0x40010400
 800d070:	40014000 	.word	0x40014000
 800d074:	40001800 	.word	0x40001800

0800d078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e03f      	b.n	800d132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7f9 fa70 	bl	80065ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2224      	movs	r2, #36	; 0x24
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68da      	ldr	r2, [r3, #12]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 ff65 	bl	800dfb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	691a      	ldr	r2, [r3, #16]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	695a      	ldr	r2, [r3, #20]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68da      	ldr	r2, [r3, #12]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2220      	movs	r2, #32
 800d12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b08a      	sub	sp, #40	; 0x28
 800d13e:	af02      	add	r7, sp, #8
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	603b      	str	r3, [r7, #0]
 800d146:	4613      	mov	r3, r2
 800d148:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b20      	cmp	r3, #32
 800d158:	d17c      	bne.n	800d254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <HAL_UART_Transmit+0x2c>
 800d160:	88fb      	ldrh	r3, [r7, #6]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e075      	b.n	800d256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d170:	2b01      	cmp	r3, #1
 800d172:	d101      	bne.n	800d178 <HAL_UART_Transmit+0x3e>
 800d174:	2302      	movs	r3, #2
 800d176:	e06e      	b.n	800d256 <HAL_UART_Transmit+0x11c>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2221      	movs	r2, #33	; 0x21
 800d18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d18e:	f7fc fbd3 	bl	8009938 <HAL_GetTick>
 800d192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	88fa      	ldrh	r2, [r7, #6]
 800d198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	88fa      	ldrh	r2, [r7, #6]
 800d19e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1a8:	d108      	bne.n	800d1bc <HAL_UART_Transmit+0x82>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d104      	bne.n	800d1bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	61bb      	str	r3, [r7, #24]
 800d1ba:	e003      	b.n	800d1c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d1cc:	e02a      	b.n	800d224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2180      	movs	r1, #128	; 0x80
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 fc21 	bl	800da20 <UART_WaitOnFlagUntilTimeout>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e036      	b.n	800d256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	3302      	adds	r3, #2
 800d202:	61bb      	str	r3, [r7, #24]
 800d204:	e007      	b.n	800d216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	781a      	ldrb	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	3301      	adds	r3, #1
 800d214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	3b01      	subs	r3, #1
 800d21e:	b29a      	uxth	r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d228:	b29b      	uxth	r3, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1cf      	bne.n	800d1ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2200      	movs	r2, #0
 800d236:	2140      	movs	r1, #64	; 0x40
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 fbf1 	bl	800da20 <UART_WaitOnFlagUntilTimeout>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d244:	2303      	movs	r3, #3
 800d246:	e006      	b.n	800d256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2220      	movs	r2, #32
 800d24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	e000      	b.n	800d256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d254:	2302      	movs	r3, #2
  }
}
 800d256:	4618      	mov	r0, r3
 800d258:	3720      	adds	r7, #32
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	60f8      	str	r0, [r7, #12]
 800d266:	60b9      	str	r1, [r7, #8]
 800d268:	4613      	mov	r3, r2
 800d26a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d272:	b2db      	uxtb	r3, r3
 800d274:	2b20      	cmp	r3, #32
 800d276:	d11d      	bne.n	800d2b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <HAL_UART_Receive_DMA+0x26>
 800d27e:	88fb      	ldrh	r3, [r7, #6]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e016      	b.n	800d2b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <HAL_UART_Receive_DMA+0x38>
 800d292:	2302      	movs	r3, #2
 800d294:	e00f      	b.n	800d2b6 <HAL_UART_Receive_DMA+0x58>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d2a4:	88fb      	ldrh	r3, [r7, #6]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f000 fc26 	bl	800dafc <UART_Start_Receive_DMA>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	e000      	b.n	800d2b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d2b4:	2302      	movs	r3, #2
  }
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
	...

0800d2c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b0ba      	sub	sp, #232	; 0xe8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f6:	f003 030f 	and.w	r3, r3, #15
 800d2fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d2fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10f      	bne.n	800d326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d30a:	f003 0320 	and.w	r3, r3, #32
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d009      	beq.n	800d326 <HAL_UART_IRQHandler+0x66>
 800d312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fd8d 	bl	800de3e <UART_Receive_IT>
      return;
 800d324:	e256      	b.n	800d7d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 80de 	beq.w	800d4ec <HAL_UART_IRQHandler+0x22c>
 800d330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 80d1 	beq.w	800d4ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00b      	beq.n	800d36e <HAL_UART_IRQHandler+0xae>
 800d356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d366:	f043 0201 	orr.w	r2, r3, #1
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d372:	f003 0304 	and.w	r3, r3, #4
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <HAL_UART_IRQHandler+0xd2>
 800d37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	2b00      	cmp	r3, #0
 800d384:	d005      	beq.n	800d392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	f043 0202 	orr.w	r2, r3, #2
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00b      	beq.n	800d3b6 <HAL_UART_IRQHandler+0xf6>
 800d39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ae:	f043 0204 	orr.w	r2, r3, #4
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ba:	f003 0308 	and.w	r3, r3, #8
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d011      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x126>
 800d3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c6:	f003 0320 	and.w	r3, r3, #32
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d105      	bne.n	800d3da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3de:	f043 0208 	orr.w	r2, r3, #8
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 81ed 	beq.w	800d7ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f4:	f003 0320 	and.w	r3, r3, #32
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <HAL_UART_IRQHandler+0x14e>
 800d3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d400:	f003 0320 	and.w	r3, r3, #32
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fd18 	bl	800de3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d418:	2b40      	cmp	r3, #64	; 0x40
 800d41a:	bf0c      	ite	eq
 800d41c:	2301      	moveq	r3, #1
 800d41e:	2300      	movne	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	f003 0308 	and.w	r3, r3, #8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d103      	bne.n	800d43a <HAL_UART_IRQHandler+0x17a>
 800d432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d436:	2b00      	cmp	r3, #0
 800d438:	d04f      	beq.n	800d4da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fc20 	bl	800dc80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44a:	2b40      	cmp	r3, #64	; 0x40
 800d44c:	d141      	bne.n	800d4d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3314      	adds	r3, #20
 800d454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d45c:	e853 3f00 	ldrex	r3, [r3]
 800d460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d46c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3314      	adds	r3, #20
 800d476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d47a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d47e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d48a:	e841 2300 	strex	r3, r2, [r1]
 800d48e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1d9      	bne.n	800d44e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d013      	beq.n	800d4ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a6:	4a7d      	ldr	r2, [pc, #500]	; (800d69c <HAL_UART_IRQHandler+0x3dc>)
 800d4a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fc fd14 	bl	8009edc <HAL_DMA_Abort_IT>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d016      	beq.n	800d4e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c8:	e00e      	b.n	800d4e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f99a 	bl	800d804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4d0:	e00a      	b.n	800d4e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f996 	bl	800d804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4d8:	e006      	b.n	800d4e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f992 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d4e6:	e170      	b.n	800d7ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4e8:	bf00      	nop
    return;
 800d4ea:	e16e      	b.n	800d7ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	f040 814a 	bne.w	800d78a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4fa:	f003 0310 	and.w	r3, r3, #16
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 8143 	beq.w	800d78a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d508:	f003 0310 	and.w	r3, r3, #16
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 813c 	beq.w	800d78a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d512:	2300      	movs	r3, #0
 800d514:	60bb      	str	r3, [r7, #8]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	60bb      	str	r3, [r7, #8]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	60bb      	str	r3, [r7, #8]
 800d526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d532:	2b40      	cmp	r3, #64	; 0x40
 800d534:	f040 80b4 	bne.w	800d6a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 8140 	beq.w	800d7ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d556:	429a      	cmp	r2, r3
 800d558:	f080 8139 	bcs.w	800d7ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d568:	69db      	ldr	r3, [r3, #28]
 800d56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d56e:	f000 8088 	beq.w	800d682 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	330c      	adds	r3, #12
 800d578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	330c      	adds	r3, #12
 800d59a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d59e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d5a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5ae:	e841 2300 	strex	r3, r2, [r1]
 800d5b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1d9      	bne.n	800d572 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3314      	adds	r3, #20
 800d5c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d5ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5d0:	f023 0301 	bic.w	r3, r3, #1
 800d5d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3314      	adds	r3, #20
 800d5de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d5e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d5e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5ee:	e841 2300 	strex	r3, r2, [r1]
 800d5f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1e1      	bne.n	800d5be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3314      	adds	r3, #20
 800d600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d604:	e853 3f00 	ldrex	r3, [r3]
 800d608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d60a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3314      	adds	r3, #20
 800d61a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d61e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d626:	e841 2300 	strex	r3, r2, [r1]
 800d62a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d62c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e3      	bne.n	800d5fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2220      	movs	r2, #32
 800d636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	330c      	adds	r3, #12
 800d646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	e853 3f00 	ldrex	r3, [r3]
 800d64e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d652:	f023 0310 	bic.w	r3, r3, #16
 800d656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	330c      	adds	r3, #12
 800d660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d664:	65ba      	str	r2, [r7, #88]	; 0x58
 800d666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d66a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e3      	bne.n	800d640 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fc fbbd 	bl	8009dfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f8c0 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d698:	e099      	b.n	800d7ce <HAL_UART_IRQHandler+0x50e>
 800d69a:	bf00      	nop
 800d69c:	0800dd47 	.word	0x0800dd47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 808b 	beq.w	800d7d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d6bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 8086 	beq.w	800d7d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	330c      	adds	r3, #12
 800d6cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d0:	e853 3f00 	ldrex	r3, [r3]
 800d6d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	330c      	adds	r3, #12
 800d6e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d6ea:	647a      	str	r2, [r7, #68]	; 0x44
 800d6ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e3      	bne.n	800d6c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3314      	adds	r3, #20
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	623b      	str	r3, [r7, #32]
   return(result);
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	f023 0301 	bic.w	r3, r3, #1
 800d714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3314      	adds	r3, #20
 800d71e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d722:	633a      	str	r2, [r7, #48]	; 0x30
 800d724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e3      	bne.n	800d6fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2220      	movs	r2, #32
 800d73a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	330c      	adds	r3, #12
 800d74a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	e853 3f00 	ldrex	r3, [r3]
 800d752:	60fb      	str	r3, [r7, #12]
   return(result);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f023 0310 	bic.w	r3, r3, #16
 800d75a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	330c      	adds	r3, #12
 800d764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d768:	61fa      	str	r2, [r7, #28]
 800d76a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76c:	69b9      	ldr	r1, [r7, #24]
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	e841 2300 	strex	r3, r2, [r1]
 800d774:	617b      	str	r3, [r7, #20]
   return(result);
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1e3      	bne.n	800d744 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d77c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f848 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d788:	e023      	b.n	800d7d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d792:	2b00      	cmp	r3, #0
 800d794:	d009      	beq.n	800d7aa <HAL_UART_IRQHandler+0x4ea>
 800d796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d003      	beq.n	800d7aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fae3 	bl	800dd6e <UART_Transmit_IT>
    return;
 800d7a8:	e014      	b.n	800d7d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00e      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x514>
 800d7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d008      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fb23 	bl	800de0e <UART_EndTransmit_IT>
    return;
 800d7c8:	e004      	b.n	800d7d4 <HAL_UART_IRQHandler+0x514>
    return;
 800d7ca:	bf00      	nop
 800d7cc:	e002      	b.n	800d7d4 <HAL_UART_IRQHandler+0x514>
      return;
 800d7ce:	bf00      	nop
 800d7d0:	e000      	b.n	800d7d4 <HAL_UART_IRQHandler+0x514>
      return;
 800d7d2:	bf00      	nop
  }
}
 800d7d4:	37e8      	adds	r7, #232	; 0xe8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop

0800d7dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b09c      	sub	sp, #112	; 0x70
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d172      	bne.n	800d932 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d84e:	2200      	movs	r2, #0
 800d850:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	330c      	adds	r3, #12
 800d858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d868:	66bb      	str	r3, [r7, #104]	; 0x68
 800d86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	330c      	adds	r3, #12
 800d870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d872:	65ba      	str	r2, [r7, #88]	; 0x58
 800d874:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e5      	bne.n	800d852 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3314      	adds	r3, #20
 800d88c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d890:	e853 3f00 	ldrex	r3, [r3]
 800d894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d898:	f023 0301 	bic.w	r3, r3, #1
 800d89c:	667b      	str	r3, [r7, #100]	; 0x64
 800d89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3314      	adds	r3, #20
 800d8a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d8a6:	647a      	str	r2, [r7, #68]	; 0x44
 800d8a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e5      	bne.n	800d886 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3314      	adds	r3, #20
 800d8c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8d0:	663b      	str	r3, [r7, #96]	; 0x60
 800d8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3314      	adds	r3, #20
 800d8d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8da:	633a      	str	r2, [r7, #48]	; 0x30
 800d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e2:	e841 2300 	strex	r3, r2, [r1]
 800d8e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e5      	bne.n	800d8ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f0:	2220      	movs	r2, #32
 800d8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d119      	bne.n	800d932 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	330c      	adds	r3, #12
 800d904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	e853 3f00 	ldrex	r3, [r3]
 800d90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f023 0310 	bic.w	r3, r3, #16
 800d914:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	330c      	adds	r3, #12
 800d91c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d91e:	61fa      	str	r2, [r7, #28]
 800d920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d922:	69b9      	ldr	r1, [r7, #24]
 800d924:	69fa      	ldr	r2, [r7, #28]
 800d926:	e841 2300 	strex	r3, r2, [r1]
 800d92a:	617b      	str	r3, [r7, #20]
   return(result);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1e5      	bne.n	800d8fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d936:	2b01      	cmp	r3, #1
 800d938:	d106      	bne.n	800d948 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d93e:	4619      	mov	r1, r3
 800d940:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d942:	f7ff ff69 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d946:	e002      	b.n	800d94e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d948:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d94a:	f7f4 ffc5 	bl	80028d8 <HAL_UART_RxCpltCallback>
}
 800d94e:	bf00      	nop
 800d950:	3770      	adds	r7, #112	; 0x70
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d962:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d108      	bne.n	800d97e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d970:	085b      	lsrs	r3, r3, #1
 800d972:	b29b      	uxth	r3, r3
 800d974:	4619      	mov	r1, r3
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff ff4e 	bl	800d818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d97c:	e002      	b.n	800d984 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff ff36 	bl	800d7f0 <HAL_UART_RxHalfCpltCallback>
}
 800d984:	bf00      	nop
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9a8:	2b80      	cmp	r3, #128	; 0x80
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2301      	moveq	r3, #1
 800d9ae:	2300      	movne	r3, #0
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b21      	cmp	r3, #33	; 0x21
 800d9be:	d108      	bne.n	800d9d2 <UART_DMAError+0x46>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d005      	beq.n	800d9d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d9cc:	68b8      	ldr	r0, [r7, #8]
 800d9ce:	f000 f92f 	bl	800dc30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9dc:	2b40      	cmp	r3, #64	; 0x40
 800d9de:	bf0c      	ite	eq
 800d9e0:	2301      	moveq	r3, #1
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	2b22      	cmp	r3, #34	; 0x22
 800d9f2:	d108      	bne.n	800da06 <UART_DMAError+0x7a>
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d005      	beq.n	800da06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800da00:	68b8      	ldr	r0, [r7, #8]
 800da02:	f000 f93d 	bl	800dc80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0a:	f043 0210 	orr.w	r2, r3, #16
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da12:	68b8      	ldr	r0, [r7, #8]
 800da14:	f7ff fef6 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b090      	sub	sp, #64	; 0x40
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	603b      	str	r3, [r7, #0]
 800da2c:	4613      	mov	r3, r2
 800da2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da30:	e050      	b.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d04c      	beq.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800da3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <UART_WaitOnFlagUntilTimeout+0x30>
 800da40:	f7fb ff7a 	bl	8009938 <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d241      	bcs.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	330c      	adds	r3, #12
 800da56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	e853 3f00 	ldrex	r3, [r3]
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	330c      	adds	r3, #12
 800da6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da70:	637a      	str	r2, [r7, #52]	; 0x34
 800da72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da78:	e841 2300 	strex	r3, r2, [r1]
 800da7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1e5      	bne.n	800da50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	3314      	adds	r3, #20
 800da8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	e853 3f00 	ldrex	r3, [r3]
 800da92:	613b      	str	r3, [r7, #16]
   return(result);
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	f023 0301 	bic.w	r3, r3, #1
 800da9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3314      	adds	r3, #20
 800daa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa4:	623a      	str	r2, [r7, #32]
 800daa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	69f9      	ldr	r1, [r7, #28]
 800daaa:	6a3a      	ldr	r2, [r7, #32]
 800daac:	e841 2300 	strex	r3, r2, [r1]
 800dab0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1e5      	bne.n	800da84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2220      	movs	r2, #32
 800dabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e00f      	b.n	800daf4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4013      	ands	r3, r2
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	bf0c      	ite	eq
 800dae4:	2301      	moveq	r3, #1
 800dae6:	2300      	movne	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	461a      	mov	r2, r3
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d09f      	beq.n	800da32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3740      	adds	r7, #64	; 0x40
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b098      	sub	sp, #96	; 0x60
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	4613      	mov	r3, r2
 800db08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	88fa      	ldrh	r2, [r7, #6]
 800db14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2200      	movs	r2, #0
 800db1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2222      	movs	r2, #34	; 0x22
 800db20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db28:	4a3e      	ldr	r2, [pc, #248]	; (800dc24 <UART_Start_Receive_DMA+0x128>)
 800db2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db30:	4a3d      	ldr	r2, [pc, #244]	; (800dc28 <UART_Start_Receive_DMA+0x12c>)
 800db32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db38:	4a3c      	ldr	r2, [pc, #240]	; (800dc2c <UART_Start_Receive_DMA+0x130>)
 800db3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	2200      	movs	r2, #0
 800db42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800db44:	f107 0308 	add.w	r3, r7, #8
 800db48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3304      	adds	r3, #4
 800db54:	4619      	mov	r1, r3
 800db56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	88fb      	ldrh	r3, [r7, #6]
 800db5c:	f7fc f8f6 	bl	8009d4c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800db60:	2300      	movs	r3, #0
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	613b      	str	r3, [r7, #16]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	613b      	str	r3, [r7, #16]
 800db74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	330c      	adds	r3, #12
 800db84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db88:	e853 3f00 	ldrex	r3, [r3]
 800db8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db94:	65bb      	str	r3, [r7, #88]	; 0x58
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	330c      	adds	r3, #12
 800db9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dba6:	e841 2300 	strex	r3, r2, [r1]
 800dbaa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dbac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e5      	bne.n	800db7e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3314      	adds	r3, #20
 800dbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbc:	e853 3f00 	ldrex	r3, [r3]
 800dbc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	f043 0301 	orr.w	r3, r3, #1
 800dbc8:	657b      	str	r3, [r7, #84]	; 0x54
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3314      	adds	r3, #20
 800dbd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbd2:	63ba      	str	r2, [r7, #56]	; 0x38
 800dbd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dbd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbda:	e841 2300 	strex	r3, r2, [r1]
 800dbde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1e5      	bne.n	800dbb2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3314      	adds	r3, #20
 800dbec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	e853 3f00 	ldrex	r3, [r3]
 800dbf4:	617b      	str	r3, [r7, #20]
   return(result);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfc:	653b      	str	r3, [r7, #80]	; 0x50
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	3314      	adds	r3, #20
 800dc04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc06:	627a      	str	r2, [r7, #36]	; 0x24
 800dc08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0a:	6a39      	ldr	r1, [r7, #32]
 800dc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0e:	e841 2300 	strex	r3, r2, [r1]
 800dc12:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1e5      	bne.n	800dbe6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3760      	adds	r7, #96	; 0x60
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	0800d831 	.word	0x0800d831
 800dc28:	0800d957 	.word	0x0800d957
 800dc2c:	0800d98d 	.word	0x0800d98d

0800dc30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b089      	sub	sp, #36	; 0x24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	e853 3f00 	ldrex	r3, [r3]
 800dc46:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc4e:	61fb      	str	r3, [r7, #28]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	330c      	adds	r3, #12
 800dc56:	69fa      	ldr	r2, [r7, #28]
 800dc58:	61ba      	str	r2, [r7, #24]
 800dc5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	6979      	ldr	r1, [r7, #20]
 800dc5e:	69ba      	ldr	r2, [r7, #24]
 800dc60:	e841 2300 	strex	r3, r2, [r1]
 800dc64:	613b      	str	r3, [r7, #16]
   return(result);
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1e5      	bne.n	800dc38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2220      	movs	r2, #32
 800dc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dc74:	bf00      	nop
 800dc76:	3724      	adds	r7, #36	; 0x24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b095      	sub	sp, #84	; 0x54
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	330c      	adds	r3, #12
 800dc8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc92:	e853 3f00 	ldrex	r3, [r3]
 800dc96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	330c      	adds	r3, #12
 800dca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dca8:	643a      	str	r2, [r7, #64]	; 0x40
 800dcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dcae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcb0:	e841 2300 	strex	r3, r2, [r1]
 800dcb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e5      	bne.n	800dc88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3314      	adds	r3, #20
 800dcc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	e853 3f00 	ldrex	r3, [r3]
 800dcca:	61fb      	str	r3, [r7, #28]
   return(result);
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f023 0301 	bic.w	r3, r3, #1
 800dcd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3314      	adds	r3, #20
 800dcda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e5      	bne.n	800dcbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d119      	bne.n	800dd2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	e853 3f00 	ldrex	r3, [r3]
 800dd06:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	f023 0310 	bic.w	r3, r3, #16
 800dd0e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	330c      	adds	r3, #12
 800dd16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd18:	61ba      	str	r2, [r7, #24]
 800dd1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1c:	6979      	ldr	r1, [r7, #20]
 800dd1e:	69ba      	ldr	r2, [r7, #24]
 800dd20:	e841 2300 	strex	r3, r2, [r1]
 800dd24:	613b      	str	r3, [r7, #16]
   return(result);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1e5      	bne.n	800dcf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2220      	movs	r2, #32
 800dd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dd3a:	bf00      	nop
 800dd3c:	3754      	adds	r7, #84	; 0x54
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7ff fd4f 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd66:	bf00      	nop
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b085      	sub	sp, #20
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b21      	cmp	r3, #33	; 0x21
 800dd80:	d13e      	bne.n	800de00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd8a:	d114      	bne.n	800ddb6 <UART_Transmit_IT+0x48>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d110      	bne.n	800ddb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	881b      	ldrh	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dda8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	1c9a      	adds	r2, r3, #2
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	621a      	str	r2, [r3, #32]
 800ddb4:	e008      	b.n	800ddc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	1c59      	adds	r1, r3, #1
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	6211      	str	r1, [r2, #32]
 800ddc0:	781a      	ldrb	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10f      	bne.n	800ddfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	e000      	b.n	800de02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800de00:	2302      	movs	r3, #2
  }
}
 800de02:	4618      	mov	r0, r3
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68da      	ldr	r2, [r3, #12]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2220      	movs	r2, #32
 800de2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fcd4 	bl	800d7dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b08c      	sub	sp, #48	; 0x30
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b22      	cmp	r3, #34	; 0x22
 800de50:	f040 80ab 	bne.w	800dfaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de5c:	d117      	bne.n	800de8e <UART_Receive_IT+0x50>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d113      	bne.n	800de8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	b29b      	uxth	r3, r3
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de86:	1c9a      	adds	r2, r3, #2
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	629a      	str	r2, [r3, #40]	; 0x28
 800de8c:	e026      	b.n	800dedc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800de94:	2300      	movs	r3, #0
 800de96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dea0:	d007      	beq.n	800deb2 <UART_Receive_IT+0x74>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10a      	bne.n	800dec0 <UART_Receive_IT+0x82>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d106      	bne.n	800dec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	e008      	b.n	800ded2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800decc:	b2da      	uxtb	r2, r3
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	3b01      	subs	r3, #1
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	4619      	mov	r1, r3
 800deea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800deec:	2b00      	cmp	r3, #0
 800deee:	d15a      	bne.n	800dfa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f022 0220 	bic.w	r2, r2, #32
 800defe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68da      	ldr	r2, [r3, #12]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	695a      	ldr	r2, [r3, #20]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0201 	bic.w	r2, r2, #1
 800df1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2220      	movs	r2, #32
 800df24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d135      	bne.n	800df9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	330c      	adds	r3, #12
 800df3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	e853 3f00 	ldrex	r3, [r3]
 800df44:	613b      	str	r3, [r7, #16]
   return(result);
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	f023 0310 	bic.w	r3, r3, #16
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	330c      	adds	r3, #12
 800df54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df56:	623a      	str	r2, [r7, #32]
 800df58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5a:	69f9      	ldr	r1, [r7, #28]
 800df5c:	6a3a      	ldr	r2, [r7, #32]
 800df5e:	e841 2300 	strex	r3, r2, [r1]
 800df62:	61bb      	str	r3, [r7, #24]
   return(result);
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e5      	bne.n	800df36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f003 0310 	and.w	r3, r3, #16
 800df74:	2b10      	cmp	r3, #16
 800df76:	d10a      	bne.n	800df8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7ff fc3f 	bl	800d818 <HAL_UARTEx_RxEventCallback>
 800df9a:	e002      	b.n	800dfa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7f4 fc9b 	bl	80028d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e002      	b.n	800dfac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e000      	b.n	800dfac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800dfaa:	2302      	movs	r3, #2
  }
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3730      	adds	r7, #48	; 0x30
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb8:	b09f      	sub	sp, #124	; 0x7c
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfca:	68d9      	ldr	r1, [r3, #12]
 800dfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	ea40 0301 	orr.w	r3, r0, r1
 800dfd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dfd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd8:	689a      	ldr	r2, [r3, #8]
 800dfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800dfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dff8:	f021 010c 	bic.w	r1, r1, #12
 800dffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e002:	430b      	orrs	r3, r1
 800e004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e012:	6999      	ldr	r1, [r3, #24]
 800e014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	ea40 0301 	orr.w	r3, r0, r1
 800e01c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	4bc5      	ldr	r3, [pc, #788]	; (800e338 <UART_SetConfig+0x384>)
 800e024:	429a      	cmp	r2, r3
 800e026:	d004      	beq.n	800e032 <UART_SetConfig+0x7e>
 800e028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	4bc3      	ldr	r3, [pc, #780]	; (800e33c <UART_SetConfig+0x388>)
 800e02e:	429a      	cmp	r2, r3
 800e030:	d103      	bne.n	800e03a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e032:	f7fc fd17 	bl	800aa64 <HAL_RCC_GetPCLK2Freq>
 800e036:	6778      	str	r0, [r7, #116]	; 0x74
 800e038:	e002      	b.n	800e040 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e03a:	f7fc fcff 	bl	800aa3c <HAL_RCC_GetPCLK1Freq>
 800e03e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e048:	f040 80b6 	bne.w	800e1b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e04e:	461c      	mov	r4, r3
 800e050:	f04f 0500 	mov.w	r5, #0
 800e054:	4622      	mov	r2, r4
 800e056:	462b      	mov	r3, r5
 800e058:	1891      	adds	r1, r2, r2
 800e05a:	6439      	str	r1, [r7, #64]	; 0x40
 800e05c:	415b      	adcs	r3, r3
 800e05e:	647b      	str	r3, [r7, #68]	; 0x44
 800e060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e064:	1912      	adds	r2, r2, r4
 800e066:	eb45 0303 	adc.w	r3, r5, r3
 800e06a:	f04f 0000 	mov.w	r0, #0
 800e06e:	f04f 0100 	mov.w	r1, #0
 800e072:	00d9      	lsls	r1, r3, #3
 800e074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e078:	00d0      	lsls	r0, r2, #3
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	1911      	adds	r1, r2, r4
 800e080:	6639      	str	r1, [r7, #96]	; 0x60
 800e082:	416b      	adcs	r3, r5
 800e084:	667b      	str	r3, [r7, #100]	; 0x64
 800e086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	461a      	mov	r2, r3
 800e08c:	f04f 0300 	mov.w	r3, #0
 800e090:	1891      	adds	r1, r2, r2
 800e092:	63b9      	str	r1, [r7, #56]	; 0x38
 800e094:	415b      	adcs	r3, r3
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e09c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e0a0:	f7f2 fdb6 	bl	8000c10 <__aeabi_uldivmod>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	4ba5      	ldr	r3, [pc, #660]	; (800e340 <UART_SetConfig+0x38c>)
 800e0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800e0ae:	095b      	lsrs	r3, r3, #5
 800e0b0:	011e      	lsls	r6, r3, #4
 800e0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0b4:	461c      	mov	r4, r3
 800e0b6:	f04f 0500 	mov.w	r5, #0
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	462b      	mov	r3, r5
 800e0be:	1891      	adds	r1, r2, r2
 800e0c0:	6339      	str	r1, [r7, #48]	; 0x30
 800e0c2:	415b      	adcs	r3, r3
 800e0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e0c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e0ca:	1912      	adds	r2, r2, r4
 800e0cc:	eb45 0303 	adc.w	r3, r5, r3
 800e0d0:	f04f 0000 	mov.w	r0, #0
 800e0d4:	f04f 0100 	mov.w	r1, #0
 800e0d8:	00d9      	lsls	r1, r3, #3
 800e0da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e0de:	00d0      	lsls	r0, r2, #3
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	1911      	adds	r1, r2, r4
 800e0e6:	65b9      	str	r1, [r7, #88]	; 0x58
 800e0e8:	416b      	adcs	r3, r5
 800e0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	f04f 0300 	mov.w	r3, #0
 800e0f6:	1891      	adds	r1, r2, r2
 800e0f8:	62b9      	str	r1, [r7, #40]	; 0x28
 800e0fa:	415b      	adcs	r3, r3
 800e0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e102:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e106:	f7f2 fd83 	bl	8000c10 <__aeabi_uldivmod>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	4b8c      	ldr	r3, [pc, #560]	; (800e340 <UART_SetConfig+0x38c>)
 800e110:	fba3 1302 	umull	r1, r3, r3, r2
 800e114:	095b      	lsrs	r3, r3, #5
 800e116:	2164      	movs	r1, #100	; 0x64
 800e118:	fb01 f303 	mul.w	r3, r1, r3
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	3332      	adds	r3, #50	; 0x32
 800e122:	4a87      	ldr	r2, [pc, #540]	; (800e340 <UART_SetConfig+0x38c>)
 800e124:	fba2 2303 	umull	r2, r3, r2, r3
 800e128:	095b      	lsrs	r3, r3, #5
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e130:	441e      	add	r6, r3
 800e132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e134:	4618      	mov	r0, r3
 800e136:	f04f 0100 	mov.w	r1, #0
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	1894      	adds	r4, r2, r2
 800e140:	623c      	str	r4, [r7, #32]
 800e142:	415b      	adcs	r3, r3
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
 800e146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e14a:	1812      	adds	r2, r2, r0
 800e14c:	eb41 0303 	adc.w	r3, r1, r3
 800e150:	f04f 0400 	mov.w	r4, #0
 800e154:	f04f 0500 	mov.w	r5, #0
 800e158:	00dd      	lsls	r5, r3, #3
 800e15a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e15e:	00d4      	lsls	r4, r2, #3
 800e160:	4622      	mov	r2, r4
 800e162:	462b      	mov	r3, r5
 800e164:	1814      	adds	r4, r2, r0
 800e166:	653c      	str	r4, [r7, #80]	; 0x50
 800e168:	414b      	adcs	r3, r1
 800e16a:	657b      	str	r3, [r7, #84]	; 0x54
 800e16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	461a      	mov	r2, r3
 800e172:	f04f 0300 	mov.w	r3, #0
 800e176:	1891      	adds	r1, r2, r2
 800e178:	61b9      	str	r1, [r7, #24]
 800e17a:	415b      	adcs	r3, r3
 800e17c:	61fb      	str	r3, [r7, #28]
 800e17e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e182:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e186:	f7f2 fd43 	bl	8000c10 <__aeabi_uldivmod>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	4b6c      	ldr	r3, [pc, #432]	; (800e340 <UART_SetConfig+0x38c>)
 800e190:	fba3 1302 	umull	r1, r3, r3, r2
 800e194:	095b      	lsrs	r3, r3, #5
 800e196:	2164      	movs	r1, #100	; 0x64
 800e198:	fb01 f303 	mul.w	r3, r1, r3
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	00db      	lsls	r3, r3, #3
 800e1a0:	3332      	adds	r3, #50	; 0x32
 800e1a2:	4a67      	ldr	r2, [pc, #412]	; (800e340 <UART_SetConfig+0x38c>)
 800e1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a8:	095b      	lsrs	r3, r3, #5
 800e1aa:	f003 0207 	and.w	r2, r3, #7
 800e1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4432      	add	r2, r6
 800e1b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e1b6:	e0b9      	b.n	800e32c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e1b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1ba:	461c      	mov	r4, r3
 800e1bc:	f04f 0500 	mov.w	r5, #0
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	1891      	adds	r1, r2, r2
 800e1c6:	6139      	str	r1, [r7, #16]
 800e1c8:	415b      	adcs	r3, r3
 800e1ca:	617b      	str	r3, [r7, #20]
 800e1cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e1d0:	1912      	adds	r2, r2, r4
 800e1d2:	eb45 0303 	adc.w	r3, r5, r3
 800e1d6:	f04f 0000 	mov.w	r0, #0
 800e1da:	f04f 0100 	mov.w	r1, #0
 800e1de:	00d9      	lsls	r1, r3, #3
 800e1e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e1e4:	00d0      	lsls	r0, r2, #3
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	eb12 0804 	adds.w	r8, r2, r4
 800e1ee:	eb43 0905 	adc.w	r9, r3, r5
 800e1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f04f 0100 	mov.w	r1, #0
 800e1fc:	f04f 0200 	mov.w	r2, #0
 800e200:	f04f 0300 	mov.w	r3, #0
 800e204:	008b      	lsls	r3, r1, #2
 800e206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e20a:	0082      	lsls	r2, r0, #2
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 fcfe 	bl	8000c10 <__aeabi_uldivmod>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	4b49      	ldr	r3, [pc, #292]	; (800e340 <UART_SetConfig+0x38c>)
 800e21a:	fba3 2302 	umull	r2, r3, r3, r2
 800e21e:	095b      	lsrs	r3, r3, #5
 800e220:	011e      	lsls	r6, r3, #4
 800e222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e224:	4618      	mov	r0, r3
 800e226:	f04f 0100 	mov.w	r1, #0
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	1894      	adds	r4, r2, r2
 800e230:	60bc      	str	r4, [r7, #8]
 800e232:	415b      	adcs	r3, r3
 800e234:	60fb      	str	r3, [r7, #12]
 800e236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e23a:	1812      	adds	r2, r2, r0
 800e23c:	eb41 0303 	adc.w	r3, r1, r3
 800e240:	f04f 0400 	mov.w	r4, #0
 800e244:	f04f 0500 	mov.w	r5, #0
 800e248:	00dd      	lsls	r5, r3, #3
 800e24a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e24e:	00d4      	lsls	r4, r2, #3
 800e250:	4622      	mov	r2, r4
 800e252:	462b      	mov	r3, r5
 800e254:	1814      	adds	r4, r2, r0
 800e256:	64bc      	str	r4, [r7, #72]	; 0x48
 800e258:	414b      	adcs	r3, r1
 800e25a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e25c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4618      	mov	r0, r3
 800e262:	f04f 0100 	mov.w	r1, #0
 800e266:	f04f 0200 	mov.w	r2, #0
 800e26a:	f04f 0300 	mov.w	r3, #0
 800e26e:	008b      	lsls	r3, r1, #2
 800e270:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e274:	0082      	lsls	r2, r0, #2
 800e276:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e27a:	f7f2 fcc9 	bl	8000c10 <__aeabi_uldivmod>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	4b2f      	ldr	r3, [pc, #188]	; (800e340 <UART_SetConfig+0x38c>)
 800e284:	fba3 1302 	umull	r1, r3, r3, r2
 800e288:	095b      	lsrs	r3, r3, #5
 800e28a:	2164      	movs	r1, #100	; 0x64
 800e28c:	fb01 f303 	mul.w	r3, r1, r3
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	3332      	adds	r3, #50	; 0x32
 800e296:	4a2a      	ldr	r2, [pc, #168]	; (800e340 <UART_SetConfig+0x38c>)
 800e298:	fba2 2303 	umull	r2, r3, r2, r3
 800e29c:	095b      	lsrs	r3, r3, #5
 800e29e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2a2:	441e      	add	r6, r3
 800e2a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f04f 0100 	mov.w	r1, #0
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	1894      	adds	r4, r2, r2
 800e2b2:	603c      	str	r4, [r7, #0]
 800e2b4:	415b      	adcs	r3, r3
 800e2b6:	607b      	str	r3, [r7, #4]
 800e2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2bc:	1812      	adds	r2, r2, r0
 800e2be:	eb41 0303 	adc.w	r3, r1, r3
 800e2c2:	f04f 0400 	mov.w	r4, #0
 800e2c6:	f04f 0500 	mov.w	r5, #0
 800e2ca:	00dd      	lsls	r5, r3, #3
 800e2cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e2d0:	00d4      	lsls	r4, r2, #3
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	eb12 0a00 	adds.w	sl, r2, r0
 800e2da:	eb43 0b01 	adc.w	fp, r3, r1
 800e2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f04f 0100 	mov.w	r1, #0
 800e2e8:	f04f 0200 	mov.w	r2, #0
 800e2ec:	f04f 0300 	mov.w	r3, #0
 800e2f0:	008b      	lsls	r3, r1, #2
 800e2f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e2f6:	0082      	lsls	r2, r0, #2
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	4659      	mov	r1, fp
 800e2fc:	f7f2 fc88 	bl	8000c10 <__aeabi_uldivmod>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <UART_SetConfig+0x38c>)
 800e306:	fba3 1302 	umull	r1, r3, r3, r2
 800e30a:	095b      	lsrs	r3, r3, #5
 800e30c:	2164      	movs	r1, #100	; 0x64
 800e30e:	fb01 f303 	mul.w	r3, r1, r3
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	011b      	lsls	r3, r3, #4
 800e316:	3332      	adds	r3, #50	; 0x32
 800e318:	4a09      	ldr	r2, [pc, #36]	; (800e340 <UART_SetConfig+0x38c>)
 800e31a:	fba2 2303 	umull	r2, r3, r2, r3
 800e31e:	095b      	lsrs	r3, r3, #5
 800e320:	f003 020f 	and.w	r2, r3, #15
 800e324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4432      	add	r2, r6
 800e32a:	609a      	str	r2, [r3, #8]
}
 800e32c:	bf00      	nop
 800e32e:	377c      	adds	r7, #124	; 0x7c
 800e330:	46bd      	mov	sp, r7
 800e332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e336:	bf00      	nop
 800e338:	40011000 	.word	0x40011000
 800e33c:	40011400 	.word	0x40011400
 800e340:	51eb851f 	.word	0x51eb851f

0800e344 <__errno>:
 800e344:	4b01      	ldr	r3, [pc, #4]	; (800e34c <__errno+0x8>)
 800e346:	6818      	ldr	r0, [r3, #0]
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	200001d8 	.word	0x200001d8

0800e350 <__libc_init_array>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	4d0d      	ldr	r5, [pc, #52]	; (800e388 <__libc_init_array+0x38>)
 800e354:	4c0d      	ldr	r4, [pc, #52]	; (800e38c <__libc_init_array+0x3c>)
 800e356:	1b64      	subs	r4, r4, r5
 800e358:	10a4      	asrs	r4, r4, #2
 800e35a:	2600      	movs	r6, #0
 800e35c:	42a6      	cmp	r6, r4
 800e35e:	d109      	bne.n	800e374 <__libc_init_array+0x24>
 800e360:	4d0b      	ldr	r5, [pc, #44]	; (800e390 <__libc_init_array+0x40>)
 800e362:	4c0c      	ldr	r4, [pc, #48]	; (800e394 <__libc_init_array+0x44>)
 800e364:	f001 f91e 	bl	800f5a4 <_init>
 800e368:	1b64      	subs	r4, r4, r5
 800e36a:	10a4      	asrs	r4, r4, #2
 800e36c:	2600      	movs	r6, #0
 800e36e:	42a6      	cmp	r6, r4
 800e370:	d105      	bne.n	800e37e <__libc_init_array+0x2e>
 800e372:	bd70      	pop	{r4, r5, r6, pc}
 800e374:	f855 3b04 	ldr.w	r3, [r5], #4
 800e378:	4798      	blx	r3
 800e37a:	3601      	adds	r6, #1
 800e37c:	e7ee      	b.n	800e35c <__libc_init_array+0xc>
 800e37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e382:	4798      	blx	r3
 800e384:	3601      	adds	r6, #1
 800e386:	e7f2      	b.n	800e36e <__libc_init_array+0x1e>
 800e388:	0800fa80 	.word	0x0800fa80
 800e38c:	0800fa80 	.word	0x0800fa80
 800e390:	0800fa80 	.word	0x0800fa80
 800e394:	0800fa84 	.word	0x0800fa84

0800e398 <memcpy>:
 800e398:	440a      	add	r2, r1
 800e39a:	4291      	cmp	r1, r2
 800e39c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3a0:	d100      	bne.n	800e3a4 <memcpy+0xc>
 800e3a2:	4770      	bx	lr
 800e3a4:	b510      	push	{r4, lr}
 800e3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3ae:	4291      	cmp	r1, r2
 800e3b0:	d1f9      	bne.n	800e3a6 <memcpy+0xe>
 800e3b2:	bd10      	pop	{r4, pc}

0800e3b4 <memset>:
 800e3b4:	4402      	add	r2, r0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d100      	bne.n	800e3be <memset+0xa>
 800e3bc:	4770      	bx	lr
 800e3be:	f803 1b01 	strb.w	r1, [r3], #1
 800e3c2:	e7f9      	b.n	800e3b8 <memset+0x4>
 800e3c4:	0000      	movs	r0, r0
	...

0800e3c8 <ceil>:
 800e3c8:	ec51 0b10 	vmov	r0, r1, d0
 800e3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e3d8:	2e13      	cmp	r6, #19
 800e3da:	ee10 5a10 	vmov	r5, s0
 800e3de:	ee10 8a10 	vmov	r8, s0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	dc30      	bgt.n	800e448 <ceil+0x80>
 800e3e6:	2e00      	cmp	r6, #0
 800e3e8:	da12      	bge.n	800e410 <ceil+0x48>
 800e3ea:	a335      	add	r3, pc, #212	; (adr r3, 800e4c0 <ceil+0xf8>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f1 ff10 	bl	8000214 <__adddf3>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f7f2 fb52 	bl	8000aa0 <__aeabi_dcmpgt>
 800e3fc:	b128      	cbz	r0, 800e40a <ceil+0x42>
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	db55      	blt.n	800e4ae <ceil+0xe6>
 800e402:	432c      	orrs	r4, r5
 800e404:	d057      	beq.n	800e4b6 <ceil+0xee>
 800e406:	4c30      	ldr	r4, [pc, #192]	; (800e4c8 <ceil+0x100>)
 800e408:	2500      	movs	r5, #0
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	e025      	b.n	800e45c <ceil+0x94>
 800e410:	4f2e      	ldr	r7, [pc, #184]	; (800e4cc <ceil+0x104>)
 800e412:	4137      	asrs	r7, r6
 800e414:	ea01 0307 	and.w	r3, r1, r7
 800e418:	4303      	orrs	r3, r0
 800e41a:	d01f      	beq.n	800e45c <ceil+0x94>
 800e41c:	a328      	add	r3, pc, #160	; (adr r3, 800e4c0 <ceil+0xf8>)
 800e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e422:	f7f1 fef7 	bl	8000214 <__adddf3>
 800e426:	2200      	movs	r2, #0
 800e428:	2300      	movs	r3, #0
 800e42a:	f7f2 fb39 	bl	8000aa0 <__aeabi_dcmpgt>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d0eb      	beq.n	800e40a <ceil+0x42>
 800e432:	2c00      	cmp	r4, #0
 800e434:	bfc2      	ittt	gt
 800e436:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e43a:	fa43 f606 	asrgt.w	r6, r3, r6
 800e43e:	19a4      	addgt	r4, r4, r6
 800e440:	ea24 0407 	bic.w	r4, r4, r7
 800e444:	2500      	movs	r5, #0
 800e446:	e7e0      	b.n	800e40a <ceil+0x42>
 800e448:	2e33      	cmp	r6, #51	; 0x33
 800e44a:	dd0b      	ble.n	800e464 <ceil+0x9c>
 800e44c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e450:	d104      	bne.n	800e45c <ceil+0x94>
 800e452:	ee10 2a10 	vmov	r2, s0
 800e456:	460b      	mov	r3, r1
 800e458:	f7f1 fedc 	bl	8000214 <__adddf3>
 800e45c:	ec41 0b10 	vmov	d0, r0, r1
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e468:	f04f 33ff 	mov.w	r3, #4294967295
 800e46c:	fa23 f707 	lsr.w	r7, r3, r7
 800e470:	4207      	tst	r7, r0
 800e472:	d0f3      	beq.n	800e45c <ceil+0x94>
 800e474:	a312      	add	r3, pc, #72	; (adr r3, 800e4c0 <ceil+0xf8>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	f7f1 fecb 	bl	8000214 <__adddf3>
 800e47e:	2200      	movs	r2, #0
 800e480:	2300      	movs	r3, #0
 800e482:	f7f2 fb0d 	bl	8000aa0 <__aeabi_dcmpgt>
 800e486:	2800      	cmp	r0, #0
 800e488:	d0bf      	beq.n	800e40a <ceil+0x42>
 800e48a:	2c00      	cmp	r4, #0
 800e48c:	dd02      	ble.n	800e494 <ceil+0xcc>
 800e48e:	2e14      	cmp	r6, #20
 800e490:	d103      	bne.n	800e49a <ceil+0xd2>
 800e492:	3401      	adds	r4, #1
 800e494:	ea25 0507 	bic.w	r5, r5, r7
 800e498:	e7b7      	b.n	800e40a <ceil+0x42>
 800e49a:	2301      	movs	r3, #1
 800e49c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e4a0:	fa03 f606 	lsl.w	r6, r3, r6
 800e4a4:	4435      	add	r5, r6
 800e4a6:	4545      	cmp	r5, r8
 800e4a8:	bf38      	it	cc
 800e4aa:	18e4      	addcc	r4, r4, r3
 800e4ac:	e7f2      	b.n	800e494 <ceil+0xcc>
 800e4ae:	2500      	movs	r5, #0
 800e4b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e4b4:	e7a9      	b.n	800e40a <ceil+0x42>
 800e4b6:	4625      	mov	r5, r4
 800e4b8:	e7a7      	b.n	800e40a <ceil+0x42>
 800e4ba:	bf00      	nop
 800e4bc:	f3af 8000 	nop.w
 800e4c0:	8800759c 	.word	0x8800759c
 800e4c4:	7e37e43c 	.word	0x7e37e43c
 800e4c8:	3ff00000 	.word	0x3ff00000
 800e4cc:	000fffff 	.word	0x000fffff

0800e4d0 <floor>:
 800e4d0:	ec51 0b10 	vmov	r0, r1, d0
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e4dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e4e0:	2e13      	cmp	r6, #19
 800e4e2:	ee10 5a10 	vmov	r5, s0
 800e4e6:	ee10 8a10 	vmov	r8, s0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	dc32      	bgt.n	800e554 <floor+0x84>
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	da14      	bge.n	800e51c <floor+0x4c>
 800e4f2:	a333      	add	r3, pc, #204	; (adr r3, 800e5c0 <floor+0xf0>)
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	f7f1 fe8c 	bl	8000214 <__adddf3>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2300      	movs	r3, #0
 800e500:	f7f2 face 	bl	8000aa0 <__aeabi_dcmpgt>
 800e504:	b138      	cbz	r0, 800e516 <floor+0x46>
 800e506:	2c00      	cmp	r4, #0
 800e508:	da57      	bge.n	800e5ba <floor+0xea>
 800e50a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e50e:	431d      	orrs	r5, r3
 800e510:	d001      	beq.n	800e516 <floor+0x46>
 800e512:	4c2d      	ldr	r4, [pc, #180]	; (800e5c8 <floor+0xf8>)
 800e514:	2500      	movs	r5, #0
 800e516:	4621      	mov	r1, r4
 800e518:	4628      	mov	r0, r5
 800e51a:	e025      	b.n	800e568 <floor+0x98>
 800e51c:	4f2b      	ldr	r7, [pc, #172]	; (800e5cc <floor+0xfc>)
 800e51e:	4137      	asrs	r7, r6
 800e520:	ea01 0307 	and.w	r3, r1, r7
 800e524:	4303      	orrs	r3, r0
 800e526:	d01f      	beq.n	800e568 <floor+0x98>
 800e528:	a325      	add	r3, pc, #148	; (adr r3, 800e5c0 <floor+0xf0>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	f7f1 fe71 	bl	8000214 <__adddf3>
 800e532:	2200      	movs	r2, #0
 800e534:	2300      	movs	r3, #0
 800e536:	f7f2 fab3 	bl	8000aa0 <__aeabi_dcmpgt>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d0eb      	beq.n	800e516 <floor+0x46>
 800e53e:	2c00      	cmp	r4, #0
 800e540:	bfbe      	ittt	lt
 800e542:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e546:	fa43 f606 	asrlt.w	r6, r3, r6
 800e54a:	19a4      	addlt	r4, r4, r6
 800e54c:	ea24 0407 	bic.w	r4, r4, r7
 800e550:	2500      	movs	r5, #0
 800e552:	e7e0      	b.n	800e516 <floor+0x46>
 800e554:	2e33      	cmp	r6, #51	; 0x33
 800e556:	dd0b      	ble.n	800e570 <floor+0xa0>
 800e558:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e55c:	d104      	bne.n	800e568 <floor+0x98>
 800e55e:	ee10 2a10 	vmov	r2, s0
 800e562:	460b      	mov	r3, r1
 800e564:	f7f1 fe56 	bl	8000214 <__adddf3>
 800e568:	ec41 0b10 	vmov	d0, r0, r1
 800e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e570:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e574:	f04f 33ff 	mov.w	r3, #4294967295
 800e578:	fa23 f707 	lsr.w	r7, r3, r7
 800e57c:	4207      	tst	r7, r0
 800e57e:	d0f3      	beq.n	800e568 <floor+0x98>
 800e580:	a30f      	add	r3, pc, #60	; (adr r3, 800e5c0 <floor+0xf0>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	f7f1 fe45 	bl	8000214 <__adddf3>
 800e58a:	2200      	movs	r2, #0
 800e58c:	2300      	movs	r3, #0
 800e58e:	f7f2 fa87 	bl	8000aa0 <__aeabi_dcmpgt>
 800e592:	2800      	cmp	r0, #0
 800e594:	d0bf      	beq.n	800e516 <floor+0x46>
 800e596:	2c00      	cmp	r4, #0
 800e598:	da02      	bge.n	800e5a0 <floor+0xd0>
 800e59a:	2e14      	cmp	r6, #20
 800e59c:	d103      	bne.n	800e5a6 <floor+0xd6>
 800e59e:	3401      	adds	r4, #1
 800e5a0:	ea25 0507 	bic.w	r5, r5, r7
 800e5a4:	e7b7      	b.n	800e516 <floor+0x46>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5ac:	fa03 f606 	lsl.w	r6, r3, r6
 800e5b0:	4435      	add	r5, r6
 800e5b2:	4545      	cmp	r5, r8
 800e5b4:	bf38      	it	cc
 800e5b6:	18e4      	addcc	r4, r4, r3
 800e5b8:	e7f2      	b.n	800e5a0 <floor+0xd0>
 800e5ba:	2500      	movs	r5, #0
 800e5bc:	462c      	mov	r4, r5
 800e5be:	e7aa      	b.n	800e516 <floor+0x46>
 800e5c0:	8800759c 	.word	0x8800759c
 800e5c4:	7e37e43c 	.word	0x7e37e43c
 800e5c8:	bff00000 	.word	0xbff00000
 800e5cc:	000fffff 	.word	0x000fffff

0800e5d0 <pow>:
 800e5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	ec59 8b10 	vmov	r8, r9, d0
 800e5d8:	ec57 6b11 	vmov	r6, r7, d1
 800e5dc:	f000 f8dc 	bl	800e798 <__ieee754_pow>
 800e5e0:	4b4e      	ldr	r3, [pc, #312]	; (800e71c <pow+0x14c>)
 800e5e2:	f993 3000 	ldrsb.w	r3, [r3]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	ec55 4b10 	vmov	r4, r5, d0
 800e5ec:	d015      	beq.n	800e61a <pow+0x4a>
 800e5ee:	4632      	mov	r2, r6
 800e5f0:	463b      	mov	r3, r7
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f2 fa5d 	bl	8000ab4 <__aeabi_dcmpun>
 800e5fa:	b970      	cbnz	r0, 800e61a <pow+0x4a>
 800e5fc:	4642      	mov	r2, r8
 800e5fe:	464b      	mov	r3, r9
 800e600:	4640      	mov	r0, r8
 800e602:	4649      	mov	r1, r9
 800e604:	f7f2 fa56 	bl	8000ab4 <__aeabi_dcmpun>
 800e608:	2200      	movs	r2, #0
 800e60a:	2300      	movs	r3, #0
 800e60c:	b148      	cbz	r0, 800e622 <pow+0x52>
 800e60e:	4630      	mov	r0, r6
 800e610:	4639      	mov	r1, r7
 800e612:	f7f2 fa1d 	bl	8000a50 <__aeabi_dcmpeq>
 800e616:	2800      	cmp	r0, #0
 800e618:	d17d      	bne.n	800e716 <pow+0x146>
 800e61a:	ec45 4b10 	vmov	d0, r4, r5
 800e61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e622:	4640      	mov	r0, r8
 800e624:	4649      	mov	r1, r9
 800e626:	f7f2 fa13 	bl	8000a50 <__aeabi_dcmpeq>
 800e62a:	b1e0      	cbz	r0, 800e666 <pow+0x96>
 800e62c:	2200      	movs	r2, #0
 800e62e:	2300      	movs	r3, #0
 800e630:	4630      	mov	r0, r6
 800e632:	4639      	mov	r1, r7
 800e634:	f7f2 fa0c 	bl	8000a50 <__aeabi_dcmpeq>
 800e638:	2800      	cmp	r0, #0
 800e63a:	d16c      	bne.n	800e716 <pow+0x146>
 800e63c:	ec47 6b10 	vmov	d0, r6, r7
 800e640:	f000 fe89 	bl	800f356 <finite>
 800e644:	2800      	cmp	r0, #0
 800e646:	d0e8      	beq.n	800e61a <pow+0x4a>
 800e648:	2200      	movs	r2, #0
 800e64a:	2300      	movs	r3, #0
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f2 fa08 	bl	8000a64 <__aeabi_dcmplt>
 800e654:	2800      	cmp	r0, #0
 800e656:	d0e0      	beq.n	800e61a <pow+0x4a>
 800e658:	f7ff fe74 	bl	800e344 <__errno>
 800e65c:	2321      	movs	r3, #33	; 0x21
 800e65e:	6003      	str	r3, [r0, #0]
 800e660:	2400      	movs	r4, #0
 800e662:	4d2f      	ldr	r5, [pc, #188]	; (800e720 <pow+0x150>)
 800e664:	e7d9      	b.n	800e61a <pow+0x4a>
 800e666:	ec45 4b10 	vmov	d0, r4, r5
 800e66a:	f000 fe74 	bl	800f356 <finite>
 800e66e:	bbb8      	cbnz	r0, 800e6e0 <pow+0x110>
 800e670:	ec49 8b10 	vmov	d0, r8, r9
 800e674:	f000 fe6f 	bl	800f356 <finite>
 800e678:	b390      	cbz	r0, 800e6e0 <pow+0x110>
 800e67a:	ec47 6b10 	vmov	d0, r6, r7
 800e67e:	f000 fe6a 	bl	800f356 <finite>
 800e682:	b368      	cbz	r0, 800e6e0 <pow+0x110>
 800e684:	4622      	mov	r2, r4
 800e686:	462b      	mov	r3, r5
 800e688:	4620      	mov	r0, r4
 800e68a:	4629      	mov	r1, r5
 800e68c:	f7f2 fa12 	bl	8000ab4 <__aeabi_dcmpun>
 800e690:	b160      	cbz	r0, 800e6ac <pow+0xdc>
 800e692:	f7ff fe57 	bl	800e344 <__errno>
 800e696:	2321      	movs	r3, #33	; 0x21
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	2200      	movs	r2, #0
 800e69c:	2300      	movs	r3, #0
 800e69e:	4610      	mov	r0, r2
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	f7f2 f897 	bl	80007d4 <__aeabi_ddiv>
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	460d      	mov	r5, r1
 800e6aa:	e7b6      	b.n	800e61a <pow+0x4a>
 800e6ac:	f7ff fe4a 	bl	800e344 <__errno>
 800e6b0:	2322      	movs	r3, #34	; 0x22
 800e6b2:	6003      	str	r3, [r0, #0]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f2 f9d2 	bl	8000a64 <__aeabi_dcmplt>
 800e6c0:	2400      	movs	r4, #0
 800e6c2:	b158      	cbz	r0, 800e6dc <pow+0x10c>
 800e6c4:	ec47 6b10 	vmov	d0, r6, r7
 800e6c8:	f000 fe5a 	bl	800f380 <rint>
 800e6cc:	4632      	mov	r2, r6
 800e6ce:	ec51 0b10 	vmov	r0, r1, d0
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	f7f2 f9bc 	bl	8000a50 <__aeabi_dcmpeq>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d0c2      	beq.n	800e662 <pow+0x92>
 800e6dc:	4d11      	ldr	r5, [pc, #68]	; (800e724 <pow+0x154>)
 800e6de:	e79c      	b.n	800e61a <pow+0x4a>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f2 f9b2 	bl	8000a50 <__aeabi_dcmpeq>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d094      	beq.n	800e61a <pow+0x4a>
 800e6f0:	ec49 8b10 	vmov	d0, r8, r9
 800e6f4:	f000 fe2f 	bl	800f356 <finite>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d08e      	beq.n	800e61a <pow+0x4a>
 800e6fc:	ec47 6b10 	vmov	d0, r6, r7
 800e700:	f000 fe29 	bl	800f356 <finite>
 800e704:	2800      	cmp	r0, #0
 800e706:	d088      	beq.n	800e61a <pow+0x4a>
 800e708:	f7ff fe1c 	bl	800e344 <__errno>
 800e70c:	2322      	movs	r3, #34	; 0x22
 800e70e:	6003      	str	r3, [r0, #0]
 800e710:	2400      	movs	r4, #0
 800e712:	2500      	movs	r5, #0
 800e714:	e781      	b.n	800e61a <pow+0x4a>
 800e716:	4d04      	ldr	r5, [pc, #16]	; (800e728 <pow+0x158>)
 800e718:	2400      	movs	r4, #0
 800e71a:	e77e      	b.n	800e61a <pow+0x4a>
 800e71c:	2000023c 	.word	0x2000023c
 800e720:	fff00000 	.word	0xfff00000
 800e724:	7ff00000 	.word	0x7ff00000
 800e728:	3ff00000 	.word	0x3ff00000

0800e72c <sqrt>:
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	ed2d 8b02 	vpush	{d8}
 800e732:	ec55 4b10 	vmov	r4, r5, d0
 800e736:	f000 fd51 	bl	800f1dc <__ieee754_sqrt>
 800e73a:	4b15      	ldr	r3, [pc, #84]	; (800e790 <sqrt+0x64>)
 800e73c:	eeb0 8a40 	vmov.f32	s16, s0
 800e740:	eef0 8a60 	vmov.f32	s17, s1
 800e744:	f993 3000 	ldrsb.w	r3, [r3]
 800e748:	3301      	adds	r3, #1
 800e74a:	d019      	beq.n	800e780 <sqrt+0x54>
 800e74c:	4622      	mov	r2, r4
 800e74e:	462b      	mov	r3, r5
 800e750:	4620      	mov	r0, r4
 800e752:	4629      	mov	r1, r5
 800e754:	f7f2 f9ae 	bl	8000ab4 <__aeabi_dcmpun>
 800e758:	b990      	cbnz	r0, 800e780 <sqrt+0x54>
 800e75a:	2200      	movs	r2, #0
 800e75c:	2300      	movs	r3, #0
 800e75e:	4620      	mov	r0, r4
 800e760:	4629      	mov	r1, r5
 800e762:	f7f2 f97f 	bl	8000a64 <__aeabi_dcmplt>
 800e766:	b158      	cbz	r0, 800e780 <sqrt+0x54>
 800e768:	f7ff fdec 	bl	800e344 <__errno>
 800e76c:	2321      	movs	r3, #33	; 0x21
 800e76e:	6003      	str	r3, [r0, #0]
 800e770:	2200      	movs	r2, #0
 800e772:	2300      	movs	r3, #0
 800e774:	4610      	mov	r0, r2
 800e776:	4619      	mov	r1, r3
 800e778:	f7f2 f82c 	bl	80007d4 <__aeabi_ddiv>
 800e77c:	ec41 0b18 	vmov	d8, r0, r1
 800e780:	eeb0 0a48 	vmov.f32	s0, s16
 800e784:	eef0 0a68 	vmov.f32	s1, s17
 800e788:	ecbd 8b02 	vpop	{d8}
 800e78c:	bd38      	pop	{r3, r4, r5, pc}
 800e78e:	bf00      	nop
 800e790:	2000023c 	.word	0x2000023c
 800e794:	00000000 	.word	0x00000000

0800e798 <__ieee754_pow>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	ed2d 8b06 	vpush	{d8-d10}
 800e7a0:	b08d      	sub	sp, #52	; 0x34
 800e7a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e7a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e7aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e7ae:	ea56 0100 	orrs.w	r1, r6, r0
 800e7b2:	ec53 2b10 	vmov	r2, r3, d0
 800e7b6:	f000 84d1 	beq.w	800f15c <__ieee754_pow+0x9c4>
 800e7ba:	497f      	ldr	r1, [pc, #508]	; (800e9b8 <__ieee754_pow+0x220>)
 800e7bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e7c0:	428c      	cmp	r4, r1
 800e7c2:	ee10 8a10 	vmov	r8, s0
 800e7c6:	4699      	mov	r9, r3
 800e7c8:	dc09      	bgt.n	800e7de <__ieee754_pow+0x46>
 800e7ca:	d103      	bne.n	800e7d4 <__ieee754_pow+0x3c>
 800e7cc:	b97a      	cbnz	r2, 800e7ee <__ieee754_pow+0x56>
 800e7ce:	42a6      	cmp	r6, r4
 800e7d0:	dd02      	ble.n	800e7d8 <__ieee754_pow+0x40>
 800e7d2:	e00c      	b.n	800e7ee <__ieee754_pow+0x56>
 800e7d4:	428e      	cmp	r6, r1
 800e7d6:	dc02      	bgt.n	800e7de <__ieee754_pow+0x46>
 800e7d8:	428e      	cmp	r6, r1
 800e7da:	d110      	bne.n	800e7fe <__ieee754_pow+0x66>
 800e7dc:	b178      	cbz	r0, 800e7fe <__ieee754_pow+0x66>
 800e7de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e7e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e7e6:	ea54 0308 	orrs.w	r3, r4, r8
 800e7ea:	f000 84b7 	beq.w	800f15c <__ieee754_pow+0x9c4>
 800e7ee:	4873      	ldr	r0, [pc, #460]	; (800e9bc <__ieee754_pow+0x224>)
 800e7f0:	b00d      	add	sp, #52	; 0x34
 800e7f2:	ecbd 8b06 	vpop	{d8-d10}
 800e7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	f000 bdb9 	b.w	800f370 <nan>
 800e7fe:	f1b9 0f00 	cmp.w	r9, #0
 800e802:	da36      	bge.n	800e872 <__ieee754_pow+0xda>
 800e804:	496e      	ldr	r1, [pc, #440]	; (800e9c0 <__ieee754_pow+0x228>)
 800e806:	428e      	cmp	r6, r1
 800e808:	dc51      	bgt.n	800e8ae <__ieee754_pow+0x116>
 800e80a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e80e:	428e      	cmp	r6, r1
 800e810:	f340 84af 	ble.w	800f172 <__ieee754_pow+0x9da>
 800e814:	1531      	asrs	r1, r6, #20
 800e816:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e81a:	2914      	cmp	r1, #20
 800e81c:	dd0f      	ble.n	800e83e <__ieee754_pow+0xa6>
 800e81e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e822:	fa20 fc01 	lsr.w	ip, r0, r1
 800e826:	fa0c f101 	lsl.w	r1, ip, r1
 800e82a:	4281      	cmp	r1, r0
 800e82c:	f040 84a1 	bne.w	800f172 <__ieee754_pow+0x9da>
 800e830:	f00c 0c01 	and.w	ip, ip, #1
 800e834:	f1cc 0102 	rsb	r1, ip, #2
 800e838:	9100      	str	r1, [sp, #0]
 800e83a:	b180      	cbz	r0, 800e85e <__ieee754_pow+0xc6>
 800e83c:	e059      	b.n	800e8f2 <__ieee754_pow+0x15a>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d155      	bne.n	800e8ee <__ieee754_pow+0x156>
 800e842:	f1c1 0114 	rsb	r1, r1, #20
 800e846:	fa46 fc01 	asr.w	ip, r6, r1
 800e84a:	fa0c f101 	lsl.w	r1, ip, r1
 800e84e:	42b1      	cmp	r1, r6
 800e850:	f040 848c 	bne.w	800f16c <__ieee754_pow+0x9d4>
 800e854:	f00c 0c01 	and.w	ip, ip, #1
 800e858:	f1cc 0102 	rsb	r1, ip, #2
 800e85c:	9100      	str	r1, [sp, #0]
 800e85e:	4959      	ldr	r1, [pc, #356]	; (800e9c4 <__ieee754_pow+0x22c>)
 800e860:	428e      	cmp	r6, r1
 800e862:	d12d      	bne.n	800e8c0 <__ieee754_pow+0x128>
 800e864:	2f00      	cmp	r7, #0
 800e866:	da79      	bge.n	800e95c <__ieee754_pow+0x1c4>
 800e868:	4956      	ldr	r1, [pc, #344]	; (800e9c4 <__ieee754_pow+0x22c>)
 800e86a:	2000      	movs	r0, #0
 800e86c:	f7f1 ffb2 	bl	80007d4 <__aeabi_ddiv>
 800e870:	e016      	b.n	800e8a0 <__ieee754_pow+0x108>
 800e872:	2100      	movs	r1, #0
 800e874:	9100      	str	r1, [sp, #0]
 800e876:	2800      	cmp	r0, #0
 800e878:	d13b      	bne.n	800e8f2 <__ieee754_pow+0x15a>
 800e87a:	494f      	ldr	r1, [pc, #316]	; (800e9b8 <__ieee754_pow+0x220>)
 800e87c:	428e      	cmp	r6, r1
 800e87e:	d1ee      	bne.n	800e85e <__ieee754_pow+0xc6>
 800e880:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e884:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e888:	ea53 0308 	orrs.w	r3, r3, r8
 800e88c:	f000 8466 	beq.w	800f15c <__ieee754_pow+0x9c4>
 800e890:	4b4d      	ldr	r3, [pc, #308]	; (800e9c8 <__ieee754_pow+0x230>)
 800e892:	429c      	cmp	r4, r3
 800e894:	dd0d      	ble.n	800e8b2 <__ieee754_pow+0x11a>
 800e896:	2f00      	cmp	r7, #0
 800e898:	f280 8464 	bge.w	800f164 <__ieee754_pow+0x9cc>
 800e89c:	2000      	movs	r0, #0
 800e89e:	2100      	movs	r1, #0
 800e8a0:	ec41 0b10 	vmov	d0, r0, r1
 800e8a4:	b00d      	add	sp, #52	; 0x34
 800e8a6:	ecbd 8b06 	vpop	{d8-d10}
 800e8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ae:	2102      	movs	r1, #2
 800e8b0:	e7e0      	b.n	800e874 <__ieee754_pow+0xdc>
 800e8b2:	2f00      	cmp	r7, #0
 800e8b4:	daf2      	bge.n	800e89c <__ieee754_pow+0x104>
 800e8b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e8ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e8be:	e7ef      	b.n	800e8a0 <__ieee754_pow+0x108>
 800e8c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e8c4:	d104      	bne.n	800e8d0 <__ieee754_pow+0x138>
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f7f1 fe59 	bl	8000580 <__aeabi_dmul>
 800e8ce:	e7e7      	b.n	800e8a0 <__ieee754_pow+0x108>
 800e8d0:	493e      	ldr	r1, [pc, #248]	; (800e9cc <__ieee754_pow+0x234>)
 800e8d2:	428f      	cmp	r7, r1
 800e8d4:	d10d      	bne.n	800e8f2 <__ieee754_pow+0x15a>
 800e8d6:	f1b9 0f00 	cmp.w	r9, #0
 800e8da:	db0a      	blt.n	800e8f2 <__ieee754_pow+0x15a>
 800e8dc:	ec43 2b10 	vmov	d0, r2, r3
 800e8e0:	b00d      	add	sp, #52	; 0x34
 800e8e2:	ecbd 8b06 	vpop	{d8-d10}
 800e8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ea:	f000 bc77 	b.w	800f1dc <__ieee754_sqrt>
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	9100      	str	r1, [sp, #0]
 800e8f2:	ec43 2b10 	vmov	d0, r2, r3
 800e8f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8fa:	f000 fd23 	bl	800f344 <fabs>
 800e8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e902:	ec51 0b10 	vmov	r0, r1, d0
 800e906:	f1b8 0f00 	cmp.w	r8, #0
 800e90a:	d12a      	bne.n	800e962 <__ieee754_pow+0x1ca>
 800e90c:	b12c      	cbz	r4, 800e91a <__ieee754_pow+0x182>
 800e90e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e9c4 <__ieee754_pow+0x22c>
 800e912:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e916:	45e6      	cmp	lr, ip
 800e918:	d123      	bne.n	800e962 <__ieee754_pow+0x1ca>
 800e91a:	2f00      	cmp	r7, #0
 800e91c:	da05      	bge.n	800e92a <__ieee754_pow+0x192>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	2000      	movs	r0, #0
 800e924:	4927      	ldr	r1, [pc, #156]	; (800e9c4 <__ieee754_pow+0x22c>)
 800e926:	f7f1 ff55 	bl	80007d4 <__aeabi_ddiv>
 800e92a:	f1b9 0f00 	cmp.w	r9, #0
 800e92e:	dab7      	bge.n	800e8a0 <__ieee754_pow+0x108>
 800e930:	9b00      	ldr	r3, [sp, #0]
 800e932:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e936:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e93a:	4323      	orrs	r3, r4
 800e93c:	d108      	bne.n	800e950 <__ieee754_pow+0x1b8>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	4610      	mov	r0, r2
 800e944:	4619      	mov	r1, r3
 800e946:	f7f1 fc63 	bl	8000210 <__aeabi_dsub>
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	e78d      	b.n	800e86c <__ieee754_pow+0xd4>
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d1a4      	bne.n	800e8a0 <__ieee754_pow+0x108>
 800e956:	4602      	mov	r2, r0
 800e958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e95c:	4610      	mov	r0, r2
 800e95e:	4619      	mov	r1, r3
 800e960:	e79e      	b.n	800e8a0 <__ieee754_pow+0x108>
 800e962:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e966:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e96a:	950a      	str	r5, [sp, #40]	; 0x28
 800e96c:	9d00      	ldr	r5, [sp, #0]
 800e96e:	46ac      	mov	ip, r5
 800e970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e972:	ea5c 0505 	orrs.w	r5, ip, r5
 800e976:	d0e4      	beq.n	800e942 <__ieee754_pow+0x1aa>
 800e978:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <__ieee754_pow+0x238>)
 800e97a:	429e      	cmp	r6, r3
 800e97c:	f340 80fc 	ble.w	800eb78 <__ieee754_pow+0x3e0>
 800e980:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e984:	429e      	cmp	r6, r3
 800e986:	4b10      	ldr	r3, [pc, #64]	; (800e9c8 <__ieee754_pow+0x230>)
 800e988:	dd07      	ble.n	800e99a <__ieee754_pow+0x202>
 800e98a:	429c      	cmp	r4, r3
 800e98c:	dc0a      	bgt.n	800e9a4 <__ieee754_pow+0x20c>
 800e98e:	2f00      	cmp	r7, #0
 800e990:	da84      	bge.n	800e89c <__ieee754_pow+0x104>
 800e992:	a307      	add	r3, pc, #28	; (adr r3, 800e9b0 <__ieee754_pow+0x218>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	e795      	b.n	800e8c6 <__ieee754_pow+0x12e>
 800e99a:	429c      	cmp	r4, r3
 800e99c:	dbf7      	blt.n	800e98e <__ieee754_pow+0x1f6>
 800e99e:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <__ieee754_pow+0x22c>)
 800e9a0:	429c      	cmp	r4, r3
 800e9a2:	dd17      	ble.n	800e9d4 <__ieee754_pow+0x23c>
 800e9a4:	2f00      	cmp	r7, #0
 800e9a6:	dcf4      	bgt.n	800e992 <__ieee754_pow+0x1fa>
 800e9a8:	e778      	b.n	800e89c <__ieee754_pow+0x104>
 800e9aa:	bf00      	nop
 800e9ac:	f3af 8000 	nop.w
 800e9b0:	8800759c 	.word	0x8800759c
 800e9b4:	7e37e43c 	.word	0x7e37e43c
 800e9b8:	7ff00000 	.word	0x7ff00000
 800e9bc:	0800fa30 	.word	0x0800fa30
 800e9c0:	433fffff 	.word	0x433fffff
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	3fefffff 	.word	0x3fefffff
 800e9cc:	3fe00000 	.word	0x3fe00000
 800e9d0:	41e00000 	.word	0x41e00000
 800e9d4:	4b64      	ldr	r3, [pc, #400]	; (800eb68 <__ieee754_pow+0x3d0>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f7f1 fc1a 	bl	8000210 <__aeabi_dsub>
 800e9dc:	a356      	add	r3, pc, #344	; (adr r3, 800eb38 <__ieee754_pow+0x3a0>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	f7f1 fdcb 	bl	8000580 <__aeabi_dmul>
 800e9ea:	a355      	add	r3, pc, #340	; (adr r3, 800eb40 <__ieee754_pow+0x3a8>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	4606      	mov	r6, r0
 800e9f2:	460f      	mov	r7, r1
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	f7f1 fdc2 	bl	8000580 <__aeabi_dmul>
 800e9fc:	4b5b      	ldr	r3, [pc, #364]	; (800eb6c <__ieee754_pow+0x3d4>)
 800e9fe:	4682      	mov	sl, r0
 800ea00:	468b      	mov	fp, r1
 800ea02:	2200      	movs	r2, #0
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fdba 	bl	8000580 <__aeabi_dmul>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	a14d      	add	r1, pc, #308	; (adr r1, 800eb48 <__ieee754_pow+0x3b0>)
 800ea12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea16:	f7f1 fbfb 	bl	8000210 <__aeabi_dsub>
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	f7f1 fdaf 	bl	8000580 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	2000      	movs	r0, #0
 800ea28:	4951      	ldr	r1, [pc, #324]	; (800eb70 <__ieee754_pow+0x3d8>)
 800ea2a:	f7f1 fbf1 	bl	8000210 <__aeabi_dsub>
 800ea2e:	4622      	mov	r2, r4
 800ea30:	4680      	mov	r8, r0
 800ea32:	4689      	mov	r9, r1
 800ea34:	462b      	mov	r3, r5
 800ea36:	4620      	mov	r0, r4
 800ea38:	4629      	mov	r1, r5
 800ea3a:	f7f1 fda1 	bl	8000580 <__aeabi_dmul>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4640      	mov	r0, r8
 800ea44:	4649      	mov	r1, r9
 800ea46:	f7f1 fd9b 	bl	8000580 <__aeabi_dmul>
 800ea4a:	a341      	add	r3, pc, #260	; (adr r3, 800eb50 <__ieee754_pow+0x3b8>)
 800ea4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea50:	f7f1 fd96 	bl	8000580 <__aeabi_dmul>
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4650      	mov	r0, sl
 800ea5a:	4659      	mov	r1, fp
 800ea5c:	f7f1 fbd8 	bl	8000210 <__aeabi_dsub>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4680      	mov	r8, r0
 800ea66:	4689      	mov	r9, r1
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f1 fbd2 	bl	8000214 <__adddf3>
 800ea70:	2400      	movs	r4, #0
 800ea72:	4632      	mov	r2, r6
 800ea74:	463b      	mov	r3, r7
 800ea76:	4620      	mov	r0, r4
 800ea78:	460d      	mov	r5, r1
 800ea7a:	f7f1 fbc9 	bl	8000210 <__aeabi_dsub>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4640      	mov	r0, r8
 800ea84:	4649      	mov	r1, r9
 800ea86:	f7f1 fbc3 	bl	8000210 <__aeabi_dsub>
 800ea8a:	9b00      	ldr	r3, [sp, #0]
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	4313      	orrs	r3, r2
 800ea92:	4682      	mov	sl, r0
 800ea94:	468b      	mov	fp, r1
 800ea96:	f040 81f1 	bne.w	800ee7c <__ieee754_pow+0x6e4>
 800ea9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800eb58 <__ieee754_pow+0x3c0>
 800ea9e:	eeb0 8a47 	vmov.f32	s16, s14
 800eaa2:	eef0 8a67 	vmov.f32	s17, s15
 800eaa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eaaa:	2600      	movs	r6, #0
 800eaac:	4632      	mov	r2, r6
 800eaae:	463b      	mov	r3, r7
 800eab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eab4:	f7f1 fbac 	bl	8000210 <__aeabi_dsub>
 800eab8:	4622      	mov	r2, r4
 800eaba:	462b      	mov	r3, r5
 800eabc:	f7f1 fd60 	bl	8000580 <__aeabi_dmul>
 800eac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eac4:	4680      	mov	r8, r0
 800eac6:	4689      	mov	r9, r1
 800eac8:	4650      	mov	r0, sl
 800eaca:	4659      	mov	r1, fp
 800eacc:	f7f1 fd58 	bl	8000580 <__aeabi_dmul>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	4640      	mov	r0, r8
 800ead6:	4649      	mov	r1, r9
 800ead8:	f7f1 fb9c 	bl	8000214 <__adddf3>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	4680      	mov	r8, r0
 800eae2:	4689      	mov	r9, r1
 800eae4:	4620      	mov	r0, r4
 800eae6:	4629      	mov	r1, r5
 800eae8:	f7f1 fd4a 	bl	8000580 <__aeabi_dmul>
 800eaec:	460b      	mov	r3, r1
 800eaee:	4604      	mov	r4, r0
 800eaf0:	460d      	mov	r5, r1
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	f7f1 fb8c 	bl	8000214 <__adddf3>
 800eafc:	4b1d      	ldr	r3, [pc, #116]	; (800eb74 <__ieee754_pow+0x3dc>)
 800eafe:	4299      	cmp	r1, r3
 800eb00:	ec45 4b19 	vmov	d9, r4, r5
 800eb04:	4606      	mov	r6, r0
 800eb06:	460f      	mov	r7, r1
 800eb08:	468b      	mov	fp, r1
 800eb0a:	f340 82fe 	ble.w	800f10a <__ieee754_pow+0x972>
 800eb0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eb12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eb16:	4303      	orrs	r3, r0
 800eb18:	f000 81f0 	beq.w	800eefc <__ieee754_pow+0x764>
 800eb1c:	a310      	add	r3, pc, #64	; (adr r3, 800eb60 <__ieee754_pow+0x3c8>)
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	ec51 0b18 	vmov	r0, r1, d8
 800eb26:	f7f1 fd2b 	bl	8000580 <__aeabi_dmul>
 800eb2a:	a30d      	add	r3, pc, #52	; (adr r3, 800eb60 <__ieee754_pow+0x3c8>)
 800eb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb30:	e6cb      	b.n	800e8ca <__ieee754_pow+0x132>
 800eb32:	bf00      	nop
 800eb34:	f3af 8000 	nop.w
 800eb38:	60000000 	.word	0x60000000
 800eb3c:	3ff71547 	.word	0x3ff71547
 800eb40:	f85ddf44 	.word	0xf85ddf44
 800eb44:	3e54ae0b 	.word	0x3e54ae0b
 800eb48:	55555555 	.word	0x55555555
 800eb4c:	3fd55555 	.word	0x3fd55555
 800eb50:	652b82fe 	.word	0x652b82fe
 800eb54:	3ff71547 	.word	0x3ff71547
 800eb58:	00000000 	.word	0x00000000
 800eb5c:	bff00000 	.word	0xbff00000
 800eb60:	8800759c 	.word	0x8800759c
 800eb64:	7e37e43c 	.word	0x7e37e43c
 800eb68:	3ff00000 	.word	0x3ff00000
 800eb6c:	3fd00000 	.word	0x3fd00000
 800eb70:	3fe00000 	.word	0x3fe00000
 800eb74:	408fffff 	.word	0x408fffff
 800eb78:	4bd7      	ldr	r3, [pc, #860]	; (800eed8 <__ieee754_pow+0x740>)
 800eb7a:	ea03 0309 	and.w	r3, r3, r9
 800eb7e:	2200      	movs	r2, #0
 800eb80:	b92b      	cbnz	r3, 800eb8e <__ieee754_pow+0x3f6>
 800eb82:	4bd6      	ldr	r3, [pc, #856]	; (800eedc <__ieee754_pow+0x744>)
 800eb84:	f7f1 fcfc 	bl	8000580 <__aeabi_dmul>
 800eb88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	1523      	asrs	r3, r4, #20
 800eb90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb94:	4413      	add	r3, r2
 800eb96:	9309      	str	r3, [sp, #36]	; 0x24
 800eb98:	4bd1      	ldr	r3, [pc, #836]	; (800eee0 <__ieee754_pow+0x748>)
 800eb9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eba2:	429c      	cmp	r4, r3
 800eba4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eba8:	dd08      	ble.n	800ebbc <__ieee754_pow+0x424>
 800ebaa:	4bce      	ldr	r3, [pc, #824]	; (800eee4 <__ieee754_pow+0x74c>)
 800ebac:	429c      	cmp	r4, r3
 800ebae:	f340 8163 	ble.w	800ee78 <__ieee754_pow+0x6e0>
 800ebb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ebbc:	2400      	movs	r4, #0
 800ebbe:	00e3      	lsls	r3, r4, #3
 800ebc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebc2:	4bc9      	ldr	r3, [pc, #804]	; (800eee8 <__ieee754_pow+0x750>)
 800ebc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebc8:	ed93 7b00 	vldr	d7, [r3]
 800ebcc:	4629      	mov	r1, r5
 800ebce:	ec53 2b17 	vmov	r2, r3, d7
 800ebd2:	eeb0 8a47 	vmov.f32	s16, s14
 800ebd6:	eef0 8a67 	vmov.f32	s17, s15
 800ebda:	4682      	mov	sl, r0
 800ebdc:	f7f1 fb18 	bl	8000210 <__aeabi_dsub>
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	462b      	mov	r3, r5
 800ebe8:	ec51 0b18 	vmov	r0, r1, d8
 800ebec:	f7f1 fb12 	bl	8000214 <__adddf3>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	49bd      	ldr	r1, [pc, #756]	; (800eeec <__ieee754_pow+0x754>)
 800ebf8:	f7f1 fdec 	bl	80007d4 <__aeabi_ddiv>
 800ebfc:	ec41 0b19 	vmov	d9, r0, r1
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4630      	mov	r0, r6
 800ec06:	4639      	mov	r1, r7
 800ec08:	f7f1 fcba 	bl	8000580 <__aeabi_dmul>
 800ec0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ec18:	2300      	movs	r3, #0
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ec20:	46ab      	mov	fp, r5
 800ec22:	106d      	asrs	r5, r5, #1
 800ec24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec30:	2200      	movs	r2, #0
 800ec32:	4640      	mov	r0, r8
 800ec34:	4649      	mov	r1, r9
 800ec36:	4614      	mov	r4, r2
 800ec38:	461d      	mov	r5, r3
 800ec3a:	f7f1 fca1 	bl	8000580 <__aeabi_dmul>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4630      	mov	r0, r6
 800ec44:	4639      	mov	r1, r7
 800ec46:	f7f1 fae3 	bl	8000210 <__aeabi_dsub>
 800ec4a:	ec53 2b18 	vmov	r2, r3, d8
 800ec4e:	4606      	mov	r6, r0
 800ec50:	460f      	mov	r7, r1
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	f7f1 fadb 	bl	8000210 <__aeabi_dsub>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4650      	mov	r0, sl
 800ec60:	4659      	mov	r1, fp
 800ec62:	f7f1 fad5 	bl	8000210 <__aeabi_dsub>
 800ec66:	4642      	mov	r2, r8
 800ec68:	464b      	mov	r3, r9
 800ec6a:	f7f1 fc89 	bl	8000580 <__aeabi_dmul>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	4630      	mov	r0, r6
 800ec74:	4639      	mov	r1, r7
 800ec76:	f7f1 facb 	bl	8000210 <__aeabi_dsub>
 800ec7a:	ec53 2b19 	vmov	r2, r3, d9
 800ec7e:	f7f1 fc7f 	bl	8000580 <__aeabi_dmul>
 800ec82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec86:	ec41 0b18 	vmov	d8, r0, r1
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	f7f1 fc77 	bl	8000580 <__aeabi_dmul>
 800ec92:	a37d      	add	r3, pc, #500	; (adr r3, 800ee88 <__ieee754_pow+0x6f0>)
 800ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec98:	4604      	mov	r4, r0
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	f7f1 fc70 	bl	8000580 <__aeabi_dmul>
 800eca0:	a37b      	add	r3, pc, #492	; (adr r3, 800ee90 <__ieee754_pow+0x6f8>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 fab5 	bl	8000214 <__adddf3>
 800ecaa:	4622      	mov	r2, r4
 800ecac:	462b      	mov	r3, r5
 800ecae:	f7f1 fc67 	bl	8000580 <__aeabi_dmul>
 800ecb2:	a379      	add	r3, pc, #484	; (adr r3, 800ee98 <__ieee754_pow+0x700>)
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f7f1 faac 	bl	8000214 <__adddf3>
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	f7f1 fc5e 	bl	8000580 <__aeabi_dmul>
 800ecc4:	a376      	add	r3, pc, #472	; (adr r3, 800eea0 <__ieee754_pow+0x708>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f7f1 faa3 	bl	8000214 <__adddf3>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	f7f1 fc55 	bl	8000580 <__aeabi_dmul>
 800ecd6:	a374      	add	r3, pc, #464	; (adr r3, 800eea8 <__ieee754_pow+0x710>)
 800ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecdc:	f7f1 fa9a 	bl	8000214 <__adddf3>
 800ece0:	4622      	mov	r2, r4
 800ece2:	462b      	mov	r3, r5
 800ece4:	f7f1 fc4c 	bl	8000580 <__aeabi_dmul>
 800ece8:	a371      	add	r3, pc, #452	; (adr r3, 800eeb0 <__ieee754_pow+0x718>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	f7f1 fa91 	bl	8000214 <__adddf3>
 800ecf2:	4622      	mov	r2, r4
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	460f      	mov	r7, r1
 800ecf8:	462b      	mov	r3, r5
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	f7f1 fc3f 	bl	8000580 <__aeabi_dmul>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	4630      	mov	r0, r6
 800ed08:	4639      	mov	r1, r7
 800ed0a:	f7f1 fc39 	bl	8000580 <__aeabi_dmul>
 800ed0e:	4642      	mov	r2, r8
 800ed10:	4604      	mov	r4, r0
 800ed12:	460d      	mov	r5, r1
 800ed14:	464b      	mov	r3, r9
 800ed16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed1a:	f7f1 fa7b 	bl	8000214 <__adddf3>
 800ed1e:	ec53 2b18 	vmov	r2, r3, d8
 800ed22:	f7f1 fc2d 	bl	8000580 <__aeabi_dmul>
 800ed26:	4622      	mov	r2, r4
 800ed28:	462b      	mov	r3, r5
 800ed2a:	f7f1 fa73 	bl	8000214 <__adddf3>
 800ed2e:	4642      	mov	r2, r8
 800ed30:	4682      	mov	sl, r0
 800ed32:	468b      	mov	fp, r1
 800ed34:	464b      	mov	r3, r9
 800ed36:	4640      	mov	r0, r8
 800ed38:	4649      	mov	r1, r9
 800ed3a:	f7f1 fc21 	bl	8000580 <__aeabi_dmul>
 800ed3e:	4b6c      	ldr	r3, [pc, #432]	; (800eef0 <__ieee754_pow+0x758>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	4606      	mov	r6, r0
 800ed44:	460f      	mov	r7, r1
 800ed46:	f7f1 fa65 	bl	8000214 <__adddf3>
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	465b      	mov	r3, fp
 800ed4e:	f7f1 fa61 	bl	8000214 <__adddf3>
 800ed52:	9c04      	ldr	r4, [sp, #16]
 800ed54:	460d      	mov	r5, r1
 800ed56:	4622      	mov	r2, r4
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4640      	mov	r0, r8
 800ed5c:	4649      	mov	r1, r9
 800ed5e:	f7f1 fc0f 	bl	8000580 <__aeabi_dmul>
 800ed62:	4b63      	ldr	r3, [pc, #396]	; (800eef0 <__ieee754_pow+0x758>)
 800ed64:	4680      	mov	r8, r0
 800ed66:	4689      	mov	r9, r1
 800ed68:	2200      	movs	r2, #0
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	f7f1 fa4f 	bl	8000210 <__aeabi_dsub>
 800ed72:	4632      	mov	r2, r6
 800ed74:	463b      	mov	r3, r7
 800ed76:	f7f1 fa4b 	bl	8000210 <__aeabi_dsub>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	4650      	mov	r0, sl
 800ed80:	4659      	mov	r1, fp
 800ed82:	f7f1 fa45 	bl	8000210 <__aeabi_dsub>
 800ed86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed8a:	f7f1 fbf9 	bl	8000580 <__aeabi_dmul>
 800ed8e:	4622      	mov	r2, r4
 800ed90:	4606      	mov	r6, r0
 800ed92:	460f      	mov	r7, r1
 800ed94:	462b      	mov	r3, r5
 800ed96:	ec51 0b18 	vmov	r0, r1, d8
 800ed9a:	f7f1 fbf1 	bl	8000580 <__aeabi_dmul>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7f1 fa35 	bl	8000214 <__adddf3>
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	4640      	mov	r0, r8
 800edb4:	4649      	mov	r1, r9
 800edb6:	f7f1 fa2d 	bl	8000214 <__adddf3>
 800edba:	9c04      	ldr	r4, [sp, #16]
 800edbc:	a33e      	add	r3, pc, #248	; (adr r3, 800eeb8 <__ieee754_pow+0x720>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	4620      	mov	r0, r4
 800edc4:	460d      	mov	r5, r1
 800edc6:	f7f1 fbdb 	bl	8000580 <__aeabi_dmul>
 800edca:	4642      	mov	r2, r8
 800edcc:	ec41 0b18 	vmov	d8, r0, r1
 800edd0:	464b      	mov	r3, r9
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	f7f1 fa1b 	bl	8000210 <__aeabi_dsub>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4630      	mov	r0, r6
 800ede0:	4639      	mov	r1, r7
 800ede2:	f7f1 fa15 	bl	8000210 <__aeabi_dsub>
 800ede6:	a336      	add	r3, pc, #216	; (adr r3, 800eec0 <__ieee754_pow+0x728>)
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f7f1 fbc8 	bl	8000580 <__aeabi_dmul>
 800edf0:	a335      	add	r3, pc, #212	; (adr r3, 800eec8 <__ieee754_pow+0x730>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	4620      	mov	r0, r4
 800edfc:	4629      	mov	r1, r5
 800edfe:	f7f1 fbbf 	bl	8000580 <__aeabi_dmul>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	4630      	mov	r0, r6
 800ee08:	4639      	mov	r1, r7
 800ee0a:	f7f1 fa03 	bl	8000214 <__adddf3>
 800ee0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee10:	4b38      	ldr	r3, [pc, #224]	; (800eef4 <__ieee754_pow+0x75c>)
 800ee12:	4413      	add	r3, r2
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f7f1 f9fc 	bl	8000214 <__adddf3>
 800ee1c:	4682      	mov	sl, r0
 800ee1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee20:	468b      	mov	fp, r1
 800ee22:	f7f1 fb43 	bl	80004ac <__aeabi_i2d>
 800ee26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee28:	4b33      	ldr	r3, [pc, #204]	; (800eef8 <__ieee754_pow+0x760>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee30:	4606      	mov	r6, r0
 800ee32:	460f      	mov	r7, r1
 800ee34:	4652      	mov	r2, sl
 800ee36:	465b      	mov	r3, fp
 800ee38:	ec51 0b18 	vmov	r0, r1, d8
 800ee3c:	f7f1 f9ea 	bl	8000214 <__adddf3>
 800ee40:	4642      	mov	r2, r8
 800ee42:	464b      	mov	r3, r9
 800ee44:	f7f1 f9e6 	bl	8000214 <__adddf3>
 800ee48:	4632      	mov	r2, r6
 800ee4a:	463b      	mov	r3, r7
 800ee4c:	f7f1 f9e2 	bl	8000214 <__adddf3>
 800ee50:	9c04      	ldr	r4, [sp, #16]
 800ee52:	4632      	mov	r2, r6
 800ee54:	463b      	mov	r3, r7
 800ee56:	4620      	mov	r0, r4
 800ee58:	460d      	mov	r5, r1
 800ee5a:	f7f1 f9d9 	bl	8000210 <__aeabi_dsub>
 800ee5e:	4642      	mov	r2, r8
 800ee60:	464b      	mov	r3, r9
 800ee62:	f7f1 f9d5 	bl	8000210 <__aeabi_dsub>
 800ee66:	ec53 2b18 	vmov	r2, r3, d8
 800ee6a:	f7f1 f9d1 	bl	8000210 <__aeabi_dsub>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4650      	mov	r0, sl
 800ee74:	4659      	mov	r1, fp
 800ee76:	e606      	b.n	800ea86 <__ieee754_pow+0x2ee>
 800ee78:	2401      	movs	r4, #1
 800ee7a:	e6a0      	b.n	800ebbe <__ieee754_pow+0x426>
 800ee7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800eed0 <__ieee754_pow+0x738>
 800ee80:	e60d      	b.n	800ea9e <__ieee754_pow+0x306>
 800ee82:	bf00      	nop
 800ee84:	f3af 8000 	nop.w
 800ee88:	4a454eef 	.word	0x4a454eef
 800ee8c:	3fca7e28 	.word	0x3fca7e28
 800ee90:	93c9db65 	.word	0x93c9db65
 800ee94:	3fcd864a 	.word	0x3fcd864a
 800ee98:	a91d4101 	.word	0xa91d4101
 800ee9c:	3fd17460 	.word	0x3fd17460
 800eea0:	518f264d 	.word	0x518f264d
 800eea4:	3fd55555 	.word	0x3fd55555
 800eea8:	db6fabff 	.word	0xdb6fabff
 800eeac:	3fdb6db6 	.word	0x3fdb6db6
 800eeb0:	33333303 	.word	0x33333303
 800eeb4:	3fe33333 	.word	0x3fe33333
 800eeb8:	e0000000 	.word	0xe0000000
 800eebc:	3feec709 	.word	0x3feec709
 800eec0:	dc3a03fd 	.word	0xdc3a03fd
 800eec4:	3feec709 	.word	0x3feec709
 800eec8:	145b01f5 	.word	0x145b01f5
 800eecc:	be3e2fe0 	.word	0xbe3e2fe0
 800eed0:	00000000 	.word	0x00000000
 800eed4:	3ff00000 	.word	0x3ff00000
 800eed8:	7ff00000 	.word	0x7ff00000
 800eedc:	43400000 	.word	0x43400000
 800eee0:	0003988e 	.word	0x0003988e
 800eee4:	000bb679 	.word	0x000bb679
 800eee8:	0800fa38 	.word	0x0800fa38
 800eeec:	3ff00000 	.word	0x3ff00000
 800eef0:	40080000 	.word	0x40080000
 800eef4:	0800fa58 	.word	0x0800fa58
 800eef8:	0800fa48 	.word	0x0800fa48
 800eefc:	a3b5      	add	r3, pc, #724	; (adr r3, 800f1d4 <__ieee754_pow+0xa3c>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	4640      	mov	r0, r8
 800ef04:	4649      	mov	r1, r9
 800ef06:	f7f1 f985 	bl	8000214 <__adddf3>
 800ef0a:	4622      	mov	r2, r4
 800ef0c:	ec41 0b1a 	vmov	d10, r0, r1
 800ef10:	462b      	mov	r3, r5
 800ef12:	4630      	mov	r0, r6
 800ef14:	4639      	mov	r1, r7
 800ef16:	f7f1 f97b 	bl	8000210 <__aeabi_dsub>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	ec51 0b1a 	vmov	r0, r1, d10
 800ef22:	f7f1 fdbd 	bl	8000aa0 <__aeabi_dcmpgt>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	f47f adf8 	bne.w	800eb1c <__ieee754_pow+0x384>
 800ef2c:	4aa4      	ldr	r2, [pc, #656]	; (800f1c0 <__ieee754_pow+0xa28>)
 800ef2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef32:	4293      	cmp	r3, r2
 800ef34:	f340 810b 	ble.w	800f14e <__ieee754_pow+0x9b6>
 800ef38:	151b      	asrs	r3, r3, #20
 800ef3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef42:	fa4a f303 	asr.w	r3, sl, r3
 800ef46:	445b      	add	r3, fp
 800ef48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ef4c:	4e9d      	ldr	r6, [pc, #628]	; (800f1c4 <__ieee754_pow+0xa2c>)
 800ef4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef52:	4116      	asrs	r6, r2
 800ef54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ef58:	2000      	movs	r0, #0
 800ef5a:	ea23 0106 	bic.w	r1, r3, r6
 800ef5e:	f1c2 0214 	rsb	r2, r2, #20
 800ef62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ef66:	fa4a fa02 	asr.w	sl, sl, r2
 800ef6a:	f1bb 0f00 	cmp.w	fp, #0
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4620      	mov	r0, r4
 800ef74:	4629      	mov	r1, r5
 800ef76:	bfb8      	it	lt
 800ef78:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef7c:	f7f1 f948 	bl	8000210 <__aeabi_dsub>
 800ef80:	ec41 0b19 	vmov	d9, r0, r1
 800ef84:	4642      	mov	r2, r8
 800ef86:	464b      	mov	r3, r9
 800ef88:	ec51 0b19 	vmov	r0, r1, d9
 800ef8c:	f7f1 f942 	bl	8000214 <__adddf3>
 800ef90:	2400      	movs	r4, #0
 800ef92:	a379      	add	r3, pc, #484	; (adr r3, 800f178 <__ieee754_pow+0x9e0>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	4620      	mov	r0, r4
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	f7f1 faf0 	bl	8000580 <__aeabi_dmul>
 800efa0:	ec53 2b19 	vmov	r2, r3, d9
 800efa4:	4606      	mov	r6, r0
 800efa6:	460f      	mov	r7, r1
 800efa8:	4620      	mov	r0, r4
 800efaa:	4629      	mov	r1, r5
 800efac:	f7f1 f930 	bl	8000210 <__aeabi_dsub>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4640      	mov	r0, r8
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 f92a 	bl	8000210 <__aeabi_dsub>
 800efbc:	a370      	add	r3, pc, #448	; (adr r3, 800f180 <__ieee754_pow+0x9e8>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f7f1 fadd 	bl	8000580 <__aeabi_dmul>
 800efc6:	a370      	add	r3, pc, #448	; (adr r3, 800f188 <__ieee754_pow+0x9f0>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	4680      	mov	r8, r0
 800efce:	4689      	mov	r9, r1
 800efd0:	4620      	mov	r0, r4
 800efd2:	4629      	mov	r1, r5
 800efd4:	f7f1 fad4 	bl	8000580 <__aeabi_dmul>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4640      	mov	r0, r8
 800efde:	4649      	mov	r1, r9
 800efe0:	f7f1 f918 	bl	8000214 <__adddf3>
 800efe4:	4604      	mov	r4, r0
 800efe6:	460d      	mov	r5, r1
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4630      	mov	r0, r6
 800efee:	4639      	mov	r1, r7
 800eff0:	f7f1 f910 	bl	8000214 <__adddf3>
 800eff4:	4632      	mov	r2, r6
 800eff6:	463b      	mov	r3, r7
 800eff8:	4680      	mov	r8, r0
 800effa:	4689      	mov	r9, r1
 800effc:	f7f1 f908 	bl	8000210 <__aeabi_dsub>
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f902 	bl	8000210 <__aeabi_dsub>
 800f00c:	4642      	mov	r2, r8
 800f00e:	4606      	mov	r6, r0
 800f010:	460f      	mov	r7, r1
 800f012:	464b      	mov	r3, r9
 800f014:	4640      	mov	r0, r8
 800f016:	4649      	mov	r1, r9
 800f018:	f7f1 fab2 	bl	8000580 <__aeabi_dmul>
 800f01c:	a35c      	add	r3, pc, #368	; (adr r3, 800f190 <__ieee754_pow+0x9f8>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	4604      	mov	r4, r0
 800f024:	460d      	mov	r5, r1
 800f026:	f7f1 faab 	bl	8000580 <__aeabi_dmul>
 800f02a:	a35b      	add	r3, pc, #364	; (adr r3, 800f198 <__ieee754_pow+0xa00>)
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	f7f1 f8ee 	bl	8000210 <__aeabi_dsub>
 800f034:	4622      	mov	r2, r4
 800f036:	462b      	mov	r3, r5
 800f038:	f7f1 faa2 	bl	8000580 <__aeabi_dmul>
 800f03c:	a358      	add	r3, pc, #352	; (adr r3, 800f1a0 <__ieee754_pow+0xa08>)
 800f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f042:	f7f1 f8e7 	bl	8000214 <__adddf3>
 800f046:	4622      	mov	r2, r4
 800f048:	462b      	mov	r3, r5
 800f04a:	f7f1 fa99 	bl	8000580 <__aeabi_dmul>
 800f04e:	a356      	add	r3, pc, #344	; (adr r3, 800f1a8 <__ieee754_pow+0xa10>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	f7f1 f8dc 	bl	8000210 <__aeabi_dsub>
 800f058:	4622      	mov	r2, r4
 800f05a:	462b      	mov	r3, r5
 800f05c:	f7f1 fa90 	bl	8000580 <__aeabi_dmul>
 800f060:	a353      	add	r3, pc, #332	; (adr r3, 800f1b0 <__ieee754_pow+0xa18>)
 800f062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f066:	f7f1 f8d5 	bl	8000214 <__adddf3>
 800f06a:	4622      	mov	r2, r4
 800f06c:	462b      	mov	r3, r5
 800f06e:	f7f1 fa87 	bl	8000580 <__aeabi_dmul>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	4640      	mov	r0, r8
 800f078:	4649      	mov	r1, r9
 800f07a:	f7f1 f8c9 	bl	8000210 <__aeabi_dsub>
 800f07e:	4604      	mov	r4, r0
 800f080:	460d      	mov	r5, r1
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	4640      	mov	r0, r8
 800f088:	4649      	mov	r1, r9
 800f08a:	f7f1 fa79 	bl	8000580 <__aeabi_dmul>
 800f08e:	2200      	movs	r2, #0
 800f090:	ec41 0b19 	vmov	d9, r0, r1
 800f094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f098:	4620      	mov	r0, r4
 800f09a:	4629      	mov	r1, r5
 800f09c:	f7f1 f8b8 	bl	8000210 <__aeabi_dsub>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	ec51 0b19 	vmov	r0, r1, d9
 800f0a8:	f7f1 fb94 	bl	80007d4 <__aeabi_ddiv>
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	463b      	mov	r3, r7
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	f7f1 fa62 	bl	8000580 <__aeabi_dmul>
 800f0bc:	4632      	mov	r2, r6
 800f0be:	463b      	mov	r3, r7
 800f0c0:	f7f1 f8a8 	bl	8000214 <__adddf3>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	f7f1 f8a0 	bl	8000210 <__aeabi_dsub>
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	464b      	mov	r3, r9
 800f0d4:	f7f1 f89c 	bl	8000210 <__aeabi_dsub>
 800f0d8:	460b      	mov	r3, r1
 800f0da:	4602      	mov	r2, r0
 800f0dc:	493a      	ldr	r1, [pc, #232]	; (800f1c8 <__ieee754_pow+0xa30>)
 800f0de:	2000      	movs	r0, #0
 800f0e0:	f7f1 f896 	bl	8000210 <__aeabi_dsub>
 800f0e4:	e9cd 0100 	strd	r0, r1, [sp]
 800f0e8:	9b01      	ldr	r3, [sp, #4]
 800f0ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f0ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0f2:	da2f      	bge.n	800f154 <__ieee754_pow+0x9bc>
 800f0f4:	4650      	mov	r0, sl
 800f0f6:	ed9d 0b00 	vldr	d0, [sp]
 800f0fa:	f000 f9cd 	bl	800f498 <scalbn>
 800f0fe:	ec51 0b10 	vmov	r0, r1, d0
 800f102:	ec53 2b18 	vmov	r2, r3, d8
 800f106:	f7ff bbe0 	b.w	800e8ca <__ieee754_pow+0x132>
 800f10a:	4b30      	ldr	r3, [pc, #192]	; (800f1cc <__ieee754_pow+0xa34>)
 800f10c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f110:	429e      	cmp	r6, r3
 800f112:	f77f af0b 	ble.w	800ef2c <__ieee754_pow+0x794>
 800f116:	4b2e      	ldr	r3, [pc, #184]	; (800f1d0 <__ieee754_pow+0xa38>)
 800f118:	440b      	add	r3, r1
 800f11a:	4303      	orrs	r3, r0
 800f11c:	d00b      	beq.n	800f136 <__ieee754_pow+0x99e>
 800f11e:	a326      	add	r3, pc, #152	; (adr r3, 800f1b8 <__ieee754_pow+0xa20>)
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	ec51 0b18 	vmov	r0, r1, d8
 800f128:	f7f1 fa2a 	bl	8000580 <__aeabi_dmul>
 800f12c:	a322      	add	r3, pc, #136	; (adr r3, 800f1b8 <__ieee754_pow+0xa20>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	f7ff bbca 	b.w	800e8ca <__ieee754_pow+0x132>
 800f136:	4622      	mov	r2, r4
 800f138:	462b      	mov	r3, r5
 800f13a:	f7f1 f869 	bl	8000210 <__aeabi_dsub>
 800f13e:	4642      	mov	r2, r8
 800f140:	464b      	mov	r3, r9
 800f142:	f7f1 fca3 	bl	8000a8c <__aeabi_dcmpge>
 800f146:	2800      	cmp	r0, #0
 800f148:	f43f aef0 	beq.w	800ef2c <__ieee754_pow+0x794>
 800f14c:	e7e7      	b.n	800f11e <__ieee754_pow+0x986>
 800f14e:	f04f 0a00 	mov.w	sl, #0
 800f152:	e717      	b.n	800ef84 <__ieee754_pow+0x7ec>
 800f154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f158:	4619      	mov	r1, r3
 800f15a:	e7d2      	b.n	800f102 <__ieee754_pow+0x96a>
 800f15c:	491a      	ldr	r1, [pc, #104]	; (800f1c8 <__ieee754_pow+0xa30>)
 800f15e:	2000      	movs	r0, #0
 800f160:	f7ff bb9e 	b.w	800e8a0 <__ieee754_pow+0x108>
 800f164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f168:	f7ff bb9a 	b.w	800e8a0 <__ieee754_pow+0x108>
 800f16c:	9000      	str	r0, [sp, #0]
 800f16e:	f7ff bb76 	b.w	800e85e <__ieee754_pow+0xc6>
 800f172:	2100      	movs	r1, #0
 800f174:	f7ff bb60 	b.w	800e838 <__ieee754_pow+0xa0>
 800f178:	00000000 	.word	0x00000000
 800f17c:	3fe62e43 	.word	0x3fe62e43
 800f180:	fefa39ef 	.word	0xfefa39ef
 800f184:	3fe62e42 	.word	0x3fe62e42
 800f188:	0ca86c39 	.word	0x0ca86c39
 800f18c:	be205c61 	.word	0xbe205c61
 800f190:	72bea4d0 	.word	0x72bea4d0
 800f194:	3e663769 	.word	0x3e663769
 800f198:	c5d26bf1 	.word	0xc5d26bf1
 800f19c:	3ebbbd41 	.word	0x3ebbbd41
 800f1a0:	af25de2c 	.word	0xaf25de2c
 800f1a4:	3f11566a 	.word	0x3f11566a
 800f1a8:	16bebd93 	.word	0x16bebd93
 800f1ac:	3f66c16c 	.word	0x3f66c16c
 800f1b0:	5555553e 	.word	0x5555553e
 800f1b4:	3fc55555 	.word	0x3fc55555
 800f1b8:	c2f8f359 	.word	0xc2f8f359
 800f1bc:	01a56e1f 	.word	0x01a56e1f
 800f1c0:	3fe00000 	.word	0x3fe00000
 800f1c4:	000fffff 	.word	0x000fffff
 800f1c8:	3ff00000 	.word	0x3ff00000
 800f1cc:	4090cbff 	.word	0x4090cbff
 800f1d0:	3f6f3400 	.word	0x3f6f3400
 800f1d4:	652b82fe 	.word	0x652b82fe
 800f1d8:	3c971547 	.word	0x3c971547

0800f1dc <__ieee754_sqrt>:
 800f1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e0:	ec55 4b10 	vmov	r4, r5, d0
 800f1e4:	4e56      	ldr	r6, [pc, #344]	; (800f340 <__ieee754_sqrt+0x164>)
 800f1e6:	43ae      	bics	r6, r5
 800f1e8:	ee10 0a10 	vmov	r0, s0
 800f1ec:	ee10 3a10 	vmov	r3, s0
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	462a      	mov	r2, r5
 800f1f4:	d110      	bne.n	800f218 <__ieee754_sqrt+0x3c>
 800f1f6:	ee10 2a10 	vmov	r2, s0
 800f1fa:	462b      	mov	r3, r5
 800f1fc:	f7f1 f9c0 	bl	8000580 <__aeabi_dmul>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 f804 	bl	8000214 <__adddf3>
 800f20c:	4604      	mov	r4, r0
 800f20e:	460d      	mov	r5, r1
 800f210:	ec45 4b10 	vmov	d0, r4, r5
 800f214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f218:	2d00      	cmp	r5, #0
 800f21a:	dc10      	bgt.n	800f23e <__ieee754_sqrt+0x62>
 800f21c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f220:	4330      	orrs	r0, r6
 800f222:	d0f5      	beq.n	800f210 <__ieee754_sqrt+0x34>
 800f224:	b15d      	cbz	r5, 800f23e <__ieee754_sqrt+0x62>
 800f226:	ee10 2a10 	vmov	r2, s0
 800f22a:	462b      	mov	r3, r5
 800f22c:	ee10 0a10 	vmov	r0, s0
 800f230:	f7f0 ffee 	bl	8000210 <__aeabi_dsub>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	f7f1 facc 	bl	80007d4 <__aeabi_ddiv>
 800f23c:	e7e6      	b.n	800f20c <__ieee754_sqrt+0x30>
 800f23e:	1509      	asrs	r1, r1, #20
 800f240:	d076      	beq.n	800f330 <__ieee754_sqrt+0x154>
 800f242:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f246:	07ce      	lsls	r6, r1, #31
 800f248:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f24c:	bf5e      	ittt	pl
 800f24e:	0fda      	lsrpl	r2, r3, #31
 800f250:	005b      	lslpl	r3, r3, #1
 800f252:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f256:	0fda      	lsrs	r2, r3, #31
 800f258:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f25c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f260:	2000      	movs	r0, #0
 800f262:	106d      	asrs	r5, r5, #1
 800f264:	005b      	lsls	r3, r3, #1
 800f266:	f04f 0e16 	mov.w	lr, #22
 800f26a:	4684      	mov	ip, r0
 800f26c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f270:	eb0c 0401 	add.w	r4, ip, r1
 800f274:	4294      	cmp	r4, r2
 800f276:	bfde      	ittt	le
 800f278:	1b12      	suble	r2, r2, r4
 800f27a:	eb04 0c01 	addle.w	ip, r4, r1
 800f27e:	1840      	addle	r0, r0, r1
 800f280:	0052      	lsls	r2, r2, #1
 800f282:	f1be 0e01 	subs.w	lr, lr, #1
 800f286:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f28a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f28e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f292:	d1ed      	bne.n	800f270 <__ieee754_sqrt+0x94>
 800f294:	4671      	mov	r1, lr
 800f296:	2720      	movs	r7, #32
 800f298:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f29c:	4562      	cmp	r2, ip
 800f29e:	eb04 060e 	add.w	r6, r4, lr
 800f2a2:	dc02      	bgt.n	800f2aa <__ieee754_sqrt+0xce>
 800f2a4:	d113      	bne.n	800f2ce <__ieee754_sqrt+0xf2>
 800f2a6:	429e      	cmp	r6, r3
 800f2a8:	d811      	bhi.n	800f2ce <__ieee754_sqrt+0xf2>
 800f2aa:	2e00      	cmp	r6, #0
 800f2ac:	eb06 0e04 	add.w	lr, r6, r4
 800f2b0:	da43      	bge.n	800f33a <__ieee754_sqrt+0x15e>
 800f2b2:	f1be 0f00 	cmp.w	lr, #0
 800f2b6:	db40      	blt.n	800f33a <__ieee754_sqrt+0x15e>
 800f2b8:	f10c 0801 	add.w	r8, ip, #1
 800f2bc:	eba2 020c 	sub.w	r2, r2, ip
 800f2c0:	429e      	cmp	r6, r3
 800f2c2:	bf88      	it	hi
 800f2c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f2c8:	1b9b      	subs	r3, r3, r6
 800f2ca:	4421      	add	r1, r4
 800f2cc:	46c4      	mov	ip, r8
 800f2ce:	0052      	lsls	r2, r2, #1
 800f2d0:	3f01      	subs	r7, #1
 800f2d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f2d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f2da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2de:	d1dd      	bne.n	800f29c <__ieee754_sqrt+0xc0>
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	d006      	beq.n	800f2f2 <__ieee754_sqrt+0x116>
 800f2e4:	1c4c      	adds	r4, r1, #1
 800f2e6:	bf13      	iteet	ne
 800f2e8:	3101      	addne	r1, #1
 800f2ea:	3001      	addeq	r0, #1
 800f2ec:	4639      	moveq	r1, r7
 800f2ee:	f021 0101 	bicne.w	r1, r1, #1
 800f2f2:	1043      	asrs	r3, r0, #1
 800f2f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f2f8:	0849      	lsrs	r1, r1, #1
 800f2fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f2fe:	07c2      	lsls	r2, r0, #31
 800f300:	bf48      	it	mi
 800f302:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f306:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f30a:	460c      	mov	r4, r1
 800f30c:	463d      	mov	r5, r7
 800f30e:	e77f      	b.n	800f210 <__ieee754_sqrt+0x34>
 800f310:	0ada      	lsrs	r2, r3, #11
 800f312:	3815      	subs	r0, #21
 800f314:	055b      	lsls	r3, r3, #21
 800f316:	2a00      	cmp	r2, #0
 800f318:	d0fa      	beq.n	800f310 <__ieee754_sqrt+0x134>
 800f31a:	02d7      	lsls	r7, r2, #11
 800f31c:	d50a      	bpl.n	800f334 <__ieee754_sqrt+0x158>
 800f31e:	f1c1 0420 	rsb	r4, r1, #32
 800f322:	fa23 f404 	lsr.w	r4, r3, r4
 800f326:	1e4d      	subs	r5, r1, #1
 800f328:	408b      	lsls	r3, r1
 800f32a:	4322      	orrs	r2, r4
 800f32c:	1b41      	subs	r1, r0, r5
 800f32e:	e788      	b.n	800f242 <__ieee754_sqrt+0x66>
 800f330:	4608      	mov	r0, r1
 800f332:	e7f0      	b.n	800f316 <__ieee754_sqrt+0x13a>
 800f334:	0052      	lsls	r2, r2, #1
 800f336:	3101      	adds	r1, #1
 800f338:	e7ef      	b.n	800f31a <__ieee754_sqrt+0x13e>
 800f33a:	46e0      	mov	r8, ip
 800f33c:	e7be      	b.n	800f2bc <__ieee754_sqrt+0xe0>
 800f33e:	bf00      	nop
 800f340:	7ff00000 	.word	0x7ff00000

0800f344 <fabs>:
 800f344:	ec51 0b10 	vmov	r0, r1, d0
 800f348:	ee10 2a10 	vmov	r2, s0
 800f34c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f350:	ec43 2b10 	vmov	d0, r2, r3
 800f354:	4770      	bx	lr

0800f356 <finite>:
 800f356:	b082      	sub	sp, #8
 800f358:	ed8d 0b00 	vstr	d0, [sp]
 800f35c:	9801      	ldr	r0, [sp, #4]
 800f35e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f362:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f366:	0fc0      	lsrs	r0, r0, #31
 800f368:	b002      	add	sp, #8
 800f36a:	4770      	bx	lr
 800f36c:	0000      	movs	r0, r0
	...

0800f370 <nan>:
 800f370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f378 <nan+0x8>
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	00000000 	.word	0x00000000
 800f37c:	7ff80000 	.word	0x7ff80000

0800f380 <rint>:
 800f380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f382:	ec51 0b10 	vmov	r0, r1, d0
 800f386:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f38a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f38e:	2e13      	cmp	r6, #19
 800f390:	ee10 4a10 	vmov	r4, s0
 800f394:	460b      	mov	r3, r1
 800f396:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f39a:	dc58      	bgt.n	800f44e <rint+0xce>
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	da2b      	bge.n	800f3f8 <rint+0x78>
 800f3a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f3a4:	4302      	orrs	r2, r0
 800f3a6:	d023      	beq.n	800f3f0 <rint+0x70>
 800f3a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f3ac:	4302      	orrs	r2, r0
 800f3ae:	4254      	negs	r4, r2
 800f3b0:	4314      	orrs	r4, r2
 800f3b2:	0c4b      	lsrs	r3, r1, #17
 800f3b4:	0b24      	lsrs	r4, r4, #12
 800f3b6:	045b      	lsls	r3, r3, #17
 800f3b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f3bc:	ea44 0103 	orr.w	r1, r4, r3
 800f3c0:	4b32      	ldr	r3, [pc, #200]	; (800f48c <rint+0x10c>)
 800f3c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f3c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	f7f0 ff1f 	bl	8000214 <__adddf3>
 800f3d6:	e9cd 0100 	strd	r0, r1, [sp]
 800f3da:	463b      	mov	r3, r7
 800f3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	f7f0 ff15 	bl	8000210 <__aeabi_dsub>
 800f3e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	ec41 0b10 	vmov	d0, r0, r1
 800f3f4:	b003      	add	sp, #12
 800f3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f8:	4a25      	ldr	r2, [pc, #148]	; (800f490 <rint+0x110>)
 800f3fa:	4132      	asrs	r2, r6
 800f3fc:	ea01 0702 	and.w	r7, r1, r2
 800f400:	4307      	orrs	r7, r0
 800f402:	d0f5      	beq.n	800f3f0 <rint+0x70>
 800f404:	0851      	lsrs	r1, r2, #1
 800f406:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f40a:	4314      	orrs	r4, r2
 800f40c:	d00c      	beq.n	800f428 <rint+0xa8>
 800f40e:	ea23 0201 	bic.w	r2, r3, r1
 800f412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f416:	2e13      	cmp	r6, #19
 800f418:	fa43 f606 	asr.w	r6, r3, r6
 800f41c:	bf0c      	ite	eq
 800f41e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f422:	2400      	movne	r4, #0
 800f424:	ea42 0306 	orr.w	r3, r2, r6
 800f428:	4918      	ldr	r1, [pc, #96]	; (800f48c <rint+0x10c>)
 800f42a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f42e:	4622      	mov	r2, r4
 800f430:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f434:	4620      	mov	r0, r4
 800f436:	4629      	mov	r1, r5
 800f438:	f7f0 feec 	bl	8000214 <__adddf3>
 800f43c:	e9cd 0100 	strd	r0, r1, [sp]
 800f440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f444:	4622      	mov	r2, r4
 800f446:	462b      	mov	r3, r5
 800f448:	f7f0 fee2 	bl	8000210 <__aeabi_dsub>
 800f44c:	e7d0      	b.n	800f3f0 <rint+0x70>
 800f44e:	2e33      	cmp	r6, #51	; 0x33
 800f450:	dd07      	ble.n	800f462 <rint+0xe2>
 800f452:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f456:	d1cb      	bne.n	800f3f0 <rint+0x70>
 800f458:	ee10 2a10 	vmov	r2, s0
 800f45c:	f7f0 feda 	bl	8000214 <__adddf3>
 800f460:	e7c6      	b.n	800f3f0 <rint+0x70>
 800f462:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f466:	f04f 36ff 	mov.w	r6, #4294967295
 800f46a:	40d6      	lsrs	r6, r2
 800f46c:	4230      	tst	r0, r6
 800f46e:	d0bf      	beq.n	800f3f0 <rint+0x70>
 800f470:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f474:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f478:	bf1f      	itttt	ne
 800f47a:	ea24 0101 	bicne.w	r1, r4, r1
 800f47e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f482:	fa44 f202 	asrne.w	r2, r4, r2
 800f486:	ea41 0402 	orrne.w	r4, r1, r2
 800f48a:	e7cd      	b.n	800f428 <rint+0xa8>
 800f48c:	0800fa68 	.word	0x0800fa68
 800f490:	000fffff 	.word	0x000fffff
 800f494:	00000000 	.word	0x00000000

0800f498 <scalbn>:
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	ec55 4b10 	vmov	r4, r5, d0
 800f49e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	b99a      	cbnz	r2, 800f4d0 <scalbn+0x38>
 800f4a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f4ac:	4323      	orrs	r3, r4
 800f4ae:	d036      	beq.n	800f51e <scalbn+0x86>
 800f4b0:	4b39      	ldr	r3, [pc, #228]	; (800f598 <scalbn+0x100>)
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	ee10 0a10 	vmov	r0, s0
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f7f1 f861 	bl	8000580 <__aeabi_dmul>
 800f4be:	4b37      	ldr	r3, [pc, #220]	; (800f59c <scalbn+0x104>)
 800f4c0:	429e      	cmp	r6, r3
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	460d      	mov	r5, r1
 800f4c6:	da10      	bge.n	800f4ea <scalbn+0x52>
 800f4c8:	a32b      	add	r3, pc, #172	; (adr r3, 800f578 <scalbn+0xe0>)
 800f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ce:	e03a      	b.n	800f546 <scalbn+0xae>
 800f4d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f4d4:	428a      	cmp	r2, r1
 800f4d6:	d10c      	bne.n	800f4f2 <scalbn+0x5a>
 800f4d8:	ee10 2a10 	vmov	r2, s0
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	f7f0 fe98 	bl	8000214 <__adddf3>
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	e019      	b.n	800f51e <scalbn+0x86>
 800f4ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	3a36      	subs	r2, #54	; 0x36
 800f4f2:	4432      	add	r2, r6
 800f4f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4f8:	428a      	cmp	r2, r1
 800f4fa:	dd08      	ble.n	800f50e <scalbn+0x76>
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	a120      	add	r1, pc, #128	; (adr r1, 800f580 <scalbn+0xe8>)
 800f500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f504:	da1c      	bge.n	800f540 <scalbn+0xa8>
 800f506:	a120      	add	r1, pc, #128	; (adr r1, 800f588 <scalbn+0xf0>)
 800f508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50c:	e018      	b.n	800f540 <scalbn+0xa8>
 800f50e:	2a00      	cmp	r2, #0
 800f510:	dd08      	ble.n	800f524 <scalbn+0x8c>
 800f512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f51a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f51e:	ec45 4b10 	vmov	d0, r4, r5
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f528:	da19      	bge.n	800f55e <scalbn+0xc6>
 800f52a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f52e:	429e      	cmp	r6, r3
 800f530:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f534:	dd0a      	ble.n	800f54c <scalbn+0xb4>
 800f536:	a112      	add	r1, pc, #72	; (adr r1, 800f580 <scalbn+0xe8>)
 800f538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1e2      	bne.n	800f506 <scalbn+0x6e>
 800f540:	a30f      	add	r3, pc, #60	; (adr r3, 800f580 <scalbn+0xe8>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	f7f1 f81b 	bl	8000580 <__aeabi_dmul>
 800f54a:	e7cb      	b.n	800f4e4 <scalbn+0x4c>
 800f54c:	a10a      	add	r1, pc, #40	; (adr r1, 800f578 <scalbn+0xe0>)
 800f54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d0b8      	beq.n	800f4c8 <scalbn+0x30>
 800f556:	a10e      	add	r1, pc, #56	; (adr r1, 800f590 <scalbn+0xf8>)
 800f558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f55c:	e7b4      	b.n	800f4c8 <scalbn+0x30>
 800f55e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f562:	3236      	adds	r2, #54	; 0x36
 800f564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f568:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f56c:	4620      	mov	r0, r4
 800f56e:	4b0c      	ldr	r3, [pc, #48]	; (800f5a0 <scalbn+0x108>)
 800f570:	2200      	movs	r2, #0
 800f572:	e7e8      	b.n	800f546 <scalbn+0xae>
 800f574:	f3af 8000 	nop.w
 800f578:	c2f8f359 	.word	0xc2f8f359
 800f57c:	01a56e1f 	.word	0x01a56e1f
 800f580:	8800759c 	.word	0x8800759c
 800f584:	7e37e43c 	.word	0x7e37e43c
 800f588:	8800759c 	.word	0x8800759c
 800f58c:	fe37e43c 	.word	0xfe37e43c
 800f590:	c2f8f359 	.word	0xc2f8f359
 800f594:	81a56e1f 	.word	0x81a56e1f
 800f598:	43500000 	.word	0x43500000
 800f59c:	ffff3cb0 	.word	0xffff3cb0
 800f5a0:	3c900000 	.word	0x3c900000

0800f5a4 <_init>:
 800f5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a6:	bf00      	nop
 800f5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5aa:	bc08      	pop	{r3}
 800f5ac:	469e      	mov	lr, r3
 800f5ae:	4770      	bx	lr

0800f5b0 <_fini>:
 800f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b2:	bf00      	nop
 800f5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5b6:	bc08      	pop	{r3}
 800f5b8:	469e      	mov	lr, r3
 800f5ba:	4770      	bx	lr
