
tsm-flight-ec-firmware-pressboard-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3cc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800f598  0800f598  0001f598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa50  0800fa50  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa50  0800fa50  0001fa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa58  0800fa58  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa58  0800fa58  0001fa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa5c  0800fa5c  0001fa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800fa60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000214c  20000240  0800fca0  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000238c  0800fca0  0002238c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b62b  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fe  00000000  00000000  0004b89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  000500a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  00051620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267c8  00000000  00000000  000529b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd76  00000000  00000000  00079180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db070  00000000  00000000  00096ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00171fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000240 	.word	0x20000240
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800f57c 	.word	0x0800f57c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000244 	.word	0x20000244
 8000204:	0800f57c 	.word	0x0800f57c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96e 	b.w	8000f04 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468c      	mov	ip, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8083 	bne.w	8000d56 <__udivmoddi4+0x116>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d947      	bls.n	8000ce6 <__udivmoddi4+0xa6>
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	b142      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5c:	f1c2 0020 	rsb	r0, r2, #32
 8000c60:	fa24 f000 	lsr.w	r0, r4, r0
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4097      	lsls	r7, r2
 8000c68:	ea40 0c01 	orr.w	ip, r0, r1
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fbbc f6f8 	udiv	r6, ip, r8
 8000c78:	fa1f fe87 	uxth.w	lr, r7
 8000c7c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb06 f10e 	mul.w	r1, r6, lr
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x60>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 8119 	bcs.w	8000ec8 <__udivmoddi4+0x288>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 8116 	bls.w	8000ec8 <__udivmoddi4+0x288>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x8c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	f080 8105 	bcs.w	8000ecc <__udivmoddi4+0x28c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8102 	bls.w	8000ecc <__udivmoddi4+0x28c>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd0:	eba4 040e 	sub.w	r4, r4, lr
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa0>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	b902      	cbnz	r2, 8000cea <__udivmoddi4+0xaa>
 8000ce8:	deff      	udf	#255	; 0xff
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d150      	bne.n	8000d94 <__udivmoddi4+0x154>
 8000cf2:	1bcb      	subs	r3, r1, r7
 8000cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d02:	0c21      	lsrs	r1, r4, #16
 8000d04:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0xe4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0xe2>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	f200 80e9 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x10c>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x10a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80d9 	bhi.w	8000efc <__udivmoddi4+0x2bc>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e7bf      	b.n	8000cd6 <__udivmoddi4+0x96>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0x12e>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <__udivmoddi4+0x282>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x1cc>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0x140>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80b8 	bhi.w	8000ef0 <__udivmoddi4+0x2b0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0103 	sbc.w	r1, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	468c      	mov	ip, r1
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0a8      	beq.n	8000ce0 <__udivmoddi4+0xa0>
 8000d8e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000d94:	f1c2 0320 	rsb	r3, r2, #32
 8000d98:	fa20 f603 	lsr.w	r6, r0, r3
 8000d9c:	4097      	lsls	r7, r2
 8000d9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000da2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da6:	40d9      	lsrs	r1, r3
 8000da8:	4330      	orrs	r0, r6
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f108 	mul.w	r1, r6, r8
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x19c>
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dce:	f080 808d 	bcs.w	8000eec <__udivmoddi4+0x2ac>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 808a 	bls.w	8000eec <__udivmoddi4+0x2ac>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	443b      	add	r3, r7
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b281      	uxth	r1, r0
 8000de0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb00 f308 	mul.w	r3, r0, r8
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x1c4>
 8000df4:	1879      	adds	r1, r7, r1
 8000df6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfa:	d273      	bcs.n	8000ee4 <__udivmoddi4+0x2a4>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d971      	bls.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4439      	add	r1, r7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e0a:	e778      	b.n	8000cfe <__udivmoddi4+0xbe>
 8000e0c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e10:	fa03 f406 	lsl.w	r4, r3, r6
 8000e14:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e26:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	0c3b      	lsrs	r3, r7, #16
 8000e2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e32:	fa1f f884 	uxth.w	r8, r4
 8000e36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e42:	458a      	cmp	sl, r1
 8000e44:	fa02 f206 	lsl.w	r2, r2, r6
 8000e48:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x220>
 8000e4e:	1861      	adds	r1, r4, r1
 8000e50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e54:	d248      	bcs.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e56:	458a      	cmp	sl, r1
 8000e58:	d946      	bls.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5e:	4421      	add	r1, r4
 8000e60:	eba1 010a 	sub.w	r1, r1, sl
 8000e64:	b2bf      	uxth	r7, r7
 8000e66:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e72:	fb00 f808 	mul.w	r8, r0, r8
 8000e76:	45b8      	cmp	r8, r7
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x24a>
 8000e7a:	19e7      	adds	r7, r4, r7
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d22e      	bcs.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d92c      	bls.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4427      	add	r7, r4
 8000e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8e:	eba7 0708 	sub.w	r7, r7, r8
 8000e92:	fba0 8902 	umull	r8, r9, r0, r2
 8000e96:	454f      	cmp	r7, r9
 8000e98:	46c6      	mov	lr, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	d31a      	bcc.n	8000ed4 <__udivmoddi4+0x294>
 8000e9e:	d017      	beq.n	8000ed0 <__udivmoddi4+0x290>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x27a>
 8000ea2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eaa:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eae:	40f2      	lsrs	r2, r6
 8000eb0:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb4:	40f7      	lsrs	r7, r6
 8000eb6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	462e      	mov	r6, r5
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	e70b      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fd      	b.n	8000ccc <__udivmoddi4+0x8c>
 8000ed0:	4543      	cmp	r3, r8
 8000ed2:	d2e5      	bcs.n	8000ea0 <__udivmoddi4+0x260>
 8000ed4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed8:	eb69 0104 	sbc.w	r1, r9, r4
 8000edc:	3801      	subs	r0, #1
 8000ede:	e7df      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e7d2      	b.n	8000e8a <__udivmoddi4+0x24a>
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	e78d      	b.n	8000e04 <__udivmoddi4+0x1c4>
 8000ee8:	4681      	mov	r9, r0
 8000eea:	e7b9      	b.n	8000e60 <__udivmoddi4+0x220>
 8000eec:	4666      	mov	r6, ip
 8000eee:	e775      	b.n	8000ddc <__udivmoddi4+0x19c>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e74a      	b.n	8000d8a <__udivmoddi4+0x14a>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	4439      	add	r1, r7
 8000efa:	e713      	b.n	8000d24 <__udivmoddi4+0xe4>
 8000efc:	3802      	subs	r0, #2
 8000efe:	443c      	add	r4, r7
 8000f00:	e724      	b.n	8000d4c <__udivmoddi4+0x10c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <init_autosequence_constants>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_constants() {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	// Hardcoded timings
	autosequence.startup_motor_start_delay_ms = 500;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f12:	601a      	str	r2, [r3, #0]
	autosequence.hotfire_purge_off_time_ms = 50;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1a:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_on_time_ms = 1000;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f22:	61da      	str	r2, [r3, #28]
	autosequence.post_vent_off_time_ms = 6000;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2a:	621a      	str	r2, [r3, #32]
	autosequence.post_purge_off_time_ms = 10000;

	// Detection thresholds
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <init_autosequence_constants+0x60>)
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
	autosequence.ignition_ignitor_current_lower_bound = 0.3;  // TODO: fix this
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f34:	221e      	movs	r2, #30
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
	autosequence.ignition_ignitor_current_lower_bound_pass_min_detections = 30;  // 150ms

 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <init_autosequence_constants+0x64>)
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
	// Nominal chamber pressure is 280psi
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f40:	220a      	movs	r2, #10
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c
	autosequence.hotfire_chamber_pres_lower_bound = 70;                          // Nominal*0.25
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	655a      	str	r2, [r3, #84]	; 0x54
	autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections = 20;      // 100ms
	autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms = 2000;    // Wait 2s into state before counting
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <init_autosequence_constants+0x68>)
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c

 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
	autosequence.hotfire_chamber_pres_upper_bound = 500;                         // Nominal * 1.8
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000062c 	.word	0x2000062c
 8000f68:	40400000 	.word	0x40400000
 8000f6c:	430ca3d7 	.word	0x430ca3d7
 8000f70:	43d2f333 	.word	0x43d2f333

08000f74 <init_tank_pressure_control_configuration>:

/**
 * Configuring tank settings that don't change between tests.
 * Variables stored in nonvolatile memory are initialized elsewhere.
 *
 * TODO: say where they're initialized.
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 */
void init_tank_pressure_control_configuration() {

 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	705a      	strb	r2, [r3, #1]
	// LOX tank configuration
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	709a      	strb	r2, [r3, #2]
	tanks[LOX_TANK_NUM].is_cryogenic = 1;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <init_tank_pressure_control_configuration+0x84>)
 8000f88:	605a      	str	r2, [r3, #4]
	tanks[LOX_TANK_NUM].control_valve_channel = LOX_CONTROL_VALVE_CH;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000f8e:	609a      	str	r2, [r3, #8]
	tanks[LOX_TANK_NUM].control_pres = &pressure[LOX_TANK_PRES_CH];  // TODO: change
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000f94:	60da      	str	r2, [r3, #12]
	tanks[LOX_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f98:	2232      	movs	r2, #50	; 0x32
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	tanks[LOX_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
	tanks[LOX_TANK_NUM].PID_ctrl_loop_period_ms = 50;

 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	// Fuel tank configuration
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tanks[FUEL_TANK_NUM].is_cryogenic = 0;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <init_tank_pressure_control_configuration+0x90>)
 8000fb0:	659a      	str	r2, [r3, #88]	; 0x58
	tanks[FUEL_TANK_NUM].control_valve_channel = FUEL_CONTROL_VALVE_CH;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c
	tanks[FUEL_TANK_NUM].control_pres = &pressure[FUEL_TANK_PRES_CH];  // TODO: change
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000fbc:	661a      	str	r2, [r3, #96]	; 0x60
	tanks[FUEL_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc0:	2232      	movs	r2, #50	; 0x32
 8000fc2:	679a      	str	r2, [r3, #120]	; 0x78
	tanks[FUEL_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
	tanks[FUEL_TANK_NUM].PID_ctrl_loop_period_ms = 50;

 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
	// Motor info
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	70da      	strb	r2, [r3, #3]
	tanks[LOX_TANK_NUM].motor_num = LOX_TANK_NUM;
	tanks[LOX_TANK_NUM].motor_num = FUEL_TANK_NUM;

 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fd4:	615a      	str	r2, [r3, #20]
	// Bang bang thresholds
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <init_tank_pressure_control_configuration+0x98>)
 8000fda:	619a      	str	r2, [r3, #24]
	tanks[LOX_TANK_NUM].bang_bang_low_pres_diff = 10;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <init_tank_pressure_control_configuration+0x9c>)
 8000fe0:	669a      	str	r2, [r3, #104]	; 0x68
	tanks[LOX_TANK_NUM].bang_bang_high_pres_diff = 15;
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fe6:	66da      	str	r2, [r3, #108]	; 0x6c
	tanks[FUEL_TANK_NUM].bang_bang_low_pres_diff = 5;
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000584 	.word	0x20000584
 8000ff8:	200002f4 	.word	0x200002f4
 8000ffc:	200002fc 	.word	0x200002fc
 8001000:	20000360 	.word	0x20000360
 8001004:	200002f8 	.word	0x200002f8
 8001008:	41200000 	.word	0x41200000
 800100c:	41700000 	.word	0x41700000
 8001010:	40a00000 	.word	0x40a00000

08001014 <init_autosequence_control_variables>:
	tanks[FUEL_TANK_NUM].bang_bang_high_pres_diff = 10;
}

/**
 * Call this on initialization and every time you exit the autosequence
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
 */
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <init_autosequence_control_variables+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
void init_autosequence_control_variables() {
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	autosequence.startup_init_motor_pos_complete = 0;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <init_autosequence_control_variables+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	871a      	strh	r2, [r3, #56]	; 0x38

 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
	autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
	autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	autosequence.post_gse_fuel_vent_signal = 0;
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	2000062c 	.word	0x2000062c

0800107c <enter_abort_state>:
}


/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
 */
void enter_abort_state() {
	// Enter Abort state
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <enter_abort_state+0x90>)
 8001082:	2206      	movs	r2, #6
 8001084:	701a      	strb	r2, [r3, #0]
	// This line is for in case someone forgets to set Abort elsewhere
	STATE = Abort;

 8001086:	2100      	movs	r1, #0
 8001088:	2004      	movs	r0, #4
 800108a:	f006 fd88 	bl	8007b9e <set_valve_channel>
	// Close MPVs
 800108e:	2100      	movs	r1, #0
 8001090:	2005      	movs	r0, #5
 8001092:	f006 fd84 	bl	8007b9e <set_valve_channel>
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8001096:	2100      	movs	r1, #0
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fd80 	bl	8007b9e <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);

 800109e:	2100      	movs	r1, #0
 80010a0:	2007      	movs	r0, #7
 80010a2:	f006 fd7c 	bl	8007b9e <set_valve_channel>
	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);

 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f006 fd78 	bl	8007b9e <set_valve_channel>
	// Close control valves
 80010ae:	2100      	movs	r1, #0
 80010b0:	2003      	movs	r0, #3
 80010b2:	f006 fd74 	bl	8007b9e <set_valve_channel>
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);

 80010b6:	2100      	movs	r1, #0
 80010b8:	2006      	movs	r0, #6
 80010ba:	f006 fd70 	bl	8007b9e <set_valve_channel>
	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);

	// Open vent valves
 80010be:	2101      	movs	r1, #1
 80010c0:	2002      	movs	r0, #2
 80010c2:	f006 fd6c 	bl	8007b9e <set_valve_channel>
	// Fuel vent is handled by GSE controller
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <enter_abort_state+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <enter_abort_state+0x94>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	autosequence.post_gse_fuel_vent_command_enable = 1;
	autosequence.post_gse_fuel_vent_signal = VALVE_ON;

 80010d6:	2101      	movs	r1, #1
 80010d8:	2008      	movs	r0, #8
 80010da:	f006 fd60 	bl	8007b9e <set_valve_channel>
	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);

 80010de:	2000      	movs	r0, #0
 80010e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001114 <enter_abort_state+0x98>
 80010e4:	f000 ffb0 	bl	8002048 <moveMotorToPos>
	// Close motors (needle valves), 0 degrees should be closed.
 80010e8:	2001      	movs	r0, #1
 80010ea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001114 <enter_abort_state+0x98>
 80010ee:	f000 ffab 	bl	8002048 <moveMotorToPos>
	moveMotorToPos(0, LOX_TANK_NUM);
	moveMotorToPos(0, FUEL_TANK_NUM);

 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <enter_abort_state+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	// Stop TPC (not an actuation)
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <enter_abort_state+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;

	// Make sure telem is enabled, in case it aborted during
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <enter_abort_state+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
	// the MPV delay
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002ac 	.word	0x200002ac
 8001110:	2000062c 	.word	0x2000062c
 8001114:	00000000 	.word	0x00000000
 8001118:	20000582 	.word	0x20000582

0800111c <enter_safe_disarm_state>:

/**
 * Call this function to safe the system.
 * Not the same as abort.
 *
 * Can only be called in AutoPress and Startup.
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
 */
void enter_safe_disarm_state() {
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <enter_safe_disarm_state+0x24>)
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
	// Including this line in case programmer forgets to set it elsewhere
	STATE = Safe;

	// Close control valves and go back to Manual.
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f006 fd38 	bl	8007b9e <set_valve_channel>
	// TODO: should tank enable be looked at here?
 800112e:	2100      	movs	r1, #0
 8001130:	2003      	movs	r0, #3
 8001132:	f006 fd34 	bl	8007b9e <set_valve_channel>
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);

 8001136:	f7ff ff6d 	bl	8001014 <init_autosequence_control_variables>
	// Reset all control variables whenever exiting the autosequence
	init_autosequence_control_variables();

 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002ac 	.word	0x200002ac

08001144 <update_ignitor_break_detector>:
 * Keep a counter of consecutive times that the ematch current
 * is below a certain threshold while it's set high. If it
 * reaches a certain count, set a flag. Current should drop
 * out after the ematch burns and the ignitor lights.
 *
 *  This function is called every 5ms during the detection period.
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 */
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <update_ignitor_break_detector+0x58>)
 800114a:	ed93 7a06 	vldr	s14, [r3, #24]
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001150:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d506      	bpl.n	800116c <update_ignitor_break_detector+0x28>
void update_ignitor_break_detector() {			  // Counter
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001160:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001162:	3301      	adds	r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001168:	871a      	strh	r2, [r3, #56]	; 0x38
 800116a:	e002      	b.n	8001172 <update_ignitor_break_detector+0x2e>
	  if (ivlv[IGNITOR_CH] < autosequence.ignition_ignitor_current_lower_bound) {
		  ++autosequence.ignition_ignitor_current_lower_bound_pass_count;
	  }
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800116e:	2200      	movs	r2, #0
 8001170:	871a      	strh	r2, [r3, #56]	; 0x38
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
	  }

 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001174:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001176:	461a      	mov	r2, r3
	  // Threshold check
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34

 800117c:	429a      	cmp	r2, r3
 800117e:	d304      	bcc.n	800118a <update_ignitor_break_detector+0x46>
	  if (autosequence.ignition_ignitor_current_lower_bound_pass_count
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			  >= autosequence.ignition_ignitor_current_lower_bound_pass_min_detections) {
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 1;
	  }
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 8001188:	e003      	b.n	8001192 <update_ignitor_break_detector+0x4e>
	  }
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	2000030c 	.word	0x2000030c
 80011a0:	2000062c 	.word	0x2000062c

080011a4 <update_combustion_failure_detector>:
 * is below a certain threshold (wait until after the startup
 * transient). If it reaches a certain count, set a flag.
 * Pressure should stay above this threshold during
 * a nominal hotfire.
 *
 * This function is called every 5ms during the detection period.
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 */
void update_combustion_failure_detector() {
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <update_combustion_failure_detector+0x60>)
 80011aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d508      	bpl.n	80011d0 <update_combustion_failure_detector+0x2c>
	  // Counter
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80011ce:	e003      	b.n	80011d8 <update_combustion_failure_detector+0x34>
	  if (pressure[CHAMBER_PRES_CH] < autosequence.hotfire_chamber_pres_lower_bound) {
		  ++autosequence.hotfire_chamber_pres_lower_bound_pass_count;
	  }
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
	  }

 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011de:	461a      	mov	r2, r3
	  // Threshold check
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

 80011e4:	429a      	cmp	r2, r3
 80011e6:	d304      	bcc.n	80011f2 <update_combustion_failure_detector+0x4e>
	  if (autosequence.hotfire_chamber_pres_lower_bound_pass_count
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			  >= autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections) {
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 1;
	  }
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80011f0:	e003      	b.n	80011fa <update_combustion_failure_detector+0x56>
	  }
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200002f4 	.word	0x200002f4
 8001208:	2000062c 	.word	0x2000062c

0800120c <update_hard_start_detector>:
 * Keep a counter of consecutive times the chamber pressure
 * is above a certain threshold. If it reaches a certain count,
 * set a flag. Pressure should stay below this threshold for
 * the entire hotfire.
 *
 * This function is called every 5ms during the detection period.
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
 */
void update_hard_start_detector() {
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <update_hard_start_detector+0x60>)
 8001212:	ed93 7a05 	vldr	s14, [r3, #20]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <update_hard_start_detector+0x64>)
 8001218:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd08      	ble.n	8001238 <update_hard_start_detector+0x2c>
	// Counter
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <update_hard_start_detector+0x64>)
 8001228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <update_hard_start_detector+0x64>)
 8001232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001236:	e003      	b.n	8001240 <update_hard_start_detector+0x34>
	if (pressure[CHAMBER_PRES_CH] > autosequence.hotfire_chamber_pres_upper_bound) {
		++autosequence.hotfire_chamber_pres_upper_bound_pass_count;
	}
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <update_hard_start_detector+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	else {
		autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
	}

 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <update_hard_start_detector+0x64>)
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	461a      	mov	r2, r3
	// Threshold check
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <update_hard_start_detector+0x64>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

 800124c:	429a      	cmp	r2, r3
 800124e:	d304      	bcc.n	800125a <update_hard_start_detector+0x4e>
	if (autosequence.hotfire_chamber_pres_upper_bound_pass_count
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <update_hard_start_detector+0x64>)
 8001252:	2201      	movs	r2, #1
 8001254:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			>= autosequence.hotfire_chamber_pres_upper_bound_pass_min_detections) {
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 1;
	}
	else {
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 8001258:	e003      	b.n	8001262 <update_hard_start_detector+0x56>
	}
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <update_hard_start_detector+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	200002f4 	.word	0x200002f4
 8001270:	2000062c 	.word	0x2000062c

08001274 <manual_state_transition>:
	}
}

 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]

void manual_state_transition(uint8_t next_state) {

 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d108      	bne.n	8001296 <manual_state_transition+0x22>
	// Aborts work in any state
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <manual_state_transition+0x13c>)
 8001286:	2206      	movs	r2, #6
 8001288:	701a      	strb	r2, [r3, #0]
	if (next_state == Abort) {
 800128a:	f7ff fef7 	bl	800107c <enter_abort_state>
		STATE = Abort;
 800128e:	2001      	movs	r0, #1
 8001290:	f004 ff46 	bl	8006120 <set_status_flag>
		enter_abort_state();
 8001294:	e089      	b.n	80013aa <manual_state_transition+0x136>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
		return;
	}

 8001296:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <manual_state_transition+0x13c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <manual_state_transition+0x3a>
	// Check current state to determine next state transition
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 8082 	bne.w	80013aa <manual_state_transition+0x136>
	if (STATE == Manual) {
 80012a6:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <manual_state_transition+0x13c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e07d      	b.n	80013aa <manual_state_transition+0x136>
		if (next_state == Armed) {
			STATE = Armed;
		}
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <manual_state_transition+0x13c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10d      	bne.n	80012d2 <manual_state_transition+0x5e>
	}
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <manual_state_transition+0x50>
	else if (STATE == Armed) {
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <manual_state_transition+0x13c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e072      	b.n	80013aa <manual_state_transition+0x136>
		if (next_state == Manual) {
			STATE = Manual;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d16f      	bne.n	80013aa <manual_state_transition+0x136>
		}
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <manual_state_transition+0x13c>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e06b      	b.n	80013aa <manual_state_transition+0x136>
		else if (next_state == AutoPress) {
			STATE = AutoPress;
		}
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <manual_state_transition+0x13c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d120      	bne.n	800131c <manual_state_transition+0xa8>
	}
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <manual_state_transition+0x78>
	else if (STATE == AutoPress) {
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <manual_state_transition+0x13c>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	701a      	strb	r2, [r3, #0]
		if (next_state == Manual) {
 80012e6:	f7ff ff19 	bl	800111c <enter_safe_disarm_state>
 80012ea:	e05e      	b.n	80013aa <manual_state_transition+0x136>
			STATE = Safe;
			enter_safe_disarm_state();
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d15b      	bne.n	80013aa <manual_state_transition+0x136>
		}
		else if (next_state == Startup) {
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f006 fc52 	bl	8007b9e <set_valve_channel>
			// Close control valves
 80012fa:	2100      	movs	r1, #0
 80012fc:	2003      	movs	r0, #3
 80012fe:	f006 fc4e 	bl	8007b9e <set_valve_channel>
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <manual_state_transition+0x140>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <manual_state_transition+0x144>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <manual_state_transition+0x148>)
 8001312:	65d3      	str	r3, [r2, #92]	; 0x5c

 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <manual_state_transition+0x13c>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e046      	b.n	80013aa <manual_state_transition+0x136>
			autosequence.startup_start_time_ms = SYS_MILLIS;
			STATE = Startup;
		}
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <manual_state_transition+0x13c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d125      	bne.n	8001370 <manual_state_transition+0xfc>
	}
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <manual_state_transition+0xc2>
	else if (STATE == Startup) {
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <manual_state_transition+0x13c>)
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
		if (next_state == Manual) {
 8001330:	f7ff fef4 	bl	800111c <enter_safe_disarm_state>
 8001334:	e039      	b.n	80013aa <manual_state_transition+0x136>
			STATE = Safe;
			enter_safe_disarm_state();
		}
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d136      	bne.n	80013aa <manual_state_transition+0x136>
		// GUI sends continue command for some reason
		else if (next_state == Continue) {
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <manual_state_transition+0x148>)
 800133e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001342:	2b00      	cmp	r3, #0
 8001344:	d031      	beq.n	80013aa <manual_state_transition+0x136>
			// Only allow ignition after initial motor position is handled
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <manual_state_transition+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			if (autosequence.startup_init_motor_pos_complete) {
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <manual_state_transition+0x13c>)
 8001350:	2204      	movs	r2, #4
 8001352:	701a      	strb	r2, [r3, #0]
				autosequence.startup_init_motor_pos_complete = 0;  // Reset flag
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <manual_state_transition+0x140>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <manual_state_transition+0x144>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <manual_state_transition+0x148>)
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
				STATE = Ignition;
 8001366:	2101      	movs	r1, #1
 8001368:	2008      	movs	r0, #8
 800136a:	f006 fc18 	bl	8007b9e <set_valve_channel>
 800136e:	e01c      	b.n	80013aa <manual_state_transition+0x136>
				autosequence.ignition_start_time_ms = SYS_MILLIS;
				set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
			}
		}
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <manual_state_transition+0x13c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d108      	bne.n	800138a <manual_state_transition+0x116>
	}
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <manual_state_transition+0x136>
	else if (STATE == IgnitionFail) {
 800137e:	f7ff fe49 	bl	8001014 <init_autosequence_control_variables>
		if (next_state == Manual) {
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <manual_state_transition+0x13c>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e00f      	b.n	80013aa <manual_state_transition+0x136>
			init_autosequence_control_variables();
			STATE = Manual;  // Operator must dismiss IgnitionFail condition
		}
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <manual_state_transition+0x13c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d10b      	bne.n	80013aa <manual_state_transition+0x136>
	}
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d108      	bne.n	80013aa <manual_state_transition+0x136>
	else if (STATE == Abort) {
 8001398:	f7ff fe3c 	bl	8001014 <init_autosequence_control_variables>
		if (next_state == Manual) {
			init_autosequence_control_variables();
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <manual_state_transition+0x148>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			// Stop venting fuel tank
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <manual_state_transition+0x13c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
			autosequence.post_gse_fuel_vent_command_enable = 0;
			STATE = Manual;  // Operator must dismiss Abort condition
		}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002ac 	.word	0x200002ac
 80013b4:	20000904 	.word	0x20000904
 80013b8:	10624dd3 	.word	0x10624dd3
 80013bc:	2000062c 	.word	0x2000062c

080013c0 <get_ellapsed_time_in_autosequence_state_ms>:
	}
}

/**
 * Only works for Startup, Ignition, Hotfire, and Post
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
 */
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d10a      	bne.n	80013e2 <get_ellapsed_time_in_autosequence_state_ms+0x22>
uint32_t get_ellapsed_time_in_autosequence_state_ms() {
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099a      	lsrs	r2, r3, #6
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	e02d      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	if (STATE == Startup) {
		return SYS_MILLIS - autosequence.startup_start_time_ms;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d10a      	bne.n	8001400 <get_ellapsed_time_in_autosequence_state_ms+0x40>
	}
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	099a      	lsrs	r2, r3, #6
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	e01e      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	else if (STATE == Ignition) {
		return SYS_MILLIS - autosequence.ignition_start_time_ms;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10a      	bne.n	800141e <get_ellapsed_time_in_autosequence_state_ms+0x5e>
	}
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099a      	lsrs	r2, r3, #6
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	e00f      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	else if (STATE == Hotfire) {
		return SYS_MILLIS - autosequence.hotfire_start_time_ms;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d10a      	bne.n	800143c <get_ellapsed_time_in_autosequence_state_ms+0x7c>
	}
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099a      	lsrs	r2, r3, #6
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	e000      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	else if (STATE == Post) {
		return SYS_MILLIS - autosequence.post_start_time_ms;
	}
 800143c:	2300      	movs	r3, #0
	else {
		return 0;
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200002ac 	.word	0x200002ac
 800144c:	20000904 	.word	0x20000904
 8001450:	10624dd3 	.word	0x10624dd3
 8001454:	2000062c 	.word	0x2000062c

08001458 <get_remaining_time_in_autosequence_state>:
	}
}

/*
 * Only Ignition, Hotfire, and Post have defined time limits
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 */
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d10b      	bne.n	8001480 <get_remaining_time_in_autosequence_state+0x28>
uint32_t get_remaining_time_in_autosequence_state(uint32_t T_state) {
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
	if (STATE == Ignition) {
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	e012      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
		return (autosequence.ignition_ignitor_on_delay_ms
				+ autosequence.ignition_ignitor_high_duration_ms) - T_state;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d104      	bne.n	8001492 <get_remaining_time_in_autosequence_state+0x3a>
	}
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	e009      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	else if (STATE == Hotfire) {
		return autosequence.hotfire_test_duration_ms - T_state;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d104      	bne.n	80014a4 <get_remaining_time_in_autosequence_state+0x4c>
	}
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	e000      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	else if (STATE == Post) {
		return autosequence.post_purge_off_time_ms - T_state;
	}
 80014a4:	2300      	movs	r3, #0
	else {
		return 0;
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200002ac 	.word	0x200002ac
 80014b8:	2000062c 	.word	0x2000062c

080014bc <execute_autosequence>:
	}
}

/**
 * Called every main while loop
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
 */
void execute_autosequence() {

 80014c0:	f7ff ff7e 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4ab7      	ldr	r2, [pc, #732]	; (80017a4 <execute_autosequence+0x2e8>)
 80014c8:	6293      	str	r3, [r2, #40]	; 0x28
	// Autosequence timings are done relative to the start of the state
	autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();

	// Update time remaining in state for GUI
 80014ca:	4bb6      	ldr	r3, [pc, #728]	; (80017a4 <execute_autosequence+0x2e8>)
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffc2 	bl	8001458 <get_remaining_time_in_autosequence_state>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3

 80014d8:	4bb3      	ldr	r3, [pc, #716]	; (80017a8 <execute_autosequence+0x2ec>)
 80014da:	601a      	str	r2, [r3, #0]
	state_rem_duration =
			get_remaining_time_in_autosequence_state(autosequence.T_state);

 80014dc:	4bb3      	ldr	r3, [pc, #716]	; (80017ac <execute_autosequence+0x2f0>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d15a      	bne.n	800159a <execute_autosequence+0xde>
	// Doesn't use if else within each state in case the timings overlap
	if (STATE == Ignition) {
		// Purge should've turned on when entering Ignition
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <execute_autosequence+0x2e8>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	4aae      	ldr	r2, [pc, #696]	; (80017a4 <execute_autosequence+0x2e8>)
 80014ea:	8892      	ldrh	r2, [r2, #4]
 80014ec:	b292      	uxth	r2, r2
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d303      	bcc.n	80014fa <execute_autosequence+0x3e>
		// Wait for the delay, then turn ignitor on
 80014f2:	2101      	movs	r1, #1
 80014f4:	2006      	movs	r0, #6
 80014f6:	f006 fb52 	bl	8007b9e <set_valve_channel>
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms) {
			set_valve_channel(IGNITOR_CH, VALVE_ON);
		}
 80014fa:	4baa      	ldr	r3, [pc, #680]	; (80017a4 <execute_autosequence+0x2e8>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4aa9      	ldr	r2, [pc, #676]	; (80017a4 <execute_autosequence+0x2e8>)
 8001500:	8892      	ldrh	r2, [r2, #4]
 8001502:	b292      	uxth	r2, r2
 8001504:	4611      	mov	r1, r2
		// Hold ignitor high for a certain amount of time
 8001506:	4aa7      	ldr	r2, [pc, #668]	; (80017a4 <execute_autosequence+0x2e8>)
 8001508:	88d2      	ldrh	r2, [r2, #6]
 800150a:	b292      	uxth	r2, r2
 800150c:	440a      	add	r2, r1
		}
 800150e:	4293      	cmp	r3, r2
 8001510:	f0c0 816c 	bcc.w	80017ec <execute_autosequence+0x330>
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms
				+ autosequence.ignition_ignitor_high_duration_ms) {

			// Only proceed to Hotfire if the ignitor break is detected
 8001514:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <execute_autosequence+0x2e8>)
 8001516:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <execute_autosequence+0xa6>
			// and automatic aborts are enabled
 8001520:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <execute_autosequence+0x2e8>)
 8001522:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
			// Only proceed to Hotfire if the ignitor break is detected
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11b      	bne.n	8001562 <execute_autosequence+0xa6>
			if (autosequence.enable_auto_aborts &&
					!autosequence.ignition_ignitor_current_lower_bound_threshold_passed) {
 800152a:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <execute_autosequence+0x2f0>)
 800152c:	2209      	movs	r2, #9
 800152e:	701a      	strb	r2, [r3, #0]
				// Transition to IgnitionFail state
				STATE = IgnitionFail;

 8001530:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <execute_autosequence+0x2e8>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				// Reset all control variables whenever exiting the autosequence
 8001538:	f7ff fd6c 	bl	8001014 <init_autosequence_control_variables>
				autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;  // Not needed
				init_autosequence_control_variables();

 800153c:	f7ff fd6a 	bl	8001014 <init_autosequence_control_variables>
				// Reset all control variables whenever exiting the autosequence
				init_autosequence_control_variables();

 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f006 fb2b 	bl	8007b9e <set_valve_channel>
				// Close control valves
 8001548:	2100      	movs	r1, #0
 800154a:	2003      	movs	r0, #3
 800154c:	f006 fb27 	bl	8007b9e <set_valve_channel>
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
				set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);

 8001550:	2100      	movs	r1, #0
 8001552:	2006      	movs	r0, #6
 8001554:	f006 fb23 	bl	8007b9e <set_valve_channel>
				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);

 8001558:	2100      	movs	r1, #0
 800155a:	2008      	movs	r0, #8
 800155c:	f006 fb1f 	bl	8007b9e <set_valve_channel>
 8001560:	e144      	b.n	80017ec <execute_autosequence+0x330>
				set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);

				// Now wait for operator to go to Manual
			}
			// Successful ignitor break OR auto aborts disabled
			else {
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <execute_autosequence+0x2f0>)
 8001564:	2205      	movs	r2, #5
 8001566:	701a      	strb	r2, [r3, #0]
				// Transition to Hotfire state
 8001568:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <execute_autosequence+0x2f4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a91      	ldr	r2, [pc, #580]	; (80017b4 <execute_autosequence+0x2f8>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <execute_autosequence+0x2e8>)
 8001578:	6653      	str	r3, [r2, #100]	; 0x64
				STATE = Hotfire;
				autosequence.hotfire_start_time_ms = SYS_MILLIS;

 800157a:	2100      	movs	r1, #0
 800157c:	2006      	movs	r0, #6
 800157e:	f006 fb0e 	bl	8007b9e <set_valve_channel>
				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);

 8001582:	2101      	movs	r1, #1
 8001584:	2001      	movs	r0, #1
 8001586:	f006 fb0a 	bl	8007b9e <set_valve_channel>
				// Open LOX MPV
				set_valve_channel(LOX_MPV_VALVE_CH, VALVE_ON);

 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f006 fb06 	bl	8007b9e <set_valve_channel>
				// Open LOX control valve
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_ON);

				// Disable telemetry to prevent telem from blocking valve
				// timings to prevent a hard start
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <execute_autosequence+0x2fc>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e128      	b.n	80017ec <execute_autosequence+0x330>
				// TODO: get rid of this when DMA tx is working?
				telem_disabled = 1;
			}
		}
	}
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <execute_autosequence+0x2f0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	f040 80c0 	bne.w	8001724 <execute_autosequence+0x268>

	else if (STATE == Hotfire) {
		// Tank pressure control periodic function calls handled in main()
		// Not using else if in case the timings overlap

 80015a4:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <execute_autosequence+0x2e8>)
 80015a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02b      	beq.n	8001608 <execute_autosequence+0x14c>
		// Automatic abort cases
		if (autosequence.enable_auto_aborts) {
			// Chamber pressure too low - only active 1s after Hotfire
			// see update_combustion_failure() and its call in main()
 80015b0:	4b7c      	ldr	r3, [pc, #496]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d911      	bls.n	80015e0 <execute_autosequence+0x124>
			// Double check that it waits until after the startup transient
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <execute_autosequence+0x2e8>)
 80015be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <execute_autosequence+0x124>
			if (autosequence.T_state > autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms
					&& autosequence.hotfire_chamber_pres_lower_bound_threshold_passed) {
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <execute_autosequence+0x2e8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				// Reset abort flag
				autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;

 80015ce:	4b77      	ldr	r3, [pc, #476]	; (80017ac <execute_autosequence+0x2f0>)
 80015d0:	2206      	movs	r2, #6
 80015d2:	701a      	strb	r2, [r3, #0]
				// Handle abort
 80015d4:	f7ff fd52 	bl	800107c <enter_abort_state>
				STATE = Abort;
 80015d8:	2002      	movs	r0, #2
 80015da:	f004 fda1 	bl	8006120 <set_status_flag>
				enter_abort_state();
 80015de:	e115      	b.n	800180c <execute_autosequence+0x350>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_LOW);
				return;  // Stop other valves from actuating this loop
			}

			// Chamber pressure too high - active through entire Hotfire
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <execute_autosequence+0x300>)
 80015e2:	ed93 7a05 	vldr	s14, [r3, #20]
			// Aborts on first instance of detection to catch hard starts
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <execute_autosequence+0x2e8>)
 80015e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
			// Chamber pressure too high - active through entire Hotfire
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd08      	ble.n	8001608 <execute_autosequence+0x14c>
			if (pressure[CHAMBER_PRES_CH]
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <execute_autosequence+0x2f0>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	701a      	strb	r2, [r3, #0]
						 > autosequence.hotfire_chamber_pres_upper_bound) {
 80015fc:	f7ff fd3e 	bl	800107c <enter_abort_state>
				STATE = Abort;
 8001600:	2003      	movs	r0, #3
 8001602:	f004 fd8d 	bl	8006120 <set_status_flag>
				enter_abort_state();
 8001606:	e101      	b.n	800180c <execute_autosequence+0x350>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_HIGH);
				return;  // Stop other valves from actuating this loop
			}
		}

		// Turn on LOX pressure control
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <execute_autosequence+0x2e8>)
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <execute_autosequence+0x2e8>)
 800160e:	8992      	ldrh	r2, [r2, #12]
 8001610:	b292      	uxth	r2, r2
 8001612:	4293      	cmp	r3, r2
 8001614:	d30b      	bcc.n	800162e <execute_autosequence+0x172>
		// Relative to 0 because LOX leads
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <execute_autosequence+0x2e8>)
 8001618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <execute_autosequence+0x172>
		if (autosequence.T_state >= (0 + autosequence.hotfire_pid_start_delay_ms)
				&& !autosequence.hotfire_lox_tank_enable_PID_control) {
 8001620:	4867      	ldr	r0, [pc, #412]	; (80017c0 <execute_autosequence+0x304>)
 8001622:	f005 f8d6 	bl	80067d2 <tank_init_control_loop>
			// Should only get called once when it starts pressure control
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <execute_autosequence+0x2e8>)
 8001628:	2201      	movs	r2, #1
 800162a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			tank_init_control_loop(&tanks[LOX_TANK_NUM]);
			autosequence.hotfire_lox_tank_enable_PID_control = 1;
		}

 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <execute_autosequence+0x2e8>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <execute_autosequence+0x2e8>)
 8001634:	7a12      	ldrb	r2, [r2, #8]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	4293      	cmp	r3, r2
 800163a:	d30e      	bcc.n	800165a <execute_autosequence+0x19e>
		// Fuel on
		if (autosequence.T_state >= autosequence.hotfire_fuel_mpv_delay_ms) {
 800163c:	2101      	movs	r1, #1
 800163e:	2005      	movs	r0, #5
 8001640:	f006 faad 	bl	8007b9e <set_valve_channel>
			// Open Fuel MPV (Press AND Vent)
 8001644:	2101      	movs	r1, #1
 8001646:	2004      	movs	r0, #4
 8001648:	f006 faa9 	bl	8007b9e <set_valve_channel>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_ON);
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_ON);

 800164c:	2101      	movs	r1, #1
 800164e:	2003      	movs	r0, #3
 8001650:	f006 faa5 	bl	8007b9e <set_valve_channel>
			// Open Fuel control valve
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_ON);

			// Re-enable telemetry
 8001654:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <execute_autosequence+0x2fc>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
			// TODO: remove this when DMA tx is working?
			telem_disabled = 0;
		}

		// Turn on Fuel pressure control
 800165a:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <execute_autosequence+0x2e8>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <execute_autosequence+0x2e8>)
 8001660:	7a12      	ldrb	r2, [r2, #8]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	4611      	mov	r1, r2
		// Delay is relative to MPV opening
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <execute_autosequence+0x2e8>)
 8001668:	8992      	ldrh	r2, [r2, #12]
 800166a:	b292      	uxth	r2, r2
 800166c:	440a      	add	r2, r1
		// Turn on Fuel pressure control
 800166e:	4293      	cmp	r3, r2
 8001670:	d30b      	bcc.n	800168a <execute_autosequence+0x1ce>
		if (autosequence.T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <execute_autosequence+0x2e8>)
 8001674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <execute_autosequence+0x1ce>
				+ autosequence.hotfire_pid_start_delay_ms)
				&& !autosequence.hotfire_fuel_tank_enable_PID_control) {
 800167c:	4851      	ldr	r0, [pc, #324]	; (80017c4 <execute_autosequence+0x308>)
 800167e:	f005 f8a8 	bl	80067d2 <tank_init_control_loop>
			// Should only get called once when it starts pressure control
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <execute_autosequence+0x2e8>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			tank_init_control_loop(&tanks[FUEL_TANK_NUM]);
			autosequence.hotfire_fuel_tank_enable_PID_control = 1;
		}

 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <execute_autosequence+0x2e8>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <execute_autosequence+0x2e8>)
 8001690:	8952      	ldrh	r2, [r2, #10]
 8001692:	b292      	uxth	r2, r2
 8001694:	4293      	cmp	r3, r2
 8001696:	d303      	bcc.n	80016a0 <execute_autosequence+0x1e4>
		// Nozzle film cooling timing is relative to LOX MPV opening
		if (autosequence.T_state >= autosequence.hotfire_film_cooling_on_time_ms) {
 8001698:	2101      	movs	r1, #1
 800169a:	2007      	movs	r0, #7
 800169c:	f006 fa7f 	bl	8007b9e <set_valve_channel>
			// Nozzle film cooling on
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_ON);
		}

 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d303      	bcc.n	80016b4 <execute_autosequence+0x1f8>
		// After combustion starts, turn off purge
		if (autosequence.T_state >= autosequence.hotfire_purge_off_time_ms) {
 80016ac:	2100      	movs	r1, #0
 80016ae:	2008      	movs	r0, #8
 80016b0:	f006 fa75 	bl	8007b9e <set_valve_channel>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
		}

 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <execute_autosequence+0x2e8>)
 80016b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <execute_autosequence+0x2e8>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f0c0 8095 	bcc.w	80017ec <execute_autosequence+0x330>
		// Stop hotfire
		if (autosequence.T_state >= autosequence.hotfire_test_duration_ms) {
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <execute_autosequence+0x2f0>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	701a      	strb	r2, [r3, #0]
			// Transition to Post state
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <execute_autosequence+0x2f4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <execute_autosequence+0x2f8>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <execute_autosequence+0x2e8>)
 80016d8:	6693      	str	r3, [r2, #104]	; 0x68
			STATE = Post;
			autosequence.post_start_time_ms = SYS_MILLIS;

 80016da:	2100      	movs	r1, #0
 80016dc:	2004      	movs	r0, #4
 80016de:	f006 fa5e 	bl	8007b9e <set_valve_channel>
			// Close LOX and Fuel MPVs
 80016e2:	2100      	movs	r1, #0
 80016e4:	2005      	movs	r0, #5
 80016e6:	f006 fa5a 	bl	8007b9e <set_valve_channel>
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f006 fa56 	bl	8007b9e <set_valve_channel>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
			set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);

 80016f2:	2100      	movs	r1, #0
 80016f4:	2007      	movs	r0, #7
 80016f6:	f006 fa52 	bl	8007b9e <set_valve_channel>
			// Nozzle film cooling off
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);

 80016fa:	2100      	movs	r1, #0
 80016fc:	2000      	movs	r0, #0
 80016fe:	f006 fa4e 	bl	8007b9e <set_valve_channel>
			// Close control valves
 8001702:	2100      	movs	r1, #0
 8001704:	2003      	movs	r0, #3
 8001706:	f006 fa4a 	bl	8007b9e <set_valve_channel>
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);

 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <execute_autosequence+0x2e8>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			// Stop tank pressure control
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <execute_autosequence+0x2e8>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			autosequence.hotfire_lox_tank_enable_PID_control = 0;
			autosequence.hotfire_fuel_tank_enable_PID_control = 0;

 800171a:	2101      	movs	r1, #1
 800171c:	2008      	movs	r0, #8
 800171e:	f006 fa3e 	bl	8007b9e <set_valve_channel>
 8001722:	e063      	b.n	80017ec <execute_autosequence+0x330>
			// Purge high
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
		}
	}
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <execute_autosequence+0x2f0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d14d      	bne.n	80017c8 <execute_autosequence+0x30c>

	else if (STATE == Post) {
		// MPVs should already be closed and purge should've started by now
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <execute_autosequence+0x2e8>)
 800172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <execute_autosequence+0x2e8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	429a      	cmp	r2, r3
 8001736:	d30b      	bcc.n	8001750 <execute_autosequence+0x294>

		if (autosequence.T_state >= autosequence.post_vent_on_time_ms) {
 8001738:	2101      	movs	r1, #1
 800173a:	2002      	movs	r0, #2
 800173c:	f006 fa2f 	bl	8007b9e <set_valve_channel>
			// Vent both tanks
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);

 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <execute_autosequence+0x2e8>)
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			// Fuel vent handled by GSE controller
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <execute_autosequence+0x2e8>)
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			autosequence.post_gse_fuel_vent_command_enable = 1;
			autosequence.post_gse_fuel_vent_signal = VALVE_ON;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <execute_autosequence+0x2e8>)
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <execute_autosequence+0x2e8>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	d30b      	bcc.n	8001774 <execute_autosequence+0x2b8>
		}
		if (autosequence.T_state >= autosequence.post_vent_off_time_ms) {
 800175c:	2100      	movs	r1, #0
 800175e:	2002      	movs	r0, #2
 8001760:	f006 fa1d 	bl	8007b9e <set_valve_channel>
			// Close tank vents
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_OFF);

 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <execute_autosequence+0x2e8>)
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			// Fuel vent handled by GSE controller
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <execute_autosequence+0x2e8>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			autosequence.post_gse_fuel_vent_command_enable = 1;
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <execute_autosequence+0x2e8>)
 8001776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <execute_autosequence+0x2e8>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d335      	bcc.n	80017ec <execute_autosequence+0x330>
		}
		if (autosequence.T_state >= autosequence.post_purge_off_time_ms) {
 8001780:	2100      	movs	r1, #0
 8001782:	2008      	movs	r0, #8
 8001784:	f006 fa0b 	bl	8007b9e <set_valve_channel>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);

 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <execute_autosequence+0x2e8>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			// Stop valve commands to the GSE controller
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <execute_autosequence+0x2e8>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			autosequence.post_gse_fuel_vent_command_enable = 0;
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;

 8001798:	f7ff fc3c 	bl	8001014 <init_autosequence_control_variables>
			// Reset all control variables whenever exiting the autosequence
			init_autosequence_control_variables();

 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <execute_autosequence+0x2f0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e023      	b.n	80017ec <execute_autosequence+0x330>
 80017a4:	2000062c 	.word	0x2000062c
 80017a8:	200002e4 	.word	0x200002e4
 80017ac:	200002ac 	.word	0x200002ac
 80017b0:	20000904 	.word	0x20000904
 80017b4:	10624dd3 	.word	0x10624dd3
 80017b8:	20000582 	.word	0x20000582
 80017bc:	200002f4 	.word	0x200002f4
 80017c0:	20000584 	.word	0x20000584
 80017c4:	200005d8 	.word	0x200005d8
			// Transition back to Manual
			STATE = Manual;
		}
	}
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <execute_autosequence+0x354>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d103      	bne.n	80017d8 <execute_autosequence+0x31c>

	else if (STATE == Safe) {
		// Safing the system should've already happened
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <execute_autosequence+0x354>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e009      	b.n	80017ec <execute_autosequence+0x330>
		// lmao what do you even do here?
		STATE = Manual;
	}
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <execute_autosequence+0x354>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d005      	beq.n	80017ec <execute_autosequence+0x330>

	else if (STATE == IgnitionFail) {
		// Wait for the operator to go back to Manual.
	}
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <execute_autosequence+0x354>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d101      	bne.n	80017ec <execute_autosequence+0x330>

	else if (STATE == Abort) {
		// Actuations should've been handled already during state transition.
		// Wait for the operator to go back to Manual.

		// To catch any additional bugs in the state transition,
 80017e8:	f7ff fc48 	bl	800107c <enter_abort_state>
		// Constantly actuate the proper valves during the Abort state.
		enter_abort_state();
	}

	// To catch bugs related to the Manual transition not
	// shutting down the GSE controller fuel vent valve,
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <execute_autosequence+0x354>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d00b      	beq.n	800180c <execute_autosequence+0x350>
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <execute_autosequence+0x354>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d007      	beq.n	800180c <execute_autosequence+0x350>
	// constantly refresh those control variables
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <execute_autosequence+0x358>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (STATE != Post && STATE != Abort) {
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <execute_autosequence+0x358>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		autosequence.post_gse_fuel_vent_command_enable = 0;
		autosequence.post_gse_fuel_vent_signal = 0;
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002ac 	.word	0x200002ac
 8001814:	2000062c 	.word	0x2000062c

08001818 <pt_counts_to_psi>:
}

/**
 * Use the channel-specific calibrations to convert voltage back to pressure
 */
float pt_counts_to_psi(uint8_t pt_num, uint16_t pt_counts) {
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	80bb      	strh	r3, [r7, #4]

	if (pt_num < NUM_PTS) {
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b05      	cmp	r3, #5
 800182c:	f200 808f 	bhi.w	800194e <pt_counts_to_psi+0x136>
		// Convert adc counts to ducer volts
		float pt_volts;
		if (pt_num == 5) {  // Channel 5 is 12V with 0.5 gain
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d11a      	bne.n	800186c <pt_counts_to_psi+0x54>
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_12_KULITE_VDIV_GAIN;
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe37 	bl	80004ac <__aeabi_i2d>
 800183e:	a348      	add	r3, pc, #288	; (adr r3, 8001960 <pt_counts_to_psi+0x148>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fe9c 	bl	8000580 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <pt_counts_to_psi+0x158>)
 8001856:	f7fe ffbd 	bl	80007d4 <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f985 	bl	8000b70 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e019      	b.n	80018a0 <pt_counts_to_psi+0x88>
		}
		else {  // Channel 0-4 are 5V with ~0.65 gain
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_5V_VDIV_GAIN;
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe1c 	bl	80004ac <__aeabi_i2d>
 8001874:	a33a      	add	r3, pc, #232	; (adr r3, 8001960 <pt_counts_to_psi+0x148>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe fe81 	bl	8000580 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	a338      	add	r3, pc, #224	; (adr r3, 8001968 <pt_counts_to_psi+0x150>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe ffa2 	bl	80007d4 <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f96a 	bl	8000b70 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]
		}

		// Convert from ducer volts to pressure
		float epsilon = 0.00001;
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <pt_counts_to_psi+0x15c>)
 80018a2:	60bb      	str	r3, [r7, #8]
		if (-epsilon < pt_cal_slope[pt_num] && pt_cal_slope[pt_num] < epsilon) {
 80018a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a8:	eeb1 7a67 	vneg.f32	s14, s15
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <pt_counts_to_psi+0x160>)
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d50e      	bpl.n	80018e0 <pt_counts_to_psi+0xc8>
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <pt_counts_to_psi+0x160>)
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80018d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd01      	ble.n	80018e0 <pt_counts_to_psi+0xc8>
			return -1;
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <pt_counts_to_psi+0x164>)
 80018de:	e037      	b.n	8001950 <pt_counts_to_psi+0x138>
		}
		else {  // Avoid divide by zero
			// Calibrations are in mV
			return (pt_volts - (pt_cal_offset[pt_num]/1000.0)) / (pt_cal_slope[pt_num]/1000.0);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fdf5 	bl	80004d0 <__aeabi_f2d>
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <pt_counts_to_psi+0x168>)
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fdeb 	bl	80004d0 <__aeabi_f2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <pt_counts_to_psi+0x16c>)
 8001900:	f7fe ff68 	bl	80007d4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fc80 	bl	8000210 <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4614      	mov	r4, r2
 8001916:	461d      	mov	r5, r3
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <pt_counts_to_psi+0x160>)
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdd4 	bl	80004d0 <__aeabi_f2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <pt_counts_to_psi+0x16c>)
 800192e:	f7fe ff51 	bl	80007d4 <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f7fe ff4b 	bl	80007d4 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f913 	bl	8000b70 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	e000      	b.n	8001950 <pt_counts_to_psi+0x138>
		}
	}
	return -1;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <pt_counts_to_psi+0x164>)
 8001950:	ee07 3a90 	vmov	s15, r3
}
 8001954:	eeb0 0a67 	vmov.f32	s0, s15
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bdb0      	pop	{r4, r5, r7, pc}
 800195e:	bf00      	nop
 8001960:	66666666 	.word	0x66666666
 8001964:	3f4a6666 	.word	0x3f4a6666
 8001968:	594db709 	.word	0x594db709
 800196c:	3fe4d653 	.word	0x3fe4d653
 8001970:	3fe00000 	.word	0x3fe00000
 8001974:	3727c5ac 	.word	0x3727c5ac
 8001978:	2000027c 	.word	0x2000027c
 800197c:	bf800000 	.word	0xbf800000
 8001980:	20000294 	.word	0x20000294
 8001984:	408f4000 	.word	0x408f4000

08001988 <init_hardware>:

Potentiometer_Cal pot_cal_info;
Stepper_Pinfo stepper_pinfo[2]; // information about stepper motor pin outs


void init_hardware() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

    initAdcs(&hspi1, adc_pins);   // initialize adcs
 800198c:	4939      	ldr	r1, [pc, #228]	; (8001a74 <init_hardware+0xec>)
 800198e:	483a      	ldr	r0, [pc, #232]	; (8001a78 <init_hardware+0xf0>)
 8001990:	f000 f888 	bl	8001aa4 <initAdcs>

    // init stepper motor pins
    stepper_pinfo[0].motor_ports[0] = mtr0_inA0_GPIO_Port;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <init_hardware+0xf4>)
 8001996:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <init_hardware+0xf8>)
 8001998:	601a      	str	r2, [r3, #0]
    stepper_pinfo[0].motor_ports[1] = mtr0_inA1_GPIO_Port;
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <init_hardware+0xf4>)
 800199c:	4a38      	ldr	r2, [pc, #224]	; (8001a80 <init_hardware+0xf8>)
 800199e:	605a      	str	r2, [r3, #4]
    stepper_pinfo[0].motor_ports[2] = mtr0_inB0_GPIO_Port;
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <init_hardware+0xf4>)
 80019a2:	4a37      	ldr	r2, [pc, #220]	; (8001a80 <init_hardware+0xf8>)
 80019a4:	609a      	str	r2, [r3, #8]
    stepper_pinfo[0].motor_ports[3] = mtr0_inB1_GPIO_Port;
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <init_hardware+0xf4>)
 80019a8:	4a36      	ldr	r2, [pc, #216]	; (8001a84 <init_hardware+0xfc>)
 80019aa:	60da      	str	r2, [r3, #12]
    stepper_pinfo[0].motor_pins[0] = mtr0_inA0_Pin;
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <init_hardware+0xf4>)
 80019ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b2:	821a      	strh	r2, [r3, #16]
    stepper_pinfo[0].motor_pins[1] = mtr0_inA1_Pin;
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <init_hardware+0xf4>)
 80019b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ba:	825a      	strh	r2, [r3, #18]
    stepper_pinfo[0].motor_pins[2] = mtr0_inB0_Pin;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <init_hardware+0xf4>)
 80019be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c2:	829a      	strh	r2, [r3, #20]
    stepper_pinfo[0].motor_pins[3] = mtr0_inB1_Pin;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <init_hardware+0xf4>)
 80019c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ca:	82da      	strh	r2, [r3, #22]
    stepper_pinfo[0].pwm_channel[0] = TIM_CHANNEL_1;
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <init_hardware+0xf4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
    stepper_pinfo[0].pwm_channel[1] = TIM_CHANNEL_2;
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <init_hardware+0xf4>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	61da      	str	r2, [r3, #28]

    stepper_pinfo[1].motor_ports[0] = mtr1_inA0_GPIO_Port;
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <init_hardware+0xf4>)
 80019da:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <init_hardware+0x100>)
 80019dc:	621a      	str	r2, [r3, #32]
    stepper_pinfo[1].motor_ports[1] = mtr1_inA1_GPIO_Port;
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <init_hardware+0xf4>)
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <init_hardware+0x100>)
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
    stepper_pinfo[1].motor_ports[2] = mtr1_inB0_GPIO_Port;
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <init_hardware+0xf4>)
 80019e6:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <init_hardware+0x100>)
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
    stepper_pinfo[1].motor_ports[3] = mtr1_inB1_GPIO_Port;
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <init_hardware+0xf4>)
 80019ec:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <init_hardware+0x100>)
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
    stepper_pinfo[1].motor_pins[0] = mtr1_inA0_Pin;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <init_hardware+0xf4>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	861a      	strh	r2, [r3, #48]	; 0x30
    stepper_pinfo[1].motor_pins[1] = mtr1_inA1_Pin;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <init_hardware+0xf4>)
 80019f8:	2208      	movs	r2, #8
 80019fa:	865a      	strh	r2, [r3, #50]	; 0x32
    stepper_pinfo[1].motor_pins[2] = mtr1_inB0_Pin;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <init_hardware+0xf4>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	869a      	strh	r2, [r3, #52]	; 0x34
    stepper_pinfo[1].motor_pins[3] = mtr1_inB1_Pin;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <init_hardware+0xf4>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	86da      	strh	r2, [r3, #54]	; 0x36
    stepper_pinfo[1].pwm_channel[0] = TIM_CHANNEL_1;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <init_hardware+0xf4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
    stepper_pinfo[1].pwm_channel[1] = TIM_CHANNEL_2;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <init_hardware+0xf4>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c

    tc_pins[0].MAX31855_CS_PORT = tc0_cs_GPIO_Port;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <init_hardware+0x104>)
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <init_hardware+0x108>)
 8001a18:	601a      	str	r2, [r3, #0]
    tc_pins[1].MAX31855_CS_PORT = tc1_cs_GPIO_Port;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <init_hardware+0x104>)
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <init_hardware+0x108>)
 8001a1e:	609a      	str	r2, [r3, #8]
    tc_pins[2].MAX31855_CS_PORT = tc2_cs_GPIO_Port;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <init_hardware+0x104>)
 8001a22:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <init_hardware+0x108>)
 8001a24:	611a      	str	r2, [r3, #16]
    tc_pins[3].MAX31855_CS_PORT = tc3_cs_GPIO_Port;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <init_hardware+0x104>)
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <init_hardware+0x108>)
 8001a2a:	619a      	str	r2, [r3, #24]
    tc_pins[4].MAX31855_CS_PORT = tc4_cs_GPIO_Port;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <init_hardware+0x104>)
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <init_hardware+0x10c>)
 8001a30:	621a      	str	r2, [r3, #32]
    tc_pins[0].MAX31855_CS_ADDR = tc0_cs_Pin;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <init_hardware+0x104>)
 8001a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a38:	809a      	strh	r2, [r3, #4]
    tc_pins[1].MAX31855_CS_ADDR = tc1_cs_Pin;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <init_hardware+0x104>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	819a      	strh	r2, [r3, #12]
    tc_pins[2].MAX31855_CS_ADDR = tc2_cs_Pin;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <init_hardware+0x104>)
 8001a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a48:	829a      	strh	r2, [r3, #20]
    tc_pins[3].MAX31855_CS_ADDR = tc3_cs_Pin;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <init_hardware+0x104>)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a50:	839a      	strh	r2, [r3, #28]
    tc_pins[4].MAX31855_CS_ADDR = tc4_cs_Pin;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <init_hardware+0x104>)
 8001a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a58:	849a      	strh	r2, [r3, #36]	; 0x24

    // Potentiometer Calibrations
    pot_cal_info.slope = (EPOT_DMAX - EPOT_DMIN)*(EPOT_RES_POT+2*EPOT_RES_LEAD)
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <init_hardware+0x110>)
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <init_hardware+0x114>)
 8001a5e:	601a      	str	r2, [r3, #0]
                            /(EPOT_MAX_COUNTS*(EPOT_RES_POT - 2.0*EPOT_RES_POT_MIN));
    pot_cal_info.offset = ((EPOT_MAX_COUNTS*(EPOT_RES_POT_MIN + EPOT_RES_LEAD))
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <init_hardware+0x110>)
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <init_hardware+0x118>)
 8001a64:	605a      	str	r2, [r3, #4]

    // Reamining time in current state
    //state_rem_duration = 0;

    // IWDG status LED
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // turns off when something has gone wrong
 8001a66:	2201      	movs	r2, #1
 8001a68:	2108      	movs	r1, #8
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <init_hardware+0xf8>)
 8001a6c:	f008 fe5a 	bl	800a724 <HAL_GPIO_WritePin>
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000780 	.word	0x20000780
 8001a78:	20001f8c 	.word	0x20001f8c
 8001a7c:	20000698 	.word	0x20000698
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	200006f8 	.word	0x200006f8
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	200006f0 	.word	0x200006f0
 8001a9c:	3f627bee 	.word	0x3f627bee
 8001aa0:	40f896df 	.word	0x40f896df

08001aa4 <initAdcs>:

// private helpers
static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state);

void initAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo *adc_pins) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
    adc_pins[0].MAX11131_CS_PORT       = adc0_cs_GPIO_Port;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	4a3c      	ldr	r2, [pc, #240]	; (8001ba4 <initAdcs+0x100>)
 8001ab2:	601a      	str	r2, [r3, #0]
    adc_pins[0].MAX11131_EOC_PORT      = adc0_eoc_GPIO_Port;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <initAdcs+0x100>)
 8001ab8:	605a      	str	r2, [r3, #4]
    adc_pins[0].MAX11131_CNVST_PORT    = adc0_cnvst_GPIO_Port;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <initAdcs+0x104>)
 8001abe:	609a      	str	r2, [r3, #8]
    adc_pins[0].MAX11131_CS_ADDR       = adc0_cs_Pin;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	819a      	strh	r2, [r3, #12]
    adc_pins[0].MAX11131_EOC_ADDR      = adc0_eoc_Pin;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	81da      	strh	r2, [r3, #14]
    adc_pins[0].MAX11131_CNVST_ADDR    = adc0_cnvst_Pin;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	821a      	strh	r2, [r3, #16]
    adc_pins[1].MAX11131_CS_PORT       = adc1_cs_GPIO_Port;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3324      	adds	r3, #36	; 0x24
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <initAdcs+0x108>)
 8001ad8:	601a      	str	r2, [r3, #0]
    adc_pins[1].MAX11131_EOC_PORT      = adc1_eoc_GPIO_Port;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3324      	adds	r3, #36	; 0x24
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <initAdcs+0x104>)
 8001ae0:	605a      	str	r2, [r3, #4]
    adc_pins[1].MAX11131_CNVST_PORT    = adc1_cnvst_GPIO_Port;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3324      	adds	r3, #36	; 0x24
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <initAdcs+0x108>)
 8001ae8:	609a      	str	r2, [r3, #8]
    adc_pins[1].MAX11131_CS_ADDR       = adc1_cs_Pin;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3324      	adds	r3, #36	; 0x24
 8001aee:	2201      	movs	r2, #1
 8001af0:	819a      	strh	r2, [r3, #12]
    adc_pins[1].MAX11131_EOC_ADDR      = adc1_eoc_Pin;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3324      	adds	r3, #36	; 0x24
 8001af6:	2220      	movs	r2, #32
 8001af8:	81da      	strh	r2, [r3, #14]
    adc_pins[1].MAX11131_CNVST_ADDR    = adc1_cnvst_Pin;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3324      	adds	r3, #36	; 0x24
 8001afe:	2202      	movs	r2, #2
 8001b00:	821a      	strh	r2, [r3, #16]
    adc_pins[2].MAX11131_CS_PORT       = adc2_cs_GPIO_Port;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3348      	adds	r3, #72	; 0x48
 8001b06:	4a29      	ldr	r2, [pc, #164]	; (8001bac <initAdcs+0x108>)
 8001b08:	601a      	str	r2, [r3, #0]
    adc_pins[2].MAX11131_EOC_PORT      = adc2_eoc_GPIO_Port;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3348      	adds	r3, #72	; 0x48
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <initAdcs+0x10c>)
 8001b10:	605a      	str	r2, [r3, #4]
    adc_pins[2].MAX11131_CNVST_PORT    = adc2_cnvst_GPIO_Port;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3348      	adds	r3, #72	; 0x48
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <initAdcs+0x10c>)
 8001b18:	609a      	str	r2, [r3, #8]
    adc_pins[2].MAX11131_CS_ADDR       = adc2_cs_Pin;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3348      	adds	r3, #72	; 0x48
 8001b1e:	2204      	movs	r2, #4
 8001b20:	819a      	strh	r2, [r3, #12]
    adc_pins[2].MAX11131_EOC_ADDR      = adc2_eoc_Pin;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3348      	adds	r3, #72	; 0x48
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	81da      	strh	r2, [r3, #14]
    adc_pins[2].MAX11131_CNVST_ADDR    = adc2_cnvst_Pin;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3348      	adds	r3, #72	; 0x48
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	821a      	strh	r2, [r3, #16]
    init_adc(hspix, &adc_pins[0]);
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f006 f869 	bl	8007c0e <init_adc>
    init_adc(hspix, &adc_pins[1]);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3324      	adds	r3, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f006 f863 	bl	8007c0e <init_adc>
    init_adc(hspix, &adc_pins[2]);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3348      	adds	r3, #72	; 0x48
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f006 f85d 	bl	8007c0e <init_adc>

    // Initialize ADC offset and slopes, defaults to 0 and 1 for offset and slopes
    for (uint8_t i = 0; i < 3; ++i) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e01c      	b.n	8001b94 <initAdcs+0xf0>
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81bb      	strh	r3, [r7, #12]
 8001b5e:	e013      	b.n	8001b88 <initAdcs+0xe4>
    		adc_calibrations[i].offset[ch] 	= 0;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	89bb      	ldrh	r3, [r7, #12]
 8001b64:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <initAdcs+0x110>)
 8001b66:	0152      	lsls	r2, r2, #5
 8001b68:	4413      	add	r3, r2
 8001b6a:	3310      	adds	r3, #16
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    		adc_calibrations[i].slope[ch] 	= 1;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	89bb      	ldrh	r3, [r7, #12]
 8001b76:	490f      	ldr	r1, [pc, #60]	; (8001bb4 <initAdcs+0x110>)
 8001b78:	0152      	lsls	r2, r2, #5
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001b82:	89bb      	ldrh	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	81bb      	strh	r3, [r7, #12]
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d9e8      	bls.n	8001b60 <initAdcs+0xbc>
    for (uint8_t i = 0; i < 3; ++i) {
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	3301      	adds	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d9df      	bls.n	8001b5a <initAdcs+0xb6>
    	}
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	200003b4 	.word	0x200003b4

08001bb8 <isMotorAtPos>:
    HAL_TIM_Base_Init(htimx);

    HAL_TIM_Base_Start_IT(htimx);
}

uint8_t isMotorAtPos(float target, uint8_t tank_num) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	70fb      	strb	r3, [r7, #3]
    return fabs(target-curPos[tank_num]) < posErrorMargin;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <isMotorAtPos+0x48>)
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <isMotorAtPos+0x4c>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	bf4c      	ite	mi
 8001bee:	2301      	movmi	r3, #1
 8001bf0:	2300      	movpl	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	200003a8 	.word	0x200003a8
 8001c04:	20000014 	.word	0x20000014

08001c08 <normalizeMotorStep>:

static inline int8_t normalizeMotorStep(int8_t step_num) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
    if(step_num == 4) {
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d101      	bne.n	8001c1e <normalizeMotorStep+0x16>
        return 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e008      	b.n	8001c30 <normalizeMotorStep+0x28>
    } else if (step_num == -1) {
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c26:	d101      	bne.n	8001c2c <normalizeMotorStep+0x24>
        return 3;// reset step stage if reached
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e001      	b.n	8001c30 <normalizeMotorStep+0x28>
    }
    return step_num;
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <handleMotorStepping>:


void handleMotorStepping(uint8_t motor_num) {
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
    // Stepper motor linear ramp variables
    static int8_t step_stage[NUM_TANKS] = { 0, 0 }; // polarity of stepper motor coil
    static int8_t prevDir[NUM_TANKS] = {0};

    if (prevDir[motor_num]==0) {
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4a85      	ldr	r2, [pc, #532]	; (8001e60 <handleMotorStepping+0x224>)
 8001c4a:	56d3      	ldrsb	r3, [r2, r3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <handleMotorStepping+0x22>
        prevDir[motor_num] = curDir[motor_num];
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4983      	ldr	r1, [pc, #524]	; (8001e64 <handleMotorStepping+0x228>)
 8001c56:	5c8a      	ldrb	r2, [r1, r2]
 8001c58:	b251      	sxtb	r1, r2
 8001c5a:	4a81      	ldr	r2, [pc, #516]	; (8001e60 <handleMotorStepping+0x224>)
 8001c5c:	54d1      	strb	r1, [r2, r3]
    }

    // Step the motor if in running or override
    if ((STATE==Hotfire || STATE==Startup || STATE==Post || STATE==Abort
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <handleMotorStepping+0x22c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d012      	beq.n	8001c8c <handleMotorStepping+0x50>
 8001c66:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <handleMotorStepping+0x22c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d00e      	beq.n	8001c8c <handleMotorStepping+0x50>
 8001c6e:	4b7e      	ldr	r3, [pc, #504]	; (8001e68 <handleMotorStepping+0x22c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d00a      	beq.n	8001c8c <handleMotorStepping+0x50>
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <handleMotorStepping+0x22c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d006      	beq.n	8001c8c <handleMotorStepping+0x50>
            || manual_stepper_pos_override[motor_num])
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <handleMotorStepping+0x230>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80ab 	beq.w	8001de2 <handleMotorStepping+0x1a6>
            && !isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <handleMotorStepping+0x234>)
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	f7ff ff8a 	bl	8001bb8 <isMotorAtPos>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 809b 	bne.w	8001de2 <handleMotorStepping+0x1a6>

        if (prevDir[motor_num] != curDir[motor_num]) {
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4a6c      	ldr	r2, [pc, #432]	; (8001e60 <handleMotorStepping+0x224>)
 8001cb0:	56d2      	ldrsb	r2, [r2, r3]
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	496b      	ldr	r1, [pc, #428]	; (8001e64 <handleMotorStepping+0x228>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d01d      	beq.n	8001cfa <handleMotorStepping+0xbe>
            if (prevDir[motor_num] == -1) {
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <handleMotorStepping+0x224>)
 8001cc2:	56d3      	ldrsb	r3, [r2, r3]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d109      	bne.n	8001cde <handleMotorStepping+0xa2>
                ++step_stage[motor_num];
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a69      	ldr	r2, [pc, #420]	; (8001e74 <handleMotorStepping+0x238>)
 8001cce:	56d2      	ldrsb	r2, [r2, r3]
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	3201      	adds	r2, #1
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	b251      	sxtb	r1, r2
 8001cd8:	4a66      	ldr	r2, [pc, #408]	; (8001e74 <handleMotorStepping+0x238>)
 8001cda:	54d1      	strb	r1, [r2, r3]
 8001cdc:	e00d      	b.n	8001cfa <handleMotorStepping+0xbe>
            } else if (prevDir[motor_num] == 1) {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <handleMotorStepping+0x224>)
 8001ce2:	56d3      	ldrsb	r3, [r2, r3]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <handleMotorStepping+0xbe>
                --step_stage[motor_num];
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <handleMotorStepping+0x238>)
 8001cec:	56d2      	ldrsb	r2, [r2, r3]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	b251      	sxtb	r1, r2
 8001cf6:	4a5f      	ldr	r2, [pc, #380]	; (8001e74 <handleMotorStepping+0x238>)
 8001cf8:	54d1      	strb	r1, [r2, r3]
            }
        }

        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <handleMotorStepping+0x238>)
 8001cfe:	56d3      	ldrsb	r3, [r2, r3]
 8001d00:	79fc      	ldrb	r4, [r7, #7]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff80 	bl	8001c08 <normalizeMotorStep>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <handleMotorStepping+0x238>)
 8001d0e:	551a      	strb	r2, [r3, r4]

        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <handleMotorStepping+0x23c>)
 8001d14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <handleMotorStepping+0x228>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	b25a      	sxtb	r2, r3
                           curDir[motor_num], step_stage[motor_num]);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4954      	ldr	r1, [pc, #336]	; (8001e74 <handleMotorStepping+0x238>)
 8001d24:	56cb      	ldrsb	r3, [r1, r3]
        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	79f9      	ldrb	r1, [r7, #7]
 8001d2a:	f000 f8b3 	bl	8001e94 <turn_stepper_motor>

        step_stage[motor_num] += curDir[motor_num];
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <handleMotorStepping+0x228>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	b259      	sxtb	r1, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4a4e      	ldr	r2, [pc, #312]	; (8001e74 <handleMotorStepping+0x238>)
 8001d3a:	56d3      	ldrsb	r3, [r2, r3]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	b2cb      	uxtb	r3, r1
 8001d40:	4413      	add	r3, r2
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	b251      	sxtb	r1, r2
 8001d48:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <handleMotorStepping+0x238>)
 8001d4a:	54d1      	strb	r1, [r2, r3]
        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <handleMotorStepping+0x238>)
 8001d50:	56d3      	ldrsb	r3, [r2, r3]
 8001d52:	79fc      	ldrb	r4, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff57 	bl	8001c08 <normalizeMotorStep>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <handleMotorStepping+0x238>)
 8001d60:	551a      	strb	r2, [r3, r4]
        prevDir[motor_num] = curDir[motor_num];
 8001d62:	79fa      	ldrb	r2, [r7, #7]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	493f      	ldr	r1, [pc, #252]	; (8001e64 <handleMotorStepping+0x228>)
 8001d68:	5c8a      	ldrb	r2, [r1, r2]
 8001d6a:	b251      	sxtb	r1, r2
 8001d6c:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <handleMotorStepping+0x224>)
 8001d6e:	54d1      	strb	r1, [r2, r3]
//                changeStepperPeriod(&htim6, &stepper);
//                stepper.acc_step = 0;
//            } else {
//                ++stepper.acc_step;
//            } // ensures SPSPS is followed properly
        curPos[motor_num] = curPos[motor_num] + degPerStep*curDir[motor_num];
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4a42      	ldr	r2, [pc, #264]	; (8001e7c <handleMotorStepping+0x240>)
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	ed93 7a00 	vldr	s14, [r3]
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <handleMotorStepping+0x228>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001e80 <handleMotorStepping+0x244>
 8001d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <handleMotorStepping+0x240>)
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	edc3 7a00 	vstr	s15, [r3]

        /* Update telem packet motor info */
        mtr_pos[motor_num] = curPos[motor_num]; // for motor 1
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4934      	ldr	r1, [pc, #208]	; (8001e7c <handleMotorStepping+0x240>)
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	440a      	add	r2, r1
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4934      	ldr	r1, [pc, #208]	; (8001e84 <handleMotorStepping+0x248>)
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	601a      	str	r2, [r3, #0]
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <handleMotorStepping+0x24c>)
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001dc4:	3301      	adds	r3, #1
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001dc6:	b29a      	uxth	r2, r3
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4926      	ldr	r1, [pc, #152]	; (8001e64 <handleMotorStepping+0x228>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	b25b      	sxtb	r3, r3
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	fb12 f303 	smulbb	r3, r2, r3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	b211      	sxth	r1, r2
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <handleMotorStepping+0x250>)
 8001dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <handleMotorStepping+0x234>)
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	f7ff fedf 	bl	8001bb8 <isMotorAtPos>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d02a      	beq.n	8001e56 <handleMotorStepping+0x21a>
        // auto disable override once position is reached
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <handleMotorStepping+0x23c>)
 8001e04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4921      	ldr	r1, [pc, #132]	; (8001e90 <handleMotorStepping+0x254>)
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	440b      	add	r3, r1
 8001e10:	3318      	adds	r3, #24
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f00a fa64 	bl	800c2e4 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[0]);
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <handleMotorStepping+0x23c>)
 8001e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	491a      	ldr	r1, [pc, #104]	; (8001e90 <handleMotorStepping+0x254>)
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	440b      	add	r3, r1
 8001e2c:	331c      	adds	r3, #28
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f00a fa56 	bl	800c2e4 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[1]);
        if (manual_stepper_pos_override[motor_num]) {
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <handleMotorStepping+0x230>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <handleMotorStepping+0x210>
            manual_stepper_pos_override[motor_num] = 0;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <handleMotorStepping+0x230>)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	54d1      	strb	r1, [r2, r3]
        }
        mtr_vel[motor_num] = 0;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <handleMotorStepping+0x250>)
 8001e50:	2100      	movs	r1, #0
 8001e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // reset stepper linear ramping variables
        // stepper.num_steps = stepper.curr_step = 0;
    }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000474 	.word	0x20000474
 8001e64:	200003b0 	.word	0x200003b0
 8001e68:	200002ac 	.word	0x200002ac
 8001e6c:	2000039c 	.word	0x2000039c
 8001e70:	200003a0 	.word	0x200003a0
 8001e74:	20000478 	.word	0x20000478
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	200003a8 	.word	0x200003a8
 8001e80:	3eb33333 	.word	0x3eb33333
 8001e84:	20000368 	.word	0x20000368
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000370 	.word	0x20000370
 8001e90:	20000698 	.word	0x20000698

08001e94 <turn_stepper_motor>:

void turn_stepper_motor(TIM_HandleTypeDef *htimx, uint8_t motor_num, int8_t direction, uint8_t step_stage) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	70fb      	strb	r3, [r7, #3]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70bb      	strb	r3, [r7, #2]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	707b      	strb	r3, [r7, #1]
    // A-
    // B-
    // For VNH7070AS chip, INA = clockwise, INB = counterclockwise (actually not really)
    // reset all gpio logic before changing step
    // Note: this only works for motor 0 currently 1 is CW, -1 is CCW
	GPIO_TypeDef * mtrx_portA0 = stepper_pinfo[motor_num].motor_ports[0];
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	4a64      	ldr	r2, [pc, #400]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	4413      	add	r3, r2
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * mtrx_portA1 = stepper_pinfo[motor_num].motor_ports[1];
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	4a61      	ldr	r2, [pc, #388]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001ebe:	015b      	lsls	r3, r3, #5
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	623b      	str	r3, [r7, #32]
	GPIO_TypeDef * mtrx_portB0 = stepper_pinfo[motor_num].motor_ports[2];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	4a5e      	ldr	r2, [pc, #376]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4413      	add	r3, r2
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61fb      	str	r3, [r7, #28]
	GPIO_TypeDef * mtrx_portB1 = stepper_pinfo[motor_num].motor_ports[3];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	330c      	adds	r3, #12
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
	uint16_t mtrx_pinA0 = stepper_pinfo[motor_num].motor_pins[0];
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	4a57      	ldr	r2, [pc, #348]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4413      	add	r3, r2
 8001eec:	3310      	adds	r3, #16
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	82fb      	strh	r3, [r7, #22]
	uint16_t mtrx_pinA1 = stepper_pinfo[motor_num].motor_pins[1];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	4a53      	ldr	r2, [pc, #332]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001ef6:	015b      	lsls	r3, r3, #5
 8001ef8:	4413      	add	r3, r2
 8001efa:	3312      	adds	r3, #18
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	82bb      	strh	r3, [r7, #20]
	uint16_t mtrx_pinB0 = stepper_pinfo[motor_num].motor_pins[2];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	4a50      	ldr	r2, [pc, #320]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	3314      	adds	r3, #20
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	827b      	strh	r3, [r7, #18]
	uint16_t mtrx_pinB1 = stepper_pinfo[motor_num].motor_pins[3];
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	4413      	add	r3, r2
 8001f16:	3316      	adds	r3, #22
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	823b      	strh	r3, [r7, #16]
	uint32_t pwm_channela = stepper_pinfo[motor_num].pwm_channel[0];
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	4a49      	ldr	r2, [pc, #292]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	4413      	add	r3, r2
 8001f24:	3318      	adds	r3, #24
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_channelb = stepper_pinfo[motor_num].pwm_channel[1];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	; (8002044 <turn_stepper_motor+0x1b0>)
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	4413      	add	r3, r2
 8001f32:	331c      	adds	r3, #28
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60bb      	str	r3, [r7, #8]

    // reset all motor logic inputs low and speed to 0
    HAL_TIM_PWM_Stop(htimx, pwm_channela);
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f00a f9d2 	bl	800c2e4 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htimx, pwm_channelb);
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f00a f9ce 	bl	800c2e4 <HAL_TIM_PWM_Stop>
    // stepper motor channels
    switch(step_stage) { // TODO figure out steps tmrw
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d86e      	bhi.n	800202c <turn_stepper_motor+0x198>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <turn_stepper_motor+0xc0>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f97 	.word	0x08001f97
 8001f5c:	08001fc9 	.word	0x08001fc9
 8001f60:	08001ffb 	.word	0x08001ffb
        case 0: {   // A0 high B0 low
        	HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001f64:	8abb      	ldrh	r3, [r7, #20]
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6a38      	ldr	r0, [r7, #32]
 8001f6c:	f008 fbda 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001f70:	8a3b      	ldrh	r3, [r7, #16]
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	69b8      	ldr	r0, [r7, #24]
 8001f78:	f008 fbd4 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4619      	mov	r1, r3
 8001f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f84:	f008 fbce 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001f88:	8a7b      	ldrh	r3, [r7, #18]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	69f8      	ldr	r0, [r7, #28]
 8001f90:	f008 fbc8 	bl	800a724 <HAL_GPIO_WritePin>
            break;
 8001f94:	e04a      	b.n	800202c <turn_stepper_motor+0x198>
        } case 1: {
        	HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001f96:	8a3b      	ldrh	r3, [r7, #16]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	69b8      	ldr	r0, [r7, #24]
 8001f9e:	f008 fbc1 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001faa:	f008 fbbb 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001fae:	8a7b      	ldrh	r3, [r7, #18]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	69f8      	ldr	r0, [r7, #28]
 8001fb6:	f008 fbb5 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001fba:	8abb      	ldrh	r3, [r7, #20]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f008 fbaf 	bl	800a724 <HAL_GPIO_WritePin>
            break;
 8001fc6:	e031      	b.n	800202c <turn_stepper_motor+0x198>
        } case 2: {
        	HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001fc8:	8afb      	ldrh	r3, [r7, #22]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd0:	f008 fba8 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001fd4:	8a7b      	ldrh	r3, [r7, #18]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	69f8      	ldr	r0, [r7, #28]
 8001fdc:	f008 fba2 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001fe0:	8abb      	ldrh	r3, [r7, #20]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6a38      	ldr	r0, [r7, #32]
 8001fe8:	f008 fb9c 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8001fec:	8a3b      	ldrh	r3, [r7, #16]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	69b8      	ldr	r0, [r7, #24]
 8001ff4:	f008 fb96 	bl	800a724 <HAL_GPIO_WritePin>
            break;  // swap which input is high/low for for negative polarity
 8001ff8:	e018      	b.n	800202c <turn_stepper_motor+0x198>
        } case 3: {
        	HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001ffa:	8a7b      	ldrh	r3, [r7, #18]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	69f8      	ldr	r0, [r7, #28]
 8002002:	f008 fb8f 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8002006:	8abb      	ldrh	r3, [r7, #20]
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	6a38      	ldr	r0, [r7, #32]
 800200e:	f008 fb89 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8002012:	8a3b      	ldrh	r3, [r7, #16]
 8002014:	2201      	movs	r2, #1
 8002016:	4619      	mov	r1, r3
 8002018:	69b8      	ldr	r0, [r7, #24]
 800201a:	f008 fb83 	bl	800a724 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 800201e:	8afb      	ldrh	r3, [r7, #22]
 8002020:	2201      	movs	r2, #1
 8002022:	4619      	mov	r1, r3
 8002024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002026:	f008 fb7d 	bl	800a724 <HAL_GPIO_WritePin>
            break;
 800202a:	bf00      	nop
        }
    }
    HAL_TIM_PWM_Start(htimx, pwm_channela); // start pwm on channels 1 and 2 for stepper
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f00a f890 	bl	800c154 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htimx, pwm_channelb);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00a f88c 	bl	800c154 <HAL_TIM_PWM_Start>
}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000698 	.word	0x20000698

08002048 <moveMotorToPos>:

void moveMotorToPos(float deg, uint8_t motor_num) {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002052:	4603      	mov	r3, r0
 8002054:	70fb      	strb	r3, [r7, #3]
	manual_stepper_pos_override[motor_num] = 1;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <moveMotorToPos+0x6c>)
 800205a:	2101      	movs	r1, #1
 800205c:	54d1      	strb	r1, [r2, r3]
	targetPos[motor_num] = deg; // position given in deg
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <moveMotorToPos+0x70>)
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
	curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <moveMotorToPos+0x74>)
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	ed93 7a00 	vldr	s14, [r3]
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <moveMotorToPos+0x70>)
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d501      	bpl.n	8002090 <moveMotorToPos+0x48>
 800208c:	2101      	movs	r1, #1
 800208e:	e001      	b.n	8002094 <moveMotorToPos+0x4c>
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <moveMotorToPos+0x78>)
 8002098:	54d1      	strb	r1, [r2, r3]
	mtr_set[motor_num] = deg; // save new motor position setpoint
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <moveMotorToPos+0x7c>)
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	2000039c 	.word	0x2000039c
 80020b8:	200003a0 	.word	0x200003a0
 80020bc:	200003a8 	.word	0x200003a8
 80020c0:	200003b0 	.word	0x200003b0
 80020c4:	2000038c 	.word	0x2000038c

080020c8 <readAdcs>:

void readAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo* adc_pins, uint16_t (*adc_counts)[16]) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e03d      	b.n	8002156 <readAdcs+0x8e>
        read_adc(hspix, &adc_pins[i], adc_counts[i]);
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1899      	adds	r1, r3, r2
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	461a      	mov	r2, r3
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f005 fdd6 	bl	8007ca6 <read_adc>
        for (uint8_t ch = 0; ch < 16; ++ch) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	74fb      	strb	r3, [r7, #19]
 80020fe:	e024      	b.n	800214a <readAdcs+0x82>
			adc_counts[i][ch] = adc_counts[i][ch]*adc_calibrations[i].slope[ch] + adc_calibrations[i].offset[ch];
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	7cfa      	ldrb	r2, [r7, #19]
 800210a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	4815      	ldr	r0, [pc, #84]	; (8002168 <readAdcs+0xa0>)
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	0149      	lsls	r1, r1, #5
 8002116:	440b      	add	r3, r1
 8002118:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800211c:	fb12 f303 	smulbb	r3, r2, r3
 8002120:	b298      	uxth	r0, r3
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	4910      	ldr	r1, [pc, #64]	; (8002168 <readAdcs+0xa0>)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	0152      	lsls	r2, r2, #5
 800212a:	4413      	add	r3, r2
 800212c:	3310      	adds	r3, #16
 800212e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	015b      	lsls	r3, r3, #5
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	7cfa      	ldrb	r2, [r7, #19]
 800213c:	4401      	add	r1, r0
 800213e:	b289      	uxth	r1, r1
 8002140:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	3301      	adds	r3, #1
 8002148:	74fb      	strb	r3, [r7, #19]
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d9d7      	bls.n	8002100 <readAdcs+0x38>
    for (int i = 0; i < 3; ++i) {
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b02      	cmp	r3, #2
 800215a:	ddbe      	ble.n	80020da <readAdcs+0x12>
        } // apply adc offset and slope to raw counts
    }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003b4 	.word	0x200003b4

0800216c <setValve>:

void setValve(uint32_t vlv_num, uint8_t state) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
    GPIO_PinState gpio_state = (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	75fb      	strb	r3, [r7, #23]
    uint32_t vlv_bit = 1<<vlv_num;
 8002186:	2201      	movs	r2, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	613b      	str	r3, [r7, #16]
    uint32_t vlv_value = state<<vlv_num;
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	60fb      	str	r3, [r7, #12]
	setValveHelper(vlv_num, gpio_state);
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f814 	bl	80021cc <setValveHelper>

    // set valves states variable
    valve_states &= ~vlv_bit;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43da      	mvns	r2, r3
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <setValve+0x5c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4013      	ands	r3, r2
 80021ae:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <setValve+0x5c>)
 80021b0:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <setValve+0x5c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <setValve+0x5c>)
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002b8 	.word	0x200002b8

080021cc <setValveHelper>:

static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d856      	bhi.n	800228c <setValveHelper+0xc0>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <setValveHelper+0x18>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002209 	.word	0x08002209
 80021e8:	08002217 	.word	0x08002217
 80021ec:	08002227 	.word	0x08002227
 80021f0:	08002237 	.word	0x08002237
 80021f4:	08002247 	.word	0x08002247
 80021f8:	08002255 	.word	0x08002255
 80021fc:	08002263 	.word	0x08002263
 8002200:	08002271 	.word	0x08002271
 8002204:	0800227f 	.word	0x0800227f
	 switch(vlv_num) {
	    case 0: {
	        HAL_GPIO_WritePin(en_vlv0_GPIO_Port, en_vlv0_Pin, gpio_state);
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	461a      	mov	r2, r3
 800220c:	2102      	movs	r1, #2
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <setValveHelper+0xc8>)
 8002210:	f008 fa88 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002214:	e03a      	b.n	800228c <setValveHelper+0xc0>
	    } case 1: {
	        HAL_GPIO_WritePin(en_vlv1_GPIO_Port, en_vlv1_Pin, gpio_state);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	481e      	ldr	r0, [pc, #120]	; (8002298 <setValveHelper+0xcc>)
 8002220:	f008 fa80 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002224:	e032      	b.n	800228c <setValveHelper+0xc0>
	    } case 2: {
	        HAL_GPIO_WritePin(en_vlv2_GPIO_Port, en_vlv2_Pin, gpio_state);
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	461a      	mov	r2, r3
 800222a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800222e:	481a      	ldr	r0, [pc, #104]	; (8002298 <setValveHelper+0xcc>)
 8002230:	f008 fa78 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002234:	e02a      	b.n	800228c <setValveHelper+0xc0>
	    } case 3: {
	        HAL_GPIO_WritePin(en_vlv3_GPIO_Port, en_vlv3_Pin, gpio_state);
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223e:	4816      	ldr	r0, [pc, #88]	; (8002298 <setValveHelper+0xcc>)
 8002240:	f008 fa70 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002244:	e022      	b.n	800228c <setValveHelper+0xc0>
	    } case 4: {
	        HAL_GPIO_WritePin(en_vlv4_GPIO_Port, en_vlv4_Pin, gpio_state);
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	461a      	mov	r2, r3
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	4811      	ldr	r0, [pc, #68]	; (8002294 <setValveHelper+0xc8>)
 800224e:	f008 fa69 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002252:	e01b      	b.n	800228c <setValveHelper+0xc0>
	    } case 5: {
	        HAL_GPIO_WritePin(en_vlv5_GPIO_Port, en_vlv5_Pin, gpio_state);
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	461a      	mov	r2, r3
 8002258:	2120      	movs	r1, #32
 800225a:	480e      	ldr	r0, [pc, #56]	; (8002294 <setValveHelper+0xc8>)
 800225c:	f008 fa62 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 8002260:	e014      	b.n	800228c <setValveHelper+0xc0>
	    } case 6: {
	        HAL_GPIO_WritePin(en_vlv6_GPIO_Port, en_vlv6_Pin, gpio_state);
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	461a      	mov	r2, r3
 8002266:	2110      	movs	r1, #16
 8002268:	480a      	ldr	r0, [pc, #40]	; (8002294 <setValveHelper+0xc8>)
 800226a:	f008 fa5b 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 800226e:	e00d      	b.n	800228c <setValveHelper+0xc0>
	    } case 7: {
	        HAL_GPIO_WritePin(en_vlv7_GPIO_Port, en_vlv7_Pin, gpio_state);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	461a      	mov	r2, r3
 8002274:	2108      	movs	r1, #8
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <setValveHelper+0xc8>)
 8002278:	f008 fa54 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 800227c:	e006      	b.n	800228c <setValveHelper+0xc0>
	    } case 8: {
	        HAL_GPIO_WritePin(en_vlv8_GPIO_Port, en_vlv8_Pin, gpio_state);
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	461a      	mov	r2, r3
 8002282:	2104      	movs	r1, #4
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <setValveHelper+0xc8>)
 8002286:	f008 fa4d 	bl	800a724 <HAL_GPIO_WritePin>
	        break;
 800228a:	bf00      	nop
	    }
	}
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40020800 	.word	0x40020800

0800229c <readThermocouples>:

void readThermocouples(SPI_HandleTypeDef* hspix, MAX31855_Pinfo *tc_pins,
                                                            uint8_t tc_num) {
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < tc_num; ++i) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
 80022ae:	e012      	b.n	80022d6 <readThermocouples+0x3a>
    	tc[i] = read_tc(hspix, &tc_pins[i]);
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	7dfc      	ldrb	r4, [r7, #23]
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f005 fe83 	bl	8007fc8 <read_tc>
 80022c2:	eef0 7a40 	vmov.f32	s15, s0
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <readThermocouples+0x4c>)
 80022c8:	00a3      	lsls	r3, r4, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < tc_num; ++i) {
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	3301      	adds	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
 80022d6:	7dfa      	ldrb	r2, [r7, #23]
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3e8      	bcc.n	80022b0 <readThermocouples+0x14>
    }
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	20000354 	.word	0x20000354
 80022ec:	00000000 	.word	0x00000000

080022f0 <updatePeripherals>:

void updatePeripherals(uint16_t (*adc_counts)[16]) {
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    // Programmer defined, transfer adc readings to correct memory arrays based on schematic

    /* Load vlv voltages */
    ivlv[0] = vlvCountsToVolts(adc_counts[0][0]);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fa0b 	bl	8002718 <vlvCountsToVolts>
 8002302:	eef0 7a40 	vmov.f32	s15, s0
 8002306:	4ba7      	ldr	r3, [pc, #668]	; (80025a4 <updatePeripherals+0x2b4>)
 8002308:	edc3 7a00 	vstr	s15, [r3]
    ivlv[1] = vlvCountsToVolts(adc_counts[1][10]);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3320      	adds	r3, #32
 8002310:	8a9b      	ldrh	r3, [r3, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fa00 	bl	8002718 <vlvCountsToVolts>
 8002318:	eef0 7a40 	vmov.f32	s15, s0
 800231c:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <updatePeripherals+0x2b4>)
 800231e:	edc3 7a01 	vstr	s15, [r3, #4]
    ivlv[2] = vlvCountsToVolts(adc_counts[1][8]);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3320      	adds	r3, #32
 8002326:	8a1b      	ldrh	r3, [r3, #16]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f9f5 	bl	8002718 <vlvCountsToVolts>
 800232e:	eef0 7a40 	vmov.f32	s15, s0
 8002332:	4b9c      	ldr	r3, [pc, #624]	; (80025a4 <updatePeripherals+0x2b4>)
 8002334:	edc3 7a02 	vstr	s15, [r3, #8]
    ivlv[3] = vlvCountsToVolts(adc_counts[1][6]);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3320      	adds	r3, #32
 800233c:	899b      	ldrh	r3, [r3, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f9ea 	bl	8002718 <vlvCountsToVolts>
 8002344:	eef0 7a40 	vmov.f32	s15, s0
 8002348:	4b96      	ldr	r3, [pc, #600]	; (80025a4 <updatePeripherals+0x2b4>)
 800234a:	edc3 7a03 	vstr	s15, [r3, #12]
    ivlv[4] = vlvCountsToVolts(adc_counts[1][4]);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3320      	adds	r3, #32
 8002352:	891b      	ldrh	r3, [r3, #8]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f9df 	bl	8002718 <vlvCountsToVolts>
 800235a:	eef0 7a40 	vmov.f32	s15, s0
 800235e:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <updatePeripherals+0x2b4>)
 8002360:	edc3 7a04 	vstr	s15, [r3, #16]
    ivlv[5] = vlvCountsToVolts(adc_counts[1][2]);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3320      	adds	r3, #32
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f9d4 	bl	8002718 <vlvCountsToVolts>
 8002370:	eef0 7a40 	vmov.f32	s15, s0
 8002374:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <updatePeripherals+0x2b4>)
 8002376:	edc3 7a05 	vstr	s15, [r3, #20]
    ivlv[6] = vlvCountsToVolts(adc_counts[1][0]);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3320      	adds	r3, #32
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f9c9 	bl	8002718 <vlvCountsToVolts>
 8002386:	eef0 7a40 	vmov.f32	s15, s0
 800238a:	4b86      	ldr	r3, [pc, #536]	; (80025a4 <updatePeripherals+0x2b4>)
 800238c:	edc3 7a06 	vstr	s15, [r3, #24]
    ivlv[7] = vlvCountsToVolts(adc_counts[0][11]);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8adb      	ldrh	r3, [r3, #22]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f9bf 	bl	8002718 <vlvCountsToVolts>
 800239a:	eef0 7a40 	vmov.f32	s15, s0
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <updatePeripherals+0x2b4>)
 80023a0:	edc3 7a07 	vstr	s15, [r3, #28]
    ivlv[8] = vlvCountsToVolts(adc_counts[0][13]);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8b5b      	ldrh	r3, [r3, #26]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f9b5 	bl	8002718 <vlvCountsToVolts>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <updatePeripherals+0x2b4>)
 80023b4:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load vlv currents */
    evlv[0] = vlvCountsToAmps(adc_counts[0][1]);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	885b      	ldrh	r3, [r3, #2]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f9cb 	bl	8002758 <vlvCountsToAmps>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <updatePeripherals+0x2b8>)
 80023c8:	edc3 7a00 	vstr	s15, [r3]
    evlv[1] = vlvCountsToAmps(adc_counts[1][11]);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3320      	adds	r3, #32
 80023d0:	8adb      	ldrh	r3, [r3, #22]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f9c0 	bl	8002758 <vlvCountsToAmps>
 80023d8:	eef0 7a40 	vmov.f32	s15, s0
 80023dc:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <updatePeripherals+0x2b8>)
 80023de:	edc3 7a01 	vstr	s15, [r3, #4]
    evlv[2] = vlvCountsToAmps(adc_counts[1][9]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3320      	adds	r3, #32
 80023e6:	8a5b      	ldrh	r3, [r3, #18]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f9b5 	bl	8002758 <vlvCountsToAmps>
 80023ee:	eef0 7a40 	vmov.f32	s15, s0
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <updatePeripherals+0x2b8>)
 80023f4:	edc3 7a02 	vstr	s15, [r3, #8]
    evlv[3] = vlvCountsToAmps(adc_counts[1][7]);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3320      	adds	r3, #32
 80023fc:	89db      	ldrh	r3, [r3, #14]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f9aa 	bl	8002758 <vlvCountsToAmps>
 8002404:	eef0 7a40 	vmov.f32	s15, s0
 8002408:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <updatePeripherals+0x2b8>)
 800240a:	edc3 7a03 	vstr	s15, [r3, #12]
    evlv[4] = vlvCountsToAmps(adc_counts[1][5]);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3320      	adds	r3, #32
 8002412:	895b      	ldrh	r3, [r3, #10]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f99f 	bl	8002758 <vlvCountsToAmps>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <updatePeripherals+0x2b8>)
 8002420:	edc3 7a04 	vstr	s15, [r3, #16]
    evlv[5] = vlvCountsToAmps(adc_counts[1][3]);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3320      	adds	r3, #32
 8002428:	88db      	ldrh	r3, [r3, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f994 	bl	8002758 <vlvCountsToAmps>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <updatePeripherals+0x2b8>)
 8002436:	edc3 7a05 	vstr	s15, [r3, #20]
    evlv[6] = vlvCountsToAmps(adc_counts[1][1]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f989 	bl	8002758 <vlvCountsToAmps>
 8002446:	eef0 7a40 	vmov.f32	s15, s0
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <updatePeripherals+0x2b8>)
 800244c:	edc3 7a06 	vstr	s15, [r3, #24]
    evlv[7] = vlvCountsToAmps(adc_counts[0][10]);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8a9b      	ldrh	r3, [r3, #20]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f97f 	bl	8002758 <vlvCountsToAmps>
 800245a:	eef0 7a40 	vmov.f32	s15, s0
 800245e:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <updatePeripherals+0x2b8>)
 8002460:	edc3 7a07 	vstr	s15, [r3, #28]
    evlv[8] = vlvCountsToAmps(adc_counts[0][12]);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8b1b      	ldrh	r3, [r3, #24]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f975 	bl	8002758 <vlvCountsToAmps>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <updatePeripherals+0x2b8>)
 8002474:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load pressure transducer voltages */
    for (int8_t i = 7; i >= 2; --i) {
 8002478:	2307      	movs	r3, #7
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e021      	b.n	80024c2 <updatePeripherals+0x1d2>
        uint8_t channel = 7-i;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	f1c3 0307 	rsb	r3, r3, #7
 8002484:	72fb      	strb	r3, [r7, #11]
        pressure[channel] = pt_counts_to_psi( channel, adc_counts[0][i]) - pt_ambients[channel];
 8002486:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002490:	7afb      	ldrb	r3, [r7, #11]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f9bf 	bl	8001818 <pt_counts_to_psi>
 800249a:	eeb0 7a40 	vmov.f32	s14, s0
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	4a42      	ldr	r2, [pc, #264]	; (80025ac <updatePeripherals+0x2bc>)
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <updatePeripherals+0x2c0>)
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 7; i >= 2; --i) {
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	3b01      	subs	r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	dcd9      	bgt.n	800247e <updatePeripherals+0x18e>
    }

    /* Load mtr currents */
    i_mtr_ab[0] = mtrCountsToAmps(adc_counts[2][5]);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f961 	bl	8002798 <mtrCountsToAmps>
 80024d6:	eef0 7a40 	vmov.f32	s15, s0
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <updatePeripherals+0x2c4>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]
    i_mtr_ab[1] = mtrCountsToAmps(adc_counts[2][4]);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3340      	adds	r3, #64	; 0x40
 80024e4:	891b      	ldrh	r3, [r3, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f956 	bl	8002798 <mtrCountsToAmps>
 80024ec:	eef0 7a40 	vmov.f32	s15, s0
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <updatePeripherals+0x2c4>)
 80024f2:	edc3 7a01 	vstr	s15, [r3, #4]
    i_mtr_ab[2] = mtrCountsToAmps(adc_counts[2][0]);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3340      	adds	r3, #64	; 0x40
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f94b 	bl	8002798 <mtrCountsToAmps>
 8002502:	eef0 7a40 	vmov.f32	s15, s0
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <updatePeripherals+0x2c4>)
 8002508:	edc3 7a02 	vstr	s15, [r3, #8]
    i_mtr_ab[3] = mtrCountsToAmps(adc_counts[2][1]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3340      	adds	r3, #64	; 0x40
 8002510:	885b      	ldrh	r3, [r3, #2]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f940 	bl	8002798 <mtrCountsToAmps>
 8002518:	eef0 7a40 	vmov.f32	s15, s0
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <updatePeripherals+0x2c4>)
 800251e:	edc3 7a03 	vstr	s15, [r3, #12]

    i_mtr[0]    = mtrCountsToAmps(adc_counts[2][2]);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3340      	adds	r3, #64	; 0x40
 8002526:	889b      	ldrh	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f935 	bl	8002798 <mtrCountsToAmps>
 800252e:	eef0 7a40 	vmov.f32	s15, s0
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <updatePeripherals+0x2c8>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
    i_mtr[1]    = mtrCountsToAmps(adc_counts[2][3]);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3340      	adds	r3, #64	; 0x40
 800253c:	88db      	ldrh	r3, [r3, #6]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f92a 	bl	8002798 <mtrCountsToAmps>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <updatePeripherals+0x2c8>)
 800254a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Load thermocouples temps above */

    /* Load potentiometer degrees */
    for (int8_t i = 9; i >= 6; --i) {
 800254e:	2309      	movs	r3, #9
 8002550:	73bb      	strb	r3, [r7, #14]
 8002552:	e020      	b.n	8002596 <updatePeripherals+0x2a6>
        int8_t channel  = 9-i;
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	f1c3 0309 	rsb	r3, r3, #9
 800255a:	b2db      	uxtb	r3, r3
 800255c:	733b      	strb	r3, [r7, #12]
        if (channel < NUM_POTS) {  // Press board code uses 4 pots
 800255e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	dc13      	bgt.n	800258e <updatePeripherals+0x29e>
        	epot[channel]   = potCountsToDegrees(adc_counts[2][i], channel);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800256e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002572:	7b3a      	ldrb	r2, [r7, #12]
 8002574:	f997 400c 	ldrsb.w	r4, [r7, #12]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f92c 	bl	80027d8 <potCountsToDegrees>
 8002580:	eef0 7a40 	vmov.f32	s15, s0
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <updatePeripherals+0x2cc>)
 8002586:	00a3      	lsls	r3, r4, #2
 8002588:	4413      	add	r3, r2
 800258a:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 9; i >= 6; --i) {
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	3b01      	subs	r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	73bb      	strb	r3, [r7, #14]
 8002596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800259a:	2b05      	cmp	r3, #5
 800259c:	dcda      	bgt.n	8002554 <updatePeripherals+0x264>
        }
    }

    /* Load stepper motor position */
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 800259e:	2300      	movs	r3, #0
 80025a0:	737b      	strb	r3, [r7, #13]
 80025a2:	e01a      	b.n	80025da <updatePeripherals+0x2ea>
 80025a4:	2000030c 	.word	0x2000030c
 80025a8:	20000330 	.word	0x20000330
 80025ac:	2000025c 	.word	0x2000025c
 80025b0:	200002f4 	.word	0x200002f4
 80025b4:	20000374 	.word	0x20000374
 80025b8:	20000384 	.word	0x20000384
 80025bc:	20000394 	.word	0x20000394
        mtr_pos[i] = curPos[i];
 80025c0:	7b7a      	ldrb	r2, [r7, #13]
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	494c      	ldr	r1, [pc, #304]	; (80026f8 <updatePeripherals+0x408>)
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	440a      	add	r2, r1
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	494b      	ldr	r1, [pc, #300]	; (80026fc <updatePeripherals+0x40c>)
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	3301      	adds	r3, #1
 80025d8:	737b      	strb	r3, [r7, #13]
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d9ef      	bls.n	80025c0 <updatePeripherals+0x2d0>
    }

    /* Load board currents and voltages */
    i_batt  = adc_counts[2][12]*ibatt_cal;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3340      	adds	r3, #64	; 0x40
 80025e4:	8b1b      	ldrh	r3, [r3, #24]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff60 	bl	80004ac <__aeabi_i2d>
 80025ec:	a33a      	add	r3, pc, #232	; (adr r3, 80026d8 <updatePeripherals+0x3e8>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ffc5 	bl	8000580 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fab7 	bl	8000b70 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4a3e      	ldr	r2, [pc, #248]	; (8002700 <updatePeripherals+0x410>)
 8002606:	6013      	str	r3, [r2, #0]
    e_batt  = adc_counts[2][13]*ebatt_slope + ebatt_offset;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3340      	adds	r3, #64	; 0x40
 800260c:	8b5b      	ldrh	r3, [r3, #26]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff4c 	bl	80004ac <__aeabi_i2d>
 8002614:	a332      	add	r3, pc, #200	; (adr r3, 80026e0 <updatePeripherals+0x3f0>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd ffb1 	bl	8000580 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	a330      	add	r3, pc, #192	; (adr r3, 80026e8 <updatePeripherals+0x3f8>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd fdf0 	bl	8000210 <__aeabi_dsub>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fa9a 	bl	8000b70 <__aeabi_d2f>
 800263c:	4603      	mov	r3, r0
 800263e:	4a31      	ldr	r2, [pc, #196]	; (8002704 <updatePeripherals+0x414>)
 8002640:	6013      	str	r3, [r2, #0]
    i3v     = adc_counts[2][10]*i3v_cal;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3340      	adds	r3, #64	; 0x40
 8002646:	8a9b      	ldrh	r3, [r3, #20]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff2f 	bl	80004ac <__aeabi_i2d>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fa8b 	bl	8000b70 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <updatePeripherals+0x418>)
 800265e:	6013      	str	r3, [r2, #0]
    e3v     = adc_counts[2][11]*e3v_cal;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3340      	adds	r3, #64	; 0x40
 8002664:	8adb      	ldrh	r3, [r3, #22]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff20 	bl	80004ac <__aeabi_i2d>
 800266c:	a320      	add	r3, pc, #128	; (adr r3, 80026f0 <updatePeripherals+0x400>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ff85 	bl	8000580 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fa77 	bl	8000b70 <__aeabi_d2f>
 8002682:	4603      	mov	r3, r0
 8002684:	4a21      	ldr	r2, [pc, #132]	; (800270c <updatePeripherals+0x41c>)
 8002686:	6013      	str	r3, [r2, #0]
    i5v     = adc_counts[0][8]*i5v_cal;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8a1b      	ldrh	r3, [r3, #16]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff0d 	bl	80004ac <__aeabi_i2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fa69 	bl	8000b70 <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <updatePeripherals+0x420>)
 80026a2:	6013      	str	r3, [r2, #0]
    e5v     = adc_counts[0][9]*e5v_cal;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8a5b      	ldrh	r3, [r3, #18]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd feff 	bl	80004ac <__aeabi_i2d>
 80026ae:	a310      	add	r3, pc, #64	; (adr r3, 80026f0 <updatePeripherals+0x400>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fd ff64 	bl	8000580 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fa56 	bl	8000b70 <__aeabi_d2f>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <updatePeripherals+0x424>)
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	f3af 8000 	nop.w
 80026d8:	a7693b02 	.word	0xa7693b02
 80026dc:	3f908107 	.word	0x3f908107
 80026e0:	77318fc5 	.word	0x77318fc5
 80026e4:	3f6f212d 	.word	0x3f6f212d
 80026e8:	c5d63886 	.word	0xc5d63886
 80026ec:	3fe2346d 	.word	0x3fe2346d
 80026f0:	ad045a83 	.word	0xad045a83
 80026f4:	3f5a665d 	.word	0x3f5a665d
 80026f8:	200003a8 	.word	0x200003a8
 80026fc:	20000368 	.word	0x20000368
 8002700:	200002b4 	.word	0x200002b4
 8002704:	200002b0 	.word	0x200002b0
 8002708:	200002c8 	.word	0x200002c8
 800270c:	200002bc 	.word	0x200002bc
 8002710:	200002c4 	.word	0x200002c4
 8002714:	200002c0 	.word	0x200002c0

08002718 <vlvCountsToVolts>:

float vlvCountsToVolts(uint16_t counts) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
    return counts*evlv_cal;
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fec1 	bl	80004ac <__aeabi_i2d>
 800272a:	a309      	add	r3, pc, #36	; (adr r3, 8002750 <vlvCountsToVolts+0x38>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fd ff26 	bl	8000580 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa18 	bl	8000b70 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	ee07 3a90 	vmov	s15, r3
}
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	6ea67bd5 	.word	0x6ea67bd5
 8002754:	3f6a9999 	.word	0x3f6a9999

08002758 <vlvCountsToAmps>:

float vlvCountsToAmps(uint16_t counts) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
    return counts*ivlv_cal;
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fea1 	bl	80004ac <__aeabi_i2d>
 800276a:	a309      	add	r3, pc, #36	; (adr r3, 8002790 <vlvCountsToAmps+0x38>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ff06 	bl	8000580 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe f9f8 	bl	8000b70 <__aeabi_d2f>
 8002780:	4603      	mov	r3, r0
 8002782:	ee07 3a90 	vmov	s15, r3
}
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	0b68130f 	.word	0x0b68130f
 8002794:	3f6a6663 	.word	0x3f6a6663

08002798 <mtrCountsToAmps>:
    return ( counts- pt_offset[pt_num]) *pt_slope[pt_num] - pt_ambients[pt_num];
	//return 0;
}
*/

float mtrCountsToAmps(uint16_t counts) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
    return counts*imtr_cal;
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe81 	bl	80004ac <__aeabi_i2d>
 80027aa:	a309      	add	r3, pc, #36	; (adr r3, 80027d0 <mtrCountsToAmps+0x38>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fee6 	bl	8000580 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f9d8 	bl	8000b70 <__aeabi_d2f>
 80027c0:	4603      	mov	r3, r0
 80027c2:	ee07 3a90 	vmov	s15, r3
}
 80027c6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	0b68130f 	.word	0x0b68130f
 80027d4:	3f6a6663 	.word	0x3f6a6663

080027d8 <potCountsToDegrees>:

float potCountsToDegrees(uint16_t counts, uint8_t pot_num) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	80fb      	strh	r3, [r7, #6]
 80027e4:	4613      	mov	r3, r2
 80027e6:	717b      	strb	r3, [r7, #5]
    // negative sign to align motor pos direction with pot pos direction
    return -EPOT_CHAR_SLOPE*(
                        (pot_cal_info.slope * (counts - pot_cal_info.offset))
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <potCountsToDegrees+0x50>)
 80027ea:	ed93 7a00 	vldr	s14, [r3]
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <potCountsToDegrees+0x50>)
 80027fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80027fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002802:	ee27 7a27 	vmul.f32	s14, s14, s15
                         - pot_ambients[pot_num] - EPOT_CHAR_OFFSET
 8002806:	797b      	ldrb	r3, [r7, #5]
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <potCountsToDegrees+0x54>)
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
    return -EPOT_CHAR_SLOPE*(
 8002816:	eef1 7a67 	vneg.f32	s15, s15
                           );
}
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	200006f0 	.word	0x200006f0
 800282c:	20000274 	.word	0x20000274

08002830 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
		handleMotorStepping(0);
	}
	else if (htim == &TIM_MTR1_STEP) {
		handleMotorStepping(1);
	}
}
 8002846:	e01e      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_50MS) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	e016      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_100MS) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d103      	bne.n	8002868 <HAL_TIM_PeriodElapsedCallback+0x38>
		periodic_flag_100ms = 1;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
}
 8002866:	e00e      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR0_STEP) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d103      	bne.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x48>
		handleMotorStepping(0);
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff f9e3 	bl	8001c3c <handleMotorStepping>
}
 8002876:	e006      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR1_STEP) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x56>
		handleMotorStepping(1);
 8002880:	2001      	movs	r0, #1
 8002882:	f7ff f9db 	bl	8001c3c <handleMotorStepping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20002080 	.word	0x20002080
 8002894:	200007f0 	.word	0x200007f0
 8002898:	200008ac 	.word	0x200008ac
 800289c:	2000207c 	.word	0x2000207c
 80028a0:	20000bdc 	.word	0x20000bdc
 80028a4:	20000900 	.word	0x20000900
 80028a8:	20000a94 	.word	0x20000a94
 80028ac:	20000d48 	.word	0x20000d48

080028b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    // idle detection needs at least one UART clock to detect the bus is idle. So
    // in the case, that the transmission length is one full buffer length
    // and the start buffer pointer is at 0, it will be also 0 at the end of the
    // transmission. In this case the DMA rollover will increment the RxRollover
    // variable first and len will not be zero.
    if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {                    // Check if it is an "Idle Interrupt"
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	f040 8083 	bne.w	80029ce <HAL_UART_RxCpltCallback+0x11e>
        __HAL_UART_CLEAR_IDLEFLAG(huart);                             // clear the interrupt
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]

        uint16_t start = RxBfrPos;                                        // Rx bytes start position (=last buffer position)
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	823b      	strh	r3, [r7, #16]
        RxBfrPos = DMA_RX_BUFFER_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;// determine actual buffer position
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 80028f6:	801a      	strh	r2, [r3, #0]
        uint16_t len = DMA_RX_BUFFER_SIZE;                                // init len with max. size
 80028f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028fc:	82fb      	strh	r3, [r7, #22]

        if(RxRollover < 2)  {
 80028fe:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_UART_RxCpltCallback+0x138>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d81b      	bhi.n	800293e <HAL_UART_RxCpltCallback+0x8e>
            if(RxRollover) {                                                        // rolled over once
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_UART_RxCpltCallback+0x138>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d011      	beq.n	8002932 <HAL_UART_RxCpltCallback+0x82>
                if(RxBfrPos <= start) {
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	8a3a      	ldrh	r2, [r7, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d308      	bcc.n	800292a <HAL_UART_RxCpltCallback+0x7a>
                    len = RxBfrPos + DMA_RX_BUFFER_SIZE - start;  // no bytes overwritten
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	8a3b      	ldrh	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	b29b      	uxth	r3, r3
 8002922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002926:	82fb      	strh	r3, [r7, #22]
 8002928:	e00c      	b.n	8002944 <HAL_UART_RxCpltCallback+0x94>
                } else {
                    len = DMA_RX_BUFFER_SIZE + 1;                 // bytes overwritten error
 800292a:	f640 0301 	movw	r3, #2049	; 0x801
 800292e:	82fb      	strh	r3, [r7, #22]
 8002930:	e008      	b.n	8002944 <HAL_UART_RxCpltCallback+0x94>
                }
            } else {
                len = RxBfrPos - start;                           // no bytes overwritten
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	8a3b      	ldrh	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	82fb      	strh	r3, [r7, #22]
 800293c:	e002      	b.n	8002944 <HAL_UART_RxCpltCallback+0x94>
            }
        } else {
            len = DMA_RX_BUFFER_SIZE + 2;                         // dual rollover error
 800293e:	f640 0302 	movw	r3, #2050	; 0x802
 8002942:	82fb      	strh	r3, [r7, #22]
        }

        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 8002944:	8afb      	ldrh	r3, [r7, #22]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02d      	beq.n	80029a6 <HAL_UART_RxCpltCallback+0xf6>
 800294a:	8afb      	ldrh	r3, [r7, #22]
 800294c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002950:	d829      	bhi.n	80029a6 <HAL_UART_RxCpltCallback+0xf6>
            uint16_t bytes_in_first_part = len;
 8002952:	8afb      	ldrh	r3, [r7, #22]
 8002954:	82bb      	strh	r3, [r7, #20]
            uint16_t bytes_in_second_part = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	827b      	strh	r3, [r7, #18]
            if (RxBfrPos < start) { // if data loops in buffer
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_UART_RxCpltCallback+0x134>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	8a3a      	ldrh	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d907      	bls.n	8002974 <HAL_UART_RxCpltCallback+0xc4>
                bytes_in_first_part = DMA_RX_BUFFER_SIZE - start;
 8002964:	8a3b      	ldrh	r3, [r7, #16]
 8002966:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800296a:	82bb      	strh	r3, [r7, #20]
                bytes_in_second_part= len - bytes_in_first_part;
 800296c:	8afa      	ldrh	r2, [r7, #22]
 800296e:	8abb      	ldrh	r3, [r7, #20]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	827b      	strh	r3, [r7, #18]
            }

            // handle telem for yourself immediately
            memcpy(temp_telem_buffer, DMA_RX_Buffer+start, bytes_in_first_part);
 8002974:	8a3b      	ldrh	r3, [r7, #16]
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_UART_RxCpltCallback+0x13c>)
 8002978:	4413      	add	r3, r2
 800297a:	8aba      	ldrh	r2, [r7, #20]
 800297c:	4619      	mov	r1, r3
 800297e:	481c      	ldr	r0, [pc, #112]	; (80029f0 <HAL_UART_RxCpltCallback+0x140>)
 8002980:	f00b fcf6 	bl	800e370 <memcpy>
            memcpy(temp_telem_buffer+bytes_in_first_part, DMA_RX_Buffer, bytes_in_second_part);
 8002984:	8abb      	ldrh	r3, [r7, #20]
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_UART_RxCpltCallback+0x140>)
 8002988:	4413      	add	r3, r2
 800298a:	8a7a      	ldrh	r2, [r7, #18]
 800298c:	4917      	ldr	r1, [pc, #92]	; (80029ec <HAL_UART_RxCpltCallback+0x13c>)
 800298e:	4618      	mov	r0, r3
 8002990:	f00b fcee 	bl	800e370 <memcpy>
            uint8_t cmd_status = receive_data(huart, temp_telem_buffer, len);
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	461a      	mov	r2, r3
 8002998:	4915      	ldr	r1, [pc, #84]	; (80029f0 <HAL_UART_RxCpltCallback+0x140>)
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f005 fdb8 	bl	8008510 <receive_data>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 80029a4:	e00f      	b.n	80029c6 <HAL_UART_RxCpltCallback+0x116>
                last_telem_packet_pos = (last_telem_packet_pos + 1) % NUM_BUFFER_PACKETS;
            }
            */
        } else {
            // buffer overflow error:
            HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80029a6:	2102      	movs	r1, #2
 80029a8:	4812      	ldr	r0, [pc, #72]	; (80029f4 <HAL_UART_RxCpltCallback+0x144>)
 80029aa:	f007 fed4 	bl	800a756 <HAL_GPIO_TogglePin>
			init_board(OWN_BOARD_ADDR); //Fixes an issue with CLB_board_addr changing
 80029ae:	2003      	movs	r0, #3
 80029b0:	f005 fc7c 	bl	80082ac <init_board>
			last_telem_packet_pos = 0;
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_UART_RxCpltCallback+0x148>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // dma buffer overflowed
 80029ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029be:	490b      	ldr	r1, [pc, #44]	; (80029ec <HAL_UART_RxCpltCallback+0x13c>)
 80029c0:	480e      	ldr	r0, [pc, #56]	; (80029fc <HAL_UART_RxCpltCallback+0x14c>)
 80029c2:	f00a fc38 	bl	800d236 <HAL_UART_Receive_DMA>
        }

        RxRollover = 0;                                                    // reset the Rollover variable
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_UART_RxCpltCallback+0x138>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
    } else {
        // no idle flag? --> DMA rollover occurred
        RxRollover++;       // increment Rollover Counter
    }
}
 80029cc:	e005      	b.n	80029da <HAL_UART_RxCpltCallback+0x12a>
        RxRollover++;       // increment Rollover Counter
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_UART_RxCpltCallback+0x138>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_UART_RxCpltCallback+0x138>)
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000057e 	.word	0x2000057e
 80029e8:	20000580 	.word	0x20000580
 80029ec:	2000178c 	.word	0x2000178c
 80029f0:	2000047c 	.word	0x2000047c
 80029f4:	40020800 	.word	0x40020800
 80029f8:	2000057c 	.word	0x2000057c
 80029fc:	2000202c 	.word	0x2000202c

08002a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a04:	f006 ff1e 	bl	8009844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a08:	f000 f97e 	bl	8002d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a0c:	f000 fd18 	bl	8003440 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a10:	f000 fcf6 	bl	8003400 <MX_DMA_Init>
  MX_SPI1_Init();
 8002a14:	f000 fa00 	bl	8002e18 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a18:	f000 fa34 	bl	8002e84 <MX_SPI2_Init>
  MX_SPI4_Init();
 8002a1c:	f000 fa68 	bl	8002ef0 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002a20:	f000 fcc4 	bl	80033ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002a24:	f000 fa9a 	bl	8002f5c <MX_TIM2_Init>
  MX_TIM6_Init();
 8002a28:	f000 fbe8 	bl	80031fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8002a2c:	f000 fc1c 	bl	8003268 <MX_TIM7_Init>
  MX_TIM10_Init();
 8002a30:	f000 fc50 	bl	80032d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002a34:	f000 fc72 	bl	800331c <MX_TIM11_Init>
  MX_TIM3_Init();
 8002a38:	f000 fb10 	bl	800305c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002a3c:	f000 fb90 	bl	8003160 <MX_TIM5_Init>
  MX_TIM13_Init();
 8002a40:	f000 fc90 	bl	8003364 <MX_TIM13_Init>
  MX_IWDG_Init();
 8002a44:	f000 f9ce 	bl	8002de4 <MX_IWDG_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8002a48:	488f      	ldr	r0, [pc, #572]	; (8002c88 <main+0x288>)
 8002a4a:	f009 fa51 	bl	800bef0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 8002a4e:	488f      	ldr	r0, [pc, #572]	; (8002c8c <main+0x28c>)
 8002a50:	f009 fab6 	bl	800bfc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8002a54:	488e      	ldr	r0, [pc, #568]	; (8002c90 <main+0x290>)
 8002a56:	f009 fab3 	bl	800bfc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8002a5a:	488e      	ldr	r0, [pc, #568]	; (8002c94 <main+0x294>)
 8002a5c:	f009 fab0 	bl	800bfc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&TIM_MTR0_PWM);
 8002a60:	488d      	ldr	r0, [pc, #564]	; (8002c98 <main+0x298>)
 8002a62:	f009 fa45 	bl	800bef0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&TIM_MTR1_PWM);
 8002a66:	488d      	ldr	r0, [pc, #564]	; (8002c9c <main+0x29c>)
 8002a68:	f009 fa42 	bl	800bef0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_MTR0_STEP);
 8002a6c:	488c      	ldr	r0, [pc, #560]	; (8002ca0 <main+0x2a0>)
 8002a6e:	f009 faa7 	bl	800bfc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_MTR1_STEP);
 8002a72:	488c      	ldr	r0, [pc, #560]	; (8002ca4 <main+0x2a4>)
 8002a74:	f009 faa4 	bl	800bfc0 <HAL_TIM_Base_Start_IT>

  // UART DMA
  __HAL_UART_ENABLE_IT(&COM_UART, UART_IT_IDLE);   // enable idle line interrupt
 8002a78:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <main+0x2a8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	4b8a      	ldr	r3, [pc, #552]	; (8002ca8 <main+0x2a8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0210 	orr.w	r2, r2, #16
 8002a86:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8002a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8c:	4987      	ldr	r1, [pc, #540]	; (8002cac <main+0x2ac>)
 8002a8e:	4886      	ldr	r0, [pc, #536]	; (8002ca8 <main+0x2a8>)
 8002a90:	f00a fbd1 	bl	800d236 <HAL_UART_Receive_DMA>

  // Read variables from flash: this must be called very early in initialization!
  HAL_Delay(100);  // Small delay to ensure flash boots up completely
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f006 ff47 	bl	8009928 <HAL_Delay>
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8002a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9e:	4a84      	ldr	r2, [pc, #528]	; (8002cb0 <main+0x2b0>)
 8002aa0:	4984      	ldr	r1, [pc, #528]	; (8002cb4 <main+0x2b4>)
 8002aa2:	4885      	ldr	r0, [pc, #532]	; (8002cb8 <main+0x2b8>)
 8002aa4:	f006 fbe5 	bl	8009272 <init_flash>
  read_nonvolatile_variables();
 8002aa8:	f000 fe4c 	bl	8003744 <read_nonvolatile_variables>

  // Initializations
  init_board(OWN_BOARD_ADDR);  // Comms
 8002aac:	2003      	movs	r0, #3
 8002aae:	f005 fbfd 	bl	80082ac <init_board>
  init_autosequence_constants();  // Hardcoded values
 8002ab2:	f7fe fa29 	bl	8000f08 <init_autosequence_constants>
  init_autosequence_control_variables();
 8002ab6:	f7fe faad 	bl	8001014 <init_autosequence_control_variables>
  init_tank_pressure_control_configuration();  // PID
 8002aba:	f7fe fa5b 	bl	8000f74 <init_tank_pressure_control_configuration>
  init_hardware();  // Press board sensors, etc
 8002abe:	f7fe ff63 	bl	8001988 <init_hardware>

  // Packet values
  telem_rate = 1000/(TIM_100MS.Init.Period+1);
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <main+0x294>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b7a      	ldr	r3, [pc, #488]	; (8002cbc <main+0x2bc>)
 8002ad4:	701a      	strb	r2, [r3, #0]
  adc_rate = 1000/(TIM_5MS.Init.Period+1);
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <main+0x28c>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <main+0x2c0>)
 8002ae8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  execute_autosequence();
 8002aea:	f7fe fce7 	bl	80014bc <execute_autosequence>

	  if (periodic_flag_50ms) {
 8002aee:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <main+0x2c4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <main+0x126>
		  periodic_flag_50ms = 0;
 8002af8:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <main+0x2c4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002afe:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <main+0x2c8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10f      	bne.n	8002b26 <main+0x126>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002b06:	4b71      	ldr	r3, [pc, #452]	; (8002ccc <main+0x2cc>)
 8002b08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <main+0x116>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 8002b10:	486f      	ldr	r0, [pc, #444]	; (8002cd0 <main+0x2d0>)
 8002b12:	f003 feb9 	bl	8006888 <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002b16:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <main+0x2cc>)
 8002b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <main+0x126>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 8002b20:	486c      	ldr	r0, [pc, #432]	; (8002cd4 <main+0x2d4>)
 8002b22:	f003 feb1 	bl	8006888 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 8002b26:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <main+0x2d8>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d079      	beq.n	8002c24 <main+0x224>
		  periodic_flag_5ms = 0;
 8002b30:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <main+0x2d8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]

		  // sample adcs and thermocouples
		  readAdcs(&SPI_ADC, adc_pins, adc_counts);
 8002b36:	4a69      	ldr	r2, [pc, #420]	; (8002cdc <main+0x2dc>)
 8002b38:	4969      	ldr	r1, [pc, #420]	; (8002ce0 <main+0x2e0>)
 8002b3a:	486a      	ldr	r0, [pc, #424]	; (8002ce4 <main+0x2e4>)
 8002b3c:	f7ff fac4 	bl	80020c8 <readAdcs>
		  readThermocouples(&SPI_TC, tc_pins, 5);
 8002b40:	2205      	movs	r2, #5
 8002b42:	4969      	ldr	r1, [pc, #420]	; (8002ce8 <main+0x2e8>)
 8002b44:	4869      	ldr	r0, [pc, #420]	; (8002cec <main+0x2ec>)
 8002b46:	f7ff fba9 	bl	800229c <readThermocouples>
		  updatePeripherals(adc_counts);
 8002b4a:	4864      	ldr	r0, [pc, #400]	; (8002cdc <main+0x2dc>)
 8002b4c:	f7ff fbd0 	bl	80022f0 <updatePeripherals>

		  update_serial_data_vars();
 8002b50:	f003 f9d0 	bl	8005ef4 <update_serial_data_vars>

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 8002b54:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <main+0x2c8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d105      	bne.n	8002b68 <main+0x168>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 8002b5c:	485c      	ldr	r0, [pc, #368]	; (8002cd0 <main+0x2d0>)
 8002b5e:	f003 fe5e 	bl	800681e <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 8002b62:	485c      	ldr	r0, [pc, #368]	; (8002cd4 <main+0x2d4>)
 8002b64:	f003 fe5b 	bl	800681e <tank_autopress_bang_bang>
		  }

		  // Initial motor position
		  if (STATE == Startup || STATE == Ignition) {
 8002b68:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <main+0x2c8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d003      	beq.n	8002b78 <main+0x178>
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <main+0x2c8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11c      	bne.n	8002bb2 <main+0x1b2>
			  autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();
 8002b78:	f7fe fc22 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a53      	ldr	r2, [pc, #332]	; (8002ccc <main+0x2cc>)
 8002b80:	6293      	str	r3, [r2, #40]	; 0x28

			  // Initial motor position is arbitrarily put in the 5ms loop
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002b82:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <main+0x2c8>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d009      	beq.n	8002b9e <main+0x19e>
 8002b8a:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <main+0x2c8>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d10f      	bne.n	8002bb2 <main+0x1b2>
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <main+0x2cc>)
 8002b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
					  >= autosequence.startup_motor_start_delay_ms)) {
 8002b96:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <main+0x2cc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d309      	bcc.n	8002bb2 <main+0x1b2>
				  // Allow manual transition to Ignition
				  autosequence.startup_init_motor_pos_complete = 1;
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <main+0x2cc>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

				  // Set motors to initial position
				  tank_startup_init_motor_position(&tanks[LOX_TANK_NUM]);
 8002ba6:	484a      	ldr	r0, [pc, #296]	; (8002cd0 <main+0x2d0>)
 8002ba8:	f003 ff8e 	bl	8006ac8 <tank_startup_init_motor_position>
				  tank_startup_init_motor_position(&tanks[FUEL_TANK_NUM]);
 8002bac:	4849      	ldr	r0, [pc, #292]	; (8002cd4 <main+0x2d4>)
 8002bae:	f003 ff8b 	bl	8006ac8 <tank_startup_init_motor_position>
			  }
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002bb2:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <main+0x2c8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10f      	bne.n	8002bda <main+0x1da>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002bba:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <main+0x2cc>)
 8002bbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <main+0x1ca>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 8002bc4:	4842      	ldr	r0, [pc, #264]	; (8002cd0 <main+0x2d0>)
 8002bc6:	f003 ff55 	bl	8006a74 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002bca:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <main+0x2cc>)
 8002bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <main+0x1da>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 8002bd4:	483f      	ldr	r0, [pc, #252]	; (8002cd4 <main+0x2d4>)
 8002bd6:	f003 ff4d 	bl	8006a74 <tank_check_control_valve_threshold>
			  }
		  }

		  // Ignitor break detection
		  if (STATE == Ignition && autosequence.T_state
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <main+0x2c8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d108      	bne.n	8002bf4 <main+0x1f4>
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <main+0x2cc>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				  >= autosequence.ignition_ignitor_on_delay_ms) {
 8002be6:	4a39      	ldr	r2, [pc, #228]	; (8002ccc <main+0x2cc>)
 8002be8:	8892      	ldrh	r2, [r2, #4]
 8002bea:	b292      	uxth	r2, r2
		  if (STATE == Ignition && autosequence.T_state
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d301      	bcc.n	8002bf4 <main+0x1f4>
			  update_ignitor_break_detector();
 8002bf0:	f7fe faa8 	bl	8001144 <update_ignitor_break_detector>
		  }

		  // Combustion failure detection
		  if (STATE == Hotfire && autosequence.T_state
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <main+0x2c8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d107      	bne.n	8002c0c <main+0x20c>
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <main+0x2cc>)
 8002bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
				  >= autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms) {
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <main+0x2cc>)
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		  if (STATE == Hotfire && autosequence.T_state
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d301      	bcc.n	8002c0c <main+0x20c>
			  update_combustion_failure_detector();
 8002c08:	f7fe facc 	bl	80011a4 <update_combustion_failure_detector>
		  }

		  // Hard start detection
		  if (STATE == Hotfire) {
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <main+0x2c8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d101      	bne.n	8002c18 <main+0x218>
			  update_hard_start_detector();
 8002c14:	f7fe fafa 	bl	800120c <update_hard_start_detector>
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <main+0x2f0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <main+0x224>
			  save_flash_packet();
 8002c20:	f003 f9c8 	bl	8005fb4 <save_flash_packet>

	  }


	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <main+0x2f4>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <main+0x280>
		  periodic_flag_100ms = 0;
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <main+0x2f4>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]

		  // Every 2 seconds, send a calibration packet instead
		  // of a telemetry packet (once every 20 packets)
		  if (telem_calibration_packet_counter == 0) {
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <main+0x2f8>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <main+0x24a>
			  send_calibration_data();
 8002c3c:	f003 fa40 	bl	80060c0 <send_calibration_data>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002c40:	2101      	movs	r1, #1
 8002c42:	482e      	ldr	r0, [pc, #184]	; (8002cfc <main+0x2fc>)
 8002c44:	f007 fd87 	bl	800a756 <HAL_GPIO_TogglePin>
 8002c48:	e006      	b.n	8002c58 <main+0x258>
		  }
		  else {
			  send_telem_packet(SERVER_ADDR);
 8002c4a:	2007      	movs	r0, #7
 8002c4c:	f003 f990 	bl	8005f70 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002c50:	2101      	movs	r1, #1
 8002c52:	482a      	ldr	r0, [pc, #168]	; (8002cfc <main+0x2fc>)
 8002c54:	f007 fd7f 	bl	800a756 <HAL_GPIO_TogglePin>
		  }
		  // Increment up counter
		  telem_calibration_packet_counter++;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <main+0x2f8>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <main+0x2f8>)
 8002c62:	701a      	strb	r2, [r3, #0]
		  telem_calibration_packet_counter %= 20;
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <main+0x2f8>)
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <main+0x300>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	0919      	lsrs	r1, r3, #4
 8002c70:	460b      	mov	r3, r1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <main+0x2f8>)
 8002c7e:	701a      	strb	r2, [r3, #0]
	  }

	  // Refresh watchdog timer to keep the board running
	  HAL_IWDG_Refresh(&hiwdg);
 8002c80:	4820      	ldr	r0, [pc, #128]	; (8002d04 <main+0x304>)
 8002c82:	f007 fdc4 	bl	800a80e <HAL_IWDG_Refresh>
	  execute_autosequence();
 8002c86:	e730      	b.n	8002aea <main+0xea>
 8002c88:	20000904 	.word	0x20000904
 8002c8c:	20002080 	.word	0x20002080
 8002c90:	200008ac 	.word	0x200008ac
 8002c94:	20000bdc 	.word	0x20000bdc
 8002c98:	20001fe4 	.word	0x20001fe4
 8002c9c:	2000094c 	.word	0x2000094c
 8002ca0:	20000a94 	.word	0x20000a94
 8002ca4:	20000d48 	.word	0x20000d48
 8002ca8:	2000202c 	.word	0x2000202c
 8002cac:	2000178c 	.word	0x2000178c
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	20000854 	.word	0x20000854
 8002cb8:	20002170 	.word	0x20002170
 8002cbc:	200002e8 	.word	0x200002e8
 8002cc0:	200002e9 	.word	0x200002e9
 8002cc4:	2000207c 	.word	0x2000207c
 8002cc8:	200002ac 	.word	0x200002ac
 8002ccc:	2000062c 	.word	0x2000062c
 8002cd0:	20000584 	.word	0x20000584
 8002cd4:	200005d8 	.word	0x200005d8
 8002cd8:	200007f0 	.word	0x200007f0
 8002cdc:	20000720 	.word	0x20000720
 8002ce0:	20000780 	.word	0x20000780
 8002ce4:	20001f8c 	.word	0x20001f8c
 8002ce8:	200006f8 	.word	0x200006f8
 8002cec:	20000c24 	.word	0x20000c24
 8002cf0:	200002f0 	.word	0x200002f0
 8002cf4:	20000900 	.word	0x20000900
 8002cf8:	20000581 	.word	0x20000581
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	200008f4 	.word	0x200008f4

08002d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b094      	sub	sp, #80	; 0x50
 8002d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	2234      	movs	r2, #52	; 0x34
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f00b fb38 	bl	800e38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <SystemClock_Config+0xd4>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <SystemClock_Config+0xd4>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <SystemClock_Config+0xd4>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <SystemClock_Config+0xd8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d54:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <SystemClock_Config+0xd8>)
 8002d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <SystemClock_Config+0xd8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d68:	2309      	movs	r3, #9
 8002d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d72:	2301      	movs	r3, #1
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d76:	2302      	movs	r3, #2
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d80:	2308      	movs	r3, #8
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002d84:	235a      	movs	r3, #90	; 0x5a
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f008 f813 	bl	800adc4 <HAL_RCC_OscConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002da4:	f000 fcc8 	bl	8003738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da8:	230f      	movs	r3, #15
 8002daa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dac:	2302      	movs	r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 fd34 	bl	800a830 <HAL_RCC_ClockConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002dce:	f000 fcb3 	bl	8003738 <Error_Handler>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3750      	adds	r7, #80	; 0x50
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000

08002de4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <MX_IWDG_Init+0x2c>)
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <MX_IWDG_Init+0x30>)
 8002dec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <MX_IWDG_Init+0x2c>)
 8002df0:	2206      	movs	r2, #6
 8002df2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 624;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <MX_IWDG_Init+0x2c>)
 8002df6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8002dfa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002dfc:	4804      	ldr	r0, [pc, #16]	; (8002e10 <MX_IWDG_Init+0x2c>)
 8002dfe:	f007 fcc4 	bl	800a78a <HAL_IWDG_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002e08:	f000 fc96 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200008f4 	.word	0x200008f4
 8002e14:	40003000 	.word	0x40003000

08002e18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <MX_SPI1_Init+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e38:	2202      	movs	r2, #2
 8002e3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e64:	220a      	movs	r2, #10
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e68:	4804      	ldr	r0, [pc, #16]	; (8002e7c <MX_SPI1_Init+0x64>)
 8002e6a:	f008 fa49 	bl	800b300 <HAL_SPI_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e74:	f000 fc60 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20001f8c 	.word	0x20001f8c
 8002e80:	40013000 	.word	0x40013000

08002e84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <MX_SPI2_Init+0x68>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002ed0:	220a      	movs	r2, #10
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ed4:	4804      	ldr	r0, [pc, #16]	; (8002ee8 <MX_SPI2_Init+0x64>)
 8002ed6:	f008 fa13 	bl	800b300 <HAL_SPI_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ee0:	f000 fc2a 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000854 	.word	0x20000854
 8002eec:	40003800 	.word	0x40003800

08002ef0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <MX_SPI4_Init+0x68>)
 8002ef8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f00:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f20:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f24:	2218      	movs	r2, #24
 8002f26:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <MX_SPI4_Init+0x64>)
 8002f42:	f008 f9dd 	bl	800b300 <HAL_SPI_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002f4c:	f000 fbf4 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000c24 	.word	0x20000c24
 8002f58:	40013400 	.word	0x40013400

08002f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f70:	f107 0320 	add.w	r3, r7, #32
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	615a      	str	r2, [r3, #20]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44999;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002f96:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002fa4:	2263      	movs	r2, #99	; 0x63
 8002fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fb4:	4828      	ldr	r0, [pc, #160]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002fb6:	f008 ff4b 	bl	800be50 <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002fc0:	f000 fbba 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4821      	ldr	r0, [pc, #132]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002fd2:	f009 fbc1 	bl	800c758 <HAL_TIM_ConfigClockSource>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002fdc:	f000 fbac 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fe0:	481d      	ldr	r0, [pc, #116]	; (8003058 <MX_TIM2_Init+0xfc>)
 8002fe2:	f009 f85d 	bl	800c0a0 <HAL_TIM_PWM_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002fec:	f000 fba4 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff8:	f107 0320 	add.w	r3, r7, #32
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4816      	ldr	r0, [pc, #88]	; (8003058 <MX_TIM2_Init+0xfc>)
 8003000:	f009 ffaa 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800300a:	f000 fb95 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800300e:	2360      	movs	r3, #96	; 0x60
 8003010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003016:	2302      	movs	r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	4619      	mov	r1, r3
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <MX_TIM2_Init+0xfc>)
 8003026:	f009 fad5 	bl	800c5d4 <HAL_TIM_PWM_ConfigChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003030:	f000 fb82 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2204      	movs	r2, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4807      	ldr	r0, [pc, #28]	; (8003058 <MX_TIM2_Init+0xfc>)
 800303c:	f009 faca 	bl	800c5d4 <HAL_TIM_PWM_ConfigChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003046:	f000 fb77 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <MX_TIM2_Init+0xfc>)
 800304c:	f003 fa3c 	bl	80064c8 <HAL_TIM_MspPostInit>

}
 8003050:	bf00      	nop
 8003052:	3738      	adds	r7, #56	; 0x38
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20001fe4 	.word	0x20001fe4

0800305c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003070:	f107 0320 	add.w	r3, r7, #32
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	615a      	str	r2, [r3, #20]
 800308a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <MX_TIM3_Init+0xfc>)
 800308e:	4a33      	ldr	r2, [pc, #204]	; (800315c <MX_TIM3_Init+0x100>)
 8003090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44999;
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <MX_TIM3_Init+0xfc>)
 8003094:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <MX_TIM3_Init+0xfc>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030a2:	2263      	movs	r2, #99	; 0x63
 80030a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030b2:	4829      	ldr	r0, [pc, #164]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030b4:	f008 fecc 	bl	800be50 <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030be:	f000 fb3b 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030cc:	4619      	mov	r1, r3
 80030ce:	4822      	ldr	r0, [pc, #136]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030d0:	f009 fb42 	bl	800c758 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030da:	f000 fb2d 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030de:	481e      	ldr	r0, [pc, #120]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030e0:	f008 ffde 	bl	800c0a0 <HAL_TIM_PWM_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030ea:	f000 fb25 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f6:	f107 0320 	add.w	r3, r7, #32
 80030fa:	4619      	mov	r1, r3
 80030fc:	4816      	ldr	r0, [pc, #88]	; (8003158 <MX_TIM3_Init+0xfc>)
 80030fe:	f009 ff2b 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003108:	f000 fb16 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800310c:	2360      	movs	r3, #96	; 0x60
 800310e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003114:	2302      	movs	r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	2200      	movs	r2, #0
 8003120:	4619      	mov	r1, r3
 8003122:	480d      	ldr	r0, [pc, #52]	; (8003158 <MX_TIM3_Init+0xfc>)
 8003124:	f009 fa56 	bl	800c5d4 <HAL_TIM_PWM_ConfigChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800312e:	f000 fb03 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2204      	movs	r2, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4807      	ldr	r0, [pc, #28]	; (8003158 <MX_TIM3_Init+0xfc>)
 800313a:	f009 fa4b 	bl	800c5d4 <HAL_TIM_PWM_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003144:	f000 faf8 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <MX_TIM3_Init+0xfc>)
 800314a:	f003 f9bd 	bl	80064c8 <HAL_TIM_MspPostInit>

}
 800314e:	bf00      	nop
 8003150:	3738      	adds	r7, #56	; 0x38
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000094c 	.word	0x2000094c
 800315c:	40000400 	.word	0x40000400

08003160 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003174:	463b      	mov	r3, r7
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <MX_TIM5_Init+0x94>)
 800317e:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <MX_TIM5_Init+0x98>)
 8003180:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 44;
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <MX_TIM5_Init+0x94>)
 8003184:	222c      	movs	r2, #44	; 0x2c
 8003186:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <MX_TIM5_Init+0x94>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <MX_TIM5_Init+0x94>)
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <MX_TIM5_Init+0x94>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <MX_TIM5_Init+0x94>)
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031a2:	4814      	ldr	r0, [pc, #80]	; (80031f4 <MX_TIM5_Init+0x94>)
 80031a4:	f008 fe54 	bl	800be50 <HAL_TIM_Base_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80031ae:	f000 fac3 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	4619      	mov	r1, r3
 80031be:	480d      	ldr	r0, [pc, #52]	; (80031f4 <MX_TIM5_Init+0x94>)
 80031c0:	f009 faca 	bl	800c758 <HAL_TIM_ConfigClockSource>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80031ca:	f000 fab5 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031d6:	463b      	mov	r3, r7
 80031d8:	4619      	mov	r1, r3
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_TIM5_Init+0x94>)
 80031dc:	f009 febc 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80031e6:	f000 faa7 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000904 	.word	0x20000904
 80031f8:	40000c00 	.word	0x40000c00

080031fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003202:	463b      	mov	r3, r7
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <MX_TIM6_Init+0x64>)
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <MX_TIM6_Init+0x68>)
 800320e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <MX_TIM6_Init+0x64>)
 8003212:	222c      	movs	r2, #44	; 0x2c
 8003214:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <MX_TIM6_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <MX_TIM6_Init+0x64>)
 800321e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003222:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_TIM6_Init+0x64>)
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <MX_TIM6_Init+0x64>)
 800322c:	f008 fe10 	bl	800be50 <HAL_TIM_Base_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003236:	f000 fa7f 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003242:	463b      	mov	r3, r7
 8003244:	4619      	mov	r1, r3
 8003246:	4806      	ldr	r0, [pc, #24]	; (8003260 <MX_TIM6_Init+0x64>)
 8003248:	f009 fe86 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003252:	f000 fa71 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000d48 	.word	0x20000d48
 8003264:	40001000 	.word	0x40001000

08003268 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326e:	463b      	mov	r3, r7
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <MX_TIM7_Init+0x64>)
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <MX_TIM7_Init+0x68>)
 800327a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 44999;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <MX_TIM7_Init+0x64>)
 800327e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003282:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_TIM7_Init+0x64>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <MX_TIM7_Init+0x64>)
 800328c:	2204      	movs	r2, #4
 800328e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003290:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_TIM7_Init+0x64>)
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003296:	480d      	ldr	r0, [pc, #52]	; (80032cc <MX_TIM7_Init+0x64>)
 8003298:	f008 fdda 	bl	800be50 <HAL_TIM_Base_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80032a2:	f000 fa49 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032ae:	463b      	mov	r3, r7
 80032b0:	4619      	mov	r1, r3
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <MX_TIM7_Init+0x64>)
 80032b4:	f009 fe50 	bl	800cf58 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80032be:	f000 fa3b 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20002080 	.word	0x20002080
 80032d0:	40001400 	.word	0x40001400

080032d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <MX_TIM10_Init+0x40>)
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <MX_TIM10_Init+0x44>)
 80032dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 44999;
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <MX_TIM10_Init+0x40>)
 80032e0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80032e4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <MX_TIM10_Init+0x40>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49;
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <MX_TIM10_Init+0x40>)
 80032ee:	2231      	movs	r2, #49	; 0x31
 80032f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <MX_TIM10_Init+0x40>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <MX_TIM10_Init+0x40>)
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <MX_TIM10_Init+0x40>)
 8003300:	f008 fda6 	bl	800be50 <HAL_TIM_Base_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800330a:	f000 fa15 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200008ac 	.word	0x200008ac
 8003318:	40014400 	.word	0x40014400

0800331c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_TIM11_Init+0x40>)
 8003322:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <MX_TIM11_Init+0x44>)
 8003324:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 44999;
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <MX_TIM11_Init+0x40>)
 8003328:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800332c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <MX_TIM11_Init+0x40>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <MX_TIM11_Init+0x40>)
 8003336:	2263      	movs	r2, #99	; 0x63
 8003338:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <MX_TIM11_Init+0x40>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_TIM11_Init+0x40>)
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_TIM11_Init+0x40>)
 8003348:	f008 fd82 	bl	800be50 <HAL_TIM_Base_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003352:	f000 f9f1 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000bdc 	.word	0x20000bdc
 8003360:	40014800 	.word	0x40014800

08003364 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <MX_TIM13_Init+0x40>)
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <MX_TIM13_Init+0x44>)
 800336c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 44;
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <MX_TIM13_Init+0x40>)
 8003370:	222c      	movs	r2, #44	; 0x2c
 8003372:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <MX_TIM13_Init+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <MX_TIM13_Init+0x40>)
 800337c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003380:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <MX_TIM13_Init+0x40>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MX_TIM13_Init+0x40>)
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800338e:	4805      	ldr	r0, [pc, #20]	; (80033a4 <MX_TIM13_Init+0x40>)
 8003390:	f008 fd5e 	bl	800be50 <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800339a:	f000 f9cd 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000a94 	.word	0x20000a94
 80033a8:	40001c00 	.word	0x40001c00

080033ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033d2:	220c      	movs	r2, #12
 80033d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033e2:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_USART2_UART_Init+0x4c>)
 80033e4:	f009 fe48 	bl	800d078 <HAL_UART_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033ee:	f000 f9a3 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000202c 	.word	0x2000202c
 80033fc:	40004400 	.word	0x40004400

08003400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <MX_DMA_Init+0x3c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <MX_DMA_Init+0x3c>)
 8003410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <MX_DMA_Init+0x3c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	2010      	movs	r0, #16
 8003428:	f006 fb93 	bl	8009b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800342c:	2010      	movs	r0, #16
 800342e:	f006 fbac 	bl	8009b8a <HAL_NVIC_EnableIRQ>

}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	4bb1      	ldr	r3, [pc, #708]	; (8003720 <MX_GPIO_Init+0x2e0>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4ab0      	ldr	r2, [pc, #704]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003460:	f043 0310 	orr.w	r3, r3, #16
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4bae      	ldr	r3, [pc, #696]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	4baa      	ldr	r3, [pc, #680]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4aa9      	ldr	r2, [pc, #676]	; (8003720 <MX_GPIO_Init+0x2e0>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4ba7      	ldr	r3, [pc, #668]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4ba3      	ldr	r3, [pc, #652]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4aa2      	ldr	r2, [pc, #648]	; (8003720 <MX_GPIO_Init+0x2e0>)
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4ba0      	ldr	r3, [pc, #640]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b9c      	ldr	r3, [pc, #624]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a9b      	ldr	r2, [pc, #620]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b99      	ldr	r3, [pc, #612]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b95      	ldr	r3, [pc, #596]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a94      	ldr	r2, [pc, #592]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b92      	ldr	r3, [pc, #584]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	4b8e      	ldr	r3, [pc, #568]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a8d      	ldr	r2, [pc, #564]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034ec:	f043 0308 	orr.w	r3, r3, #8
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <MX_GPIO_Init+0x2e0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 80034fe:	2200      	movs	r2, #0
 8003500:	217f      	movs	r1, #127	; 0x7f
 8003502:	4888      	ldr	r0, [pc, #544]	; (8003724 <MX_GPIO_Init+0x2e4>)
 8003504:	f007 f90e 	bl	800a724 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003508:	2200      	movs	r2, #0
 800350a:	f64f 610f 	movw	r1, #65039	; 0xfe0f
 800350e:	4886      	ldr	r0, [pc, #536]	; (8003728 <MX_GPIO_Init+0x2e8>)
 8003510:	f007 f908 	bl	800a724 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin|mtr0_inB0_Pin
                          |mtr0_inA0_Pin|mtr0_inA1_Pin|mtr3_in0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cs_GPIO_Port, adc0_cs_Pin, GPIO_PIN_SET);
 8003514:	2201      	movs	r2, #1
 8003516:	2108      	movs	r1, #8
 8003518:	4884      	ldr	r0, [pc, #528]	; (800372c <MX_GPIO_Init+0x2ec>)
 800351a:	f007 f903 	bl	800a724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cnvst_GPIO_Port, adc0_cnvst_Pin, GPIO_PIN_SET);
 800351e:	2201      	movs	r2, #1
 8003520:	2110      	movs	r1, #16
 8003522:	4881      	ldr	r0, [pc, #516]	; (8003728 <MX_GPIO_Init+0x2e8>)
 8003524:	f007 f8fe 	bl	800a724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 8003528:	2201      	movs	r2, #1
 800352a:	f241 4107 	movw	r1, #5127	; 0x1407
 800352e:	4880      	ldr	r0, [pc, #512]	; (8003730 <MX_GPIO_Init+0x2f0>)
 8003530:	f007 f8f8 	bl	800a724 <HAL_GPIO_WritePin>
                          |SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 8003534:	2201      	movs	r2, #1
 8003536:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 800353a:	487a      	ldr	r0, [pc, #488]	; (8003724 <MX_GPIO_Init+0x2e4>)
 800353c:	f007 f8f2 	bl	800a724 <HAL_GPIO_WritePin>
                          |tc3_cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003540:	2201      	movs	r2, #1
 8003542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003546:	487b      	ldr	r0, [pc, #492]	; (8003734 <MX_GPIO_Init+0x2f4>)
 8003548:	f007 f8ec 	bl	800a724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin|mtr3_in1_Pin
 800354c:	2200      	movs	r2, #0
 800354e:	f640 619f 	movw	r1, #3743	; 0xe9f
 8003552:	4878      	ldr	r0, [pc, #480]	; (8003734 <MX_GPIO_Init+0x2f4>)
 8003554:	f007 f8e6 	bl	800a724 <HAL_GPIO_WritePin>
                          |mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin|mtr1_inB0_Pin
                          |mtr1_inB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, mtr0_inB1_Pin|GPIO_3_Pin, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800355e:	4873      	ldr	r0, [pc, #460]	; (800372c <MX_GPIO_Init+0x2ec>)
 8003560:	f007 f8e0 	bl	800a724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : en_vlv8_Pin en_vlv7_Pin en_vlv6_Pin en_vlv5_Pin
                           en_vlv4_Pin GPIO_1_Pin en_vlv0_Pin */
  GPIO_InitStruct.Pin = en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 8003564:	237f      	movs	r3, #127	; 0x7f
 8003566:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003568:	2301      	movs	r3, #1
 800356a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	2300      	movs	r3, #0
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4619      	mov	r1, r3
 800357a:	486a      	ldr	r0, [pc, #424]	; (8003724 <MX_GPIO_Init+0x2e4>)
 800357c:	f006 ff26 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv3_Pin en_vlv2_Pin en_vlv1_Pin LED0_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003580:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8003584:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003586:	2301      	movs	r3, #1
 8003588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	4863      	ldr	r0, [pc, #396]	; (8003728 <MX_GPIO_Init+0x2e8>)
 800359a:	f006 ff17 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall1A_Pin e_hall1B_Pin e_hall1C_Pin adc0_eoc_Pin */
  GPIO_InitStruct.Pin = e_hall1A_Pin|e_hall1B_Pin|e_hall1C_Pin|adc0_eoc_Pin;
 800359e:	2317      	movs	r3, #23
 80035a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	485e      	ldr	r0, [pc, #376]	; (800372c <MX_GPIO_Init+0x2ec>)
 80035b2:	f006 ff0b 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cs_Pin mtr0_inB1_Pin */
  GPIO_InitStruct.Pin = adc0_cs_Pin|mtr0_inB1_Pin;
 80035b6:	f640 0308 	movw	r3, #2056	; 0x808
 80035ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035bc:	2301      	movs	r3, #1
 80035be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 031c 	add.w	r3, r7, #28
 80035cc:	4619      	mov	r1, r3
 80035ce:	4857      	ldr	r0, [pc, #348]	; (800372c <MX_GPIO_Init+0x2ec>)
 80035d0:	f006 fefc 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cnvst_Pin mtr0_inB0_Pin mtr0_inA0_Pin mtr0_inA1_Pin
                           mtr3_in0_Pin */
  GPIO_InitStruct.Pin = adc0_cnvst_Pin|mtr0_inB0_Pin|mtr0_inA0_Pin|mtr0_inA1_Pin
 80035d4:	f641 6310 	movw	r3, #7696	; 0x1e10
 80035d8:	61fb      	str	r3, [r7, #28]
                          |mtr3_in0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	484e      	ldr	r0, [pc, #312]	; (8003728 <MX_GPIO_Init+0x2e8>)
 80035ee:	f006 feed 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pin : adc1_eoc_Pin */
  GPIO_InitStruct.Pin = adc1_eoc_Pin;
 80035f2:	2320      	movs	r3, #32
 80035f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc1_eoc_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	4848      	ldr	r0, [pc, #288]	; (8003728 <MX_GPIO_Init+0x2e8>)
 8003606:	f006 fee1 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : adc1_cs_Pin adc1_cnvst_Pin adc2_cs_Pin tc4_cs_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 800360a:	f241 4307 	movw	r3, #5127	; 0x1407
 800360e:	61fb      	str	r3, [r7, #28]
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	2301      	movs	r3, #1
 8003612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	4619      	mov	r1, r3
 8003622:	4843      	ldr	r0, [pc, #268]	; (8003730 <MX_GPIO_Init+0x2f0>)
 8003624:	f006 fed2 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pin : adc2_eoc_Pin */
  GPIO_InitStruct.Pin = adc2_eoc_Pin;
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc2_eoc_GPIO_Port, &GPIO_InitStruct);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	4619      	mov	r1, r3
 800363a:	483a      	ldr	r0, [pc, #232]	; (8003724 <MX_GPIO_Init+0x2e4>)
 800363c:	f006 fec6 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : adc2_cnvst_Pin tc0_cs_Pin tc1_cs_Pin tc2_cs_Pin
                           tc3_cs_Pin */
  GPIO_InitStruct.Pin = adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 8003640:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 8003644:	61fb      	str	r3, [r7, #28]
                          |tc3_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4619      	mov	r1, r3
 8003658:	4832      	ldr	r0, [pc, #200]	; (8003724 <MX_GPIO_Init+0x2e4>)
 800365a:	f006 feb7 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin mtr2_in0_Pin mtr2_in1_Pin mtr2_in2_Pin
                           mtr3_in1_Pin mtr3_in2_Pin mtr1_inA0_Pin mtr1_inA1_Pin
                           mtr1_inB0_Pin mtr1_inB1_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin
 800365e:	f640 739f 	movw	r3, #3999	; 0xf9f
 8003662:	61fb      	str	r3, [r7, #28]
                          |mtr3_in1_Pin|mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin
                          |mtr1_inB0_Pin|mtr1_inB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	2301      	movs	r3, #1
 8003666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	4619      	mov	r1, r3
 8003676:	482f      	ldr	r0, [pc, #188]	; (8003734 <MX_GPIO_Init+0x2f4>)
 8003678:	f006 fea8 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall0A_Pin e_hall0B_Pin e_hall0C_Pin */
  GPIO_InitStruct.Pin = e_hall0A_Pin|e_hall0B_Pin|e_hall0C_Pin;
 800367c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4828      	ldr	r0, [pc, #160]	; (8003734 <MX_GPIO_Init+0x2f4>)
 8003692:	f006 fe9b 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr2_pwm0_Pin mtr2_pwm1_Pin mtr2_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr2_pwm0_Pin|mtr2_pwm1_Pin|mtr2_pwm2_Pin;
 8003696:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800369a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036a8:	2303      	movs	r3, #3
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ac:	f107 031c 	add.w	r3, r7, #28
 80036b0:	4619      	mov	r1, r3
 80036b2:	481d      	ldr	r0, [pc, #116]	; (8003728 <MX_GPIO_Init+0x2e8>)
 80036b4:	f006 fe8a 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr3_pwm0_Pin mtr3_pwm1_Pin mtr3_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr3_pwm0_Pin|mtr3_pwm1_Pin|mtr3_pwm2_Pin;
 80036b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80036bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f107 031c 	add.w	r3, r7, #28
 80036d2:	4619      	mov	r1, r3
 80036d4:	4815      	ldr	r0, [pc, #84]	; (800372c <MX_GPIO_Init+0x2ec>)
 80036d6:	f006 fe79 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 80036da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e0:	2301      	movs	r3, #1
 80036e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 80036ec:	f107 031c 	add.w	r3, r7, #28
 80036f0:	4619      	mov	r1, r3
 80036f2:	480e      	ldr	r0, [pc, #56]	; (800372c <MX_GPIO_Init+0x2ec>)
 80036f4:	f006 fe6a 	bl	800a3cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036f8:	23c0      	movs	r3, #192	; 0xc0
 80036fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003708:	2307      	movs	r3, #7
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 031c 	add.w	r3, r7, #28
 8003710:	4619      	mov	r1, r3
 8003712:	4807      	ldr	r0, [pc, #28]	; (8003730 <MX_GPIO_Init+0x2f0>)
 8003714:	f006 fe5a 	bl	800a3cc <HAL_GPIO_Init>

}
 8003718:	bf00      	nop
 800371a:	3730      	adds	r7, #48	; 0x30
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	40021000 	.word	0x40021000
 8003728:	40020800 	.word	0x40020800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020c00 	.word	0x40020c00

08003738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
}
 800373e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003740:	e7fe      	b.n	8003740 <Error_Handler+0x8>
	...

08003744 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800374a:	b672      	cpsid	i
}
 800374c:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 800374e:	237d      	movs	r3, #125	; 0x7d
 8003750:	4a94      	ldr	r2, [pc, #592]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003752:	2100      	movs	r1, #0
 8003754:	4894      	ldr	r0, [pc, #592]	; (80039a8 <read_nonvolatile_variables+0x264>)
 8003756:	f006 f828 	bl	80097aa <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 800375a:	4b92      	ldr	r3, [pc, #584]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <read_nonvolatile_variables+0x22>
		return 0;
 8003762:	2300      	movs	r3, #0
 8003764:	e22c      	b.n	8003bc0 <read_nonvolatile_variables+0x47c>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003766:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 800376c:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800376e:	789b      	ldrb	r3, [r3, #2]
 8003770:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003772:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80039ac <read_nonvolatile_variables+0x268>
 8003780:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003784:	4b8a      	ldr	r3, [pc, #552]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 8003786:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 800378a:	4b86      	ldr	r3, [pc, #536]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800378c:	78db      	ldrb	r3, [r3, #3]
 800378e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8003790:	4b84      	ldr	r3, [pc, #528]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003792:	791b      	ldrb	r3, [r3, #4]
 8003794:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8003796:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a0:	eddf 6a82 	vldr	s13, [pc, #520]	; 80039ac <read_nonvolatile_variables+0x268>
 80037a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80037a8:	4b81      	ldr	r3, [pc, #516]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80037aa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037ae:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037b0:	795b      	ldrb	r3, [r3, #5]
 80037b2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80037b4:	4b7b      	ldr	r3, [pc, #492]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037b6:	799b      	ldrb	r3, [r3, #6]
 80037b8:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037ba:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c4:	eddf 6a79 	vldr	s13, [pc, #484]	; 80039ac <read_nonvolatile_variables+0x268>
 80037c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80037cc:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80037ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037d4:	79db      	ldrb	r3, [r3, #7]
 80037d6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 80037d8:	4b72      	ldr	r3, [pc, #456]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037da:	7a1b      	ldrb	r3, [r3, #8]
 80037dc:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80037de:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e8:	eddf 6a70 	vldr	s13, [pc, #448]	; 80039ac <read_nonvolatile_variables+0x268>
 80037ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80037f0:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80037f2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 80037f6:	4b6b      	ldr	r3, [pc, #428]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037f8:	7a5b      	ldrb	r3, [r3, #9]
 80037fa:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 80037fc:	4b69      	ldr	r3, [pc, #420]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80037fe:	7a9b      	ldrb	r3, [r3, #10]
 8003800:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8003802:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80039ac <read_nonvolatile_variables+0x268>
 8003810:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8003814:	4b66      	ldr	r3, [pc, #408]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 8003816:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 800381a:	4b62      	ldr	r3, [pc, #392]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800381c:	7adb      	ldrb	r3, [r3, #11]
 800381e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8003820:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003822:	7b1b      	ldrb	r3, [r3, #12]
 8003824:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8003826:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003830:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80039ac <read_nonvolatile_variables+0x268>
 8003834:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8003838:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 800383a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 800383e:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003840:	7b5b      	ldrb	r3, [r3, #13]
 8003842:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003846:	7b9b      	ldrb	r3, [r3, #14]
 8003848:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 800384a:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800384e:	7bdb      	ldrb	r3, [r3, #15]
 8003850:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8003852:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003856:	7c1b      	ldrb	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 800385a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003864:	eddf 6a51 	vldr	s13, [pc, #324]	; 80039ac <read_nonvolatile_variables+0x268>
 8003868:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 800386e:	edc3 7a04 	vstr	s15, [r3, #16]
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8003872:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003874:	7c5b      	ldrb	r3, [r3, #17]
 8003876:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8003878:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800387a:	7c9b      	ldrb	r3, [r3, #18]
 800387c:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 800387e:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8003880:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003882:	7cdb      	ldrb	r3, [r3, #19]
 8003884:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8003886:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800388a:	7d1b      	ldrb	r3, [r3, #20]
 800388c:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 800388e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003898:	eddf 6a44 	vldr	s13, [pc, #272]	; 80039ac <read_nonvolatile_variables+0x268>
 800389c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80038a2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038a8:	7d5b      	ldrb	r3, [r3, #21]
 80038aa:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80038ac:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038ae:	7d9b      	ldrb	r3, [r3, #22]
 80038b0:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038b2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038bc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80038c4:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80038c6:	edc3 7a08 	vstr	s15, [r3, #32]
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038cc:	7ddb      	ldrb	r3, [r3, #23]
 80038ce:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038d2:	7e1b      	ldrb	r3, [r3, #24]
 80038d4:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80038d6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 80038ea:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038f0:	7f5b      	ldrb	r3, [r3, #29]
 80038f2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <read_nonvolatile_variables+0x260>)
 80038f6:	7f9b      	ldrb	r3, [r3, #30]
 80038f8:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 80038fa:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003904:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003908:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 800390e:	edc3 7a07 	vstr	s15, [r3, #28]
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003914:	7fdb      	ldrb	r3, [r3, #31]
 8003916:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <read_nonvolatile_variables+0x260>)
 800391a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391e:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8003920:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800392a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800392e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <read_nonvolatile_variables+0x26c>)
 8003934:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003938:	2300      	movs	r3, #0
 800393a:	71fb      	strb	r3, [r7, #7]
 800393c:	e02c      	b.n	8003998 <read_nonvolatile_variables+0x254>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3325      	adds	r3, #37	; 0x25
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003946:	5cd3      	ldrb	r3, [r2, r3]
 8003948:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	3326      	adds	r3, #38	; 0x26
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003956:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	3327      	adds	r3, #39	; 0x27
 8003960:	4910      	ldr	r1, [pc, #64]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003966:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	330a      	adds	r3, #10
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	490d      	ldr	r1, [pc, #52]	; (80039a4 <read_nonvolatile_variables+0x260>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003974:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800397e:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003980:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003984:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <read_nonvolatile_variables+0x270>)
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	3301      	adds	r3, #1
 8003996:	71fb      	strb	r3, [r7, #7]
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d9cf      	bls.n	800393e <read_nonvolatile_variables+0x1fa>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 800399e:	2300      	movs	r3, #0
 80039a0:	71bb      	strb	r3, [r7, #6]
 80039a2:	e036      	b.n	8003a12 <read_nonvolatile_variables+0x2ce>
 80039a4:	200020cc 	.word	0x200020cc
 80039a8:	20002170 	.word	0x20002170
 80039ac:	42c80000 	.word	0x42c80000
 80039b0:	20000584 	.word	0x20000584
 80039b4:	2000025c 	.word	0x2000025c
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039b8:	79bb      	ldrb	r3, [r7, #6]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	333d      	adds	r3, #61	; 0x3d
 80039be:	4a82      	ldr	r2, [pc, #520]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 80039c0:	5cd3      	ldrb	r3, [r2, r3]
 80039c2:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80039c4:	79bb      	ldrb	r3, [r7, #6]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	333e      	adds	r3, #62	; 0x3e
 80039ca:	4a7f      	ldr	r2, [pc, #508]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 80039cc:	5cd3      	ldrb	r3, [r2, r3]
 80039ce:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039d0:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80039d4:	79bb      	ldrb	r3, [r7, #6]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	333f      	adds	r3, #63	; 0x3f
 80039da:	497b      	ldr	r1, [pc, #492]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80039e0:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80039e2:	79bb      	ldrb	r3, [r7, #6]
 80039e4:	3310      	adds	r3, #16
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4977      	ldr	r1, [pc, #476]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80039ee:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80039f8:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80039fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80039fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <read_nonvolatile_variables+0x488>)
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003a0c:	79bb      	ldrb	r3, [r7, #6]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	71bb      	strb	r3, [r7, #6]
 8003a12:	79bb      	ldrb	r3, [r7, #6]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d9cf      	bls.n	80039b8 <read_nonvolatile_variables+0x274>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 8003a18:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a1a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003a1e:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <read_nonvolatile_variables+0x48c>)
 8003a20:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 8003a22:	4b69      	ldr	r3, [pc, #420]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a24:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <read_nonvolatile_variables+0x48c>)
 8003a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a2e:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a30:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a34:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8003a36:	4b64      	ldr	r3, [pc, #400]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003a3c:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a3e:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003a40:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a42:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003a46:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8003a48:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a4c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003a50:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8003a52:	4313      	orrs	r3, r2
 8003a54:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003a58:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a5c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003a60:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003a68:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8003a6a:	b21b      	sxth	r3, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	4b58      	ldr	r3, [pc, #352]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003a74:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003a76:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a78:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003a7c:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 8003a7e:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a80:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003a84:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003a90:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a94:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8003a98:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003a9a:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003a9c:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa2:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8003aa4:	4b48      	ldr	r3, [pc, #288]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aaa:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003ab6:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003aba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003abe:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003ac2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003ac6:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003ad2:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003ad6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ada:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003ade:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ae2:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003ae4:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003ae6:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003ae8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003aec:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003aee:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003af0:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003af2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003af6:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003af8:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b02:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003bd8 <read_nonvolatile_variables+0x494>
 8003b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <read_nonvolatile_variables+0x498>)
 8003b0c:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003b10:	2300      	movs	r3, #0
 8003b12:	717b      	strb	r3, [r7, #5]
 8003b14:	e048      	b.n	8003ba8 <read_nonvolatile_variables+0x464>
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b16:	797b      	ldrb	r3, [r7, #5]
 8003b18:	3316      	adds	r3, #22
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] << 8) |
 8003b22:	797b      	ldrb	r3, [r7, #5]
 8003b24:	3316      	adds	r3, #22
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	021b      	lsls	r3, r3, #8
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b30:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] << 16) |
 8003b34:	797b      	ldrb	r3, [r7, #5]
 8003b36:	3316      	adds	r3, #22
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	4922      	ldr	r1, [pc, #136]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] << 8) |
 8003b42:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b44:	797b      	ldrb	r3, [r7, #5]
 8003b46:	3316      	adds	r3, #22
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	3303      	adds	r3, #3
 8003b4c:	491e      	ldr	r1, [pc, #120]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] << 16) |
 8003b52:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b5c:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] << 24)) / 10000.0F;
 8003b5e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003bd8 <read_nonvolatile_variables+0x494>
 8003b62:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_slope[i] = ((nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] << 0) |
 8003b66:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <read_nonvolatile_variables+0x49c>)
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_offset[i] = ((nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] << 0) |
 8003b70:	797b      	ldrb	r3, [r7, #5]
 8003b72:	3338      	adds	r3, #56	; 0x38
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 1] << 8));
 8003b7c:	797b      	ldrb	r3, [r7, #5]
 8003b7e:	3338      	adds	r3, #56	; 0x38
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	021b      	lsls	r3, r3, #8
		pt_cal_offset[i] = ((nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] << 0) |
 8003b8a:	ea41 0203 	orr.w	r2, r1, r3
 8003b8e:	797b      	ldrb	r3, [r7, #5]
 8003b90:	ee07 2a90 	vmov	s15, r2
 8003b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b98:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <read_nonvolatile_variables+0x4a0>)
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003ba2:	797b      	ldrb	r3, [r7, #5]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	717b      	strb	r3, [r7, #5]
 8003ba8:	797b      	ldrb	r3, [r7, #5]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d9b3      	bls.n	8003b16 <read_nonvolatile_variables+0x3d2>
	}

	// Autosequence automatic abort enable
	autosequence.enable_auto_aborts = nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR];
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <read_nonvolatile_variables+0x484>)
 8003bb0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <read_nonvolatile_variables+0x490>)
 8003bb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  __ASM volatile ("cpsie i" : : : "memory");
 8003bba:	b662      	cpsie	i
}
 8003bbc:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM

	// Successful read
	return 1;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200020cc 	.word	0x200020cc
 8003bcc:	20000274 	.word	0x20000274
 8003bd0:	20000584 	.word	0x20000584
 8003bd4:	2000062c 	.word	0x2000062c
 8003bd8:	461c4000 	.word	0x461c4000
 8003bdc:	200002e0 	.word	0x200002e0
 8003be0:	2000027c 	.word	0x2000027c
 8003be4:	20000294 	.word	0x20000294

08003be8 <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003bee:	b672      	cpsid	i
}
 8003bf0:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 8003bf2:	4bcb      	ldr	r3, [pc, #812]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 8003bf8:	4bca      	ldr	r3, [pc, #808]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003bfa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003bfe:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0a:	ee17 3a90 	vmov	r3, s15
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4bc3      	ldr	r3, [pc, #780]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003c14:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 8003c16:	4bc3      	ldr	r3, [pc, #780]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003c18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c1c:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c28:	ee17 3a90 	vmov	r3, s15
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4bba      	ldr	r3, [pc, #744]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003c36:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8003c38:	4bba      	ldr	r3, [pc, #744]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003c3a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c3e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4a:	ee17 3a90 	vmov	r3, s15
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4bb3      	ldr	r3, [pc, #716]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003c54:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 8003c56:	4bb3      	ldr	r3, [pc, #716]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003c58:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c5c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c68:	ee17 3a90 	vmov	r3, s15
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4baa      	ldr	r3, [pc, #680]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003c76:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8003c78:	4baa      	ldr	r3, [pc, #680]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003c7a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c7e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8a:	ee17 3a90 	vmov	r3, s15
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4ba3      	ldr	r3, [pc, #652]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003c94:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 8003c96:	4ba3      	ldr	r3, [pc, #652]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003c98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c9c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca8:	ee17 3a90 	vmov	r3, s15
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b9a      	ldr	r3, [pc, #616]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003cb6:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8003cb8:	4b9a      	ldr	r3, [pc, #616]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003cba:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003cbe:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	ee17 3a90 	vmov	r3, s15
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b93      	ldr	r3, [pc, #588]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003cd4:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 8003cd6:	4b93      	ldr	r3, [pc, #588]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003cd8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003cdc:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 3a90 	vmov	r3, s15
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b8a      	ldr	r3, [pc, #552]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003cf6:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 8003cf8:	4b8a      	ldr	r3, [pc, #552]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003cfa:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003cfe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0a:	ee17 3a90 	vmov	r3, s15
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b83      	ldr	r3, [pc, #524]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003d14:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 8003d16:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003d18:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003d1c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d28:	ee17 3a90 	vmov	r3, s15
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b7a      	ldr	r3, [pc, #488]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003d36:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8003d38:	4b7a      	ldr	r3, [pc, #488]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003d3a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d3e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4a:	ee17 3a90 	vmov	r3, s15
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003d54:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 8003d56:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003d58:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d5c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d68:	ee17 3a90 	vmov	r3, s15
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003d76:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 8003d78:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d7e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d8e:	793a      	ldrb	r2, [r7, #4]
 8003d90:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003d92:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 8003d94:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003d96:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d9a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da6:	ee17 3a90 	vmov	r3, s15
 8003daa:	121b      	asrs	r3, r3, #8
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003db0:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 8003db2:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003db8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc4:	ee17 3a90 	vmov	r3, s15
 8003dc8:	141b      	asrs	r3, r3, #16
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b54      	ldr	r3, [pc, #336]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003dce:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8003dd0:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dd6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de2:	ee17 3a90 	vmov	r3, s15
 8003de6:	161b      	asrs	r3, r3, #24
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4b4d      	ldr	r3, [pc, #308]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003dec:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 8003dee:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003df0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003df4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e00:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e04:	793a      	ldrb	r2, [r7, #4]
 8003e06:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003e08:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 8003e0a:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003e0c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e10:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e1c:	ee17 3a90 	vmov	r3, s15
 8003e20:	121b      	asrs	r3, r3, #8
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003e26:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 8003e28:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003e2a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e2e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e3a:	ee17 3a90 	vmov	r3, s15
 8003e3e:	141b      	asrs	r3, r3, #16
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003e44:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 8003e46:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003e48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f28 <save_nonvolatile_variables+0x340>
 8003e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e58:	ee17 3a90 	vmov	r3, s15
 8003e5c:	161b      	asrs	r3, r3, #24
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003e62:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003e66:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e76:	ee17 3a90 	vmov	r3, s15
 8003e7a:	b21b      	sxth	r3, r3
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003e80:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003e82:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003e84:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e94:	ee17 3a90 	vmov	r3, s15
 8003e98:	b21b      	sxth	r3, r3
 8003e9a:	121b      	asrs	r3, r3, #8
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003ea2:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003ea6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003eaa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb6:	ee17 3a90 	vmov	r3, s15
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003ec0:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003ec4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ec8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed4:	ee17 3a90 	vmov	r3, s15
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	121b      	asrs	r3, r3, #8
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003ee2:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003ee6:	edd3 7a07 	vldr	s15, [r3, #28]
 8003eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef6:	ee17 3a90 	vmov	r3, s15
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <save_nonvolatile_variables+0x338>)
 8003f00:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <save_nonvolatile_variables+0x33c>)
 8003f04:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f14:	ee17 3a90 	vmov	r3, s15
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	121b      	asrs	r3, r3, #8
 8003f1c:	e006      	b.n	8003f2c <save_nonvolatile_variables+0x344>
 8003f1e:	bf00      	nop
 8003f20:	200020cc 	.word	0x200020cc
 8003f24:	20000584 	.word	0x20000584
 8003f28:	42c80000 	.word	0x42c80000
 8003f2c:	b21b      	sxth	r3, r3
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003f32:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <save_nonvolatile_variables+0x450>)
 8003f36:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f46:	ee17 3a90 	vmov	r3, s15
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003f50:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003f52:	4b39      	ldr	r3, [pc, #228]	; (8004038 <save_nonvolatile_variables+0x450>)
 8003f54:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f64:	ee17 3a90 	vmov	r3, s15
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	121b      	asrs	r3, r3, #8
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b30      	ldr	r3, [pc, #192]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003f72:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e055      	b.n	8004028 <save_nonvolatile_variables+0x440>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4a2f      	ldr	r2, [pc, #188]	; (800403c <save_nonvolatile_variables+0x454>)
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f94:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	3325      	adds	r3, #37	; 0x25
 8003f9e:	7939      	ldrb	r1, [r7, #4]
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003fa2:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	4a25      	ldr	r2, [pc, #148]	; (800403c <save_nonvolatile_variables+0x454>)
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fbc:	ee17 3a90 	vmov	r3, s15
 8003fc0:	121a      	asrs	r2, r3, #8
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3326      	adds	r3, #38	; 0x26
 8003fc8:	b2d1      	uxtb	r1, r2
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003fcc:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	; (800403c <save_nonvolatile_variables+0x454>)
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe6:	ee17 3a90 	vmov	r3, s15
 8003fea:	141a      	asrs	r2, r3, #16
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	3327      	adds	r3, #39	; 0x27
 8003ff2:	b2d1      	uxtb	r1, r2
 8003ff4:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8003ff6:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <save_nonvolatile_variables+0x454>)
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800400c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004010:	ee17 3a90 	vmov	r3, s15
 8004014:	161a      	asrs	r2, r3, #24
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	330a      	adds	r3, #10
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	b2d1      	uxtb	r1, r2
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <save_nonvolatile_variables+0x44c>)
 8004020:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3301      	adds	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d9a6      	bls.n	8003f7c <save_nonvolatile_variables+0x394>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 800402e:	2300      	movs	r3, #0
 8004030:	73bb      	strb	r3, [r7, #14]
 8004032:	e05b      	b.n	80040ec <save_nonvolatile_variables+0x504>
 8004034:	200020cc 	.word	0x200020cc
 8004038:	20000584 	.word	0x20000584
 800403c:	2000025c 	.word	0x2000025c
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 8004040:	7bbb      	ldrb	r3, [r7, #14]
 8004042:	4a84      	ldr	r2, [pc, #528]	; (8004254 <save_nonvolatile_variables+0x66c>)
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004058:	edc7 7a01 	vstr	s15, [r7, #4]
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	333d      	adds	r3, #61	; 0x3d
 8004062:	7939      	ldrb	r1, [r7, #4]
 8004064:	4a7c      	ldr	r2, [pc, #496]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004066:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	4a7a      	ldr	r2, [pc, #488]	; (8004254 <save_nonvolatile_variables+0x66c>)
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004080:	ee17 3a90 	vmov	r3, s15
 8004084:	121a      	asrs	r2, r3, #8
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	333e      	adds	r3, #62	; 0x3e
 800408c:	b2d1      	uxtb	r1, r2
 800408e:	4a72      	ldr	r2, [pc, #456]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004090:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 8004092:	7bbb      	ldrb	r3, [r7, #14]
 8004094:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <save_nonvolatile_variables+0x66c>)
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040aa:	ee17 3a90 	vmov	r3, s15
 80040ae:	141a      	asrs	r2, r3, #16
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	333f      	adds	r3, #63	; 0x3f
 80040b6:	b2d1      	uxtb	r1, r2
 80040b8:	4a67      	ldr	r2, [pc, #412]	; (8004258 <save_nonvolatile_variables+0x670>)
 80040ba:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	4a65      	ldr	r2, [pc, #404]	; (8004254 <save_nonvolatile_variables+0x66c>)
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	edd3 7a00 	vldr	s15, [r3]
 80040c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d4:	ee17 3a90 	vmov	r3, s15
 80040d8:	161a      	asrs	r2, r3, #24
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	3310      	adds	r3, #16
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	b2d1      	uxtb	r1, r2
 80040e2:	4a5d      	ldr	r2, [pc, #372]	; (8004258 <save_nonvolatile_variables+0x670>)
 80040e4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80040e6:	7bbb      	ldrb	r3, [r7, #14]
 80040e8:	3301      	adds	r3, #1
 80040ea:	73bb      	strb	r3, [r7, #14]
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d9a6      	bls.n	8004040 <save_nonvolatile_variables+0x458>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 80040f2:	4b5a      	ldr	r3, [pc, #360]	; (800425c <save_nonvolatile_variables+0x674>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b57      	ldr	r3, [pc, #348]	; (8004258 <save_nonvolatile_variables+0x670>)
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 80040fe:	4b57      	ldr	r3, [pc, #348]	; (800425c <save_nonvolatile_variables+0x674>)
 8004100:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 0;
 800410c:	4b54      	ldr	r3, [pc, #336]	; (8004260 <save_nonvolatile_variables+0x678>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 8;
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <save_nonvolatile_variables+0x678>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004122:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 16;
 8004126:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004130:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 24;
 8004134:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	0e1b      	lsrs	r3, r3, #24
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <save_nonvolatile_variables+0x670>)
 800413e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004144:	889b      	ldrh	r3, [r3, #4]
 8004146:	b29b      	uxth	r3, r3
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <save_nonvolatile_variables+0x670>)
 800414c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004152:	889b      	ldrh	r3, [r3, #4]
 8004154:	b29b      	uxth	r3, r3
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b29b      	uxth	r3, r3
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <save_nonvolatile_variables+0x670>)
 800415e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004164:	88db      	ldrh	r3, [r3, #6]
 8004166:	b29b      	uxth	r3, r3
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <save_nonvolatile_variables+0x670>)
 800416c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 8004170:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004172:	88db      	ldrh	r3, [r3, #6]
 8004174:	b29b      	uxth	r3, r3
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <save_nonvolatile_variables+0x670>)
 800417e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_delay_ms;
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004184:	7a1b      	ldrb	r3, [r3, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <save_nonvolatile_variables+0x670>)
 800418a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 800418e:	4b34      	ldr	r3, [pc, #208]	; (8004260 <save_nonvolatile_variables+0x678>)
 8004190:	895b      	ldrh	r3, [r3, #10]
 8004192:	b29b      	uxth	r3, r3
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 800419c:	4b30      	ldr	r3, [pc, #192]	; (8004260 <save_nonvolatile_variables+0x678>)
 800419e:	895b      	ldrh	r3, [r3, #10]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <save_nonvolatile_variables+0x670>)
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 80041ae:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <save_nonvolatile_variables+0x678>)
 80041b0:	899b      	ldrh	r3, [r3, #12]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <save_nonvolatile_variables+0x670>)
 80041b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <save_nonvolatile_variables+0x678>)
 80041be:	899b      	ldrh	r3, [r3, #12]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <save_nonvolatile_variables+0x670>)
 80041ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 80041ce:	4b25      	ldr	r3, [pc, #148]	; (8004264 <save_nonvolatile_variables+0x67c>)
 80041d0:	edd3 7a00 	vldr	s15, [r3]
 80041d4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004268 <save_nonvolatile_variables+0x680>
 80041d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80041e4:	793a      	ldrb	r2, [r7, #4]
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <save_nonvolatile_variables+0x670>)
 80041e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <save_nonvolatile_variables+0x67c>)
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004268 <save_nonvolatile_variables+0x680>
 80041f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fe:	ee17 3a90 	vmov	r3, s15
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004208:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <save_nonvolatile_variables+0x67c>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004268 <save_nonvolatile_variables+0x680>
 8004216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800421a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421e:	ee17 3a90 	vmov	r3, s15
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004228:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <save_nonvolatile_variables+0x67c>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004268 <save_nonvolatile_variables+0x680>
 8004236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423e:	ee17 3a90 	vmov	r3, s15
 8004242:	0e1b      	lsrs	r3, r3, #24
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <save_nonvolatile_variables+0x670>)
 8004248:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800424c:	2300      	movs	r3, #0
 800424e:	737b      	strb	r3, [r7, #13]
 8004250:	e08a      	b.n	8004368 <save_nonvolatile_variables+0x780>
 8004252:	bf00      	nop
 8004254:	20000274 	.word	0x20000274
 8004258:	200020cc 	.word	0x200020cc
 800425c:	20000584 	.word	0x20000584
 8004260:	2000062c 	.word	0x2000062c
 8004264:	200002e0 	.word	0x200002e0
 8004268:	461c4000 	.word	0x461c4000
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 0] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 0;
 800426c:	7b7b      	ldrb	r3, [r7, #13]
 800426e:	4a4d      	ldr	r2, [pc, #308]	; (80043a4 <save_nonvolatile_variables+0x7bc>)
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80043a8 <save_nonvolatile_variables+0x7c0>
 800427c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004284:	edc7 7a01 	vstr	s15, [r7, #4]
 8004288:	7b7b      	ldrb	r3, [r7, #13]
 800428a:	3316      	adds	r3, #22
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	7939      	ldrb	r1, [r7, #4]
 8004290:	4a46      	ldr	r2, [pc, #280]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 8004292:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 1] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 8;
 8004294:	7b7b      	ldrb	r3, [r7, #13]
 8004296:	4a43      	ldr	r2, [pc, #268]	; (80043a4 <save_nonvolatile_variables+0x7bc>)
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80043a8 <save_nonvolatile_variables+0x7c0>
 80042a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ac:	ee17 3a90 	vmov	r3, s15
 80042b0:	121a      	asrs	r2, r3, #8
 80042b2:	7b7b      	ldrb	r3, [r7, #13]
 80042b4:	3316      	adds	r3, #22
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3301      	adds	r3, #1
 80042ba:	b2d1      	uxtb	r1, r2
 80042bc:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 80042be:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 2] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 16;
 80042c0:	7b7b      	ldrb	r3, [r7, #13]
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <save_nonvolatile_variables+0x7bc>)
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80043a8 <save_nonvolatile_variables+0x7c0>
 80042d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d8:	ee17 3a90 	vmov	r3, s15
 80042dc:	141a      	asrs	r2, r3, #16
 80042de:	7b7b      	ldrb	r3, [r7, #13]
 80042e0:	3316      	adds	r3, #22
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	3302      	adds	r3, #2
 80042e6:	b2d1      	uxtb	r1, r2
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 80042ea:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_SLOPE_ADDR + 4*i + 3] = ((int32_t) (pt_cal_slope[i] * 10000.0F)) >> 24;
 80042ec:	7b7b      	ldrb	r3, [r7, #13]
 80042ee:	4a2d      	ldr	r2, [pc, #180]	; (80043a4 <save_nonvolatile_variables+0x7bc>)
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	edd3 7a00 	vldr	s15, [r3]
 80042f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043a8 <save_nonvolatile_variables+0x7c0>
 80042fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004304:	ee17 3a90 	vmov	r3, s15
 8004308:	161a      	asrs	r2, r3, #24
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	3316      	adds	r3, #22
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3303      	adds	r3, #3
 8004312:	b2d1      	uxtb	r1, r2
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 8004316:	54d1      	strb	r1, [r2, r3]

		nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 0] = ((int16_t) (pt_cal_offset[i])) >> 0;
 8004318:	7b7b      	ldrb	r3, [r7, #13]
 800431a:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <save_nonvolatile_variables+0x7c8>)
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	edd3 7a00 	vldr	s15, [r3]
 8004324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004328:	ee17 3a90 	vmov	r3, s15
 800432c:	b21a      	sxth	r2, r3
 800432e:	7b7b      	ldrb	r3, [r7, #13]
 8004330:	3338      	adds	r3, #56	; 0x38
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	b2d1      	uxtb	r1, r2
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 8004338:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_OFFSET_ADDR + 2*i + 1] = ((int16_t) (pt_cal_offset[i])) >> 8;
 800433a:	7b7b      	ldrb	r3, [r7, #13]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <save_nonvolatile_variables+0x7c8>)
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	edd3 7a00 	vldr	s15, [r3]
 8004346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800434a:	ee17 3a90 	vmov	r3, s15
 800434e:	b21b      	sxth	r3, r3
 8004350:	121b      	asrs	r3, r3, #8
 8004352:	b21a      	sxth	r2, r3
 8004354:	7b7b      	ldrb	r3, [r7, #13]
 8004356:	3338      	adds	r3, #56	; 0x38
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	3301      	adds	r3, #1
 800435c:	b2d1      	uxtb	r1, r2
 800435e:	4a13      	ldr	r2, [pc, #76]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 8004360:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8004362:	7b7b      	ldrb	r3, [r7, #13]
 8004364:	3301      	adds	r3, #1
 8004366:	737b      	strb	r3, [r7, #13]
 8004368:	7b7b      	ldrb	r3, [r7, #13]
 800436a:	2b05      	cmp	r3, #5
 800436c:	f67f af7e 	bls.w	800426c <save_nonvolatile_variables+0x684>
	}

	// Autosequence automatic abort enable
	nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR] = autosequence.enable_auto_aborts;
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <save_nonvolatile_variables+0x7cc>)
 8004372:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 800437a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 800437e:	480e      	ldr	r0, [pc, #56]	; (80043b8 <save_nonvolatile_variables+0x7d0>)
 8004380:	f005 fa2c 	bl	80097dc <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8004384:	237d      	movs	r3, #125	; 0x7d
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <save_nonvolatile_variables+0x7c4>)
 8004388:	2100      	movs	r1, #0
 800438a:	480b      	ldr	r0, [pc, #44]	; (80043b8 <save_nonvolatile_variables+0x7d0>)
 800438c:	f005 f9eb 	bl	8009766 <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 8004390:	f7ff f9d8 	bl	8003744 <read_nonvolatile_variables>
  __ASM volatile ("cpsie i" : : : "memory");
 8004394:	b662      	cpsie	i
}
 8004396:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM
	return 1;
 8004398:	2301      	movs	r3, #1
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000027c 	.word	0x2000027c
 80043a8:	461c4000 	.word	0x461c4000
 80043ac:	200020cc 	.word	0x200020cc
 80043b0:	20000294 	.word	0x20000294
 80043b4:	2000062c 	.word	0x2000062c
 80043b8:	20002170 	.word	0x20002170

080043bc <pack_calibration_data>:
/// pack_calibration_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/calibration_file_generator.py on Sun Aug 22 17:24:44 2021

#include "pack_calibration_defines.h"

void pack_calibration_data(uint8_t* dst){
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	*(dst + 0) = CALIBRATION_ITEM_0;
 80043c4:	4bd1      	ldr	r3, [pc, #836]	; (800470c <pack_calibration_data+0x350>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8004710 <pack_calibration_data+0x354>
 80043ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d6:	edc7 7a00 	vstr	s15, [r7]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = CALIBRATION_ITEM_1;
 80043e2:	4bca      	ldr	r3, [pc, #808]	; (800470c <pack_calibration_data+0x350>)
 80043e4:	edd3 7a00 	vldr	s15, [r3]
 80043e8:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8004710 <pack_calibration_data+0x354>
 80043ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f4:	ee17 3a90 	vmov	r3, s15
 80043f8:	121a      	asrs	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = CALIBRATION_ITEM_2;
 8004402:	4bc2      	ldr	r3, [pc, #776]	; (800470c <pack_calibration_data+0x350>)
 8004404:	edd3 7a00 	vldr	s15, [r3]
 8004408:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8004710 <pack_calibration_data+0x354>
 800440c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004414:	ee17 3a90 	vmov	r3, s15
 8004418:	141a      	asrs	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3302      	adds	r3, #2
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = CALIBRATION_ITEM_3;
 8004422:	4bba      	ldr	r3, [pc, #744]	; (800470c <pack_calibration_data+0x350>)
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004710 <pack_calibration_data+0x354>
 800442c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004434:	ee17 3a90 	vmov	r3, s15
 8004438:	161a      	asrs	r2, r3, #24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3303      	adds	r3, #3
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = CALIBRATION_ITEM_4;
 8004442:	4bb2      	ldr	r3, [pc, #712]	; (800470c <pack_calibration_data+0x350>)
 8004444:	edd3 7a01 	vldr	s15, [r3, #4]
 8004448:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004710 <pack_calibration_data+0x354>
 800444c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004454:	edc7 7a00 	vstr	s15, [r7]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = CALIBRATION_ITEM_5;
 8004462:	4baa      	ldr	r3, [pc, #680]	; (800470c <pack_calibration_data+0x350>)
 8004464:	edd3 7a01 	vldr	s15, [r3, #4]
 8004468:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004710 <pack_calibration_data+0x354>
 800446c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004474:	ee17 3a90 	vmov	r3, s15
 8004478:	121a      	asrs	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3305      	adds	r3, #5
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = CALIBRATION_ITEM_6;
 8004482:	4ba2      	ldr	r3, [pc, #648]	; (800470c <pack_calibration_data+0x350>)
 8004484:	edd3 7a01 	vldr	s15, [r3, #4]
 8004488:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8004710 <pack_calibration_data+0x354>
 800448c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004494:	ee17 3a90 	vmov	r3, s15
 8004498:	141a      	asrs	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3306      	adds	r3, #6
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = CALIBRATION_ITEM_7;
 80044a2:	4b9a      	ldr	r3, [pc, #616]	; (800470c <pack_calibration_data+0x350>)
 80044a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80044a8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004710 <pack_calibration_data+0x354>
 80044ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b4:	ee17 3a90 	vmov	r3, s15
 80044b8:	161a      	asrs	r2, r3, #24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3307      	adds	r3, #7
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = CALIBRATION_ITEM_8;
 80044c2:	4b92      	ldr	r3, [pc, #584]	; (800470c <pack_calibration_data+0x350>)
 80044c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80044c8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004710 <pack_calibration_data+0x354>
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d4:	edc7 7a00 	vstr	s15, [r7]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3308      	adds	r3, #8
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = CALIBRATION_ITEM_9;
 80044e2:	4b8a      	ldr	r3, [pc, #552]	; (800470c <pack_calibration_data+0x350>)
 80044e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80044e8:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004710 <pack_calibration_data+0x354>
 80044ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 3a90 	vmov	r3, s15
 80044f8:	121a      	asrs	r2, r3, #8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3309      	adds	r3, #9
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = CALIBRATION_ITEM_10;
 8004502:	4b82      	ldr	r3, [pc, #520]	; (800470c <pack_calibration_data+0x350>)
 8004504:	edd3 7a02 	vldr	s15, [r3, #8]
 8004508:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004710 <pack_calibration_data+0x354>
 800450c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004514:	ee17 3a90 	vmov	r3, s15
 8004518:	141a      	asrs	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	330a      	adds	r3, #10
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = CALIBRATION_ITEM_11;
 8004522:	4b7a      	ldr	r3, [pc, #488]	; (800470c <pack_calibration_data+0x350>)
 8004524:	edd3 7a02 	vldr	s15, [r3, #8]
 8004528:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004710 <pack_calibration_data+0x354>
 800452c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004534:	ee17 3a90 	vmov	r3, s15
 8004538:	161a      	asrs	r2, r3, #24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	330b      	adds	r3, #11
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = CALIBRATION_ITEM_12;
 8004542:	4b72      	ldr	r3, [pc, #456]	; (800470c <pack_calibration_data+0x350>)
 8004544:	edd3 7a03 	vldr	s15, [r3, #12]
 8004548:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004710 <pack_calibration_data+0x354>
 800454c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004554:	edc7 7a00 	vstr	s15, [r7]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	330c      	adds	r3, #12
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = CALIBRATION_ITEM_13;
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <pack_calibration_data+0x350>)
 8004564:	edd3 7a03 	vldr	s15, [r3, #12]
 8004568:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004710 <pack_calibration_data+0x354>
 800456c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004574:	ee17 3a90 	vmov	r3, s15
 8004578:	121a      	asrs	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	330d      	adds	r3, #13
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = CALIBRATION_ITEM_14;
 8004582:	4b62      	ldr	r3, [pc, #392]	; (800470c <pack_calibration_data+0x350>)
 8004584:	edd3 7a03 	vldr	s15, [r3, #12]
 8004588:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004710 <pack_calibration_data+0x354>
 800458c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004594:	ee17 3a90 	vmov	r3, s15
 8004598:	141a      	asrs	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	330e      	adds	r3, #14
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = CALIBRATION_ITEM_15;
 80045a2:	4b5a      	ldr	r3, [pc, #360]	; (800470c <pack_calibration_data+0x350>)
 80045a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80045a8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004710 <pack_calibration_data+0x354>
 80045ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b4:	ee17 3a90 	vmov	r3, s15
 80045b8:	161a      	asrs	r2, r3, #24
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	330f      	adds	r3, #15
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = CALIBRATION_ITEM_16;
 80045c2:	4b52      	ldr	r3, [pc, #328]	; (800470c <pack_calibration_data+0x350>)
 80045c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80045c8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004710 <pack_calibration_data+0x354>
 80045cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d4:	edc7 7a00 	vstr	s15, [r7]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3310      	adds	r3, #16
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = CALIBRATION_ITEM_17;
 80045e2:	4b4a      	ldr	r3, [pc, #296]	; (800470c <pack_calibration_data+0x350>)
 80045e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80045e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004710 <pack_calibration_data+0x354>
 80045ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f4:	ee17 3a90 	vmov	r3, s15
 80045f8:	121a      	asrs	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3311      	adds	r3, #17
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = CALIBRATION_ITEM_18;
 8004602:	4b42      	ldr	r3, [pc, #264]	; (800470c <pack_calibration_data+0x350>)
 8004604:	edd3 7a04 	vldr	s15, [r3, #16]
 8004608:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004710 <pack_calibration_data+0x354>
 800460c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004614:	ee17 3a90 	vmov	r3, s15
 8004618:	141a      	asrs	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3312      	adds	r3, #18
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = CALIBRATION_ITEM_19;
 8004622:	4b3a      	ldr	r3, [pc, #232]	; (800470c <pack_calibration_data+0x350>)
 8004624:	edd3 7a04 	vldr	s15, [r3, #16]
 8004628:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004710 <pack_calibration_data+0x354>
 800462c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004634:	ee17 3a90 	vmov	r3, s15
 8004638:	161a      	asrs	r2, r3, #24
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3313      	adds	r3, #19
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = CALIBRATION_ITEM_20;
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <pack_calibration_data+0x350>)
 8004644:	edd3 7a05 	vldr	s15, [r3, #20]
 8004648:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004710 <pack_calibration_data+0x354>
 800464c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004654:	edc7 7a00 	vstr	s15, [r7]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3314      	adds	r3, #20
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = CALIBRATION_ITEM_21;
 8004662:	4b2a      	ldr	r3, [pc, #168]	; (800470c <pack_calibration_data+0x350>)
 8004664:	edd3 7a05 	vldr	s15, [r3, #20]
 8004668:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004710 <pack_calibration_data+0x354>
 800466c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004674:	ee17 3a90 	vmov	r3, s15
 8004678:	121a      	asrs	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3315      	adds	r3, #21
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = CALIBRATION_ITEM_22;
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <pack_calibration_data+0x350>)
 8004684:	edd3 7a05 	vldr	s15, [r3, #20]
 8004688:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004710 <pack_calibration_data+0x354>
 800468c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004694:	ee17 3a90 	vmov	r3, s15
 8004698:	141a      	asrs	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3316      	adds	r3, #22
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = CALIBRATION_ITEM_23;
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <pack_calibration_data+0x350>)
 80046a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80046a8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004710 <pack_calibration_data+0x354>
 80046ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b4:	ee17 3a90 	vmov	r3, s15
 80046b8:	161a      	asrs	r2, r3, #24
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3317      	adds	r3, #23
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = CALIBRATION_ITEM_24;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <pack_calibration_data+0x358>)
 80046c4:	edd3 7a00 	vldr	s15, [r3]
 80046c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046cc:	ee17 3a90 	vmov	r3, s15
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3318      	adds	r3, #24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = CALIBRATION_ITEM_25;
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <pack_calibration_data+0x358>)
 80046dc:	edd3 7a00 	vldr	s15, [r3]
 80046e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e4:	ee17 3a90 	vmov	r3, s15
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3319      	adds	r3, #25
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = CALIBRATION_ITEM_26;
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <pack_calibration_data+0x358>)
 80046f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80046fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004700:	ee17 3a90 	vmov	r3, s15
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	e006      	b.n	8004718 <pack_calibration_data+0x35c>
 800470a:	bf00      	nop
 800470c:	2000027c 	.word	0x2000027c
 8004710:	461c4000 	.word	0x461c4000
 8004714:	20000294 	.word	0x20000294
 8004718:	331a      	adds	r3, #26
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = CALIBRATION_ITEM_27;
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <pack_calibration_data+0x45c>)
 8004720:	edd3 7a01 	vldr	s15, [r3, #4]
 8004724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004728:	ee17 3a90 	vmov	r3, s15
 800472c:	b29b      	uxth	r3, r3
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	331b      	adds	r3, #27
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = CALIBRATION_ITEM_28;
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <pack_calibration_data+0x45c>)
 800473c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004744:	ee17 3a90 	vmov	r3, s15
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	331c      	adds	r3, #28
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = CALIBRATION_ITEM_29;
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <pack_calibration_data+0x45c>)
 8004754:	edd3 7a02 	vldr	s15, [r3, #8]
 8004758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475c:	ee17 3a90 	vmov	r3, s15
 8004760:	b29b      	uxth	r3, r3
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	331d      	adds	r3, #29
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = CALIBRATION_ITEM_30;
 800476e:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <pack_calibration_data+0x45c>)
 8004770:	edd3 7a03 	vldr	s15, [r3, #12]
 8004774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004778:	ee17 3a90 	vmov	r3, s15
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	331e      	adds	r3, #30
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = CALIBRATION_ITEM_31;
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <pack_calibration_data+0x45c>)
 8004788:	edd3 7a03 	vldr	s15, [r3, #12]
 800478c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004790:	ee17 3a90 	vmov	r3, s15
 8004794:	b29b      	uxth	r3, r3
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	331f      	adds	r3, #31
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = CALIBRATION_ITEM_32;
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <pack_calibration_data+0x45c>)
 80047a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	ee17 3a90 	vmov	r3, s15
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3320      	adds	r3, #32
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = CALIBRATION_ITEM_33;
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <pack_calibration_data+0x45c>)
 80047bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80047c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c4:	ee17 3a90 	vmov	r3, s15
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3321      	adds	r3, #33	; 0x21
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = CALIBRATION_ITEM_34;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <pack_calibration_data+0x45c>)
 80047d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 3a90 	vmov	r3, s15
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3322      	adds	r3, #34	; 0x22
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = CALIBRATION_ITEM_35;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <pack_calibration_data+0x45c>)
 80047f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80047f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f8:	ee17 3a90 	vmov	r3, s15
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3323      	adds	r3, #35	; 0x23
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000294 	.word	0x20000294

0800481c <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Sun Aug 22 15:40:40 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 8004824:	4bc3      	ldr	r3, [pc, #780]	; (8004b34 <pack_telem_data+0x318>)
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 800482c:	4bc2      	ldr	r3, [pc, #776]	; (8004b38 <pack_telem_data+0x31c>)
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004b3c <pack_telem_data+0x320>
 8004836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800483e:	ee17 3a90 	vmov	r3, s15
 8004842:	b21a      	sxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 800484c:	4bba      	ldr	r3, [pc, #744]	; (8004b38 <pack_telem_data+0x31c>)
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8004b3c <pack_telem_data+0x320>
 8004856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800485a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485e:	ee17 3a90 	vmov	r3, s15
 8004862:	b21b      	sxth	r3, r3
 8004864:	121b      	asrs	r3, r3, #8
 8004866:	b21a      	sxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3302      	adds	r3, #2
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 8004870:	4bb3      	ldr	r3, [pc, #716]	; (8004b40 <pack_telem_data+0x324>)
 8004872:	edd3 7a00 	vldr	s15, [r3]
 8004876:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004b3c <pack_telem_data+0x320>
 800487a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004882:	ee17 3a90 	vmov	r3, s15
 8004886:	b21a      	sxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3303      	adds	r3, #3
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 8004890:	4bab      	ldr	r3, [pc, #684]	; (8004b40 <pack_telem_data+0x324>)
 8004892:	edd3 7a00 	vldr	s15, [r3]
 8004896:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004b3c <pack_telem_data+0x320>
 800489a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048a2:	ee17 3a90 	vmov	r3, s15
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	121b      	asrs	r3, r3, #8
 80048aa:	b21a      	sxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 80048b4:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <pack_telem_data+0x328>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3305      	adds	r3, #5
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 80048c0:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <pack_telem_data+0x328>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0a1a      	lsrs	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3306      	adds	r3, #6
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 80048ce:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <pack_telem_data+0x328>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0c1a      	lsrs	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3307      	adds	r3, #7
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 80048dc:	4b99      	ldr	r3, [pc, #612]	; (8004b44 <pack_telem_data+0x328>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e1a      	lsrs	r2, r3, #24
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3308      	adds	r3, #8
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 80048ea:	4b97      	ldr	r3, [pc, #604]	; (8004b48 <pack_telem_data+0x32c>)
 80048ec:	edd3 7a00 	vldr	s15, [r3]
 80048f0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004b3c <pack_telem_data+0x320>
 80048f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048fc:	ee17 3a90 	vmov	r3, s15
 8004900:	b21a      	sxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3309      	adds	r3, #9
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 800490a:	4b8f      	ldr	r3, [pc, #572]	; (8004b48 <pack_telem_data+0x32c>)
 800490c:	edd3 7a00 	vldr	s15, [r3]
 8004910:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004b3c <pack_telem_data+0x320>
 8004914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491c:	ee17 3a90 	vmov	r3, s15
 8004920:	b21b      	sxth	r3, r3
 8004922:	121b      	asrs	r3, r3, #8
 8004924:	b21a      	sxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	330a      	adds	r3, #10
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 800492e:	4b87      	ldr	r3, [pc, #540]	; (8004b4c <pack_telem_data+0x330>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004b3c <pack_telem_data+0x320>
 8004938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004940:	ee17 3a90 	vmov	r3, s15
 8004944:	b21a      	sxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	330b      	adds	r3, #11
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 800494e:	4b7f      	ldr	r3, [pc, #508]	; (8004b4c <pack_telem_data+0x330>)
 8004950:	edd3 7a00 	vldr	s15, [r3]
 8004954:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004b3c <pack_telem_data+0x320>
 8004958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004960:	ee17 3a90 	vmov	r3, s15
 8004964:	b21b      	sxth	r3, r3
 8004966:	121b      	asrs	r3, r3, #8
 8004968:	b21a      	sxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	330c      	adds	r3, #12
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 8004972:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <pack_telem_data+0x334>)
 8004974:	edd3 7a00 	vldr	s15, [r3]
 8004978:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004b3c <pack_telem_data+0x320>
 800497c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	330d      	adds	r3, #13
 8004984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004988:	edc7 7a00 	vstr	s15, [r7]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 8004992:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <pack_telem_data+0x338>)
 8004994:	edd3 7a00 	vldr	s15, [r3]
 8004998:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004b3c <pack_telem_data+0x320>
 800499c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	330e      	adds	r3, #14
 80049a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a8:	edc7 7a00 	vstr	s15, [r7]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	330f      	adds	r3, #15
 80049b6:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <pack_telem_data+0x33c>)
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 80049bc:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <pack_telem_data+0x340>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3310      	adds	r3, #16
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <pack_telem_data+0x340>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0a1a      	lsrs	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3311      	adds	r3, #17
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 80049d6:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <pack_telem_data+0x340>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0c1a      	lsrs	r2, r3, #16
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3312      	adds	r3, #18
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 80049e4:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <pack_telem_data+0x340>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e1a      	lsrs	r2, r3, #24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3313      	adds	r3, #19
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <pack_telem_data+0x344>)
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a04:	edc7 7a00 	vstr	s15, [r7]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 8004a12:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <pack_telem_data+0x344>)
 8004a14:	edd3 7a00 	vldr	s15, [r3]
 8004a18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a24:	ee17 3a90 	vmov	r3, s15
 8004a28:	121a      	asrs	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3315      	adds	r3, #21
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 8004a32:	4b4b      	ldr	r3, [pc, #300]	; (8004b60 <pack_telem_data+0x344>)
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a44:	ee17 3a90 	vmov	r3, s15
 8004a48:	141a      	asrs	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3316      	adds	r3, #22
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 8004a52:	4b43      	ldr	r3, [pc, #268]	; (8004b60 <pack_telem_data+0x344>)
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a64:	ee17 3a90 	vmov	r3, s15
 8004a68:	161a      	asrs	r2, r3, #24
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3317      	adds	r3, #23
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <pack_telem_data+0x344>)
 8004a74:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a84:	edc7 7a00 	vstr	s15, [r7]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3318      	adds	r3, #24
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 8004a92:	4b33      	ldr	r3, [pc, #204]	; (8004b60 <pack_telem_data+0x344>)
 8004a94:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa4:	ee17 3a90 	vmov	r3, s15
 8004aa8:	121a      	asrs	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3319      	adds	r3, #25
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <pack_telem_data+0x344>)
 8004ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ab8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ac4:	ee17 3a90 	vmov	r3, s15
 8004ac8:	141a      	asrs	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	331a      	adds	r3, #26
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8004ad2:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <pack_telem_data+0x344>)
 8004ad4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ad8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ae4:	ee17 3a90 	vmov	r3, s15
 8004ae8:	161a      	asrs	r2, r3, #24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	331b      	adds	r3, #27
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <pack_telem_data+0x344>)
 8004af4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b04:	edc7 7a00 	vstr	s15, [r7]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	331c      	adds	r3, #28
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 8004b12:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <pack_telem_data+0x344>)
 8004b14:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b24:	ee17 3a90 	vmov	r3, s15
 8004b28:	121a      	asrs	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	331d      	adds	r3, #29
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e017      	b.n	8004b64 <pack_telem_data+0x348>
 8004b34:	200002ac 	.word	0x200002ac
 8004b38:	200002b0 	.word	0x200002b0
 8004b3c:	42c80000 	.word	0x42c80000
 8004b40:	200002b4 	.word	0x200002b4
 8004b44:	200002b8 	.word	0x200002b8
 8004b48:	200002bc 	.word	0x200002bc
 8004b4c:	200002c0 	.word	0x200002c0
 8004b50:	200002c4 	.word	0x200002c4
 8004b54:	200002c8 	.word	0x200002c8
 8004b58:	200002cc 	.word	0x200002cc
 8004b5c:	200002d0 	.word	0x200002d0
 8004b60:	200002f4 	.word	0x200002f4
	*(dst + 30) = TELEM_ITEM_30;
 8004b64:	4bcf      	ldr	r3, [pc, #828]	; (8004ea4 <pack_telem_data+0x688>)
 8004b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b76:	ee17 3a90 	vmov	r3, s15
 8004b7a:	141a      	asrs	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	331e      	adds	r3, #30
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 8004b84:	4bc7      	ldr	r3, [pc, #796]	; (8004ea4 <pack_telem_data+0x688>)
 8004b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b96:	ee17 3a90 	vmov	r3, s15
 8004b9a:	161a      	asrs	r2, r3, #24
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	331f      	adds	r3, #31
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 8004ba4:	4bbf      	ldr	r3, [pc, #764]	; (8004ea4 <pack_telem_data+0x688>)
 8004ba6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004baa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb6:	edc7 7a00 	vstr	s15, [r7]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 8004bc4:	4bb7      	ldr	r3, [pc, #732]	; (8004ea4 <pack_telem_data+0x688>)
 8004bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bd6:	ee17 3a90 	vmov	r3, s15
 8004bda:	121a      	asrs	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3321      	adds	r3, #33	; 0x21
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 8004be4:	4baf      	ldr	r3, [pc, #700]	; (8004ea4 <pack_telem_data+0x688>)
 8004be6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bf6:	ee17 3a90 	vmov	r3, s15
 8004bfa:	141a      	asrs	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3322      	adds	r3, #34	; 0x22
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 8004c04:	4ba7      	ldr	r3, [pc, #668]	; (8004ea4 <pack_telem_data+0x688>)
 8004c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c16:	ee17 3a90 	vmov	r3, s15
 8004c1a:	161a      	asrs	r2, r3, #24
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3323      	adds	r3, #35	; 0x23
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 8004c24:	4b9f      	ldr	r3, [pc, #636]	; (8004ea4 <pack_telem_data+0x688>)
 8004c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c36:	edc7 7a00 	vstr	s15, [r7]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3324      	adds	r3, #36	; 0x24
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 8004c44:	4b97      	ldr	r3, [pc, #604]	; (8004ea4 <pack_telem_data+0x688>)
 8004c46:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c56:	ee17 3a90 	vmov	r3, s15
 8004c5a:	121a      	asrs	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3325      	adds	r3, #37	; 0x25
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8004c64:	4b8f      	ldr	r3, [pc, #572]	; (8004ea4 <pack_telem_data+0x688>)
 8004c66:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c76:	ee17 3a90 	vmov	r3, s15
 8004c7a:	141a      	asrs	r2, r3, #16
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3326      	adds	r3, #38	; 0x26
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8004c84:	4b87      	ldr	r3, [pc, #540]	; (8004ea4 <pack_telem_data+0x688>)
 8004c86:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c96:	ee17 3a90 	vmov	r3, s15
 8004c9a:	161a      	asrs	r2, r3, #24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3327      	adds	r3, #39	; 0x27
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8004ca4:	4b7f      	ldr	r3, [pc, #508]	; (8004ea4 <pack_telem_data+0x688>)
 8004ca6:	edd3 7a05 	vldr	s15, [r3, #20]
 8004caa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cb6:	edc7 7a00 	vstr	s15, [r7]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3328      	adds	r3, #40	; 0x28
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8004cc4:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <pack_telem_data+0x688>)
 8004cc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd6:	ee17 3a90 	vmov	r3, s15
 8004cda:	121a      	asrs	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3329      	adds	r3, #41	; 0x29
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8004ce4:	4b6f      	ldr	r3, [pc, #444]	; (8004ea4 <pack_telem_data+0x688>)
 8004ce6:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cf6:	ee17 3a90 	vmov	r3, s15
 8004cfa:	141a      	asrs	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	332a      	adds	r3, #42	; 0x2a
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8004d04:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <pack_telem_data+0x688>)
 8004d06:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d16:	ee17 3a90 	vmov	r3, s15
 8004d1a:	161a      	asrs	r2, r3, #24
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	332b      	adds	r3, #43	; 0x2b
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <pack_telem_data+0x68c>)
 8004d26:	edd3 7a00 	vldr	s15, [r3]
 8004d2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	332c      	adds	r3, #44	; 0x2c
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	edc7 7a00 	vstr	s15, [r7]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8004d44:	4b58      	ldr	r3, [pc, #352]	; (8004ea8 <pack_telem_data+0x68c>)
 8004d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	332d      	adds	r3, #45	; 0x2d
 8004d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5a:	edc7 7a00 	vstr	s15, [r7]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <pack_telem_data+0x68c>)
 8004d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	332e      	adds	r3, #46	; 0x2e
 8004d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7a:	edc7 7a00 	vstr	s15, [r7]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8004d84:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <pack_telem_data+0x68c>)
 8004d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	332f      	adds	r3, #47	; 0x2f
 8004d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9a:	edc7 7a00 	vstr	s15, [r7]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8004da4:	4b40      	ldr	r3, [pc, #256]	; (8004ea8 <pack_telem_data+0x68c>)
 8004da6:	edd3 7a04 	vldr	s15, [r3, #16]
 8004daa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3330      	adds	r3, #48	; 0x30
 8004db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dba:	edc7 7a00 	vstr	s15, [r7]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8004dc4:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <pack_telem_data+0x68c>)
 8004dc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8004dca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3331      	adds	r3, #49	; 0x31
 8004dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dda:	edc7 7a00 	vstr	s15, [r7]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8004de4:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <pack_telem_data+0x68c>)
 8004de6:	edd3 7a06 	vldr	s15, [r3, #24]
 8004dea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3332      	adds	r3, #50	; 0x32
 8004df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfa:	edc7 7a00 	vstr	s15, [r7]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8004e04:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <pack_telem_data+0x68c>)
 8004e06:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3333      	adds	r3, #51	; 0x33
 8004e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1a:	edc7 7a00 	vstr	s15, [r7]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8004e24:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <pack_telem_data+0x68c>)
 8004e26:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3334      	adds	r3, #52	; 0x34
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	edc7 7a00 	vstr	s15, [r7]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <pack_telem_data+0x690>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3335      	adds	r3, #53	; 0x35
 8004e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5a:	edc7 7a00 	vstr	s15, [r7]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8004e64:	4b11      	ldr	r3, [pc, #68]	; (8004eac <pack_telem_data+0x690>)
 8004e66:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3336      	adds	r3, #54	; 0x36
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	edc7 7a00 	vstr	s15, [r7]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <pack_telem_data+0x690>)
 8004e86:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3337      	adds	r3, #55	; 0x37
 8004e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9a:	edc7 7a00 	vstr	s15, [r7]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	e005      	b.n	8004eb0 <pack_telem_data+0x694>
 8004ea4:	200002f4 	.word	0x200002f4
 8004ea8:	2000030c 	.word	0x2000030c
 8004eac:	20000330 	.word	0x20000330
 8004eb0:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8004eb2:	4bc7      	ldr	r3, [pc, #796]	; (80051d0 <pack_telem_data+0x9b4>)
 8004eb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004eb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3338      	adds	r3, #56	; 0x38
 8004ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec8:	edc7 7a00 	vstr	s15, [r7]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8004ed2:	4bbf      	ldr	r3, [pc, #764]	; (80051d0 <pack_telem_data+0x9b4>)
 8004ed4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ed8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3339      	adds	r3, #57	; 0x39
 8004ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee8:	edc7 7a00 	vstr	s15, [r7]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8004ef2:	4bb7      	ldr	r3, [pc, #732]	; (80051d0 <pack_telem_data+0x9b4>)
 8004ef4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ef8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	333a      	adds	r3, #58	; 0x3a
 8004f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f08:	edc7 7a00 	vstr	s15, [r7]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8004f12:	4baf      	ldr	r3, [pc, #700]	; (80051d0 <pack_telem_data+0x9b4>)
 8004f14:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	333b      	adds	r3, #59	; 0x3b
 8004f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f28:	edc7 7a00 	vstr	s15, [r7]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8004f32:	4ba7      	ldr	r3, [pc, #668]	; (80051d0 <pack_telem_data+0x9b4>)
 8004f34:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	333c      	adds	r3, #60	; 0x3c
 8004f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f48:	edc7 7a00 	vstr	s15, [r7]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8004f52:	4b9f      	ldr	r3, [pc, #636]	; (80051d0 <pack_telem_data+0x9b4>)
 8004f54:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	333d      	adds	r3, #61	; 0x3d
 8004f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f68:	edc7 7a00 	vstr	s15, [r7]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8004f72:	4b98      	ldr	r3, [pc, #608]	; (80051d4 <pack_telem_data+0x9b8>)
 8004f74:	edd3 7a00 	vldr	s15, [r3]
 8004f78:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80051d8 <pack_telem_data+0x9bc>
 8004f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f84:	ee17 3a90 	vmov	r3, s15
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	333e      	adds	r3, #62	; 0x3e
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8004f92:	4b90      	ldr	r3, [pc, #576]	; (80051d4 <pack_telem_data+0x9b8>)
 8004f94:	edd3 7a00 	vldr	s15, [r3]
 8004f98:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80051d8 <pack_telem_data+0x9bc>
 8004f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa4:	ee17 3a90 	vmov	r3, s15
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	333f      	adds	r3, #63	; 0x3f
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8004fb6:	4b87      	ldr	r3, [pc, #540]	; (80051d4 <pack_telem_data+0x9b8>)
 8004fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fbc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80051d8 <pack_telem_data+0x9bc>
 8004fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc8:	ee17 3a90 	vmov	r3, s15
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3340      	adds	r3, #64	; 0x40
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <pack_telem_data+0x9b8>)
 8004fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fdc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80051d8 <pack_telem_data+0x9bc>
 8004fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe8:	ee17 3a90 	vmov	r3, s15
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3341      	adds	r3, #65	; 0x41
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <pack_telem_data+0x9b8>)
 8004ffc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005000:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80051d8 <pack_telem_data+0x9bc>
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500c:	ee17 3a90 	vmov	r3, s15
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3342      	adds	r3, #66	; 0x42
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 800501a:	4b6e      	ldr	r3, [pc, #440]	; (80051d4 <pack_telem_data+0x9b8>)
 800501c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005020:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80051d8 <pack_telem_data+0x9bc>
 8005024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502c:	ee17 3a90 	vmov	r3, s15
 8005030:	b29b      	uxth	r3, r3
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3343      	adds	r3, #67	; 0x43
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 800503e:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <pack_telem_data+0x9b8>)
 8005040:	edd3 7a03 	vldr	s15, [r3, #12]
 8005044:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80051d8 <pack_telem_data+0x9bc>
 8005048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005050:	ee17 3a90 	vmov	r3, s15
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3344      	adds	r3, #68	; 0x44
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 800505e:	4b5d      	ldr	r3, [pc, #372]	; (80051d4 <pack_telem_data+0x9b8>)
 8005060:	edd3 7a03 	vldr	s15, [r3, #12]
 8005064:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80051d8 <pack_telem_data+0x9bc>
 8005068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005070:	ee17 3a90 	vmov	r3, s15
 8005074:	b29b      	uxth	r3, r3
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3345      	adds	r3, #69	; 0x45
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 8005082:	4b54      	ldr	r3, [pc, #336]	; (80051d4 <pack_telem_data+0x9b8>)
 8005084:	edd3 7a04 	vldr	s15, [r3, #16]
 8005088:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80051d8 <pack_telem_data+0x9bc>
 800508c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005094:	ee17 3a90 	vmov	r3, s15
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3346      	adds	r3, #70	; 0x46
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <pack_telem_data+0x9b8>)
 80050a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80050a8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80051d8 <pack_telem_data+0x9bc>
 80050ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b4:	ee17 3a90 	vmov	r3, s15
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3347      	adds	r3, #71	; 0x47
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 80050c6:	4b45      	ldr	r3, [pc, #276]	; (80051dc <pack_telem_data+0x9c0>)
 80050c8:	edd3 7a00 	vldr	s15, [r3]
 80050cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d8:	ee17 3a90 	vmov	r3, s15
 80050dc:	b21a      	sxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3348      	adds	r3, #72	; 0x48
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 80050e6:	4b3d      	ldr	r3, [pc, #244]	; (80051dc <pack_telem_data+0x9c0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f8:	ee17 3a90 	vmov	r3, s15
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	121b      	asrs	r3, r3, #8
 8005100:	b21a      	sxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3349      	adds	r3, #73	; 0x49
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 800510a:	4b34      	ldr	r3, [pc, #208]	; (80051dc <pack_telem_data+0x9c0>)
 800510c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005110:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800511c:	ee17 3a90 	vmov	r3, s15
 8005120:	b21a      	sxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	334a      	adds	r3, #74	; 0x4a
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 800512a:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <pack_telem_data+0x9c0>)
 800512c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005130:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800513c:	ee17 3a90 	vmov	r3, s15
 8005140:	b21b      	sxth	r3, r3
 8005142:	121b      	asrs	r3, r3, #8
 8005144:	b21a      	sxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	334b      	adds	r3, #75	; 0x4b
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <pack_telem_data+0x9c4>)
 8005150:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	334c      	adds	r3, #76	; 0x4c
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 800515c:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <pack_telem_data+0x9c4>)
 800515e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005162:	121b      	asrs	r3, r3, #8
 8005164:	b21a      	sxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	334d      	adds	r3, #77	; 0x4d
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <pack_telem_data+0x9c4>)
 8005170:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	334e      	adds	r3, #78	; 0x4e
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <pack_telem_data+0x9c4>)
 800517e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005182:	121b      	asrs	r3, r3, #8
 8005184:	b21a      	sxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	334f      	adds	r3, #79	; 0x4f
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 800518e:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <pack_telem_data+0x9c8>)
 8005190:	edd3 7a00 	vldr	s15, [r3]
 8005194:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80051d8 <pack_telem_data+0x9bc>
 8005198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a0:	ee17 3a90 	vmov	r3, s15
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3350      	adds	r3, #80	; 0x50
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <pack_telem_data+0x9c8>)
 80051b0:	edd3 7a00 	vldr	s15, [r3]
 80051b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80051d8 <pack_telem_data+0x9bc>
 80051b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c0:	ee17 3a90 	vmov	r3, s15
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3351      	adds	r3, #81	; 0x51
 80051ce:	e00b      	b.n	80051e8 <pack_telem_data+0x9cc>
 80051d0:	20000330 	.word	0x20000330
 80051d4:	20000354 	.word	0x20000354
 80051d8:	42c80000 	.word	0x42c80000
 80051dc:	20000368 	.word	0x20000368
 80051e0:	20000370 	.word	0x20000370
 80051e4:	20000374 	.word	0x20000374
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 80051ec:	4bcc      	ldr	r3, [pc, #816]	; (8005520 <pack_telem_data+0xd04>)
 80051ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80051f2:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005524 <pack_telem_data+0xd08>
 80051f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fe:	ee17 3a90 	vmov	r3, s15
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3352      	adds	r3, #82	; 0x52
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 800520c:	4bc4      	ldr	r3, [pc, #784]	; (8005520 <pack_telem_data+0xd04>)
 800520e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005212:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8005524 <pack_telem_data+0xd08>
 8005216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800521a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521e:	ee17 3a90 	vmov	r3, s15
 8005222:	b29b      	uxth	r3, r3
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3353      	adds	r3, #83	; 0x53
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 8005230:	4bbb      	ldr	r3, [pc, #748]	; (8005520 <pack_telem_data+0xd04>)
 8005232:	edd3 7a02 	vldr	s15, [r3, #8]
 8005236:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8005524 <pack_telem_data+0xd08>
 800523a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 3a90 	vmov	r3, s15
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3354      	adds	r3, #84	; 0x54
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 8005250:	4bb3      	ldr	r3, [pc, #716]	; (8005520 <pack_telem_data+0xd04>)
 8005252:	edd3 7a02 	vldr	s15, [r3, #8]
 8005256:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8005524 <pack_telem_data+0xd08>
 800525a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800525e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005262:	ee17 3a90 	vmov	r3, s15
 8005266:	b29b      	uxth	r3, r3
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3355      	adds	r3, #85	; 0x55
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 8005274:	4baa      	ldr	r3, [pc, #680]	; (8005520 <pack_telem_data+0xd04>)
 8005276:	edd3 7a03 	vldr	s15, [r3, #12]
 800527a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8005524 <pack_telem_data+0xd08>
 800527e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 3a90 	vmov	r3, s15
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3356      	adds	r3, #86	; 0x56
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 8005294:	4ba2      	ldr	r3, [pc, #648]	; (8005520 <pack_telem_data+0xd04>)
 8005296:	edd3 7a03 	vldr	s15, [r3, #12]
 800529a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8005524 <pack_telem_data+0xd08>
 800529e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	ee17 3a90 	vmov	r3, s15
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3357      	adds	r3, #87	; 0x57
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 80052b8:	4b9b      	ldr	r3, [pc, #620]	; (8005528 <pack_telem_data+0xd0c>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8005524 <pack_telem_data+0xd08>
 80052c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ca:	ee17 3a90 	vmov	r3, s15
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3358      	adds	r3, #88	; 0x58
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 80052d8:	4b93      	ldr	r3, [pc, #588]	; (8005528 <pack_telem_data+0xd0c>)
 80052da:	edd3 7a00 	vldr	s15, [r3]
 80052de:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005524 <pack_telem_data+0xd08>
 80052e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ea:	ee17 3a90 	vmov	r3, s15
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3359      	adds	r3, #89	; 0x59
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 80052fc:	4b8a      	ldr	r3, [pc, #552]	; (8005528 <pack_telem_data+0xd0c>)
 80052fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005302:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8005524 <pack_telem_data+0xd08>
 8005306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530e:	ee17 3a90 	vmov	r3, s15
 8005312:	b29a      	uxth	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	335a      	adds	r3, #90	; 0x5a
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 800531c:	4b82      	ldr	r3, [pc, #520]	; (8005528 <pack_telem_data+0xd0c>)
 800531e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005322:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8005524 <pack_telem_data+0xd08>
 8005326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800532a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532e:	ee17 3a90 	vmov	r3, s15
 8005332:	b29b      	uxth	r3, r3
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	335b      	adds	r3, #91	; 0x5b
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 8005340:	4b7a      	ldr	r3, [pc, #488]	; (800552c <pack_telem_data+0xd10>)
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8005524 <pack_telem_data+0xd08>
 800534a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800534e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005352:	edc7 7a00 	vstr	s15, [r7]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	335c      	adds	r3, #92	; 0x5c
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 8005360:	4b72      	ldr	r3, [pc, #456]	; (800552c <pack_telem_data+0xd10>)
 8005362:	edd3 7a00 	vldr	s15, [r3]
 8005366:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005524 <pack_telem_data+0xd08>
 800536a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005372:	ee17 3a90 	vmov	r3, s15
 8005376:	121a      	asrs	r2, r3, #8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	335d      	adds	r3, #93	; 0x5d
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <pack_telem_data+0xd10>)
 8005382:	edd3 7a00 	vldr	s15, [r3]
 8005386:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005524 <pack_telem_data+0xd08>
 800538a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005392:	ee17 3a90 	vmov	r3, s15
 8005396:	141a      	asrs	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	335e      	adds	r3, #94	; 0x5e
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 80053a0:	4b62      	ldr	r3, [pc, #392]	; (800552c <pack_telem_data+0xd10>)
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005524 <pack_telem_data+0xd08>
 80053aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053b2:	ee17 3a90 	vmov	r3, s15
 80053b6:	161a      	asrs	r2, r3, #24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	335f      	adds	r3, #95	; 0x5f
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 80053c0:	4b5a      	ldr	r3, [pc, #360]	; (800552c <pack_telem_data+0xd10>)
 80053c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053c6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005524 <pack_telem_data+0xd08>
 80053ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053d2:	edc7 7a00 	vstr	s15, [r7]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3360      	adds	r3, #96	; 0x60
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 80053e0:	4b52      	ldr	r3, [pc, #328]	; (800552c <pack_telem_data+0xd10>)
 80053e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005524 <pack_telem_data+0xd08>
 80053ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	ee17 3a90 	vmov	r3, s15
 80053f6:	121a      	asrs	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3361      	adds	r3, #97	; 0x61
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 8005400:	4b4a      	ldr	r3, [pc, #296]	; (800552c <pack_telem_data+0xd10>)
 8005402:	edd3 7a01 	vldr	s15, [r3, #4]
 8005406:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005524 <pack_telem_data+0xd08>
 800540a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800540e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005412:	ee17 3a90 	vmov	r3, s15
 8005416:	141a      	asrs	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3362      	adds	r3, #98	; 0x62
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 8005420:	4b42      	ldr	r3, [pc, #264]	; (800552c <pack_telem_data+0xd10>)
 8005422:	edd3 7a01 	vldr	s15, [r3, #4]
 8005426:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005524 <pack_telem_data+0xd08>
 800542a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005432:	ee17 3a90 	vmov	r3, s15
 8005436:	161a      	asrs	r2, r3, #24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3363      	adds	r3, #99	; 0x63
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 8005440:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <pack_telem_data+0xd14>)
 8005442:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005446:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005524 <pack_telem_data+0xd08>
 800544a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005452:	ee17 3a90 	vmov	r3, s15
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3364      	adds	r3, #100	; 0x64
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <pack_telem_data+0xd14>)
 8005462:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005466:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005524 <pack_telem_data+0xd08>
 800546a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005472:	ee17 3a90 	vmov	r3, s15
 8005476:	b29b      	uxth	r3, r3
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3365      	adds	r3, #101	; 0x65
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <pack_telem_data+0xd14>)
 8005486:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800548a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005524 <pack_telem_data+0xd08>
 800548e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005496:	ee17 3a90 	vmov	r3, s15
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3366      	adds	r3, #102	; 0x66
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 80054a4:	4b22      	ldr	r3, [pc, #136]	; (8005530 <pack_telem_data+0xd14>)
 80054a6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80054aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005524 <pack_telem_data+0xd08>
 80054ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b6:	ee17 3a90 	vmov	r3, s15
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3367      	adds	r3, #103	; 0x67
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <pack_telem_data+0xd14>)
 80054ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005524 <pack_telem_data+0xd08>
 80054d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 3a90 	vmov	r3, s15
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3368      	adds	r3, #104	; 0x68
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 80054e8:	4b11      	ldr	r3, [pc, #68]	; (8005530 <pack_telem_data+0xd14>)
 80054ea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005524 <pack_telem_data+0xd08>
 80054f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054fa:	ee17 3a90 	vmov	r3, s15
 80054fe:	b29b      	uxth	r3, r3
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3369      	adds	r3, #105	; 0x69
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 800550c:	4b08      	ldr	r3, [pc, #32]	; (8005530 <pack_telem_data+0xd14>)
 800550e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005512:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005524 <pack_telem_data+0xd08>
 8005516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800551a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551e:	e009      	b.n	8005534 <pack_telem_data+0xd18>
 8005520:	20000374 	.word	0x20000374
 8005524:	42c80000 	.word	0x42c80000
 8005528:	20000384 	.word	0x20000384
 800552c:	2000038c 	.word	0x2000038c
 8005530:	20000584 	.word	0x20000584
 8005534:	ee17 3a90 	vmov	r3, s15
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	336a      	adds	r3, #106	; 0x6a
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 8005542:	4bcb      	ldr	r3, [pc, #812]	; (8005870 <pack_telem_data+0x1054>)
 8005544:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005548:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8005874 <pack_telem_data+0x1058>
 800554c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005554:	ee17 3a90 	vmov	r3, s15
 8005558:	b29b      	uxth	r3, r3
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	336b      	adds	r3, #107	; 0x6b
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 8005566:	4bc2      	ldr	r3, [pc, #776]	; (8005870 <pack_telem_data+0x1054>)
 8005568:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800556c:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8005874 <pack_telem_data+0x1058>
 8005570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005578:	ee17 3a90 	vmov	r3, s15
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	336c      	adds	r3, #108	; 0x6c
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 8005586:	4bba      	ldr	r3, [pc, #744]	; (8005870 <pack_telem_data+0x1054>)
 8005588:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800558c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8005874 <pack_telem_data+0x1058>
 8005590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 3a90 	vmov	r3, s15
 800559c:	b29b      	uxth	r3, r3
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	336d      	adds	r3, #109	; 0x6d
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = TELEM_ITEM_110;
 80055aa:	4bb1      	ldr	r3, [pc, #708]	; (8005870 <pack_telem_data+0x1054>)
 80055ac:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80055b0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8005874 <pack_telem_data+0x1058>
 80055b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055bc:	ee17 3a90 	vmov	r3, s15
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	336e      	adds	r3, #110	; 0x6e
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 80055ca:	4ba9      	ldr	r3, [pc, #676]	; (8005870 <pack_telem_data+0x1054>)
 80055cc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80055d0:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8005874 <pack_telem_data+0x1058>
 80055d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 3a90 	vmov	r3, s15
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	336f      	adds	r3, #111	; 0x6f
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 80055ee:	4ba0      	ldr	r3, [pc, #640]	; (8005870 <pack_telem_data+0x1054>)
 80055f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005600:	ee17 3a90 	vmov	r3, s15
 8005604:	b21a      	sxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3370      	adds	r3, #112	; 0x70
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 800560e:	4b98      	ldr	r3, [pc, #608]	; (8005870 <pack_telem_data+0x1054>)
 8005610:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005614:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800561c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005620:	ee17 3a90 	vmov	r3, s15
 8005624:	b21b      	sxth	r3, r3
 8005626:	121b      	asrs	r3, r3, #8
 8005628:	b21a      	sxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3371      	adds	r3, #113	; 0x71
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 8005632:	4b8f      	ldr	r3, [pc, #572]	; (8005870 <pack_telem_data+0x1054>)
 8005634:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800563c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005644:	ee17 3a90 	vmov	r3, s15
 8005648:	b21a      	sxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3372      	adds	r3, #114	; 0x72
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 8005652:	4b87      	ldr	r3, [pc, #540]	; (8005870 <pack_telem_data+0x1054>)
 8005654:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005658:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800565c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005664:	ee17 3a90 	vmov	r3, s15
 8005668:	b21b      	sxth	r3, r3
 800566a:	121b      	asrs	r3, r3, #8
 800566c:	b21a      	sxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3373      	adds	r3, #115	; 0x73
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 8005676:	4b7e      	ldr	r3, [pc, #504]	; (8005870 <pack_telem_data+0x1054>)
 8005678:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800567c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005688:	ee17 3a90 	vmov	r3, s15
 800568c:	b21a      	sxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3374      	adds	r3, #116	; 0x74
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 8005696:	4b76      	ldr	r3, [pc, #472]	; (8005870 <pack_telem_data+0x1054>)
 8005698:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800569c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a8:	ee17 3a90 	vmov	r3, s15
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	121b      	asrs	r3, r3, #8
 80056b0:	b21a      	sxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3375      	adds	r3, #117	; 0x75
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 80056ba:	4b6d      	ldr	r3, [pc, #436]	; (8005870 <pack_telem_data+0x1054>)
 80056bc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80056c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056cc:	ee17 3a90 	vmov	r3, s15
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3376      	adds	r3, #118	; 0x76
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 80056da:	4b65      	ldr	r3, [pc, #404]	; (8005870 <pack_telem_data+0x1054>)
 80056dc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80056e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ec:	ee17 3a90 	vmov	r3, s15
 80056f0:	b21b      	sxth	r3, r3
 80056f2:	121b      	asrs	r3, r3, #8
 80056f4:	b21a      	sxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3377      	adds	r3, #119	; 0x77
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 80056fe:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <pack_telem_data+0x1054>)
 8005700:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005704:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800570c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005710:	ee17 3a90 	vmov	r3, s15
 8005714:	b21a      	sxth	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3378      	adds	r3, #120	; 0x78
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 800571e:	4b54      	ldr	r3, [pc, #336]	; (8005870 <pack_telem_data+0x1054>)
 8005720:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005724:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005730:	ee17 3a90 	vmov	r3, s15
 8005734:	b21b      	sxth	r3, r3
 8005736:	121b      	asrs	r3, r3, #8
 8005738:	b21a      	sxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3379      	adds	r3, #121	; 0x79
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 8005742:	4b4b      	ldr	r3, [pc, #300]	; (8005870 <pack_telem_data+0x1054>)
 8005744:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005748:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800574c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005754:	ee17 3a90 	vmov	r3, s15
 8005758:	b21a      	sxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	337a      	adds	r3, #122	; 0x7a
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 8005762:	4b43      	ldr	r3, [pc, #268]	; (8005870 <pack_telem_data+0x1054>)
 8005764:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005768:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800576c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005774:	ee17 3a90 	vmov	r3, s15
 8005778:	b21b      	sxth	r3, r3
 800577a:	121b      	asrs	r3, r3, #8
 800577c:	b21a      	sxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	337b      	adds	r3, #123	; 0x7b
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 8005786:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <pack_telem_data+0x1054>)
 8005788:	edd3 7a04 	vldr	s15, [r3, #16]
 800578c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005874 <pack_telem_data+0x1058>
 8005790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005798:	edc7 7a00 	vstr	s15, [r7]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	337c      	adds	r3, #124	; 0x7c
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 80057a6:	4b32      	ldr	r3, [pc, #200]	; (8005870 <pack_telem_data+0x1054>)
 80057a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80057ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005874 <pack_telem_data+0x1058>
 80057b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b8:	ee17 3a90 	vmov	r3, s15
 80057bc:	121a      	asrs	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	337d      	adds	r3, #125	; 0x7d
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 80057c6:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <pack_telem_data+0x1054>)
 80057c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80057cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005874 <pack_telem_data+0x1058>
 80057d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057d8:	ee17 3a90 	vmov	r3, s15
 80057dc:	141a      	asrs	r2, r3, #16
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	337e      	adds	r3, #126	; 0x7e
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 80057e6:	4b22      	ldr	r3, [pc, #136]	; (8005870 <pack_telem_data+0x1054>)
 80057e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80057ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005874 <pack_telem_data+0x1058>
 80057f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f8:	ee17 3a90 	vmov	r3, s15
 80057fc:	161a      	asrs	r2, r3, #24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	337f      	adds	r3, #127	; 0x7f
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 8005806:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <pack_telem_data+0x1054>)
 8005808:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800580c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005874 <pack_telem_data+0x1058>
 8005810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005818:	edc7 7a00 	vstr	s15, [r7]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3380      	adds	r3, #128	; 0x80
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <pack_telem_data+0x1054>)
 8005828:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800582c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005874 <pack_telem_data+0x1058>
 8005830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005838:	ee17 3a90 	vmov	r3, s15
 800583c:	121a      	asrs	r2, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3381      	adds	r3, #129	; 0x81
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <pack_telem_data+0x1054>)
 8005848:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800584c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005874 <pack_telem_data+0x1058>
 8005850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005858:	ee17 3a90 	vmov	r3, s15
 800585c:	141a      	asrs	r2, r3, #16
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3382      	adds	r3, #130	; 0x82
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 8005866:	4b02      	ldr	r3, [pc, #8]	; (8005870 <pack_telem_data+0x1054>)
 8005868:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800586c:	e004      	b.n	8005878 <pack_telem_data+0x105c>
 800586e:	bf00      	nop
 8005870:	20000584 	.word	0x20000584
 8005874:	42c80000 	.word	0x42c80000
 8005878:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8005874 <pack_telem_data+0x1058>
 800587c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005884:	ee17 3a90 	vmov	r3, s15
 8005888:	161a      	asrs	r2, r3, #24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3383      	adds	r3, #131	; 0x83
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 8005892:	4bd0      	ldr	r3, [pc, #832]	; (8005bd4 <pack_telem_data+0x13b8>)
 8005894:	edd3 7a08 	vldr	s15, [r3, #32]
 8005898:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800589c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a4:	ee17 3a90 	vmov	r3, s15
 80058a8:	b21a      	sxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3384      	adds	r3, #132	; 0x84
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 80058b2:	4bc8      	ldr	r3, [pc, #800]	; (8005bd4 <pack_telem_data+0x13b8>)
 80058b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80058b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c4:	ee17 3a90 	vmov	r3, s15
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	121b      	asrs	r3, r3, #8
 80058cc:	b21a      	sxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3385      	adds	r3, #133	; 0x85
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 80058d6:	4bbf      	ldr	r3, [pc, #764]	; (8005bd4 <pack_telem_data+0x13b8>)
 80058d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80058dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058e8:	ee17 3a90 	vmov	r3, s15
 80058ec:	b21a      	sxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3386      	adds	r3, #134	; 0x86
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 80058f6:	4bb7      	ldr	r3, [pc, #732]	; (8005bd4 <pack_telem_data+0x13b8>)
 80058f8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80058fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005908:	ee17 3a90 	vmov	r3, s15
 800590c:	b21b      	sxth	r3, r3
 800590e:	121b      	asrs	r3, r3, #8
 8005910:	b21a      	sxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3387      	adds	r3, #135	; 0x87
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 800591a:	4bae      	ldr	r3, [pc, #696]	; (8005bd4 <pack_telem_data+0x13b8>)
 800591c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005920:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800592c:	ee17 3a90 	vmov	r3, s15
 8005930:	b21a      	sxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3388      	adds	r3, #136	; 0x88
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 800593a:	4ba6      	ldr	r3, [pc, #664]	; (8005bd4 <pack_telem_data+0x13b8>)
 800593c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005940:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800594c:	ee17 3a90 	vmov	r3, s15
 8005950:	b21b      	sxth	r3, r3
 8005952:	121b      	asrs	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3389      	adds	r3, #137	; 0x89
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 800595e:	4b9d      	ldr	r3, [pc, #628]	; (8005bd4 <pack_telem_data+0x13b8>)
 8005960:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005964:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005970:	ee17 3a90 	vmov	r3, s15
 8005974:	b21a      	sxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	338a      	adds	r3, #138	; 0x8a
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 800597e:	4b95      	ldr	r3, [pc, #596]	; (8005bd4 <pack_telem_data+0x13b8>)
 8005980:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005984:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800598c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005990:	ee17 3a90 	vmov	r3, s15
 8005994:	b21b      	sxth	r3, r3
 8005996:	121b      	asrs	r3, r3, #8
 8005998:	b21a      	sxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	338b      	adds	r3, #139	; 0x8b
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 80059a2:	4b8d      	ldr	r3, [pc, #564]	; (8005bd8 <pack_telem_data+0x13bc>)
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b4:	edc7 7a00 	vstr	s15, [r7]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	338c      	adds	r3, #140	; 0x8c
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 80059c2:	4b85      	ldr	r3, [pc, #532]	; (8005bd8 <pack_telem_data+0x13bc>)
 80059c4:	edd3 7a00 	vldr	s15, [r3]
 80059c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d4:	ee17 3a90 	vmov	r3, s15
 80059d8:	121a      	asrs	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	338d      	adds	r3, #141	; 0x8d
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 80059e2:	4b7d      	ldr	r3, [pc, #500]	; (8005bd8 <pack_telem_data+0x13bc>)
 80059e4:	edd3 7a00 	vldr	s15, [r3]
 80059e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059f4:	ee17 3a90 	vmov	r3, s15
 80059f8:	141a      	asrs	r2, r3, #16
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	338e      	adds	r3, #142	; 0x8e
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 8005a02:	4b75      	ldr	r3, [pc, #468]	; (8005bd8 <pack_telem_data+0x13bc>)
 8005a04:	edd3 7a00 	vldr	s15, [r3]
 8005a08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a14:	ee17 3a90 	vmov	r3, s15
 8005a18:	161a      	asrs	r2, r3, #24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	338f      	adds	r3, #143	; 0x8f
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <pack_telem_data+0x13bc>)
 8005a24:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a34:	edc7 7a00 	vstr	s15, [r7]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3390      	adds	r3, #144	; 0x90
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <pack_telem_data+0x13bc>)
 8005a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a54:	ee17 3a90 	vmov	r3, s15
 8005a58:	121a      	asrs	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3391      	adds	r3, #145	; 0x91
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 8005a62:	4b5d      	ldr	r3, [pc, #372]	; (8005bd8 <pack_telem_data+0x13bc>)
 8005a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a74:	ee17 3a90 	vmov	r3, s15
 8005a78:	141a      	asrs	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3392      	adds	r3, #146	; 0x92
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 8005a82:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <pack_telem_data+0x13bc>)
 8005a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a94:	ee17 3a90 	vmov	r3, s15
 8005a98:	161a      	asrs	r2, r3, #24
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3393      	adds	r3, #147	; 0x93
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 8005aa2:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <pack_telem_data+0x13c0>)
 8005aa4:	edd3 7a00 	vldr	s15, [r3]
 8005aa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab4:	edc7 7a00 	vstr	s15, [r7]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3394      	adds	r3, #148	; 0x94
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 8005ac2:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <pack_telem_data+0x13c0>)
 8005ac4:	edd3 7a00 	vldr	s15, [r3]
 8005ac8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ad4:	ee17 3a90 	vmov	r3, s15
 8005ad8:	121a      	asrs	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3395      	adds	r3, #149	; 0x95
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	; (8005bdc <pack_telem_data+0x13c0>)
 8005ae4:	edd3 7a00 	vldr	s15, [r3]
 8005ae8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005af4:	ee17 3a90 	vmov	r3, s15
 8005af8:	141a      	asrs	r2, r3, #16
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3396      	adds	r3, #150	; 0x96
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <pack_telem_data+0x13c0>)
 8005b04:	edd3 7a00 	vldr	s15, [r3]
 8005b08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b14:	ee17 3a90 	vmov	r3, s15
 8005b18:	161a      	asrs	r2, r3, #24
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3397      	adds	r3, #151	; 0x97
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 8005b22:	4b2f      	ldr	r3, [pc, #188]	; (8005be0 <pack_telem_data+0x13c4>)
 8005b24:	edd3 7a00 	vldr	s15, [r3]
 8005b28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b34:	edc7 7a00 	vstr	s15, [r7]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3398      	adds	r3, #152	; 0x98
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 8005b42:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <pack_telem_data+0x13c4>)
 8005b44:	edd3 7a00 	vldr	s15, [r3]
 8005b48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b54:	ee17 3a90 	vmov	r3, s15
 8005b58:	121a      	asrs	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3399      	adds	r3, #153	; 0x99
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 8005b62:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <pack_telem_data+0x13c4>)
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b74:	ee17 3a90 	vmov	r3, s15
 8005b78:	141a      	asrs	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	339a      	adds	r3, #154	; 0x9a
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <pack_telem_data+0x13c4>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b94:	ee17 3a90 	vmov	r3, s15
 8005b98:	161a      	asrs	r2, r3, #24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	339b      	adds	r3, #155	; 0x9b
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <pack_telem_data+0x13c8>)
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bb4:	edc7 7a00 	vstr	s15, [r7]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	339c      	adds	r3, #156	; 0x9c
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <pack_telem_data+0x13c8>)
 8005bc4:	edd3 7a00 	vldr	s15, [r3]
 8005bc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bd0:	e00a      	b.n	8005be8 <pack_telem_data+0x13cc>
 8005bd2:	bf00      	nop
 8005bd4:	20000584 	.word	0x20000584
 8005bd8:	20000394 	.word	0x20000394
 8005bdc:	200002d4 	.word	0x200002d4
 8005be0:	200002d8 	.word	0x200002d8
 8005be4:	200002dc 	.word	0x200002dc
 8005be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bec:	ee17 3a90 	vmov	r3, s15
 8005bf0:	121a      	asrs	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	339d      	adds	r3, #157	; 0x9d
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8005bfa:	4bad      	ldr	r3, [pc, #692]	; (8005eb0 <pack_telem_data+0x1694>)
 8005bfc:	edd3 7a00 	vldr	s15, [r3]
 8005c00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c0c:	ee17 3a90 	vmov	r3, s15
 8005c10:	141a      	asrs	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	339e      	adds	r3, #158	; 0x9e
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8005c1a:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <pack_telem_data+0x1694>)
 8005c1c:	edd3 7a00 	vldr	s15, [r3]
 8005c20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c2c:	ee17 3a90 	vmov	r3, s15
 8005c30:	161a      	asrs	r2, r3, #24
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	339f      	adds	r3, #159	; 0x9f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	33a0      	adds	r3, #160	; 0xa0
 8005c3e:	4a9d      	ldr	r2, [pc, #628]	; (8005eb4 <pack_telem_data+0x1698>)
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	33a1      	adds	r3, #161	; 0xa1
 8005c4a:	4a9a      	ldr	r2, [pc, #616]	; (8005eb4 <pack_telem_data+0x1698>)
 8005c4c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8005c54:	4b98      	ldr	r3, [pc, #608]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	33a2      	adds	r3, #162	; 0xa2
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8005c60:	4b95      	ldr	r3, [pc, #596]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	0a1a      	lsrs	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	33a3      	adds	r3, #163	; 0xa3
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8005c6e:	4b92      	ldr	r3, [pc, #584]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	0c1a      	lsrs	r2, r3, #16
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	33a4      	adds	r3, #164	; 0xa4
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8005c7c:	4b8e      	ldr	r3, [pc, #568]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	0e1a      	lsrs	r2, r3, #24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	33a5      	adds	r3, #165	; 0xa5
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8005c8a:	4b8b      	ldr	r3, [pc, #556]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c8c:	889b      	ldrh	r3, [r3, #4]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	33a6      	adds	r3, #166	; 0xa6
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8005c98:	4b87      	ldr	r3, [pc, #540]	; (8005eb8 <pack_telem_data+0x169c>)
 8005c9a:	889b      	ldrh	r3, [r3, #4]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	33a7      	adds	r3, #167	; 0xa7
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8005caa:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <pack_telem_data+0x169c>)
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	33a8      	adds	r3, #168	; 0xa8
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8005cb8:	4b7f      	ldr	r3, [pc, #508]	; (8005eb8 <pack_telem_data+0x169c>)
 8005cba:	88db      	ldrh	r3, [r3, #6]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	33a9      	adds	r3, #169	; 0xa9
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	33aa      	adds	r3, #170	; 0xaa
 8005cce:	4a7a      	ldr	r2, [pc, #488]	; (8005eb8 <pack_telem_data+0x169c>)
 8005cd0:	7a12      	ldrb	r2, [r2, #8]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8005cd6:	4b78      	ldr	r3, [pc, #480]	; (8005eb8 <pack_telem_data+0x169c>)
 8005cd8:	895b      	ldrh	r3, [r3, #10]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	33ab      	adds	r3, #171	; 0xab
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8005ce4:	4b74      	ldr	r3, [pc, #464]	; (8005eb8 <pack_telem_data+0x169c>)
 8005ce6:	895b      	ldrh	r3, [r3, #10]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	33ac      	adds	r3, #172	; 0xac
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8005cf6:	4b70      	ldr	r3, [pc, #448]	; (8005eb8 <pack_telem_data+0x169c>)
 8005cf8:	899b      	ldrh	r3, [r3, #12]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	33ad      	adds	r3, #173	; 0xad
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8005d04:	4b6c      	ldr	r3, [pc, #432]	; (8005eb8 <pack_telem_data+0x169c>)
 8005d06:	899b      	ldrh	r3, [r3, #12]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	33ae      	adds	r3, #174	; 0xae
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8005d16:	4b69      	ldr	r3, [pc, #420]	; (8005ebc <pack_telem_data+0x16a0>)
 8005d18:	edd3 7a00 	vldr	s15, [r3]
 8005d1c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005ec0 <pack_telem_data+0x16a4>
 8005d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d28:	edc7 7a00 	vstr	s15, [r7]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	33af      	adds	r3, #175	; 0xaf
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8005d36:	4b61      	ldr	r3, [pc, #388]	; (8005ebc <pack_telem_data+0x16a0>)
 8005d38:	edd3 7a00 	vldr	s15, [r3]
 8005d3c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005ec0 <pack_telem_data+0x16a4>
 8005d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d48:	ee17 3a90 	vmov	r3, s15
 8005d4c:	121a      	asrs	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	33b0      	adds	r3, #176	; 0xb0
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8005d56:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <pack_telem_data+0x16a0>)
 8005d58:	edd3 7a00 	vldr	s15, [r3]
 8005d5c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005ec0 <pack_telem_data+0x16a4>
 8005d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d68:	ee17 3a90 	vmov	r3, s15
 8005d6c:	141a      	asrs	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	33b1      	adds	r3, #177	; 0xb1
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8005d76:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <pack_telem_data+0x16a0>)
 8005d78:	edd3 7a00 	vldr	s15, [r3]
 8005d7c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005ec0 <pack_telem_data+0x16a4>
 8005d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d88:	ee17 3a90 	vmov	r3, s15
 8005d8c:	161a      	asrs	r2, r3, #24
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	33b2      	adds	r3, #178	; 0xb2
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8005d96:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <pack_telem_data+0x16a8>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	33b3      	adds	r3, #179	; 0xb3
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8005da2:	4b48      	ldr	r3, [pc, #288]	; (8005ec4 <pack_telem_data+0x16a8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	121a      	asrs	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	33b4      	adds	r3, #180	; 0xb4
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8005db0:	4b44      	ldr	r3, [pc, #272]	; (8005ec4 <pack_telem_data+0x16a8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	141a      	asrs	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	33b5      	adds	r3, #181	; 0xb5
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <pack_telem_data+0x16a8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	161a      	asrs	r2, r3, #24
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	33b6      	adds	r3, #182	; 0xb6
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	33b7      	adds	r3, #183	; 0xb7
 8005dd0:	4a3d      	ldr	r2, [pc, #244]	; (8005ec8 <pack_telem_data+0x16ac>)
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	33b8      	adds	r3, #184	; 0xb8
 8005dda:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <pack_telem_data+0x16b0>)
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8005de0:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <pack_telem_data+0x16b4>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	33b9      	adds	r3, #185	; 0xb9
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8005dec:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <pack_telem_data+0x16b4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	0a1a      	lsrs	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	33ba      	adds	r3, #186	; 0xba
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8005dfa:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <pack_telem_data+0x16b4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	0c1a      	lsrs	r2, r3, #16
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	33bb      	adds	r3, #187	; 0xbb
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <pack_telem_data+0x16b4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	0e1a      	lsrs	r2, r3, #24
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	33bc      	adds	r3, #188	; 0xbc
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	33bd      	adds	r3, #189	; 0xbd
 8005e1a:	4a2e      	ldr	r2, [pc, #184]	; (8005ed4 <pack_telem_data+0x16b8>)
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	33be      	adds	r3, #190	; 0xbe
 8005e24:	4a24      	ldr	r2, [pc, #144]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e26:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8005e2e:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e30:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	33bf      	adds	r3, #191	; 0xbf
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8005e3a:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e3c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	33c0      	adds	r3, #192	; 0xc0
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e4c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	33c1      	adds	r3, #193	; 0xc1
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8005e58:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	33c2      	adds	r3, #194	; 0xc2
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e6c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	33c3      	adds	r3, #195	; 0xc3
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	33c4      	adds	r3, #196	; 0xc4
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	33c5      	adds	r3, #197	; 0xc5
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e90:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005e94:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	33c6      	adds	r3, #198	; 0xc6
 8005e9a:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <pack_telem_data+0x169c>)
 8005e9c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005ea0:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	33c7      	adds	r3, #199	; 0xc7
 8005ea6:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <pack_telem_data+0x169c>)
 8005ea8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e013      	b.n	8005ed8 <pack_telem_data+0x16bc>
 8005eb0:	200002dc 	.word	0x200002dc
 8005eb4:	20000584 	.word	0x20000584
 8005eb8:	2000062c 	.word	0x2000062c
 8005ebc:	200002e0 	.word	0x200002e0
 8005ec0:	461c4000 	.word	0x461c4000
 8005ec4:	200002e4 	.word	0x200002e4
 8005ec8:	200002e8 	.word	0x200002e8
 8005ecc:	200002e9 	.word	0x200002e9
 8005ed0:	200002ec 	.word	0x200002ec
 8005ed4:	200002f0 	.word	0x200002f0
	*(dst + 200) = TELEM_ITEM_200;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	33c8      	adds	r3, #200	; 0xc8
 8005edc:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <pack_telem_data+0x16d4>)
 8005ede:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	2000062c 	.word	0x2000062c

08005ef4 <update_serial_data_vars>:
		buffer_info->telem_buffer[i] = 0;
	}
	*/
}

void update_serial_data_vars() {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
    flash_mem = get_bytes_remaining(&flash);
 8005ef8:	4805      	ldr	r0, [pc, #20]	; (8005f10 <update_serial_data_vars+0x1c>)
 8005efa:	f003 fc1a 	bl	8009732 <get_bytes_remaining>
 8005efe:	4603      	mov	r3, r0
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <update_serial_data_vars+0x20>)
 8005f02:	6013      	str	r3, [r2, #0]

    // Update last command received
    last_command_id = CLB_last_cmd_received;
 8005f04:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <update_serial_data_vars+0x24>)
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <update_serial_data_vars+0x28>)
 8005f0a:	701a      	strb	r2, [r3, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20002170 	.word	0x20002170
 8005f14:	200002ec 	.word	0x200002ec
 8005f18:	20000d90 	.word	0x20000d90
 8005f1c:	200002cc 	.word	0x200002cc

08005f20 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
	header->origin_addr = OWN_BOARD_ADDR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	70da      	strb	r2, [r3, #3]
	header->num_packets = 1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	711a      	strb	r2, [r3, #4]
	header->do_cobbs = 1; // enable COBS
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	715a      	strb	r2, [r3, #5]
	header->checksum = 0;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	80da      	strh	r2, [r3, #6]
	header->timestamp = SYS_MICROS;
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <init_packet_header+0x4c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20000904 	.word	0x20000904

08005f70 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 8005f7a:	79fa      	ldrb	r2, [r7, #7]
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff ffcc 	bl	8005f20 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f92:	2000      	movs	r0, #0
 8005f94:	f002 f9a0 	bl	80082d8 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <send_telem_packet+0x40>)
 8005f9a:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f002 f9c4 	bl	8008330 <send_data>
}
 8005fa8:	bf00      	nop
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	2000202c 	.word	0x2000202c

08005fb4 <save_flash_packet>:

void save_flash_packet() {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b0c8      	sub	sp, #288	; 0x120
 8005fb8:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 8005fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fbe:	2107      	movs	r1, #7
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ffad 	bl	8005f20 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 8005fc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f002 f981 	bl	80082d8 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	22f9      	movs	r2, #249	; 0xf9
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f008 f9d1 	bl	800e38c <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	2200      	movs	r2, #0
 8005fee:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	22fd      	movs	r2, #253	; 0xfd
 8005ff4:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	f107 0210 	add.w	r2, r7, #16
 8005ffc:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f002 f994 	bl	8008330 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800600e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 8006012:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8006016:	f107 0310 	add.w	r3, r7, #16
 800601a:	4619      	mov	r1, r3
 800601c:	4803      	ldr	r0, [pc, #12]	; (800602c <save_flash_packet+0x78>)
 800601e:	f003 fa18 	bl	8009452 <write_to_flash>
}
 8006022:	bf00      	nop
 8006024:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20002170 	.word	0x20002170

08006030 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 8006030:	b580      	push	{r7, lr}
 8006032:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8006036:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 8006038:	481e      	ldr	r0, [pc, #120]	; (80060b4 <transmit_flash_data+0x84>)
 800603a:	f003 fad5 	bl	80095e8 <finish_flash_write>

	uint32_t page = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <transmit_flash_data+0x84>)
 8006046:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800604a:	3301      	adds	r3, #1
 800604c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <transmit_flash_data+0x84>)
 8006052:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <transmit_flash_data+0x34>
		end_page--;
 800605a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800605e:	3b01      	subs	r3, #1
 8006060:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 8006064:	4813      	ldr	r0, [pc, #76]	; (80060b4 <transmit_flash_data+0x84>)
 8006066:	f003 fb05 	bl	8009674 <reset_flash_read_pointer>
	while (page < end_page) {
 800606a:	e014      	b.n	8006096 <transmit_flash_data+0x66>
	    read_next_2KB_from_flash(&flash, read_buffer);
 800606c:	463b      	mov	r3, r7
 800606e:	4619      	mov	r1, r3
 8006070:	4810      	ldr	r0, [pc, #64]	; (80060b4 <transmit_flash_data+0x84>)
 8006072:	f003 fb0d 	bl	8009690 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 8006076:	4639      	mov	r1, r7
 8006078:	f04f 33ff 	mov.w	r3, #4294967295
 800607c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006080:	480d      	ldr	r0, [pc, #52]	; (80060b8 <transmit_flash_data+0x88>)
 8006082:	f007 f846 	bl	800d112 <HAL_UART_Transmit>
	    ++page;
 8006086:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800608a:	3301      	adds	r3, #1
 800608c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
		HAL_IWDG_Refresh(&hiwdg);
 8006090:	480a      	ldr	r0, [pc, #40]	; (80060bc <transmit_flash_data+0x8c>)
 8006092:	f004 fbbc 	bl	800a80e <HAL_IWDG_Refresh>
	while (page < end_page) {
 8006096:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800609a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3e4      	bcc.n	800606c <transmit_flash_data+0x3c>
	}
	reset_flash_read_pointer(&flash);
 80060a2:	4804      	ldr	r0, [pc, #16]	; (80060b4 <transmit_flash_data+0x84>)
 80060a4:	f003 fae6 	bl	8009674 <reset_flash_read_pointer>
}
 80060a8:	bf00      	nop
 80060aa:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20002170 	.word	0x20002170
 80060b8:	2000202c 	.word	0x2000202c
 80060bc:	200008f4 	.word	0x200008f4

080060c0 <send_calibration_data>:
        RxRollover++;       // increment Rollover Counter
    }
}
*/

void send_calibration_data() {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
	CLB_Packet_Header cal_header;

	cal_header.packet_type = 2; // calibration packet
 80060c6:	2302      	movs	r3, #2
 80060c8:	733b      	strb	r3, [r7, #12]
	cal_header.origin_addr = OWN_BOARD_ADDR;
 80060ca:	2303      	movs	r3, #3
 80060cc:	737b      	strb	r3, [r7, #13]
	cal_header.target_addr = SERVER_ADDR;
 80060ce:	2307      	movs	r3, #7
 80060d0:	73bb      	strb	r3, [r7, #14]
	cal_header.priority = 1; // medium
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
	cal_header.num_packets = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	743b      	strb	r3, [r7, #16]
	cal_header.do_cobbs = 1; // enable COBS
 80060da:	2301      	movs	r3, #1
 80060dc:	747b      	strb	r3, [r7, #17]
	cal_header.checksum = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	827b      	strh	r3, [r7, #18]
	cal_header.timestamp = SYS_MICROS;
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <send_calibration_data+0x54>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	617b      	str	r3, [r7, #20]

	pack_calibration_data(calibration_telem_buffer);
 80060ea:	480b      	ldr	r0, [pc, #44]	; (8006118 <send_calibration_data+0x58>)
 80060ec:	f7fe f966 	bl	80043bc <pack_calibration_data>
    init_data(calibration_telem_buffer, CLB_NUM_CALIBRATION_ITEMS, &cal_header);  // Comms library (tx, so no buffer)
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	461a      	mov	r2, r3
 80060f6:	2124      	movs	r1, #36	; 0x24
 80060f8:	4807      	ldr	r0, [pc, #28]	; (8006118 <send_calibration_data+0x58>)
 80060fa:	f002 f8ed 	bl	80082d8 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <send_calibration_data+0x5c>)
 8006100:	603b      	str	r3, [r7, #0]
    send_data(&info, CLB_Telem);
 8006102:	463b      	mov	r3, r7
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f002 f912 	bl	8008330 <send_data>
}
 800610c:	bf00      	nop
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000904 	.word	0x20000904
 8006118:	2000214c 	.word	0x2000214c
 800611c:	2000202c 	.word	0x2000202c

08006120 <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 8006128:	2201      	movs	r2, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	461a      	mov	r2, r3
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <set_status_flag+0x28>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	4a03      	ldr	r2, [pc, #12]	; (8006148 <set_status_flag+0x28>)
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	200002d0 	.word	0x200002d0

0800614c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_MspInit+0x4c>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	4a0f      	ldr	r2, [pc, #60]	; (8006198 <HAL_MspInit+0x4c>)
 800615c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <HAL_MspInit+0x4c>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_MspInit+0x4c>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	4a08      	ldr	r2, [pc, #32]	; (8006198 <HAL_MspInit+0x4c>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	; 0x40
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_MspInit+0x4c>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800618a:	2004      	movs	r0, #4
 800618c:	f003 fcd6 	bl	8009b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40023800 	.word	0x40023800

0800619c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	609a      	str	r2, [r3, #8]
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a4c      	ldr	r2, [pc, #304]	; (80062ec <HAL_SPI_MspInit+0x150>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d12c      	bne.n	8006218 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4a4a      	ldr	r2, [pc, #296]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061cc:	6453      	str	r3, [r2, #68]	; 0x44
 80061ce:	4b48      	ldr	r3, [pc, #288]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	4b44      	ldr	r3, [pc, #272]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a43      	ldr	r2, [pc, #268]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80061f6:	23e0      	movs	r3, #224	; 0xe0
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006202:	2303      	movs	r3, #3
 8006204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006206:	2305      	movs	r3, #5
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800620e:	4619      	mov	r1, r3
 8006210:	4838      	ldr	r0, [pc, #224]	; (80062f4 <HAL_SPI_MspInit+0x158>)
 8006212:	f004 f8db 	bl	800a3cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8006216:	e064      	b.n	80062e2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a36      	ldr	r2, [pc, #216]	; (80062f8 <HAL_SPI_MspInit+0x15c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d12d      	bne.n	800627e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 800622c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006230:	6413      	str	r3, [r2, #64]	; 0x40
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	4b2b      	ldr	r3, [pc, #172]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6313      	str	r3, [r2, #48]	; 0x30
 800624e:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800625a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	2302      	movs	r3, #2
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006268:	2303      	movs	r3, #3
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800626c:	2305      	movs	r3, #5
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006274:	4619      	mov	r1, r3
 8006276:	4821      	ldr	r0, [pc, #132]	; (80062fc <HAL_SPI_MspInit+0x160>)
 8006278:	f004 f8a8 	bl	800a3cc <HAL_GPIO_Init>
}
 800627c:	e031      	b.n	80062e2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI4)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <HAL_SPI_MspInit+0x164>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d12c      	bne.n	80062e2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 8006292:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006296:	6453      	str	r3, [r2, #68]	; 0x44
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80062ae:	f043 0310 	orr.w	r3, r3, #16
 80062b2:	6313      	str	r3, [r2, #48]	; 0x30
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HAL_SPI_MspInit+0x154>)
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80062c0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c6:	2302      	movs	r3, #2
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ce:	2303      	movs	r3, #3
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80062d2:	2305      	movs	r3, #5
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062da:	4619      	mov	r1, r3
 80062dc:	4809      	ldr	r0, [pc, #36]	; (8006304 <HAL_SPI_MspInit+0x168>)
 80062de:	f004 f875 	bl	800a3cc <HAL_GPIO_Init>
}
 80062e2:	bf00      	nop
 80062e4:	3738      	adds	r7, #56	; 0x38
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40013000 	.word	0x40013000
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40020000 	.word	0x40020000
 80062f8:	40003800 	.word	0x40003800
 80062fc:	40020400 	.word	0x40020400
 8006300:	40013400 	.word	0x40013400
 8006304:	40021000 	.word	0x40021000

08006308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
 800631e:	4b62      	ldr	r3, [pc, #392]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	4a61      	ldr	r2, [pc, #388]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6413      	str	r3, [r2, #64]	; 0x40
 800632a:	4b5f      	ldr	r3, [pc, #380]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006336:	e0b2      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM3)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a5b      	ldr	r2, [pc, #364]	; (80064ac <HAL_TIM_Base_MspInit+0x1a4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	4b58      	ldr	r3, [pc, #352]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	4a57      	ldr	r2, [pc, #348]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	6413      	str	r3, [r2, #64]	; 0x40
 8006352:	4b55      	ldr	r3, [pc, #340]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	6a3b      	ldr	r3, [r7, #32]
}
 800635e:	e09e      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM5)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a52      	ldr	r2, [pc, #328]	; (80064b0 <HAL_TIM_Base_MspInit+0x1a8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	4b4e      	ldr	r3, [pc, #312]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	4a4d      	ldr	r2, [pc, #308]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006374:	f043 0308 	orr.w	r3, r3, #8
 8006378:	6413      	str	r3, [r2, #64]	; 0x40
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	69fb      	ldr	r3, [r7, #28]
}
 8006386:	e08a      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM6)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a49      	ldr	r2, [pc, #292]	; (80064b4 <HAL_TIM_Base_MspInit+0x1ac>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d116      	bne.n	80063c0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4a43      	ldr	r2, [pc, #268]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800639c:	f043 0310 	orr.w	r3, r3, #16
 80063a0:	6413      	str	r3, [r2, #64]	; 0x40
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80063ae:	2200      	movs	r2, #0
 80063b0:	2101      	movs	r1, #1
 80063b2:	2036      	movs	r0, #54	; 0x36
 80063b4:	f003 fbcd 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80063b8:	2036      	movs	r0, #54	; 0x36
 80063ba:	f003 fbe6 	bl	8009b8a <HAL_NVIC_EnableIRQ>
}
 80063be:	e06e      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM7)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <HAL_TIM_Base_MspInit+0x1b0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d116      	bne.n	80063f8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	4a35      	ldr	r2, [pc, #212]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 80063d4:	f043 0320 	orr.w	r3, r3, #32
 80063d8:	6413      	str	r3, [r2, #64]	; 0x40
 80063da:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80063e6:	2200      	movs	r2, #0
 80063e8:	2102      	movs	r1, #2
 80063ea:	2037      	movs	r0, #55	; 0x37
 80063ec:	f003 fbb1 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80063f0:	2037      	movs	r0, #55	; 0x37
 80063f2:	f003 fbca 	bl	8009b8a <HAL_NVIC_EnableIRQ>
}
 80063f6:	e052      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM10)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2f      	ldr	r2, [pc, #188]	; (80064bc <HAL_TIM_Base_MspInit+0x1b4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d116      	bne.n	8006430 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	4a27      	ldr	r2, [pc, #156]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800640c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006410:	6453      	str	r3, [r2, #68]	; 0x44
 8006412:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800641e:	2200      	movs	r2, #0
 8006420:	2102      	movs	r1, #2
 8006422:	2019      	movs	r0, #25
 8006424:	f003 fb95 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006428:	2019      	movs	r0, #25
 800642a:	f003 fbae 	bl	8009b8a <HAL_NVIC_EnableIRQ>
}
 800642e:	e036      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM11)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_TIM_Base_MspInit+0x1b8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d116      	bne.n	8006468 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006448:	6453      	str	r3, [r2, #68]	; 0x44
 800644a:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8006456:	2200      	movs	r2, #0
 8006458:	2102      	movs	r1, #2
 800645a:	201a      	movs	r0, #26
 800645c:	f003 fb79 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006460:	201a      	movs	r0, #26
 8006462:	f003 fb92 	bl	8009b8a <HAL_NVIC_EnableIRQ>
}
 8006466:	e01a      	b.n	800649e <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM13)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <HAL_TIM_Base_MspInit+0x1bc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d115      	bne.n	800649e <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a0b      	ldr	r2, [pc, #44]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_TIM_Base_MspInit+0x1a0>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800648e:	2200      	movs	r2, #0
 8006490:	2101      	movs	r1, #1
 8006492:	202c      	movs	r0, #44	; 0x2c
 8006494:	f003 fb5d 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006498:	202c      	movs	r0, #44	; 0x2c
 800649a:	f003 fb76 	bl	8009b8a <HAL_NVIC_EnableIRQ>
}
 800649e:	bf00      	nop
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40001000 	.word	0x40001000
 80064b8:	40001400 	.word	0x40001400
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800
 80064c4:	40001c00 	.word	0x40001c00

080064c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d0:	f107 0314 	add.w	r3, r7, #20
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d11f      	bne.n	800652a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 80064f4:	f043 0302 	orr.w	r3, r3, #2
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = mtr0_pwmA_Pin|mtr0_pwmB_Pin;
 8006506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800650a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650c:	2302      	movs	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006518:	2301      	movs	r3, #1
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4619      	mov	r1, r3
 8006522:	4816      	ldr	r0, [pc, #88]	; (800657c <HAL_TIM_MspPostInit+0xb4>)
 8006524:	f003 ff52 	bl	800a3cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006528:	e022      	b.n	8006570 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a14      	ldr	r2, [pc, #80]	; (8006580 <HAL_TIM_MspPostInit+0xb8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d11d      	bne.n	8006570 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	4a0e      	ldr	r2, [pc, #56]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 800653e:	f043 0302 	orr.w	r3, r3, #2
 8006542:	6313      	str	r3, [r2, #48]	; 0x30
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <HAL_TIM_MspPostInit+0xb0>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mtr1_pwmA_Pin|mtr1_pwmB_Pin;
 8006550:	2330      	movs	r3, #48	; 0x30
 8006552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006554:	2302      	movs	r3, #2
 8006556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800655c:	2300      	movs	r3, #0
 800655e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006560:	2302      	movs	r3, #2
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006564:	f107 0314 	add.w	r3, r7, #20
 8006568:	4619      	mov	r1, r3
 800656a:	4804      	ldr	r0, [pc, #16]	; (800657c <HAL_TIM_MspPostInit+0xb4>)
 800656c:	f003 ff2e 	bl	800a3cc <HAL_GPIO_Init>
}
 8006570:	bf00      	nop
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40023800 	.word	0x40023800
 800657c:	40020400 	.word	0x40020400
 8006580:	40000400 	.word	0x40000400

08006584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a35      	ldr	r2, [pc, #212]	; (8006678 <HAL_UART_MspInit+0xf4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d163      	bne.n	800666e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	4b34      	ldr	r3, [pc, #208]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	4a33      	ldr	r2, [pc, #204]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b4:	6413      	str	r3, [r2, #64]	; 0x40
 80065b6:	4b31      	ldr	r3, [pc, #196]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	4b2d      	ldr	r3, [pc, #180]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	4a2c      	ldr	r2, [pc, #176]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	6313      	str	r3, [r2, #48]	; 0x30
 80065d2:	4b2a      	ldr	r3, [pc, #168]	; (800667c <HAL_UART_MspInit+0xf8>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80065de:	2360      	movs	r3, #96	; 0x60
 80065e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	2302      	movs	r3, #2
 80065e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065ea:	2303      	movs	r3, #3
 80065ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065ee:	2307      	movs	r3, #7
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065f2:	f107 0314 	add.w	r3, r7, #20
 80065f6:	4619      	mov	r1, r3
 80065f8:	4821      	ldr	r0, [pc, #132]	; (8006680 <HAL_UART_MspInit+0xfc>)
 80065fa:	f003 fee7 	bl	800a3cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <HAL_UART_MspInit+0x104>)
 8006602:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006604:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800660a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_UART_MspInit+0x100>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006614:	2200      	movs	r2, #0
 8006616:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_UART_MspInit+0x100>)
 800661a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800661e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006622:	2200      	movs	r2, #0
 8006624:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006628:	2200      	movs	r2, #0
 800662a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HAL_UART_MspInit+0x100>)
 800662e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006632:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800663a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <HAL_UART_MspInit+0x100>)
 800663e:	2200      	movs	r2, #0
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006642:	4810      	ldr	r0, [pc, #64]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006644:	f003 fac0 	bl	8009bc8 <HAL_DMA_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800664e:	f7fd f873 	bl	8003738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <HAL_UART_MspInit+0x100>)
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
 8006658:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <HAL_UART_MspInit+0x100>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	2026      	movs	r0, #38	; 0x26
 8006664:	f003 fa75 	bl	8009b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006668:	2026      	movs	r0, #38	; 0x26
 800666a:	f003 fa8e 	bl	8009b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800666e:	bf00      	nop
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40004400 	.word	0x40004400
 800667c:	40023800 	.word	0x40023800
 8006680:	40020c00 	.word	0x40020c00
 8006684:	200007f4 	.word	0x200007f4
 8006688:	40026088 	.word	0x40026088

0800668c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006690:	e7fe      	b.n	8006690 <NMI_Handler+0x4>

08006692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006696:	e7fe      	b.n	8006696 <HardFault_Handler+0x4>

08006698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800669c:	e7fe      	b.n	800669c <MemManage_Handler+0x4>

0800669e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800669e:	b480      	push	{r7}
 80066a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066a2:	e7fe      	b.n	80066a2 <BusFault_Handler+0x4>

080066a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066a8:	e7fe      	b.n	80066a8 <UsageFault_Handler+0x4>

080066aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066aa:	b480      	push	{r7}
 80066ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066ae:	bf00      	nop
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066ca:	bf00      	nop
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066d8:	f003 f906 	bl	80098e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066dc:	bf00      	nop
 80066de:	bd80      	pop	{r7, pc}

080066e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80066e4:	4802      	ldr	r0, [pc, #8]	; (80066f0 <DMA1_Stream5_IRQHandler+0x10>)
 80066e6:	f003 fc07 	bl	8009ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80066ea:	bf00      	nop
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200007f4 	.word	0x200007f4

080066f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80066f8:	4802      	ldr	r0, [pc, #8]	; (8006704 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80066fa:	f005 fe63 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	200008ac 	.word	0x200008ac

08006708 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800670c:	4802      	ldr	r0, [pc, #8]	; (8006718 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800670e:	f005 fe59 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000bdc 	.word	0x20000bdc

0800671c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006720:	4807      	ldr	r0, [pc, #28]	; (8006740 <USART2_IRQHandler+0x24>)
 8006722:	f006 fdb9 	bl	800d298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <USART2_IRQHandler+0x24>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d102      	bne.n	800673a <USART2_IRQHandler+0x1e>
      HAL_UART_RxCpltCallback(&huart2);
 8006734:	4802      	ldr	r0, [pc, #8]	; (8006740 <USART2_IRQHandler+0x24>)
 8006736:	f7fc f8bb 	bl	80028b0 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	2000202c 	.word	0x2000202c

08006744 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800674a:	f005 fe3b 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000a94 	.word	0x20000a94

08006758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800675c:	4802      	ldr	r0, [pc, #8]	; (8006768 <TIM6_DAC_IRQHandler+0x10>)
 800675e:	f005 fe31 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000d48 	.word	0x20000d48

0800676c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006770:	4802      	ldr	r0, [pc, #8]	; (800677c <TIM7_IRQHandler+0x10>)
 8006772:	f005 fe27 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20002080 	.word	0x20002080

08006780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <SystemInit+0x20>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	4a05      	ldr	r2, [pc, #20]	; (80067a0 <SystemInit+0x20>)
 800678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	789b      	ldrb	r3, [r3, #2]
 80067be:	461a      	mov	r2, r3
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f001 f9ea 	bl	8007b9e <set_valve_channel>
	}
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <tank_init_control_loop>:

/**
 * Call this right before entering the control loop
 */
void tank_init_control_loop(TPC_Info* tank) {
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
	tank->Kp_error = 0,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34
	tank->Ki_error = 0;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
	tank->Kd_error = 0;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	63da      	str	r2, [r3, #60]	; 0x3c
	tank->PID_error_sum = 0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <tank_autopress_bang_bang>:


void tank_autopress_bang_bang(TPC_Info* tank) {
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	ed93 7a00 	vldr	s14, [r3]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_low_pres_diff)) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	edd3 7a05 	vldr	s15, [r3, #20]
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 800683e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	d504      	bpl.n	8006852 <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 8006848:	2101      	movs	r1, #1
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff ffaa 	bl	80067a4 <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8006850:	e015      	b.n	800687e <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	ed93 7a00 	vldr	s14, [r3]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_high_pres_diff)) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	edd3 7a06 	vldr	s15, [r3, #24]
 8006866:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 800686a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	dc00      	bgt.n	8006876 <tank_autopress_bang_bang+0x58>
}
 8006874:	e003      	b.n	800687e <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff93 	bl	80067a4 <actuate_tank_control_valve>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08c      	sub	sp, #48	; 0x30
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	4618      	mov	r0, r3
 8006896:	f7f9 fdf9 	bl	800048c <__aeabi_ui2d>
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	4b6f      	ldr	r3, [pc, #444]	; (8006a5c <tank_PID_pressure_control+0x1d4>)
 80068a0:	f7f9 ff98 	bl	80007d4 <__aeabi_ddiv>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4610      	mov	r0, r2
 80068aa:	4619      	mov	r1, r3
 80068ac:	f7fa f960 	bl	8000b70 <__aeabi_d2f>
 80068b0:	4603      	mov	r3, r0
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
    float max_motor_delta = maxPos - curPos[tank->motor_num]; //distance from maxPos
 80068b4:	4b6a      	ldr	r3, [pc, #424]	; (8006a60 <tank_PID_pressure_control+0x1d8>)
 80068b6:	ed93 7a00 	vldr	s14, [r3]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	4a69      	ldr	r2, [pc, #420]	; (8006a64 <tank_PID_pressure_control+0x1dc>)
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	edd3 7a00 	vldr	s15, [r3]
 80068c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	edd3 7a00 	vldr	s15, [r3]
 80068de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e2:	edc7 7a08 	vstr	s15, [r7, #32]
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80068ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80068f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80068f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068fc:	edc7 7a07 	vstr	s15, [r7, #28]
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006906:	ed97 7a08 	vldr	s14, [r7, #32]
 800690a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800690e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006916:	edc7 7a06 	vstr	s15, [r7, #24]
	tank->PID_prev_step_error = error;  // store for next D calculation
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	645a      	str	r2, [r3, #68]	; 0x44

	// Apply gains
	float Kp_term = tank->K_p * error;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006926:	ed97 7a08 	vldr	s14, [r7, #32]
 800692a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692e:	edc7 7a05 	vstr	s15, [r7, #20]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a04 	vstr	s15, [r7, #16]
	float Kd_term = tank->K_d * slope;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800694c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006954:	edc7 7a03 	vstr	s15, [r7, #12]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8006958:	ed97 7a05 	vldr	s14, [r7, #20]
 800695c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006964:	ed97 7a03 	vldr	s14, [r7, #12]
 8006968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800696c:	edc7 7a02 	vstr	s15, [r7, #8]

	// Limit output
	float motor_delta;
	if (PID_total_output < -curPos[tank->motor_num]) {  // Lower bound
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	4a3b      	ldr	r2, [pc, #236]	; (8006a64 <tank_PID_pressure_control+0x1dc>)
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	edd3 7a00 	vldr	s15, [r3]
 800697e:	eef1 7a67 	vneg.f32	s15, s15
 8006982:	ed97 7a02 	vldr	s14, [r7, #8]
 8006986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698e:	d50b      	bpl.n	80069a8 <tank_PID_pressure_control+0x120>
		motor_delta = -curPos[tank->motor_num];
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	4a33      	ldr	r2, [pc, #204]	; (8006a64 <tank_PID_pressure_control+0x1dc>)
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	edd3 7a00 	vldr	s15, [r3]
 800699e:	eef1 7a67 	vneg.f32	s15, s15
 80069a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80069a6:	e010      	b.n	80069ca <tank_PID_pressure_control+0x142>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 80069a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80069ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80069b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	dd02      	ble.n	80069c0 <tank_PID_pressure_control+0x138>
		motor_delta = max_motor_delta;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	e004      	b.n	80069ca <tank_PID_pressure_control+0x142>
	}
	else {
		motor_delta = PID_total_output;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// Actuate motor to new position
	//actuate_tank_motor_pos(tank, motor_pos + motor_delta);  Not yet lol
    targetPos[tank->motor_num] = curPos[tank->motor_num] + motor_delta;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <tank_PID_pressure_control+0x1dc>)
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	ed93 7a00 	vldr	s14, [r3]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	78db      	ldrb	r3, [r3, #3]
 80069dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80069e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e4:	4a20      	ldr	r2, [pc, #128]	; (8006a68 <tank_PID_pressure_control+0x1e0>)
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	edc3 7a00 	vstr	s15, [r3]
    curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <tank_PID_pressure_control+0x1dc>)
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	ed93 7a00 	vldr	s14, [r3]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <tank_PID_pressure_control+0x1e0>)
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	edd3 7a00 	vldr	s15, [r3]
 8006a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a12:	d501      	bpl.n	8006a18 <tank_PID_pressure_control+0x190>
 8006a14:	2101      	movs	r1, #1
 8006a16:	e001      	b.n	8006a1c <tank_PID_pressure_control+0x194>
 8006a18:	f04f 31ff 	mov.w	r1, #4294967295
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	78db      	ldrb	r3, [r3, #3]
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <tank_PID_pressure_control+0x1e4>)
 8006a24:	5499      	strb	r1, [r3, r2]

	// Log data
    mtr_set[tank->motor_num] = targetPos[tank->motor_num];
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	4618      	mov	r0, r3
 8006a32:	4a0d      	ldr	r2, [pc, #52]	; (8006a68 <tank_PID_pressure_control+0x1e0>)
 8006a34:	008b      	lsls	r3, r1, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	490d      	ldr	r1, [pc, #52]	; (8006a70 <tank_PID_pressure_control+0x1e8>)
 8006a3c:	0083      	lsls	r3, r0, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	601a      	str	r2, [r3, #0]
    tank->Kp_error = Kp_term;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	635a      	str	r2, [r3, #52]	; 0x34
    tank->Ki_error = Ki_term;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
    tank->Kd_error = Kd_term;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a54:	bf00      	nop
 8006a56:	3730      	adds	r7, #48	; 0x30
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	408f4000 	.word	0x408f4000
 8006a60:	20000010 	.word	0x20000010
 8006a64:	200003a8 	.word	0x200003a8
 8006a68:	200003a0 	.word	0x200003a0
 8006a6c:	200003b0 	.word	0x200003b0
 8006a70:	2000038c 	.word	0x2000038c

08006a74 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	ed93 7a00 	vldr	s14, [r3]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	d504      	bpl.n	8006a9e <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8006a94:	2101      	movs	r1, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fe84 	bl	80067a4 <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8006a9c:	e010      	b.n	8006ac0 <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	ed93 7a00 	vldr	s14, [r3]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	edd3 7a08 	vldr	s15, [r3, #32]
 8006aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	dc00      	bgt.n	8006ab8 <tank_check_control_valve_threshold+0x44>
}
 8006ab6:	e003      	b.n	8006ac0 <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8006ab8:	2100      	movs	r1, #0
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fe72 	bl	80067a4 <actuate_tank_control_valve>
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <tank_startup_init_motor_position>:


// TODO: refactor this bigly
void tank_startup_init_motor_position(TPC_Info* tank) {
 8006ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006acc:	ed2d 8b02 	vpush	{d8}
 8006ad0:	b09a      	sub	sp, #104	; 0x68
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
	static double c2     = 6140;
	static double c3     = 5360;
	static double c4     = 769.8;

	double crit_pr, t_r, valve_cv, t_f, /*p_rat, t_rat,*/ q_acf, q_scf, vdot;
	double deg = 0;
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double p_i    = (double)(*(tank->COPV_pres));       // cng pressure
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7f9 fcf1 	bl	80004d0 <__aeabi_f2d>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double p_o    = (double)(*(tank->control_pres));     // tank pressure
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7f9 fce7 	bl	80004d0 <__aeabi_f2d>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Avoid divide by zero error
	if (p_i == 0) {
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b16:	f7f9 ff9b 	bl	8000a50 <__aeabi_dcmpeq>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <tank_startup_init_motor_position+0x62>
		p_i = 0.1;
 8006b20:	a392      	add	r3, pc, #584	; (adr r3, 8006d6c <tank_startup_init_motor_position+0x2a4>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (p_o == 0) {
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006b36:	f7f9 ff8b 	bl	8000a50 <__aeabi_dcmpeq>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <tank_startup_init_motor_position+0x82>
		p_o = 0.1;
 8006b40:	a38a      	add	r3, pc, #552	; (adr r3, 8006d6c <tank_startup_init_motor_position+0x2a4>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	t_f = 300; // K  TODO: what are these, and why aren't they also static?
 8006b4a:	a38a      	add	r3, pc, #552	; (adr r3, 8006d74 <tank_startup_init_motor_position+0x2ac>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_std = 288; // K
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <tank_startup_init_motor_position+0x290>)
 8006b5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p_std = 14.7; // psi
 8006b5e:	a372      	add	r3, pc, #456	; (adr r3, 8006d28 <tank_startup_init_motor_position+0x260>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (tank->is_cryogenic) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <tank_startup_init_motor_position+0xb4>
		vdot   = 0.00317;
 8006b70:	a36f      	add	r3, pc, #444	; (adr r3, 8006d30 <tank_startup_init_motor_position+0x268>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006b7a:	e004      	b.n	8006b86 <tank_startup_init_motor_position+0xbe>
	}
	else {
		vdot   = 0.00361;
 8006b7c:	a36e      	add	r3, pc, #440	; (adr r3, 8006d38 <tank_startup_init_motor_position+0x270>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	// Calculations
	crit_pr = pow(2.0 / (gamma + 1), gamma / (gamma - 1));
 8006b86:	4b75      	ldr	r3, [pc, #468]	; (8006d5c <tank_startup_init_motor_position+0x294>)
 8006b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	4b73      	ldr	r3, [pc, #460]	; (8006d60 <tank_startup_init_motor_position+0x298>)
 8006b92:	f7f9 fb3f 	bl	8000214 <__adddf3>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	f04f 0000 	mov.w	r0, #0
 8006b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ba2:	f7f9 fe17 	bl	80007d4 <__aeabi_ddiv>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	ec43 2b18 	vmov	d8, r2, r3
 8006bae:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <tank_startup_init_motor_position+0x294>)
 8006bb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006bb4:	4b69      	ldr	r3, [pc, #420]	; (8006d5c <tank_startup_init_motor_position+0x294>)
 8006bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	4b68      	ldr	r3, [pc, #416]	; (8006d60 <tank_startup_init_motor_position+0x298>)
 8006bc0:	f7f9 fb26 	bl	8000210 <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f7f9 fe02 	bl	80007d4 <__aeabi_ddiv>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	ec43 2b17 	vmov	d7, r2, r3
 8006bd8:	eeb0 1a47 	vmov.f32	s2, s14
 8006bdc:	eef0 1a67 	vmov.f32	s3, s15
 8006be0:	eeb0 0a48 	vmov.f32	s0, s16
 8006be4:	eef0 0a68 	vmov.f32	s1, s17
 8006be8:	f007 fcde 	bl	800e5a8 <pow>
 8006bec:	ed87 0b06 	vstr	d0, [r7, #24]
	t_r     = (double)(300) * (9.0/5);  // Hardcoded temp bc tcs are buggy
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	4b5b      	ldr	r3, [pc, #364]	; (8006d64 <tank_startup_init_motor_position+0x29c>)
 8006bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// TODO: uncomment that when tcs are fixed
	//t_r     = (double)(*(tank->COPV_temp)) * (9.0/5);
	q_acf = vdot*2118.88; // cfm
 8006bfa:	a351      	add	r3, pc, #324	; (adr r3, 8006d40 <tank_startup_init_motor_position+0x278>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c04:	f7f9 fcbc 	bl	8000580 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (tank->is_cryogenic) { // cryogenic liquid case
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01b      	beq.n	8006c50 <tank_startup_init_motor_position+0x188>
		q_scf = q_acf*p_o/(p_std)*1.3;
 8006c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c20:	f7f9 fcae 	bl	8000580 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c30:	f7f9 fdd0 	bl	80007d4 <__aeabi_ddiv>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	a342      	add	r3, pc, #264	; (adr r3, 8006d48 <tank_startup_init_motor_position+0x280>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fc9d 	bl	8000580 <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8006c4e:	e021      	b.n	8006c94 <tank_startup_init_motor_position+0x1cc>
	}
	else {
		q_scf = q_acf*p_o*t_std/(p_std*t_f);
 8006c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c58:	f7f9 fc92 	bl	8000580 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c68:	f7f9 fc8a 	bl	8000580 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c7c:	f7f9 fc80 	bl	8000580 <__aeabi_dmul>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7f9 fda4 	bl	80007d4 <__aeabi_ddiv>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	if (crit_pr >= p_o/p_i) { // Critical flows
 8006c94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c9c:	f7f9 fd9a 	bl	80007d4 <__aeabi_ddiv>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ca8:	f7f9 fef0 	bl	8000a8c <__aeabi_dcmpge>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d064      	beq.n	8006d7c <tank_startup_init_motor_position+0x2b4>
		valve_cv = q_scf/13.61/p_i/sqrt(1.0/sg/t_r);
 8006cb2:	a327      	add	r3, pc, #156	; (adr r3, 8006d50 <tank_startup_init_motor_position+0x288>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006cbc:	f7f9 fd8a 	bl	80007d4 <__aeabi_ddiv>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ccc:	f7f9 fd82 	bl	80007d4 <__aeabi_ddiv>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <tank_startup_init_motor_position+0x2a0>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	f04f 0000 	mov.w	r0, #0
 8006ce2:	491f      	ldr	r1, [pc, #124]	; (8006d60 <tank_startup_init_motor_position+0x298>)
 8006ce4:	f7f9 fd76 	bl	80007d4 <__aeabi_ddiv>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4610      	mov	r0, r2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cf4:	f7f9 fd6e 	bl	80007d4 <__aeabi_ddiv>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	ec43 2b17 	vmov	d7, r2, r3
 8006d00:	eeb0 0a47 	vmov.f32	s0, s14
 8006d04:	eef0 0a67 	vmov.f32	s1, s15
 8006d08:	f007 fcfc 	bl	800e704 <sqrt>
 8006d0c:	ec53 2b10 	vmov	r2, r3, d0
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7f9 fd5e 	bl	80007d4 <__aeabi_ddiv>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8006d20:	e070      	b.n	8006e04 <tank_startup_init_motor_position+0x33c>
 8006d22:	bf00      	nop
 8006d24:	f3af 8000 	nop.w
 8006d28:	66666666 	.word	0x66666666
 8006d2c:	402d6666 	.word	0x402d6666
 8006d30:	ca8198f2 	.word	0xca8198f2
 8006d34:	3f69f7f8 	.word	0x3f69f7f8
 8006d38:	fe08aefb 	.word	0xfe08aefb
 8006d3c:	3f6d92b7 	.word	0x3f6d92b7
 8006d40:	8f5c28f6 	.word	0x8f5c28f6
 8006d44:	40a08dc2 	.word	0x40a08dc2
 8006d48:	cccccccd 	.word	0xcccccccd
 8006d4c:	3ff4cccc 	.word	0x3ff4cccc
 8006d50:	eb851eb8 	.word	0xeb851eb8
 8006d54:	402b3851 	.word	0x402b3851
 8006d58:	40720000 	.word	0x40720000
 8006d5c:	200001a0 	.word	0x200001a0
 8006d60:	3ff00000 	.word	0x3ff00000
 8006d64:	4080e000 	.word	0x4080e000
 8006d68:	200001a8 	.word	0x200001a8
 8006d6c:	9999999a 	.word	0x9999999a
 8006d70:	3fb99999 	.word	0x3fb99999
 8006d74:	00000000 	.word	0x00000000
 8006d78:	4072c000 	.word	0x4072c000
	} else {
		valve_cv = q_scf/16.05/sqrt((pow(p_i,2)-pow(p_o,2))/sg/t_r);
 8006d7c:	a397      	add	r3, pc, #604	; (adr r3, 8006fdc <tank_startup_init_motor_position+0x514>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d86:	f7f9 fd25 	bl	80007d4 <__aeabi_ddiv>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4614      	mov	r4, r2
 8006d90:	461d      	mov	r5, r3
 8006d92:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8006f90 <tank_startup_init_motor_position+0x4c8>
 8006d96:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006d9a:	f007 fc05 	bl	800e5a8 <pow>
 8006d9e:	ec59 8b10 	vmov	r8, r9, d0
 8006da2:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8006f90 <tank_startup_init_motor_position+0x4c8>
 8006da6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006daa:	f007 fbfd 	bl	800e5a8 <pow>
 8006dae:	ec53 2b10 	vmov	r2, r3, d0
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fa2b 	bl	8000210 <__aeabi_dsub>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <tank_startup_init_motor_position+0x4e8>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fd04 	bl	80007d4 <__aeabi_ddiv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dd8:	f7f9 fcfc 	bl	80007d4 <__aeabi_ddiv>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	ec43 2b17 	vmov	d7, r2, r3
 8006de4:	eeb0 0a47 	vmov.f32	s0, s14
 8006de8:	eef0 0a67 	vmov.f32	s1, s15
 8006dec:	f007 fc8a 	bl	800e704 <sqrt>
 8006df0:	ec53 2b10 	vmov	r2, r3, d0
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	f7f9 fcec 	bl	80007d4 <__aeabi_ddiv>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e04:	4b6b      	ldr	r3, [pc, #428]	; (8006fb4 <tank_startup_init_motor_position+0x4ec>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7f9 fb61 	bl	80004d0 <__aeabi_f2d>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8006f98 <tank_startup_init_motor_position+0x4d0>
 8006e16:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e1a:	f007 fbc5 	bl	800e5a8 <pow>
 8006e1e:	ec51 0b10 	vmov	r0, r1, d0
 8006e22:	4b65      	ldr	r3, [pc, #404]	; (8006fb8 <tank_startup_init_motor_position+0x4f0>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fbaa 	bl	8000580 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4690      	mov	r8, r2
 8006e32:	4699      	mov	r9, r3
		  c2*pow(valve_cv, 3) +
 8006e34:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8006fa0 <tank_startup_init_motor_position+0x4d8>
 8006e38:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e3c:	f007 fbb4 	bl	800e5a8 <pow>
 8006e40:	ec51 0b10 	vmov	r0, r1, d0
 8006e44:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <tank_startup_init_motor_position+0x4f4>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fb99 	bl	8000580 <__aeabi_dmul>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 f9dd 	bl	8000214 <__adddf3>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4690      	mov	r8, r2
 8006e60:	4699      	mov	r9, r3
		  c3*pow(valve_cv, 2) +
 8006e62:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8006f90 <tank_startup_init_motor_position+0x4c8>
 8006e66:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e6a:	f007 fb9d 	bl	800e5a8 <pow>
 8006e6e:	ec51 0b10 	vmov	r0, r1, d0
 8006e72:	4b53      	ldr	r3, [pc, #332]	; (8006fc0 <tank_startup_init_motor_position+0x4f8>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 fb82 	bl	8000580 <__aeabi_dmul>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
		  c2*pow(valve_cv, 3) +
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 f9c6 	bl	8000214 <__adddf3>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4690      	mov	r8, r2
 8006e8e:	4699      	mov	r9, r3
		  c4*valve_cv);
 8006e90:	4b4c      	ldr	r3, [pc, #304]	; (8006fc4 <tank_startup_init_motor_position+0x4fc>)
 8006e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e9a:	f7f9 fb71 	bl	8000580 <__aeabi_dmul>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
		  c3*pow(valve_cv, 2) +
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 f9b5 	bl	8000214 <__adddf3>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 fb65 	bl	8000580 <__aeabi_dmul>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Output limiting
	if (deg < 0) { deg = 0; }
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006eca:	f7f9 fdcb 	bl	8000a64 <__aeabi_dcmplt>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <tank_startup_init_motor_position+0x418>
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (deg > 2460) { deg = 2460; }
 8006ee0:	a331      	add	r3, pc, #196	; (adr r3, 8006fa8 <tank_startup_init_motor_position+0x4e0>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006eea:	f7f9 fdd9 	bl	8000aa0 <__aeabi_dcmpgt>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <tank_startup_init_motor_position+0x436>
 8006ef4:	a32c      	add	r3, pc, #176	; (adr r3, 8006fa8 <tank_startup_init_motor_position+0x4e0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	// TODO: where does 2460 come from?

	// TODO: Why is the direction manually set here?
	// can it just be the shortest path?
	if (tank->tank_enable) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d039      	beq.n	8006f7c <tank_startup_init_motor_position+0x4b4>
		manual_stepper_pos_override[tank->motor_num] = 1;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	78db      	ldrb	r3, [r3, #3]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b2e      	ldr	r3, [pc, #184]	; (8006fc8 <tank_startup_init_motor_position+0x500>)
 8006f10:	2101      	movs	r1, #1
 8006f12:	5499      	strb	r1, [r3, r2]
		targetPos[tank->motor_num] = deg; // position given in deg
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	461c      	mov	r4, r3
 8006f1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f1e:	f7f9 fe27 	bl	8000b70 <__aeabi_d2f>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4929      	ldr	r1, [pc, #164]	; (8006fcc <tank_startup_init_motor_position+0x504>)
 8006f26:	00a3      	lsls	r3, r4, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	601a      	str	r2, [r3, #0]
		curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1; // CCW facing the motor
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	4a27      	ldr	r2, [pc, #156]	; (8006fd0 <tank_startup_init_motor_position+0x508>)
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	ed93 7a00 	vldr	s14, [r3]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	78db      	ldrb	r3, [r3, #3]
 8006f3e:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <tank_startup_init_motor_position+0x504>)
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	edd3 7a00 	vldr	s15, [r3]
 8006f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	d501      	bpl.n	8006f56 <tank_startup_init_motor_position+0x48e>
 8006f52:	2101      	movs	r1, #1
 8006f54:	e001      	b.n	8006f5a <tank_startup_init_motor_position+0x492>
 8006f56:	f04f 31ff 	mov.w	r1, #4294967295
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <tank_startup_init_motor_position+0x50c>)
 8006f62:	5499      	strb	r1, [r3, r2]
		mtr_set[tank->motor_num] = deg; // save new motor position setpoint
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	461c      	mov	r4, r3
 8006f6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f6e:	f7f9 fdff 	bl	8000b70 <__aeabi_d2f>
 8006f72:	4602      	mov	r2, r0
 8006f74:	4918      	ldr	r1, [pc, #96]	; (8006fd8 <tank_startup_init_motor_position+0x510>)
 8006f76:	00a3      	lsls	r3, r4, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	601a      	str	r2, [r3, #0]
	}
}
 8006f7c:	bf00      	nop
 8006f7e:	3768      	adds	r7, #104	; 0x68
 8006f80:	46bd      	mov	sp, r7
 8006f82:	ecbd 8b02 	vpop	{d8}
 8006f86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	00000000 	.word	0x00000000
 8006f94:	40000000 	.word	0x40000000
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	40100000 	.word	0x40100000
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	40080000 	.word	0x40080000
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	40a33800 	.word	0x40a33800
 8006fb0:	200001a8 	.word	0x200001a8
 8006fb4:	200002e0 	.word	0x200002e0
 8006fb8:	200001b0 	.word	0x200001b0
 8006fbc:	200001b8 	.word	0x200001b8
 8006fc0:	200001c0 	.word	0x200001c0
 8006fc4:	200001c8 	.word	0x200001c8
 8006fc8:	2000039c 	.word	0x2000039c
 8006fcc:	200003a0 	.word	0x200003a0
 8006fd0:	200003a8 	.word	0x200003a8
 8006fd4:	200003b0 	.word	0x200003b0
 8006fd8:	2000038c 	.word	0x2000038c
 8006fdc:	cccccccd 	.word	0xcccccccd
 8006fe0:	40300ccc 	.word	0x40300ccc

08006fe4 <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3303      	adds	r3, #3
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	061a      	lsls	r2, r3, #24
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3301      	adds	r3, #1
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	4313      	orrs	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// Don't allow operator intervention during the autosequence
	if (STATE == Ignition ||
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <set_vlv+0x68>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d011      	beq.n	8007044 <set_vlv+0x60>
			STATE == Hotfire ||
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <set_vlv+0x68>)
 8007022:	781b      	ldrb	r3, [r3, #0]
	if (STATE == Ignition ||
 8007024:	2b05      	cmp	r3, #5
 8007026:	d00d      	beq.n	8007044 <set_vlv+0x60>
			STATE == Post ||
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <set_vlv+0x68>)
 800702a:	781b      	ldrb	r3, [r3, #0]
			STATE == Hotfire ||
 800702c:	2b07      	cmp	r3, #7
 800702e:	d009      	beq.n	8007044 <set_vlv+0x60>
			STATE == Abort) {
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <set_vlv+0x68>)
 8007032:	781b      	ldrb	r3, [r3, #0]
			STATE == Post ||
 8007034:	2b06      	cmp	r3, #6
 8007036:	d005      	beq.n	8007044 <set_vlv+0x60>
		return;
	}
	else {
		set_valve_channel(vlv_num, state);
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	4619      	mov	r1, r3
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fdae 	bl	8007b9e <set_valve_channel>
 8007042:	e000      	b.n	8007046 <set_vlv+0x62>
		return;
 8007044:	bf00      	nop
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200002ac 	.word	0x200002ac

08007050 <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3308      	adds	r3, #8
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	2338      	movs	r3, #56	; 0x38
 800706a:	409a      	lsls	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3307      	adds	r3, #7
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	fa01 f303 	lsl.w	r3, r1, r3
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3306      	adds	r3, #6
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	2328      	movs	r3, #40	; 0x28
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3305      	adds	r3, #5
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	4619      	mov	r1, r3
 8007094:	2320      	movs	r3, #32
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	061b      	lsls	r3, r3, #24
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3303      	adds	r3, #3
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3302      	adds	r3, #2
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	4313      	orrs	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	3201      	adds	r2, #1
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f9f2 	bl	80004ac <__aeabi_i2d>
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <set_kp+0xb8>)
 80070ce:	f7f9 fb81 	bl	80007d4 <__aeabi_ddiv>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d80e      	bhi.n	80070fe <set_kp+0xae>
		tanks[motor_num].K_p = gain;
 80070e0:	7dfc      	ldrb	r4, [r7, #23]
 80070e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070e6:	f7f9 fd43 	bl	8000b70 <__aeabi_d2f>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4907      	ldr	r1, [pc, #28]	; (800710c <set_kp+0xbc>)
 80070ee:	2354      	movs	r3, #84	; 0x54
 80070f0:	fb03 f304 	mul.w	r3, r3, r4
 80070f4:	440b      	add	r3, r1
 80070f6:	3328      	adds	r3, #40	; 0x28
 80070f8:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80070fa:	f7fc fd75 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	bd90      	pop	{r4, r7, pc}
 8007106:	bf00      	nop
 8007108:	40590000 	.word	0x40590000
 800710c:	20000584 	.word	0x20000584

08007110 <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3308      	adds	r3, #8
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	2338      	movs	r3, #56	; 0x38
 800712a:	409a      	lsls	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3307      	adds	r3, #7
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	2330      	movs	r3, #48	; 0x30
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3306      	adds	r3, #6
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	2328      	movs	r3, #40	; 0x28
 8007146:	fa01 f303 	lsl.w	r3, r1, r3
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3305      	adds	r3, #5
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	2320      	movs	r3, #32
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3303      	adds	r3, #3
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3302      	adds	r3, #2
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	4313      	orrs	r3, r2
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	3201      	adds	r2, #1
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	4313      	orrs	r3, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7f9 f992 	bl	80004ac <__aeabi_i2d>
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <set_ki+0xb8>)
 800718e:	f7f9 fb21 	bl	80007d4 <__aeabi_ddiv>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d80e      	bhi.n	80071be <set_ki+0xae>
		tanks[motor_num].K_i = gain;
 80071a0:	7dfc      	ldrb	r4, [r7, #23]
 80071a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071a6:	f7f9 fce3 	bl	8000b70 <__aeabi_d2f>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4907      	ldr	r1, [pc, #28]	; (80071cc <set_ki+0xbc>)
 80071ae:	2354      	movs	r3, #84	; 0x54
 80071b0:	fb03 f304 	mul.w	r3, r3, r4
 80071b4:	440b      	add	r3, r1
 80071b6:	332c      	adds	r3, #44	; 0x2c
 80071b8:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80071ba:	f7fc fd15 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd90      	pop	{r4, r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40590000 	.word	0x40590000
 80071cc:	20000584 	.word	0x20000584

080071d0 <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 80071d0:	b590      	push	{r4, r7, lr}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3308      	adds	r3, #8
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	2338      	movs	r3, #56	; 0x38
 80071ea:	409a      	lsls	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3307      	adds	r3, #7
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	2330      	movs	r3, #48	; 0x30
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3306      	adds	r3, #6
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	2328      	movs	r3, #40	; 0x28
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3305      	adds	r3, #5
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	4619      	mov	r1, r3
 8007214:	2320      	movs	r3, #32
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3303      	adds	r3, #3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	041b      	lsls	r3, r3, #16
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3302      	adds	r3, #2
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	4313      	orrs	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	3201      	adds	r2, #1
 800723e:	7812      	ldrb	r2, [r2, #0]
 8007240:	4313      	orrs	r3, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f7f9 f932 	bl	80004ac <__aeabi_i2d>
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <set_kd+0xb8>)
 800724e:	f7f9 fac1 	bl	80007d4 <__aeabi_ddiv>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d80e      	bhi.n	800727e <set_kd+0xae>
		tanks[motor_num].K_d = gain;
 8007260:	7dfc      	ldrb	r4, [r7, #23]
 8007262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007266:	f7f9 fc83 	bl	8000b70 <__aeabi_d2f>
 800726a:	4602      	mov	r2, r0
 800726c:	4907      	ldr	r1, [pc, #28]	; (800728c <set_kd+0xbc>)
 800726e:	2354      	movs	r3, #84	; 0x54
 8007270:	fb03 f304 	mul.w	r3, r3, r4
 8007274:	440b      	add	r3, r1
 8007276:	3330      	adds	r3, #48	; 0x30
 8007278:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 800727a:	f7fc fcb5 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}
 8007286:	bf00      	nop
 8007288:	40590000 	.word	0x40590000
 800728c:	20000584 	.word	0x20000584

08007290 <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f9 ffe6 	bl	8001274 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 80072ba:	f7fe feb9 	bl	8006030 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 80072d2:	4803      	ldr	r0, [pc, #12]	; (80072e0 <wipe_flash+0x18>)
 80072d4:	f002 f9fb 	bl	80096ce <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20002170 	.word	0x20002170

080072e4 <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <start_logging+0x28>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 80072f4:	2201      	movs	r2, #1
 80072f6:	2101      	movs	r1, #1
 80072f8:	4805      	ldr	r0, [pc, #20]	; (8007310 <start_logging+0x2c>)
 80072fa:	f003 fa13 	bl	800a724 <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 80072fe:	4805      	ldr	r0, [pc, #20]	; (8007314 <start_logging+0x30>)
 8007300:	f002 fa82 	bl	8009808 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	200002f0 	.word	0x200002f0
 8007310:	40020800 	.word	0x40020800
 8007314:	20002170 	.word	0x20002170

08007318 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 8007322:	4b07      	ldr	r3, [pc, #28]	; (8007340 <stop_logging+0x28>)
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 8007328:	4806      	ldr	r0, [pc, #24]	; (8007344 <stop_logging+0x2c>)
 800732a:	f002 f95d 	bl	80095e8 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 800732e:	2200      	movs	r2, #0
 8007330:	2102      	movs	r1, #2
 8007332:	4805      	ldr	r0, [pc, #20]	; (8007348 <stop_logging+0x30>)
 8007334:	f003 f9f6 	bl	800a724 <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	200002f0 	.word	0x200002f0
 8007344:	20002170 	.word	0x20002170
 8007348:	40020800 	.word	0x40020800

0800734c <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	061a      	lsls	r2, r3, #24
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3303      	adds	r3, #3
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3302      	adds	r3, #2
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	4313      	orrs	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	3201      	adds	r2, #1
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	4313      	orrs	r3, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7f9 f893 	bl	80004ac <__aeabi_i2d>
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <set_stepper_pos+0xb4>)
 800738c:	f7f9 fa22 	bl	80007d4 <__aeabi_ddiv>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4610      	mov	r0, r2
 8007396:	4619      	mov	r1, r3
 8007398:	f7f9 fbea 	bl	8000b70 <__aeabi_d2f>
 800739c:	4603      	mov	r3, r0
 800739e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d827      	bhi.n	80073f6 <set_stepper_pos+0xaa>
		manual_stepper_pos_override[motor_num] = 1;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4a16      	ldr	r2, [pc, #88]	; (8007404 <set_stepper_pos+0xb8>)
 80073aa:	2101      	movs	r1, #1
 80073ac:	54d1      	strb	r1, [r2, r3]
		targetPos[motor_num] = position; // position converted form deg to steps
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	4a15      	ldr	r2, [pc, #84]	; (8007408 <set_stepper_pos+0xbc>)
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	601a      	str	r2, [r3, #0]
		curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	4a13      	ldr	r2, [pc, #76]	; (800740c <set_stepper_pos+0xc0>)
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	ed93 7a00 	vldr	s14, [r3]
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	4a0f      	ldr	r2, [pc, #60]	; (8007408 <set_stepper_pos+0xbc>)
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	edd3 7a00 	vldr	s15, [r3]
 80073d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	d501      	bpl.n	80073e0 <set_stepper_pos+0x94>
 80073dc:	2101      	movs	r1, #1
 80073de:	e001      	b.n	80073e4 <set_stepper_pos+0x98>
 80073e0:	f04f 31ff 	mov.w	r1, #4294967295
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <set_stepper_pos+0xc4>)
 80073e8:	54d1      	strb	r1, [r2, r3]
		mtr_set[motor_num] = position; // save new motor position setpoint
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <set_stepper_pos+0xc8>)
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	601a      	str	r2, [r3, #0]
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40590000 	.word	0x40590000
 8007404:	2000039c 	.word	0x2000039c
 8007408:	200003a0 	.word	0x200003a0
 800740c:	200003a8 	.word	0x200003a8
 8007410:	200003b0 	.word	0x200003b0
 8007414:	2000038c 	.word	0x2000038c

08007418 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d80d      	bhi.n	800744a <set_stepper_zero+0x32>
	    mtr_pos[motor_num] = 0;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	4a09      	ldr	r2, [pc, #36]	; (8007458 <set_stepper_zero+0x40>)
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
	    curPos[motor_num] = 0;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	4a07      	ldr	r2, [pc, #28]	; (800745c <set_stepper_zero+0x44>)
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
		//L6470_zero_motor(&(tanks[motor_num].motor));
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20000368 	.word	0x20000368
 800745c:	200003a8 	.word	0x200003a8

08007460 <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	061a      	lsls	r2, r3, #24
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3303      	adds	r3, #3
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3302      	adds	r3, #2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	4313      	orrs	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	3201      	adds	r2, #1
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	4313      	orrs	r3, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7f9 f809 	bl	80004ac <__aeabi_i2d>
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <set_control_target_pressure+0x78>)
 80074a0:	f7f9 f998 	bl	80007d4 <__aeabi_ddiv>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	f7f9 fb60 	bl	8000b70 <__aeabi_d2f>
 80074b0:	4603      	mov	r3, r0
 80074b2:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d80a      	bhi.n	80074d0 <set_control_target_pressure+0x70>
		tanks[tank_num].target_pres = target_pressure;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	4a07      	ldr	r2, [pc, #28]	; (80074dc <set_control_target_pressure+0x7c>)
 80074be:	2154      	movs	r1, #84	; 0x54
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	4413      	add	r3, r2
 80074c6:	3310      	adds	r3, #16
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80074cc:	f7fc fb8c 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	408f4000 	.word	0x408f4000
 80074dc:	20000584 	.word	0x20000584

080074e0 <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	e016      	b.n	800751e <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <ambientize_pressure_transducers+0x50>)
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	ed93 7a00 	vldr	s14, [r3]
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <ambientize_pressure_transducers+0x54>)
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	edd3 7a00 	vldr	s15, [r3]
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <ambientize_pressure_transducers+0x54>)
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	3301      	adds	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b05      	cmp	r3, #5
 8007522:	d9e5      	bls.n	80074f0 <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 8007524:	f7fc fb60 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200002f4 	.word	0x200002f4
 8007534:	2000025c 	.word	0x2000025c

08007538 <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	061a      	lsls	r2, r3, #24
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3303      	adds	r3, #3
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3302      	adds	r3, #2
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	3201      	adds	r2, #1
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	4313      	orrs	r3, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7f8 ff9d 	bl	80004ac <__aeabi_i2d>
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	4b15      	ldr	r3, [pc, #84]	; (80075cc <set_low_toggle_percent+0x94>)
 8007578:	f7f9 f92c 	bl	80007d4 <__aeabi_ddiv>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4610      	mov	r0, r2
 8007582:	4619      	mov	r1, r3
 8007584:	f7f9 faf4 	bl	8000b70 <__aeabi_d2f>
 8007588:	4603      	mov	r3, r0
 800758a:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d817      	bhi.n	80075c2 <set_low_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <set_low_toggle_percent+0x98>)
 8007596:	2154      	movs	r1, #84	; 0x54
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	3310      	adds	r3, #16
 80075a0:	ed93 7a00 	vldr	s14, [r3]
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
				* lower_threshold_pct;
 80075a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 80075ae:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <set_low_toggle_percent+0x98>)
 80075b0:	2154      	movs	r1, #84	; 0x54
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	331c      	adds	r3, #28
 80075ba:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 80075be:	f7fc fb13 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	408f4000 	.word	0x408f4000
 80075d0:	20000584 	.word	0x20000584

080075d4 <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	061a      	lsls	r2, r3, #24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3303      	adds	r3, #3
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3302      	adds	r3, #2
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	4313      	orrs	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	3201      	adds	r2, #1
 8007604:	7812      	ldrb	r2, [r2, #0]
 8007606:	4313      	orrs	r3, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f7f8 ff4f 	bl	80004ac <__aeabi_i2d>
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <set_high_toggle_percent+0x94>)
 8007614:	f7f9 f8de 	bl	80007d4 <__aeabi_ddiv>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4610      	mov	r0, r2
 800761e:	4619      	mov	r1, r3
 8007620:	f7f9 faa6 	bl	8000b70 <__aeabi_d2f>
 8007624:	4603      	mov	r3, r0
 8007626:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d817      	bhi.n	800765e <set_high_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4a0e      	ldr	r2, [pc, #56]	; (800766c <set_high_toggle_percent+0x98>)
 8007632:	2154      	movs	r1, #84	; 0x54
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	4413      	add	r3, r2
 800763a:	3310      	adds	r3, #16
 800763c:	ed93 7a00 	vldr	s14, [r3]
 8007640:	7bfb      	ldrb	r3, [r7, #15]
				* upper_threshold_pct;
 8007642:	edd7 7a02 	vldr	s15, [r7, #8]
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 800764a:	4a08      	ldr	r2, [pc, #32]	; (800766c <set_high_toggle_percent+0x98>)
 800764c:	2154      	movs	r1, #84	; 0x54
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	3320      	adds	r3, #32
 8007656:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 800765a:	f7fc fac5 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	408f4000 	.word	0x408f4000
 800766c:	20000584 	.word	0x20000584

08007670 <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	telem_disabled = state;
 8007680:	4a04      	ldr	r2, [pc, #16]	; (8007694 <set_telem+0x24>)
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	7013      	strb	r3, [r2, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000582 	.word	0x20000582

08007698 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d809      	bhi.n	80076c8 <set_presstank_status+0x30>
		tanks[tank_num].tank_enable = state;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <set_presstank_status+0x38>)
 80076b8:	2154      	movs	r1, #84	; 0x54
 80076ba:	fb01 f303 	mul.w	r3, r1, r3
 80076be:	4413      	add	r3, r2
 80076c0:	7bba      	ldrb	r2, [r7, #14]
 80076c2:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 80076c4:	f7fc fa90 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000584 	.word	0x20000584

080076d4 <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pot_num < NUM_POTS) {
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d815      	bhi.n	8007716 <ambientize_pot+0x42>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[pot_num] = -epot[pot_num]+pot_ambients[pot_num];
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4a0c      	ldr	r2, [pc, #48]	; (8007720 <ambientize_pot+0x4c>)
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	ed93 7a00 	vldr	s14, [r3]
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <ambientize_pot+0x50>)
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	edd3 7a00 	vldr	s15, [r3]
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007708:	4a05      	ldr	r2, [pc, #20]	; (8007720 <ambientize_pot+0x4c>)
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8007712:	f7fc fa69 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000274 	.word	0x20000274
 8007724:	20000394 	.word	0x20000394

08007728 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d827      	bhi.n	8007794 <led_write+0x6c>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <led_write+0x24>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	0800775d 	.word	0x0800775d
 8007750:	0800776b 	.word	0x0800776b
 8007754:	08007779 	.word	0x08007779
 8007758:	08007787 	.word	0x08007787
	case 0:
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state);
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	461a      	mov	r2, r3
 8007760:	2101      	movs	r1, #1
 8007762:	480f      	ldr	r0, [pc, #60]	; (80077a0 <led_write+0x78>)
 8007764:	f002 ffde 	bl	800a724 <HAL_GPIO_WritePin>
		break;
 8007768:	e015      	b.n	8007796 <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	461a      	mov	r2, r3
 800776e:	2102      	movs	r1, #2
 8007770:	480b      	ldr	r0, [pc, #44]	; (80077a0 <led_write+0x78>)
 8007772:	f002 ffd7 	bl	800a724 <HAL_GPIO_WritePin>
		break;
 8007776:	e00e      	b.n	8007796 <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	461a      	mov	r2, r3
 800777c:	2104      	movs	r1, #4
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <led_write+0x78>)
 8007780:	f002 ffd0 	bl	800a724 <HAL_GPIO_WritePin>
		break;
 8007784:	e007      	b.n	8007796 <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	461a      	mov	r2, r3
 800778a:	2108      	movs	r1, #8
 800778c:	4804      	ldr	r0, [pc, #16]	; (80077a0 <led_write+0x78>)
 800778e:	f002 ffc9 	bl	800a724 <HAL_GPIO_WritePin>
		break;
 8007792:	e000      	b.n	8007796 <led_write+0x6e>
	default:
		break;
 8007794:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40020800 	.word	0x40020800

080077a4 <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3303      	adds	r3, #3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	061a      	lsls	r2, r3, #24
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3302      	adds	r3, #2
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3301      	adds	r3, #1
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	4313      	orrs	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	7812      	ldrb	r2, [r2, #0]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <set_system_clock+0x44>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000904 	.word	0x20000904

080077ec <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
 80077fa:	e009      	b.n	8007810 <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <remove_pressure_ambients+0x38>)
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	3301      	adds	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b05      	cmp	r3, #5
 8007814:	d9f2      	bls.n	80077fc <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 8007816:	f7fc f9e7 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000025c 	.word	0x2000025c

08007828 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_delay_ms = mpv_delay_ms;
 8007838:	4a04      	ldr	r2, [pc, #16]	; (800784c <set_fuel_mpv_on_delay+0x24>)
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	7213      	strb	r3, [r2, #8]
	save_nonvolatile_variables();
 800783e:	f7fc f9d3 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000062c 	.word	0x2000062c

08007850 <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3303      	adds	r3, #3
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	061a      	lsls	r2, r3, #24
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3302      	adds	r3, #2
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	4313      	orrs	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	7812      	ldrb	r2, [r2, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_test_duration_ms = engine_test_duration_ms;
 800787e:	4a04      	ldr	r2, [pc, #16]	; (8007890 <set_engine_test_duration+0x40>)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6153      	str	r3, [r2, #20]
	save_nonvolatile_variables();
 8007884:	f7fc f9b0 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	2000062c 	.word	0x2000062c

08007894 <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3301      	adds	r3, #1
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	b21a      	sxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	b21b      	sxth	r3, r3
 80078b2:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 80078b4:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <set_pid_start_delay+0x34>)
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	8193      	strh	r3, [r2, #12]
	save_nonvolatile_variables();
 80078ba:	f7fc f995 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2000062c 	.word	0x2000062c

080078cc <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3301      	adds	r3, #1
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	b21a      	sxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b21b      	sxth	r3, r3
 80078e6:	4313      	orrs	r3, r2
 80078e8:	b21b      	sxth	r3, r3
 80078ea:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 80078ec:	4a04      	ldr	r2, [pc, #16]	; (8007900 <set_ignitor_on_delay+0x34>)
 80078ee:	89fb      	ldrh	r3, [r7, #14]
 80078f0:	8093      	strh	r3, [r2, #4]
	save_nonvolatile_variables();
 80078f2:	f7fc f979 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	2000062c 	.word	0x2000062c

08007904 <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3301      	adds	r3, #1
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	b21a      	sxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b21b      	sxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b21b      	sxth	r3, r3
 8007922:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 8007924:	4a04      	ldr	r2, [pc, #16]	; (8007938 <set_ignitor_high_duration+0x34>)
 8007926:	89fb      	ldrh	r3, [r7, #14]
 8007928:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 800792a:	f7fc f95d 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	2000062c 	.word	0x2000062c

0800793c <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3301      	adds	r3, #1
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	b21a      	sxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b21b      	sxth	r3, r3
 8007956:	4313      	orrs	r3, r2
 8007958:	b21b      	sxth	r3, r3
 800795a:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <set_film_cooling_on_delay+0x34>)
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	8153      	strh	r3, [r2, #10]
	save_nonvolatile_variables();
 8007962:	f7fc f941 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	2000062c 	.word	0x2000062c
 8007974:	00000000 	.word	0x00000000

08007978 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3307      	adds	r3, #7
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	2338      	movs	r3, #56	; 0x38
 800798c:	409a      	lsls	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3306      	adds	r3, #6
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	2330      	movs	r3, #48	; 0x30
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3305      	adds	r3, #5
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4619      	mov	r1, r3
 80079a6:	2328      	movs	r3, #40	; 0x28
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3304      	adds	r3, #4
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	4619      	mov	r1, r3
 80079b6:	2320      	movs	r3, #32
 80079b8:	fa01 f303 	lsl.w	r3, r1, r3
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3303      	adds	r3, #3
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	061b      	lsls	r3, r3, #24
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3302      	adds	r3, #2
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3301      	adds	r3, #1
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	4313      	orrs	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f8 fd62 	bl	80004ac <__aeabi_i2d>
 80079e8:	a30c      	add	r3, pc, #48	; (adr r3, 8007a1c <set_init_motor_deg_factor+0xa4>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fef1 	bl	80007d4 <__aeabi_ddiv>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 80079fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079fe:	f7f9 f8b7 	bl	8000b70 <__aeabi_d2f>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4a04      	ldr	r2, [pc, #16]	; (8007a18 <set_init_motor_deg_factor+0xa0>)
 8007a06:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 8007a08:	f7fc f8ee 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	f3af 8000 	nop.w
 8007a18:	200002e0 	.word	0x200002e0
 8007a1c:	00000000 	.word	0x00000000
 8007a20:	40c38800 	.word	0x40c38800

08007a24 <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 8007a2e:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <clear_status_flags+0x1c>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200002d0 	.word	0x200002d0

08007a44 <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <set_pt_slope_offset>:

void set_pt_slope_offset(uint8_t* data, uint8_t* status){
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	75fb      	strb	r3, [r7, #23]
	float mV_per_psi = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10000.0;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	061a      	lsls	r2, r3, #24
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3303      	adds	r3, #3
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3302      	adds	r3, #2
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	3201      	adds	r2, #1
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7f8 fcf5 	bl	80004ac <__aeabi_i2d>
 8007ac2:	a321      	add	r3, pc, #132	; (adr r3, 8007b48 <set_pt_slope_offset+0xc0>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fe84 	bl	80007d4 <__aeabi_ddiv>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f7f9 f84c 	bl	8000b70 <__aeabi_d2f>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	613b      	str	r3, [r7, #16]
	float mV_offset = (data[8]<<24|data[7]<<16|data[6]<<8|data[5])/1.0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	061a      	lsls	r2, r3, #24
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3307      	adds	r3, #7
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3306      	adds	r3, #6
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	4313      	orrs	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	3205      	adds	r2, #5
 8007afc:	7812      	ldrb	r2, [r2, #0]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f8 fcd3 	bl	80004ac <__aeabi_i2d>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7f9 f82f 	bl	8000b70 <__aeabi_d2f>
 8007b12:	4603      	mov	r3, r0
 8007b14:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d80d      	bhi.n	8007b38 <set_pt_slope_offset+0xb0>
		pt_cal_slope[pt_num] = mV_per_psi;
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <set_pt_slope_offset+0xb8>)
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	601a      	str	r2, [r3, #0]
		pt_cal_offset[pt_num] = mV_offset;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	4a06      	ldr	r2, [pc, #24]	; (8007b44 <set_pt_slope_offset+0xbc>)
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007b34:	f7fc f858 	bl	8003be8 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000027c 	.word	0x2000027c
 8007b44:	20000294 	.word	0x20000294
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	40c38800 	.word	0x40c38800

08007b50 <set_automatic_abort_enable>:

void set_automatic_abort_enable(uint8_t* data, uint8_t* status){
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]

	uint8_t abort_enable_status = (data[0])/1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (abort_enable_status) {
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <set_automatic_abort_enable+0x20>
		autosequence.enable_auto_aborts = 1;
 8007b66:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <set_automatic_abort_enable+0x34>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007b6e:	e003      	b.n	8007b78 <set_automatic_abort_enable+0x28>
	}
	else {
		autosequence.enable_auto_aborts = 0;
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <set_automatic_abort_enable+0x34>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	save_nonvolatile_variables();
 8007b78:	f7fc f836 	bl	8003be8 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000062c 	.word	0x2000062c

08007b88 <reset_micro>:

void reset_micro(uint8_t* data, uint8_t* status){
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	HAL_NVIC_SystemReset();
 8007b92:	f002 f808 	bl	8009ba6 <HAL_NVIC_SystemReset>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <set_valve_channel>:
		en_vlv12_Pin,
		en_vlv13_Pin
};
*/

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
    valve_states |= vlv_value;  // Set the new valve state
    */

	// Press board
	setValve(vlv_num, vlv_state);
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fa fadc 	bl	800216c <setValve>
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007bc0:	480d      	ldr	r0, [pc, #52]	; (8007bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007bc2:	490e      	ldr	r1, [pc, #56]	; (8007bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bc8:	e002      	b.n	8007bd0 <LoopCopyDataInit>

08007bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bce:	3304      	adds	r3, #4

08007bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bd4:	d3f9      	bcc.n	8007bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bd6:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007bd8:	4c0b      	ldr	r4, [pc, #44]	; (8007c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007bdc:	e001      	b.n	8007be2 <LoopFillZerobss>

08007bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007be0:	3204      	adds	r2, #4

08007be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007be4:	d3fb      	bcc.n	8007bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007be6:	f7fe fdcb 	bl	8006780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bea:	f006 fb9d 	bl	800e328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bee:	f7fa ff07 	bl	8002a00 <main>
  bx  lr    
 8007bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007bfc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8007c00:	0800fa60 	.word	0x0800fa60
  ldr r2, =_sbss
 8007c04:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8007c08:	2000238c 	.word	0x2000238c

08007c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c0c:	e7fe      	b.n	8007c0c <ADC_IRQHandler>

08007c0e <init_adc>:
 */
static inline void package_cmd(uint16_t cmd, uint8_t *tx);

/*-------------------------Public Interface Functions-------------------------*/

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
     *      7. Select the right SWCNV bit
     *
     *
     */
    // Configure settings for all ADCs
    uint8_t tx[2] = {0, 0};
 8007c18:	2300      	movs	r3, #0
 8007c1a:	813b      	strh	r3, [r7, #8]

    // 	note: these types are taken from the GPIO_TypeDef line 486
    //          in file stm32f446x.h

    // Generate adc config data
    uint16_t ADC_CONFIG_REG	   = MAX11131_CONFIG|SET_MAX11131_AVGON;
 8007c1c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8007c20:	81fb      	strh	r3, [r7, #14]
    uint16_t ADC_MODE_CNTL_REG = MAX11131_MODE_CNTL|(CUSTOM_INT<<11);
 8007c22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c26:	81bb      	strh	r3, [r7, #12]

    configure_read_adc_all(pinfo);
 8007c28:	6838      	ldr	r0, [r7, #0]
 8007c2a:	f000 f91e 	bl	8007e6a <configure_read_adc_all>
    set_read_adc_range(SPI_BUS, pinfo);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8a7 	bl	8007d84 <set_read_adc_range>

    package_cmd(ADC_CONFIG_REG, tx);
 8007c36:	f107 0208 	add.w	r2, r7, #8
 8007c3a:	89fb      	ldrh	r3, [r7, #14]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f944 	bl	8007ecc <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007c44:	b672      	cpsid	i
}
 8007c46:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6838      	ldr	r0, [r7, #0]
 8007c4c:	f000 f955 	bl	8007efa <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	2301      	movs	r3, #1
 8007c56:	2202      	movs	r2, #2
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f003 fbda 	bl	800b412 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007c5e:	2101      	movs	r1, #1
 8007c60:	6838      	ldr	r0, [r7, #0]
 8007c62:	f000 f94a 	bl	8007efa <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007c66:	b662      	cpsie	i
}
 8007c68:	bf00      	nop
    __enable_irq();

    package_cmd(ADC_MODE_CNTL_REG, tx);
 8007c6a:	f107 0208 	add.w	r2, r7, #8
 8007c6e:	89bb      	ldrh	r3, [r7, #12]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f92a 	bl	8007ecc <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007c78:	b672      	cpsid	i
}
 8007c7a:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6838      	ldr	r0, [r7, #0]
 8007c80:	f000 f93b 	bl	8007efa <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	2301      	movs	r3, #1
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f003 fbc0 	bl	800b412 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007c92:	2101      	movs	r1, #1
 8007c94:	6838      	ldr	r0, [r7, #0]
 8007c96:	f000 f930 	bl	8007efa <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007c9a:	b662      	cpsie	i
}
 8007c9c:	bf00      	nop
    __enable_irq();
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo,
                                                uint16_t *adc_out) {
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b088      	sub	sp, #32
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
            not complete within the maximum acquistion time, we terminate
            early to avoid an infinite loop
    */
    /* ADC startup and FIFO register intialization */

    set_adc(pinfo, GPIO_PIN_SET);
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	68b8      	ldr	r0, [r7, #8]
 8007cb6:	f000 f920 	bl	8007efa <set_adc>
    cycle_cnvst(pinfo);
 8007cba:	68b8      	ldr	r0, [r7, #8]
 8007cbc:	f000 f92f 	bl	8007f1e <cycle_cnvst>
    
    uint16_t elapsed_cycles = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007cc4:	e005      	b.n	8007cd2 <read_adc+0x2c>
                            pinfo->MAX11131_EOC_ADDR)) {
        if (elapsed_cycles > MAX11131_EOC_WAIT_TIME) {
 8007cc6:	8bfb      	ldrh	r3, [r7, #30]
 8007cc8:	2b14      	cmp	r3, #20
 8007cca:	d80e      	bhi.n	8007cea <read_adc+0x44>
            break;
        }
        ++elapsed_cycles;
 8007ccc:	8bfb      	ldrh	r3, [r7, #30]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	89db      	ldrh	r3, [r3, #14]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f002 fd09 	bl	800a6f4 <HAL_GPIO_ReadPin>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ee      	bne.n	8007cc6 <read_adc+0x20>
 8007ce8:	e000      	b.n	8007cec <read_adc+0x46>
            break;
 8007cea:	bf00      	nop

    /* Serial communications with ADC */

    // The number of bytes in the FIFO is simply the
    // number of channels * 2 (bytes for each channel)
    uint8_t rx[2] = {0};
 8007cec:	2300      	movs	r3, #0
 8007cee:	82bb      	strh	r3, [r7, #20]
    uint8_t tx[2] = {0};
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	823b      	strh	r3, [r7, #16]
    uint16_t adc_counts = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	837b      	strh	r3, [r7, #26]
    uint16_t channelId  = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	777b      	strb	r3, [r7, #29]
 8007d00:	e036      	b.n	8007d70 <read_adc+0xca>
        rx[0] = rx[1] = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	757b      	strb	r3, [r7, #21]
 8007d06:	7d7b      	ldrb	r3, [r7, #21]
 8007d08:	753b      	strb	r3, [r7, #20]
        tx[0] = tx[1] = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	747b      	strb	r3, [r7, #17]
 8007d0e:	7c7b      	ldrb	r3, [r7, #17]
 8007d10:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d12:	b672      	cpsid	i
}
 8007d14:	bf00      	nop
        __disable_irq();
        set_adc(pinfo, GPIO_PIN_RESET);
 8007d16:	2100      	movs	r1, #0
 8007d18:	68b8      	ldr	r0, [r7, #8]
 8007d1a:	f000 f8ee 	bl	8007efa <set_adc>
        write_adc_reg(SPI_BUS, tx, rx);
 8007d1e:	f107 0214 	add.w	r2, r7, #20
 8007d22:	f107 0310 	add.w	r3, r7, #16
 8007d26:	4619      	mov	r1, r3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f8bd 	bl	8007ea8 <write_adc_reg>
        set_adc(pinfo, GPIO_PIN_SET);
 8007d2e:	2101      	movs	r1, #1
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f000 f8e2 	bl	8007efa <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d36:	b662      	cpsie	i
}
 8007d38:	bf00      	nop
        __enable_irq();

        adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 8007d3a:	7d3b      	ldrb	r3, [r7, #20]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	b21a      	sxth	r2, r3
 8007d40:	7d7b      	ldrb	r3, [r7, #21]
 8007d42:	b21b      	sxth	r3, r3
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b21b      	sxth	r3, r3
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d4e:	837b      	strh	r3, [r7, #26]
        channelId = (rx[0] >> 4) & 0x0F;
 8007d50:	7d3b      	ldrb	r3, [r7, #20]
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	833b      	strh	r3, [r7, #24]
        adc_out[channelId] = adc_counts;
 8007d5e:	8b3b      	ldrh	r3, [r7, #24]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	8b7a      	ldrh	r2, [r7, #26]
 8007d68:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007d6a:	7f7b      	ldrb	r3, [r7, #29]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	777b      	strb	r3, [r7, #29]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	7c9b      	ldrb	r3, [r3, #18]
 8007d74:	7f7a      	ldrb	r2, [r7, #29]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3c3      	bcc.n	8007d02 <read_adc+0x5c>
    }

}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
     5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
     6. Set SWCNV bit to 1 to enable conversions with chip select
     */
    uint8_t tx[2];

    uint16_t SET_SCAN_REGISTER_0 = MAX11131_CUSTOM_SCAN0;
 8007d8e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007d92:	82fb      	strh	r3, [r7, #22]
    uint16_t SET_SCAN_REGISTER_1 = MAX11131_CUSTOM_SCAN1;
 8007d94:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8007d98:	82bb      	strh	r3, [r7, #20]
    uint8_t num_channels		= pinfo->NUM_CHANNELS;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	7c9b      	ldrb	r3, [r3, #18]
 8007d9e:	74bb      	strb	r3, [r7, #18]

    for (uint8_t i = 0; i < num_channels; ++i) {
 8007da0:	2300      	movs	r3, #0
 8007da2:	74fb      	strb	r3, [r7, #19]
 8007da4:	e025      	b.n	8007df2 <set_read_adc_range+0x6e>
        uint8_t ch = pinfo->MAX11131_CHANNELS[i];
 8007da6:	7cfb      	ldrb	r3, [r7, #19]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	4413      	add	r3, r2
 8007dac:	7cdb      	ldrb	r3, [r3, #19]
 8007dae:	747b      	strb	r3, [r7, #17]
        if (ch > 7) {
 8007db0:	7c7b      	ldrb	r3, [r7, #17]
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	d90d      	bls.n	8007dd2 <set_read_adc_range+0x4e>
            ch -= MAX11131_CUSTOM_SCAN0_SUB;
 8007db6:	7c7b      	ldrb	r3, [r7, #17]
 8007db8:	3b05      	subs	r3, #5
 8007dba:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 8007dbc:	7c7b      	ldrb	r3, [r7, #17]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	b21b      	sxth	r3, r3
 8007dce:	82fb      	strh	r3, [r7, #22]
 8007dd0:	e00c      	b.n	8007dec <set_read_adc_range+0x68>
        } else {
            ch += MAX11131_CUSTOM_SCAN1_ADD;
 8007dd2:	7c7b      	ldrb	r3, [r7, #17]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 8007dd8:	7c7b      	ldrb	r3, [r7, #17]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	b21a      	sxth	r2, r3
 8007de2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	b21b      	sxth	r3, r3
 8007dea:	82bb      	strh	r3, [r7, #20]
    for (uint8_t i = 0; i < num_channels; ++i) {
 8007dec:	7cfb      	ldrb	r3, [r7, #19]
 8007dee:	3301      	adds	r3, #1
 8007df0:	74fb      	strb	r3, [r7, #19]
 8007df2:	7cfa      	ldrb	r2, [r7, #19]
 8007df4:	7cbb      	ldrb	r3, [r7, #18]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d3d5      	bcc.n	8007da6 <set_read_adc_range+0x22>
    }

    /* Set ADC to custom scan channel range */

    /* Transmit custom channels to send data from */
    package_cmd(SET_SCAN_REGISTER_0, tx);
 8007dfa:	f107 020c 	add.w	r2, r7, #12
 8007dfe:	8afb      	ldrh	r3, [r7, #22]
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f862 	bl	8007ecc <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e08:	b672      	cpsid	i
}
 8007e0a:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	f000 f873 	bl	8007efa <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007e14:	f107 010c 	add.w	r1, r7, #12
 8007e18:	2301      	movs	r3, #1
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f003 faf8 	bl	800b412 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007e22:	2101      	movs	r1, #1
 8007e24:	6838      	ldr	r0, [r7, #0]
 8007e26:	f000 f868 	bl	8007efa <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e2a:	b662      	cpsie	i
}
 8007e2c:	bf00      	nop
    __enable_irq();

    package_cmd(SET_SCAN_REGISTER_1, tx);
 8007e2e:	f107 020c 	add.w	r2, r7, #12
 8007e32:	8abb      	ldrh	r3, [r7, #20]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f848 	bl	8007ecc <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e3c:	b672      	cpsid	i
}
 8007e3e:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007e40:	2100      	movs	r1, #0
 8007e42:	6838      	ldr	r0, [r7, #0]
 8007e44:	f000 f859 	bl	8007efa <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007e48:	f107 010c 	add.w	r1, r7, #12
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	2202      	movs	r2, #2
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f003 fade 	bl	800b412 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007e56:	2101      	movs	r1, #1
 8007e58:	6838      	ldr	r0, [r7, #0]
 8007e5a:	f000 f84e 	bl	8007efa <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e5e:	b662      	cpsie	i
}
 8007e60:	bf00      	nop
    __enable_irq();
}
 8007e62:	bf00      	nop
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <configure_read_adc_all>:

void configure_read_adc_all(GPIO_MAX11131_Pinfo *pinfo) {
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
    // Convenience function for reading all channels on adc
    pinfo->NUM_CHANNELS = MAX11131_MAX_CHANNELS;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	220f      	movs	r2, #15
 8007e76:	749a      	strb	r2, [r3, #18]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
 8007e7c:	e007      	b.n	8007e8e <configure_read_adc_all+0x24>
        pinfo->MAX11131_CHANNELS[i] = i;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	7bfa      	ldrb	r2, [r7, #15]
 8007e86:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b0e      	cmp	r3, #14
 8007e92:	d9f4      	bls.n	8007e7e <configure_read_adc_all+0x14>
    }
    pinfo->MAX11131_CHANNELS[14] = 15;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	220f      	movs	r2, #15
 8007e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <write_adc_reg>:

static inline void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
    if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	2302      	movs	r3, #2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f003 fcf4 	bl	800b8ac <HAL_SPI_TransmitReceive>
    }
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <package_cmd>:


static inline void package_cmd(uint16_t cmd, uint8_t *tx) {
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	80fb      	strh	r3, [r7, #6]
    tx[0] = (cmd >> 8) & 0x00ff;
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	701a      	strb	r2, [r3, #0]
    tx[1] = (cmd & 0x00ff);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <set_adc>:

static inline void set_adc(GPIO_MAX11131_Pinfo *pinfo, GPIO_PinState state) {
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pinfo->MAX11131_CS_PORT, pinfo->MAX11131_CS_ADDR, state);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4619      	mov	r1, r3
 8007f12:	f002 fc07 	bl	800a724 <HAL_GPIO_WritePin>
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <cycle_cnvst>:

void cycle_cnvst(GPIO_MAX11131_Pinfo *pinfo) {
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6898      	ldr	r0, [r3, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8a1b      	ldrh	r3, [r3, #16]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4619      	mov	r1, r3
 8007f32:	f002 fbf7 	bl	800a724 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_RESET
    );
    asm("nop");  // Clock Freq maxes at 180 MHz, at which each noop instruction
 8007f36:	bf00      	nop
    asm("nop");  // takes about 5.5 ns to complete
 8007f38:	bf00      	nop
    HAL_GPIO_WritePin(
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6898      	ldr	r0, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8a1b      	ldrh	r3, [r3, #16]
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	f002 fbed 	bl	800a724 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_SET
    );
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <findClosestTTMV>:
 *  Created on: Jan 4, 2021
 *      Author: arthur
 */
#include "MAX31855.h"

int32_t findClosestTTMV(float target) {
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t right = MAX31855_TTMV_LUT_SZ - 1;
 8007f5e:	f240 2326 	movw	r3, #550	; 0x226
 8007f62:	617b      	str	r3, [r7, #20]
	int32_t left = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
	int32_t mid = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
    // Find the two closest microvolt points
    while (left < right) {
 8007f6c:	e01e      	b.n	8007fac <findClosestTTMV+0x58>
        mid = ((right-left)/2)+left;
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	0fda      	lsrs	r2, r3, #31
 8007f76:	4413      	add	r3, r2
 8007f78:	105b      	asrs	r3, r3, #1
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4413      	add	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
        if (MAX31855_TTMV_LUT[mid] < target) {
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <findClosestTTMV+0x70>)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f92:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9e:	dd03      	ble.n	8007fa8 <findClosestTTMV+0x54>
            left = mid+1;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	e001      	b.n	8007fac <findClosestTTMV+0x58>
        } else {
            right = mid;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	617b      	str	r3, [r7, #20]
    while (left < right) {
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	dbdc      	blt.n	8007f6e <findClosestTTMV+0x1a>
        }
    } // TODO: write bs alg to find correct microvolt conversions
    return left;
 8007fb4:	693b      	ldr	r3, [r7, #16]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	0800f5b0 	.word	0x0800f5b0

08007fc8 <read_tc>:

float read_tc(SPI_HandleTypeDef *SPI_BUS, MAX31855_Pinfo *pinfo) {
 8007fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007fcc:	b096      	sub	sp, #88	; 0x58
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
	uint8_t tx[4] = { 0 };
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
    uint8_t rx[4] = { 0 };
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fdc:	b672      	cpsid	i
}
 8007fde:	bf00      	nop
    // Read thermocouples raw temperature
    __disable_irq();
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	889b      	ldrh	r3, [r3, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4619      	mov	r1, r3
 8007fec:	f002 fb9a 	bl	800a724 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_SPI_Receive(SPI_BUS, rx, 4, 1);
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f003 fb46 	bl	800b68a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	4619      	mov	r1, r3
 800800a:	f002 fb8b 	bl	800a724 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800800e:	b662      	cpsie	i
}
 8008010:	bf00      	nop
            GPIO_PIN_SET);
    __enable_irq();

    int32_t spiData = rx[0] << 24 | rx[1] << 16 | rx[2] << 8 | rx[3];
 8008012:	7a3b      	ldrb	r3, [r7, #8]
 8008014:	061a      	lsls	r2, r3, #24
 8008016:	7a7b      	ldrb	r3, [r7, #9]
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	431a      	orrs	r2, r3
 800801c:	7abb      	ldrb	r3, [r7, #10]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	4313      	orrs	r3, r2
 8008022:	7afa      	ldrb	r2, [r7, #11]
 8008024:	4313      	orrs	r3, r2
 8008026:	64bb      	str	r3, [r7, #72]	; 0x48
    float uncorrectedThermocoupleTemp;
    float refJuncTemp;
    float totalOutputMicroVolts;
    float refJuncMicroVolts;
    float thermocoupleMicroVolts;
    float correctedThermocoupleTemp = 0.0f;
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t ocFaultFlag = rx[3]&0b1;
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    faultFlag = (spiData & 0x00010000) >> 16;
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	141b      	asrs	r3, r3, #16
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
    if ((spiData & 0x80000000) == 0x80000000) {
 8008042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008044:	2b00      	cmp	r3, #0
 8008046:	da0a      	bge.n	800805e <read_tc+0x96>
        thermocoupleData = (spiData ^ 0xFFFFFFFF) >> 18;
 8008048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800804a:	43db      	mvns	r3, r3
 800804c:	0c9b      	lsrs	r3, r3, #18
 800804e:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData++;
 8008050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008052:	3301      	adds	r3, #1
 8008054:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData = thermocoupleData * -1;
 8008056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008058:	425b      	negs	r3, r3
 800805a:	657b      	str	r3, [r7, #84]	; 0x54
 800805c:	e002      	b.n	8008064 <read_tc+0x9c>
    } else {
        thermocoupleData = spiData >> 18;
 800805e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008060:	149b      	asrs	r3, r3, #18
 8008062:	657b      	str	r3, [r7, #84]	; 0x54
    }
    if ((spiData & 0x00008000) == 0x00008000) {
 8008064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <read_tc+0xc0>
        refJuncData = ((spiData ^ 0xFFFFFFFF) >> 4) & 0x00000FFF;
 800806e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008070:	43db      	mvns	r3, r3
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008078:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData++;
 800807a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807c:	3301      	adds	r3, #1
 800807e:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData = refJuncData * -1;
 8008080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008082:	425b      	negs	r3, r3
 8008084:	653b      	str	r3, [r7, #80]	; 0x50
 8008086:	e004      	b.n	8008092 <read_tc+0xca>
    } else {
        refJuncData = (spiData >> 4) & 0x00000FFF;
 8008088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808a:	111b      	asrs	r3, r3, #4
 800808c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008090:	653b      	str	r3, [r7, #80]	; 0x50
    }
    // Calculate out the uncorrected temperatures from the MAX31855 and
    // find the total output voltage in micro volts
    // (using the MAX31855 equation from datasheet)
    uncorrectedThermocoupleTemp = thermocoupleData * 0.25;
 8008092:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008094:	f7f8 fa0a 	bl	80004ac <__aeabi_i2d>
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	4b7e      	ldr	r3, [pc, #504]	; (8008298 <read_tc+0x2d0>)
 800809e:	f7f8 fa6f 	bl	8000580 <__aeabi_dmul>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7f8 fd61 	bl	8000b70 <__aeabi_d2f>
 80080ae:	4603      	mov	r3, r0
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    refJuncTemp = refJuncData * 0.0625;
 80080b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080b4:	f7f8 f9fa 	bl	80004ac <__aeabi_i2d>
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	4b77      	ldr	r3, [pc, #476]	; (800829c <read_tc+0x2d4>)
 80080be:	f7f8 fa5f 	bl	8000580 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4610      	mov	r0, r2
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7f8 fd51 	bl	8000b70 <__aeabi_d2f>
 80080ce:	4603      	mov	r3, r0
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
            * (uncorrectedThermocoupleTemp - refJuncTemp);
 80080d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80080d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80080da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080de:	ee17 0a90 	vmov	r0, s15
 80080e2:	f7f8 f9f5 	bl	80004d0 <__aeabi_f2d>
 80080e6:	a368      	add	r3, pc, #416	; (adr r3, 8008288 <read_tc+0x2c0>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f7f8 fa48 	bl	8000580 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	f7f8 fd3a 	bl	8000b70 <__aeabi_d2f>
 80080fc:	4603      	mov	r3, r0
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
    // given temperature --> y2 = m(x2-x1) + y1 (we must cast back as a signed
    // int since pgm_read returns unsigned)
    int refJuncMicrovoltsHigh;
    int refJuncMicrovoltsLow;
    int refJuncMicrovoltsSlope;
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 8008100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008102:	f7f8 f9e5 	bl	80004d0 <__aeabi_f2d>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	ec43 2b10 	vmov	d0, r2, r3
 800810e:	f006 f947 	bl	800e3a0 <ceil>
 8008112:	ec53 2b10 	vmov	r2, r3, d0
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	f7f8 fce1 	bl	8000ae0 <__aeabi_d2iz>
 800811e:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 8008120:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 8008122:	4a5f      	ldr	r2, [pc, #380]	; (80082a0 <read_tc+0x2d8>)
 8008124:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008128:	633b      	str	r3, [r7, #48]	; 0x30
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 800812a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800812c:	f7f8 f9d0 	bl	80004d0 <__aeabi_f2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	ec43 2b10 	vmov	d0, r2, r3
 8008138:	f006 f9b6 	bl	800e4a8 <floor>
 800813c:	ec53 2b10 	vmov	r2, r3, d0
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	f7f8 fccc 	bl	8000ae0 <__aeabi_d2iz>
 8008148:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 800814a:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 800814c:	4a54      	ldr	r2, [pc, #336]	; (80082a0 <read_tc+0x2d8>)
 800814e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
    refJuncMicrovoltsSlope = (refJuncMicrovoltsHigh - refJuncMicrovoltsLow);
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
    refJuncMicroVolts = refJuncMicrovoltsSlope
            * (refJuncTemp - floor(refJuncTemp)) + refJuncMicrovoltsLow;
 800815c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815e:	f7f8 f9a5 	bl	80004ac <__aeabi_i2d>
 8008162:	4604      	mov	r4, r0
 8008164:	460d      	mov	r5, r1
 8008166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008168:	f7f8 f9b2 	bl	80004d0 <__aeabi_f2d>
 800816c:	4680      	mov	r8, r0
 800816e:	4689      	mov	r9, r1
 8008170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008172:	f7f8 f9ad 	bl	80004d0 <__aeabi_f2d>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	ec43 2b10 	vmov	d0, r2, r3
 800817e:	f006 f993 	bl	800e4a8 <floor>
 8008182:	ec53 2b10 	vmov	r2, r3, d0
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 f841 	bl	8000210 <__aeabi_dsub>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	f7f8 f9f3 	bl	8000580 <__aeabi_dmul>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4614      	mov	r4, r2
 80081a0:	461d      	mov	r5, r3
 80081a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081a4:	f7f8 f982 	bl	80004ac <__aeabi_i2d>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f830 	bl	8000214 <__adddf3>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
    refJuncMicroVolts = refJuncMicrovoltsSlope
 80081b8:	4610      	mov	r0, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	f7f8 fcd8 	bl	8000b70 <__aeabi_d2f>
 80081c0:	4603      	mov	r3, r0
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
    // Calculate the voltage of the desired thermocouple junction itself (thermocouple junction and ref junction polarities are opposing in our application
    // with a type T thermocouple --> V_out = V_tc - V_ref)
    thermocoupleMicroVolts = totalOutputMicroVolts + refJuncMicroVolts;
 80081c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80081c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80081cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d0:	edc7 7a08 	vstr	s15, [r7, #32]
    // Check to make sure this voltage is within our range of -200 to 350C then proceed to lookup table processing, or else return an out or range error
    if (thermocoupleMicroVolts < MAX31855_minVoltage
 80081d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80081d8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80082a4 <read_tc+0x2dc>
 80081dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e4:	d436      	bmi.n	8008254 <read_tc+0x28c>
            || thermocoupleMicroVolts > MAX31855_maxVoltage) {
 80081e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80081ea:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80082a8 <read_tc+0x2e0>
 80081ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	dc2d      	bgt.n	8008254 <read_tc+0x28c>
        int32_t correctedMicrovoltsHigh;
        int32_t correctedMicrovoltsLow;
        int32_t correctedMicrovoltsSlope;
        int32_t closestIdx;
        // Set the starting points
        closestIdx = findClosestTTMV(thermocoupleMicroVolts);
 80081f8:	ed97 0a08 	vldr	s0, [r7, #32]
 80081fc:	f7ff feaa 	bl	8007f54 <findClosestTTMV>
 8008200:	61f8      	str	r0, [r7, #28]
        correctedMicrovoltsHigh = (int32_t) MAX31855_TTMV_LUT[closestIdx];
 8008202:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <read_tc+0x2d8>)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800820a:	61bb      	str	r3, [r7, #24]
        correctedMicrovoltsLow  = (int32_t) MAX31855_TTMV_LUT[closestIdx-1];
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3b01      	subs	r3, #1
 8008210:	4a23      	ldr	r2, [pc, #140]	; (80082a0 <read_tc+0x2d8>)
 8008212:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008216:	617b      	str	r3, [r7, #20]

        // Find the final corrected temperature from microvolts using
        // linear interpolation - x2 = (y2-y1)/m + x1
        correctedMicrovoltsSlope = correctedMicrovoltsHigh
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	613b      	str	r3, [r7, #16]
                - correctedMicrovoltsLow;
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
                - correctedMicrovoltsLow) / correctedMicrovoltsSlope)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800822a:	ed97 7a08 	vldr	s14, [r7, #32]
 800822e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800823c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                + ((closestIdx - 1) - MAX31855_LUT_OFFSET);
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	3bc9      	subs	r3, #201	; 0xc9
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
 800824c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008250:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    }

    return correctedThermocoupleTemp + 273.15; // replace with return value
 8008254:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008256:	f7f8 f93b 	bl	80004d0 <__aeabi_f2d>
 800825a:	a30d      	add	r3, pc, #52	; (adr r3, 8008290 <read_tc+0x2c8>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f7 ffd8 	bl	8000214 <__adddf3>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	f7f8 fc80 	bl	8000b70 <__aeabi_d2f>
 8008270:	4603      	mov	r3, r0
 8008272:	ee07 3a90 	vmov	s15, r3
}
 8008276:	eeb0 0a67 	vmov.f32	s0, s15
 800827a:	3758      	adds	r7, #88	; 0x58
 800827c:	46bd      	mov	sp, r7
 800827e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008282:	bf00      	nop
 8008284:	f3af 8000 	nop.w
 8008288:	3d70a3d7 	.word	0x3d70a3d7
 800828c:	404a170a 	.word	0x404a170a
 8008290:	66666666 	.word	0x66666666
 8008294:	40711266 	.word	0x40711266
 8008298:	3fd00000 	.word	0x3fd00000
 800829c:	3fb00000 	.word	0x3fb00000
 80082a0:	0800f5b0 	.word	0x0800f5b0
 80082a4:	c5af1800 	.word	0xc5af1800
 80082a8:	468b3600 	.word	0x468b3600

080082ac <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <init_board+0x24>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 80082bc:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <init_board+0x28>)
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	7013      	strb	r3, [r2, #0]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20002070 	.word	0x20002070
 80082d4:	20000a93 	.word	0x20000a93

080082d8 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	460b      	mov	r3, r1
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 80082e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	d109      	bne.n	8008304 <init_data+0x2c>
	    // repack CLB_telem_data
		pack_telem_data(CLB_telem_data);
 80082f0:	480b      	ldr	r0, [pc, #44]	; (8008320 <init_data+0x48>)
 80082f2:	f7fc fa93 	bl	800481c <pack_telem_data>
		CLB_buffer = CLB_telem_data;
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <init_data+0x4c>)
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <init_data+0x48>)
 80082fa:	601a      	str	r2, [r3, #0]
		CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <init_data+0x50>)
 80082fe:	22c9      	movs	r2, #201	; 0xc9
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e005      	b.n	8008310 <init_data+0x38>
	} else {				// custom telem
		CLB_buffer = buffer;
 8008304:	4a07      	ldr	r2, [pc, #28]	; (8008324 <init_data+0x4c>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 800830a:	897a      	ldrh	r2, [r7, #10]
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <init_data+0x50>)
 800830e:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 8008310:	4a06      	ldr	r2, [pc, #24]	; (800832c <init_data+0x54>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000c7c 	.word	0x20000c7c
 8008324:	200007ec 	.word	0x200007ec
 8008328:	2000178a 	.word	0x2000178a
 800832c:	200020c8 	.word	0x200020c8

08008330 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b08d      	sub	sp, #52	; 0x34
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 800833c:	2300      	movs	r3, #0
 800833e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 8008342:	2300      	movs	r3, #0
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 8008346:	2300      	movs	r3, #0
 8008348:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 800834a:	4b6c      	ldr	r3, [pc, #432]	; (80084fc <send_data+0x1cc>)
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 8008350:	2300      	movs	r3, #0
 8008352:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 8008354:	23fd      	movs	r3, #253	; 0xfd
 8008356:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 8008366:	4b66      	ldr	r3, [pc, #408]	; (8008500 <send_data+0x1d0>)
 8008368:	681c      	ldr	r4, [r3, #0]
 800836a:	f000 fa3f 	bl	80087ec <compute_checksum>
 800836e:	4603      	mov	r3, r0
 8008370:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 8008372:	4b63      	ldr	r3, [pc, #396]	; (8008500 <send_data+0x1d0>)
 8008374:	681c      	ldr	r4, [r3, #0]
 8008376:	f000 fa43 	bl	8008800 <compute_packet_sz>
 800837a:	4603      	mov	r3, r0
 800837c:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 800837e:	4b60      	ldr	r3, [pc, #384]	; (8008500 <send_data+0x1d0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f107 0208 	add.w	r2, r7, #8
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f9b1 	bl	80086f0 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 800838e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008390:	4a5c      	ldr	r2, [pc, #368]	; (8008504 <send_data+0x1d4>)
 8008392:	1899      	adds	r1, r3, r2
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	220c      	movs	r2, #12
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f9f9 	bl	8008792 <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 80083a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083a2:	330c      	adds	r3, #12
 80083a4:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 80083ac:	e08c      	b.n	80084c8 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 80083ae:	8bfa      	ldrh	r2, [r7, #30]
 80083b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 80083b6:	8bba      	ldrh	r2, [r7, #28]
 80083b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 80083be:	8b7a      	ldrh	r2, [r7, #26]
 80083c0:	8b3b      	ldrh	r3, [r7, #24]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	bf28      	it	cs
 80083c6:	4613      	movcs	r3, r2
 80083c8:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 80083ca:	4b4f      	ldr	r3, [pc, #316]	; (8008508 <send_data+0x1d8>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083d0:	18d0      	adds	r0, r2, r3
 80083d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083d4:	4a4b      	ldr	r2, [pc, #300]	; (8008504 <send_data+0x1d4>)
 80083d6:	4413      	add	r3, r2
 80083d8:	8afa      	ldrh	r2, [r7, #22]
 80083da:	4619      	mov	r1, r3
 80083dc:	f000 f9d9 	bl	8008792 <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 80083e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083e2:	8afb      	ldrh	r3, [r7, #22]
 80083e4:	4413      	add	r3, r2
 80083e6:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 80083e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083ea:	8afb      	ldrh	r3, [r7, #22]
 80083ec:	4413      	add	r3, r2
 80083ee:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d121      	bne.n	800843e <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 80083fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083fc:	461a      	mov	r2, r3
 80083fe:	4943      	ldr	r1, [pc, #268]	; (800850c <send_data+0x1dc>)
 8008400:	4840      	ldr	r0, [pc, #256]	; (8008504 <send_data+0x1d4>)
 8008402:	f000 fa2b 	bl	800885c <stuff_packet>
 8008406:	4603      	mov	r3, r0
 8008408:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 800840a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800840c:	8bfb      	ldrh	r3, [r7, #30]
 800840e:	429a      	cmp	r2, r3
 8008410:	d10d      	bne.n	800842e <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 8008412:	8c3b      	ldrh	r3, [r7, #32]
 8008414:	2bfe      	cmp	r3, #254	; 0xfe
 8008416:	d807      	bhi.n	8008428 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8008418:	8c3b      	ldrh	r3, [r7, #32]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	843a      	strh	r2, [r7, #32]
 800841e:	461a      	mov	r2, r3
 8008420:	4b3a      	ldr	r3, [pc, #232]	; (800850c <send_data+0x1dc>)
 8008422:	2100      	movs	r1, #0
 8008424:	5499      	strb	r1, [r3, r2]
 8008426:	e002      	b.n	800842e <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	8c3a      	ldrh	r2, [r7, #32]
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f900 	bl	800863c <transmit_packet>
 800843c:	e03e      	b.n	80084bc <send_data+0x18c>
		} else if (type == CLB_Flash) {
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d13b      	bne.n	80084bc <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	4413      	add	r3, r2
 800844c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800844e:	4619      	mov	r1, r3
 8008450:	482c      	ldr	r0, [pc, #176]	; (8008504 <send_data+0x1d4>)
 8008452:	f000 fa03 	bl	800885c <stuff_packet>
 8008456:	4603      	mov	r3, r0
 8008458:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 800845a:	8c3b      	ldrh	r3, [r7, #32]
 800845c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845e:	4413      	add	r3, r2
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008468:	b29a      	uxth	r2, r3
 800846a:	8c3b      	ldrh	r3, [r7, #32]
 800846c:	4413      	add	r3, r2
 800846e:	b29b      	uxth	r3, r3
 8008470:	b21a      	sxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 8008476:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008478:	8bfb      	ldrh	r3, [r7, #30]
 800847a:	429a      	cmp	r2, r3
 800847c:	d115      	bne.n	80084aa <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 800847e:	8c3b      	ldrh	r3, [r7, #32]
 8008480:	2bfe      	cmp	r3, #254	; 0xfe
 8008482:	d80f      	bhi.n	80084a4 <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800848e:	b28a      	uxth	r2, r1
 8008490:	3201      	adds	r2, #1
 8008492:	b292      	uxth	r2, r2
 8008494:	b210      	sxth	r0, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	80d0      	strh	r0, [r2, #6]
 800849a:	460a      	mov	r2, r1
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	e002      	b.n	80084aa <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da03      	bge.n	80084bc <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80084ba:	e00b      	b.n	80084d4 <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 80084bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084be:	8bbb      	ldrh	r3, [r7, #28]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d301      	bcc.n	80084c8 <send_data+0x198>
			ping_pos = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <send_data+0x1cc>)
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084ce:	429a      	cmp	r2, r3
 80084d0:	f4ff af6d 	bcc.w	80083ae <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 80084d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 80084dc:	4b0b      	ldr	r3, [pc, #44]	; (800850c <send_data+0x1dc>)
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2101      	movs	r1, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f8a7 	bl	800863c <transmit_packet>
	}

	return status; // TODO: return better error handling
 80084ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3734      	adds	r7, #52	; 0x34
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd90      	pop	{r4, r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000178a 	.word	0x2000178a
 8008500:	200020c8 	.word	0x200020c8
 8008504:	20000adc 	.word	0x20000adc
 8008508:	200007ec 	.word	0x200007ec
 800850c:	20000994 	.word	0x20000994

08008510 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 800851e:	2300      	movs	r3, #0
 8008520:	83fb      	strh	r3, [r7, #30]
 8008522:	e009      	b.n	8008538 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 8008524:	8bfb      	ldrh	r3, [r7, #30]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	441a      	add	r2, r3
 800852a:	8bfb      	ldrh	r3, [r7, #30]
 800852c:	7811      	ldrb	r1, [r2, #0]
 800852e:	4a2d      	ldr	r2, [pc, #180]	; (80085e4 <receive_data+0xd4>)
 8008530:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 8008532:	8bfb      	ldrh	r3, [r7, #30]
 8008534:	3301      	adds	r3, #1
 8008536:	83fb      	strh	r3, [r7, #30]
 8008538:	8bfa      	ldrh	r2, [r7, #30]
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	429a      	cmp	r2, r3
 800853e:	d3f1      	bcc.n	8008524 <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	461a      	mov	r2, r3
 8008544:	4928      	ldr	r1, [pc, #160]	; (80085e8 <receive_data+0xd8>)
 8008546:	4827      	ldr	r0, [pc, #156]	; (80085e4 <receive_data+0xd4>)
 8008548:	f000 f9ee 	bl	8008928 <unstuff_packet>
 800854c:	4603      	mov	r3, r0
 800854e:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 8008550:	4925      	ldr	r1, [pc, #148]	; (80085e8 <receive_data+0xd8>)
 8008552:	4826      	ldr	r0, [pc, #152]	; (80085ec <receive_data+0xdc>)
 8008554:	f000 f886 	bl	8008664 <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 8008558:	4b24      	ldr	r3, [pc, #144]	; (80085ec <receive_data+0xdc>)
 800855a:	88db      	ldrh	r3, [r3, #6]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f939 	bl	80087d4 <verify_checksum>
 8008562:	4603      	mov	r3, r0
 8008564:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 8008566:	7efb      	ldrb	r3, [r7, #27]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 800856c:	2303      	movs	r3, #3
 800856e:	e034      	b.n	80085da <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <receive_data+0xdc>)
 8008576:	789a      	ldrb	r2, [r3, #2]
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <receive_data+0xe0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d129      	bne.n	80085d4 <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <receive_data+0xdc>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b33      	cmp	r3, #51	; 0x33
 8008586:	d827      	bhi.n	80085d8 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 8008588:	4b18      	ldr	r3, [pc, #96]	; (80085ec <receive_data+0xdc>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <receive_data+0xe4>)
 8008590:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008594:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 8008596:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d01b      	beq.n	80085d8 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <receive_data+0xdc>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b21b      	sxth	r3, r3
 80085a6:	8bba      	ldrh	r2, [r7, #28]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f82a 	bl	8008604 <validate_command>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d110      	bne.n	80085d8 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 80085b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80085ba:	4a0f      	ldr	r2, [pc, #60]	; (80085f8 <receive_data+0xe8>)
 80085bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c0:	480e      	ldr	r0, [pc, #56]	; (80085fc <receive_data+0xec>)
 80085c2:	f107 0217 	add.w	r2, r7, #23
 80085c6:	4611      	mov	r1, r2
 80085c8:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <receive_data+0xdc>)
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <receive_data+0xf0>)
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e001      	b.n	80085d8 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 80085d4:	2302      	movs	r3, #2
 80085d6:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000994 	.word	0x20000994
 80085e8:	20000adc 	.word	0x20000adc
 80085ec:	20002070 	.word	0x20002070
 80085f0:	20000a93 	.word	0x20000a93
 80085f4:	20000018 	.word	0x20000018
 80085f8:	200000e8 	.word	0x200000e8
 80085fc:	20000ae8 	.word	0x20000ae8
 8008600:	20000d90 	.word	0x20000d90

08008604 <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	460a      	mov	r2, r1
 800860e:	80fb      	strh	r3, [r7, #6]
 8008610:	4613      	mov	r3, r2
 8008612:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 8008614:	88bb      	ldrh	r3, [r7, #4]
 8008616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800861a:	4907      	ldr	r1, [pc, #28]	; (8008638 <validate_command+0x34>)
 800861c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8008620:	4293      	cmp	r3, r2
 8008622:	d101      	bne.n	8008628 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 8008624:	2300      	movs	r3, #0
 8008626:	e000      	b.n	800862a <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 8008628:	2301      	movs	r3, #1
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000080 	.word	0x20000080

0800863c <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 8008648:	887a      	ldrh	r2, [r7, #2]
 800864a:	f04f 33ff 	mov.w	r3, #4294967295
 800864e:	4904      	ldr	r1, [pc, #16]	; (8008660 <transmit_packet+0x24>)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f004 fd5e 	bl	800d112 <HAL_UART_Transmit>
//	__enable_irq();
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000994 	.word	0x20000994

08008664 <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785a      	ldrb	r2, [r3, #1]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	789a      	ldrb	r2, [r3, #2]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	78da      	ldrb	r2, [r3, #3]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	791a      	ldrb	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	795a      	ldrb	r2, [r3, #5]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	3306      	adds	r3, #6
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	b21a      	sxth	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	3307      	adds	r3, #7
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b21b      	sxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b21b      	sxth	r3, r3
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	061a      	lsls	r2, r3, #24
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	3309      	adds	r3, #9
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	330a      	adds	r3, #10
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 80086d4:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	320b      	adds	r2, #11
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	4313      	orrs	r3, r2
 80086de:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	781a      	ldrb	r2, [r3, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	7852      	ldrb	r2, [r2, #1]
 800870a:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	3302      	adds	r3, #2
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7892      	ldrb	r2, [r2, #2]
 8008714:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	3303      	adds	r3, #3
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	78d2      	ldrb	r2, [r2, #3]
 800871e:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7912      	ldrb	r2, [r2, #4]
 8008728:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	3305      	adds	r3, #5
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	7952      	ldrb	r2, [r2, #5]
 8008732:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	88da      	ldrh	r2, [r3, #6]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3306      	adds	r3, #6
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	88db      	ldrh	r3, [r3, #6]
 8008744:	0a1b      	lsrs	r3, r3, #8
 8008746:	b29a      	uxth	r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	3307      	adds	r3, #7
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	0a1a      	lsrs	r2, r3, #8
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	3309      	adds	r3, #9
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	0c1a      	lsrs	r2, r3, #16
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	330a      	adds	r3, #10
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	0e1a      	lsrs	r2, r3, #24
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	330b      	adds	r3, #11
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 8008792:	b480      	push	{r7}
 8008794:	b087      	sub	sp, #28
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 80087ac:	e007      	b.n	80087be <pack_packet+0x2c>
		*dst++ = *curr++;
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	1c53      	adds	r3, r2, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d1f3      	bne.n	80087ae <pack_packet+0x1c>
	}
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <compute_checksum>:

uint16_t compute_checksum() {
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	0000      	movs	r0, r0
	...

08008800 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <compute_packet_sz+0x58>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	330d      	adds	r3, #13
 800880c:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	4618      	mov	r0, r3
 8008812:	f7f7 fe4b 	bl	80004ac <__aeabi_i2d>
 8008816:	a30e      	add	r3, pc, #56	; (adr r3, 8008850 <compute_packet_sz+0x50>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	f7f7 ffda 	bl	80007d4 <__aeabi_ddiv>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	ec43 2b17 	vmov	d7, r2, r3
 8008828:	eeb0 0a47 	vmov.f32	s0, s14
 800882c:	eef0 0a67 	vmov.f32	s1, s15
 8008830:	f005 fdb6 	bl	800e3a0 <ceil>
 8008834:	ec53 2b10 	vmov	r2, r3, d0
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	f7f8 f978 	bl	8000b30 <__aeabi_d2uiz>
 8008840:	4603      	mov	r3, r0
 8008842:	717b      	strb	r3, [r7, #5]
    return num_packets;
 8008844:	797b      	ldrb	r3, [r7, #5]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	00000000 	.word	0x00000000
 8008854:	406fe000 	.word	0x406fe000
 8008858:	2000178a 	.word	0x2000178a

0800885c <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	; 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 800886e:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <stuff_packet+0xc8>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	795b      	ldrb	r3, [r3, #5]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d038      	beq.n	80088ea <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	60ba      	str	r2, [r7, #8]
 800887e:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2201      	movs	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]
        while (length--)
 8008886:	e02a      	b.n	80088de <stuff_packet+0x82>
        {
            if (*unstuffed) {
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00e      	beq.n	80088ae <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	1c53      	adds	r3, r2, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	1c59      	adds	r1, r3, #1
 800889a:	60b9      	str	r1, [r7, #8]
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e009      	b.n	80088c2 <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	60ba      	str	r2, [r7, #8]
 80088b4:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	2201      	movs	r2, #1
 80088ba:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2bff      	cmp	r3, #255	; 0xff
 80088c8:	d109      	bne.n	80088de <stuff_packet+0x82>
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	60ba      	str	r2, [r7, #8]
 80088d6:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2201      	movs	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
        while (length--)
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	80fa      	strh	r2, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1cf      	bne.n	8008888 <stuff_packet+0x2c>
 80088e8:	e011      	b.n	800890e <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 80088ea:	2300      	movs	r3, #0
 80088ec:	837b      	strh	r3, [r7, #26]
 80088ee:	e00a      	b.n	8008906 <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	1c53      	adds	r3, r2, #1
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	1c59      	adds	r1, r3, #1
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8008900:	8b7b      	ldrh	r3, [r7, #26]
 8008902:	3301      	adds	r3, #1
 8008904:	837b      	strh	r3, [r7, #26]
 8008906:	8b7a      	ldrh	r2, [r7, #26]
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	429a      	cmp	r2, r3
 800890c:	d3f0      	bcc.n	80088f0 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	b29b      	uxth	r3, r3
}
 8008916:	4618      	mov	r0, r3
 8008918:	3724      	adds	r7, #36	; 0x24
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	200020c8 	.word	0x200020c8

08008928 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 8008942:	23ff      	movs	r3, #255	; 0xff
 8008944:	77fb      	strb	r3, [r7, #31]
 8008946:	2300      	movs	r3, #0
 8008948:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 800894a:	e024      	b.n	8008996 <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d025      	beq.n	80089a0 <unstuff_packet+0x78>
		if (copy != 0) {
 8008954:	7fbb      	ldrb	r3, [r7, #30]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	1c53      	adds	r3, r2, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	1c59      	adds	r1, r3, #1
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	e011      	b.n	8008990 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 800896c:	7ffb      	ldrb	r3, [r7, #31]
 800896e:	2bff      	cmp	r3, #255	; 0xff
 8008970:	d004      	beq.n	800897c <unstuff_packet+0x54>
				*unstuffed++ = 0;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	60ba      	str	r2, [r7, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	60fa      	str	r2, [r7, #12]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	77fb      	strb	r3, [r7, #31]
 8008986:	7ffb      	ldrb	r3, [r7, #31]
 8008988:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 800898a:	7ffb      	ldrb	r3, [r7, #31]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 8008990:	7fbb      	ldrb	r3, [r7, #30]
 8008992:	3b01      	subs	r3, #1
 8008994:	77bb      	strb	r3, [r7, #30]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	429a      	cmp	r2, r3
 800899c:	d3d6      	bcc.n	800894c <unstuff_packet+0x24>
 800899e:	e002      	b.n	80089a6 <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 80089a0:	bf00      	nop
 80089a2:	e000      	b.n	80089a6 <unstuff_packet+0x7e>
				break; /* Source length too long */
 80089a4:	bf00      	nop
		}
	}
	return unstuffed - start;
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	b29b      	uxth	r3, r3
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3724      	adds	r7, #36	; 0x24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80089c8:	b672      	cpsid	i
}
 80089ca:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80089d8:	2200      	movs	r2, #0
 80089da:	4619      	mov	r1, r3
 80089dc:	f001 fea2 	bl	800a724 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	23ff      	movs	r3, #255	; 0xff
 80089ea:	68b9      	ldr	r1, [r7, #8]
 80089ec:	f002 fd11 	bl	800b412 <HAL_SPI_Transmit>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a06:	2201      	movs	r2, #1
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f001 fe8b 	bl	800a724 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a0e:	b662      	cpsie	i
}
 8008a10:	bf00      	nop
	__enable_irq();

}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	603b      	str	r3, [r7, #0]
 8008a26:	4613      	mov	r3, r2
 8008a28:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a2a:	b672      	cpsid	i
}
 8008a2c:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f001 fe71 	bl	800a724 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	23ff      	movs	r3, #255	; 0xff
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	f002 fce0 	bl	800b412 <HAL_SPI_Transmit>
 8008a52:	4603      	mov	r3, r0
 8008a54:	461a      	mov	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a62:	8b3a      	ldrh	r2, [r7, #24]
 8008a64:	23ff      	movs	r3, #255	; 0xff
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	f002 fe0f 	bl	800b68a <HAL_SPI_Receive>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a82:	2201      	movs	r2, #1
 8008a84:	4619      	mov	r1, r3
 8008a86:	f001 fe4d 	bl	800a724 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a8a:	b662      	cpsie	i
}
 8008a8c:	bf00      	nop
	__enable_irq();

}
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af02      	add	r7, sp, #8
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8008aa2:	230f      	movs	r3, #15
 8008aa4:	733b      	strb	r3, [r7, #12]
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	f107 010c 	add.w	r1, r7, #12
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	9200      	str	r2, [sp, #0]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff ffae 	bl	8008a1a <spi_transmit_receive>

	return *rx;
 8008abe:	7a3b      	ldrb	r3, [r7, #8]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008ad0:	21c0      	movs	r1, #192	; 0xc0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ffdf 	bl	8008a96 <read_status_register>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	b2db      	uxtb	r3, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008afa:	e002      	b.n	8008b02 <wait_for_operation+0x16>
		++count;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff ffe0 	bl	8008ac8 <flash_is_busy>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d008      	beq.n	8008b20 <wait_for_operation+0x34>
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	4413      	add	r3, r2
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d3ed      	bcc.n	8008afc <wait_for_operation+0x10>
	}
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
 8008b34:	4613      	mov	r3, r2
 8008b36:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8008b38:	231f      	movs	r3, #31
 8008b3a:	733b      	strb	r3, [r7, #12]
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	737b      	strb	r3, [r7, #13]
 8008b40:	78bb      	ldrb	r3, [r7, #2]
 8008b42:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	2203      	movs	r2, #3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ff34 	bl	80089ba <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8008b52:	2132      	movs	r1, #50	; 0x32
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff ffc9 	bl	8008aec <wait_for_operation>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8008b6e:	887b      	ldrh	r3, [r7, #2]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	733b      	strb	r3, [r7, #12]
 8008b78:	887b      	ldrh	r3, [r7, #2]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8008b7e:	2313      	movs	r3, #19
 8008b80:	723b      	strb	r3, [r7, #8]
 8008b82:	2300      	movs	r3, #0
 8008b84:	727b      	strb	r3, [r7, #9]
 8008b86:	7b3b      	ldrb	r3, [r7, #12]
 8008b88:	72bb      	strb	r3, [r7, #10]
 8008b8a:	7b7b      	ldrb	r3, [r7, #13]
 8008b8c:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	2204      	movs	r2, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff ff0f 	bl	80089ba <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8008b9c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ffa3 	bl	8008aec <wait_for_operation>
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008bb6:	21a0      	movs	r1, #160	; 0xa0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff ff6c 	bl	8008a96 <read_status_register>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008bc8:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	21a0      	movs	r1, #160	; 0xa0
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ffa9 	bl	8008b28 <write_status_register>
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008be6:	21a0      	movs	r1, #160	; 0xa0
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff ff54 	bl	8008a96 <read_status_register>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008bf8:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c00:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	461a      	mov	r2, r3
 8008c06:	21a0      	movs	r1, #160	; 0xa0
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff8d 	bl	8008b28 <write_status_register>
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8008c1e:	2306      	movs	r3, #6
 8008c20:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	2201      	movs	r2, #1
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fec5 	bl	80089ba <spi_transmit>
}
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8008c40:	2304      	movs	r3, #4
 8008c42:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008c44:	f107 030c 	add.w	r3, r7, #12
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff feb4 	bl	80089ba <spi_transmit>
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	4611      	mov	r1, r2
 8008c66:	461a      	mov	r2, r3
 8008c68:	460b      	mov	r3, r1
 8008c6a:	80fb      	strh	r3, [r7, #6]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008c70:	88bb      	ldrh	r3, [r7, #4]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	753b      	strb	r3, [r7, #20]
 8008c7a:	88bb      	ldrh	r3, [r7, #4]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8008c80:	2302      	movs	r3, #2
 8008c82:	743b      	strb	r3, [r7, #16]
 8008c84:	7d3b      	ldrb	r3, [r7, #20]
 8008c86:	747b      	strb	r3, [r7, #17]
 8008c88:	7d7b      	ldrb	r3, [r7, #21]
 8008c8a:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8008c8c:	88fb      	ldrh	r3, [r7, #6]
 8008c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c92:	d902      	bls.n	8008c9a <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8008c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c98:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c9a:	b672      	cpsid	i
}
 8008c9c:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008caa:	2200      	movs	r2, #0
 8008cac:	4619      	mov	r1, r3
 8008cae:	f001 fd39 	bl	800a724 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008cb8:	f107 0110 	add.w	r1, r7, #16
 8008cbc:	23ff      	movs	r3, #255	; 0xff
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	f002 fba7 	bl	800b412 <HAL_SPI_Transmit>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	23ff      	movs	r3, #255	; 0xff
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	f002 fb9a 	bl	800b412 <HAL_SPI_Transmit>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	f001 fd14 	bl	800a724 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008cfc:	b662      	cpsie	i
}
 8008cfe:	bf00      	nop
	__enable_irq();
}
 8008d00:	bf00      	nop
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008d14:	887b      	ldrh	r3, [r7, #2]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	733b      	strb	r3, [r7, #12]
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8008d24:	2310      	movs	r3, #16
 8008d26:	723b      	strb	r3, [r7, #8]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	727b      	strb	r3, [r7, #9]
 8008d2c:	7b3b      	ldrb	r3, [r7, #12]
 8008d2e:	72bb      	strb	r3, [r7, #10]
 8008d30:	7b7b      	ldrb	r3, [r7, #13]
 8008d32:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008d34:	f107 0308 	add.w	r3, r7, #8
 8008d38:	2204      	movs	r2, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff fe3c 	bl	80089ba <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8008d42:	4904      	ldr	r1, [pc, #16]	; (8008d54 <program_buffer_to_memory+0x4c>)
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff fed1 	bl	8008aec <wait_for_operation>
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	000aae60 	.word	0x000aae60

08008d58 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fabd 	bl	80092e0 <ping_flash>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00d      	beq.n	8008d88 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008d6c:	21c0      	movs	r1, #192	; 0xc0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fe91 	bl	8008a96 <read_status_register>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8008d86:	e003      	b.n	8008d90 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2208      	movs	r2, #8
 8008d8c:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa9a 	bl	80092e0 <ping_flash>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00d      	beq.n	8008dce <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008db2:	21c0      	movs	r1, #192	; 0xc0
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe6e 	bl	8008a96 <read_status_register>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8008dcc:	e003      	b.n	8008dd6 <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ff10 	bl	8008c16 <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008df6:	887b      	ldrh	r3, [r7, #2]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	733b      	strb	r3, [r7, #12]
 8008e00:	887b      	ldrh	r3, [r7, #2]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8008e06:	23d8      	movs	r3, #216	; 0xd8
 8008e08:	723b      	strb	r3, [r7, #8]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	727b      	strb	r3, [r7, #9]
 8008e0e:	7b3b      	ldrb	r3, [r7, #12]
 8008e10:	72bb      	strb	r3, [r7, #10]
 8008e12:	7b7b      	ldrb	r3, [r7, #13]
 8008e14:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fdcb 	bl	80089ba <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff ff07 	bl	8008c38 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 8008e2a:	4905      	ldr	r1, [pc, #20]	; (8008e40 <erase_block+0x5c>)
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fe5d 	bl	8008aec <wait_for_operation>

	get_erase_failure_status(flash);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ffb3 	bl	8008d9e <get_erase_failure_status>
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	003d0900 	.word	0x003d0900

08008e44 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa47 	bl	80092e0 <ping_flash>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d033      	beq.n	8008ec0 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008e58:	21c0      	movs	r1, #192	; 0xc0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fe1b 	bl	8008a96 <read_status_register>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d107      	bne.n	8008e8a <get_ECC_status+0x46>
 8008e7a:	7b7b      	ldrb	r3, [r7, #13]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d104      	bne.n	8008e8a <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008e88:	e01f      	b.n	8008eca <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d107      	bne.n	8008ea0 <get_ECC_status+0x5c>
 8008e90:	7b7b      	ldrb	r3, [r7, #13]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d004      	beq.n	8008ea0 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008e9e:	e014      	b.n	8008eca <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <get_ECC_status+0x72>
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008eb4:	e009      	b.n	8008eca <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8008ebe:	e004      	b.n	8008eca <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8008ec8:	e7ff      	b.n	8008eca <get_ECC_status+0x86>
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b088      	sub	sp, #32
 8008ed6:	af02      	add	r7, sp, #8
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	4611      	mov	r1, r2
 8008ede:	461a      	mov	r2, r3
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	80fb      	strh	r3, [r7, #6]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008ee8:	88bb      	ldrh	r3, [r7, #4]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	753b      	strb	r3, [r7, #20]
 8008ef2:	88bb      	ldrh	r3, [r7, #4]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8008ef8:	2303      	movs	r3, #3
 8008efa:	743b      	strb	r3, [r7, #16]
 8008efc:	7d3b      	ldrb	r3, [r7, #20]
 8008efe:	747b      	strb	r3, [r7, #17]
 8008f00:	7d7b      	ldrb	r3, [r7, #21]
 8008f02:	74bb      	strb	r3, [r7, #18]
 8008f04:	2300      	movs	r3, #0
 8008f06:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8008f08:	f107 0110 	add.w	r1, r7, #16
 8008f0c:	88fb      	ldrh	r3, [r7, #6]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2204      	movs	r2, #4
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fd80 	bl	8008a1a <spi_transmit_receive>
}
 8008f1a:	bf00      	nop
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	461a      	mov	r2, r3
 8008f30:	460b      	mov	r3, r1
 8008f32:	80fb      	strh	r3, [r7, #6]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8008f38:	88bb      	ldrh	r3, [r7, #4]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff fe10 	bl	8008b62 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8008f42:	8b3b      	ldrh	r3, [r7, #24]
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff ffc2 	bl	8008ed2 <read_flash_buffer>

	get_ECC_status(flash);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff ff78 	bl	8008e44 <get_ECC_status>
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4611      	mov	r1, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	80fb      	strh	r3, [r7, #6]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fe4f 	bl	8008c16 <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 8008f78:	8b3b      	ldrh	r3, [r7, #24]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff fe6b 	bl	8008c5a <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8008f84:	88bb      	ldrh	r3, [r7, #4]
 8008f86:	4619      	mov	r1, r3
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff febd 	bl	8008d08 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fe52 	bl	8008c38 <disable_write>

	get_write_failure_status(flash);
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff fedf 	bl	8008d58 <get_write_failure_status>
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8008faa:	21b0      	movs	r1, #176	; 0xb0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fd72 	bl	8008a96 <read_status_register>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	f043 0310 	orr.w	r3, r3, #16
 8008fbc:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8008fbe:	7bba      	ldrb	r2, [r7, #14]
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d005      	beq.n	8008fd2 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	21b0      	movs	r1, #176	; 0xb0
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fdab 	bl	8008b28 <write_status_register>
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8008fe2:	21b0      	movs	r1, #176	; 0xb0
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff fd56 	bl	8008a96 <read_status_register>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	f043 0308 	orr.w	r3, r3, #8
 8008ff4:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8008ff6:	7bba      	ldrb	r2, [r7, #14]
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d005      	beq.n	800900a <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	461a      	mov	r2, r3
 8009002:	21b0      	movs	r1, #176	; 0xb0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fd8f 	bl	8008b28 <write_status_register>
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8009012:	b580      	push	{r7, lr}
 8009014:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8009018:	af02      	add	r7, sp, #8
 800901a:	1d3b      	adds	r3, r7, #4
 800901c:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 800901e:	f107 0108 	add.w	r1, r7, #8
 8009022:	1d38      	adds	r0, r7, #4
 8009024:	2300      	movs	r3, #0
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2300      	movs	r3, #0
 800902a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800902e:	6800      	ldr	r0, [r0, #0]
 8009030:	f7ff ff77 	bl	8008f22 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 800903a:	2300      	movs	r3, #0
 800903c:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8009040:	e00e      	b.n	8009060 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 8009042:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8009046:	f107 0208 	add.w	r2, r7, #8
 800904a:	5cd3      	ldrb	r3, [r2, r3]
 800904c:	2bff      	cmp	r3, #255	; 0xff
 800904e:	d002      	beq.n	8009056 <find_write_ptr+0x44>
			first_page_empty = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8009056:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800905a:	3301      	adds	r3, #1
 800905c:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 8009060:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8009064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009068:	d3eb      	bcc.n	8009042 <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 800906a:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <find_write_ptr+0x76>
		flash->current_page = 0;
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2200      	movs	r2, #0
 8009078:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 800907c:	1d3b      	adds	r3, r7, #4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2200      	movs	r2, #0
 8009082:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8009086:	e0f0      	b.n	800926a <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8009088:	2300      	movs	r3, #0
 800908a:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 800908e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8009092:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8009096:	e041      	b.n	800911c <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 8009098:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800909c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	4413      	add	r3, r2
 80090ae:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 80090b2:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80090b6:	f107 0108 	add.w	r1, r7, #8
 80090ba:	1d38      	adds	r0, r7, #4
 80090bc:	2200      	movs	r2, #0
 80090be:	9200      	str	r2, [sp, #0]
 80090c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c4:	6800      	ldr	r0, [r0, #0]
 80090c6:	f7ff ff2c 	bl	8008f22 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 80090ca:	2301      	movs	r3, #1
 80090cc:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 80090d6:	e00f      	b.n	80090f8 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 80090d8:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80090dc:	f107 0208 	add.w	r2, r7, #8
 80090e0:	5cd3      	ldrb	r3, [r2, r3]
 80090e2:	2bff      	cmp	r3, #255	; 0xff
 80090e4:	d003      	beq.n	80090ee <find_write_ptr+0xdc>
				cur_page_empty = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 80090ec:	e009      	b.n	8009102 <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 80090ee:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80090f2:	3301      	adds	r3, #1
 80090f4:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 80090f8:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80090fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009100:	d3ea      	bcc.n	80090d8 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8009102:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <find_write_ptr+0x102>
			max = cur_search_page;
 800910a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800910e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8009112:	e003      	b.n	800911c <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8009114:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8009118:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 800911c:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8009120:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b01      	cmp	r3, #1
 8009128:	d8b6      	bhi.n	8009098 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 800912a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800912e:	b29a      	uxth	r2, r3
 8009130:	1d3b      	adds	r3, r7, #4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8009138:	1d3b      	adds	r3, r7, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009140:	f107 0108 	add.w	r1, r7, #8
 8009144:	1d38      	adds	r0, r7, #4
 8009146:	2200      	movs	r2, #0
 8009148:	9200      	str	r2, [sp, #0]
 800914a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	f7ff fee7 	bl	8008f22 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 800915c:	2bff      	cmp	r3, #255	; 0xff
 800915e:	d01e      	beq.n	800919e <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8009160:	1d3b      	adds	r3, r7, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009168:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 800916c:	4293      	cmp	r3, r2
 800916e:	d106      	bne.n	800917e <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 8009170:	1d3b      	adds	r3, r7, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009178:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 800917c:	e075      	b.n	800926a <find_write_ptr+0x258>
			flash->current_page++;
 800917e:	1d3b      	adds	r3, r7, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009186:	3301      	adds	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	1d3b      	adds	r3, r7, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 8009192:	1d3b      	adds	r3, r7, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2200      	movs	r2, #0
 8009198:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 800919c:	e065      	b.n	800926a <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 80091a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80091a8:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80091ac:	e019      	b.n	80091e2 <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 80091ae:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80091b2:	f107 0208 	add.w	r2, r7, #8
 80091b6:	5cd3      	ldrb	r3, [r2, r3]
 80091b8:	2bff      	cmp	r3, #255	; 0xff
 80091ba:	d00b      	beq.n	80091d4 <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 80091bc:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80091c0:	3301      	adds	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	1d3b      	adds	r3, r7, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 80091d2:	e00a      	b.n	80091ea <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 80091d4:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80091e2:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dae1      	bge.n	80091ae <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 80091ea:	1d3b      	adds	r3, r7, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80091f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091f6:	d806      	bhi.n	8009206 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 80091f8:	1d3b      	adds	r3, r7, #4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009200:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009204:	e031      	b.n	800926a <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8009206:	1d3b      	adds	r3, r7, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800920e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009212:	d806      	bhi.n	8009222 <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8009214:	1d3b      	adds	r3, r7, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800921c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009220:	e023      	b.n	800926a <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8009222:	1d3b      	adds	r3, r7, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800922a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800922e:	d806      	bhi.n	800923e <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8009230:	1d3b      	adds	r3, r7, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009238:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800923c:	e015      	b.n	800926a <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 800923e:	1d3b      	adds	r3, r7, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800924a:	d20e      	bcs.n	800926a <find_write_ptr+0x258>
		flash->next_free_column = 0;
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 8009256:	1d3b      	adds	r3, r7, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800925e:	3301      	adds	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 800926a:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	887a      	ldrh	r2, [r7, #2]
 8009294:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f837 	bl	8009334 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7ff fe6b 	bl	8008fa2 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff fe84 	bl	8008fda <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff fe9d 	bl	8009012 <find_write_ptr>
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 80092e8:	239f      	movs	r3, #159	; 0x9f
 80092ea:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 80092ec:	f107 030c 	add.w	r3, r7, #12
 80092f0:	f107 0110 	add.w	r1, r7, #16
 80092f4:	2203      	movs	r2, #3
 80092f6:	9200      	str	r2, [sp, #0]
 80092f8:	2202      	movs	r2, #2
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fb8d 	bl	8008a1a <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8009300:	7b3b      	ldrb	r3, [r7, #12]
 8009302:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8009304:	7b7b      	ldrb	r3, [r7, #13]
 8009306:	b29b      	uxth	r3, r3
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b29a      	uxth	r2, r3
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	b29b      	uxth	r3, r3
 8009310:	4413      	add	r3, r2
 8009312:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2bef      	cmp	r3, #239	; 0xef
 8009318:	d106      	bne.n	8009328 <ping_flash+0x48>
 800931a:	8abb      	ldrh	r3, [r7, #20]
 800931c:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8009320:	4293      	cmp	r3, r2
 8009322:	d101      	bne.n	8009328 <ping_flash+0x48>
		return 1;
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <ping_flash+0x4a>
	else
		return 0;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff fbc3 	bl	8008ac8 <flash_is_busy>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <reset_flash+0x18>
		return 0;
 8009348:	2300      	movs	r3, #0
 800934a:	e00d      	b.n	8009368 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 800934c:	23ff      	movs	r3, #255	; 0xff
 800934e:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	2201      	movs	r2, #1
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fb2e 	bl	80089ba <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 800935e:	4904      	ldr	r1, [pc, #16]	; (8009370 <reset_flash+0x3c>)
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fbc3 	bl	8008aec <wait_for_operation>

	return 1;
 8009366:	2301      	movs	r3, #1
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	0007a120 	.word	0x0007a120

08009374 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8009384:	2300      	movs	r3, #0
 8009386:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 8009388:	e05a      	b.n	8009440 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	b29a      	uxth	r2, r3
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	b29b      	uxth	r3, r3
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8009396:	8a3a      	ldrh	r2, [r7, #16]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800939e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80093a2:	429a      	cmp	r2, r3
 80093a4:	dd05      	ble.n	80093b2 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093ac:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80093b0:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	18d1      	adds	r1, r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093c4:	8a3a      	ldrh	r2, [r7, #16]
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4603      	mov	r3, r0
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff fdc6 	bl	8008f5c <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <write_to_flash_contiguous+0x6c>
			write_failures++;
 80093da:	8a7b      	ldrh	r3, [r7, #18]
 80093dc:	3301      	adds	r3, #1
 80093de:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 80093e0:	8a3b      	ldrh	r3, [r7, #16]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80093ee:	461a      	mov	r2, r3
 80093f0:	8a3b      	ldrh	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093f8:	da09      	bge.n	800940e <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8009400:	8a3b      	ldrh	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800940c:	e018      	b.n	8009440 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009414:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8009418:	4293      	cmp	r3, r2
 800941a:	d105      	bne.n	8009428 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009422:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009426:	e00b      	b.n	8009440 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009436:	3301      	adds	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d3a0      	bcc.n	800938a <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 8009448:	8a7b      	ldrh	r3, [r7, #18]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8009452:	b580      	push	{r7, lr}
 8009454:	b08c      	sub	sp, #48	; 0x30
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f967 	bl	8009732 <get_bytes_remaining>
 8009464:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	429a      	cmp	r2, r3
 800946c:	d901      	bls.n	8009472 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8009472:	2300      	movs	r3, #0
 8009474:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8009476:	2300      	movs	r3, #0
 8009478:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009482:	2b00      	cmp	r3, #0
 8009484:	d035      	beq.n	80094f2 <write_to_flash+0xa0>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800948c:	461a      	mov	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009496:	d32c      	bcc.n	80094f2 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800949e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80094a2:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80094a4:	2300      	movs	r3, #0
 80094a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094a8:	e00e      	b.n	80094c8 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 80094aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	441a      	add	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094b6:	4619      	mov	r1, r3
 80094b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094ba:	440b      	add	r3, r1
 80094bc:	7811      	ldrb	r1, [r2, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80094c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094c4:	3301      	adds	r3, #1
 80094c6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80094ca:	8bfb      	ldrh	r3, [r7, #30]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d3ec      	bcc.n	80094aa <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094d6:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 80094e0:	8bfb      	ldrh	r3, [r7, #30]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 80094e8:	8bfb      	ldrh	r3, [r7, #30]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 80094f0:	e02a      	b.n	8009548 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4413      	add	r3, r2
 80094fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009502:	d221      	bcs.n	8009548 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8009504:	2300      	movs	r3, #0
 8009506:	853b      	strh	r3, [r7, #40]	; 0x28
 8009508:	e00e      	b.n	8009528 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 800950a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	441a      	add	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009516:	4619      	mov	r1, r3
 8009518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800951a:	440b      	add	r3, r1
 800951c:	7811      	ldrb	r1, [r2, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8009522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009524:	3301      	adds	r3, #1
 8009526:	853b      	strh	r3, [r7, #40]	; 0x28
 8009528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	d8ec      	bhi.n	800950a <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	b29b      	uxth	r3, r3
 800953a:	4413      	add	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 8009544:	2300      	movs	r3, #0
 8009546:	e04b      	b.n	80095e0 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955c:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	4413      	add	r3, r2
 8009564:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fb21 	bl	8008bae <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 800956c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00f      	beq.n	8009594 <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800957a:	4619      	mov	r1, r3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7ff fef9 	bl	8009374 <write_to_flash_contiguous>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009588:	4413      	add	r3, r2
 800958a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fee8 	bl	8009374 <write_to_flash_contiguous>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095aa:	4413      	add	r3, r2
 80095ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff fb15 	bl	8008bde <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 80095b4:	2300      	movs	r3, #0
 80095b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80095b8:	e009      	b.n	80095ce <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 80095ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	441a      	add	r2, r3
 80095c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095c2:	7811      	ldrb	r1, [r2, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 80095c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095ca:	3301      	adds	r3, #1
 80095cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80095ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095d0:	8afb      	ldrh	r3, [r7, #22]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d3f1      	bcc.n	80095ba <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8afa      	ldrh	r2, [r7, #22]
 80095da:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 80095de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3730      	adds	r7, #48	; 0x30
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10d      	bne.n	8009616 <finish_flash_write+0x2e>
		return 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e036      	b.n	800966c <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	b291      	uxth	r1, r2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2100      	movs	r1, #0
 8009614:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800961c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009620:	d3ed      	bcc.n	80095fe <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f885 	bl	8009732 <get_bytes_remaining>
 8009628:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009630:	461a      	mov	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	4293      	cmp	r3, r2
 8009636:	d204      	bcs.n	8009642 <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff fab3 	bl	8008bae <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8009648:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 8009650:	461a      	mov	r2, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff fe8e 	bl	8009374 <write_to_flash_contiguous>
 8009658:	4603      	mov	r3, r0
 800965a:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff faba 	bl	8008bde <lock_flash>

	return write_failures;
 800966a:	897b      	ldrh	r3, [r7, #10]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af02      	add	r7, sp, #8
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	2200      	movs	r2, #0
 80096a4:	9200      	str	r2, [sp, #0]
 80096a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fc38 	bl	8008f22 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fbbf 	bl	8008e44 <get_ECC_status>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff fa67 	bl	8008bae <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 80096e0:	2300      	movs	r3, #0
 80096e2:	81bb      	strh	r3, [r7, #12]
 80096e4:	e011      	b.n	800970a <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 80096e6:	89bb      	ldrh	r3, [r7, #12]
 80096e8:	019b      	lsls	r3, r3, #6
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff fb78 	bl	8008de4 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <erase_flash+0x36>
			erase_failures++;
 80096fe:	89fb      	ldrh	r3, [r7, #14]
 8009700:	3301      	adds	r3, #1
 8009702:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8009704:	89bb      	ldrh	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	81bb      	strh	r3, [r7, #12]
 800970a:	89bb      	ldrh	r3, [r7, #12]
 800970c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009710:	4293      	cmp	r3, r2
 8009712:	d9e8      	bls.n	80096e6 <erase_flash+0x18>
	}

	lock_flash(flash);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff fa62 	bl	8008bde <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fc79 	bl	8009012 <find_write_ptr>
	flash->write_buffer_size = 0;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 8009728:	89fb      	ldrh	r3, [r7, #14]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009740:	02db      	lsls	r3, r3, #11
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 8009748:	4413      	add	r3, r2
 800974a:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 800974e:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 8009758:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af02      	add	r7, sp, #8
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	461a      	mov	r2, r3
 8009772:	460b      	mov	r3, r1
 8009774:	72fb      	strb	r3, [r7, #11]
 8009776:	4613      	mov	r3, r2
 8009778:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff fa17 	bl	8008bae <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 8009780:	7afb      	ldrb	r3, [r7, #11]
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b40      	subs	r3, #64	; 0x40
 8009786:	b29b      	uxth	r3, r3
 8009788:	893a      	ldrh	r2, [r7, #8]
 800978a:	2100      	movs	r1, #0
 800978c:	9100      	str	r1, [sp, #0]
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fbe3 	bl	8008f5c <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff fa21 	bl	8008bde <lock_flash>

	return flash->last_write_failure_status;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b086      	sub	sp, #24
 80097ae:	af02      	add	r7, sp, #8
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	461a      	mov	r2, r3
 80097b6:	460b      	mov	r3, r1
 80097b8:	72fb      	strb	r3, [r7, #11]
 80097ba:	4613      	mov	r3, r2
 80097bc:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 80097be:	7afb      	ldrb	r3, [r7, #11]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b40      	subs	r3, #64	; 0x40
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	893a      	ldrh	r2, [r7, #8]
 80097c8:	2100      	movs	r1, #0
 80097ca:	9100      	str	r1, [sp, #0]
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fba7 	bl	8008f22 <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff f9e2 	bl	8008bae <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 80097ea:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff faf8 	bl	8008de4 <erase_block>
	lock_flash(flash);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff f9f2 	bl	8008bde <lock_flash>
	return flash->last_erase_failure_status;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8009808:	b580      	push	{r7, lr}
 800980a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800980e:	af00      	add	r7, sp, #0
 8009810:	1d3b      	adds	r3, r7, #4
 8009812:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 8009814:	f107 0308 	add.w	r3, r7, #8
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	3304      	adds	r3, #4
 800981e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8009822:	2100      	movs	r1, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f004 fdb1 	bl	800e38c <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 800982a:	f107 0108 	add.w	r1, r7, #8
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	f7ff fe0c 	bl	8009452 <write_to_flash>
}
 800983a:	bf00      	nop
 800983c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009848:	4b0e      	ldr	r3, [pc, #56]	; (8009884 <HAL_Init+0x40>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a0d      	ldr	r2, [pc, #52]	; (8009884 <HAL_Init+0x40>)
 800984e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <HAL_Init+0x40>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <HAL_Init+0x40>)
 800985a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800985e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009860:	4b08      	ldr	r3, [pc, #32]	; (8009884 <HAL_Init+0x40>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a07      	ldr	r2, [pc, #28]	; (8009884 <HAL_Init+0x40>)
 8009866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800986a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800986c:	2003      	movs	r0, #3
 800986e:	f000 f965 	bl	8009b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009872:	2000      	movs	r0, #0
 8009874:	f000 f808 	bl	8009888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009878:	f7fc fc68 	bl	800614c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	40023c00 	.word	0x40023c00

08009888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009890:	4b12      	ldr	r3, [pc, #72]	; (80098dc <HAL_InitTick+0x54>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <HAL_InitTick+0x58>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800989e:	fbb3 f3f1 	udiv	r3, r3, r1
 80098a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f981 	bl	8009bae <HAL_SYSTICK_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e00e      	b.n	80098d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b0f      	cmp	r3, #15
 80098ba:	d80a      	bhi.n	80098d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098bc:	2200      	movs	r2, #0
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	f000 f945 	bl	8009b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80098c8:	4a06      	ldr	r2, [pc, #24]	; (80098e4 <HAL_InitTick+0x5c>)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e000      	b.n	80098d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000198 	.word	0x20000198
 80098e0:	200001d4 	.word	0x200001d4
 80098e4:	200001d0 	.word	0x200001d0

080098e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <HAL_IncTick+0x20>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	4b06      	ldr	r3, [pc, #24]	; (800990c <HAL_IncTick+0x24>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4413      	add	r3, r2
 80098f8:	4a04      	ldr	r2, [pc, #16]	; (800990c <HAL_IncTick+0x24>)
 80098fa:	6013      	str	r3, [r2, #0]
}
 80098fc:	bf00      	nop
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	200001d4 	.word	0x200001d4
 800990c:	20002388 	.word	0x20002388

08009910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  return uwTick;
 8009914:	4b03      	ldr	r3, [pc, #12]	; (8009924 <HAL_GetTick+0x14>)
 8009916:	681b      	ldr	r3, [r3, #0]
}
 8009918:	4618      	mov	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20002388 	.word	0x20002388

08009928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009930:	f7ff ffee 	bl	8009910 <HAL_GetTick>
 8009934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d005      	beq.n	800994e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <HAL_Delay+0x44>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800994e:	bf00      	nop
 8009950:	f7ff ffde 	bl	8009910 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	429a      	cmp	r2, r3
 800995e:	d8f7      	bhi.n	8009950 <HAL_Delay+0x28>
  {
  }
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200001d4 	.word	0x200001d4

08009970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009980:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800998c:	4013      	ands	r3, r2
 800998e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800999c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099a2:	4a04      	ldr	r2, [pc, #16]	; (80099b4 <__NVIC_SetPriorityGrouping+0x44>)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	60d3      	str	r3, [r2, #12]
}
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	e000ed00 	.word	0xe000ed00

080099b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <__NVIC_GetPriorityGrouping+0x18>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	f003 0307 	and.w	r3, r3, #7
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	e000ed00 	.word	0xe000ed00

080099d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	db0b      	blt.n	80099fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	f003 021f 	and.w	r2, r3, #31
 80099ec:	4907      	ldr	r1, [pc, #28]	; (8009a0c <__NVIC_EnableIRQ+0x38>)
 80099ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	2001      	movs	r0, #1
 80099f6:	fa00 f202 	lsl.w	r2, r0, r2
 80099fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	e000e100 	.word	0xe000e100

08009a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db0a      	blt.n	8009a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	490c      	ldr	r1, [pc, #48]	; (8009a5c <__NVIC_SetPriority+0x4c>)
 8009a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2e:	0112      	lsls	r2, r2, #4
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	440b      	add	r3, r1
 8009a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a38:	e00a      	b.n	8009a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	4908      	ldr	r1, [pc, #32]	; (8009a60 <__NVIC_SetPriority+0x50>)
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	3b04      	subs	r3, #4
 8009a48:	0112      	lsls	r2, r2, #4
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	761a      	strb	r2, [r3, #24]
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e100 	.word	0xe000e100
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b089      	sub	sp, #36	; 0x24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	f1c3 0307 	rsb	r3, r3, #7
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	bf28      	it	cs
 8009a82:	2304      	movcs	r3, #4
 8009a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d902      	bls.n	8009a94 <NVIC_EncodePriority+0x30>
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	3b03      	subs	r3, #3
 8009a92:	e000      	b.n	8009a96 <NVIC_EncodePriority+0x32>
 8009a94:	2300      	movs	r3, #0
 8009a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	401a      	ands	r2, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009aac:	f04f 31ff 	mov.w	r1, #4294967295
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	43d9      	mvns	r1, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009abc:	4313      	orrs	r3, r2
         );
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3724      	adds	r7, #36	; 0x24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
	...

08009acc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ad0:	f3bf 8f4f 	dsb	sy
}
 8009ad4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <__NVIC_SystemReset+0x24>)
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009ade:	4904      	ldr	r1, [pc, #16]	; (8009af0 <__NVIC_SystemReset+0x24>)
 8009ae0:	4b04      	ldr	r3, [pc, #16]	; (8009af4 <__NVIC_SystemReset+0x28>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ae6:	f3bf 8f4f 	dsb	sy
}
 8009aea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <__NVIC_SystemReset+0x20>
 8009af0:	e000ed00 	.word	0xe000ed00
 8009af4:	05fa0004 	.word	0x05fa0004

08009af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b08:	d301      	bcc.n	8009b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e00f      	b.n	8009b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b0e:	4a0a      	ldr	r2, [pc, #40]	; (8009b38 <SysTick_Config+0x40>)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b16:	210f      	movs	r1, #15
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	f7ff ff78 	bl	8009a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <SysTick_Config+0x40>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b26:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <SysTick_Config+0x40>)
 8009b28:	2207      	movs	r2, #7
 8009b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	e000e010 	.word	0xe000e010

08009b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ff13 	bl	8009970 <__NVIC_SetPriorityGrouping>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	4603      	mov	r3, r0
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b64:	f7ff ff28 	bl	80099b8 <__NVIC_GetPriorityGrouping>
 8009b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	6978      	ldr	r0, [r7, #20]
 8009b70:	f7ff ff78 	bl	8009a64 <NVIC_EncodePriority>
 8009b74:	4602      	mov	r2, r0
 8009b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff ff47 	bl	8009a10 <__NVIC_SetPriority>
}
 8009b82:	bf00      	nop
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	4603      	mov	r3, r0
 8009b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff ff1b 	bl	80099d4 <__NVIC_EnableIRQ>
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009baa:	f7ff ff8f 	bl	8009acc <__NVIC_SystemReset>

08009bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff ff9e 	bl	8009af8 <SysTick_Config>
 8009bbc:	4603      	mov	r3, r0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009bd4:	f7ff fe9c 	bl	8009910 <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e099      	b.n	8009d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0201 	bic.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c04:	e00f      	b.n	8009c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c06:	f7ff fe83 	bl	8009910 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b05      	cmp	r3, #5
 8009c12:	d908      	bls.n	8009c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e078      	b.n	8009d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e8      	bne.n	8009c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4b38      	ldr	r3, [pc, #224]	; (8009d20 <HAL_DMA_Init+0x158>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d107      	bne.n	8009c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d117      	bne.n	8009cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fb01 	bl	800a2d4 <DMA_CheckFifoParam>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2240      	movs	r2, #64	; 0x40
 8009cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e016      	b.n	8009d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fab8 	bl	800a268 <DMA_CalcBaseAndBitshift>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d00:	223f      	movs	r2, #63	; 0x3f
 8009d02:	409a      	lsls	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	f010803f 	.word	0xf010803f

08009d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d101      	bne.n	8009d4a <HAL_DMA_Start_IT+0x26>
 8009d46:	2302      	movs	r3, #2
 8009d48:	e040      	b.n	8009dcc <HAL_DMA_Start_IT+0xa8>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d12f      	bne.n	8009dbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2202      	movs	r2, #2
 8009d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fa4a 	bl	800a20c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7c:	223f      	movs	r2, #63	; 0x3f
 8009d7e:	409a      	lsls	r2, r3
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0216 	orr.w	r2, r2, #22
 8009d92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d007      	beq.n	8009dac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0208 	orr.w	r2, r2, #8
 8009daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0201 	orr.w	r2, r2, #1
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	e005      	b.n	8009dca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009de2:	f7ff fd95 	bl	8009910 <HAL_GetTick>
 8009de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d008      	beq.n	8009e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2280      	movs	r2, #128	; 0x80
 8009df8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e052      	b.n	8009eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0216 	bic.w	r2, r2, #22
 8009e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	695a      	ldr	r2, [r3, #20]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d103      	bne.n	8009e36 <HAL_DMA_Abort+0x62>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0208 	bic.w	r2, r2, #8
 8009e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e56:	e013      	b.n	8009e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e58:	f7ff fd5a 	bl	8009910 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d90c      	bls.n	8009e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2203      	movs	r2, #3
 8009e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e015      	b.n	8009eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e4      	bne.n	8009e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e92:	223f      	movs	r2, #63	; 0x3f
 8009e94:	409a      	lsls	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d004      	beq.n	8009ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2280      	movs	r2, #128	; 0x80
 8009ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e00c      	b.n	8009eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0201 	bic.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009f04:	4b92      	ldr	r3, [pc, #584]	; (800a150 <HAL_DMA_IRQHandler+0x258>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a92      	ldr	r2, [pc, #584]	; (800a154 <HAL_DMA_IRQHandler+0x25c>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	0a9b      	lsrs	r3, r3, #10
 8009f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f22:	2208      	movs	r2, #8
 8009f24:	409a      	lsls	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01a      	beq.n	8009f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d013      	beq.n	8009f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0204 	bic.w	r2, r2, #4
 8009f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f50:	2208      	movs	r2, #8
 8009f52:	409a      	lsls	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5c:	f043 0201 	orr.w	r2, r3, #1
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f68:	2201      	movs	r2, #1
 8009f6a:	409a      	lsls	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d012      	beq.n	8009f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f86:	2201      	movs	r2, #1
 8009f88:	409a      	lsls	r2, r3
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f92:	f043 0202 	orr.w	r2, r3, #2
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	409a      	lsls	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d012      	beq.n	8009fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00b      	beq.n	8009fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	409a      	lsls	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc8:	f043 0204 	orr.w	r2, r3, #4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	409a      	lsls	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d043      	beq.n	800a068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0308 	and.w	r3, r3, #8
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d03c      	beq.n	800a068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff2:	2210      	movs	r2, #16
 8009ff4:	409a      	lsls	r2, r3
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d018      	beq.n	800a03a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d108      	bne.n	800a028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d024      	beq.n	800a068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
 800a026:	e01f      	b.n	800a068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01b      	beq.n	800a068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
 800a038:	e016      	b.n	800a068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0208 	bic.w	r2, r2, #8
 800a056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a06c:	2220      	movs	r2, #32
 800a06e:	409a      	lsls	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 808e 	beq.w	800a196 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8086 	beq.w	800a196 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08e:	2220      	movs	r2, #32
 800a090:	409a      	lsls	r2, r3
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d136      	bne.n	800a110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0216 	bic.w	r2, r2, #22
 800a0b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	695a      	ldr	r2, [r3, #20]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d103      	bne.n	800a0d2 <HAL_DMA_IRQHandler+0x1da>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0208 	bic.w	r2, r2, #8
 800a0e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e6:	223f      	movs	r2, #63	; 0x3f
 800a0e8:	409a      	lsls	r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a102:	2b00      	cmp	r3, #0
 800a104:	d07d      	beq.n	800a202 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
        }
        return;
 800a10e:	e078      	b.n	800a202 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01c      	beq.n	800a158 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d108      	bne.n	800a13e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a130:	2b00      	cmp	r3, #0
 800a132:	d030      	beq.n	800a196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	4798      	blx	r3
 800a13c:	e02b      	b.n	800a196 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d027      	beq.n	800a196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
 800a14e:	e022      	b.n	800a196 <HAL_DMA_IRQHandler+0x29e>
 800a150:	20000198 	.word	0x20000198
 800a154:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10f      	bne.n	800a186 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f022 0210 	bic.w	r2, r2, #16
 800a174:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d032      	beq.n	800a204 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d022      	beq.n	800a1f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2205      	movs	r2, #5
 800a1ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60bb      	str	r3, [r7, #8]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d307      	bcc.n	800a1de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f2      	bne.n	800a1c2 <HAL_DMA_IRQHandler+0x2ca>
 800a1dc:	e000      	b.n	800a1e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a1de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
 800a200:	e000      	b.n	800a204 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a202:	bf00      	nop
    }
  }
}
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop

0800a20c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2b40      	cmp	r3, #64	; 0x40
 800a238:	d108      	bne.n	800a24c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a24a:	e007      	b.n	800a25c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	60da      	str	r2, [r3, #12]
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	3b10      	subs	r3, #16
 800a278:	4a14      	ldr	r2, [pc, #80]	; (800a2cc <DMA_CalcBaseAndBitshift+0x64>)
 800a27a:	fba2 2303 	umull	r2, r3, r2, r3
 800a27e:	091b      	lsrs	r3, r3, #4
 800a280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a282:	4a13      	ldr	r2, [pc, #76]	; (800a2d0 <DMA_CalcBaseAndBitshift+0x68>)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b03      	cmp	r3, #3
 800a294:	d909      	bls.n	800a2aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a29e:	f023 0303 	bic.w	r3, r3, #3
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	659a      	str	r2, [r3, #88]	; 0x58
 800a2a8:	e007      	b.n	800a2ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a2b2:	f023 0303 	bic.w	r3, r3, #3
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	aaaaaaab 	.word	0xaaaaaaab
 800a2d0:	0800fa00 	.word	0x0800fa00

0800a2d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d11f      	bne.n	800a32e <DMA_CheckFifoParam+0x5a>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d856      	bhi.n	800a3a2 <DMA_CheckFifoParam+0xce>
 800a2f4:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <DMA_CheckFifoParam+0x28>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a31f 	.word	0x0800a31f
 800a304:	0800a30d 	.word	0x0800a30d
 800a308:	0800a3a3 	.word	0x0800a3a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d046      	beq.n	800a3a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a31c:	e043      	b.n	800a3a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a326:	d140      	bne.n	800a3aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a32c:	e03d      	b.n	800a3aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a336:	d121      	bne.n	800a37c <DMA_CheckFifoParam+0xa8>
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d837      	bhi.n	800a3ae <DMA_CheckFifoParam+0xda>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <DMA_CheckFifoParam+0x70>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a355 	.word	0x0800a355
 800a348:	0800a35b 	.word	0x0800a35b
 800a34c:	0800a355 	.word	0x0800a355
 800a350:	0800a36d 	.word	0x0800a36d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]
      break;
 800a358:	e030      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d025      	beq.n	800a3b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a36a:	e022      	b.n	800a3b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a374:	d11f      	bne.n	800a3b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a37a:	e01c      	b.n	800a3b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d903      	bls.n	800a38a <DMA_CheckFifoParam+0xb6>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b03      	cmp	r3, #3
 800a386:	d003      	beq.n	800a390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a388:	e018      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73fb      	strb	r3, [r7, #15]
      break;
 800a38e:	e015      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00e      	beq.n	800a3ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a0:	e00b      	b.n	800a3ba <DMA_CheckFifoParam+0xe6>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e00a      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;
 800a3a6:	bf00      	nop
 800a3a8:	e008      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;
 800a3aa:	bf00      	nop
 800a3ac:	e006      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;
 800a3ae:	bf00      	nop
 800a3b0:	e004      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;
 800a3b2:	bf00      	nop
 800a3b4:	e002      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;   
 800a3b6:	bf00      	nop
 800a3b8:	e000      	b.n	800a3bc <DMA_CheckFifoParam+0xe8>
      break;
 800a3ba:	bf00      	nop
    }
  } 
  
  return status; 
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop

0800a3cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b089      	sub	sp, #36	; 0x24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61fb      	str	r3, [r7, #28]
 800a3e6:	e165      	b.n	800a6b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	429a      	cmp	r2, r3
 800a402:	f040 8154 	bne.w	800a6ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d005      	beq.n	800a41e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d130      	bne.n	800a480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	2203      	movs	r2, #3
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	43db      	mvns	r3, r3
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	4013      	ands	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	fa02 f303 	lsl.w	r3, r2, r3
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	4313      	orrs	r3, r2
 800a446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a454:	2201      	movs	r2, #1
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	43db      	mvns	r3, r3
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	4013      	ands	r3, r2
 800a462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	f003 0201 	and.w	r2, r3, #1
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	fa02 f303 	lsl.w	r3, r2, r3
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	4313      	orrs	r3, r2
 800a478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f003 0303 	and.w	r3, r3, #3
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d017      	beq.n	800a4bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	2203      	movs	r2, #3
 800a498:	fa02 f303 	lsl.w	r3, r2, r3
 800a49c:	43db      	mvns	r3, r3
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d123      	bne.n	800a510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	08da      	lsrs	r2, r3, #3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3208      	adds	r2, #8
 800a4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	220f      	movs	r2, #15
 800a4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e4:	43db      	mvns	r3, r3
 800a4e6:	69ba      	ldr	r2, [r7, #24]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	691a      	ldr	r2, [r3, #16]
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	08da      	lsrs	r2, r3, #3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3208      	adds	r2, #8
 800a50a:	69b9      	ldr	r1, [r7, #24]
 800a50c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	2203      	movs	r2, #3
 800a51c:	fa02 f303 	lsl.w	r3, r2, r3
 800a520:	43db      	mvns	r3, r3
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	4013      	ands	r3, r2
 800a526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f003 0203 	and.w	r2, r3, #3
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	fa02 f303 	lsl.w	r3, r2, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 80ae 	beq.w	800a6ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	4b5d      	ldr	r3, [pc, #372]	; (800a6cc <HAL_GPIO_Init+0x300>)
 800a558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55a:	4a5c      	ldr	r2, [pc, #368]	; (800a6cc <HAL_GPIO_Init+0x300>)
 800a55c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a560:	6453      	str	r3, [r2, #68]	; 0x44
 800a562:	4b5a      	ldr	r3, [pc, #360]	; (800a6cc <HAL_GPIO_Init+0x300>)
 800a564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a56e:	4a58      	ldr	r2, [pc, #352]	; (800a6d0 <HAL_GPIO_Init+0x304>)
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	089b      	lsrs	r3, r3, #2
 800a574:	3302      	adds	r3, #2
 800a576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	220f      	movs	r2, #15
 800a586:	fa02 f303 	lsl.w	r3, r2, r3
 800a58a:	43db      	mvns	r3, r3
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	4013      	ands	r3, r2
 800a590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a4f      	ldr	r2, [pc, #316]	; (800a6d4 <HAL_GPIO_Init+0x308>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d025      	beq.n	800a5e6 <HAL_GPIO_Init+0x21a>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a4e      	ldr	r2, [pc, #312]	; (800a6d8 <HAL_GPIO_Init+0x30c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01f      	beq.n	800a5e2 <HAL_GPIO_Init+0x216>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a4d      	ldr	r2, [pc, #308]	; (800a6dc <HAL_GPIO_Init+0x310>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d019      	beq.n	800a5de <HAL_GPIO_Init+0x212>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a4c      	ldr	r2, [pc, #304]	; (800a6e0 <HAL_GPIO_Init+0x314>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d013      	beq.n	800a5da <HAL_GPIO_Init+0x20e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a4b      	ldr	r2, [pc, #300]	; (800a6e4 <HAL_GPIO_Init+0x318>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00d      	beq.n	800a5d6 <HAL_GPIO_Init+0x20a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a4a      	ldr	r2, [pc, #296]	; (800a6e8 <HAL_GPIO_Init+0x31c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d007      	beq.n	800a5d2 <HAL_GPIO_Init+0x206>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a49      	ldr	r2, [pc, #292]	; (800a6ec <HAL_GPIO_Init+0x320>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d101      	bne.n	800a5ce <HAL_GPIO_Init+0x202>
 800a5ca:	2306      	movs	r3, #6
 800a5cc:	e00c      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5ce:	2307      	movs	r3, #7
 800a5d0:	e00a      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5d2:	2305      	movs	r3, #5
 800a5d4:	e008      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5d6:	2304      	movs	r3, #4
 800a5d8:	e006      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e004      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e002      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <HAL_GPIO_Init+0x21c>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	f002 0203 	and.w	r2, r2, #3
 800a5ee:	0092      	lsls	r2, r2, #2
 800a5f0:	4093      	lsls	r3, r2
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5f8:	4935      	ldr	r1, [pc, #212]	; (800a6d0 <HAL_GPIO_Init+0x304>)
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	089b      	lsrs	r3, r3, #2
 800a5fe:	3302      	adds	r3, #2
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a606:	4b3a      	ldr	r3, [pc, #232]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	43db      	mvns	r3, r3
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	4013      	ands	r3, r2
 800a614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a62a:	4a31      	ldr	r2, [pc, #196]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a630:	4b2f      	ldr	r3, [pc, #188]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	43db      	mvns	r3, r3
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	4013      	ands	r3, r2
 800a63e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a654:	4a26      	ldr	r2, [pc, #152]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a65a:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	43db      	mvns	r3, r3
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	4013      	ands	r3, r2
 800a668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a67e:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a684:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	43db      	mvns	r3, r3
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	4013      	ands	r3, r2
 800a692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a6a8:	4a11      	ldr	r2, [pc, #68]	; (800a6f0 <HAL_GPIO_Init+0x324>)
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	2b0f      	cmp	r3, #15
 800a6b8:	f67f ae96 	bls.w	800a3e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	3724      	adds	r7, #36	; 0x24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	40023800 	.word	0x40023800
 800a6d0:	40013800 	.word	0x40013800
 800a6d4:	40020000 	.word	0x40020000
 800a6d8:	40020400 	.word	0x40020400
 800a6dc:	40020800 	.word	0x40020800
 800a6e0:	40020c00 	.word	0x40020c00
 800a6e4:	40021000 	.word	0x40021000
 800a6e8:	40021400 	.word	0x40021400
 800a6ec:	40021800 	.word	0x40021800
 800a6f0:	40013c00 	.word	0x40013c00

0800a6f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	887b      	ldrh	r3, [r7, #2]
 800a706:	4013      	ands	r3, r2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
 800a710:	e001      	b.n	800a716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
 800a730:	4613      	mov	r3, r2
 800a732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a734:	787b      	ldrb	r3, [r7, #1]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a73a:	887a      	ldrh	r2, [r7, #2]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a740:	e003      	b.n	800a74a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a742:	887b      	ldrh	r3, [r7, #2]
 800a744:	041a      	lsls	r2, r3, #16
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	619a      	str	r2, [r3, #24]
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a768:	887a      	ldrh	r2, [r7, #2]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4013      	ands	r3, r2
 800a76e:	041a      	lsls	r2, r3, #16
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	43d9      	mvns	r1, r3
 800a774:	887b      	ldrh	r3, [r7, #2]
 800a776:	400b      	ands	r3, r1
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	619a      	str	r2, [r3, #24]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e034      	b.n	800a806 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a7a4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f245 5255 	movw	r2, #21845	; 0x5555
 800a7ae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	6852      	ldr	r2, [r2, #4]
 800a7b8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	6892      	ldr	r2, [r2, #8]
 800a7c2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a7c4:	f7ff f8a4 	bl	8009910 <HAL_GetTick>
 800a7c8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a7ca:	e00f      	b.n	800a7ec <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a7cc:	f7ff f8a0 	bl	8009910 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b31      	cmp	r3, #49	; 0x31
 800a7d8:	d908      	bls.n	800a7ec <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e00c      	b.n	800a806 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1e8      	bne.n	800a7cc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a802:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a81e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e0cc      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a844:	4b68      	ldr	r3, [pc, #416]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d90c      	bls.n	800a86c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a852:	4b65      	ldr	r3, [pc, #404]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a85a:	4b63      	ldr	r3, [pc, #396]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d001      	beq.n	800a86c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0b8      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d020      	beq.n	800a8ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a884:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4a58      	ldr	r2, [pc, #352]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a88a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a88e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0308 	and.w	r3, r3, #8
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a89c:	4b53      	ldr	r3, [pc, #332]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	4a52      	ldr	r2, [pc, #328]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a8a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a8a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8a8:	4b50      	ldr	r3, [pc, #320]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	494d      	ldr	r1, [pc, #308]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d044      	beq.n	800a950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d107      	bne.n	800a8de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8ce:	4b47      	ldr	r3, [pc, #284]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d119      	bne.n	800a90e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e07f      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d003      	beq.n	800a8ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8ee:	4b3f      	ldr	r3, [pc, #252]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d109      	bne.n	800a90e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e06f      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8fe:	4b3b      	ldr	r3, [pc, #236]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e067      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a90e:	4b37      	ldr	r3, [pc, #220]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f023 0203 	bic.w	r2, r3, #3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4934      	ldr	r1, [pc, #208]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a920:	f7fe fff6 	bl	8009910 <HAL_GetTick>
 800a924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a926:	e00a      	b.n	800a93e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a928:	f7fe fff2 	bl	8009910 <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	f241 3288 	movw	r2, #5000	; 0x1388
 800a936:	4293      	cmp	r3, r2
 800a938:	d901      	bls.n	800a93e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e04f      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a93e:	4b2b      	ldr	r3, [pc, #172]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f003 020c 	and.w	r2, r3, #12
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d1eb      	bne.n	800a928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a950:	4b25      	ldr	r3, [pc, #148]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d20c      	bcs.n	800a978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a95e:	4b22      	ldr	r3, [pc, #136]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a966:	4b20      	ldr	r3, [pc, #128]	; (800a9e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d001      	beq.n	800a978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e032      	b.n	800a9de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d008      	beq.n	800a996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	4916      	ldr	r1, [pc, #88]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a992:	4313      	orrs	r3, r2
 800a994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9a2:	4b12      	ldr	r3, [pc, #72]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	490e      	ldr	r1, [pc, #56]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9b6:	f000 f855 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <HAL_RCC_ClockConfig+0x1bc>)
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	091b      	lsrs	r3, r3, #4
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	490a      	ldr	r1, [pc, #40]	; (800a9f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a9c8:	5ccb      	ldrb	r3, [r1, r3]
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	4a09      	ldr	r2, [pc, #36]	; (800a9f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a9d2:	4b09      	ldr	r3, [pc, #36]	; (800a9f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe ff56 	bl	8009888 <HAL_InitTick>

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40023c00 	.word	0x40023c00
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	0800f598 	.word	0x0800f598
 800a9f4:	20000198 	.word	0x20000198
 800a9f8:	200001d0 	.word	0x200001d0

0800a9fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa00:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa02:	681b      	ldr	r3, [r3, #0]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20000198 	.word	0x20000198

0800aa14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa18:	f7ff fff0 	bl	800a9fc <HAL_RCC_GetHCLKFreq>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	0a9b      	lsrs	r3, r3, #10
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	4903      	ldr	r1, [pc, #12]	; (800aa38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa2a:	5ccb      	ldrb	r3, [r1, r3]
 800aa2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	40023800 	.word	0x40023800
 800aa38:	0800f5a8 	.word	0x0800f5a8

0800aa3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa40:	f7ff ffdc 	bl	800a9fc <HAL_RCC_GetHCLKFreq>
 800aa44:	4602      	mov	r2, r0
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	0b5b      	lsrs	r3, r3, #13
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	4903      	ldr	r1, [pc, #12]	; (800aa60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa52:	5ccb      	ldrb	r3, [r1, r3]
 800aa54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	0800f5a8 	.word	0x0800f5a8

0800aa64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa68:	b088      	sub	sp, #32
 800aa6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa80:	4bce      	ldr	r3, [pc, #824]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f003 030c 	and.w	r3, r3, #12
 800aa88:	2b0c      	cmp	r3, #12
 800aa8a:	f200 818d 	bhi.w	800ada8 <HAL_RCC_GetSysClockFreq+0x344>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <HAL_RCC_GetSysClockFreq+0x30>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aac9 	.word	0x0800aac9
 800aa98:	0800ada9 	.word	0x0800ada9
 800aa9c:	0800ada9 	.word	0x0800ada9
 800aaa0:	0800ada9 	.word	0x0800ada9
 800aaa4:	0800aacf 	.word	0x0800aacf
 800aaa8:	0800ada9 	.word	0x0800ada9
 800aaac:	0800ada9 	.word	0x0800ada9
 800aab0:	0800ada9 	.word	0x0800ada9
 800aab4:	0800aad5 	.word	0x0800aad5
 800aab8:	0800ada9 	.word	0x0800ada9
 800aabc:	0800ada9 	.word	0x0800ada9
 800aac0:	0800ada9 	.word	0x0800ada9
 800aac4:	0800ac49 	.word	0x0800ac49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aac8:	4bbd      	ldr	r3, [pc, #756]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800aaca:	61bb      	str	r3, [r7, #24]
       break;
 800aacc:	e16f      	b.n	800adae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aace:	4bbc      	ldr	r3, [pc, #752]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800aad0:	61bb      	str	r3, [r7, #24]
      break;
 800aad2:	e16c      	b.n	800adae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aad4:	4bb9      	ldr	r3, [pc, #740]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aadc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aade:	4bb7      	ldr	r3, [pc, #732]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d053      	beq.n	800ab92 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaea:	4bb4      	ldr	r3, [pc, #720]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	099b      	lsrs	r3, r3, #6
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aafa:	f04f 0100 	mov.w	r1, #0
 800aafe:	ea02 0400 	and.w	r4, r2, r0
 800ab02:	603c      	str	r4, [r7, #0]
 800ab04:	400b      	ands	r3, r1
 800ab06:	607b      	str	r3, [r7, #4]
 800ab08:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	014b      	lsls	r3, r1, #5
 800ab1a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab1e:	0142      	lsls	r2, r0, #5
 800ab20:	4610      	mov	r0, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	4623      	mov	r3, r4
 800ab26:	1ac0      	subs	r0, r0, r3
 800ab28:	462b      	mov	r3, r5
 800ab2a:	eb61 0103 	sbc.w	r1, r1, r3
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	018b      	lsls	r3, r1, #6
 800ab38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab3c:	0182      	lsls	r2, r0, #6
 800ab3e:	1a12      	subs	r2, r2, r0
 800ab40:	eb63 0301 	sbc.w	r3, r3, r1
 800ab44:	f04f 0000 	mov.w	r0, #0
 800ab48:	f04f 0100 	mov.w	r1, #0
 800ab4c:	00d9      	lsls	r1, r3, #3
 800ab4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab52:	00d0      	lsls	r0, r2, #3
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4621      	mov	r1, r4
 800ab5a:	1852      	adds	r2, r2, r1
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	eb43 0101 	adc.w	r1, r3, r1
 800ab62:	460b      	mov	r3, r1
 800ab64:	f04f 0000 	mov.w	r0, #0
 800ab68:	f04f 0100 	mov.w	r1, #0
 800ab6c:	0299      	lsls	r1, r3, #10
 800ab6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ab72:	0290      	lsls	r0, r2, #10
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4610      	mov	r0, r2
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	f7f6 f844 	bl	8000c10 <__aeabi_uldivmod>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e04c      	b.n	800ac2c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab92:	4b8a      	ldr	r3, [pc, #552]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	099b      	lsrs	r3, r3, #6
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aba2:	f04f 0100 	mov.w	r1, #0
 800aba6:	ea02 0a00 	and.w	sl, r2, r0
 800abaa:	ea03 0b01 	and.w	fp, r3, r1
 800abae:	4650      	mov	r0, sl
 800abb0:	4659      	mov	r1, fp
 800abb2:	f04f 0200 	mov.w	r2, #0
 800abb6:	f04f 0300 	mov.w	r3, #0
 800abba:	014b      	lsls	r3, r1, #5
 800abbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800abc0:	0142      	lsls	r2, r0, #5
 800abc2:	4610      	mov	r0, r2
 800abc4:	4619      	mov	r1, r3
 800abc6:	ebb0 000a 	subs.w	r0, r0, sl
 800abca:	eb61 010b 	sbc.w	r1, r1, fp
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	018b      	lsls	r3, r1, #6
 800abd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800abdc:	0182      	lsls	r2, r0, #6
 800abde:	1a12      	subs	r2, r2, r0
 800abe0:	eb63 0301 	sbc.w	r3, r3, r1
 800abe4:	f04f 0000 	mov.w	r0, #0
 800abe8:	f04f 0100 	mov.w	r1, #0
 800abec:	00d9      	lsls	r1, r3, #3
 800abee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abf2:	00d0      	lsls	r0, r2, #3
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	eb12 020a 	adds.w	r2, r2, sl
 800abfc:	eb43 030b 	adc.w	r3, r3, fp
 800ac00:	f04f 0000 	mov.w	r0, #0
 800ac04:	f04f 0100 	mov.w	r1, #0
 800ac08:	0299      	lsls	r1, r3, #10
 800ac0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ac0e:	0290      	lsls	r0, r2, #10
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4610      	mov	r0, r2
 800ac16:	4619      	mov	r1, r3
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f04f 0300 	mov.w	r3, #0
 800ac20:	f7f5 fff6 	bl	8000c10 <__aeabi_uldivmod>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4613      	mov	r3, r2
 800ac2a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac2c:	4b63      	ldr	r3, [pc, #396]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	0c1b      	lsrs	r3, r3, #16
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	3301      	adds	r3, #1
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800ac3c:	69fa      	ldr	r2, [r7, #28]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac44:	61bb      	str	r3, [r7, #24]
      break;
 800ac46:	e0b2      	b.n	800adae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac48:	4b5c      	ldr	r3, [pc, #368]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac52:	4b5a      	ldr	r3, [pc, #360]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d04d      	beq.n	800acfa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac5e:	4b57      	ldr	r3, [pc, #348]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	099b      	lsrs	r3, r3, #6
 800ac64:	461a      	mov	r2, r3
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac6e:	f04f 0100 	mov.w	r1, #0
 800ac72:	ea02 0800 	and.w	r8, r2, r0
 800ac76:	ea03 0901 	and.w	r9, r3, r1
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	f04f 0300 	mov.w	r3, #0
 800ac86:	014b      	lsls	r3, r1, #5
 800ac88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac8c:	0142      	lsls	r2, r0, #5
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4619      	mov	r1, r3
 800ac92:	ebb0 0008 	subs.w	r0, r0, r8
 800ac96:	eb61 0109 	sbc.w	r1, r1, r9
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	018b      	lsls	r3, r1, #6
 800aca4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aca8:	0182      	lsls	r2, r0, #6
 800acaa:	1a12      	subs	r2, r2, r0
 800acac:	eb63 0301 	sbc.w	r3, r3, r1
 800acb0:	f04f 0000 	mov.w	r0, #0
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	00d9      	lsls	r1, r3, #3
 800acba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acbe:	00d0      	lsls	r0, r2, #3
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	eb12 0208 	adds.w	r2, r2, r8
 800acc8:	eb43 0309 	adc.w	r3, r3, r9
 800accc:	f04f 0000 	mov.w	r0, #0
 800acd0:	f04f 0100 	mov.w	r1, #0
 800acd4:	0299      	lsls	r1, r3, #10
 800acd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800acda:	0290      	lsls	r0, r2, #10
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4610      	mov	r0, r2
 800ace2:	4619      	mov	r1, r3
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	f7f5 ff90 	bl	8000c10 <__aeabi_uldivmod>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4613      	mov	r3, r2
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	e04a      	b.n	800ad90 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acfa:	4b30      	ldr	r3, [pc, #192]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	099b      	lsrs	r3, r3, #6
 800ad00:	461a      	mov	r2, r3
 800ad02:	f04f 0300 	mov.w	r3, #0
 800ad06:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ad0a:	f04f 0100 	mov.w	r1, #0
 800ad0e:	ea02 0400 	and.w	r4, r2, r0
 800ad12:	ea03 0501 	and.w	r5, r3, r1
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f04f 0200 	mov.w	r2, #0
 800ad1e:	f04f 0300 	mov.w	r3, #0
 800ad22:	014b      	lsls	r3, r1, #5
 800ad24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad28:	0142      	lsls	r2, r0, #5
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	1b00      	subs	r0, r0, r4
 800ad30:	eb61 0105 	sbc.w	r1, r1, r5
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	018b      	lsls	r3, r1, #6
 800ad3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad42:	0182      	lsls	r2, r0, #6
 800ad44:	1a12      	subs	r2, r2, r0
 800ad46:	eb63 0301 	sbc.w	r3, r3, r1
 800ad4a:	f04f 0000 	mov.w	r0, #0
 800ad4e:	f04f 0100 	mov.w	r1, #0
 800ad52:	00d9      	lsls	r1, r3, #3
 800ad54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad58:	00d0      	lsls	r0, r2, #3
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	1912      	adds	r2, r2, r4
 800ad60:	eb45 0303 	adc.w	r3, r5, r3
 800ad64:	f04f 0000 	mov.w	r0, #0
 800ad68:	f04f 0100 	mov.w	r1, #0
 800ad6c:	0299      	lsls	r1, r3, #10
 800ad6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad72:	0290      	lsls	r0, r2, #10
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f04f 0300 	mov.w	r3, #0
 800ad84:	f7f5 ff44 	bl	8000c10 <__aeabi_uldivmod>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <HAL_RCC_GetSysClockFreq+0x358>)
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	0f1b      	lsrs	r3, r3, #28
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada4:	61bb      	str	r3, [r7, #24]
      break;
 800ada6:	e002      	b.n	800adae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ada8:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800adaa:	61bb      	str	r3, [r7, #24]
      break;
 800adac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adae:	69bb      	ldr	r3, [r7, #24]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adba:	bf00      	nop
 800adbc:	40023800 	.word	0x40023800
 800adc0:	00f42400 	.word	0x00f42400

0800adc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e28d      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f000 8083 	beq.w	800aeea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ade4:	4b94      	ldr	r3, [pc, #592]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 030c 	and.w	r3, r3, #12
 800adec:	2b04      	cmp	r3, #4
 800adee:	d019      	beq.n	800ae24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800adf0:	4b91      	ldr	r3, [pc, #580]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d106      	bne.n	800ae0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800adfc:	4b8e      	ldr	r3, [pc, #568]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae08:	d00c      	beq.n	800ae24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae0a:	4b8b      	ldr	r3, [pc, #556]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae12:	2b0c      	cmp	r3, #12
 800ae14:	d112      	bne.n	800ae3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae16:	4b88      	ldr	r3, [pc, #544]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae22:	d10b      	bne.n	800ae3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae24:	4b84      	ldr	r3, [pc, #528]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d05b      	beq.n	800aee8 <HAL_RCC_OscConfig+0x124>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d157      	bne.n	800aee8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e25a      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae44:	d106      	bne.n	800ae54 <HAL_RCC_OscConfig+0x90>
 800ae46:	4b7c      	ldr	r3, [pc, #496]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a7b      	ldr	r2, [pc, #492]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	e01d      	b.n	800ae90 <HAL_RCC_OscConfig+0xcc>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae5c:	d10c      	bne.n	800ae78 <HAL_RCC_OscConfig+0xb4>
 800ae5e:	4b76      	ldr	r3, [pc, #472]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a75      	ldr	r2, [pc, #468]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	4b73      	ldr	r3, [pc, #460]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a72      	ldr	r2, [pc, #456]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	e00b      	b.n	800ae90 <HAL_RCC_OscConfig+0xcc>
 800ae78:	4b6f      	ldr	r3, [pc, #444]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a6e      	ldr	r2, [pc, #440]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	4b6c      	ldr	r3, [pc, #432]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a6b      	ldr	r2, [pc, #428]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800ae8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d013      	beq.n	800aec0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae98:	f7fe fd3a 	bl	8009910 <HAL_GetTick>
 800ae9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aea0:	f7fe fd36 	bl	8009910 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b64      	cmp	r3, #100	; 0x64
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e21f      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aeb2:	4b61      	ldr	r3, [pc, #388]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f0      	beq.n	800aea0 <HAL_RCC_OscConfig+0xdc>
 800aebe:	e014      	b.n	800aeea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec0:	f7fe fd26 	bl	8009910 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aec8:	f7fe fd22 	bl	8009910 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b64      	cmp	r3, #100	; 0x64
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e20b      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aeda:	4b57      	ldr	r3, [pc, #348]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1f0      	bne.n	800aec8 <HAL_RCC_OscConfig+0x104>
 800aee6:	e000      	b.n	800aeea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d06f      	beq.n	800afd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800aef6:	4b50      	ldr	r3, [pc, #320]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f003 030c 	and.w	r3, r3, #12
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d017      	beq.n	800af32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af02:	4b4d      	ldr	r3, [pc, #308]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af0a:	2b08      	cmp	r3, #8
 800af0c:	d105      	bne.n	800af1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af0e:	4b4a      	ldr	r3, [pc, #296]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af1a:	4b47      	ldr	r3, [pc, #284]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af22:	2b0c      	cmp	r3, #12
 800af24:	d11c      	bne.n	800af60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d116      	bne.n	800af60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af32:	4b41      	ldr	r3, [pc, #260]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d005      	beq.n	800af4a <HAL_RCC_OscConfig+0x186>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d001      	beq.n	800af4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e1d3      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af4a:	4b3b      	ldr	r3, [pc, #236]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	4937      	ldr	r1, [pc, #220]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af5e:	e03a      	b.n	800afd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d020      	beq.n	800afaa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af68:	4b34      	ldr	r3, [pc, #208]	; (800b03c <HAL_RCC_OscConfig+0x278>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af6e:	f7fe fccf 	bl	8009910 <HAL_GetTick>
 800af72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af74:	e008      	b.n	800af88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af76:	f7fe fccb 	bl	8009910 <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	2b02      	cmp	r3, #2
 800af82:	d901      	bls.n	800af88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e1b4      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af88:	4b2b      	ldr	r3, [pc, #172]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0f0      	beq.n	800af76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af94:	4b28      	ldr	r3, [pc, #160]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	4925      	ldr	r1, [pc, #148]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	600b      	str	r3, [r1, #0]
 800afa8:	e015      	b.n	800afd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afaa:	4b24      	ldr	r3, [pc, #144]	; (800b03c <HAL_RCC_OscConfig+0x278>)
 800afac:	2200      	movs	r2, #0
 800afae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb0:	f7fe fcae 	bl	8009910 <HAL_GetTick>
 800afb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afb6:	e008      	b.n	800afca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afb8:	f7fe fcaa 	bl	8009910 <HAL_GetTick>
 800afbc:	4602      	mov	r2, r0
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d901      	bls.n	800afca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e193      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afca:	4b1b      	ldr	r3, [pc, #108]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1f0      	bne.n	800afb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d036      	beq.n	800b050 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d016      	beq.n	800b018 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <HAL_RCC_OscConfig+0x27c>)
 800afec:	2201      	movs	r2, #1
 800afee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aff0:	f7fe fc8e 	bl	8009910 <HAL_GetTick>
 800aff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aff6:	e008      	b.n	800b00a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aff8:	f7fe fc8a 	bl	8009910 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d901      	bls.n	800b00a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e173      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <HAL_RCC_OscConfig+0x274>)
 800b00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0f0      	beq.n	800aff8 <HAL_RCC_OscConfig+0x234>
 800b016:	e01b      	b.n	800b050 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b018:	4b09      	ldr	r3, [pc, #36]	; (800b040 <HAL_RCC_OscConfig+0x27c>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b01e:	f7fe fc77 	bl	8009910 <HAL_GetTick>
 800b022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b024:	e00e      	b.n	800b044 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b026:	f7fe fc73 	bl	8009910 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	2b02      	cmp	r3, #2
 800b032:	d907      	bls.n	800b044 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e15c      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
 800b038:	40023800 	.word	0x40023800
 800b03c:	42470000 	.word	0x42470000
 800b040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b044:	4b8a      	ldr	r3, [pc, #552]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b048:	f003 0302 	and.w	r3, r3, #2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1ea      	bne.n	800b026 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8097 	beq.w	800b18c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b05e:	2300      	movs	r3, #0
 800b060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b062:	4b83      	ldr	r3, [pc, #524]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10f      	bne.n	800b08e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
 800b072:	4b7f      	ldr	r3, [pc, #508]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	4a7e      	ldr	r2, [pc, #504]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b07c:	6413      	str	r3, [r2, #64]	; 0x40
 800b07e:	4b7c      	ldr	r3, [pc, #496]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b086:	60bb      	str	r3, [r7, #8]
 800b088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b08a:	2301      	movs	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b08e:	4b79      	ldr	r3, [pc, #484]	; (800b274 <HAL_RCC_OscConfig+0x4b0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b096:	2b00      	cmp	r3, #0
 800b098:	d118      	bne.n	800b0cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b09a:	4b76      	ldr	r3, [pc, #472]	; (800b274 <HAL_RCC_OscConfig+0x4b0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a75      	ldr	r2, [pc, #468]	; (800b274 <HAL_RCC_OscConfig+0x4b0>)
 800b0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0a6:	f7fe fc33 	bl	8009910 <HAL_GetTick>
 800b0aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ac:	e008      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ae:	f7fe fc2f 	bl	8009910 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d901      	bls.n	800b0c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e118      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0c0:	4b6c      	ldr	r3, [pc, #432]	; (800b274 <HAL_RCC_OscConfig+0x4b0>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0f0      	beq.n	800b0ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d106      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x31e>
 800b0d4:	4b66      	ldr	r3, [pc, #408]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d8:	4a65      	ldr	r2, [pc, #404]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	6713      	str	r3, [r2, #112]	; 0x70
 800b0e0:	e01c      	b.n	800b11c <HAL_RCC_OscConfig+0x358>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d10c      	bne.n	800b104 <HAL_RCC_OscConfig+0x340>
 800b0ea:	4b61      	ldr	r3, [pc, #388]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ee:	4a60      	ldr	r2, [pc, #384]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0f0:	f043 0304 	orr.w	r3, r3, #4
 800b0f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b0f6:	4b5e      	ldr	r3, [pc, #376]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fa:	4a5d      	ldr	r2, [pc, #372]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	6713      	str	r3, [r2, #112]	; 0x70
 800b102:	e00b      	b.n	800b11c <HAL_RCC_OscConfig+0x358>
 800b104:	4b5a      	ldr	r3, [pc, #360]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b108:	4a59      	ldr	r2, [pc, #356]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b10a:	f023 0301 	bic.w	r3, r3, #1
 800b10e:	6713      	str	r3, [r2, #112]	; 0x70
 800b110:	4b57      	ldr	r3, [pc, #348]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b114:	4a56      	ldr	r2, [pc, #344]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b116:	f023 0304 	bic.w	r3, r3, #4
 800b11a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d015      	beq.n	800b150 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b124:	f7fe fbf4 	bl	8009910 <HAL_GetTick>
 800b128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b12a:	e00a      	b.n	800b142 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b12c:	f7fe fbf0 	bl	8009910 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d901      	bls.n	800b142 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	e0d7      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b142:	4b4b      	ldr	r3, [pc, #300]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0ee      	beq.n	800b12c <HAL_RCC_OscConfig+0x368>
 800b14e:	e014      	b.n	800b17a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b150:	f7fe fbde 	bl	8009910 <HAL_GetTick>
 800b154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b156:	e00a      	b.n	800b16e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b158:	f7fe fbda 	bl	8009910 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	f241 3288 	movw	r2, #5000	; 0x1388
 800b166:	4293      	cmp	r3, r2
 800b168:	d901      	bls.n	800b16e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e0c1      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b16e:	4b40      	ldr	r3, [pc, #256]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1ee      	bne.n	800b158 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d105      	bne.n	800b18c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b180:	4b3b      	ldr	r3, [pc, #236]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b184:	4a3a      	ldr	r2, [pc, #232]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b18a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 80ad 	beq.w	800b2f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b196:	4b36      	ldr	r3, [pc, #216]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f003 030c 	and.w	r3, r3, #12
 800b19e:	2b08      	cmp	r3, #8
 800b1a0:	d060      	beq.n	800b264 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d145      	bne.n	800b236 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1aa:	4b33      	ldr	r3, [pc, #204]	; (800b278 <HAL_RCC_OscConfig+0x4b4>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b0:	f7fe fbae 	bl	8009910 <HAL_GetTick>
 800b1b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1b6:	e008      	b.n	800b1ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1b8:	f7fe fbaa 	bl	8009910 <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e093      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1ca:	4b29      	ldr	r3, [pc, #164]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1f0      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69da      	ldr	r2, [r3, #28]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e4:	019b      	lsls	r3, r3, #6
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	041b      	lsls	r3, r3, #16
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	061b      	lsls	r3, r3, #24
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b200:	071b      	lsls	r3, r3, #28
 800b202:	491b      	ldr	r1, [pc, #108]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b204:	4313      	orrs	r3, r2
 800b206:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b208:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <HAL_RCC_OscConfig+0x4b4>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b20e:	f7fe fb7f 	bl	8009910 <HAL_GetTick>
 800b212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b214:	e008      	b.n	800b228 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b216:	f7fe fb7b 	bl	8009910 <HAL_GetTick>
 800b21a:	4602      	mov	r2, r0
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	2b02      	cmp	r3, #2
 800b222:	d901      	bls.n	800b228 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e064      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b228:	4b11      	ldr	r3, [pc, #68]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0f0      	beq.n	800b216 <HAL_RCC_OscConfig+0x452>
 800b234:	e05c      	b.n	800b2f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b236:	4b10      	ldr	r3, [pc, #64]	; (800b278 <HAL_RCC_OscConfig+0x4b4>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b23c:	f7fe fb68 	bl	8009910 <HAL_GetTick>
 800b240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b242:	e008      	b.n	800b256 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b244:	f7fe fb64 	bl	8009910 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d901      	bls.n	800b256 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e04d      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b256:	4b06      	ldr	r3, [pc, #24]	; (800b270 <HAL_RCC_OscConfig+0x4ac>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f0      	bne.n	800b244 <HAL_RCC_OscConfig+0x480>
 800b262:	e045      	b.n	800b2f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d107      	bne.n	800b27c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e040      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
 800b270:	40023800 	.word	0x40023800
 800b274:	40007000 	.word	0x40007000
 800b278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b27c:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <HAL_RCC_OscConfig+0x538>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d030      	beq.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b294:	429a      	cmp	r2, r3
 800b296:	d129      	bne.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d122      	bne.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d119      	bne.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	085b      	lsrs	r3, r3, #1
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d10f      	bne.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d107      	bne.n	800b2ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d001      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e000      	b.n	800b2f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	40023800 	.word	0x40023800

0800b300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e07b      	b.n	800b40a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d108      	bne.n	800b32c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b322:	d009      	beq.n	800b338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	61da      	str	r2, [r3, #28]
 800b32a:	e005      	b.n	800b338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7fa ff22 	bl	800619c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2202      	movs	r2, #2
 800b35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b36e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b380:	431a      	orrs	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	431a      	orrs	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3bc:	ea42 0103 	orr.w	r1, r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	f003 0104 	and.w	r1, r3, #4
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	f003 0210 	and.w	r2, r3, #16
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	69da      	ldr	r2, [r3, #28]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b088      	sub	sp, #32
 800b416:	af00      	add	r7, sp, #0
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	603b      	str	r3, [r7, #0]
 800b41e:	4613      	mov	r3, r2
 800b420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d101      	bne.n	800b434 <HAL_SPI_Transmit+0x22>
 800b430:	2302      	movs	r3, #2
 800b432:	e126      	b.n	800b682 <HAL_SPI_Transmit+0x270>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b43c:	f7fe fa68 	bl	8009910 <HAL_GetTick>
 800b440:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d002      	beq.n	800b458 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b452:	2302      	movs	r3, #2
 800b454:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b456:	e10b      	b.n	800b670 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <HAL_SPI_Transmit+0x52>
 800b45e:	88fb      	ldrh	r3, [r7, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b468:	e102      	b.n	800b670 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2203      	movs	r2, #3
 800b46e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	88fa      	ldrh	r2, [r7, #6]
 800b482:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	88fa      	ldrh	r2, [r7, #6]
 800b488:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4b0:	d10f      	bne.n	800b4d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4dc:	2b40      	cmp	r3, #64	; 0x40
 800b4de:	d007      	beq.n	800b4f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f8:	d14b      	bne.n	800b592 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <HAL_SPI_Transmit+0xf6>
 800b502:	8afb      	ldrh	r3, [r7, #22]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d13e      	bne.n	800b586 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50c:	881a      	ldrh	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b518:	1c9a      	adds	r2, r3, #2
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b522:	b29b      	uxth	r3, r3
 800b524:	3b01      	subs	r3, #1
 800b526:	b29a      	uxth	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b52c:	e02b      	b.n	800b586 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d112      	bne.n	800b562 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	881a      	ldrh	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54c:	1c9a      	adds	r2, r3, #2
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b556:	b29b      	uxth	r3, r3
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b560:	e011      	b.n	800b586 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b562:	f7fe f9d5 	bl	8009910 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d803      	bhi.n	800b57a <HAL_SPI_Transmit+0x168>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d102      	bne.n	800b580 <HAL_SPI_Transmit+0x16e>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d102      	bne.n	800b586 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b584:	e074      	b.n	800b670 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1ce      	bne.n	800b52e <HAL_SPI_Transmit+0x11c>
 800b590:	e04c      	b.n	800b62c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <HAL_SPI_Transmit+0x18e>
 800b59a:	8afb      	ldrh	r3, [r7, #22]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d140      	bne.n	800b622 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	330c      	adds	r3, #12
 800b5aa:	7812      	ldrb	r2, [r2, #0]
 800b5ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b5c6:	e02c      	b.n	800b622 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d113      	bne.n	800b5fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5fc:	e011      	b.n	800b622 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5fe:	f7fe f987 	bl	8009910 <HAL_GetTick>
 800b602:	4602      	mov	r2, r0
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d803      	bhi.n	800b616 <HAL_SPI_Transmit+0x204>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d102      	bne.n	800b61c <HAL_SPI_Transmit+0x20a>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b620:	e026      	b.n	800b670 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b626:	b29b      	uxth	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1cd      	bne.n	800b5c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fbcb 	bl	800bdcc <SPI_EndRxTxTransaction>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2220      	movs	r2, #32
 800b640:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b64a:	2300      	movs	r3, #0
 800b64c:	613b      	str	r3, [r7, #16]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	613b      	str	r3, [r7, #16]
 800b65e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	77fb      	strb	r3, [r7, #31]
 800b66c:	e000      	b.n	800b670 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b66e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b680:	7ffb      	ldrb	r3, [r7, #31]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3720      	adds	r7, #32
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b088      	sub	sp, #32
 800b68e:	af02      	add	r7, sp, #8
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	603b      	str	r3, [r7, #0]
 800b696:	4613      	mov	r3, r2
 800b698:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6a6:	d112      	bne.n	800b6ce <HAL_SPI_Receive+0x44>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10e      	bne.n	800b6ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2204      	movs	r2, #4
 800b6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b6b8:	88fa      	ldrh	r2, [r7, #6]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f8f1 	bl	800b8ac <HAL_SPI_TransmitReceive>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	e0ea      	b.n	800b8a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d101      	bne.n	800b6dc <HAL_SPI_Receive+0x52>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e0e3      	b.n	800b8a4 <HAL_SPI_Receive+0x21a>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6e4:	f7fe f914 	bl	8009910 <HAL_GetTick>
 800b6e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d002      	beq.n	800b6fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6fa:	e0ca      	b.n	800b892 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <HAL_SPI_Receive+0x7e>
 800b702:	88fb      	ldrh	r3, [r7, #6]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b70c:	e0c1      	b.n	800b892 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2204      	movs	r2, #4
 800b712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	88fa      	ldrh	r2, [r7, #6]
 800b726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	88fa      	ldrh	r2, [r7, #6]
 800b72c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b754:	d10f      	bne.n	800b776 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b774:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	d007      	beq.n	800b794 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b792:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d162      	bne.n	800b862 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b79c:	e02e      	b.n	800b7fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d115      	bne.n	800b7d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f103 020c 	add.w	r2, r3, #12
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7d6:	e011      	b.n	800b7fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7d8:	f7fe f89a 	bl	8009910 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d803      	bhi.n	800b7f0 <HAL_SPI_Receive+0x166>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d102      	bne.n	800b7f6 <HAL_SPI_Receive+0x16c>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d102      	bne.n	800b7fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7fa:	e04a      	b.n	800b892 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b800:	b29b      	uxth	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1cb      	bne.n	800b79e <HAL_SPI_Receive+0x114>
 800b806:	e031      	b.n	800b86c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b01      	cmp	r3, #1
 800b814:	d113      	bne.n	800b83e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	b292      	uxth	r2, r2
 800b822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	1c9a      	adds	r2, r3, #2
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29a      	uxth	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b83c:	e011      	b.n	800b862 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b83e:	f7fe f867 	bl	8009910 <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d803      	bhi.n	800b856 <HAL_SPI_Receive+0x1cc>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d102      	bne.n	800b85c <HAL_SPI_Receive+0x1d2>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b85c:	2303      	movs	r3, #3
 800b85e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b860:	e017      	b.n	800b892 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b866:	b29b      	uxth	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1cd      	bne.n	800b808 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 fa45 	bl	800bd00 <SPI_EndRxTransaction>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2220      	movs	r2, #32
 800b880:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	75fb      	strb	r3, [r7, #23]
 800b88e:	e000      	b.n	800b892 <HAL_SPI_Receive+0x208>
  }

error :
 800b890:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08c      	sub	sp, #48	; 0x30
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d101      	bne.n	800b8d2 <HAL_SPI_TransmitReceive+0x26>
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e18a      	b.n	800bbe8 <HAL_SPI_TransmitReceive+0x33c>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8da:	f7fe f819 	bl	8009910 <HAL_GetTick>
 800b8de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8f0:	887b      	ldrh	r3, [r7, #2]
 800b8f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d00f      	beq.n	800b91c <HAL_SPI_TransmitReceive+0x70>
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b902:	d107      	bne.n	800b914 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <HAL_SPI_TransmitReceive+0x68>
 800b90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b910:	2b04      	cmp	r3, #4
 800b912:	d003      	beq.n	800b91c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b914:	2302      	movs	r3, #2
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b91a:	e15b      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d005      	beq.n	800b92e <HAL_SPI_TransmitReceive+0x82>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <HAL_SPI_TransmitReceive+0x82>
 800b928:	887b      	ldrh	r3, [r7, #2]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b934:	e14e      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d003      	beq.n	800b94a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2205      	movs	r2, #5
 800b946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	887a      	ldrh	r2, [r7, #2]
 800b95a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	887a      	ldrh	r2, [r7, #2]
 800b960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	887a      	ldrh	r2, [r7, #2]
 800b96c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	887a      	ldrh	r2, [r7, #2]
 800b972:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98a:	2b40      	cmp	r3, #64	; 0x40
 800b98c:	d007      	beq.n	800b99e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a6:	d178      	bne.n	800ba9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <HAL_SPI_TransmitReceive+0x10a>
 800b9b0:	8b7b      	ldrh	r3, [r7, #26]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d166      	bne.n	800ba84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	881a      	ldrh	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c6:	1c9a      	adds	r2, r3, #2
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9da:	e053      	b.n	800ba84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d11b      	bne.n	800ba22 <HAL_SPI_TransmitReceive+0x176>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d016      	beq.n	800ba22 <HAL_SPI_TransmitReceive+0x176>
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d113      	bne.n	800ba22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fe:	881a      	ldrh	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0a:	1c9a      	adds	r2, r3, #2
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d119      	bne.n	800ba64 <HAL_SPI_TransmitReceive+0x1b8>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d014      	beq.n	800ba64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68da      	ldr	r2, [r3, #12]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	b292      	uxth	r2, r2
 800ba46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	1c9a      	adds	r2, r3, #2
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba60:	2301      	movs	r3, #1
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba64:	f7fd ff54 	bl	8009910 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d807      	bhi.n	800ba84 <HAL_SPI_TransmitReceive+0x1d8>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d003      	beq.n	800ba84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba82:	e0a7      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1a6      	bne.n	800b9dc <HAL_SPI_TransmitReceive+0x130>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1a1      	bne.n	800b9dc <HAL_SPI_TransmitReceive+0x130>
 800ba98:	e07c      	b.n	800bb94 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <HAL_SPI_TransmitReceive+0x1fc>
 800baa2:	8b7b      	ldrh	r3, [r7, #26]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d16b      	bne.n	800bb80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	330c      	adds	r3, #12
 800bab2:	7812      	ldrb	r2, [r2, #0]
 800bab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bace:	e057      	b.n	800bb80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b02      	cmp	r3, #2
 800badc:	d11c      	bne.n	800bb18 <HAL_SPI_TransmitReceive+0x26c>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d017      	beq.n	800bb18 <HAL_SPI_TransmitReceive+0x26c>
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d114      	bne.n	800bb18 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	7812      	ldrb	r2, [r2, #0]
 800bafa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d119      	bne.n	800bb5a <HAL_SPI_TransmitReceive+0x2ae>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d014      	beq.n	800bb5a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb56:	2301      	movs	r3, #1
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb5a:	f7fd fed9 	bl	8009910 <HAL_GetTick>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d803      	bhi.n	800bb72 <HAL_SPI_TransmitReceive+0x2c6>
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d102      	bne.n	800bb78 <HAL_SPI_TransmitReceive+0x2cc>
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb7e:	e029      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1a2      	bne.n	800bad0 <HAL_SPI_TransmitReceive+0x224>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d19d      	bne.n	800bad0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 f917 	bl	800bdcc <SPI_EndRxTxTransaction>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d006      	beq.n	800bbb2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2220      	movs	r2, #32
 800bbae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bbb0:	e010      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10b      	bne.n	800bbd2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	e000      	b.n	800bbd4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bbd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3730      	adds	r7, #48	; 0x30
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc00:	f7fd fe86 	bl	8009910 <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc10:	f7fd fe7e 	bl	8009910 <HAL_GetTick>
 800bc14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc16:	4b39      	ldr	r3, [pc, #228]	; (800bcfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	015b      	lsls	r3, r3, #5
 800bc1c:	0d1b      	lsrs	r3, r3, #20
 800bc1e:	69fa      	ldr	r2, [r7, #28]
 800bc20:	fb02 f303 	mul.w	r3, r2, r3
 800bc24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc26:	e054      	b.n	800bcd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d050      	beq.n	800bcd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc30:	f7fd fe6e 	bl	8009910 <HAL_GetTick>
 800bc34:	4602      	mov	r2, r0
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d902      	bls.n	800bc46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d13d      	bne.n	800bcc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc5e:	d111      	bne.n	800bc84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc68:	d004      	beq.n	800bc74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc72:	d107      	bne.n	800bc84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc8c:	d10f      	bne.n	800bcae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bcac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e017      	b.n	800bcf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689a      	ldr	r2, [r3, #8]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	bf0c      	ite	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	2300      	movne	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d19b      	bne.n	800bc28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000198 	.word	0x20000198

0800bd00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd14:	d111      	bne.n	800bd3a <SPI_EndRxTransaction+0x3a>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd1e:	d004      	beq.n	800bd2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd28:	d107      	bne.n	800bd3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd42:	d12a      	bne.n	800bd9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd4c:	d012      	beq.n	800bd74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2180      	movs	r1, #128	; 0x80
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff ff49 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02d      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd68:	f043 0220 	orr.w	r2, r3, #32
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e026      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff ff36 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01a      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd8e:	f043 0220 	orr.w	r2, r3, #32
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e013      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2200      	movs	r2, #0
 800bda2:	2101      	movs	r1, #1
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f7ff ff23 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb4:	f043 0220 	orr.w	r2, r3, #32
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e000      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bdd8:	4b1b      	ldr	r3, [pc, #108]	; (800be48 <SPI_EndRxTxTransaction+0x7c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a1b      	ldr	r2, [pc, #108]	; (800be4c <SPI_EndRxTxTransaction+0x80>)
 800bdde:	fba2 2303 	umull	r2, r3, r2, r3
 800bde2:	0d5b      	lsrs	r3, r3, #21
 800bde4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdf6:	d112      	bne.n	800be1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	2180      	movs	r1, #128	; 0x80
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fef4 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d016      	beq.n	800be3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be12:	f043 0220 	orr.w	r2, r3, #32
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e00f      	b.n	800be3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00a      	beq.n	800be3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	3b01      	subs	r3, #1
 800be28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b80      	cmp	r3, #128	; 0x80
 800be36:	d0f2      	beq.n	800be1e <SPI_EndRxTxTransaction+0x52>
 800be38:	e000      	b.n	800be3c <SPI_EndRxTxTransaction+0x70>
        break;
 800be3a:	bf00      	nop
  }

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20000198 	.word	0x20000198
 800be4c:	165e9f81 	.word	0x165e9f81

0800be50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e041      	b.n	800bee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7fa fa46 	bl	8006308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f000 fd52 	bl	800c938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d001      	beq.n	800bf08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e046      	b.n	800bf96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a23      	ldr	r2, [pc, #140]	; (800bfa4 <HAL_TIM_Base_Start+0xb4>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d022      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf22:	d01d      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a1f      	ldr	r2, [pc, #124]	; (800bfa8 <HAL_TIM_Base_Start+0xb8>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d018      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a1e      	ldr	r2, [pc, #120]	; (800bfac <HAL_TIM_Base_Start+0xbc>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d013      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a1c      	ldr	r2, [pc, #112]	; (800bfb0 <HAL_TIM_Base_Start+0xc0>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d00e      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a1b      	ldr	r2, [pc, #108]	; (800bfb4 <HAL_TIM_Base_Start+0xc4>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d009      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a19      	ldr	r2, [pc, #100]	; (800bfb8 <HAL_TIM_Base_Start+0xc8>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d004      	beq.n	800bf60 <HAL_TIM_Base_Start+0x70>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a18      	ldr	r2, [pc, #96]	; (800bfbc <HAL_TIM_Base_Start+0xcc>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d111      	bne.n	800bf84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b06      	cmp	r3, #6
 800bf70:	d010      	beq.n	800bf94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f042 0201 	orr.w	r2, r2, #1
 800bf80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf82:	e007      	b.n	800bf94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0201 	orr.w	r2, r2, #1
 800bf92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40010000 	.word	0x40010000
 800bfa8:	40000400 	.word	0x40000400
 800bfac:	40000800 	.word	0x40000800
 800bfb0:	40000c00 	.word	0x40000c00
 800bfb4:	40010400 	.word	0x40010400
 800bfb8:	40014000 	.word	0x40014000
 800bfbc:	40001800 	.word	0x40001800

0800bfc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d001      	beq.n	800bfd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e04e      	b.n	800c076 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0201 	orr.w	r2, r2, #1
 800bfee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a23      	ldr	r2, [pc, #140]	; (800c084 <HAL_TIM_Base_Start_IT+0xc4>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d022      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c002:	d01d      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a1f      	ldr	r2, [pc, #124]	; (800c088 <HAL_TIM_Base_Start_IT+0xc8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d018      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a1e      	ldr	r2, [pc, #120]	; (800c08c <HAL_TIM_Base_Start_IT+0xcc>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d013      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1c      	ldr	r2, [pc, #112]	; (800c090 <HAL_TIM_Base_Start_IT+0xd0>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d00e      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a1b      	ldr	r2, [pc, #108]	; (800c094 <HAL_TIM_Base_Start_IT+0xd4>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d009      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a19      	ldr	r2, [pc, #100]	; (800c098 <HAL_TIM_Base_Start_IT+0xd8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d004      	beq.n	800c040 <HAL_TIM_Base_Start_IT+0x80>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a18      	ldr	r2, [pc, #96]	; (800c09c <HAL_TIM_Base_Start_IT+0xdc>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d111      	bne.n	800c064 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d010      	beq.n	800c074 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f042 0201 	orr.w	r2, r2, #1
 800c060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c062:	e007      	b.n	800c074 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0201 	orr.w	r2, r2, #1
 800c072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	40010000 	.word	0x40010000
 800c088:	40000400 	.word	0x40000400
 800c08c:	40000800 	.word	0x40000800
 800c090:	40000c00 	.word	0x40000c00
 800c094:	40010400 	.word	0x40010400
 800c098:	40014000 	.word	0x40014000
 800c09c:	40001800 	.word	0x40001800

0800c0a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e041      	b.n	800c136 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f839 	bl	800c13e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f000 fc2a 	bl	800c938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d109      	bne.n	800c178 <HAL_TIM_PWM_Start+0x24>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	bf14      	ite	ne
 800c170:	2301      	movne	r3, #1
 800c172:	2300      	moveq	r3, #0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	e022      	b.n	800c1be <HAL_TIM_PWM_Start+0x6a>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	d109      	bne.n	800c192 <HAL_TIM_PWM_Start+0x3e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b01      	cmp	r3, #1
 800c188:	bf14      	ite	ne
 800c18a:	2301      	movne	r3, #1
 800c18c:	2300      	moveq	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	e015      	b.n	800c1be <HAL_TIM_PWM_Start+0x6a>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b08      	cmp	r3, #8
 800c196:	d109      	bne.n	800c1ac <HAL_TIM_PWM_Start+0x58>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	bf14      	ite	ne
 800c1a4:	2301      	movne	r3, #1
 800c1a6:	2300      	moveq	r3, #0
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	e008      	b.n	800c1be <HAL_TIM_PWM_Start+0x6a>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	bf14      	ite	ne
 800c1b8:	2301      	movne	r3, #1
 800c1ba:	2300      	moveq	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e07c      	b.n	800c2c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <HAL_TIM_PWM_Start+0x82>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1d4:	e013      	b.n	800c1fe <HAL_TIM_PWM_Start+0xaa>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	d104      	bne.n	800c1e6 <HAL_TIM_PWM_Start+0x92>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1e4:	e00b      	b.n	800c1fe <HAL_TIM_PWM_Start+0xaa>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b08      	cmp	r3, #8
 800c1ea:	d104      	bne.n	800c1f6 <HAL_TIM_PWM_Start+0xa2>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1f4:	e003      	b.n	800c1fe <HAL_TIM_PWM_Start+0xaa>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2201      	movs	r2, #1
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fe80 	bl	800cf0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a2d      	ldr	r2, [pc, #180]	; (800c2c8 <HAL_TIM_PWM_Start+0x174>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d004      	beq.n	800c220 <HAL_TIM_PWM_Start+0xcc>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a2c      	ldr	r2, [pc, #176]	; (800c2cc <HAL_TIM_PWM_Start+0x178>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d101      	bne.n	800c224 <HAL_TIM_PWM_Start+0xd0>
 800c220:	2301      	movs	r3, #1
 800c222:	e000      	b.n	800c226 <HAL_TIM_PWM_Start+0xd2>
 800c224:	2300      	movs	r3, #0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a22      	ldr	r2, [pc, #136]	; (800c2c8 <HAL_TIM_PWM_Start+0x174>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d022      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24c:	d01d      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a1f      	ldr	r2, [pc, #124]	; (800c2d0 <HAL_TIM_PWM_Start+0x17c>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d018      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a1d      	ldr	r2, [pc, #116]	; (800c2d4 <HAL_TIM_PWM_Start+0x180>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d013      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a1c      	ldr	r2, [pc, #112]	; (800c2d8 <HAL_TIM_PWM_Start+0x184>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d00e      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a16      	ldr	r2, [pc, #88]	; (800c2cc <HAL_TIM_PWM_Start+0x178>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d009      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a18      	ldr	r2, [pc, #96]	; (800c2dc <HAL_TIM_PWM_Start+0x188>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d004      	beq.n	800c28a <HAL_TIM_PWM_Start+0x136>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a16      	ldr	r2, [pc, #88]	; (800c2e0 <HAL_TIM_PWM_Start+0x18c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d111      	bne.n	800c2ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f003 0307 	and.w	r3, r3, #7
 800c294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b06      	cmp	r3, #6
 800c29a:	d010      	beq.n	800c2be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0201 	orr.w	r2, r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ac:	e007      	b.n	800c2be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0201 	orr.w	r2, r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	40010000 	.word	0x40010000
 800c2cc:	40010400 	.word	0x40010400
 800c2d0:	40000400 	.word	0x40000400
 800c2d4:	40000800 	.word	0x40000800
 800c2d8:	40000c00 	.word	0x40000c00
 800c2dc:	40014000 	.word	0x40014000
 800c2e0:	40001800 	.word	0x40001800

0800c2e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fe08 	bl	800cf0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a2e      	ldr	r2, [pc, #184]	; (800c3bc <HAL_TIM_PWM_Stop+0xd8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d004      	beq.n	800c310 <HAL_TIM_PWM_Stop+0x2c>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a2d      	ldr	r2, [pc, #180]	; (800c3c0 <HAL_TIM_PWM_Stop+0xdc>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d101      	bne.n	800c314 <HAL_TIM_PWM_Stop+0x30>
 800c310:	2301      	movs	r3, #1
 800c312:	e000      	b.n	800c316 <HAL_TIM_PWM_Stop+0x32>
 800c314:	2300      	movs	r3, #0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d017      	beq.n	800c34a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6a1a      	ldr	r2, [r3, #32]
 800c320:	f241 1311 	movw	r3, #4369	; 0x1111
 800c324:	4013      	ands	r3, r2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10f      	bne.n	800c34a <HAL_TIM_PWM_Stop+0x66>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6a1a      	ldr	r2, [r3, #32]
 800c330:	f240 4344 	movw	r3, #1092	; 0x444
 800c334:	4013      	ands	r3, r2
 800c336:	2b00      	cmp	r3, #0
 800c338:	d107      	bne.n	800c34a <HAL_TIM_PWM_Stop+0x66>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6a1a      	ldr	r2, [r3, #32]
 800c350:	f241 1311 	movw	r3, #4369	; 0x1111
 800c354:	4013      	ands	r3, r2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10f      	bne.n	800c37a <HAL_TIM_PWM_Stop+0x96>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6a1a      	ldr	r2, [r3, #32]
 800c360:	f240 4344 	movw	r3, #1092	; 0x444
 800c364:	4013      	ands	r3, r2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d107      	bne.n	800c37a <HAL_TIM_PWM_Stop+0x96>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f022 0201 	bic.w	r2, r2, #1
 800c378:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <HAL_TIM_PWM_Stop+0xa6>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c388:	e013      	b.n	800c3b2 <HAL_TIM_PWM_Stop+0xce>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d104      	bne.n	800c39a <HAL_TIM_PWM_Stop+0xb6>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c398:	e00b      	b.n	800c3b2 <HAL_TIM_PWM_Stop+0xce>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	d104      	bne.n	800c3aa <HAL_TIM_PWM_Stop+0xc6>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3a8:	e003      	b.n	800c3b2 <HAL_TIM_PWM_Stop+0xce>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	40010000 	.word	0x40010000
 800c3c0:	40010400 	.word	0x40010400

0800c3c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d122      	bne.n	800c420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	f003 0302 	and.w	r3, r3, #2
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d11b      	bne.n	800c420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f06f 0202 	mvn.w	r2, #2
 800c3f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	f003 0303 	and.w	r3, r3, #3
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fa77 	bl	800c8fa <HAL_TIM_IC_CaptureCallback>
 800c40c:	e005      	b.n	800c41a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fa69 	bl	800c8e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fa7a 	bl	800c90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	2b04      	cmp	r3, #4
 800c42c:	d122      	bne.n	800c474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f003 0304 	and.w	r3, r3, #4
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d11b      	bne.n	800c474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f06f 0204 	mvn.w	r2, #4
 800c444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2202      	movs	r2, #2
 800c44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa4d 	bl	800c8fa <HAL_TIM_IC_CaptureCallback>
 800c460:	e005      	b.n	800c46e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa3f 	bl	800c8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fa50 	bl	800c90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f003 0308 	and.w	r3, r3, #8
 800c47e:	2b08      	cmp	r3, #8
 800c480:	d122      	bne.n	800c4c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f003 0308 	and.w	r3, r3, #8
 800c48c:	2b08      	cmp	r3, #8
 800c48e:	d11b      	bne.n	800c4c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f06f 0208 	mvn.w	r2, #8
 800c498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2204      	movs	r2, #4
 800c49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	f003 0303 	and.w	r3, r3, #3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fa23 	bl	800c8fa <HAL_TIM_IC_CaptureCallback>
 800c4b4:	e005      	b.n	800c4c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa15 	bl	800c8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa26 	bl	800c90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	f003 0310 	and.w	r3, r3, #16
 800c4d2:	2b10      	cmp	r3, #16
 800c4d4:	d122      	bne.n	800c51c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b10      	cmp	r3, #16
 800c4e2:	d11b      	bne.n	800c51c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f06f 0210 	mvn.w	r2, #16
 800c4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	69db      	ldr	r3, [r3, #28]
 800c4fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f9f9 	bl	800c8fa <HAL_TIM_IC_CaptureCallback>
 800c508:	e005      	b.n	800c516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f9eb 	bl	800c8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f9fc 	bl	800c90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b01      	cmp	r3, #1
 800c528:	d10e      	bne.n	800c548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b01      	cmp	r3, #1
 800c536:	d107      	bne.n	800c548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f06f 0201 	mvn.w	r2, #1
 800c540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7f6 f974 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c552:	2b80      	cmp	r3, #128	; 0x80
 800c554:	d10e      	bne.n	800c574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c560:	2b80      	cmp	r3, #128	; 0x80
 800c562:	d107      	bne.n	800c574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c56c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fd78 	bl	800d064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c57e:	2b40      	cmp	r3, #64	; 0x40
 800c580:	d10e      	bne.n	800c5a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58c:	2b40      	cmp	r3, #64	; 0x40
 800c58e:	d107      	bne.n	800c5a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f9c1 	bl	800c922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	f003 0320 	and.w	r3, r3, #32
 800c5aa:	2b20      	cmp	r3, #32
 800c5ac:	d10e      	bne.n	800c5cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	f003 0320 	and.w	r3, r3, #32
 800c5b8:	2b20      	cmp	r3, #32
 800c5ba:	d107      	bne.n	800c5cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f06f 0220 	mvn.w	r2, #32
 800c5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fd42 	bl	800d050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d101      	bne.n	800c5f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	e0ae      	b.n	800c750 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b0c      	cmp	r3, #12
 800c5fe:	f200 809f 	bhi.w	800c740 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c602:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c63d 	.word	0x0800c63d
 800c60c:	0800c741 	.word	0x0800c741
 800c610:	0800c741 	.word	0x0800c741
 800c614:	0800c741 	.word	0x0800c741
 800c618:	0800c67d 	.word	0x0800c67d
 800c61c:	0800c741 	.word	0x0800c741
 800c620:	0800c741 	.word	0x0800c741
 800c624:	0800c741 	.word	0x0800c741
 800c628:	0800c6bf 	.word	0x0800c6bf
 800c62c:	0800c741 	.word	0x0800c741
 800c630:	0800c741 	.word	0x0800c741
 800c634:	0800c741 	.word	0x0800c741
 800c638:	0800c6ff 	.word	0x0800c6ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 fa18 	bl	800ca78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	699a      	ldr	r2, [r3, #24]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0208 	orr.w	r2, r2, #8
 800c656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	699a      	ldr	r2, [r3, #24]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f022 0204 	bic.w	r2, r2, #4
 800c666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6999      	ldr	r1, [r3, #24]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	691a      	ldr	r2, [r3, #16]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	430a      	orrs	r2, r1
 800c678:	619a      	str	r2, [r3, #24]
      break;
 800c67a:	e064      	b.n	800c746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68b9      	ldr	r1, [r7, #8]
 800c682:	4618      	mov	r0, r3
 800c684:	f000 fa68 	bl	800cb58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	699a      	ldr	r2, [r3, #24]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6999      	ldr	r1, [r3, #24]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	021a      	lsls	r2, r3, #8
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	619a      	str	r2, [r3, #24]
      break;
 800c6bc:	e043      	b.n	800c746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68b9      	ldr	r1, [r7, #8]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 fabd 	bl	800cc44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	69da      	ldr	r2, [r3, #28]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f042 0208 	orr.w	r2, r2, #8
 800c6d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	69da      	ldr	r2, [r3, #28]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f022 0204 	bic.w	r2, r2, #4
 800c6e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	69d9      	ldr	r1, [r3, #28]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	691a      	ldr	r2, [r3, #16]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	61da      	str	r2, [r3, #28]
      break;
 800c6fc:	e023      	b.n	800c746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 fb11 	bl	800cd2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	69da      	ldr	r2, [r3, #28]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	69da      	ldr	r2, [r3, #28]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	69d9      	ldr	r1, [r3, #28]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	021a      	lsls	r2, r3, #8
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	61da      	str	r2, [r3, #28]
      break;
 800c73e:	e002      	b.n	800c746 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	75fb      	strb	r3, [r7, #23]
      break;
 800c744:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d101      	bne.n	800c774 <HAL_TIM_ConfigClockSource+0x1c>
 800c770:	2302      	movs	r3, #2
 800c772:	e0b4      	b.n	800c8de <HAL_TIM_ConfigClockSource+0x186>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c79a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ac:	d03e      	beq.n	800c82c <HAL_TIM_ConfigClockSource+0xd4>
 800c7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7b2:	f200 8087 	bhi.w	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7ba:	f000 8086 	beq.w	800c8ca <HAL_TIM_ConfigClockSource+0x172>
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c2:	d87f      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7c4:	2b70      	cmp	r3, #112	; 0x70
 800c7c6:	d01a      	beq.n	800c7fe <HAL_TIM_ConfigClockSource+0xa6>
 800c7c8:	2b70      	cmp	r3, #112	; 0x70
 800c7ca:	d87b      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7cc:	2b60      	cmp	r3, #96	; 0x60
 800c7ce:	d050      	beq.n	800c872 <HAL_TIM_ConfigClockSource+0x11a>
 800c7d0:	2b60      	cmp	r3, #96	; 0x60
 800c7d2:	d877      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7d4:	2b50      	cmp	r3, #80	; 0x50
 800c7d6:	d03c      	beq.n	800c852 <HAL_TIM_ConfigClockSource+0xfa>
 800c7d8:	2b50      	cmp	r3, #80	; 0x50
 800c7da:	d873      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7dc:	2b40      	cmp	r3, #64	; 0x40
 800c7de:	d058      	beq.n	800c892 <HAL_TIM_ConfigClockSource+0x13a>
 800c7e0:	2b40      	cmp	r3, #64	; 0x40
 800c7e2:	d86f      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7e4:	2b30      	cmp	r3, #48	; 0x30
 800c7e6:	d064      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800c7e8:	2b30      	cmp	r3, #48	; 0x30
 800c7ea:	d86b      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d060      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800c7f0:	2b20      	cmp	r3, #32
 800c7f2:	d867      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d05c      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800c7f8:	2b10      	cmp	r3, #16
 800c7fa:	d05a      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800c7fc:	e062      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6818      	ldr	r0, [r3, #0]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	6899      	ldr	r1, [r3, #8]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f000 fb5d 	bl	800cecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	609a      	str	r2, [r3, #8]
      break;
 800c82a:	e04f      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6818      	ldr	r0, [r3, #0]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	6899      	ldr	r1, [r3, #8]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f000 fb46 	bl	800cecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c84e:	609a      	str	r2, [r3, #8]
      break;
 800c850:	e03c      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	6859      	ldr	r1, [r3, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	461a      	mov	r2, r3
 800c860:	f000 faba 	bl	800cdd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2150      	movs	r1, #80	; 0x50
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fb13 	bl	800ce96 <TIM_ITRx_SetConfig>
      break;
 800c870:	e02c      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	6859      	ldr	r1, [r3, #4]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	461a      	mov	r2, r3
 800c880:	f000 fad9 	bl	800ce36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2160      	movs	r1, #96	; 0x60
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 fb03 	bl	800ce96 <TIM_ITRx_SetConfig>
      break;
 800c890:	e01c      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6859      	ldr	r1, [r3, #4]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f000 fa9a 	bl	800cdd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2140      	movs	r1, #64	; 0x40
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 faf3 	bl	800ce96 <TIM_ITRx_SetConfig>
      break;
 800c8b0:	e00c      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f000 faea 	bl	800ce96 <TIM_ITRx_SetConfig>
      break;
 800c8c2:	e003      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8c8:	e000      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c8ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b083      	sub	sp, #12
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8ee:	bf00      	nop
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b083      	sub	sp, #12
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c902:	bf00      	nop
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c922:	b480      	push	{r7}
 800c924:	b083      	sub	sp, #12
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c92a:	bf00      	nop
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
	...

0800c938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a40      	ldr	r2, [pc, #256]	; (800ca4c <TIM_Base_SetConfig+0x114>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d013      	beq.n	800c978 <TIM_Base_SetConfig+0x40>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c956:	d00f      	beq.n	800c978 <TIM_Base_SetConfig+0x40>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a3d      	ldr	r2, [pc, #244]	; (800ca50 <TIM_Base_SetConfig+0x118>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00b      	beq.n	800c978 <TIM_Base_SetConfig+0x40>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a3c      	ldr	r2, [pc, #240]	; (800ca54 <TIM_Base_SetConfig+0x11c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d007      	beq.n	800c978 <TIM_Base_SetConfig+0x40>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a3b      	ldr	r2, [pc, #236]	; (800ca58 <TIM_Base_SetConfig+0x120>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d003      	beq.n	800c978 <TIM_Base_SetConfig+0x40>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a3a      	ldr	r2, [pc, #232]	; (800ca5c <TIM_Base_SetConfig+0x124>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d108      	bne.n	800c98a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c97e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a2f      	ldr	r2, [pc, #188]	; (800ca4c <TIM_Base_SetConfig+0x114>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d02b      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c998:	d027      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a2c      	ldr	r2, [pc, #176]	; (800ca50 <TIM_Base_SetConfig+0x118>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d023      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a2b      	ldr	r2, [pc, #172]	; (800ca54 <TIM_Base_SetConfig+0x11c>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d01f      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a2a      	ldr	r2, [pc, #168]	; (800ca58 <TIM_Base_SetConfig+0x120>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d01b      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a29      	ldr	r2, [pc, #164]	; (800ca5c <TIM_Base_SetConfig+0x124>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d017      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a28      	ldr	r2, [pc, #160]	; (800ca60 <TIM_Base_SetConfig+0x128>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d013      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a27      	ldr	r2, [pc, #156]	; (800ca64 <TIM_Base_SetConfig+0x12c>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00f      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a26      	ldr	r2, [pc, #152]	; (800ca68 <TIM_Base_SetConfig+0x130>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00b      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a25      	ldr	r2, [pc, #148]	; (800ca6c <TIM_Base_SetConfig+0x134>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d007      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a24      	ldr	r2, [pc, #144]	; (800ca70 <TIM_Base_SetConfig+0x138>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d003      	beq.n	800c9ea <TIM_Base_SetConfig+0xb2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a23      	ldr	r2, [pc, #140]	; (800ca74 <TIM_Base_SetConfig+0x13c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d108      	bne.n	800c9fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a0a      	ldr	r2, [pc, #40]	; (800ca4c <TIM_Base_SetConfig+0x114>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d003      	beq.n	800ca30 <TIM_Base_SetConfig+0xf8>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a0c      	ldr	r2, [pc, #48]	; (800ca5c <TIM_Base_SetConfig+0x124>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d103      	bne.n	800ca38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	691a      	ldr	r2, [r3, #16]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	615a      	str	r2, [r3, #20]
}
 800ca3e:	bf00      	nop
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40000400 	.word	0x40000400
 800ca54:	40000800 	.word	0x40000800
 800ca58:	40000c00 	.word	0x40000c00
 800ca5c:	40010400 	.word	0x40010400
 800ca60:	40014000 	.word	0x40014000
 800ca64:	40014400 	.word	0x40014400
 800ca68:	40014800 	.word	0x40014800
 800ca6c:	40001800 	.word	0x40001800
 800ca70:	40001c00 	.word	0x40001c00
 800ca74:	40002000 	.word	0x40002000

0800ca78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	f023 0201 	bic.w	r2, r3, #1
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0303 	bic.w	r3, r3, #3
 800caae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f023 0302 	bic.w	r3, r3, #2
 800cac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	4313      	orrs	r3, r2
 800caca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a20      	ldr	r2, [pc, #128]	; (800cb50 <TIM_OC1_SetConfig+0xd8>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d003      	beq.n	800cadc <TIM_OC1_SetConfig+0x64>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a1f      	ldr	r2, [pc, #124]	; (800cb54 <TIM_OC1_SetConfig+0xdc>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d10c      	bne.n	800caf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	f023 0308 	bic.w	r3, r3, #8
 800cae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	4313      	orrs	r3, r2
 800caec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f023 0304 	bic.w	r3, r3, #4
 800caf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a15      	ldr	r2, [pc, #84]	; (800cb50 <TIM_OC1_SetConfig+0xd8>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d003      	beq.n	800cb06 <TIM_OC1_SetConfig+0x8e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a14      	ldr	r2, [pc, #80]	; (800cb54 <TIM_OC1_SetConfig+0xdc>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d111      	bne.n	800cb2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	621a      	str	r2, [r3, #32]
}
 800cb44:	bf00      	nop
 800cb46:	371c      	adds	r7, #28
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	40010000 	.word	0x40010000
 800cb54:	40010400 	.word	0x40010400

0800cb58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	f023 0210 	bic.w	r2, r3, #16
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a1b      	ldr	r3, [r3, #32]
 800cb72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f023 0320 	bic.w	r3, r3, #32
 800cba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	011b      	lsls	r3, r3, #4
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a22      	ldr	r2, [pc, #136]	; (800cc3c <TIM_OC2_SetConfig+0xe4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d003      	beq.n	800cbc0 <TIM_OC2_SetConfig+0x68>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a21      	ldr	r2, [pc, #132]	; (800cc40 <TIM_OC2_SetConfig+0xe8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d10d      	bne.n	800cbdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	011b      	lsls	r3, r3, #4
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a17      	ldr	r2, [pc, #92]	; (800cc3c <TIM_OC2_SetConfig+0xe4>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d003      	beq.n	800cbec <TIM_OC2_SetConfig+0x94>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <TIM_OC2_SetConfig+0xe8>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d113      	bne.n	800cc14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	621a      	str	r2, [r3, #32]
}
 800cc2e:	bf00      	nop
 800cc30:	371c      	adds	r7, #28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	40010000 	.word	0x40010000
 800cc40:	40010400 	.word	0x40010400

0800cc44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0303 	bic.w	r3, r3, #3
 800cc7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	021b      	lsls	r3, r3, #8
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a21      	ldr	r2, [pc, #132]	; (800cd24 <TIM_OC3_SetConfig+0xe0>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d003      	beq.n	800ccaa <TIM_OC3_SetConfig+0x66>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a20      	ldr	r2, [pc, #128]	; (800cd28 <TIM_OC3_SetConfig+0xe4>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d10d      	bne.n	800ccc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a16      	ldr	r2, [pc, #88]	; (800cd24 <TIM_OC3_SetConfig+0xe0>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d003      	beq.n	800ccd6 <TIM_OC3_SetConfig+0x92>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a15      	ldr	r2, [pc, #84]	; (800cd28 <TIM_OC3_SetConfig+0xe4>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d113      	bne.n	800ccfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	011b      	lsls	r3, r3, #4
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	621a      	str	r2, [r3, #32]
}
 800cd18:	bf00      	nop
 800cd1a:	371c      	adds	r7, #28
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	40010000 	.word	0x40010000
 800cd28:	40010400 	.word	0x40010400

0800cd2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	021b      	lsls	r3, r3, #8
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	031b      	lsls	r3, r3, #12
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a12      	ldr	r2, [pc, #72]	; (800cdd0 <TIM_OC4_SetConfig+0xa4>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d003      	beq.n	800cd94 <TIM_OC4_SetConfig+0x68>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a11      	ldr	r2, [pc, #68]	; (800cdd4 <TIM_OC4_SetConfig+0xa8>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d109      	bne.n	800cda8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	019b      	lsls	r3, r3, #6
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	621a      	str	r2, [r3, #32]
}
 800cdc2:	bf00      	nop
 800cdc4:	371c      	adds	r7, #28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	40010000 	.word	0x40010000
 800cdd4:	40010400 	.word	0x40010400

0800cdd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	f023 0201 	bic.w	r2, r3, #1
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	011b      	lsls	r3, r3, #4
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f023 030a 	bic.w	r3, r3, #10
 800ce14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	621a      	str	r2, [r3, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b087      	sub	sp, #28
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6a1b      	ldr	r3, [r3, #32]
 800ce46:	f023 0210 	bic.w	r2, r3, #16
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	699b      	ldr	r3, [r3, #24]
 800ce52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	031b      	lsls	r3, r3, #12
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	011b      	lsls	r3, r3, #4
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	621a      	str	r2, [r3, #32]
}
 800ce8a:	bf00      	nop
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b085      	sub	sp, #20
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	f043 0307 	orr.w	r3, r3, #7
 800ceb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	609a      	str	r2, [r3, #8]
}
 800cec0:	bf00      	nop
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cecc:	b480      	push	{r7}
 800cece:	b087      	sub	sp, #28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	021a      	lsls	r2, r3, #8
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	431a      	orrs	r2, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	609a      	str	r2, [r3, #8]
}
 800cf00:	bf00      	nop
 800cf02:	371c      	adds	r7, #28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f003 031f 	and.w	r3, r3, #31
 800cf1e:	2201      	movs	r2, #1
 800cf20:	fa02 f303 	lsl.w	r3, r2, r3
 800cf24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6a1a      	ldr	r2, [r3, #32]
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	43db      	mvns	r3, r3
 800cf2e:	401a      	ands	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	fa01 f303 	lsl.w	r3, r1, r3
 800cf44:	431a      	orrs	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	621a      	str	r2, [r3, #32]
}
 800cf4a:	bf00      	nop
 800cf4c:	371c      	adds	r7, #28
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
	...

0800cf58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d101      	bne.n	800cf70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e05a      	b.n	800d026 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a21      	ldr	r2, [pc, #132]	; (800d034 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d022      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfbc:	d01d      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a1d      	ldr	r2, [pc, #116]	; (800d038 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d018      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a1b      	ldr	r2, [pc, #108]	; (800d03c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d013      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a1a      	ldr	r2, [pc, #104]	; (800d040 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d00e      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a18      	ldr	r2, [pc, #96]	; (800d044 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d009      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a17      	ldr	r2, [pc, #92]	; (800d048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d004      	beq.n	800cffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a15      	ldr	r2, [pc, #84]	; (800d04c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d10c      	bne.n	800d014 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	4313      	orrs	r3, r2
 800d00a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3714      	adds	r7, #20
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	40010000 	.word	0x40010000
 800d038:	40000400 	.word	0x40000400
 800d03c:	40000800 	.word	0x40000800
 800d040:	40000c00 	.word	0x40000c00
 800d044:	40010400 	.word	0x40010400
 800d048:	40014000 	.word	0x40014000
 800d04c:	40001800 	.word	0x40001800

0800d050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e03f      	b.n	800d10a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7f9 fa70 	bl	8006584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2224      	movs	r2, #36	; 0x24
 800d0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68da      	ldr	r2, [r3, #12]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 ff65 	bl	800df8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	691a      	ldr	r2, [r3, #16]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	695a      	ldr	r2, [r3, #20]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b08a      	sub	sp, #40	; 0x28
 800d116:	af02      	add	r7, sp, #8
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	603b      	str	r3, [r7, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b20      	cmp	r3, #32
 800d130:	d17c      	bne.n	800d22c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <HAL_UART_Transmit+0x2c>
 800d138:	88fb      	ldrh	r3, [r7, #6]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e075      	b.n	800d22e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d101      	bne.n	800d150 <HAL_UART_Transmit+0x3e>
 800d14c:	2302      	movs	r3, #2
 800d14e:	e06e      	b.n	800d22e <HAL_UART_Transmit+0x11c>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2221      	movs	r2, #33	; 0x21
 800d162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d166:	f7fc fbd3 	bl	8009910 <HAL_GetTick>
 800d16a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	88fa      	ldrh	r2, [r7, #6]
 800d170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	88fa      	ldrh	r2, [r7, #6]
 800d176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d180:	d108      	bne.n	800d194 <HAL_UART_Transmit+0x82>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d104      	bne.n	800d194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	61bb      	str	r3, [r7, #24]
 800d192:	e003      	b.n	800d19c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d198:	2300      	movs	r3, #0
 800d19a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d1a4:	e02a      	b.n	800d1fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2180      	movs	r1, #128	; 0x80
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 fc21 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	e036      	b.n	800d22e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10b      	bne.n	800d1de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	3302      	adds	r3, #2
 800d1da:	61bb      	str	r3, [r7, #24]
 800d1dc:	e007      	b.n	800d1ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d200:	b29b      	uxth	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1cf      	bne.n	800d1a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2200      	movs	r2, #0
 800d20e:	2140      	movs	r1, #64	; 0x40
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f000 fbf1 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e006      	b.n	800d22e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2220      	movs	r2, #32
 800d224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	e000      	b.n	800d22e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d22c:	2302      	movs	r3, #2
  }
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	4613      	mov	r3, r2
 800d242:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d11d      	bne.n	800d28c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d002      	beq.n	800d25c <HAL_UART_Receive_DMA+0x26>
 800d256:	88fb      	ldrh	r3, [r7, #6]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e016      	b.n	800d28e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d266:	2b01      	cmp	r3, #1
 800d268:	d101      	bne.n	800d26e <HAL_UART_Receive_DMA+0x38>
 800d26a:	2302      	movs	r3, #2
 800d26c:	e00f      	b.n	800d28e <HAL_UART_Receive_DMA+0x58>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d27c:	88fb      	ldrh	r3, [r7, #6]
 800d27e:	461a      	mov	r2, r3
 800d280:	68b9      	ldr	r1, [r7, #8]
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f000 fc26 	bl	800dad4 <UART_Start_Receive_DMA>
 800d288:	4603      	mov	r3, r0
 800d28a:	e000      	b.n	800d28e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d28c:	2302      	movs	r3, #2
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b0ba      	sub	sp, #232	; 0xe8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2ce:	f003 030f 	and.w	r3, r3, #15
 800d2d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d2d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10f      	bne.n	800d2fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2e2:	f003 0320 	and.w	r3, r3, #32
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <HAL_UART_IRQHandler+0x66>
 800d2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fd8d 	bl	800de16 <UART_Receive_IT>
      return;
 800d2fc:	e256      	b.n	800d7ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d2fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80de 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x22c>
 800d308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d106      	bne.n	800d322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 80d1 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00b      	beq.n	800d346 <HAL_UART_IRQHandler+0xae>
 800d32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d336:	2b00      	cmp	r3, #0
 800d338:	d005      	beq.n	800d346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f043 0201 	orr.w	r2, r3, #1
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d34a:	f003 0304 	and.w	r3, r3, #4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <HAL_UART_IRQHandler+0xd2>
 800d352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d005      	beq.n	800d36a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d362:	f043 0202 	orr.w	r2, r3, #2
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00b      	beq.n	800d38e <HAL_UART_IRQHandler+0xf6>
 800d376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d005      	beq.n	800d38e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d386:	f043 0204 	orr.w	r2, r3, #4
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d392:	f003 0308 	and.w	r3, r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	d011      	beq.n	800d3be <HAL_UART_IRQHandler+0x126>
 800d39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d39e:	f003 0320 	and.w	r3, r3, #32
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d105      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b6:	f043 0208 	orr.w	r2, r3, #8
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 81ed 	beq.w	800d7a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3cc:	f003 0320 	and.w	r3, r3, #32
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d008      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x14e>
 800d3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d8:	f003 0320 	and.w	r3, r3, #32
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fd18 	bl	800de16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f0:	2b40      	cmp	r3, #64	; 0x40
 800d3f2:	bf0c      	ite	eq
 800d3f4:	2301      	moveq	r3, #1
 800d3f6:	2300      	movne	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d402:	f003 0308 	and.w	r3, r3, #8
 800d406:	2b00      	cmp	r3, #0
 800d408:	d103      	bne.n	800d412 <HAL_UART_IRQHandler+0x17a>
 800d40a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d04f      	beq.n	800d4b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fc20 	bl	800dc58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d422:	2b40      	cmp	r3, #64	; 0x40
 800d424:	d141      	bne.n	800d4aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3314      	adds	r3, #20
 800d42c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d43c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3314      	adds	r3, #20
 800d44e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d45e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d46a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1d9      	bne.n	800d426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d476:	2b00      	cmp	r3, #0
 800d478:	d013      	beq.n	800d4a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	4a7d      	ldr	r2, [pc, #500]	; (800d674 <HAL_UART_IRQHandler+0x3dc>)
 800d480:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d486:	4618      	mov	r0, r3
 800d488:	f7fc fd14 	bl	8009eb4 <HAL_DMA_Abort_IT>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d016      	beq.n	800d4c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d49c:	4610      	mov	r0, r2
 800d49e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a0:	e00e      	b.n	800d4c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f99a 	bl	800d7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a8:	e00a      	b.n	800d4c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 f996 	bl	800d7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4b0:	e006      	b.n	800d4c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f992 	bl	800d7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d4be:	e170      	b.n	800d7a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c0:	bf00      	nop
    return;
 800d4c2:	e16e      	b.n	800d7a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	f040 814a 	bne.w	800d762 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d2:	f003 0310 	and.w	r3, r3, #16
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8143 	beq.w	800d762 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e0:	f003 0310 	and.w	r3, r3, #16
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f000 813c 	beq.w	800d762 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60bb      	str	r3, [r7, #8]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60bb      	str	r3, [r7, #8]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	60bb      	str	r3, [r7, #8]
 800d4fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50a:	2b40      	cmp	r3, #64	; 0x40
 800d50c:	f040 80b4 	bne.w	800d678 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d51c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 8140 	beq.w	800d7a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d52a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d52e:	429a      	cmp	r2, r3
 800d530:	f080 8139 	bcs.w	800d7a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d53a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d546:	f000 8088 	beq.w	800d65a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	330c      	adds	r3, #12
 800d550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d558:	e853 3f00 	ldrex	r3, [r3]
 800d55c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	330c      	adds	r3, #12
 800d572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d57a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d586:	e841 2300 	strex	r3, r2, [r1]
 800d58a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d58e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1d9      	bne.n	800d54a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3314      	adds	r3, #20
 800d59c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a0:	e853 3f00 	ldrex	r3, [r3]
 800d5a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d5a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5a8:	f023 0301 	bic.w	r3, r3, #1
 800d5ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3314      	adds	r3, #20
 800d5b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d5ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d5be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d5cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e1      	bne.n	800d596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3314      	adds	r3, #20
 800d5d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5dc:	e853 3f00 	ldrex	r3, [r3]
 800d5e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d5e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	3314      	adds	r3, #20
 800d5f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d5f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d5f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d5fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5fe:	e841 2300 	strex	r3, r2, [r1]
 800d602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1e3      	bne.n	800d5d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2220      	movs	r2, #32
 800d60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	330c      	adds	r3, #12
 800d61e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d622:	e853 3f00 	ldrex	r3, [r3]
 800d626:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d62a:	f023 0310 	bic.w	r3, r3, #16
 800d62e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	330c      	adds	r3, #12
 800d638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d63c:	65ba      	str	r2, [r7, #88]	; 0x58
 800d63e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d644:	e841 2300 	strex	r3, r2, [r1]
 800d648:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1e3      	bne.n	800d618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d654:	4618      	mov	r0, r3
 800d656:	f7fc fbbd 	bl	8009dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d662:	b29b      	uxth	r3, r3
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	b29b      	uxth	r3, r3
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f8c0 	bl	800d7f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d670:	e099      	b.n	800d7a6 <HAL_UART_IRQHandler+0x50e>
 800d672:	bf00      	nop
 800d674:	0800dd1f 	.word	0x0800dd1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d680:	b29b      	uxth	r3, r3
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 808b 	beq.w	800d7aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 8086 	beq.w	800d7aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	330c      	adds	r3, #12
 800d6a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	330c      	adds	r3, #12
 800d6be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d6c2:	647a      	str	r2, [r7, #68]	; 0x44
 800d6c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6ca:	e841 2300 	strex	r3, r2, [r1]
 800d6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1e3      	bne.n	800d69e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3314      	adds	r3, #20
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	f023 0301 	bic.w	r3, r3, #1
 800d6ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3314      	adds	r3, #20
 800d6f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d6fa:	633a      	str	r2, [r7, #48]	; 0x30
 800d6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e3      	bne.n	800d6d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2220      	movs	r2, #32
 800d712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	330c      	adds	r3, #12
 800d722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	e853 3f00 	ldrex	r3, [r3]
 800d72a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f023 0310 	bic.w	r3, r3, #16
 800d732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	330c      	adds	r3, #12
 800d73c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d740:	61fa      	str	r2, [r7, #28]
 800d742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d744:	69b9      	ldr	r1, [r7, #24]
 800d746:	69fa      	ldr	r2, [r7, #28]
 800d748:	e841 2300 	strex	r3, r2, [r1]
 800d74c:	617b      	str	r3, [r7, #20]
   return(result);
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1e3      	bne.n	800d71c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f848 	bl	800d7f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d760:	e023      	b.n	800d7aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d009      	beq.n	800d782 <HAL_UART_IRQHandler+0x4ea>
 800d76e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fae3 	bl	800dd46 <UART_Transmit_IT>
    return;
 800d780:	e014      	b.n	800d7ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00e      	beq.n	800d7ac <HAL_UART_IRQHandler+0x514>
 800d78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d796:	2b00      	cmp	r3, #0
 800d798:	d008      	beq.n	800d7ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fb23 	bl	800dde6 <UART_EndTransmit_IT>
    return;
 800d7a0:	e004      	b.n	800d7ac <HAL_UART_IRQHandler+0x514>
    return;
 800d7a2:	bf00      	nop
 800d7a4:	e002      	b.n	800d7ac <HAL_UART_IRQHandler+0x514>
      return;
 800d7a6:	bf00      	nop
 800d7a8:	e000      	b.n	800d7ac <HAL_UART_IRQHandler+0x514>
      return;
 800d7aa:	bf00      	nop
  }
}
 800d7ac:	37e8      	adds	r7, #232	; 0xe8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop

0800d7b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b09c      	sub	sp, #112	; 0x70
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d814:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d820:	2b00      	cmp	r3, #0
 800d822:	d172      	bne.n	800d90a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d826:	2200      	movs	r2, #0
 800d828:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	330c      	adds	r3, #12
 800d830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d834:	e853 3f00 	ldrex	r3, [r3]
 800d838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d840:	66bb      	str	r3, [r7, #104]	; 0x68
 800d842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	330c      	adds	r3, #12
 800d848:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d84a:	65ba      	str	r2, [r7, #88]	; 0x58
 800d84c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d852:	e841 2300 	strex	r3, r2, [r1]
 800d856:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1e5      	bne.n	800d82a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3314      	adds	r3, #20
 800d864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	e853 3f00 	ldrex	r3, [r3]
 800d86c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d870:	f023 0301 	bic.w	r3, r3, #1
 800d874:	667b      	str	r3, [r7, #100]	; 0x64
 800d876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3314      	adds	r3, #20
 800d87c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d87e:	647a      	str	r2, [r7, #68]	; 0x44
 800d880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d886:	e841 2300 	strex	r3, r2, [r1]
 800d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e5      	bne.n	800d85e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3314      	adds	r3, #20
 800d898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	e853 3f00 	ldrex	r3, [r3]
 800d8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8a8:	663b      	str	r3, [r7, #96]	; 0x60
 800d8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3314      	adds	r3, #20
 800d8b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8b2:	633a      	str	r2, [r7, #48]	; 0x30
 800d8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ba:	e841 2300 	strex	r3, r2, [r1]
 800d8be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1e5      	bne.n	800d892 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8c8:	2220      	movs	r2, #32
 800d8ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d119      	bne.n	800d90a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	330c      	adds	r3, #12
 800d8dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	e853 3f00 	ldrex	r3, [r3]
 800d8e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f023 0310 	bic.w	r3, r3, #16
 800d8ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d8f6:	61fa      	str	r2, [r7, #28]
 800d8f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fa:	69b9      	ldr	r1, [r7, #24]
 800d8fc:	69fa      	ldr	r2, [r7, #28]
 800d8fe:	e841 2300 	strex	r3, r2, [r1]
 800d902:	617b      	str	r3, [r7, #20]
   return(result);
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1e5      	bne.n	800d8d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d106      	bne.n	800d920 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d916:	4619      	mov	r1, r3
 800d918:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d91a:	f7ff ff69 	bl	800d7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d91e:	e002      	b.n	800d926 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d922:	f7f4 ffc5 	bl	80028b0 <HAL_UART_RxCpltCallback>
}
 800d926:	bf00      	nop
 800d928:	3770      	adds	r7, #112	; 0x70
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d940:	2b01      	cmp	r3, #1
 800d942:	d108      	bne.n	800d956 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d948:	085b      	lsrs	r3, r3, #1
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4619      	mov	r1, r3
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7ff ff4e 	bl	800d7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d954:	e002      	b.n	800d95c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff ff36 	bl	800d7c8 <HAL_UART_RxHalfCpltCallback>
}
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d96c:	2300      	movs	r3, #0
 800d96e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d974:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d980:	2b80      	cmp	r3, #128	; 0x80
 800d982:	bf0c      	ite	eq
 800d984:	2301      	moveq	r3, #1
 800d986:	2300      	movne	r3, #0
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b21      	cmp	r3, #33	; 0x21
 800d996:	d108      	bne.n	800d9aa <UART_DMAError+0x46>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d005      	beq.n	800d9aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d9a4:	68b8      	ldr	r0, [r7, #8]
 800d9a6:	f000 f92f 	bl	800dc08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b4:	2b40      	cmp	r3, #64	; 0x40
 800d9b6:	bf0c      	ite	eq
 800d9b8:	2301      	moveq	r3, #1
 800d9ba:	2300      	movne	r3, #0
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b22      	cmp	r3, #34	; 0x22
 800d9ca:	d108      	bne.n	800d9de <UART_DMAError+0x7a>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d9d8:	68b8      	ldr	r0, [r7, #8]
 800d9da:	f000 f93d 	bl	800dc58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	f043 0210 	orr.w	r2, r3, #16
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d9ea:	68b8      	ldr	r0, [r7, #8]
 800d9ec:	f7ff fef6 	bl	800d7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b090      	sub	sp, #64	; 0x40
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	4613      	mov	r3, r2
 800da06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da08:	e050      	b.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d04c      	beq.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800da12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <UART_WaitOnFlagUntilTimeout+0x30>
 800da18:	f7fb ff7a 	bl	8009910 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da24:	429a      	cmp	r2, r3
 800da26:	d241      	bcs.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	330c      	adds	r3, #12
 800da2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	330c      	adds	r3, #12
 800da46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da48:	637a      	str	r2, [r7, #52]	; 0x34
 800da4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3314      	adds	r3, #20
 800da62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	e853 3f00 	ldrex	r3, [r3]
 800da6a:	613b      	str	r3, [r7, #16]
   return(result);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f023 0301 	bic.w	r3, r3, #1
 800da72:	63bb      	str	r3, [r7, #56]	; 0x38
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3314      	adds	r3, #20
 800da7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da7c:	623a      	str	r2, [r7, #32]
 800da7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da80:	69f9      	ldr	r1, [r7, #28]
 800da82:	6a3a      	ldr	r2, [r7, #32]
 800da84:	e841 2300 	strex	r3, r2, [r1]
 800da88:	61bb      	str	r3, [r7, #24]
   return(result);
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1e5      	bne.n	800da5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2220      	movs	r2, #32
 800da94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2220      	movs	r2, #32
 800da9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800daa8:	2303      	movs	r3, #3
 800daaa:	e00f      	b.n	800dacc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	4013      	ands	r3, r2
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	bf0c      	ite	eq
 800dabc:	2301      	moveq	r3, #1
 800dabe:	2300      	movne	r3, #0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	461a      	mov	r2, r3
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d09f      	beq.n	800da0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3740      	adds	r7, #64	; 0x40
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b098      	sub	sp, #96	; 0x60
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	88fa      	ldrh	r2, [r7, #6]
 800daec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2222      	movs	r2, #34	; 0x22
 800daf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db00:	4a3e      	ldr	r2, [pc, #248]	; (800dbfc <UART_Start_Receive_DMA+0x128>)
 800db02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db08:	4a3d      	ldr	r2, [pc, #244]	; (800dc00 <UART_Start_Receive_DMA+0x12c>)
 800db0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db10:	4a3c      	ldr	r2, [pc, #240]	; (800dc04 <UART_Start_Receive_DMA+0x130>)
 800db12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	2200      	movs	r2, #0
 800db1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800db1c:	f107 0308 	add.w	r3, r7, #8
 800db20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	88fb      	ldrh	r3, [r7, #6]
 800db34:	f7fc f8f6 	bl	8009d24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	613b      	str	r3, [r7, #16]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	330c      	adds	r3, #12
 800db5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db60:	e853 3f00 	ldrex	r3, [r3]
 800db64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	330c      	adds	r3, #12
 800db74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db76:	64fa      	str	r2, [r7, #76]	; 0x4c
 800db78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db7e:	e841 2300 	strex	r3, r2, [r1]
 800db82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800db84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1e5      	bne.n	800db56 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3314      	adds	r3, #20
 800db90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db94:	e853 3f00 	ldrex	r3, [r3]
 800db98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	f043 0301 	orr.w	r3, r3, #1
 800dba0:	657b      	str	r3, [r7, #84]	; 0x54
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3314      	adds	r3, #20
 800dba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbaa:	63ba      	str	r2, [r7, #56]	; 0x38
 800dbac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb2:	e841 2300 	strex	r3, r2, [r1]
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1e5      	bne.n	800db8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3314      	adds	r3, #20
 800dbc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	e853 3f00 	ldrex	r3, [r3]
 800dbcc:	617b      	str	r3, [r7, #20]
   return(result);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd4:	653b      	str	r3, [r7, #80]	; 0x50
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3314      	adds	r3, #20
 800dbdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbde:	627a      	str	r2, [r7, #36]	; 0x24
 800dbe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe2:	6a39      	ldr	r1, [r7, #32]
 800dbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe6:	e841 2300 	strex	r3, r2, [r1]
 800dbea:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e5      	bne.n	800dbbe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3760      	adds	r7, #96	; 0x60
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	0800d809 	.word	0x0800d809
 800dc00:	0800d92f 	.word	0x0800d92f
 800dc04:	0800d965 	.word	0x0800d965

0800dc08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b089      	sub	sp, #36	; 0x24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	330c      	adds	r3, #12
 800dc16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	e853 3f00 	ldrex	r3, [r3]
 800dc1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	330c      	adds	r3, #12
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	61ba      	str	r2, [r7, #24]
 800dc32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc34:	6979      	ldr	r1, [r7, #20]
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	e841 2300 	strex	r3, r2, [r1]
 800dc3c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1e5      	bne.n	800dc10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2220      	movs	r2, #32
 800dc48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dc4c:	bf00      	nop
 800dc4e:	3724      	adds	r7, #36	; 0x24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b095      	sub	sp, #84	; 0x54
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	330c      	adds	r3, #12
 800dc66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	330c      	adds	r3, #12
 800dc7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc80:	643a      	str	r2, [r7, #64]	; 0x40
 800dc82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc88:	e841 2300 	strex	r3, r2, [r1]
 800dc8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1e5      	bne.n	800dc60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3314      	adds	r3, #20
 800dc9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	e853 3f00 	ldrex	r3, [r3]
 800dca2:	61fb      	str	r3, [r7, #28]
   return(result);
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	f023 0301 	bic.w	r3, r3, #1
 800dcaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3314      	adds	r3, #20
 800dcb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dcb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcbc:	e841 2300 	strex	r3, r2, [r1]
 800dcc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1e5      	bne.n	800dc94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d119      	bne.n	800dd04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	330c      	adds	r3, #12
 800dcd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	e853 3f00 	ldrex	r3, [r3]
 800dcde:	60bb      	str	r3, [r7, #8]
   return(result);
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	f023 0310 	bic.w	r3, r3, #16
 800dce6:	647b      	str	r3, [r7, #68]	; 0x44
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	330c      	adds	r3, #12
 800dcee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcf0:	61ba      	str	r2, [r7, #24]
 800dcf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf4:	6979      	ldr	r1, [r7, #20]
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	e841 2300 	strex	r3, r2, [r1]
 800dcfc:	613b      	str	r3, [r7, #16]
   return(result);
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1e5      	bne.n	800dcd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2220      	movs	r2, #32
 800dd08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dd12:	bf00      	nop
 800dd14:	3754      	adds	r7, #84	; 0x54
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b084      	sub	sp, #16
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2200      	movs	r2, #0
 800dd36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff fd4f 	bl	800d7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd3e:	bf00      	nop
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b21      	cmp	r3, #33	; 0x21
 800dd58:	d13e      	bne.n	800ddd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd62:	d114      	bne.n	800dd8e <UART_Transmit_IT+0x48>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d110      	bne.n	800dd8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a1b      	ldr	r3, [r3, #32]
 800dd70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	1c9a      	adds	r2, r3, #2
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	621a      	str	r2, [r3, #32]
 800dd8c:	e008      	b.n	800dda0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	1c59      	adds	r1, r3, #1
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	6211      	str	r1, [r2, #32]
 800dd98:	781a      	ldrb	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	3b01      	subs	r3, #1
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4619      	mov	r1, r3
 800ddae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10f      	bne.n	800ddd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68da      	ldr	r2, [r3, #12]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	e000      	b.n	800ddda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ddd8:	2302      	movs	r3, #2
  }
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2220      	movs	r2, #32
 800de02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fcd4 	bl	800d7b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b08c      	sub	sp, #48	; 0x30
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b22      	cmp	r3, #34	; 0x22
 800de28:	f040 80ab 	bne.w	800df82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de34:	d117      	bne.n	800de66 <UART_Receive_IT+0x50>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d113      	bne.n	800de66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de54:	b29a      	uxth	r2, r3
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	1c9a      	adds	r2, r3, #2
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	629a      	str	r2, [r3, #40]	; 0x28
 800de64:	e026      	b.n	800deb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de78:	d007      	beq.n	800de8a <UART_Receive_IT+0x74>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <UART_Receive_IT+0x82>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d106      	bne.n	800de98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	b2da      	uxtb	r2, r3
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	701a      	strb	r2, [r3, #0]
 800de96:	e008      	b.n	800deaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29b      	uxth	r3, r3
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	4619      	mov	r1, r3
 800dec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d15a      	bne.n	800df7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f022 0220 	bic.w	r2, r2, #32
 800ded6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68da      	ldr	r2, [r3, #12]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	695a      	ldr	r2, [r3, #20]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f022 0201 	bic.w	r2, r2, #1
 800def6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2220      	movs	r2, #32
 800defc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df04:	2b01      	cmp	r3, #1
 800df06:	d135      	bne.n	800df74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	330c      	adds	r3, #12
 800df14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	e853 3f00 	ldrex	r3, [r3]
 800df1c:	613b      	str	r3, [r7, #16]
   return(result);
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f023 0310 	bic.w	r3, r3, #16
 800df24:	627b      	str	r3, [r7, #36]	; 0x24
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	330c      	adds	r3, #12
 800df2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df2e:	623a      	str	r2, [r7, #32]
 800df30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df32:	69f9      	ldr	r1, [r7, #28]
 800df34:	6a3a      	ldr	r2, [r7, #32]
 800df36:	e841 2300 	strex	r3, r2, [r1]
 800df3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1e5      	bne.n	800df0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b10      	cmp	r3, #16
 800df4e:	d10a      	bne.n	800df66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fc3f 	bl	800d7f0 <HAL_UARTEx_RxEventCallback>
 800df72:	e002      	b.n	800df7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7f4 fc9b 	bl	80028b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e002      	b.n	800df84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	e000      	b.n	800df84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800df82:	2302      	movs	r3, #2
  }
}
 800df84:	4618      	mov	r0, r3
 800df86:	3730      	adds	r7, #48	; 0x30
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df90:	b09f      	sub	sp, #124	; 0x7c
 800df92:	af00      	add	r7, sp, #0
 800df94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dfa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa2:	68d9      	ldr	r1, [r3, #12]
 800dfa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	ea40 0301 	orr.w	r3, r0, r1
 800dfac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dfae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb0:	689a      	ldr	r2, [r3, #8]
 800dfb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfba:	695b      	ldr	r3, [r3, #20]
 800dfbc:	431a      	orrs	r2, r3
 800dfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc0:	69db      	ldr	r3, [r3, #28]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800dfc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dfd0:	f021 010c 	bic.w	r1, r1, #12
 800dfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfda:	430b      	orrs	r3, r1
 800dfdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dfde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dfe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfea:	6999      	ldr	r1, [r3, #24]
 800dfec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	ea40 0301 	orr.w	r3, r0, r1
 800dff4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	4bc5      	ldr	r3, [pc, #788]	; (800e310 <UART_SetConfig+0x384>)
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d004      	beq.n	800e00a <UART_SetConfig+0x7e>
 800e000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	4bc3      	ldr	r3, [pc, #780]	; (800e314 <UART_SetConfig+0x388>)
 800e006:	429a      	cmp	r2, r3
 800e008:	d103      	bne.n	800e012 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e00a:	f7fc fd17 	bl	800aa3c <HAL_RCC_GetPCLK2Freq>
 800e00e:	6778      	str	r0, [r7, #116]	; 0x74
 800e010:	e002      	b.n	800e018 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e012:	f7fc fcff 	bl	800aa14 <HAL_RCC_GetPCLK1Freq>
 800e016:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e01a:	69db      	ldr	r3, [r3, #28]
 800e01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e020:	f040 80b6 	bne.w	800e190 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e026:	461c      	mov	r4, r3
 800e028:	f04f 0500 	mov.w	r5, #0
 800e02c:	4622      	mov	r2, r4
 800e02e:	462b      	mov	r3, r5
 800e030:	1891      	adds	r1, r2, r2
 800e032:	6439      	str	r1, [r7, #64]	; 0x40
 800e034:	415b      	adcs	r3, r3
 800e036:	647b      	str	r3, [r7, #68]	; 0x44
 800e038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e03c:	1912      	adds	r2, r2, r4
 800e03e:	eb45 0303 	adc.w	r3, r5, r3
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f04f 0100 	mov.w	r1, #0
 800e04a:	00d9      	lsls	r1, r3, #3
 800e04c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e050:	00d0      	lsls	r0, r2, #3
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	1911      	adds	r1, r2, r4
 800e058:	6639      	str	r1, [r7, #96]	; 0x60
 800e05a:	416b      	adcs	r3, r5
 800e05c:	667b      	str	r3, [r7, #100]	; 0x64
 800e05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	461a      	mov	r2, r3
 800e064:	f04f 0300 	mov.w	r3, #0
 800e068:	1891      	adds	r1, r2, r2
 800e06a:	63b9      	str	r1, [r7, #56]	; 0x38
 800e06c:	415b      	adcs	r3, r3
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e074:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e078:	f7f2 fdca 	bl	8000c10 <__aeabi_uldivmod>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	4ba5      	ldr	r3, [pc, #660]	; (800e318 <UART_SetConfig+0x38c>)
 800e082:	fba3 2302 	umull	r2, r3, r3, r2
 800e086:	095b      	lsrs	r3, r3, #5
 800e088:	011e      	lsls	r6, r3, #4
 800e08a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e08c:	461c      	mov	r4, r3
 800e08e:	f04f 0500 	mov.w	r5, #0
 800e092:	4622      	mov	r2, r4
 800e094:	462b      	mov	r3, r5
 800e096:	1891      	adds	r1, r2, r2
 800e098:	6339      	str	r1, [r7, #48]	; 0x30
 800e09a:	415b      	adcs	r3, r3
 800e09c:	637b      	str	r3, [r7, #52]	; 0x34
 800e09e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e0a2:	1912      	adds	r2, r2, r4
 800e0a4:	eb45 0303 	adc.w	r3, r5, r3
 800e0a8:	f04f 0000 	mov.w	r0, #0
 800e0ac:	f04f 0100 	mov.w	r1, #0
 800e0b0:	00d9      	lsls	r1, r3, #3
 800e0b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e0b6:	00d0      	lsls	r0, r2, #3
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	1911      	adds	r1, r2, r4
 800e0be:	65b9      	str	r1, [r7, #88]	; 0x58
 800e0c0:	416b      	adcs	r3, r5
 800e0c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f04f 0300 	mov.w	r3, #0
 800e0ce:	1891      	adds	r1, r2, r2
 800e0d0:	62b9      	str	r1, [r7, #40]	; 0x28
 800e0d2:	415b      	adcs	r3, r3
 800e0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e0da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e0de:	f7f2 fd97 	bl	8000c10 <__aeabi_uldivmod>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4b8c      	ldr	r3, [pc, #560]	; (800e318 <UART_SetConfig+0x38c>)
 800e0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800e0ec:	095b      	lsrs	r3, r3, #5
 800e0ee:	2164      	movs	r1, #100	; 0x64
 800e0f0:	fb01 f303 	mul.w	r3, r1, r3
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	3332      	adds	r3, #50	; 0x32
 800e0fa:	4a87      	ldr	r2, [pc, #540]	; (800e318 <UART_SetConfig+0x38c>)
 800e0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e100:	095b      	lsrs	r3, r3, #5
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e108:	441e      	add	r6, r3
 800e10a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e10c:	4618      	mov	r0, r3
 800e10e:	f04f 0100 	mov.w	r1, #0
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	1894      	adds	r4, r2, r2
 800e118:	623c      	str	r4, [r7, #32]
 800e11a:	415b      	adcs	r3, r3
 800e11c:	627b      	str	r3, [r7, #36]	; 0x24
 800e11e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e122:	1812      	adds	r2, r2, r0
 800e124:	eb41 0303 	adc.w	r3, r1, r3
 800e128:	f04f 0400 	mov.w	r4, #0
 800e12c:	f04f 0500 	mov.w	r5, #0
 800e130:	00dd      	lsls	r5, r3, #3
 800e132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e136:	00d4      	lsls	r4, r2, #3
 800e138:	4622      	mov	r2, r4
 800e13a:	462b      	mov	r3, r5
 800e13c:	1814      	adds	r4, r2, r0
 800e13e:	653c      	str	r4, [r7, #80]	; 0x50
 800e140:	414b      	adcs	r3, r1
 800e142:	657b      	str	r3, [r7, #84]	; 0x54
 800e144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	461a      	mov	r2, r3
 800e14a:	f04f 0300 	mov.w	r3, #0
 800e14e:	1891      	adds	r1, r2, r2
 800e150:	61b9      	str	r1, [r7, #24]
 800e152:	415b      	adcs	r3, r3
 800e154:	61fb      	str	r3, [r7, #28]
 800e156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e15a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e15e:	f7f2 fd57 	bl	8000c10 <__aeabi_uldivmod>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4b6c      	ldr	r3, [pc, #432]	; (800e318 <UART_SetConfig+0x38c>)
 800e168:	fba3 1302 	umull	r1, r3, r3, r2
 800e16c:	095b      	lsrs	r3, r3, #5
 800e16e:	2164      	movs	r1, #100	; 0x64
 800e170:	fb01 f303 	mul.w	r3, r1, r3
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	3332      	adds	r3, #50	; 0x32
 800e17a:	4a67      	ldr	r2, [pc, #412]	; (800e318 <UART_SetConfig+0x38c>)
 800e17c:	fba2 2303 	umull	r2, r3, r2, r3
 800e180:	095b      	lsrs	r3, r3, #5
 800e182:	f003 0207 	and.w	r2, r3, #7
 800e186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4432      	add	r2, r6
 800e18c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e18e:	e0b9      	b.n	800e304 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e192:	461c      	mov	r4, r3
 800e194:	f04f 0500 	mov.w	r5, #0
 800e198:	4622      	mov	r2, r4
 800e19a:	462b      	mov	r3, r5
 800e19c:	1891      	adds	r1, r2, r2
 800e19e:	6139      	str	r1, [r7, #16]
 800e1a0:	415b      	adcs	r3, r3
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e1a8:	1912      	adds	r2, r2, r4
 800e1aa:	eb45 0303 	adc.w	r3, r5, r3
 800e1ae:	f04f 0000 	mov.w	r0, #0
 800e1b2:	f04f 0100 	mov.w	r1, #0
 800e1b6:	00d9      	lsls	r1, r3, #3
 800e1b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e1bc:	00d0      	lsls	r0, r2, #3
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	eb12 0804 	adds.w	r8, r2, r4
 800e1c6:	eb43 0905 	adc.w	r9, r3, r5
 800e1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f04f 0100 	mov.w	r1, #0
 800e1d4:	f04f 0200 	mov.w	r2, #0
 800e1d8:	f04f 0300 	mov.w	r3, #0
 800e1dc:	008b      	lsls	r3, r1, #2
 800e1de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e1e2:	0082      	lsls	r2, r0, #2
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7f2 fd12 	bl	8000c10 <__aeabi_uldivmod>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	4b49      	ldr	r3, [pc, #292]	; (800e318 <UART_SetConfig+0x38c>)
 800e1f2:	fba3 2302 	umull	r2, r3, r3, r2
 800e1f6:	095b      	lsrs	r3, r3, #5
 800e1f8:	011e      	lsls	r6, r3, #4
 800e1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f04f 0100 	mov.w	r1, #0
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	1894      	adds	r4, r2, r2
 800e208:	60bc      	str	r4, [r7, #8]
 800e20a:	415b      	adcs	r3, r3
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e212:	1812      	adds	r2, r2, r0
 800e214:	eb41 0303 	adc.w	r3, r1, r3
 800e218:	f04f 0400 	mov.w	r4, #0
 800e21c:	f04f 0500 	mov.w	r5, #0
 800e220:	00dd      	lsls	r5, r3, #3
 800e222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e226:	00d4      	lsls	r4, r2, #3
 800e228:	4622      	mov	r2, r4
 800e22a:	462b      	mov	r3, r5
 800e22c:	1814      	adds	r4, r2, r0
 800e22e:	64bc      	str	r4, [r7, #72]	; 0x48
 800e230:	414b      	adcs	r3, r1
 800e232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	f04f 0100 	mov.w	r1, #0
 800e23e:	f04f 0200 	mov.w	r2, #0
 800e242:	f04f 0300 	mov.w	r3, #0
 800e246:	008b      	lsls	r3, r1, #2
 800e248:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e24c:	0082      	lsls	r2, r0, #2
 800e24e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e252:	f7f2 fcdd 	bl	8000c10 <__aeabi_uldivmod>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4b2f      	ldr	r3, [pc, #188]	; (800e318 <UART_SetConfig+0x38c>)
 800e25c:	fba3 1302 	umull	r1, r3, r3, r2
 800e260:	095b      	lsrs	r3, r3, #5
 800e262:	2164      	movs	r1, #100	; 0x64
 800e264:	fb01 f303 	mul.w	r3, r1, r3
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	011b      	lsls	r3, r3, #4
 800e26c:	3332      	adds	r3, #50	; 0x32
 800e26e:	4a2a      	ldr	r2, [pc, #168]	; (800e318 <UART_SetConfig+0x38c>)
 800e270:	fba2 2303 	umull	r2, r3, r2, r3
 800e274:	095b      	lsrs	r3, r3, #5
 800e276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e27a:	441e      	add	r6, r3
 800e27c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e27e:	4618      	mov	r0, r3
 800e280:	f04f 0100 	mov.w	r1, #0
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	1894      	adds	r4, r2, r2
 800e28a:	603c      	str	r4, [r7, #0]
 800e28c:	415b      	adcs	r3, r3
 800e28e:	607b      	str	r3, [r7, #4]
 800e290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e294:	1812      	adds	r2, r2, r0
 800e296:	eb41 0303 	adc.w	r3, r1, r3
 800e29a:	f04f 0400 	mov.w	r4, #0
 800e29e:	f04f 0500 	mov.w	r5, #0
 800e2a2:	00dd      	lsls	r5, r3, #3
 800e2a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e2a8:	00d4      	lsls	r4, r2, #3
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	eb12 0a00 	adds.w	sl, r2, r0
 800e2b2:	eb43 0b01 	adc.w	fp, r3, r1
 800e2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f04f 0100 	mov.w	r1, #0
 800e2c0:	f04f 0200 	mov.w	r2, #0
 800e2c4:	f04f 0300 	mov.w	r3, #0
 800e2c8:	008b      	lsls	r3, r1, #2
 800e2ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e2ce:	0082      	lsls	r2, r0, #2
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	4659      	mov	r1, fp
 800e2d4:	f7f2 fc9c 	bl	8000c10 <__aeabi_uldivmod>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <UART_SetConfig+0x38c>)
 800e2de:	fba3 1302 	umull	r1, r3, r3, r2
 800e2e2:	095b      	lsrs	r3, r3, #5
 800e2e4:	2164      	movs	r1, #100	; 0x64
 800e2e6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	011b      	lsls	r3, r3, #4
 800e2ee:	3332      	adds	r3, #50	; 0x32
 800e2f0:	4a09      	ldr	r2, [pc, #36]	; (800e318 <UART_SetConfig+0x38c>)
 800e2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f6:	095b      	lsrs	r3, r3, #5
 800e2f8:	f003 020f 	and.w	r2, r3, #15
 800e2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4432      	add	r2, r6
 800e302:	609a      	str	r2, [r3, #8]
}
 800e304:	bf00      	nop
 800e306:	377c      	adds	r7, #124	; 0x7c
 800e308:	46bd      	mov	sp, r7
 800e30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30e:	bf00      	nop
 800e310:	40011000 	.word	0x40011000
 800e314:	40011400 	.word	0x40011400
 800e318:	51eb851f 	.word	0x51eb851f

0800e31c <__errno>:
 800e31c:	4b01      	ldr	r3, [pc, #4]	; (800e324 <__errno+0x8>)
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	200001d8 	.word	0x200001d8

0800e328 <__libc_init_array>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	4d0d      	ldr	r5, [pc, #52]	; (800e360 <__libc_init_array+0x38>)
 800e32c:	4c0d      	ldr	r4, [pc, #52]	; (800e364 <__libc_init_array+0x3c>)
 800e32e:	1b64      	subs	r4, r4, r5
 800e330:	10a4      	asrs	r4, r4, #2
 800e332:	2600      	movs	r6, #0
 800e334:	42a6      	cmp	r6, r4
 800e336:	d109      	bne.n	800e34c <__libc_init_array+0x24>
 800e338:	4d0b      	ldr	r5, [pc, #44]	; (800e368 <__libc_init_array+0x40>)
 800e33a:	4c0c      	ldr	r4, [pc, #48]	; (800e36c <__libc_init_array+0x44>)
 800e33c:	f001 f91e 	bl	800f57c <_init>
 800e340:	1b64      	subs	r4, r4, r5
 800e342:	10a4      	asrs	r4, r4, #2
 800e344:	2600      	movs	r6, #0
 800e346:	42a6      	cmp	r6, r4
 800e348:	d105      	bne.n	800e356 <__libc_init_array+0x2e>
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e350:	4798      	blx	r3
 800e352:	3601      	adds	r6, #1
 800e354:	e7ee      	b.n	800e334 <__libc_init_array+0xc>
 800e356:	f855 3b04 	ldr.w	r3, [r5], #4
 800e35a:	4798      	blx	r3
 800e35c:	3601      	adds	r6, #1
 800e35e:	e7f2      	b.n	800e346 <__libc_init_array+0x1e>
 800e360:	0800fa58 	.word	0x0800fa58
 800e364:	0800fa58 	.word	0x0800fa58
 800e368:	0800fa58 	.word	0x0800fa58
 800e36c:	0800fa5c 	.word	0x0800fa5c

0800e370 <memcpy>:
 800e370:	440a      	add	r2, r1
 800e372:	4291      	cmp	r1, r2
 800e374:	f100 33ff 	add.w	r3, r0, #4294967295
 800e378:	d100      	bne.n	800e37c <memcpy+0xc>
 800e37a:	4770      	bx	lr
 800e37c:	b510      	push	{r4, lr}
 800e37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e382:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e386:	4291      	cmp	r1, r2
 800e388:	d1f9      	bne.n	800e37e <memcpy+0xe>
 800e38a:	bd10      	pop	{r4, pc}

0800e38c <memset>:
 800e38c:	4402      	add	r2, r0
 800e38e:	4603      	mov	r3, r0
 800e390:	4293      	cmp	r3, r2
 800e392:	d100      	bne.n	800e396 <memset+0xa>
 800e394:	4770      	bx	lr
 800e396:	f803 1b01 	strb.w	r1, [r3], #1
 800e39a:	e7f9      	b.n	800e390 <memset+0x4>
 800e39c:	0000      	movs	r0, r0
	...

0800e3a0 <ceil>:
 800e3a0:	ec51 0b10 	vmov	r0, r1, d0
 800e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e3b0:	2e13      	cmp	r6, #19
 800e3b2:	ee10 5a10 	vmov	r5, s0
 800e3b6:	ee10 8a10 	vmov	r8, s0
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	dc30      	bgt.n	800e420 <ceil+0x80>
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	da12      	bge.n	800e3e8 <ceil+0x48>
 800e3c2:	a335      	add	r3, pc, #212	; (adr r3, 800e498 <ceil+0xf8>)
 800e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c8:	f7f1 ff24 	bl	8000214 <__adddf3>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f7f2 fb66 	bl	8000aa0 <__aeabi_dcmpgt>
 800e3d4:	b128      	cbz	r0, 800e3e2 <ceil+0x42>
 800e3d6:	2c00      	cmp	r4, #0
 800e3d8:	db55      	blt.n	800e486 <ceil+0xe6>
 800e3da:	432c      	orrs	r4, r5
 800e3dc:	d057      	beq.n	800e48e <ceil+0xee>
 800e3de:	4c30      	ldr	r4, [pc, #192]	; (800e4a0 <ceil+0x100>)
 800e3e0:	2500      	movs	r5, #0
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	e025      	b.n	800e434 <ceil+0x94>
 800e3e8:	4f2e      	ldr	r7, [pc, #184]	; (800e4a4 <ceil+0x104>)
 800e3ea:	4137      	asrs	r7, r6
 800e3ec:	ea01 0307 	and.w	r3, r1, r7
 800e3f0:	4303      	orrs	r3, r0
 800e3f2:	d01f      	beq.n	800e434 <ceil+0x94>
 800e3f4:	a328      	add	r3, pc, #160	; (adr r3, 800e498 <ceil+0xf8>)
 800e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fa:	f7f1 ff0b 	bl	8000214 <__adddf3>
 800e3fe:	2200      	movs	r2, #0
 800e400:	2300      	movs	r3, #0
 800e402:	f7f2 fb4d 	bl	8000aa0 <__aeabi_dcmpgt>
 800e406:	2800      	cmp	r0, #0
 800e408:	d0eb      	beq.n	800e3e2 <ceil+0x42>
 800e40a:	2c00      	cmp	r4, #0
 800e40c:	bfc2      	ittt	gt
 800e40e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e412:	fa43 f606 	asrgt.w	r6, r3, r6
 800e416:	19a4      	addgt	r4, r4, r6
 800e418:	ea24 0407 	bic.w	r4, r4, r7
 800e41c:	2500      	movs	r5, #0
 800e41e:	e7e0      	b.n	800e3e2 <ceil+0x42>
 800e420:	2e33      	cmp	r6, #51	; 0x33
 800e422:	dd0b      	ble.n	800e43c <ceil+0x9c>
 800e424:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e428:	d104      	bne.n	800e434 <ceil+0x94>
 800e42a:	ee10 2a10 	vmov	r2, s0
 800e42e:	460b      	mov	r3, r1
 800e430:	f7f1 fef0 	bl	8000214 <__adddf3>
 800e434:	ec41 0b10 	vmov	d0, r0, r1
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e440:	f04f 33ff 	mov.w	r3, #4294967295
 800e444:	fa23 f707 	lsr.w	r7, r3, r7
 800e448:	4207      	tst	r7, r0
 800e44a:	d0f3      	beq.n	800e434 <ceil+0x94>
 800e44c:	a312      	add	r3, pc, #72	; (adr r3, 800e498 <ceil+0xf8>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 fedf 	bl	8000214 <__adddf3>
 800e456:	2200      	movs	r2, #0
 800e458:	2300      	movs	r3, #0
 800e45a:	f7f2 fb21 	bl	8000aa0 <__aeabi_dcmpgt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d0bf      	beq.n	800e3e2 <ceil+0x42>
 800e462:	2c00      	cmp	r4, #0
 800e464:	dd02      	ble.n	800e46c <ceil+0xcc>
 800e466:	2e14      	cmp	r6, #20
 800e468:	d103      	bne.n	800e472 <ceil+0xd2>
 800e46a:	3401      	adds	r4, #1
 800e46c:	ea25 0507 	bic.w	r5, r5, r7
 800e470:	e7b7      	b.n	800e3e2 <ceil+0x42>
 800e472:	2301      	movs	r3, #1
 800e474:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e478:	fa03 f606 	lsl.w	r6, r3, r6
 800e47c:	4435      	add	r5, r6
 800e47e:	4545      	cmp	r5, r8
 800e480:	bf38      	it	cc
 800e482:	18e4      	addcc	r4, r4, r3
 800e484:	e7f2      	b.n	800e46c <ceil+0xcc>
 800e486:	2500      	movs	r5, #0
 800e488:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e48c:	e7a9      	b.n	800e3e2 <ceil+0x42>
 800e48e:	4625      	mov	r5, r4
 800e490:	e7a7      	b.n	800e3e2 <ceil+0x42>
 800e492:	bf00      	nop
 800e494:	f3af 8000 	nop.w
 800e498:	8800759c 	.word	0x8800759c
 800e49c:	7e37e43c 	.word	0x7e37e43c
 800e4a0:	3ff00000 	.word	0x3ff00000
 800e4a4:	000fffff 	.word	0x000fffff

0800e4a8 <floor>:
 800e4a8:	ec51 0b10 	vmov	r0, r1, d0
 800e4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e4b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e4b8:	2e13      	cmp	r6, #19
 800e4ba:	ee10 5a10 	vmov	r5, s0
 800e4be:	ee10 8a10 	vmov	r8, s0
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	dc32      	bgt.n	800e52c <floor+0x84>
 800e4c6:	2e00      	cmp	r6, #0
 800e4c8:	da14      	bge.n	800e4f4 <floor+0x4c>
 800e4ca:	a333      	add	r3, pc, #204	; (adr r3, 800e598 <floor+0xf0>)
 800e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d0:	f7f1 fea0 	bl	8000214 <__adddf3>
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f7f2 fae2 	bl	8000aa0 <__aeabi_dcmpgt>
 800e4dc:	b138      	cbz	r0, 800e4ee <floor+0x46>
 800e4de:	2c00      	cmp	r4, #0
 800e4e0:	da57      	bge.n	800e592 <floor+0xea>
 800e4e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e4e6:	431d      	orrs	r5, r3
 800e4e8:	d001      	beq.n	800e4ee <floor+0x46>
 800e4ea:	4c2d      	ldr	r4, [pc, #180]	; (800e5a0 <floor+0xf8>)
 800e4ec:	2500      	movs	r5, #0
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	e025      	b.n	800e540 <floor+0x98>
 800e4f4:	4f2b      	ldr	r7, [pc, #172]	; (800e5a4 <floor+0xfc>)
 800e4f6:	4137      	asrs	r7, r6
 800e4f8:	ea01 0307 	and.w	r3, r1, r7
 800e4fc:	4303      	orrs	r3, r0
 800e4fe:	d01f      	beq.n	800e540 <floor+0x98>
 800e500:	a325      	add	r3, pc, #148	; (adr r3, 800e598 <floor+0xf0>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 fe85 	bl	8000214 <__adddf3>
 800e50a:	2200      	movs	r2, #0
 800e50c:	2300      	movs	r3, #0
 800e50e:	f7f2 fac7 	bl	8000aa0 <__aeabi_dcmpgt>
 800e512:	2800      	cmp	r0, #0
 800e514:	d0eb      	beq.n	800e4ee <floor+0x46>
 800e516:	2c00      	cmp	r4, #0
 800e518:	bfbe      	ittt	lt
 800e51a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e51e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e522:	19a4      	addlt	r4, r4, r6
 800e524:	ea24 0407 	bic.w	r4, r4, r7
 800e528:	2500      	movs	r5, #0
 800e52a:	e7e0      	b.n	800e4ee <floor+0x46>
 800e52c:	2e33      	cmp	r6, #51	; 0x33
 800e52e:	dd0b      	ble.n	800e548 <floor+0xa0>
 800e530:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e534:	d104      	bne.n	800e540 <floor+0x98>
 800e536:	ee10 2a10 	vmov	r2, s0
 800e53a:	460b      	mov	r3, r1
 800e53c:	f7f1 fe6a 	bl	8000214 <__adddf3>
 800e540:	ec41 0b10 	vmov	d0, r0, r1
 800e544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e548:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e54c:	f04f 33ff 	mov.w	r3, #4294967295
 800e550:	fa23 f707 	lsr.w	r7, r3, r7
 800e554:	4207      	tst	r7, r0
 800e556:	d0f3      	beq.n	800e540 <floor+0x98>
 800e558:	a30f      	add	r3, pc, #60	; (adr r3, 800e598 <floor+0xf0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 fe59 	bl	8000214 <__adddf3>
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	f7f2 fa9b 	bl	8000aa0 <__aeabi_dcmpgt>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d0bf      	beq.n	800e4ee <floor+0x46>
 800e56e:	2c00      	cmp	r4, #0
 800e570:	da02      	bge.n	800e578 <floor+0xd0>
 800e572:	2e14      	cmp	r6, #20
 800e574:	d103      	bne.n	800e57e <floor+0xd6>
 800e576:	3401      	adds	r4, #1
 800e578:	ea25 0507 	bic.w	r5, r5, r7
 800e57c:	e7b7      	b.n	800e4ee <floor+0x46>
 800e57e:	2301      	movs	r3, #1
 800e580:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e584:	fa03 f606 	lsl.w	r6, r3, r6
 800e588:	4435      	add	r5, r6
 800e58a:	4545      	cmp	r5, r8
 800e58c:	bf38      	it	cc
 800e58e:	18e4      	addcc	r4, r4, r3
 800e590:	e7f2      	b.n	800e578 <floor+0xd0>
 800e592:	2500      	movs	r5, #0
 800e594:	462c      	mov	r4, r5
 800e596:	e7aa      	b.n	800e4ee <floor+0x46>
 800e598:	8800759c 	.word	0x8800759c
 800e59c:	7e37e43c 	.word	0x7e37e43c
 800e5a0:	bff00000 	.word	0xbff00000
 800e5a4:	000fffff 	.word	0x000fffff

0800e5a8 <pow>:
 800e5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ac:	ec59 8b10 	vmov	r8, r9, d0
 800e5b0:	ec57 6b11 	vmov	r6, r7, d1
 800e5b4:	f000 f8dc 	bl	800e770 <__ieee754_pow>
 800e5b8:	4b4e      	ldr	r3, [pc, #312]	; (800e6f4 <pow+0x14c>)
 800e5ba:	f993 3000 	ldrsb.w	r3, [r3]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	ec55 4b10 	vmov	r4, r5, d0
 800e5c4:	d015      	beq.n	800e5f2 <pow+0x4a>
 800e5c6:	4632      	mov	r2, r6
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	f7f2 fa71 	bl	8000ab4 <__aeabi_dcmpun>
 800e5d2:	b970      	cbnz	r0, 800e5f2 <pow+0x4a>
 800e5d4:	4642      	mov	r2, r8
 800e5d6:	464b      	mov	r3, r9
 800e5d8:	4640      	mov	r0, r8
 800e5da:	4649      	mov	r1, r9
 800e5dc:	f7f2 fa6a 	bl	8000ab4 <__aeabi_dcmpun>
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	b148      	cbz	r0, 800e5fa <pow+0x52>
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	f7f2 fa31 	bl	8000a50 <__aeabi_dcmpeq>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d17d      	bne.n	800e6ee <pow+0x146>
 800e5f2:	ec45 4b10 	vmov	d0, r4, r5
 800e5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	f7f2 fa27 	bl	8000a50 <__aeabi_dcmpeq>
 800e602:	b1e0      	cbz	r0, 800e63e <pow+0x96>
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	4630      	mov	r0, r6
 800e60a:	4639      	mov	r1, r7
 800e60c:	f7f2 fa20 	bl	8000a50 <__aeabi_dcmpeq>
 800e610:	2800      	cmp	r0, #0
 800e612:	d16c      	bne.n	800e6ee <pow+0x146>
 800e614:	ec47 6b10 	vmov	d0, r6, r7
 800e618:	f000 fe89 	bl	800f32e <finite>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d0e8      	beq.n	800e5f2 <pow+0x4a>
 800e620:	2200      	movs	r2, #0
 800e622:	2300      	movs	r3, #0
 800e624:	4630      	mov	r0, r6
 800e626:	4639      	mov	r1, r7
 800e628:	f7f2 fa1c 	bl	8000a64 <__aeabi_dcmplt>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d0e0      	beq.n	800e5f2 <pow+0x4a>
 800e630:	f7ff fe74 	bl	800e31c <__errno>
 800e634:	2321      	movs	r3, #33	; 0x21
 800e636:	6003      	str	r3, [r0, #0]
 800e638:	2400      	movs	r4, #0
 800e63a:	4d2f      	ldr	r5, [pc, #188]	; (800e6f8 <pow+0x150>)
 800e63c:	e7d9      	b.n	800e5f2 <pow+0x4a>
 800e63e:	ec45 4b10 	vmov	d0, r4, r5
 800e642:	f000 fe74 	bl	800f32e <finite>
 800e646:	bbb8      	cbnz	r0, 800e6b8 <pow+0x110>
 800e648:	ec49 8b10 	vmov	d0, r8, r9
 800e64c:	f000 fe6f 	bl	800f32e <finite>
 800e650:	b390      	cbz	r0, 800e6b8 <pow+0x110>
 800e652:	ec47 6b10 	vmov	d0, r6, r7
 800e656:	f000 fe6a 	bl	800f32e <finite>
 800e65a:	b368      	cbz	r0, 800e6b8 <pow+0x110>
 800e65c:	4622      	mov	r2, r4
 800e65e:	462b      	mov	r3, r5
 800e660:	4620      	mov	r0, r4
 800e662:	4629      	mov	r1, r5
 800e664:	f7f2 fa26 	bl	8000ab4 <__aeabi_dcmpun>
 800e668:	b160      	cbz	r0, 800e684 <pow+0xdc>
 800e66a:	f7ff fe57 	bl	800e31c <__errno>
 800e66e:	2321      	movs	r3, #33	; 0x21
 800e670:	6003      	str	r3, [r0, #0]
 800e672:	2200      	movs	r2, #0
 800e674:	2300      	movs	r3, #0
 800e676:	4610      	mov	r0, r2
 800e678:	4619      	mov	r1, r3
 800e67a:	f7f2 f8ab 	bl	80007d4 <__aeabi_ddiv>
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	e7b6      	b.n	800e5f2 <pow+0x4a>
 800e684:	f7ff fe4a 	bl	800e31c <__errno>
 800e688:	2322      	movs	r3, #34	; 0x22
 800e68a:	6003      	str	r3, [r0, #0]
 800e68c:	2200      	movs	r2, #0
 800e68e:	2300      	movs	r3, #0
 800e690:	4640      	mov	r0, r8
 800e692:	4649      	mov	r1, r9
 800e694:	f7f2 f9e6 	bl	8000a64 <__aeabi_dcmplt>
 800e698:	2400      	movs	r4, #0
 800e69a:	b158      	cbz	r0, 800e6b4 <pow+0x10c>
 800e69c:	ec47 6b10 	vmov	d0, r6, r7
 800e6a0:	f000 fe5a 	bl	800f358 <rint>
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	ec51 0b10 	vmov	r0, r1, d0
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	f7f2 f9d0 	bl	8000a50 <__aeabi_dcmpeq>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0c2      	beq.n	800e63a <pow+0x92>
 800e6b4:	4d11      	ldr	r5, [pc, #68]	; (800e6fc <pow+0x154>)
 800e6b6:	e79c      	b.n	800e5f2 <pow+0x4a>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f2 f9c6 	bl	8000a50 <__aeabi_dcmpeq>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d094      	beq.n	800e5f2 <pow+0x4a>
 800e6c8:	ec49 8b10 	vmov	d0, r8, r9
 800e6cc:	f000 fe2f 	bl	800f32e <finite>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d08e      	beq.n	800e5f2 <pow+0x4a>
 800e6d4:	ec47 6b10 	vmov	d0, r6, r7
 800e6d8:	f000 fe29 	bl	800f32e <finite>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d088      	beq.n	800e5f2 <pow+0x4a>
 800e6e0:	f7ff fe1c 	bl	800e31c <__errno>
 800e6e4:	2322      	movs	r3, #34	; 0x22
 800e6e6:	6003      	str	r3, [r0, #0]
 800e6e8:	2400      	movs	r4, #0
 800e6ea:	2500      	movs	r5, #0
 800e6ec:	e781      	b.n	800e5f2 <pow+0x4a>
 800e6ee:	4d04      	ldr	r5, [pc, #16]	; (800e700 <pow+0x158>)
 800e6f0:	2400      	movs	r4, #0
 800e6f2:	e77e      	b.n	800e5f2 <pow+0x4a>
 800e6f4:	2000023c 	.word	0x2000023c
 800e6f8:	fff00000 	.word	0xfff00000
 800e6fc:	7ff00000 	.word	0x7ff00000
 800e700:	3ff00000 	.word	0x3ff00000

0800e704 <sqrt>:
 800e704:	b538      	push	{r3, r4, r5, lr}
 800e706:	ed2d 8b02 	vpush	{d8}
 800e70a:	ec55 4b10 	vmov	r4, r5, d0
 800e70e:	f000 fd51 	bl	800f1b4 <__ieee754_sqrt>
 800e712:	4b15      	ldr	r3, [pc, #84]	; (800e768 <sqrt+0x64>)
 800e714:	eeb0 8a40 	vmov.f32	s16, s0
 800e718:	eef0 8a60 	vmov.f32	s17, s1
 800e71c:	f993 3000 	ldrsb.w	r3, [r3]
 800e720:	3301      	adds	r3, #1
 800e722:	d019      	beq.n	800e758 <sqrt+0x54>
 800e724:	4622      	mov	r2, r4
 800e726:	462b      	mov	r3, r5
 800e728:	4620      	mov	r0, r4
 800e72a:	4629      	mov	r1, r5
 800e72c:	f7f2 f9c2 	bl	8000ab4 <__aeabi_dcmpun>
 800e730:	b990      	cbnz	r0, 800e758 <sqrt+0x54>
 800e732:	2200      	movs	r2, #0
 800e734:	2300      	movs	r3, #0
 800e736:	4620      	mov	r0, r4
 800e738:	4629      	mov	r1, r5
 800e73a:	f7f2 f993 	bl	8000a64 <__aeabi_dcmplt>
 800e73e:	b158      	cbz	r0, 800e758 <sqrt+0x54>
 800e740:	f7ff fdec 	bl	800e31c <__errno>
 800e744:	2321      	movs	r3, #33	; 0x21
 800e746:	6003      	str	r3, [r0, #0]
 800e748:	2200      	movs	r2, #0
 800e74a:	2300      	movs	r3, #0
 800e74c:	4610      	mov	r0, r2
 800e74e:	4619      	mov	r1, r3
 800e750:	f7f2 f840 	bl	80007d4 <__aeabi_ddiv>
 800e754:	ec41 0b18 	vmov	d8, r0, r1
 800e758:	eeb0 0a48 	vmov.f32	s0, s16
 800e75c:	eef0 0a68 	vmov.f32	s1, s17
 800e760:	ecbd 8b02 	vpop	{d8}
 800e764:	bd38      	pop	{r3, r4, r5, pc}
 800e766:	bf00      	nop
 800e768:	2000023c 	.word	0x2000023c
 800e76c:	00000000 	.word	0x00000000

0800e770 <__ieee754_pow>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	ed2d 8b06 	vpush	{d8-d10}
 800e778:	b08d      	sub	sp, #52	; 0x34
 800e77a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e77e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e782:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e786:	ea56 0100 	orrs.w	r1, r6, r0
 800e78a:	ec53 2b10 	vmov	r2, r3, d0
 800e78e:	f000 84d1 	beq.w	800f134 <__ieee754_pow+0x9c4>
 800e792:	497f      	ldr	r1, [pc, #508]	; (800e990 <__ieee754_pow+0x220>)
 800e794:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e798:	428c      	cmp	r4, r1
 800e79a:	ee10 8a10 	vmov	r8, s0
 800e79e:	4699      	mov	r9, r3
 800e7a0:	dc09      	bgt.n	800e7b6 <__ieee754_pow+0x46>
 800e7a2:	d103      	bne.n	800e7ac <__ieee754_pow+0x3c>
 800e7a4:	b97a      	cbnz	r2, 800e7c6 <__ieee754_pow+0x56>
 800e7a6:	42a6      	cmp	r6, r4
 800e7a8:	dd02      	ble.n	800e7b0 <__ieee754_pow+0x40>
 800e7aa:	e00c      	b.n	800e7c6 <__ieee754_pow+0x56>
 800e7ac:	428e      	cmp	r6, r1
 800e7ae:	dc02      	bgt.n	800e7b6 <__ieee754_pow+0x46>
 800e7b0:	428e      	cmp	r6, r1
 800e7b2:	d110      	bne.n	800e7d6 <__ieee754_pow+0x66>
 800e7b4:	b178      	cbz	r0, 800e7d6 <__ieee754_pow+0x66>
 800e7b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e7ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e7be:	ea54 0308 	orrs.w	r3, r4, r8
 800e7c2:	f000 84b7 	beq.w	800f134 <__ieee754_pow+0x9c4>
 800e7c6:	4873      	ldr	r0, [pc, #460]	; (800e994 <__ieee754_pow+0x224>)
 800e7c8:	b00d      	add	sp, #52	; 0x34
 800e7ca:	ecbd 8b06 	vpop	{d8-d10}
 800e7ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d2:	f000 bdb9 	b.w	800f348 <nan>
 800e7d6:	f1b9 0f00 	cmp.w	r9, #0
 800e7da:	da36      	bge.n	800e84a <__ieee754_pow+0xda>
 800e7dc:	496e      	ldr	r1, [pc, #440]	; (800e998 <__ieee754_pow+0x228>)
 800e7de:	428e      	cmp	r6, r1
 800e7e0:	dc51      	bgt.n	800e886 <__ieee754_pow+0x116>
 800e7e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e7e6:	428e      	cmp	r6, r1
 800e7e8:	f340 84af 	ble.w	800f14a <__ieee754_pow+0x9da>
 800e7ec:	1531      	asrs	r1, r6, #20
 800e7ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e7f2:	2914      	cmp	r1, #20
 800e7f4:	dd0f      	ble.n	800e816 <__ieee754_pow+0xa6>
 800e7f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e7fa:	fa20 fc01 	lsr.w	ip, r0, r1
 800e7fe:	fa0c f101 	lsl.w	r1, ip, r1
 800e802:	4281      	cmp	r1, r0
 800e804:	f040 84a1 	bne.w	800f14a <__ieee754_pow+0x9da>
 800e808:	f00c 0c01 	and.w	ip, ip, #1
 800e80c:	f1cc 0102 	rsb	r1, ip, #2
 800e810:	9100      	str	r1, [sp, #0]
 800e812:	b180      	cbz	r0, 800e836 <__ieee754_pow+0xc6>
 800e814:	e059      	b.n	800e8ca <__ieee754_pow+0x15a>
 800e816:	2800      	cmp	r0, #0
 800e818:	d155      	bne.n	800e8c6 <__ieee754_pow+0x156>
 800e81a:	f1c1 0114 	rsb	r1, r1, #20
 800e81e:	fa46 fc01 	asr.w	ip, r6, r1
 800e822:	fa0c f101 	lsl.w	r1, ip, r1
 800e826:	42b1      	cmp	r1, r6
 800e828:	f040 848c 	bne.w	800f144 <__ieee754_pow+0x9d4>
 800e82c:	f00c 0c01 	and.w	ip, ip, #1
 800e830:	f1cc 0102 	rsb	r1, ip, #2
 800e834:	9100      	str	r1, [sp, #0]
 800e836:	4959      	ldr	r1, [pc, #356]	; (800e99c <__ieee754_pow+0x22c>)
 800e838:	428e      	cmp	r6, r1
 800e83a:	d12d      	bne.n	800e898 <__ieee754_pow+0x128>
 800e83c:	2f00      	cmp	r7, #0
 800e83e:	da79      	bge.n	800e934 <__ieee754_pow+0x1c4>
 800e840:	4956      	ldr	r1, [pc, #344]	; (800e99c <__ieee754_pow+0x22c>)
 800e842:	2000      	movs	r0, #0
 800e844:	f7f1 ffc6 	bl	80007d4 <__aeabi_ddiv>
 800e848:	e016      	b.n	800e878 <__ieee754_pow+0x108>
 800e84a:	2100      	movs	r1, #0
 800e84c:	9100      	str	r1, [sp, #0]
 800e84e:	2800      	cmp	r0, #0
 800e850:	d13b      	bne.n	800e8ca <__ieee754_pow+0x15a>
 800e852:	494f      	ldr	r1, [pc, #316]	; (800e990 <__ieee754_pow+0x220>)
 800e854:	428e      	cmp	r6, r1
 800e856:	d1ee      	bne.n	800e836 <__ieee754_pow+0xc6>
 800e858:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e85c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e860:	ea53 0308 	orrs.w	r3, r3, r8
 800e864:	f000 8466 	beq.w	800f134 <__ieee754_pow+0x9c4>
 800e868:	4b4d      	ldr	r3, [pc, #308]	; (800e9a0 <__ieee754_pow+0x230>)
 800e86a:	429c      	cmp	r4, r3
 800e86c:	dd0d      	ble.n	800e88a <__ieee754_pow+0x11a>
 800e86e:	2f00      	cmp	r7, #0
 800e870:	f280 8464 	bge.w	800f13c <__ieee754_pow+0x9cc>
 800e874:	2000      	movs	r0, #0
 800e876:	2100      	movs	r1, #0
 800e878:	ec41 0b10 	vmov	d0, r0, r1
 800e87c:	b00d      	add	sp, #52	; 0x34
 800e87e:	ecbd 8b06 	vpop	{d8-d10}
 800e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e886:	2102      	movs	r1, #2
 800e888:	e7e0      	b.n	800e84c <__ieee754_pow+0xdc>
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	daf2      	bge.n	800e874 <__ieee754_pow+0x104>
 800e88e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e896:	e7ef      	b.n	800e878 <__ieee754_pow+0x108>
 800e898:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e89c:	d104      	bne.n	800e8a8 <__ieee754_pow+0x138>
 800e89e:	4610      	mov	r0, r2
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f7f1 fe6d 	bl	8000580 <__aeabi_dmul>
 800e8a6:	e7e7      	b.n	800e878 <__ieee754_pow+0x108>
 800e8a8:	493e      	ldr	r1, [pc, #248]	; (800e9a4 <__ieee754_pow+0x234>)
 800e8aa:	428f      	cmp	r7, r1
 800e8ac:	d10d      	bne.n	800e8ca <__ieee754_pow+0x15a>
 800e8ae:	f1b9 0f00 	cmp.w	r9, #0
 800e8b2:	db0a      	blt.n	800e8ca <__ieee754_pow+0x15a>
 800e8b4:	ec43 2b10 	vmov	d0, r2, r3
 800e8b8:	b00d      	add	sp, #52	; 0x34
 800e8ba:	ecbd 8b06 	vpop	{d8-d10}
 800e8be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c2:	f000 bc77 	b.w	800f1b4 <__ieee754_sqrt>
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	9100      	str	r1, [sp, #0]
 800e8ca:	ec43 2b10 	vmov	d0, r2, r3
 800e8ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8d2:	f000 fd23 	bl	800f31c <fabs>
 800e8d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8da:	ec51 0b10 	vmov	r0, r1, d0
 800e8de:	f1b8 0f00 	cmp.w	r8, #0
 800e8e2:	d12a      	bne.n	800e93a <__ieee754_pow+0x1ca>
 800e8e4:	b12c      	cbz	r4, 800e8f2 <__ieee754_pow+0x182>
 800e8e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e99c <__ieee754_pow+0x22c>
 800e8ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e8ee:	45e6      	cmp	lr, ip
 800e8f0:	d123      	bne.n	800e93a <__ieee754_pow+0x1ca>
 800e8f2:	2f00      	cmp	r7, #0
 800e8f4:	da05      	bge.n	800e902 <__ieee754_pow+0x192>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	4927      	ldr	r1, [pc, #156]	; (800e99c <__ieee754_pow+0x22c>)
 800e8fe:	f7f1 ff69 	bl	80007d4 <__aeabi_ddiv>
 800e902:	f1b9 0f00 	cmp.w	r9, #0
 800e906:	dab7      	bge.n	800e878 <__ieee754_pow+0x108>
 800e908:	9b00      	ldr	r3, [sp, #0]
 800e90a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e90e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e912:	4323      	orrs	r3, r4
 800e914:	d108      	bne.n	800e928 <__ieee754_pow+0x1b8>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4610      	mov	r0, r2
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7f1 fc77 	bl	8000210 <__aeabi_dsub>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	e78d      	b.n	800e844 <__ieee754_pow+0xd4>
 800e928:	9b00      	ldr	r3, [sp, #0]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d1a4      	bne.n	800e878 <__ieee754_pow+0x108>
 800e92e:	4602      	mov	r2, r0
 800e930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e934:	4610      	mov	r0, r2
 800e936:	4619      	mov	r1, r3
 800e938:	e79e      	b.n	800e878 <__ieee754_pow+0x108>
 800e93a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e93e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e942:	950a      	str	r5, [sp, #40]	; 0x28
 800e944:	9d00      	ldr	r5, [sp, #0]
 800e946:	46ac      	mov	ip, r5
 800e948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e94a:	ea5c 0505 	orrs.w	r5, ip, r5
 800e94e:	d0e4      	beq.n	800e91a <__ieee754_pow+0x1aa>
 800e950:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <__ieee754_pow+0x238>)
 800e952:	429e      	cmp	r6, r3
 800e954:	f340 80fc 	ble.w	800eb50 <__ieee754_pow+0x3e0>
 800e958:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e95c:	429e      	cmp	r6, r3
 800e95e:	4b10      	ldr	r3, [pc, #64]	; (800e9a0 <__ieee754_pow+0x230>)
 800e960:	dd07      	ble.n	800e972 <__ieee754_pow+0x202>
 800e962:	429c      	cmp	r4, r3
 800e964:	dc0a      	bgt.n	800e97c <__ieee754_pow+0x20c>
 800e966:	2f00      	cmp	r7, #0
 800e968:	da84      	bge.n	800e874 <__ieee754_pow+0x104>
 800e96a:	a307      	add	r3, pc, #28	; (adr r3, 800e988 <__ieee754_pow+0x218>)
 800e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e970:	e795      	b.n	800e89e <__ieee754_pow+0x12e>
 800e972:	429c      	cmp	r4, r3
 800e974:	dbf7      	blt.n	800e966 <__ieee754_pow+0x1f6>
 800e976:	4b09      	ldr	r3, [pc, #36]	; (800e99c <__ieee754_pow+0x22c>)
 800e978:	429c      	cmp	r4, r3
 800e97a:	dd17      	ble.n	800e9ac <__ieee754_pow+0x23c>
 800e97c:	2f00      	cmp	r7, #0
 800e97e:	dcf4      	bgt.n	800e96a <__ieee754_pow+0x1fa>
 800e980:	e778      	b.n	800e874 <__ieee754_pow+0x104>
 800e982:	bf00      	nop
 800e984:	f3af 8000 	nop.w
 800e988:	8800759c 	.word	0x8800759c
 800e98c:	7e37e43c 	.word	0x7e37e43c
 800e990:	7ff00000 	.word	0x7ff00000
 800e994:	0800fa08 	.word	0x0800fa08
 800e998:	433fffff 	.word	0x433fffff
 800e99c:	3ff00000 	.word	0x3ff00000
 800e9a0:	3fefffff 	.word	0x3fefffff
 800e9a4:	3fe00000 	.word	0x3fe00000
 800e9a8:	41e00000 	.word	0x41e00000
 800e9ac:	4b64      	ldr	r3, [pc, #400]	; (800eb40 <__ieee754_pow+0x3d0>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f7f1 fc2e 	bl	8000210 <__aeabi_dsub>
 800e9b4:	a356      	add	r3, pc, #344	; (adr r3, 800eb10 <__ieee754_pow+0x3a0>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	460d      	mov	r5, r1
 800e9be:	f7f1 fddf 	bl	8000580 <__aeabi_dmul>
 800e9c2:	a355      	add	r3, pc, #340	; (adr r3, 800eb18 <__ieee754_pow+0x3a8>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	460f      	mov	r7, r1
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f7f1 fdd6 	bl	8000580 <__aeabi_dmul>
 800e9d4:	4b5b      	ldr	r3, [pc, #364]	; (800eb44 <__ieee754_pow+0x3d4>)
 800e9d6:	4682      	mov	sl, r0
 800e9d8:	468b      	mov	fp, r1
 800e9da:	2200      	movs	r2, #0
 800e9dc:	4620      	mov	r0, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7f1 fdce 	bl	8000580 <__aeabi_dmul>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	a14d      	add	r1, pc, #308	; (adr r1, 800eb20 <__ieee754_pow+0x3b0>)
 800e9ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ee:	f7f1 fc0f 	bl	8000210 <__aeabi_dsub>
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	462b      	mov	r3, r5
 800e9f6:	f7f1 fdc3 	bl	8000580 <__aeabi_dmul>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	2000      	movs	r0, #0
 800ea00:	4951      	ldr	r1, [pc, #324]	; (800eb48 <__ieee754_pow+0x3d8>)
 800ea02:	f7f1 fc05 	bl	8000210 <__aeabi_dsub>
 800ea06:	4622      	mov	r2, r4
 800ea08:	4680      	mov	r8, r0
 800ea0a:	4689      	mov	r9, r1
 800ea0c:	462b      	mov	r3, r5
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	f7f1 fdb5 	bl	8000580 <__aeabi_dmul>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4640      	mov	r0, r8
 800ea1c:	4649      	mov	r1, r9
 800ea1e:	f7f1 fdaf 	bl	8000580 <__aeabi_dmul>
 800ea22:	a341      	add	r3, pc, #260	; (adr r3, 800eb28 <__ieee754_pow+0x3b8>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	f7f1 fdaa 	bl	8000580 <__aeabi_dmul>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4650      	mov	r0, sl
 800ea32:	4659      	mov	r1, fp
 800ea34:	f7f1 fbec 	bl	8000210 <__aeabi_dsub>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	4689      	mov	r9, r1
 800ea40:	4630      	mov	r0, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 fbe6 	bl	8000214 <__adddf3>
 800ea48:	2400      	movs	r4, #0
 800ea4a:	4632      	mov	r2, r6
 800ea4c:	463b      	mov	r3, r7
 800ea4e:	4620      	mov	r0, r4
 800ea50:	460d      	mov	r5, r1
 800ea52:	f7f1 fbdd 	bl	8000210 <__aeabi_dsub>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	f7f1 fbd7 	bl	8000210 <__aeabi_dsub>
 800ea62:	9b00      	ldr	r3, [sp, #0]
 800ea64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea66:	3b01      	subs	r3, #1
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	4682      	mov	sl, r0
 800ea6c:	468b      	mov	fp, r1
 800ea6e:	f040 81f1 	bne.w	800ee54 <__ieee754_pow+0x6e4>
 800ea72:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800eb30 <__ieee754_pow+0x3c0>
 800ea76:	eeb0 8a47 	vmov.f32	s16, s14
 800ea7a:	eef0 8a67 	vmov.f32	s17, s15
 800ea7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea82:	2600      	movs	r6, #0
 800ea84:	4632      	mov	r2, r6
 800ea86:	463b      	mov	r3, r7
 800ea88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea8c:	f7f1 fbc0 	bl	8000210 <__aeabi_dsub>
 800ea90:	4622      	mov	r2, r4
 800ea92:	462b      	mov	r3, r5
 800ea94:	f7f1 fd74 	bl	8000580 <__aeabi_dmul>
 800ea98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	4689      	mov	r9, r1
 800eaa0:	4650      	mov	r0, sl
 800eaa2:	4659      	mov	r1, fp
 800eaa4:	f7f1 fd6c 	bl	8000580 <__aeabi_dmul>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4640      	mov	r0, r8
 800eaae:	4649      	mov	r1, r9
 800eab0:	f7f1 fbb0 	bl	8000214 <__adddf3>
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	4680      	mov	r8, r0
 800eaba:	4689      	mov	r9, r1
 800eabc:	4620      	mov	r0, r4
 800eabe:	4629      	mov	r1, r5
 800eac0:	f7f1 fd5e 	bl	8000580 <__aeabi_dmul>
 800eac4:	460b      	mov	r3, r1
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	4602      	mov	r2, r0
 800eacc:	4649      	mov	r1, r9
 800eace:	4640      	mov	r0, r8
 800ead0:	f7f1 fba0 	bl	8000214 <__adddf3>
 800ead4:	4b1d      	ldr	r3, [pc, #116]	; (800eb4c <__ieee754_pow+0x3dc>)
 800ead6:	4299      	cmp	r1, r3
 800ead8:	ec45 4b19 	vmov	d9, r4, r5
 800eadc:	4606      	mov	r6, r0
 800eade:	460f      	mov	r7, r1
 800eae0:	468b      	mov	fp, r1
 800eae2:	f340 82fe 	ble.w	800f0e2 <__ieee754_pow+0x972>
 800eae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eaea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eaee:	4303      	orrs	r3, r0
 800eaf0:	f000 81f0 	beq.w	800eed4 <__ieee754_pow+0x764>
 800eaf4:	a310      	add	r3, pc, #64	; (adr r3, 800eb38 <__ieee754_pow+0x3c8>)
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	ec51 0b18 	vmov	r0, r1, d8
 800eafe:	f7f1 fd3f 	bl	8000580 <__aeabi_dmul>
 800eb02:	a30d      	add	r3, pc, #52	; (adr r3, 800eb38 <__ieee754_pow+0x3c8>)
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	e6cb      	b.n	800e8a2 <__ieee754_pow+0x132>
 800eb0a:	bf00      	nop
 800eb0c:	f3af 8000 	nop.w
 800eb10:	60000000 	.word	0x60000000
 800eb14:	3ff71547 	.word	0x3ff71547
 800eb18:	f85ddf44 	.word	0xf85ddf44
 800eb1c:	3e54ae0b 	.word	0x3e54ae0b
 800eb20:	55555555 	.word	0x55555555
 800eb24:	3fd55555 	.word	0x3fd55555
 800eb28:	652b82fe 	.word	0x652b82fe
 800eb2c:	3ff71547 	.word	0x3ff71547
 800eb30:	00000000 	.word	0x00000000
 800eb34:	bff00000 	.word	0xbff00000
 800eb38:	8800759c 	.word	0x8800759c
 800eb3c:	7e37e43c 	.word	0x7e37e43c
 800eb40:	3ff00000 	.word	0x3ff00000
 800eb44:	3fd00000 	.word	0x3fd00000
 800eb48:	3fe00000 	.word	0x3fe00000
 800eb4c:	408fffff 	.word	0x408fffff
 800eb50:	4bd7      	ldr	r3, [pc, #860]	; (800eeb0 <__ieee754_pow+0x740>)
 800eb52:	ea03 0309 	and.w	r3, r3, r9
 800eb56:	2200      	movs	r2, #0
 800eb58:	b92b      	cbnz	r3, 800eb66 <__ieee754_pow+0x3f6>
 800eb5a:	4bd6      	ldr	r3, [pc, #856]	; (800eeb4 <__ieee754_pow+0x744>)
 800eb5c:	f7f1 fd10 	bl	8000580 <__aeabi_dmul>
 800eb60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb64:	460c      	mov	r4, r1
 800eb66:	1523      	asrs	r3, r4, #20
 800eb68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb6c:	4413      	add	r3, r2
 800eb6e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb70:	4bd1      	ldr	r3, [pc, #836]	; (800eeb8 <__ieee754_pow+0x748>)
 800eb72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb7a:	429c      	cmp	r4, r3
 800eb7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb80:	dd08      	ble.n	800eb94 <__ieee754_pow+0x424>
 800eb82:	4bce      	ldr	r3, [pc, #824]	; (800eebc <__ieee754_pow+0x74c>)
 800eb84:	429c      	cmp	r4, r3
 800eb86:	f340 8163 	ble.w	800ee50 <__ieee754_pow+0x6e0>
 800eb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb94:	2400      	movs	r4, #0
 800eb96:	00e3      	lsls	r3, r4, #3
 800eb98:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb9a:	4bc9      	ldr	r3, [pc, #804]	; (800eec0 <__ieee754_pow+0x750>)
 800eb9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eba0:	ed93 7b00 	vldr	d7, [r3]
 800eba4:	4629      	mov	r1, r5
 800eba6:	ec53 2b17 	vmov	r2, r3, d7
 800ebaa:	eeb0 8a47 	vmov.f32	s16, s14
 800ebae:	eef0 8a67 	vmov.f32	s17, s15
 800ebb2:	4682      	mov	sl, r0
 800ebb4:	f7f1 fb2c 	bl	8000210 <__aeabi_dsub>
 800ebb8:	4652      	mov	r2, sl
 800ebba:	4606      	mov	r6, r0
 800ebbc:	460f      	mov	r7, r1
 800ebbe:	462b      	mov	r3, r5
 800ebc0:	ec51 0b18 	vmov	r0, r1, d8
 800ebc4:	f7f1 fb26 	bl	8000214 <__adddf3>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	2000      	movs	r0, #0
 800ebce:	49bd      	ldr	r1, [pc, #756]	; (800eec4 <__ieee754_pow+0x754>)
 800ebd0:	f7f1 fe00 	bl	80007d4 <__aeabi_ddiv>
 800ebd4:	ec41 0b19 	vmov	d9, r0, r1
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4630      	mov	r0, r6
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 fcce 	bl	8000580 <__aeabi_dmul>
 800ebe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebe8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	9304      	str	r3, [sp, #16]
 800ebf4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ebf8:	46ab      	mov	fp, r5
 800ebfa:	106d      	asrs	r5, r5, #1
 800ebfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	4614      	mov	r4, r2
 800ec10:	461d      	mov	r5, r3
 800ec12:	f7f1 fcb5 	bl	8000580 <__aeabi_dmul>
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	4639      	mov	r1, r7
 800ec1e:	f7f1 faf7 	bl	8000210 <__aeabi_dsub>
 800ec22:	ec53 2b18 	vmov	r2, r3, d8
 800ec26:	4606      	mov	r6, r0
 800ec28:	460f      	mov	r7, r1
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	f7f1 faef 	bl	8000210 <__aeabi_dsub>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	4650      	mov	r0, sl
 800ec38:	4659      	mov	r1, fp
 800ec3a:	f7f1 fae9 	bl	8000210 <__aeabi_dsub>
 800ec3e:	4642      	mov	r2, r8
 800ec40:	464b      	mov	r3, r9
 800ec42:	f7f1 fc9d 	bl	8000580 <__aeabi_dmul>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	f7f1 fadf 	bl	8000210 <__aeabi_dsub>
 800ec52:	ec53 2b19 	vmov	r2, r3, d9
 800ec56:	f7f1 fc93 	bl	8000580 <__aeabi_dmul>
 800ec5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec5e:	ec41 0b18 	vmov	d8, r0, r1
 800ec62:	4610      	mov	r0, r2
 800ec64:	4619      	mov	r1, r3
 800ec66:	f7f1 fc8b 	bl	8000580 <__aeabi_dmul>
 800ec6a:	a37d      	add	r3, pc, #500	; (adr r3, 800ee60 <__ieee754_pow+0x6f0>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
 800ec74:	f7f1 fc84 	bl	8000580 <__aeabi_dmul>
 800ec78:	a37b      	add	r3, pc, #492	; (adr r3, 800ee68 <__ieee754_pow+0x6f8>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fac9 	bl	8000214 <__adddf3>
 800ec82:	4622      	mov	r2, r4
 800ec84:	462b      	mov	r3, r5
 800ec86:	f7f1 fc7b 	bl	8000580 <__aeabi_dmul>
 800ec8a:	a379      	add	r3, pc, #484	; (adr r3, 800ee70 <__ieee754_pow+0x700>)
 800ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec90:	f7f1 fac0 	bl	8000214 <__adddf3>
 800ec94:	4622      	mov	r2, r4
 800ec96:	462b      	mov	r3, r5
 800ec98:	f7f1 fc72 	bl	8000580 <__aeabi_dmul>
 800ec9c:	a376      	add	r3, pc, #472	; (adr r3, 800ee78 <__ieee754_pow+0x708>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f7f1 fab7 	bl	8000214 <__adddf3>
 800eca6:	4622      	mov	r2, r4
 800eca8:	462b      	mov	r3, r5
 800ecaa:	f7f1 fc69 	bl	8000580 <__aeabi_dmul>
 800ecae:	a374      	add	r3, pc, #464	; (adr r3, 800ee80 <__ieee754_pow+0x710>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	f7f1 faae 	bl	8000214 <__adddf3>
 800ecb8:	4622      	mov	r2, r4
 800ecba:	462b      	mov	r3, r5
 800ecbc:	f7f1 fc60 	bl	8000580 <__aeabi_dmul>
 800ecc0:	a371      	add	r3, pc, #452	; (adr r3, 800ee88 <__ieee754_pow+0x718>)
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	f7f1 faa5 	bl	8000214 <__adddf3>
 800ecca:	4622      	mov	r2, r4
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7f1 fc53 	bl	8000580 <__aeabi_dmul>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4630      	mov	r0, r6
 800ece0:	4639      	mov	r1, r7
 800ece2:	f7f1 fc4d 	bl	8000580 <__aeabi_dmul>
 800ece6:	4642      	mov	r2, r8
 800ece8:	4604      	mov	r4, r0
 800ecea:	460d      	mov	r5, r1
 800ecec:	464b      	mov	r3, r9
 800ecee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecf2:	f7f1 fa8f 	bl	8000214 <__adddf3>
 800ecf6:	ec53 2b18 	vmov	r2, r3, d8
 800ecfa:	f7f1 fc41 	bl	8000580 <__aeabi_dmul>
 800ecfe:	4622      	mov	r2, r4
 800ed00:	462b      	mov	r3, r5
 800ed02:	f7f1 fa87 	bl	8000214 <__adddf3>
 800ed06:	4642      	mov	r2, r8
 800ed08:	4682      	mov	sl, r0
 800ed0a:	468b      	mov	fp, r1
 800ed0c:	464b      	mov	r3, r9
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4649      	mov	r1, r9
 800ed12:	f7f1 fc35 	bl	8000580 <__aeabi_dmul>
 800ed16:	4b6c      	ldr	r3, [pc, #432]	; (800eec8 <__ieee754_pow+0x758>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	460f      	mov	r7, r1
 800ed1e:	f7f1 fa79 	bl	8000214 <__adddf3>
 800ed22:	4652      	mov	r2, sl
 800ed24:	465b      	mov	r3, fp
 800ed26:	f7f1 fa75 	bl	8000214 <__adddf3>
 800ed2a:	9c04      	ldr	r4, [sp, #16]
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	4622      	mov	r2, r4
 800ed30:	460b      	mov	r3, r1
 800ed32:	4640      	mov	r0, r8
 800ed34:	4649      	mov	r1, r9
 800ed36:	f7f1 fc23 	bl	8000580 <__aeabi_dmul>
 800ed3a:	4b63      	ldr	r3, [pc, #396]	; (800eec8 <__ieee754_pow+0x758>)
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	4689      	mov	r9, r1
 800ed40:	2200      	movs	r2, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fa63 	bl	8000210 <__aeabi_dsub>
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	463b      	mov	r3, r7
 800ed4e:	f7f1 fa5f 	bl	8000210 <__aeabi_dsub>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4650      	mov	r0, sl
 800ed58:	4659      	mov	r1, fp
 800ed5a:	f7f1 fa59 	bl	8000210 <__aeabi_dsub>
 800ed5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed62:	f7f1 fc0d 	bl	8000580 <__aeabi_dmul>
 800ed66:	4622      	mov	r2, r4
 800ed68:	4606      	mov	r6, r0
 800ed6a:	460f      	mov	r7, r1
 800ed6c:	462b      	mov	r3, r5
 800ed6e:	ec51 0b18 	vmov	r0, r1, d8
 800ed72:	f7f1 fc05 	bl	8000580 <__aeabi_dmul>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	f7f1 fa49 	bl	8000214 <__adddf3>
 800ed82:	4606      	mov	r6, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	f7f1 fa41 	bl	8000214 <__adddf3>
 800ed92:	9c04      	ldr	r4, [sp, #16]
 800ed94:	a33e      	add	r3, pc, #248	; (adr r3, 800ee90 <__ieee754_pow+0x720>)
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	460d      	mov	r5, r1
 800ed9e:	f7f1 fbef 	bl	8000580 <__aeabi_dmul>
 800eda2:	4642      	mov	r2, r8
 800eda4:	ec41 0b18 	vmov	d8, r0, r1
 800eda8:	464b      	mov	r3, r9
 800edaa:	4620      	mov	r0, r4
 800edac:	4629      	mov	r1, r5
 800edae:	f7f1 fa2f 	bl	8000210 <__aeabi_dsub>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4630      	mov	r0, r6
 800edb8:	4639      	mov	r1, r7
 800edba:	f7f1 fa29 	bl	8000210 <__aeabi_dsub>
 800edbe:	a336      	add	r3, pc, #216	; (adr r3, 800ee98 <__ieee754_pow+0x728>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f7f1 fbdc 	bl	8000580 <__aeabi_dmul>
 800edc8:	a335      	add	r3, pc, #212	; (adr r3, 800eea0 <__ieee754_pow+0x730>)
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	4606      	mov	r6, r0
 800edd0:	460f      	mov	r7, r1
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	f7f1 fbd3 	bl	8000580 <__aeabi_dmul>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4630      	mov	r0, r6
 800ede0:	4639      	mov	r1, r7
 800ede2:	f7f1 fa17 	bl	8000214 <__adddf3>
 800ede6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ede8:	4b38      	ldr	r3, [pc, #224]	; (800eecc <__ieee754_pow+0x75c>)
 800edea:	4413      	add	r3, r2
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	f7f1 fa10 	bl	8000214 <__adddf3>
 800edf4:	4682      	mov	sl, r0
 800edf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf8:	468b      	mov	fp, r1
 800edfa:	f7f1 fb57 	bl	80004ac <__aeabi_i2d>
 800edfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee00:	4b33      	ldr	r3, [pc, #204]	; (800eed0 <__ieee754_pow+0x760>)
 800ee02:	4413      	add	r3, r2
 800ee04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee08:	4606      	mov	r6, r0
 800ee0a:	460f      	mov	r7, r1
 800ee0c:	4652      	mov	r2, sl
 800ee0e:	465b      	mov	r3, fp
 800ee10:	ec51 0b18 	vmov	r0, r1, d8
 800ee14:	f7f1 f9fe 	bl	8000214 <__adddf3>
 800ee18:	4642      	mov	r2, r8
 800ee1a:	464b      	mov	r3, r9
 800ee1c:	f7f1 f9fa 	bl	8000214 <__adddf3>
 800ee20:	4632      	mov	r2, r6
 800ee22:	463b      	mov	r3, r7
 800ee24:	f7f1 f9f6 	bl	8000214 <__adddf3>
 800ee28:	9c04      	ldr	r4, [sp, #16]
 800ee2a:	4632      	mov	r2, r6
 800ee2c:	463b      	mov	r3, r7
 800ee2e:	4620      	mov	r0, r4
 800ee30:	460d      	mov	r5, r1
 800ee32:	f7f1 f9ed 	bl	8000210 <__aeabi_dsub>
 800ee36:	4642      	mov	r2, r8
 800ee38:	464b      	mov	r3, r9
 800ee3a:	f7f1 f9e9 	bl	8000210 <__aeabi_dsub>
 800ee3e:	ec53 2b18 	vmov	r2, r3, d8
 800ee42:	f7f1 f9e5 	bl	8000210 <__aeabi_dsub>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4650      	mov	r0, sl
 800ee4c:	4659      	mov	r1, fp
 800ee4e:	e606      	b.n	800ea5e <__ieee754_pow+0x2ee>
 800ee50:	2401      	movs	r4, #1
 800ee52:	e6a0      	b.n	800eb96 <__ieee754_pow+0x426>
 800ee54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800eea8 <__ieee754_pow+0x738>
 800ee58:	e60d      	b.n	800ea76 <__ieee754_pow+0x306>
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w
 800ee60:	4a454eef 	.word	0x4a454eef
 800ee64:	3fca7e28 	.word	0x3fca7e28
 800ee68:	93c9db65 	.word	0x93c9db65
 800ee6c:	3fcd864a 	.word	0x3fcd864a
 800ee70:	a91d4101 	.word	0xa91d4101
 800ee74:	3fd17460 	.word	0x3fd17460
 800ee78:	518f264d 	.word	0x518f264d
 800ee7c:	3fd55555 	.word	0x3fd55555
 800ee80:	db6fabff 	.word	0xdb6fabff
 800ee84:	3fdb6db6 	.word	0x3fdb6db6
 800ee88:	33333303 	.word	0x33333303
 800ee8c:	3fe33333 	.word	0x3fe33333
 800ee90:	e0000000 	.word	0xe0000000
 800ee94:	3feec709 	.word	0x3feec709
 800ee98:	dc3a03fd 	.word	0xdc3a03fd
 800ee9c:	3feec709 	.word	0x3feec709
 800eea0:	145b01f5 	.word	0x145b01f5
 800eea4:	be3e2fe0 	.word	0xbe3e2fe0
 800eea8:	00000000 	.word	0x00000000
 800eeac:	3ff00000 	.word	0x3ff00000
 800eeb0:	7ff00000 	.word	0x7ff00000
 800eeb4:	43400000 	.word	0x43400000
 800eeb8:	0003988e 	.word	0x0003988e
 800eebc:	000bb679 	.word	0x000bb679
 800eec0:	0800fa10 	.word	0x0800fa10
 800eec4:	3ff00000 	.word	0x3ff00000
 800eec8:	40080000 	.word	0x40080000
 800eecc:	0800fa30 	.word	0x0800fa30
 800eed0:	0800fa20 	.word	0x0800fa20
 800eed4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f1ac <__ieee754_pow+0xa3c>)
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	4640      	mov	r0, r8
 800eedc:	4649      	mov	r1, r9
 800eede:	f7f1 f999 	bl	8000214 <__adddf3>
 800eee2:	4622      	mov	r2, r4
 800eee4:	ec41 0b1a 	vmov	d10, r0, r1
 800eee8:	462b      	mov	r3, r5
 800eeea:	4630      	mov	r0, r6
 800eeec:	4639      	mov	r1, r7
 800eeee:	f7f1 f98f 	bl	8000210 <__aeabi_dsub>
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	ec51 0b1a 	vmov	r0, r1, d10
 800eefa:	f7f1 fdd1 	bl	8000aa0 <__aeabi_dcmpgt>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	f47f adf8 	bne.w	800eaf4 <__ieee754_pow+0x384>
 800ef04:	4aa4      	ldr	r2, [pc, #656]	; (800f198 <__ieee754_pow+0xa28>)
 800ef06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	f340 810b 	ble.w	800f126 <__ieee754_pow+0x9b6>
 800ef10:	151b      	asrs	r3, r3, #20
 800ef12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef1a:	fa4a f303 	asr.w	r3, sl, r3
 800ef1e:	445b      	add	r3, fp
 800ef20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ef24:	4e9d      	ldr	r6, [pc, #628]	; (800f19c <__ieee754_pow+0xa2c>)
 800ef26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef2a:	4116      	asrs	r6, r2
 800ef2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ef30:	2000      	movs	r0, #0
 800ef32:	ea23 0106 	bic.w	r1, r3, r6
 800ef36:	f1c2 0214 	rsb	r2, r2, #20
 800ef3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ef3e:	fa4a fa02 	asr.w	sl, sl, r2
 800ef42:	f1bb 0f00 	cmp.w	fp, #0
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	bfb8      	it	lt
 800ef50:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef54:	f7f1 f95c 	bl	8000210 <__aeabi_dsub>
 800ef58:	ec41 0b19 	vmov	d9, r0, r1
 800ef5c:	4642      	mov	r2, r8
 800ef5e:	464b      	mov	r3, r9
 800ef60:	ec51 0b19 	vmov	r0, r1, d9
 800ef64:	f7f1 f956 	bl	8000214 <__adddf3>
 800ef68:	2400      	movs	r4, #0
 800ef6a:	a379      	add	r3, pc, #484	; (adr r3, 800f150 <__ieee754_pow+0x9e0>)
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	4620      	mov	r0, r4
 800ef72:	460d      	mov	r5, r1
 800ef74:	f7f1 fb04 	bl	8000580 <__aeabi_dmul>
 800ef78:	ec53 2b19 	vmov	r2, r3, d9
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	460f      	mov	r7, r1
 800ef80:	4620      	mov	r0, r4
 800ef82:	4629      	mov	r1, r5
 800ef84:	f7f1 f944 	bl	8000210 <__aeabi_dsub>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	4649      	mov	r1, r9
 800ef90:	f7f1 f93e 	bl	8000210 <__aeabi_dsub>
 800ef94:	a370      	add	r3, pc, #448	; (adr r3, 800f158 <__ieee754_pow+0x9e8>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 faf1 	bl	8000580 <__aeabi_dmul>
 800ef9e:	a370      	add	r3, pc, #448	; (adr r3, 800f160 <__ieee754_pow+0x9f0>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	4680      	mov	r8, r0
 800efa6:	4689      	mov	r9, r1
 800efa8:	4620      	mov	r0, r4
 800efaa:	4629      	mov	r1, r5
 800efac:	f7f1 fae8 	bl	8000580 <__aeabi_dmul>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4640      	mov	r0, r8
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 f92c 	bl	8000214 <__adddf3>
 800efbc:	4604      	mov	r4, r0
 800efbe:	460d      	mov	r5, r1
 800efc0:	4602      	mov	r2, r0
 800efc2:	460b      	mov	r3, r1
 800efc4:	4630      	mov	r0, r6
 800efc6:	4639      	mov	r1, r7
 800efc8:	f7f1 f924 	bl	8000214 <__adddf3>
 800efcc:	4632      	mov	r2, r6
 800efce:	463b      	mov	r3, r7
 800efd0:	4680      	mov	r8, r0
 800efd2:	4689      	mov	r9, r1
 800efd4:	f7f1 f91c 	bl	8000210 <__aeabi_dsub>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4620      	mov	r0, r4
 800efde:	4629      	mov	r1, r5
 800efe0:	f7f1 f916 	bl	8000210 <__aeabi_dsub>
 800efe4:	4642      	mov	r2, r8
 800efe6:	4606      	mov	r6, r0
 800efe8:	460f      	mov	r7, r1
 800efea:	464b      	mov	r3, r9
 800efec:	4640      	mov	r0, r8
 800efee:	4649      	mov	r1, r9
 800eff0:	f7f1 fac6 	bl	8000580 <__aeabi_dmul>
 800eff4:	a35c      	add	r3, pc, #368	; (adr r3, 800f168 <__ieee754_pow+0x9f8>)
 800eff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effa:	4604      	mov	r4, r0
 800effc:	460d      	mov	r5, r1
 800effe:	f7f1 fabf 	bl	8000580 <__aeabi_dmul>
 800f002:	a35b      	add	r3, pc, #364	; (adr r3, 800f170 <__ieee754_pow+0xa00>)
 800f004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f008:	f7f1 f902 	bl	8000210 <__aeabi_dsub>
 800f00c:	4622      	mov	r2, r4
 800f00e:	462b      	mov	r3, r5
 800f010:	f7f1 fab6 	bl	8000580 <__aeabi_dmul>
 800f014:	a358      	add	r3, pc, #352	; (adr r3, 800f178 <__ieee754_pow+0xa08>)
 800f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01a:	f7f1 f8fb 	bl	8000214 <__adddf3>
 800f01e:	4622      	mov	r2, r4
 800f020:	462b      	mov	r3, r5
 800f022:	f7f1 faad 	bl	8000580 <__aeabi_dmul>
 800f026:	a356      	add	r3, pc, #344	; (adr r3, 800f180 <__ieee754_pow+0xa10>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f8f0 	bl	8000210 <__aeabi_dsub>
 800f030:	4622      	mov	r2, r4
 800f032:	462b      	mov	r3, r5
 800f034:	f7f1 faa4 	bl	8000580 <__aeabi_dmul>
 800f038:	a353      	add	r3, pc, #332	; (adr r3, 800f188 <__ieee754_pow+0xa18>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 f8e9 	bl	8000214 <__adddf3>
 800f042:	4622      	mov	r2, r4
 800f044:	462b      	mov	r3, r5
 800f046:	f7f1 fa9b 	bl	8000580 <__aeabi_dmul>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	4640      	mov	r0, r8
 800f050:	4649      	mov	r1, r9
 800f052:	f7f1 f8dd 	bl	8000210 <__aeabi_dsub>
 800f056:	4604      	mov	r4, r0
 800f058:	460d      	mov	r5, r1
 800f05a:	4602      	mov	r2, r0
 800f05c:	460b      	mov	r3, r1
 800f05e:	4640      	mov	r0, r8
 800f060:	4649      	mov	r1, r9
 800f062:	f7f1 fa8d 	bl	8000580 <__aeabi_dmul>
 800f066:	2200      	movs	r2, #0
 800f068:	ec41 0b19 	vmov	d9, r0, r1
 800f06c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f070:	4620      	mov	r0, r4
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 f8cc 	bl	8000210 <__aeabi_dsub>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	ec51 0b19 	vmov	r0, r1, d9
 800f080:	f7f1 fba8 	bl	80007d4 <__aeabi_ddiv>
 800f084:	4632      	mov	r2, r6
 800f086:	4604      	mov	r4, r0
 800f088:	460d      	mov	r5, r1
 800f08a:	463b      	mov	r3, r7
 800f08c:	4640      	mov	r0, r8
 800f08e:	4649      	mov	r1, r9
 800f090:	f7f1 fa76 	bl	8000580 <__aeabi_dmul>
 800f094:	4632      	mov	r2, r6
 800f096:	463b      	mov	r3, r7
 800f098:	f7f1 f8bc 	bl	8000214 <__adddf3>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	f7f1 f8b4 	bl	8000210 <__aeabi_dsub>
 800f0a8:	4642      	mov	r2, r8
 800f0aa:	464b      	mov	r3, r9
 800f0ac:	f7f1 f8b0 	bl	8000210 <__aeabi_dsub>
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	493a      	ldr	r1, [pc, #232]	; (800f1a0 <__ieee754_pow+0xa30>)
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	f7f1 f8aa 	bl	8000210 <__aeabi_dsub>
 800f0bc:	e9cd 0100 	strd	r0, r1, [sp]
 800f0c0:	9b01      	ldr	r3, [sp, #4]
 800f0c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f0c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0ca:	da2f      	bge.n	800f12c <__ieee754_pow+0x9bc>
 800f0cc:	4650      	mov	r0, sl
 800f0ce:	ed9d 0b00 	vldr	d0, [sp]
 800f0d2:	f000 f9cd 	bl	800f470 <scalbn>
 800f0d6:	ec51 0b10 	vmov	r0, r1, d0
 800f0da:	ec53 2b18 	vmov	r2, r3, d8
 800f0de:	f7ff bbe0 	b.w	800e8a2 <__ieee754_pow+0x132>
 800f0e2:	4b30      	ldr	r3, [pc, #192]	; (800f1a4 <__ieee754_pow+0xa34>)
 800f0e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f0e8:	429e      	cmp	r6, r3
 800f0ea:	f77f af0b 	ble.w	800ef04 <__ieee754_pow+0x794>
 800f0ee:	4b2e      	ldr	r3, [pc, #184]	; (800f1a8 <__ieee754_pow+0xa38>)
 800f0f0:	440b      	add	r3, r1
 800f0f2:	4303      	orrs	r3, r0
 800f0f4:	d00b      	beq.n	800f10e <__ieee754_pow+0x99e>
 800f0f6:	a326      	add	r3, pc, #152	; (adr r3, 800f190 <__ieee754_pow+0xa20>)
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	ec51 0b18 	vmov	r0, r1, d8
 800f100:	f7f1 fa3e 	bl	8000580 <__aeabi_dmul>
 800f104:	a322      	add	r3, pc, #136	; (adr r3, 800f190 <__ieee754_pow+0xa20>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f7ff bbca 	b.w	800e8a2 <__ieee754_pow+0x132>
 800f10e:	4622      	mov	r2, r4
 800f110:	462b      	mov	r3, r5
 800f112:	f7f1 f87d 	bl	8000210 <__aeabi_dsub>
 800f116:	4642      	mov	r2, r8
 800f118:	464b      	mov	r3, r9
 800f11a:	f7f1 fcb7 	bl	8000a8c <__aeabi_dcmpge>
 800f11e:	2800      	cmp	r0, #0
 800f120:	f43f aef0 	beq.w	800ef04 <__ieee754_pow+0x794>
 800f124:	e7e7      	b.n	800f0f6 <__ieee754_pow+0x986>
 800f126:	f04f 0a00 	mov.w	sl, #0
 800f12a:	e717      	b.n	800ef5c <__ieee754_pow+0x7ec>
 800f12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f130:	4619      	mov	r1, r3
 800f132:	e7d2      	b.n	800f0da <__ieee754_pow+0x96a>
 800f134:	491a      	ldr	r1, [pc, #104]	; (800f1a0 <__ieee754_pow+0xa30>)
 800f136:	2000      	movs	r0, #0
 800f138:	f7ff bb9e 	b.w	800e878 <__ieee754_pow+0x108>
 800f13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f140:	f7ff bb9a 	b.w	800e878 <__ieee754_pow+0x108>
 800f144:	9000      	str	r0, [sp, #0]
 800f146:	f7ff bb76 	b.w	800e836 <__ieee754_pow+0xc6>
 800f14a:	2100      	movs	r1, #0
 800f14c:	f7ff bb60 	b.w	800e810 <__ieee754_pow+0xa0>
 800f150:	00000000 	.word	0x00000000
 800f154:	3fe62e43 	.word	0x3fe62e43
 800f158:	fefa39ef 	.word	0xfefa39ef
 800f15c:	3fe62e42 	.word	0x3fe62e42
 800f160:	0ca86c39 	.word	0x0ca86c39
 800f164:	be205c61 	.word	0xbe205c61
 800f168:	72bea4d0 	.word	0x72bea4d0
 800f16c:	3e663769 	.word	0x3e663769
 800f170:	c5d26bf1 	.word	0xc5d26bf1
 800f174:	3ebbbd41 	.word	0x3ebbbd41
 800f178:	af25de2c 	.word	0xaf25de2c
 800f17c:	3f11566a 	.word	0x3f11566a
 800f180:	16bebd93 	.word	0x16bebd93
 800f184:	3f66c16c 	.word	0x3f66c16c
 800f188:	5555553e 	.word	0x5555553e
 800f18c:	3fc55555 	.word	0x3fc55555
 800f190:	c2f8f359 	.word	0xc2f8f359
 800f194:	01a56e1f 	.word	0x01a56e1f
 800f198:	3fe00000 	.word	0x3fe00000
 800f19c:	000fffff 	.word	0x000fffff
 800f1a0:	3ff00000 	.word	0x3ff00000
 800f1a4:	4090cbff 	.word	0x4090cbff
 800f1a8:	3f6f3400 	.word	0x3f6f3400
 800f1ac:	652b82fe 	.word	0x652b82fe
 800f1b0:	3c971547 	.word	0x3c971547

0800f1b4 <__ieee754_sqrt>:
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	ec55 4b10 	vmov	r4, r5, d0
 800f1bc:	4e56      	ldr	r6, [pc, #344]	; (800f318 <__ieee754_sqrt+0x164>)
 800f1be:	43ae      	bics	r6, r5
 800f1c0:	ee10 0a10 	vmov	r0, s0
 800f1c4:	ee10 3a10 	vmov	r3, s0
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	462a      	mov	r2, r5
 800f1cc:	d110      	bne.n	800f1f0 <__ieee754_sqrt+0x3c>
 800f1ce:	ee10 2a10 	vmov	r2, s0
 800f1d2:	462b      	mov	r3, r5
 800f1d4:	f7f1 f9d4 	bl	8000580 <__aeabi_dmul>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f1 f818 	bl	8000214 <__adddf3>
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	460d      	mov	r5, r1
 800f1e8:	ec45 4b10 	vmov	d0, r4, r5
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f0:	2d00      	cmp	r5, #0
 800f1f2:	dc10      	bgt.n	800f216 <__ieee754_sqrt+0x62>
 800f1f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f1f8:	4330      	orrs	r0, r6
 800f1fa:	d0f5      	beq.n	800f1e8 <__ieee754_sqrt+0x34>
 800f1fc:	b15d      	cbz	r5, 800f216 <__ieee754_sqrt+0x62>
 800f1fe:	ee10 2a10 	vmov	r2, s0
 800f202:	462b      	mov	r3, r5
 800f204:	ee10 0a10 	vmov	r0, s0
 800f208:	f7f1 f802 	bl	8000210 <__aeabi_dsub>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	f7f1 fae0 	bl	80007d4 <__aeabi_ddiv>
 800f214:	e7e6      	b.n	800f1e4 <__ieee754_sqrt+0x30>
 800f216:	1509      	asrs	r1, r1, #20
 800f218:	d076      	beq.n	800f308 <__ieee754_sqrt+0x154>
 800f21a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f21e:	07ce      	lsls	r6, r1, #31
 800f220:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f224:	bf5e      	ittt	pl
 800f226:	0fda      	lsrpl	r2, r3, #31
 800f228:	005b      	lslpl	r3, r3, #1
 800f22a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f22e:	0fda      	lsrs	r2, r3, #31
 800f230:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f234:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f238:	2000      	movs	r0, #0
 800f23a:	106d      	asrs	r5, r5, #1
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	f04f 0e16 	mov.w	lr, #22
 800f242:	4684      	mov	ip, r0
 800f244:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f248:	eb0c 0401 	add.w	r4, ip, r1
 800f24c:	4294      	cmp	r4, r2
 800f24e:	bfde      	ittt	le
 800f250:	1b12      	suble	r2, r2, r4
 800f252:	eb04 0c01 	addle.w	ip, r4, r1
 800f256:	1840      	addle	r0, r0, r1
 800f258:	0052      	lsls	r2, r2, #1
 800f25a:	f1be 0e01 	subs.w	lr, lr, #1
 800f25e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f262:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f266:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f26a:	d1ed      	bne.n	800f248 <__ieee754_sqrt+0x94>
 800f26c:	4671      	mov	r1, lr
 800f26e:	2720      	movs	r7, #32
 800f270:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f274:	4562      	cmp	r2, ip
 800f276:	eb04 060e 	add.w	r6, r4, lr
 800f27a:	dc02      	bgt.n	800f282 <__ieee754_sqrt+0xce>
 800f27c:	d113      	bne.n	800f2a6 <__ieee754_sqrt+0xf2>
 800f27e:	429e      	cmp	r6, r3
 800f280:	d811      	bhi.n	800f2a6 <__ieee754_sqrt+0xf2>
 800f282:	2e00      	cmp	r6, #0
 800f284:	eb06 0e04 	add.w	lr, r6, r4
 800f288:	da43      	bge.n	800f312 <__ieee754_sqrt+0x15e>
 800f28a:	f1be 0f00 	cmp.w	lr, #0
 800f28e:	db40      	blt.n	800f312 <__ieee754_sqrt+0x15e>
 800f290:	f10c 0801 	add.w	r8, ip, #1
 800f294:	eba2 020c 	sub.w	r2, r2, ip
 800f298:	429e      	cmp	r6, r3
 800f29a:	bf88      	it	hi
 800f29c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f2a0:	1b9b      	subs	r3, r3, r6
 800f2a2:	4421      	add	r1, r4
 800f2a4:	46c4      	mov	ip, r8
 800f2a6:	0052      	lsls	r2, r2, #1
 800f2a8:	3f01      	subs	r7, #1
 800f2aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f2ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f2b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2b6:	d1dd      	bne.n	800f274 <__ieee754_sqrt+0xc0>
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	d006      	beq.n	800f2ca <__ieee754_sqrt+0x116>
 800f2bc:	1c4c      	adds	r4, r1, #1
 800f2be:	bf13      	iteet	ne
 800f2c0:	3101      	addne	r1, #1
 800f2c2:	3001      	addeq	r0, #1
 800f2c4:	4639      	moveq	r1, r7
 800f2c6:	f021 0101 	bicne.w	r1, r1, #1
 800f2ca:	1043      	asrs	r3, r0, #1
 800f2cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f2d0:	0849      	lsrs	r1, r1, #1
 800f2d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f2d6:	07c2      	lsls	r2, r0, #31
 800f2d8:	bf48      	it	mi
 800f2da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f2de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	463d      	mov	r5, r7
 800f2e6:	e77f      	b.n	800f1e8 <__ieee754_sqrt+0x34>
 800f2e8:	0ada      	lsrs	r2, r3, #11
 800f2ea:	3815      	subs	r0, #21
 800f2ec:	055b      	lsls	r3, r3, #21
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	d0fa      	beq.n	800f2e8 <__ieee754_sqrt+0x134>
 800f2f2:	02d7      	lsls	r7, r2, #11
 800f2f4:	d50a      	bpl.n	800f30c <__ieee754_sqrt+0x158>
 800f2f6:	f1c1 0420 	rsb	r4, r1, #32
 800f2fa:	fa23 f404 	lsr.w	r4, r3, r4
 800f2fe:	1e4d      	subs	r5, r1, #1
 800f300:	408b      	lsls	r3, r1
 800f302:	4322      	orrs	r2, r4
 800f304:	1b41      	subs	r1, r0, r5
 800f306:	e788      	b.n	800f21a <__ieee754_sqrt+0x66>
 800f308:	4608      	mov	r0, r1
 800f30a:	e7f0      	b.n	800f2ee <__ieee754_sqrt+0x13a>
 800f30c:	0052      	lsls	r2, r2, #1
 800f30e:	3101      	adds	r1, #1
 800f310:	e7ef      	b.n	800f2f2 <__ieee754_sqrt+0x13e>
 800f312:	46e0      	mov	r8, ip
 800f314:	e7be      	b.n	800f294 <__ieee754_sqrt+0xe0>
 800f316:	bf00      	nop
 800f318:	7ff00000 	.word	0x7ff00000

0800f31c <fabs>:
 800f31c:	ec51 0b10 	vmov	r0, r1, d0
 800f320:	ee10 2a10 	vmov	r2, s0
 800f324:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f328:	ec43 2b10 	vmov	d0, r2, r3
 800f32c:	4770      	bx	lr

0800f32e <finite>:
 800f32e:	b082      	sub	sp, #8
 800f330:	ed8d 0b00 	vstr	d0, [sp]
 800f334:	9801      	ldr	r0, [sp, #4]
 800f336:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f33a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f33e:	0fc0      	lsrs	r0, r0, #31
 800f340:	b002      	add	sp, #8
 800f342:	4770      	bx	lr
 800f344:	0000      	movs	r0, r0
	...

0800f348 <nan>:
 800f348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f350 <nan+0x8>
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	00000000 	.word	0x00000000
 800f354:	7ff80000 	.word	0x7ff80000

0800f358 <rint>:
 800f358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f35a:	ec51 0b10 	vmov	r0, r1, d0
 800f35e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f362:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f366:	2e13      	cmp	r6, #19
 800f368:	ee10 4a10 	vmov	r4, s0
 800f36c:	460b      	mov	r3, r1
 800f36e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f372:	dc58      	bgt.n	800f426 <rint+0xce>
 800f374:	2e00      	cmp	r6, #0
 800f376:	da2b      	bge.n	800f3d0 <rint+0x78>
 800f378:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f37c:	4302      	orrs	r2, r0
 800f37e:	d023      	beq.n	800f3c8 <rint+0x70>
 800f380:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f384:	4302      	orrs	r2, r0
 800f386:	4254      	negs	r4, r2
 800f388:	4314      	orrs	r4, r2
 800f38a:	0c4b      	lsrs	r3, r1, #17
 800f38c:	0b24      	lsrs	r4, r4, #12
 800f38e:	045b      	lsls	r3, r3, #17
 800f390:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f394:	ea44 0103 	orr.w	r1, r4, r3
 800f398:	4b32      	ldr	r3, [pc, #200]	; (800f464 <rint+0x10c>)
 800f39a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f39e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	f7f0 ff33 	bl	8000214 <__adddf3>
 800f3ae:	e9cd 0100 	strd	r0, r1, [sp]
 800f3b2:	463b      	mov	r3, r7
 800f3b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	f7f0 ff29 	bl	8000210 <__aeabi_dsub>
 800f3be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f3c6:	4639      	mov	r1, r7
 800f3c8:	ec41 0b10 	vmov	d0, r0, r1
 800f3cc:	b003      	add	sp, #12
 800f3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d0:	4a25      	ldr	r2, [pc, #148]	; (800f468 <rint+0x110>)
 800f3d2:	4132      	asrs	r2, r6
 800f3d4:	ea01 0702 	and.w	r7, r1, r2
 800f3d8:	4307      	orrs	r7, r0
 800f3da:	d0f5      	beq.n	800f3c8 <rint+0x70>
 800f3dc:	0851      	lsrs	r1, r2, #1
 800f3de:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f3e2:	4314      	orrs	r4, r2
 800f3e4:	d00c      	beq.n	800f400 <rint+0xa8>
 800f3e6:	ea23 0201 	bic.w	r2, r3, r1
 800f3ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f3ee:	2e13      	cmp	r6, #19
 800f3f0:	fa43 f606 	asr.w	r6, r3, r6
 800f3f4:	bf0c      	ite	eq
 800f3f6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f3fa:	2400      	movne	r4, #0
 800f3fc:	ea42 0306 	orr.w	r3, r2, r6
 800f400:	4918      	ldr	r1, [pc, #96]	; (800f464 <rint+0x10c>)
 800f402:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f406:	4622      	mov	r2, r4
 800f408:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f40c:	4620      	mov	r0, r4
 800f40e:	4629      	mov	r1, r5
 800f410:	f7f0 ff00 	bl	8000214 <__adddf3>
 800f414:	e9cd 0100 	strd	r0, r1, [sp]
 800f418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f41c:	4622      	mov	r2, r4
 800f41e:	462b      	mov	r3, r5
 800f420:	f7f0 fef6 	bl	8000210 <__aeabi_dsub>
 800f424:	e7d0      	b.n	800f3c8 <rint+0x70>
 800f426:	2e33      	cmp	r6, #51	; 0x33
 800f428:	dd07      	ble.n	800f43a <rint+0xe2>
 800f42a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f42e:	d1cb      	bne.n	800f3c8 <rint+0x70>
 800f430:	ee10 2a10 	vmov	r2, s0
 800f434:	f7f0 feee 	bl	8000214 <__adddf3>
 800f438:	e7c6      	b.n	800f3c8 <rint+0x70>
 800f43a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f43e:	f04f 36ff 	mov.w	r6, #4294967295
 800f442:	40d6      	lsrs	r6, r2
 800f444:	4230      	tst	r0, r6
 800f446:	d0bf      	beq.n	800f3c8 <rint+0x70>
 800f448:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f44c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f450:	bf1f      	itttt	ne
 800f452:	ea24 0101 	bicne.w	r1, r4, r1
 800f456:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f45a:	fa44 f202 	asrne.w	r2, r4, r2
 800f45e:	ea41 0402 	orrne.w	r4, r1, r2
 800f462:	e7cd      	b.n	800f400 <rint+0xa8>
 800f464:	0800fa40 	.word	0x0800fa40
 800f468:	000fffff 	.word	0x000fffff
 800f46c:	00000000 	.word	0x00000000

0800f470 <scalbn>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	ec55 4b10 	vmov	r4, r5, d0
 800f476:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f47a:	4606      	mov	r6, r0
 800f47c:	462b      	mov	r3, r5
 800f47e:	b99a      	cbnz	r2, 800f4a8 <scalbn+0x38>
 800f480:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f484:	4323      	orrs	r3, r4
 800f486:	d036      	beq.n	800f4f6 <scalbn+0x86>
 800f488:	4b39      	ldr	r3, [pc, #228]	; (800f570 <scalbn+0x100>)
 800f48a:	4629      	mov	r1, r5
 800f48c:	ee10 0a10 	vmov	r0, s0
 800f490:	2200      	movs	r2, #0
 800f492:	f7f1 f875 	bl	8000580 <__aeabi_dmul>
 800f496:	4b37      	ldr	r3, [pc, #220]	; (800f574 <scalbn+0x104>)
 800f498:	429e      	cmp	r6, r3
 800f49a:	4604      	mov	r4, r0
 800f49c:	460d      	mov	r5, r1
 800f49e:	da10      	bge.n	800f4c2 <scalbn+0x52>
 800f4a0:	a32b      	add	r3, pc, #172	; (adr r3, 800f550 <scalbn+0xe0>)
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	e03a      	b.n	800f51e <scalbn+0xae>
 800f4a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f4ac:	428a      	cmp	r2, r1
 800f4ae:	d10c      	bne.n	800f4ca <scalbn+0x5a>
 800f4b0:	ee10 2a10 	vmov	r2, s0
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	f7f0 feac 	bl	8000214 <__adddf3>
 800f4bc:	4604      	mov	r4, r0
 800f4be:	460d      	mov	r5, r1
 800f4c0:	e019      	b.n	800f4f6 <scalbn+0x86>
 800f4c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	3a36      	subs	r2, #54	; 0x36
 800f4ca:	4432      	add	r2, r6
 800f4cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4d0:	428a      	cmp	r2, r1
 800f4d2:	dd08      	ble.n	800f4e6 <scalbn+0x76>
 800f4d4:	2d00      	cmp	r5, #0
 800f4d6:	a120      	add	r1, pc, #128	; (adr r1, 800f558 <scalbn+0xe8>)
 800f4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4dc:	da1c      	bge.n	800f518 <scalbn+0xa8>
 800f4de:	a120      	add	r1, pc, #128	; (adr r1, 800f560 <scalbn+0xf0>)
 800f4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4e4:	e018      	b.n	800f518 <scalbn+0xa8>
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	dd08      	ble.n	800f4fc <scalbn+0x8c>
 800f4ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4f6:	ec45 4b10 	vmov	d0, r4, r5
 800f4fa:	bd70      	pop	{r4, r5, r6, pc}
 800f4fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f500:	da19      	bge.n	800f536 <scalbn+0xc6>
 800f502:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f506:	429e      	cmp	r6, r3
 800f508:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f50c:	dd0a      	ble.n	800f524 <scalbn+0xb4>
 800f50e:	a112      	add	r1, pc, #72	; (adr r1, 800f558 <scalbn+0xe8>)
 800f510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1e2      	bne.n	800f4de <scalbn+0x6e>
 800f518:	a30f      	add	r3, pc, #60	; (adr r3, 800f558 <scalbn+0xe8>)
 800f51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51e:	f7f1 f82f 	bl	8000580 <__aeabi_dmul>
 800f522:	e7cb      	b.n	800f4bc <scalbn+0x4c>
 800f524:	a10a      	add	r1, pc, #40	; (adr r1, 800f550 <scalbn+0xe0>)
 800f526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0b8      	beq.n	800f4a0 <scalbn+0x30>
 800f52e:	a10e      	add	r1, pc, #56	; (adr r1, 800f568 <scalbn+0xf8>)
 800f530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f534:	e7b4      	b.n	800f4a0 <scalbn+0x30>
 800f536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f53a:	3236      	adds	r2, #54	; 0x36
 800f53c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f540:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f544:	4620      	mov	r0, r4
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <scalbn+0x108>)
 800f548:	2200      	movs	r2, #0
 800f54a:	e7e8      	b.n	800f51e <scalbn+0xae>
 800f54c:	f3af 8000 	nop.w
 800f550:	c2f8f359 	.word	0xc2f8f359
 800f554:	01a56e1f 	.word	0x01a56e1f
 800f558:	8800759c 	.word	0x8800759c
 800f55c:	7e37e43c 	.word	0x7e37e43c
 800f560:	8800759c 	.word	0x8800759c
 800f564:	fe37e43c 	.word	0xfe37e43c
 800f568:	c2f8f359 	.word	0xc2f8f359
 800f56c:	81a56e1f 	.word	0x81a56e1f
 800f570:	43500000 	.word	0x43500000
 800f574:	ffff3cb0 	.word	0xffff3cb0
 800f578:	3c900000 	.word	0x3c900000

0800f57c <_init>:
 800f57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57e:	bf00      	nop
 800f580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f582:	bc08      	pop	{r3}
 800f584:	469e      	mov	lr, r3
 800f586:	4770      	bx	lr

0800f588 <_fini>:
 800f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58a:	bf00      	nop
 800f58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f58e:	bc08      	pop	{r3}
 800f590:	469e      	mov	lr, r3
 800f592:	4770      	bx	lr
