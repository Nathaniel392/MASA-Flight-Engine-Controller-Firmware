
tsm-flight-ec-firmware-pressboard-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f45c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800f628  0800f628  0001f628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fae0  0800fae0  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800fae0  0800fae0  0001fae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fae8  0800fae8  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fae8  0800fae8  0001fae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800faf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000224c  20000258  0800fd48  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024a4  0800fd48  000224a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b795  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fc  00000000  00000000  0004ba1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00050220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  000517b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267d4  00000000  00000000  00052b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de10  00000000  00000000  0007933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db248  00000000  00000000  0009714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172394  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  001723e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000258 	.word	0x20000258
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800f60c 	.word	0x0800f60c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000025c 	.word	0x2000025c
 8000204:	0800f60c 	.word	0x0800f60c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96e 	b.w	8000f04 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468c      	mov	ip, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8083 	bne.w	8000d56 <__udivmoddi4+0x116>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d947      	bls.n	8000ce6 <__udivmoddi4+0xa6>
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	b142      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5c:	f1c2 0020 	rsb	r0, r2, #32
 8000c60:	fa24 f000 	lsr.w	r0, r4, r0
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4097      	lsls	r7, r2
 8000c68:	ea40 0c01 	orr.w	ip, r0, r1
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fbbc f6f8 	udiv	r6, ip, r8
 8000c78:	fa1f fe87 	uxth.w	lr, r7
 8000c7c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb06 f10e 	mul.w	r1, r6, lr
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x60>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 8119 	bcs.w	8000ec8 <__udivmoddi4+0x288>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 8116 	bls.w	8000ec8 <__udivmoddi4+0x288>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x8c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	f080 8105 	bcs.w	8000ecc <__udivmoddi4+0x28c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8102 	bls.w	8000ecc <__udivmoddi4+0x28c>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd0:	eba4 040e 	sub.w	r4, r4, lr
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa0>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	b902      	cbnz	r2, 8000cea <__udivmoddi4+0xaa>
 8000ce8:	deff      	udf	#255	; 0xff
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d150      	bne.n	8000d94 <__udivmoddi4+0x154>
 8000cf2:	1bcb      	subs	r3, r1, r7
 8000cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d02:	0c21      	lsrs	r1, r4, #16
 8000d04:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0xe4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0xe2>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	f200 80e9 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x10c>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x10a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80d9 	bhi.w	8000efc <__udivmoddi4+0x2bc>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e7bf      	b.n	8000cd6 <__udivmoddi4+0x96>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0x12e>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <__udivmoddi4+0x282>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x1cc>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0x140>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80b8 	bhi.w	8000ef0 <__udivmoddi4+0x2b0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0103 	sbc.w	r1, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	468c      	mov	ip, r1
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0a8      	beq.n	8000ce0 <__udivmoddi4+0xa0>
 8000d8e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000d94:	f1c2 0320 	rsb	r3, r2, #32
 8000d98:	fa20 f603 	lsr.w	r6, r0, r3
 8000d9c:	4097      	lsls	r7, r2
 8000d9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000da2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da6:	40d9      	lsrs	r1, r3
 8000da8:	4330      	orrs	r0, r6
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f108 	mul.w	r1, r6, r8
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x19c>
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dce:	f080 808d 	bcs.w	8000eec <__udivmoddi4+0x2ac>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 808a 	bls.w	8000eec <__udivmoddi4+0x2ac>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	443b      	add	r3, r7
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b281      	uxth	r1, r0
 8000de0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb00 f308 	mul.w	r3, r0, r8
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x1c4>
 8000df4:	1879      	adds	r1, r7, r1
 8000df6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfa:	d273      	bcs.n	8000ee4 <__udivmoddi4+0x2a4>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d971      	bls.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4439      	add	r1, r7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e0a:	e778      	b.n	8000cfe <__udivmoddi4+0xbe>
 8000e0c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e10:	fa03 f406 	lsl.w	r4, r3, r6
 8000e14:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e26:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	0c3b      	lsrs	r3, r7, #16
 8000e2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e32:	fa1f f884 	uxth.w	r8, r4
 8000e36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e42:	458a      	cmp	sl, r1
 8000e44:	fa02 f206 	lsl.w	r2, r2, r6
 8000e48:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x220>
 8000e4e:	1861      	adds	r1, r4, r1
 8000e50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e54:	d248      	bcs.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e56:	458a      	cmp	sl, r1
 8000e58:	d946      	bls.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5e:	4421      	add	r1, r4
 8000e60:	eba1 010a 	sub.w	r1, r1, sl
 8000e64:	b2bf      	uxth	r7, r7
 8000e66:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e72:	fb00 f808 	mul.w	r8, r0, r8
 8000e76:	45b8      	cmp	r8, r7
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x24a>
 8000e7a:	19e7      	adds	r7, r4, r7
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d22e      	bcs.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d92c      	bls.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4427      	add	r7, r4
 8000e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8e:	eba7 0708 	sub.w	r7, r7, r8
 8000e92:	fba0 8902 	umull	r8, r9, r0, r2
 8000e96:	454f      	cmp	r7, r9
 8000e98:	46c6      	mov	lr, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	d31a      	bcc.n	8000ed4 <__udivmoddi4+0x294>
 8000e9e:	d017      	beq.n	8000ed0 <__udivmoddi4+0x290>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x27a>
 8000ea2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eaa:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eae:	40f2      	lsrs	r2, r6
 8000eb0:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb4:	40f7      	lsrs	r7, r6
 8000eb6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	462e      	mov	r6, r5
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	e70b      	b.n	8000ce0 <__udivmoddi4+0xa0>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fd      	b.n	8000ccc <__udivmoddi4+0x8c>
 8000ed0:	4543      	cmp	r3, r8
 8000ed2:	d2e5      	bcs.n	8000ea0 <__udivmoddi4+0x260>
 8000ed4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed8:	eb69 0104 	sbc.w	r1, r9, r4
 8000edc:	3801      	subs	r0, #1
 8000ede:	e7df      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e7d2      	b.n	8000e8a <__udivmoddi4+0x24a>
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	e78d      	b.n	8000e04 <__udivmoddi4+0x1c4>
 8000ee8:	4681      	mov	r9, r0
 8000eea:	e7b9      	b.n	8000e60 <__udivmoddi4+0x220>
 8000eec:	4666      	mov	r6, ip
 8000eee:	e775      	b.n	8000ddc <__udivmoddi4+0x19c>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e74a      	b.n	8000d8a <__udivmoddi4+0x14a>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	4439      	add	r1, r7
 8000efa:	e713      	b.n	8000d24 <__udivmoddi4+0xe4>
 8000efc:	3802      	subs	r0, #2
 8000efe:	443c      	add	r4, r7
 8000f00:	e724      	b.n	8000d4c <__udivmoddi4+0x10c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <init_autosequence_constants>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_constants() {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	// Hardcoded timings
	autosequence.startup_motor_start_delay_ms = 500;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f12:	601a      	str	r2, [r3, #0]
	autosequence.post_vent_on_time_ms = 1000;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1a:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_off_time_ms = 6000;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f22:	61da      	str	r2, [r3, #28]
	autosequence.post_purge_off_time_ms = 10000;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2a:	621a      	str	r2, [r3, #32]

	// Detection thresholds
	autosequence.ignition_ignitor_current_lower_bound = 3;  // TODO: fix this
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <init_autosequence_constants+0x60>)
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
	autosequence.ignition_ignitor_current_lower_bound_pass_min_detections = 30;  // 150ms
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f34:	221e      	movs	r2, #30
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34

	autosequence.hotfire_chamber_pres_lower_bound = 140.64; // Nominal * 0.5
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <init_autosequence_constants+0x64>)
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
	autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections = 10;  // 50ms
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f40:	220a      	movs	r2, #10
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c
	autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms = 1000;  // Wait 1s
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	655a      	str	r2, [r3, #84]	; 0x54

	autosequence.hotfire_chamber_pres_upper_bound = 421.9;  // Nominal * 1.5
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <init_autosequence_constants+0x68>)
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
	autosequence.hotfire_chamber_pres_upper_bound_pass_min_detections = 3;  // 15ms
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <init_autosequence_constants+0x5c>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000065c 	.word	0x2000065c
 8000f68:	40400000 	.word	0x40400000
 8000f6c:	430ca3d7 	.word	0x430ca3d7
 8000f70:	43d2f333 	.word	0x43d2f333

08000f74 <init_tank_pressure_control_configuration>:
 * Configuring tank settings that don't change between tests.
 * Variables stored in nonvolatile memory are initialized elsewhere.
 *
 * TODO: say where they're initialized.
 */
void init_tank_pressure_control_configuration() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

	// LOX tank configuration
	tanks[LOX_TANK_NUM].is_cryogenic = 1;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	705a      	strb	r2, [r3, #1]
	tanks[LOX_TANK_NUM].control_valve_channel = LOX_CONTROL_VALVE_CH;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	709a      	strb	r2, [r3, #2]
	tanks[LOX_TANK_NUM].control_pres = &pressure[LOX_TANK_PRES_CH];  // TODO: change
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <init_tank_pressure_control_configuration+0x84>)
 8000f88:	605a      	str	r2, [r3, #4]
	tanks[LOX_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000f8e:	609a      	str	r2, [r3, #8]
	tanks[LOX_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000f94:	60da      	str	r2, [r3, #12]
	tanks[LOX_TANK_NUM].PID_ctrl_loop_period_ms = 50;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f98:	2232      	movs	r2, #50	; 0x32
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

	// Fuel tank configuration
	tanks[FUEL_TANK_NUM].is_cryogenic = 0;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tanks[FUEL_TANK_NUM].control_valve_channel = FUEL_CONTROL_VALVE_CH;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tanks[FUEL_TANK_NUM].control_pres = &pressure[FUEL_TANK_PRES_CH];  // TODO: change
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <init_tank_pressure_control_configuration+0x90>)
 8000fb0:	659a      	str	r2, [r3, #88]	; 0x58
	tanks[FUEL_TANK_NUM].COPV_pres = &pressure[COPV_PRES_CH];  // TODO: change
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <init_tank_pressure_control_configuration+0x88>)
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c
	tanks[FUEL_TANK_NUM].COPV_temp = &tc[COPV_TEMP_CH];
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <init_tank_pressure_control_configuration+0x8c>)
 8000fbc:	661a      	str	r2, [r3, #96]	; 0x60
	tanks[FUEL_TANK_NUM].PID_ctrl_loop_period_ms = 50;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc0:	2232      	movs	r2, #50	; 0x32
 8000fc2:	679a      	str	r2, [r3, #120]	; 0x78

	// Motor info
	tanks[LOX_TANK_NUM].motor_num = LOX_TANK_NUM;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
	tanks[LOX_TANK_NUM].motor_num = FUEL_TANK_NUM;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	70da      	strb	r2, [r3, #3]

	// Bang bang thresholds
	tanks[LOX_TANK_NUM].bang_bang_low_pres_diff = 10;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fd4:	615a      	str	r2, [r3, #20]
	tanks[LOX_TANK_NUM].bang_bang_high_pres_diff = 15;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <init_tank_pressure_control_configuration+0x98>)
 8000fda:	619a      	str	r2, [r3, #24]
	tanks[FUEL_TANK_NUM].bang_bang_low_pres_diff = 5;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <init_tank_pressure_control_configuration+0x9c>)
 8000fe0:	669a      	str	r2, [r3, #104]	; 0x68
	tanks[FUEL_TANK_NUM].bang_bang_high_pres_diff = 10;
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <init_tank_pressure_control_configuration+0x80>)
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <init_tank_pressure_control_configuration+0x94>)
 8000fe6:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200005b4 	.word	0x200005b4
 8000ff8:	20000324 	.word	0x20000324
 8000ffc:	2000032c 	.word	0x2000032c
 8001000:	20000390 	.word	0x20000390
 8001004:	20000328 	.word	0x20000328
 8001008:	41200000 	.word	0x41200000
 800100c:	41700000 	.word	0x41700000
 8001010:	40a00000 	.word	0x40a00000

08001014 <init_autosequence_control_variables>:

/**
 * Call this on initialization and every time you exit the autosequence
 */
void init_autosequence_control_variables() {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	autosequence.startup_init_motor_pos_complete = 0;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <init_autosequence_control_variables+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <init_autosequence_control_variables+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	871a      	strh	r2, [r3, #56]	; 0x38
	autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	autosequence.post_gse_fuel_vent_signal = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	autosequence.post_gse_fuel_vent_command_enable = 0;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <init_autosequence_control_variables+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	2000065c 	.word	0x2000065c

0800107c <enter_abort_state>:

/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 */
void enter_abort_state() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	// Enter Abort state
	// This line is for in case someone forgets to set Abort elsewhere
	STATE = Abort;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <enter_abort_state+0x90>)
 8001082:	2206      	movs	r2, #6
 8001084:	701a      	strb	r2, [r3, #0]

	// Close MPVs
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8001086:	2100      	movs	r1, #0
 8001088:	2004      	movs	r0, #4
 800108a:	f006 fdce 	bl	8007c2a <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 800108e:	2100      	movs	r1, #0
 8001090:	2005      	movs	r0, #5
 8001092:	f006 fdca 	bl	8007c2a <set_valve_channel>
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 8001096:	2100      	movs	r1, #0
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fdc6 	bl	8007c2a <set_valve_channel>

	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 800109e:	2100      	movs	r1, #0
 80010a0:	2007      	movs	r0, #7
 80010a2:	f006 fdc2 	bl	8007c2a <set_valve_channel>

	// Close control valves
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f006 fdbe 	bl	8007c2a <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2003      	movs	r0, #3
 80010b2:	f006 fdba 	bl	8007c2a <set_valve_channel>

	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);
 80010b6:	2100      	movs	r1, #0
 80010b8:	2006      	movs	r0, #6
 80010ba:	f006 fdb6 	bl	8007c2a <set_valve_channel>

	// Open vent valves
	// Fuel vent is handled by GSE controller
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 80010be:	2101      	movs	r1, #1
 80010c0:	2002      	movs	r0, #2
 80010c2:	f006 fdb2 	bl	8007c2a <set_valve_channel>
	autosequence.post_gse_fuel_vent_command_enable = 1;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <enter_abort_state+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	autosequence.post_gse_fuel_vent_signal = VALVE_ON;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <enter_abort_state+0x94>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 80010d6:	2101      	movs	r1, #1
 80010d8:	2008      	movs	r0, #8
 80010da:	f006 fda6 	bl	8007c2a <set_valve_channel>

	// Close motors (needle valves), 0 degrees should be closed.
	moveMotorToPos(0, LOX_TANK_NUM);
 80010de:	2000      	movs	r0, #0
 80010e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001114 <enter_abort_state+0x98>
 80010e4:	f000 ff8e 	bl	8002004 <moveMotorToPos>
	moveMotorToPos(0, FUEL_TANK_NUM);
 80010e8:	2001      	movs	r0, #1
 80010ea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001114 <enter_abort_state+0x98>
 80010ee:	f000 ff89 	bl	8002004 <moveMotorToPos>

	// Stop TPC (not an actuation)
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <enter_abort_state+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <enter_abort_state+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	// Make sure telem is enabled, in case it aborted during
	// the MPV delay
	telem_disabled = 0;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <enter_abort_state+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002dc 	.word	0x200002dc
 8001110:	2000065c 	.word	0x2000065c
 8001114:	00000000 	.word	0x00000000
 8001118:	200005b1 	.word	0x200005b1

0800111c <enter_safe_disarm_state>:
 * Call this function to safe the system.
 * Not the same as abort.
 *
 * Can only be called in AutoPress and Startup.
 */
void enter_safe_disarm_state() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	// Including this line in case programmer forgets to set it elsewhere
	STATE = Safe;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <enter_safe_disarm_state+0x24>)
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]

	// Close control valves and go back to Manual.
	// TODO: should tank enable be looked at here?
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f006 fd7e 	bl	8007c2a <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 800112e:	2100      	movs	r1, #0
 8001130:	2003      	movs	r0, #3
 8001132:	f006 fd7a 	bl	8007c2a <set_valve_channel>

	// Reset all control variables whenever exiting the autosequence
	init_autosequence_control_variables();
 8001136:	f7ff ff6d 	bl	8001014 <init_autosequence_control_variables>

	// TODO: go back to Manual?
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002dc 	.word	0x200002dc

08001144 <update_ignitor_break_detector>:
 * reaches a certain count, set a flag. Current should drop
 * out after the ematch burns and the ignitor lights.
 *
 *  This function is called every 5ms during the detection period.
 */
void update_ignitor_break_detector() {			  // Counter
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	  if (ivlv[IGNITOR_CH] < autosequence.ignition_ignitor_current_lower_bound) {
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <update_ignitor_break_detector+0x58>)
 800114a:	ed93 7a06 	vldr	s14, [r3, #24]
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001150:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d506      	bpl.n	800116c <update_ignitor_break_detector+0x28>
		  ++autosequence.ignition_ignitor_current_lower_bound_pass_count;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001160:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001162:	3301      	adds	r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001168:	871a      	strh	r2, [r3, #56]	; 0x38
 800116a:	e002      	b.n	8001172 <update_ignitor_break_detector+0x2e>
	  }
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_pass_count = 0;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800116e:	2200      	movs	r2, #0
 8001170:	871a      	strh	r2, [r3, #56]	; 0x38
	  }

	  // Threshold check
	  if (autosequence.ignition_ignitor_current_lower_bound_pass_count
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001174:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001176:	461a      	mov	r2, r3
			  >= autosequence.ignition_ignitor_current_lower_bound_pass_min_detections) {
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	  if (autosequence.ignition_ignitor_current_lower_bound_pass_count
 800117c:	429a      	cmp	r2, r3
 800117e:	d304      	bcc.n	800118a <update_ignitor_break_detector+0x46>
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 1;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	  }
	  else {
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
	  }
}
 8001188:	e003      	b.n	8001192 <update_ignitor_break_detector+0x4e>
		  autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <update_ignitor_break_detector+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	2000033c 	.word	0x2000033c
 80011a0:	2000065c 	.word	0x2000065c

080011a4 <update_combustion_failure_detector>:
 * Pressure should stay above this threshold during
 * a nominal hotfire.
 *
 * This function is called every 5ms during the detection period.
 */
void update_combustion_failure_detector() {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	  // Counter
	  if (pressure[CHAMBER_PRES_CH] < autosequence.hotfire_chamber_pres_lower_bound) {
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <update_combustion_failure_detector+0x60>)
 80011aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d508      	bpl.n	80011d0 <update_combustion_failure_detector+0x2c>
		  ++autosequence.hotfire_chamber_pres_lower_bound_pass_count;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80011ce:	e003      	b.n	80011d8 <update_combustion_failure_detector+0x34>
	  }
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_pass_count = 0;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  }

	  // Threshold check
	  if (autosequence.hotfire_chamber_pres_lower_bound_pass_count
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011de:	461a      	mov	r2, r3
			  >= autosequence.hotfire_chamber_pres_lower_bound_pass_min_detections) {
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	  if (autosequence.hotfire_chamber_pres_lower_bound_pass_count
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d304      	bcc.n	80011f2 <update_combustion_failure_detector+0x4e>
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 1;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	  }
	  else {
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
	  }
}
 80011f0:	e003      	b.n	80011fa <update_combustion_failure_detector+0x56>
		  autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <update_combustion_failure_detector+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000324 	.word	0x20000324
 8001208:	2000065c 	.word	0x2000065c

0800120c <update_hard_start_detector>:
 * set a flag. Pressure should stay below this threshold for
 * the entire hotfire.
 *
 * This function is called every 5ms during the detection period.
 */
void update_hard_start_detector() {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	// Counter
	if (pressure[CHAMBER_PRES_CH] > autosequence.hotfire_chamber_pres_upper_bound) {
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <update_hard_start_detector+0x60>)
 8001212:	ed93 7a05 	vldr	s14, [r3, #20]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <update_hard_start_detector+0x64>)
 8001218:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd08      	ble.n	8001238 <update_hard_start_detector+0x2c>
		++autosequence.hotfire_chamber_pres_upper_bound_pass_count;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <update_hard_start_detector+0x64>)
 8001228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <update_hard_start_detector+0x64>)
 8001232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001236:	e003      	b.n	8001240 <update_hard_start_detector+0x34>
	}
	else {
		autosequence.hotfire_chamber_pres_upper_bound_pass_count = 0;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <update_hard_start_detector+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	// Threshold check
	if (autosequence.hotfire_chamber_pres_upper_bound_pass_count
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <update_hard_start_detector+0x64>)
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	461a      	mov	r2, r3
			>= autosequence.hotfire_chamber_pres_upper_bound_pass_min_detections) {
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <update_hard_start_detector+0x64>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	if (autosequence.hotfire_chamber_pres_upper_bound_pass_count
 800124c:	429a      	cmp	r2, r3
 800124e:	d304      	bcc.n	800125a <update_hard_start_detector+0x4e>
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 1;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <update_hard_start_detector+0x64>)
 8001252:	2201      	movs	r2, #1
 8001254:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	else {
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
	}
}
 8001258:	e003      	b.n	8001262 <update_hard_start_detector+0x56>
		autosequence.hotfire_chamber_pres_upper_bound_threshold_passed = 0;
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <update_hard_start_detector+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000324 	.word	0x20000324
 8001270:	2000065c 	.word	0x2000065c

08001274 <manual_state_transition>:


void manual_state_transition(uint8_t next_state) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]

	// Aborts work in any state
	if (next_state == Abort) {
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d108      	bne.n	8001296 <manual_state_transition+0x22>
		STATE = Abort;
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <manual_state_transition+0x13c>)
 8001286:	2206      	movs	r2, #6
 8001288:	701a      	strb	r2, [r3, #0]
		enter_abort_state();
 800128a:	f7ff fef7 	bl	800107c <enter_abort_state>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
 800128e:	2001      	movs	r0, #1
 8001290:	f004 ff30 	bl	80060f4 <set_status_flag>
		return;
 8001294:	e089      	b.n	80013aa <manual_state_transition+0x136>
	}

	// Check current state to determine next state transition
	if (STATE == Manual) {
 8001296:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <manual_state_transition+0x13c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <manual_state_transition+0x3a>
		if (next_state == Armed) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 8082 	bne.w	80013aa <manual_state_transition+0x136>
			STATE = Armed;
 80012a6:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <manual_state_transition+0x13c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e07d      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Armed) {
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <manual_state_transition+0x13c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10d      	bne.n	80012d2 <manual_state_transition+0x5e>
		if (next_state == Manual) {
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <manual_state_transition+0x50>
			STATE = Manual;
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <manual_state_transition+0x13c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e072      	b.n	80013aa <manual_state_transition+0x136>
		}
		else if (next_state == AutoPress) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d16f      	bne.n	80013aa <manual_state_transition+0x136>
			STATE = AutoPress;
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <manual_state_transition+0x13c>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e06b      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == AutoPress) {
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <manual_state_transition+0x13c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d120      	bne.n	800131c <manual_state_transition+0xa8>
		if (next_state == Manual) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <manual_state_transition+0x78>
			STATE = Safe;
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <manual_state_transition+0x13c>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 80012e6:	f7ff ff19 	bl	800111c <enter_safe_disarm_state>
 80012ea:	e05e      	b.n	80013aa <manual_state_transition+0x136>
		}
		else if (next_state == Startup) {
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d15b      	bne.n	80013aa <manual_state_transition+0x136>
			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f006 fc98 	bl	8007c2a <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2003      	movs	r0, #3
 80012fe:	f006 fc94 	bl	8007c2a <set_valve_channel>

			autosequence.startup_start_time_ms = SYS_MILLIS;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <manual_state_transition+0x140>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <manual_state_transition+0x144>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <manual_state_transition+0x148>)
 8001312:	65d3      	str	r3, [r2, #92]	; 0x5c
			STATE = Startup;
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <manual_state_transition+0x13c>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e046      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Startup) {
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <manual_state_transition+0x13c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d125      	bne.n	8001370 <manual_state_transition+0xfc>
		if (next_state == Manual) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <manual_state_transition+0xc2>
			STATE = Safe;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <manual_state_transition+0x13c>)
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001330:	f7ff fef4 	bl	800111c <enter_safe_disarm_state>
 8001334:	e039      	b.n	80013aa <manual_state_transition+0x136>
		}
		// GUI sends continue command for some reason
		else if (next_state == Continue) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d136      	bne.n	80013aa <manual_state_transition+0x136>
			// Only allow ignition after initial motor position is handled
			if (autosequence.startup_init_motor_pos_complete) {
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <manual_state_transition+0x148>)
 800133e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001342:	2b00      	cmp	r3, #0
 8001344:	d031      	beq.n	80013aa <manual_state_transition+0x136>
				autosequence.startup_init_motor_pos_complete = 0;  // Reset flag
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <manual_state_transition+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				STATE = Ignition;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <manual_state_transition+0x13c>)
 8001350:	2204      	movs	r2, #4
 8001352:	701a      	strb	r2, [r3, #0]
				autosequence.ignition_start_time_ms = SYS_MILLIS;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <manual_state_transition+0x140>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <manual_state_transition+0x144>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <manual_state_transition+0x148>)
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
				set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
 8001366:	2101      	movs	r1, #1
 8001368:	2008      	movs	r0, #8
 800136a:	f006 fc5e 	bl	8007c2a <set_valve_channel>
 800136e:	e01c      	b.n	80013aa <manual_state_transition+0x136>
			}
		}
	}
	else if (STATE == IgnitionFail) {
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <manual_state_transition+0x13c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d108      	bne.n	800138a <manual_state_transition+0x116>
		if (next_state == Manual) {
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <manual_state_transition+0x136>
			init_autosequence_control_variables();
 800137e:	f7ff fe49 	bl	8001014 <init_autosequence_control_variables>
			STATE = Manual;  // Operator must dismiss IgnitionFail condition
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <manual_state_transition+0x13c>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e00f      	b.n	80013aa <manual_state_transition+0x136>
		}
	}
	else if (STATE == Abort) {
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <manual_state_transition+0x13c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d10b      	bne.n	80013aa <manual_state_transition+0x136>
		if (next_state == Manual) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d108      	bne.n	80013aa <manual_state_transition+0x136>
			init_autosequence_control_variables();
 8001398:	f7ff fe3c 	bl	8001014 <init_autosequence_control_variables>
			// Stop venting fuel tank
			autosequence.post_gse_fuel_vent_command_enable = 0;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <manual_state_transition+0x148>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			STATE = Manual;  // Operator must dismiss Abort condition
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <manual_state_transition+0x13c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002dc 	.word	0x200002dc
 80013b4:	20000934 	.word	0x20000934
 80013b8:	10624dd3 	.word	0x10624dd3
 80013bc:	2000065c 	.word	0x2000065c

080013c0 <get_ellapsed_time_in_autosequence_state_ms>:

/**
 * Only works for Startup, Ignition, Hotfire, and Post
 */
uint32_t get_ellapsed_time_in_autosequence_state_ms() {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	if (STATE == Startup) {
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d10a      	bne.n	80013e2 <get_ellapsed_time_in_autosequence_state_ms+0x22>
		return SYS_MILLIS - autosequence.startup_start_time_ms;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099a      	lsrs	r2, r3, #6
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	e02d      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Ignition) {
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d10a      	bne.n	8001400 <get_ellapsed_time_in_autosequence_state_ms+0x40>
		return SYS_MILLIS - autosequence.ignition_start_time_ms;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	099a      	lsrs	r2, r3, #6
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	e01e      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Hotfire) {
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10a      	bne.n	800141e <get_ellapsed_time_in_autosequence_state_ms+0x5e>
		return SYS_MILLIS - autosequence.hotfire_start_time_ms;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099a      	lsrs	r2, r3, #6
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	e00f      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Post) {
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d10a      	bne.n	800143c <get_ellapsed_time_in_autosequence_state_ms+0x7c>
		return SYS_MILLIS - autosequence.post_start_time_ms;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099a      	lsrs	r2, r3, #6
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	e000      	b.n	800143e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else {
		return 0;
 800143c:	2300      	movs	r3, #0
	}
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200002dc 	.word	0x200002dc
 800144c:	20000934 	.word	0x20000934
 8001450:	10624dd3 	.word	0x10624dd3
 8001454:	2000065c 	.word	0x2000065c

08001458 <get_remaining_time_in_autosequence_state>:

/*
 * Only Ignition, Hotfire, and Post have defined time limits
 */
uint32_t get_remaining_time_in_autosequence_state(uint32_t T_state) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if (STATE == Ignition) {
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d10b      	bne.n	8001480 <get_remaining_time_in_autosequence_state+0x28>
		return (autosequence.ignition_ignitor_on_delay_ms
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
				+ autosequence.ignition_ignitor_high_duration_ms) - T_state;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	e012      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Hotfire) {
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d104      	bne.n	8001492 <get_remaining_time_in_autosequence_state+0x3a>
		return autosequence.hotfire_test_duration_ms - T_state;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	e009      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else if (STATE == Post) {
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <get_remaining_time_in_autosequence_state+0x5c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d104      	bne.n	80014a4 <get_remaining_time_in_autosequence_state+0x4c>
		return autosequence.post_purge_off_time_ms - T_state;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <get_remaining_time_in_autosequence_state+0x60>)
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	e000      	b.n	80014a6 <get_remaining_time_in_autosequence_state+0x4e>
	}
	else {
		return 0;
 80014a4:	2300      	movs	r3, #0
	}
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200002dc 	.word	0x200002dc
 80014b8:	2000065c 	.word	0x2000065c

080014bc <execute_autosequence>:

/**
 * Called every main while loop
 */
void execute_autosequence() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	// Autosequence timings are done relative to the start of the state
	autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();
 80014c0:	f7ff ff7e 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4ab7      	ldr	r2, [pc, #732]	; (80017a4 <execute_autosequence+0x2e8>)
 80014c8:	6293      	str	r3, [r2, #40]	; 0x28

	// Update time remaining in state for GUI
	state_rem_duration =
			get_remaining_time_in_autosequence_state(autosequence.T_state);
 80014ca:	4bb6      	ldr	r3, [pc, #728]	; (80017a4 <execute_autosequence+0x2e8>)
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffc2 	bl	8001458 <get_remaining_time_in_autosequence_state>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
	state_rem_duration =
 80014d8:	4bb3      	ldr	r3, [pc, #716]	; (80017a8 <execute_autosequence+0x2ec>)
 80014da:	601a      	str	r2, [r3, #0]

	// Doesn't use if else within each state in case the timings overlap
	if (STATE == Ignition) {
 80014dc:	4bb3      	ldr	r3, [pc, #716]	; (80017ac <execute_autosequence+0x2f0>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d15a      	bne.n	800159a <execute_autosequence+0xde>
		// Purge should've turned on when entering Ignition
		// Wait for the delay, then turn ignitor on
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms) {
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <execute_autosequence+0x2e8>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	4aae      	ldr	r2, [pc, #696]	; (80017a4 <execute_autosequence+0x2e8>)
 80014ea:	8892      	ldrh	r2, [r2, #4]
 80014ec:	b292      	uxth	r2, r2
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d303      	bcc.n	80014fa <execute_autosequence+0x3e>
			set_valve_channel(IGNITOR_CH, VALVE_ON);
 80014f2:	2101      	movs	r1, #1
 80014f4:	2006      	movs	r0, #6
 80014f6:	f006 fb98 	bl	8007c2a <set_valve_channel>
		}
		// Hold ignitor high for a certain amount of time
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms
 80014fa:	4baa      	ldr	r3, [pc, #680]	; (80017a4 <execute_autosequence+0x2e8>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4aa9      	ldr	r2, [pc, #676]	; (80017a4 <execute_autosequence+0x2e8>)
 8001500:	8892      	ldrh	r2, [r2, #4]
 8001502:	b292      	uxth	r2, r2
 8001504:	4611      	mov	r1, r2
				+ autosequence.ignition_ignitor_high_duration_ms) {
 8001506:	4aa7      	ldr	r2, [pc, #668]	; (80017a4 <execute_autosequence+0x2e8>)
 8001508:	88d2      	ldrh	r2, [r2, #6]
 800150a:	b292      	uxth	r2, r2
 800150c:	440a      	add	r2, r1
		if (autosequence.T_state >= autosequence.ignition_ignitor_on_delay_ms
 800150e:	4293      	cmp	r3, r2
 8001510:	f0c0 816c 	bcc.w	80017ec <execute_autosequence+0x330>

			// Only proceed to Hotfire if the ignitor break is detected
			// and automatic aborts are enabled
			if (autosequence.enable_auto_aborts &&
 8001514:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <execute_autosequence+0x2e8>)
 8001516:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <execute_autosequence+0xa6>
					!autosequence.ignition_ignitor_current_lower_bound_threshold_passed) {
 8001520:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <execute_autosequence+0x2e8>)
 8001522:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
			if (autosequence.enable_auto_aborts &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11b      	bne.n	8001562 <execute_autosequence+0xa6>
				// Transition to IgnitionFail state
				STATE = IgnitionFail;
 800152a:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <execute_autosequence+0x2f0>)
 800152c:	2209      	movs	r2, #9
 800152e:	701a      	strb	r2, [r3, #0]

				// Reset all control variables whenever exiting the autosequence
				autosequence.ignition_ignitor_current_lower_bound_threshold_passed = 0;  // Not needed
 8001530:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <execute_autosequence+0x2e8>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				init_autosequence_control_variables();
 8001538:	f7ff fd6c 	bl	8001014 <init_autosequence_control_variables>

				// Reset all control variables whenever exiting the autosequence
				init_autosequence_control_variables();
 800153c:	f7ff fd6a 	bl	8001014 <init_autosequence_control_variables>

				// Close control valves
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f006 fb71 	bl	8007c2a <set_valve_channel>
				set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8001548:	2100      	movs	r1, #0
 800154a:	2003      	movs	r0, #3
 800154c:	f006 fb6d 	bl	8007c2a <set_valve_channel>

				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8001550:	2100      	movs	r1, #0
 8001552:	2006      	movs	r0, #6
 8001554:	f006 fb69 	bl	8007c2a <set_valve_channel>

				// Purge low
				set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 8001558:	2100      	movs	r1, #0
 800155a:	2008      	movs	r0, #8
 800155c:	f006 fb65 	bl	8007c2a <set_valve_channel>
 8001560:	e144      	b.n	80017ec <execute_autosequence+0x330>
				// Now wait for operator to go to Manual
			}
			// Successful ignitor break OR auto aborts disabled
			else {
				// Transition to Hotfire state
				STATE = Hotfire;
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <execute_autosequence+0x2f0>)
 8001564:	2205      	movs	r2, #5
 8001566:	701a      	strb	r2, [r3, #0]
				autosequence.hotfire_start_time_ms = SYS_MILLIS;
 8001568:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <execute_autosequence+0x2f4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a91      	ldr	r2, [pc, #580]	; (80017b4 <execute_autosequence+0x2f8>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <execute_autosequence+0x2e8>)
 8001578:	6653      	str	r3, [r2, #100]	; 0x64

				// Ignitor low
				set_valve_channel(IGNITOR_CH, VALVE_OFF);
 800157a:	2100      	movs	r1, #0
 800157c:	2006      	movs	r0, #6
 800157e:	f006 fb54 	bl	8007c2a <set_valve_channel>

				// Open LOX MPV
				set_valve_channel(LOX_MPV_VALVE_CH, VALVE_ON);
 8001582:	2101      	movs	r1, #1
 8001584:	2001      	movs	r0, #1
 8001586:	f006 fb50 	bl	8007c2a <set_valve_channel>

				// Open LOX control valve
				set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_ON);
 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f006 fb4c 	bl	8007c2a <set_valve_channel>

				// Disable telemetry to prevent telem from blocking valve
				// timings to prevent a hard start
				// TODO: get rid of this when DMA tx is working?
				telem_disabled = 1;
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <execute_autosequence+0x2fc>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e128      	b.n	80017ec <execute_autosequence+0x330>
			}
		}
	}

	else if (STATE == Hotfire) {
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <execute_autosequence+0x2f0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	f040 80c0 	bne.w	8001724 <execute_autosequence+0x268>
		// Tank pressure control periodic function calls handled in main()
		// Not using else if in case the timings overlap

		// Automatic abort cases
		if (autosequence.enable_auto_aborts) {
 80015a4:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <execute_autosequence+0x2e8>)
 80015a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02b      	beq.n	8001608 <execute_autosequence+0x14c>
			// Chamber pressure too low - only active 1s after Hotfire
			// see update_combustion_failure() and its call in main()
			// Double check that it waits until after the startup transient
			if (autosequence.T_state > autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms
 80015b0:	4b7c      	ldr	r3, [pc, #496]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <execute_autosequence+0x2e8>)
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d911      	bls.n	80015e0 <execute_autosequence+0x124>
					&& autosequence.hotfire_chamber_pres_lower_bound_threshold_passed) {
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <execute_autosequence+0x2e8>)
 80015be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <execute_autosequence+0x124>
				// Reset abort flag
				autosequence.hotfire_chamber_pres_lower_bound_threshold_passed = 0;
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <execute_autosequence+0x2e8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

				// Handle abort
				STATE = Abort;
 80015ce:	4b77      	ldr	r3, [pc, #476]	; (80017ac <execute_autosequence+0x2f0>)
 80015d0:	2206      	movs	r2, #6
 80015d2:	701a      	strb	r2, [r3, #0]
				enter_abort_state();
 80015d4:	f7ff fd52 	bl	800107c <enter_abort_state>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_LOW);
 80015d8:	2002      	movs	r0, #2
 80015da:	f004 fd8b 	bl	80060f4 <set_status_flag>
				return;  // Stop other valves from actuating this loop
 80015de:	e115      	b.n	800180c <execute_autosequence+0x350>
			}

			// Chamber pressure too high - active through entire Hotfire
			// Aborts on first instance of detection to catch hard starts
			if (pressure[CHAMBER_PRES_CH]
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <execute_autosequence+0x300>)
 80015e2:	ed93 7a05 	vldr	s14, [r3, #20]
						 > autosequence.hotfire_chamber_pres_upper_bound) {
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <execute_autosequence+0x2e8>)
 80015e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
			if (pressure[CHAMBER_PRES_CH]
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd08      	ble.n	8001608 <execute_autosequence+0x14c>
				STATE = Abort;
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <execute_autosequence+0x2f0>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	701a      	strb	r2, [r3, #0]
				enter_abort_state();
 80015fc:	f7ff fd3e 	bl	800107c <enter_abort_state>
				set_status_flag(EC_FLAG_ABORT_CHMBR_PRES_HIGH);
 8001600:	2003      	movs	r0, #3
 8001602:	f004 fd77 	bl	80060f4 <set_status_flag>
				return;  // Stop other valves from actuating this loop
 8001606:	e101      	b.n	800180c <execute_autosequence+0x350>
			}
		}

		// Turn on LOX pressure control
		// Relative to 0 because LOX leads
		if (autosequence.T_state >= (0 + autosequence.hotfire_pid_start_delay_ms)
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <execute_autosequence+0x2e8>)
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <execute_autosequence+0x2e8>)
 800160e:	8992      	ldrh	r2, [r2, #12]
 8001610:	b292      	uxth	r2, r2
 8001612:	4293      	cmp	r3, r2
 8001614:	d30b      	bcc.n	800162e <execute_autosequence+0x172>
				&& !autosequence.hotfire_lox_tank_enable_PID_control) {
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <execute_autosequence+0x2e8>)
 8001618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <execute_autosequence+0x172>
			// Should only get called once when it starts pressure control
			tank_init_control_loop(&tanks[LOX_TANK_NUM]);
 8001620:	4867      	ldr	r0, [pc, #412]	; (80017c0 <execute_autosequence+0x304>)
 8001622:	f005 f8c0 	bl	80067a6 <tank_init_control_loop>
			autosequence.hotfire_lox_tank_enable_PID_control = 1;
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <execute_autosequence+0x2e8>)
 8001628:	2201      	movs	r2, #1
 800162a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}

		// Fuel on
		if (autosequence.T_state >= autosequence.hotfire_fuel_mpv_delay_ms) {
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <execute_autosequence+0x2e8>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <execute_autosequence+0x2e8>)
 8001634:	7a12      	ldrb	r2, [r2, #8]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	4293      	cmp	r3, r2
 800163a:	d30e      	bcc.n	800165a <execute_autosequence+0x19e>
			// Open Fuel MPV (Press AND Vent)
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_ON);
 800163c:	2101      	movs	r1, #1
 800163e:	2005      	movs	r0, #5
 8001640:	f006 faf3 	bl	8007c2a <set_valve_channel>
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_ON);
 8001644:	2101      	movs	r1, #1
 8001646:	2004      	movs	r0, #4
 8001648:	f006 faef 	bl	8007c2a <set_valve_channel>

			// Open Fuel control valve
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_ON);
 800164c:	2101      	movs	r1, #1
 800164e:	2003      	movs	r0, #3
 8001650:	f006 faeb 	bl	8007c2a <set_valve_channel>

			// Re-enable telemetry
			// TODO: remove this when DMA tx is working?
			telem_disabled = 0;
 8001654:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <execute_autosequence+0x2fc>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		}

		// Turn on Fuel pressure control
		// Delay is relative to MPV opening
		if (autosequence.T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 800165a:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <execute_autosequence+0x2e8>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <execute_autosequence+0x2e8>)
 8001660:	7a12      	ldrb	r2, [r2, #8]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	4611      	mov	r1, r2
				+ autosequence.hotfire_pid_start_delay_ms)
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <execute_autosequence+0x2e8>)
 8001668:	8992      	ldrh	r2, [r2, #12]
 800166a:	b292      	uxth	r2, r2
 800166c:	440a      	add	r2, r1
		if (autosequence.T_state >= (autosequence.hotfire_fuel_mpv_delay_ms
 800166e:	4293      	cmp	r3, r2
 8001670:	d30b      	bcc.n	800168a <execute_autosequence+0x1ce>
				&& !autosequence.hotfire_fuel_tank_enable_PID_control) {
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <execute_autosequence+0x2e8>)
 8001674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <execute_autosequence+0x1ce>
			// Should only get called once when it starts pressure control
			tank_init_control_loop(&tanks[FUEL_TANK_NUM]);
 800167c:	4851      	ldr	r0, [pc, #324]	; (80017c4 <execute_autosequence+0x308>)
 800167e:	f005 f892 	bl	80067a6 <tank_init_control_loop>
			autosequence.hotfire_fuel_tank_enable_PID_control = 1;
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <execute_autosequence+0x2e8>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}

		// Nozzle film cooling timing is relative to LOX MPV opening
		if (autosequence.T_state >= autosequence.hotfire_film_cooling_on_time_ms) {
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <execute_autosequence+0x2e8>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <execute_autosequence+0x2e8>)
 8001690:	8952      	ldrh	r2, [r2, #10]
 8001692:	b292      	uxth	r2, r2
 8001694:	4293      	cmp	r3, r2
 8001696:	d303      	bcc.n	80016a0 <execute_autosequence+0x1e4>
			// Nozzle film cooling on
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_ON);
 8001698:	2101      	movs	r1, #1
 800169a:	2007      	movs	r0, #7
 800169c:	f006 fac5 	bl	8007c2a <set_valve_channel>
		}

		// After combustion starts, turn off purge
		if (autosequence.T_state >= autosequence.hotfire_purge_off_time_ms) {
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <execute_autosequence+0x2e8>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d303      	bcc.n	80016b4 <execute_autosequence+0x1f8>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 80016ac:	2100      	movs	r1, #0
 80016ae:	2008      	movs	r0, #8
 80016b0:	f006 fabb 	bl	8007c2a <set_valve_channel>
		}

		// Stop hotfire
		if (autosequence.T_state >= autosequence.hotfire_test_duration_ms) {
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <execute_autosequence+0x2e8>)
 80016b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <execute_autosequence+0x2e8>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f0c0 8095 	bcc.w	80017ec <execute_autosequence+0x330>
			// Transition to Post state
			STATE = Post;
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <execute_autosequence+0x2f0>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	701a      	strb	r2, [r3, #0]
			autosequence.post_start_time_ms = SYS_MILLIS;
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <execute_autosequence+0x2f4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <execute_autosequence+0x2f8>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <execute_autosequence+0x2e8>)
 80016d8:	6693      	str	r3, [r2, #104]	; 0x68

			// Close LOX and Fuel MPVs
			set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 80016da:	2100      	movs	r1, #0
 80016dc:	2004      	movs	r0, #4
 80016de:	f006 faa4 	bl	8007c2a <set_valve_channel>
			set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2005      	movs	r0, #5
 80016e6:	f006 faa0 	bl	8007c2a <set_valve_channel>
			set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f006 fa9c 	bl	8007c2a <set_valve_channel>

			// Nozzle film cooling off
			set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2007      	movs	r0, #7
 80016f6:	f006 fa98 	bl	8007c2a <set_valve_channel>

			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 80016fa:	2100      	movs	r1, #0
 80016fc:	2000      	movs	r0, #0
 80016fe:	f006 fa94 	bl	8007c2a <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8001702:	2100      	movs	r1, #0
 8001704:	2003      	movs	r0, #3
 8001706:	f006 fa90 	bl	8007c2a <set_valve_channel>

			// Stop tank pressure control
			autosequence.hotfire_lox_tank_enable_PID_control = 0;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <execute_autosequence+0x2e8>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <execute_autosequence+0x2e8>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			// Purge high
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 800171a:	2101      	movs	r1, #1
 800171c:	2008      	movs	r0, #8
 800171e:	f006 fa84 	bl	8007c2a <set_valve_channel>
 8001722:	e063      	b.n	80017ec <execute_autosequence+0x330>
		}
	}

	else if (STATE == Post) {
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <execute_autosequence+0x2f0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d14d      	bne.n	80017c8 <execute_autosequence+0x30c>
		// MPVs should already be closed and purge should've started by now

		if (autosequence.T_state >= autosequence.post_vent_on_time_ms) {
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <execute_autosequence+0x2e8>)
 800172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <execute_autosequence+0x2e8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	429a      	cmp	r2, r3
 8001736:	d30b      	bcc.n	8001750 <execute_autosequence+0x294>
			// Vent both tanks
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 8001738:	2101      	movs	r1, #1
 800173a:	2002      	movs	r0, #2
 800173c:	f006 fa75 	bl	8007c2a <set_valve_channel>

			// Fuel vent handled by GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 1;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <execute_autosequence+0x2e8>)
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_ON;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <execute_autosequence+0x2e8>)
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		if (autosequence.T_state >= autosequence.post_vent_off_time_ms) {
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <execute_autosequence+0x2e8>)
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <execute_autosequence+0x2e8>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	d30b      	bcc.n	8001774 <execute_autosequence+0x2b8>
			// Close tank vents
			set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_OFF);
 800175c:	2100      	movs	r1, #0
 800175e:	2002      	movs	r0, #2
 8001760:	f006 fa63 	bl	8007c2a <set_valve_channel>

			// Fuel vent handled by GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <execute_autosequence+0x2e8>)
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <execute_autosequence+0x2e8>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		if (autosequence.T_state >= autosequence.post_purge_off_time_ms) {
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <execute_autosequence+0x2e8>)
 8001776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <execute_autosequence+0x2e8>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d335      	bcc.n	80017ec <execute_autosequence+0x330>
			// Purge low
			set_valve_channel(PURGE_VALVE_CH, VALVE_OFF);
 8001780:	2100      	movs	r1, #0
 8001782:	2008      	movs	r0, #8
 8001784:	f006 fa51 	bl	8007c2a <set_valve_channel>

			// Stop valve commands to the GSE controller
			autosequence.post_gse_fuel_vent_command_enable = 0;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <execute_autosequence+0x2e8>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			autosequence.post_gse_fuel_vent_signal = VALVE_OFF;
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <execute_autosequence+0x2e8>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			// Reset all control variables whenever exiting the autosequence
			init_autosequence_control_variables();
 8001798:	f7ff fc3c 	bl	8001014 <init_autosequence_control_variables>

			// Transition back to Manual
			STATE = Manual;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <execute_autosequence+0x2f0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e023      	b.n	80017ec <execute_autosequence+0x330>
 80017a4:	2000065c 	.word	0x2000065c
 80017a8:	20000314 	.word	0x20000314
 80017ac:	200002dc 	.word	0x200002dc
 80017b0:	20000934 	.word	0x20000934
 80017b4:	10624dd3 	.word	0x10624dd3
 80017b8:	200005b1 	.word	0x200005b1
 80017bc:	20000324 	.word	0x20000324
 80017c0:	200005b4 	.word	0x200005b4
 80017c4:	20000608 	.word	0x20000608
		}
	}

	else if (STATE == Safe) {
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <execute_autosequence+0x354>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d103      	bne.n	80017d8 <execute_autosequence+0x31c>
		// Safing the system should've already happened
		// lmao what do you even do here?
		STATE = Manual;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <execute_autosequence+0x354>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e009      	b.n	80017ec <execute_autosequence+0x330>
	}

	else if (STATE == IgnitionFail) {
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <execute_autosequence+0x354>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d005      	beq.n	80017ec <execute_autosequence+0x330>
		// Wait for the operator to go back to Manual.
	}

	else if (STATE == Abort) {
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <execute_autosequence+0x354>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d101      	bne.n	80017ec <execute_autosequence+0x330>
		// Actuations should've been handled already during state transition.
		// Wait for the operator to go back to Manual.

		// To catch any additional bugs in the state transition,
		// Constantly actuate the proper valves during the Abort state.
		enter_abort_state();
 80017e8:	f7ff fc48 	bl	800107c <enter_abort_state>
	}

	// To catch bugs related to the Manual transition not
	// shutting down the GSE controller fuel vent valve,
	// constantly refresh those control variables
	if (STATE != Post && STATE != Abort) {
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <execute_autosequence+0x354>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d00b      	beq.n	800180c <execute_autosequence+0x350>
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <execute_autosequence+0x354>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d007      	beq.n	800180c <execute_autosequence+0x350>
		autosequence.post_gse_fuel_vent_command_enable = 0;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <execute_autosequence+0x358>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		autosequence.post_gse_fuel_vent_signal = 0;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <execute_autosequence+0x358>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002dc 	.word	0x200002dc
 8001814:	2000065c 	.word	0x2000065c

08001818 <pt_counts_to_psi>:
}

/**
 * Use the channel-specific calibrations to convert voltage back to pressure
 */
float pt_counts_to_psi(uint8_t pt_num, uint16_t pt_counts) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	80bb      	strh	r3, [r7, #4]

	if (pt_num < NUM_PTS) {
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d86d      	bhi.n	800190a <pt_counts_to_psi+0xf2>
		// Convert adc counts to ducer volts
		float pt_volts;
		if (pt_num == 5) {  // Channel 5 is 12V
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d11a      	bne.n	800186a <pt_counts_to_psi+0x52>
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_12V_VDIV_GAIN;
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe38 	bl	80004ac <__aeabi_i2d>
 800183c:	a33b      	add	r3, pc, #236	; (adr r3, 800192c <pt_counts_to_psi+0x114>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fe9d 	bl	8000580 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	a339      	add	r3, pc, #228	; (adr r3, 8001934 <pt_counts_to_psi+0x11c>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe ffbe 	bl	80007d4 <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f986 	bl	8000b70 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e019      	b.n	800189e <pt_counts_to_psi+0x86>
		}
		else {
			pt_volts = pt_counts*ADC_COUNTS_TO_VOLTS/PT_3WIRE_5V_VDIV_GAIN;
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe1d 	bl	80004ac <__aeabi_i2d>
 8001872:	a32e      	add	r3, pc, #184	; (adr r3, 800192c <pt_counts_to_psi+0x114>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fe82 	bl	8000580 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	a32d      	add	r3, pc, #180	; (adr r3, 800193c <pt_counts_to_psi+0x124>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe ffa3 	bl	80007d4 <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f96b 	bl	8000b70 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]
		}

		// Convert ducer volts to psi
		if ( pt_cal_upper_voltage[pt_num] - pt_cal_lower_voltage[pt_num] != 0) {  // protect from divide by 0
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <pt_counts_to_psi+0x108>)
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <pt_counts_to_psi+0x10c>)
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d022      	beq.n	800190a <pt_counts_to_psi+0xf2>
			return ((pt_volts - pt_cal_lower_voltage[pt_num]) * pt_cal_upper_pressure[pt_num]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <pt_counts_to_psi+0x10c>)
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <pt_counts_to_psi+0x110>)
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee27 7a27 	vmul.f32	s14, s14, s15
				 / (pt_cal_upper_voltage[pt_num] - pt_cal_lower_voltage[pt_num]));
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <pt_counts_to_psi+0x108>)
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	edd3 6a00 	vldr	s13, [r3]
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <pt_counts_to_psi+0x10c>)
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001904:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001908:	e001      	b.n	800190e <pt_counts_to_psi+0xf6>
		}
	}
	return -1;
 800190a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800190e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f3af 8000 	nop.w
 8001920:	200002ac 	.word	0x200002ac
 8001924:	20000294 	.word	0x20000294
 8001928:	200002c4 	.word	0x200002c4
 800192c:	66666666 	.word	0x66666666
 8001930:	3f4a6666 	.word	0x3f4a6666
 8001934:	42c3913d 	.word	0x42c3913d
 8001938:	3fd0b216 	.word	0x3fd0b216
 800193c:	594db709 	.word	0x594db709
 8001940:	3fe4d653 	.word	0x3fe4d653

08001944 <init_hardware>:

Potentiometer_Cal pot_cal_info;
Stepper_Pinfo stepper_pinfo[2]; // information about stepper motor pin outs


void init_hardware() {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

    initAdcs(&hspi1, adc_pins);   // initialize adcs
 8001948:	4939      	ldr	r1, [pc, #228]	; (8001a30 <init_hardware+0xec>)
 800194a:	483a      	ldr	r0, [pc, #232]	; (8001a34 <init_hardware+0xf0>)
 800194c:	f000 f888 	bl	8001a60 <initAdcs>

    // init stepper motor pins
    stepper_pinfo[0].motor_ports[0] = mtr0_inA0_GPIO_Port;
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <init_hardware+0xf4>)
 8001952:	4a3a      	ldr	r2, [pc, #232]	; (8001a3c <init_hardware+0xf8>)
 8001954:	601a      	str	r2, [r3, #0]
    stepper_pinfo[0].motor_ports[1] = mtr0_inA1_GPIO_Port;
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <init_hardware+0xf4>)
 8001958:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <init_hardware+0xf8>)
 800195a:	605a      	str	r2, [r3, #4]
    stepper_pinfo[0].motor_ports[2] = mtr0_inB0_GPIO_Port;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <init_hardware+0xf4>)
 800195e:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <init_hardware+0xf8>)
 8001960:	609a      	str	r2, [r3, #8]
    stepper_pinfo[0].motor_ports[3] = mtr0_inB1_GPIO_Port;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <init_hardware+0xf4>)
 8001964:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <init_hardware+0xfc>)
 8001966:	60da      	str	r2, [r3, #12]
    stepper_pinfo[0].motor_pins[0] = mtr0_inA0_Pin;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <init_hardware+0xf4>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	821a      	strh	r2, [r3, #16]
    stepper_pinfo[0].motor_pins[1] = mtr0_inA1_Pin;
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <init_hardware+0xf4>)
 8001972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001976:	825a      	strh	r2, [r3, #18]
    stepper_pinfo[0].motor_pins[2] = mtr0_inB0_Pin;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <init_hardware+0xf4>)
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	829a      	strh	r2, [r3, #20]
    stepper_pinfo[0].motor_pins[3] = mtr0_inB1_Pin;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <init_hardware+0xf4>)
 8001982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001986:	82da      	strh	r2, [r3, #22]
    stepper_pinfo[0].pwm_channel[0] = TIM_CHANNEL_1;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <init_hardware+0xf4>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
    stepper_pinfo[0].pwm_channel[1] = TIM_CHANNEL_2;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <init_hardware+0xf4>)
 8001990:	2204      	movs	r2, #4
 8001992:	61da      	str	r2, [r3, #28]

    stepper_pinfo[1].motor_ports[0] = mtr1_inA0_GPIO_Port;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <init_hardware+0xf4>)
 8001996:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <init_hardware+0x100>)
 8001998:	621a      	str	r2, [r3, #32]
    stepper_pinfo[1].motor_ports[1] = mtr1_inA1_GPIO_Port;
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <init_hardware+0xf4>)
 800199c:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <init_hardware+0x100>)
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
    stepper_pinfo[1].motor_ports[2] = mtr1_inB0_GPIO_Port;
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <init_hardware+0xf4>)
 80019a2:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <init_hardware+0x100>)
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
    stepper_pinfo[1].motor_ports[3] = mtr1_inB1_GPIO_Port;
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <init_hardware+0xf4>)
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <init_hardware+0x100>)
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
    stepper_pinfo[1].motor_pins[0] = mtr1_inA0_Pin;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <init_hardware+0xf4>)
 80019ae:	2204      	movs	r2, #4
 80019b0:	861a      	strh	r2, [r3, #48]	; 0x30
    stepper_pinfo[1].motor_pins[1] = mtr1_inA1_Pin;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <init_hardware+0xf4>)
 80019b4:	2208      	movs	r2, #8
 80019b6:	865a      	strh	r2, [r3, #50]	; 0x32
    stepper_pinfo[1].motor_pins[2] = mtr1_inB0_Pin;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <init_hardware+0xf4>)
 80019ba:	2210      	movs	r2, #16
 80019bc:	869a      	strh	r2, [r3, #52]	; 0x34
    stepper_pinfo[1].motor_pins[3] = mtr1_inB1_Pin;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <init_hardware+0xf4>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	86da      	strh	r2, [r3, #54]	; 0x36
    stepper_pinfo[1].pwm_channel[0] = TIM_CHANNEL_1;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <init_hardware+0xf4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
    stepper_pinfo[1].pwm_channel[1] = TIM_CHANNEL_2;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <init_hardware+0xf4>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c

    tc_pins[0].MAX31855_CS_PORT = tc0_cs_GPIO_Port;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <init_hardware+0x104>)
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <init_hardware+0x108>)
 80019d4:	601a      	str	r2, [r3, #0]
    tc_pins[1].MAX31855_CS_PORT = tc1_cs_GPIO_Port;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <init_hardware+0x104>)
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <init_hardware+0x108>)
 80019da:	609a      	str	r2, [r3, #8]
    tc_pins[2].MAX31855_CS_PORT = tc2_cs_GPIO_Port;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <init_hardware+0x104>)
 80019de:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <init_hardware+0x108>)
 80019e0:	611a      	str	r2, [r3, #16]
    tc_pins[3].MAX31855_CS_PORT = tc3_cs_GPIO_Port;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <init_hardware+0x104>)
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <init_hardware+0x108>)
 80019e6:	619a      	str	r2, [r3, #24]
    tc_pins[4].MAX31855_CS_PORT = tc4_cs_GPIO_Port;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <init_hardware+0x104>)
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <init_hardware+0x10c>)
 80019ec:	621a      	str	r2, [r3, #32]
    tc_pins[0].MAX31855_CS_ADDR = tc0_cs_Pin;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <init_hardware+0x104>)
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f4:	809a      	strh	r2, [r3, #4]
    tc_pins[1].MAX31855_CS_ADDR = tc1_cs_Pin;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <init_hardware+0x104>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	819a      	strh	r2, [r3, #12]
    tc_pins[2].MAX31855_CS_ADDR = tc2_cs_Pin;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <init_hardware+0x104>)
 8001a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a04:	829a      	strh	r2, [r3, #20]
    tc_pins[3].MAX31855_CS_ADDR = tc3_cs_Pin;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <init_hardware+0x104>)
 8001a08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a0c:	839a      	strh	r2, [r3, #28]
    tc_pins[4].MAX31855_CS_ADDR = tc4_cs_Pin;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <init_hardware+0x104>)
 8001a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a14:	849a      	strh	r2, [r3, #36]	; 0x24

    // Potentiometer Calibrations
    pot_cal_info.slope = (EPOT_DMAX - EPOT_DMIN)*(EPOT_RES_POT+2*EPOT_RES_LEAD)
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <init_hardware+0x110>)
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <init_hardware+0x114>)
 8001a1a:	601a      	str	r2, [r3, #0]
                            /(EPOT_MAX_COUNTS*(EPOT_RES_POT - 2.0*EPOT_RES_POT_MIN));
    pot_cal_info.offset = ((EPOT_MAX_COUNTS*(EPOT_RES_POT_MIN + EPOT_RES_LEAD))
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <init_hardware+0x110>)
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <init_hardware+0x118>)
 8001a20:	605a      	str	r2, [r3, #4]

    // Reamining time in current state
    //state_rem_duration = 0;

    // IWDG status LED
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // turns off when something has gone wrong
 8001a22:	2201      	movs	r2, #1
 8001a24:	2108      	movs	r1, #8
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <init_hardware+0xf8>)
 8001a28:	f008 fec4 	bl	800a7b4 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200007b0 	.word	0x200007b0
 8001a34:	20001fbc 	.word	0x20001fbc
 8001a38:	200006c8 	.word	0x200006c8
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	20000728 	.word	0x20000728
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	20000720 	.word	0x20000720
 8001a58:	3f627bee 	.word	0x3f627bee
 8001a5c:	40f896df 	.word	0x40f896df

08001a60 <initAdcs>:

// private helpers
static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state);

void initAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo *adc_pins) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    adc_pins[0].MAX11131_CS_PORT       = adc0_cs_GPIO_Port;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <initAdcs+0x100>)
 8001a6e:	601a      	str	r2, [r3, #0]
    adc_pins[0].MAX11131_EOC_PORT      = adc0_eoc_GPIO_Port;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <initAdcs+0x100>)
 8001a74:	605a      	str	r2, [r3, #4]
    adc_pins[0].MAX11131_CNVST_PORT    = adc0_cnvst_GPIO_Port;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <initAdcs+0x104>)
 8001a7a:	609a      	str	r2, [r3, #8]
    adc_pins[0].MAX11131_CS_ADDR       = adc0_cs_Pin;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	819a      	strh	r2, [r3, #12]
    adc_pins[0].MAX11131_EOC_ADDR      = adc0_eoc_Pin;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	81da      	strh	r2, [r3, #14]
    adc_pins[0].MAX11131_CNVST_ADDR    = adc0_cnvst_Pin;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	821a      	strh	r2, [r3, #16]
    adc_pins[1].MAX11131_CS_PORT       = adc1_cs_GPIO_Port;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3324      	adds	r3, #36	; 0x24
 8001a92:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <initAdcs+0x108>)
 8001a94:	601a      	str	r2, [r3, #0]
    adc_pins[1].MAX11131_EOC_PORT      = adc1_eoc_GPIO_Port;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3324      	adds	r3, #36	; 0x24
 8001a9a:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <initAdcs+0x104>)
 8001a9c:	605a      	str	r2, [r3, #4]
    adc_pins[1].MAX11131_CNVST_PORT    = adc1_cnvst_GPIO_Port;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3324      	adds	r3, #36	; 0x24
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <initAdcs+0x108>)
 8001aa4:	609a      	str	r2, [r3, #8]
    adc_pins[1].MAX11131_CS_ADDR       = adc1_cs_Pin;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3324      	adds	r3, #36	; 0x24
 8001aaa:	2201      	movs	r2, #1
 8001aac:	819a      	strh	r2, [r3, #12]
    adc_pins[1].MAX11131_EOC_ADDR      = adc1_eoc_Pin;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3324      	adds	r3, #36	; 0x24
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	81da      	strh	r2, [r3, #14]
    adc_pins[1].MAX11131_CNVST_ADDR    = adc1_cnvst_Pin;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3324      	adds	r3, #36	; 0x24
 8001aba:	2202      	movs	r2, #2
 8001abc:	821a      	strh	r2, [r3, #16]
    adc_pins[2].MAX11131_CS_PORT       = adc2_cs_GPIO_Port;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	3348      	adds	r3, #72	; 0x48
 8001ac2:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <initAdcs+0x108>)
 8001ac4:	601a      	str	r2, [r3, #0]
    adc_pins[2].MAX11131_EOC_PORT      = adc2_eoc_GPIO_Port;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3348      	adds	r3, #72	; 0x48
 8001aca:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <initAdcs+0x10c>)
 8001acc:	605a      	str	r2, [r3, #4]
    adc_pins[2].MAX11131_CNVST_PORT    = adc2_cnvst_GPIO_Port;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3348      	adds	r3, #72	; 0x48
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <initAdcs+0x10c>)
 8001ad4:	609a      	str	r2, [r3, #8]
    adc_pins[2].MAX11131_CS_ADDR       = adc2_cs_Pin;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3348      	adds	r3, #72	; 0x48
 8001ada:	2204      	movs	r2, #4
 8001adc:	819a      	strh	r2, [r3, #12]
    adc_pins[2].MAX11131_EOC_ADDR      = adc2_eoc_Pin;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3348      	adds	r3, #72	; 0x48
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	81da      	strh	r2, [r3, #14]
    adc_pins[2].MAX11131_CNVST_ADDR    = adc2_cnvst_Pin;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3348      	adds	r3, #72	; 0x48
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	821a      	strh	r2, [r3, #16]
    init_adc(hspix, &adc_pins[0]);
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f006 f8d1 	bl	8007c9a <init_adc>
    init_adc(hspix, &adc_pins[1]);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3324      	adds	r3, #36	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f006 f8cb 	bl	8007c9a <init_adc>
    init_adc(hspix, &adc_pins[2]);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3348      	adds	r3, #72	; 0x48
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f006 f8c5 	bl	8007c9a <init_adc>

    // Initialize ADC offset and slopes, defaults to 0 and 1 for offset and slopes
    for (uint8_t i = 0; i < 3; ++i) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e01c      	b.n	8001b50 <initAdcs+0xf0>
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	81bb      	strh	r3, [r7, #12]
 8001b1a:	e013      	b.n	8001b44 <initAdcs+0xe4>
    		adc_calibrations[i].offset[ch] 	= 0;
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	89bb      	ldrh	r3, [r7, #12]
 8001b20:	4913      	ldr	r1, [pc, #76]	; (8001b70 <initAdcs+0x110>)
 8001b22:	0152      	lsls	r2, r2, #5
 8001b24:	4413      	add	r3, r2
 8001b26:	3310      	adds	r3, #16
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    		adc_calibrations[i].slope[ch] 	= 1;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	490f      	ldr	r1, [pc, #60]	; (8001b70 <initAdcs+0x110>)
 8001b34:	0152      	lsls	r2, r2, #5
 8001b36:	4413      	add	r3, r2
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	for (uint16_t ch = 0; ch < 16; ++ch) {
 8001b3e:	89bb      	ldrh	r3, [r7, #12]
 8001b40:	3301      	adds	r3, #1
 8001b42:	81bb      	strh	r3, [r7, #12]
 8001b44:	89bb      	ldrh	r3, [r7, #12]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d9e8      	bls.n	8001b1c <initAdcs+0xbc>
    for (uint8_t i = 0; i < 3; ++i) {
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d9df      	bls.n	8001b16 <initAdcs+0xb6>
    	}
    }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	200003e4 	.word	0x200003e4

08001b74 <isMotorAtPos>:
    HAL_TIM_Base_Init(htimx);

    HAL_TIM_Base_Start_IT(htimx);
}

uint8_t isMotorAtPos(float target, uint8_t tank_num) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	70fb      	strb	r3, [r7, #3]
    return fabs(target-curPos[tank_num]) < posErrorMargin;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <isMotorAtPos+0x48>)
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <isMotorAtPos+0x4c>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	bf4c      	ite	mi
 8001baa:	2301      	movmi	r3, #1
 8001bac:	2300      	movpl	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	200003d8 	.word	0x200003d8
 8001bc0:	20000014 	.word	0x20000014

08001bc4 <normalizeMotorStep>:

static inline int8_t normalizeMotorStep(int8_t step_num) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    if(step_num == 4) {
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d101      	bne.n	8001bda <normalizeMotorStep+0x16>
        return 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e008      	b.n	8001bec <normalizeMotorStep+0x28>
    } else if (step_num == -1) {
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d101      	bne.n	8001be8 <normalizeMotorStep+0x24>
        return 3;// reset step stage if reached
 8001be4:	2303      	movs	r3, #3
 8001be6:	e001      	b.n	8001bec <normalizeMotorStep+0x28>
    }
    return step_num;
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <handleMotorStepping>:


void handleMotorStepping(uint8_t motor_num) {
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
    // Stepper motor linear ramp variables
    static int8_t step_stage[NUM_TANKS] = { 0, 0 }; // polarity of stepper motor coil
    static int8_t prevDir[NUM_TANKS] = {0};

    if (prevDir[motor_num]==0) {
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a85      	ldr	r2, [pc, #532]	; (8001e1c <handleMotorStepping+0x224>)
 8001c06:	56d3      	ldrsb	r3, [r2, r3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <handleMotorStepping+0x22>
        prevDir[motor_num] = curDir[motor_num];
 8001c0c:	79fa      	ldrb	r2, [r7, #7]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4983      	ldr	r1, [pc, #524]	; (8001e20 <handleMotorStepping+0x228>)
 8001c12:	5c8a      	ldrb	r2, [r1, r2]
 8001c14:	b251      	sxtb	r1, r2
 8001c16:	4a81      	ldr	r2, [pc, #516]	; (8001e1c <handleMotorStepping+0x224>)
 8001c18:	54d1      	strb	r1, [r2, r3]
    }

    // Step the motor if in running or override
    if ((STATE==Hotfire || STATE==Startup || STATE==Post || STATE==Abort
 8001c1a:	4b82      	ldr	r3, [pc, #520]	; (8001e24 <handleMotorStepping+0x22c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d012      	beq.n	8001c48 <handleMotorStepping+0x50>
 8001c22:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <handleMotorStepping+0x22c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d00e      	beq.n	8001c48 <handleMotorStepping+0x50>
 8001c2a:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <handleMotorStepping+0x22c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d00a      	beq.n	8001c48 <handleMotorStepping+0x50>
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <handleMotorStepping+0x22c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d006      	beq.n	8001c48 <handleMotorStepping+0x50>
            || manual_stepper_pos_override[motor_num])
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <handleMotorStepping+0x230>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80ab 	beq.w	8001d9e <handleMotorStepping+0x1a6>
            && !isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a78      	ldr	r2, [pc, #480]	; (8001e2c <handleMotorStepping+0x234>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	f7ff ff8a 	bl	8001b74 <isMotorAtPos>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 809b 	bne.w	8001d9e <handleMotorStepping+0x1a6>

        if (prevDir[motor_num] != curDir[motor_num]) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4a6c      	ldr	r2, [pc, #432]	; (8001e1c <handleMotorStepping+0x224>)
 8001c6c:	56d2      	ldrsb	r2, [r2, r3]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	496b      	ldr	r1, [pc, #428]	; (8001e20 <handleMotorStepping+0x228>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d01d      	beq.n	8001cb6 <handleMotorStepping+0xbe>
            if (prevDir[motor_num] == -1) {
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <handleMotorStepping+0x224>)
 8001c7e:	56d3      	ldrsb	r3, [r2, r3]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d109      	bne.n	8001c9a <handleMotorStepping+0xa2>
                ++step_stage[motor_num];
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4a69      	ldr	r2, [pc, #420]	; (8001e30 <handleMotorStepping+0x238>)
 8001c8a:	56d2      	ldrsb	r2, [r2, r3]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	3201      	adds	r2, #1
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	b251      	sxtb	r1, r2
 8001c94:	4a66      	ldr	r2, [pc, #408]	; (8001e30 <handleMotorStepping+0x238>)
 8001c96:	54d1      	strb	r1, [r2, r3]
 8001c98:	e00d      	b.n	8001cb6 <handleMotorStepping+0xbe>
            } else if (prevDir[motor_num] == 1) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a5f      	ldr	r2, [pc, #380]	; (8001e1c <handleMotorStepping+0x224>)
 8001c9e:	56d3      	ldrsb	r3, [r2, r3]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <handleMotorStepping+0xbe>
                --step_stage[motor_num];
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <handleMotorStepping+0x238>)
 8001ca8:	56d2      	ldrsb	r2, [r2, r3]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	3a01      	subs	r2, #1
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	b251      	sxtb	r1, r2
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <handleMotorStepping+0x238>)
 8001cb4:	54d1      	strb	r1, [r2, r3]
            }
        }

        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4a5d      	ldr	r2, [pc, #372]	; (8001e30 <handleMotorStepping+0x238>)
 8001cba:	56d3      	ldrsb	r3, [r2, r3]
 8001cbc:	79fc      	ldrb	r4, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff80 	bl	8001bc4 <normalizeMotorStep>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <handleMotorStepping+0x238>)
 8001cca:	551a      	strb	r2, [r3, r4]

        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4a59      	ldr	r2, [pc, #356]	; (8001e34 <handleMotorStepping+0x23c>)
 8001cd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <handleMotorStepping+0x228>)
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	b25a      	sxtb	r2, r3
                           curDir[motor_num], step_stage[motor_num]);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4954      	ldr	r1, [pc, #336]	; (8001e30 <handleMotorStepping+0x238>)
 8001ce0:	56cb      	ldrsb	r3, [r1, r3]
        turn_stepper_motor(motor_pwm_tim[motor_num], motor_num,
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	79f9      	ldrb	r1, [r7, #7]
 8001ce6:	f000 f8b3 	bl	8001e50 <turn_stepper_motor>

        step_stage[motor_num] += curDir[motor_num];
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <handleMotorStepping+0x228>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	b259      	sxtb	r1, r3
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <handleMotorStepping+0x238>)
 8001cf6:	56d3      	ldrsb	r3, [r2, r3]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	b2cb      	uxtb	r3, r1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	b251      	sxtb	r1, r2
 8001d04:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <handleMotorStepping+0x238>)
 8001d06:	54d1      	strb	r1, [r2, r3]
        step_stage[motor_num] = normalizeMotorStep(step_stage[motor_num]);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <handleMotorStepping+0x238>)
 8001d0c:	56d3      	ldrsb	r3, [r2, r3]
 8001d0e:	79fc      	ldrb	r4, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff57 	bl	8001bc4 <normalizeMotorStep>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <handleMotorStepping+0x238>)
 8001d1c:	551a      	strb	r2, [r3, r4]
        prevDir[motor_num] = curDir[motor_num];
 8001d1e:	79fa      	ldrb	r2, [r7, #7]
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	493f      	ldr	r1, [pc, #252]	; (8001e20 <handleMotorStepping+0x228>)
 8001d24:	5c8a      	ldrb	r2, [r1, r2]
 8001d26:	b251      	sxtb	r1, r2
 8001d28:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <handleMotorStepping+0x224>)
 8001d2a:	54d1      	strb	r1, [r2, r3]
//                changeStepperPeriod(&htim6, &stepper);
//                stepper.acc_step = 0;
//            } else {
//                ++stepper.acc_step;
//            } // ensures SPSPS is followed properly
        curPos[motor_num] = curPos[motor_num] + degPerStep*curDir[motor_num];
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <handleMotorStepping+0x240>)
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a39      	ldr	r2, [pc, #228]	; (8001e20 <handleMotorStepping+0x228>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001e3c <handleMotorStepping+0x244>
 8001d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <handleMotorStepping+0x240>)
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	edc3 7a00 	vstr	s15, [r3]

        /* Update telem packet motor info */
        mtr_pos[motor_num] = curPos[motor_num]; // for motor 1
 8001d60:	79fa      	ldrb	r2, [r7, #7]
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4934      	ldr	r1, [pc, #208]	; (8001e38 <handleMotorStepping+0x240>)
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	440a      	add	r2, r1
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4934      	ldr	r1, [pc, #208]	; (8001e40 <handleMotorStepping+0x248>)
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	601a      	str	r2, [r3, #0]
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <handleMotorStepping+0x24c>)
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001d80:	3301      	adds	r3, #1
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001d82:	b29a      	uxth	r2, r3
                             motor_step_tim[motor_num])+1) * curDir[motor_num]; // in SPS
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4926      	ldr	r1, [pc, #152]	; (8001e20 <handleMotorStepping+0x228>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	b25b      	sxtb	r3, r3
        mtr_vel[motor_num] = (__HAL_TIM_GET_AUTORELOAD(
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	fb12 f303 	smulbb	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	b211      	sxth	r1, r2
 8001d98:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <handleMotorStepping+0x250>)
 8001d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (isMotorAtPos(targetPos[motor_num], motor_num)) {
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <handleMotorStepping+0x234>)
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	f7ff fedf 	bl	8001b74 <isMotorAtPos>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02a      	beq.n	8001e12 <handleMotorStepping+0x21a>
        // auto disable override once position is reached
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <handleMotorStepping+0x23c>)
 8001dc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4921      	ldr	r1, [pc, #132]	; (8001e4c <handleMotorStepping+0x254>)
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	440b      	add	r3, r1
 8001dcc:	3318      	adds	r3, #24
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f00a face 	bl	800c374 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[0]);
        HAL_TIM_PWM_Stop(motor_pwm_tim[motor_num],
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <handleMotorStepping+0x23c>)
 8001ddc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	491a      	ldr	r1, [pc, #104]	; (8001e4c <handleMotorStepping+0x254>)
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	440b      	add	r3, r1
 8001de8:	331c      	adds	r3, #28
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f00a fac0 	bl	800c374 <HAL_TIM_PWM_Stop>
                         stepper_pinfo[motor_num].pwm_channel[1]);
        if (manual_stepper_pos_override[motor_num]) {
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <handleMotorStepping+0x230>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <handleMotorStepping+0x210>
            manual_stepper_pos_override[motor_num] = 0;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <handleMotorStepping+0x230>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	54d1      	strb	r1, [r2, r3]
        }
        mtr_vel[motor_num] = 0;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <handleMotorStepping+0x250>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // reset stepper linear ramping variables
        // stepper.num_steps = stepper.curr_step = 0;
    }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200004a4 	.word	0x200004a4
 8001e20:	200003e0 	.word	0x200003e0
 8001e24:	200002dc 	.word	0x200002dc
 8001e28:	200003cc 	.word	0x200003cc
 8001e2c:	200003d0 	.word	0x200003d0
 8001e30:	200004a8 	.word	0x200004a8
 8001e34:	20000000 	.word	0x20000000
 8001e38:	200003d8 	.word	0x200003d8
 8001e3c:	3eb33333 	.word	0x3eb33333
 8001e40:	20000398 	.word	0x20000398
 8001e44:	20000008 	.word	0x20000008
 8001e48:	200003a0 	.word	0x200003a0
 8001e4c:	200006c8 	.word	0x200006c8

08001e50 <turn_stepper_motor>:

void turn_stepper_motor(TIM_HandleTypeDef *htimx, uint8_t motor_num, int8_t direction, uint8_t step_stage) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	70fb      	strb	r3, [r7, #3]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70bb      	strb	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	707b      	strb	r3, [r7, #1]
    // A-
    // B-
    // For VNH7070AS chip, INA = clockwise, INB = counterclockwise (actually not really)
    // reset all gpio logic before changing step
    // Note: this only works for motor 0 currently 1 is CW, -1 is CCW
	GPIO_TypeDef * mtrx_portA0 = stepper_pinfo[motor_num].motor_ports[0];
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001e6e:	015b      	lsls	r3, r3, #5
 8001e70:	4413      	add	r3, r2
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * mtrx_portA1 = stepper_pinfo[motor_num].motor_ports[1];
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	4a61      	ldr	r2, [pc, #388]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001e7a:	015b      	lsls	r3, r3, #5
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	623b      	str	r3, [r7, #32]
	GPIO_TypeDef * mtrx_portB0 = stepper_pinfo[motor_num].motor_ports[2];
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	4a5e      	ldr	r2, [pc, #376]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
	GPIO_TypeDef * mtrx_portB1 = stepper_pinfo[motor_num].motor_ports[3];
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	4413      	add	r3, r2
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
	uint16_t mtrx_pinA0 = stepper_pinfo[motor_num].motor_pins[0];
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3310      	adds	r3, #16
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	82fb      	strh	r3, [r7, #22]
	uint16_t mtrx_pinA1 = stepper_pinfo[motor_num].motor_pins[1];
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	4a53      	ldr	r2, [pc, #332]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3312      	adds	r3, #18
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	82bb      	strh	r3, [r7, #20]
	uint16_t mtrx_pinB0 = stepper_pinfo[motor_num].motor_pins[2];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	4a50      	ldr	r2, [pc, #320]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001ec0:	015b      	lsls	r3, r3, #5
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	827b      	strh	r3, [r7, #18]
	uint16_t mtrx_pinB1 = stepper_pinfo[motor_num].motor_pins[3];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3316      	adds	r3, #22
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	823b      	strh	r3, [r7, #16]
	uint32_t pwm_channela = stepper_pinfo[motor_num].pwm_channel[0];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	4a49      	ldr	r2, [pc, #292]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4413      	add	r3, r2
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
	uint32_t pwm_channelb = stepper_pinfo[motor_num].pwm_channel[1];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	; (8002000 <turn_stepper_motor+0x1b0>)
 8001eea:	015b      	lsls	r3, r3, #5
 8001eec:	4413      	add	r3, r2
 8001eee:	331c      	adds	r3, #28
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60bb      	str	r3, [r7, #8]

    // reset all motor logic inputs low and speed to 0
    HAL_TIM_PWM_Stop(htimx, pwm_channela);
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f00a fa3c 	bl	800c374 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htimx, pwm_channelb);
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f00a fa38 	bl	800c374 <HAL_TIM_PWM_Stop>
    // stepper motor channels
    switch(step_stage) { // TODO figure out steps tmrw
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d86e      	bhi.n	8001fe8 <turn_stepper_motor+0x198>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <turn_stepper_motor+0xc0>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f53 	.word	0x08001f53
 8001f18:	08001f85 	.word	0x08001f85
 8001f1c:	08001fb7 	.word	0x08001fb7
        case 0: {   // A0 high B0 low
        	HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001f20:	8abb      	ldrh	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f008 fc44 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001f2c:	8a3b      	ldrh	r3, [r7, #16]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f008 fc3e 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001f38:	8afb      	ldrh	r3, [r7, #22]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f40:	f008 fc38 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001f44:	8a7b      	ldrh	r3, [r7, #18]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4619      	mov	r1, r3
 8001f4a:	69f8      	ldr	r0, [r7, #28]
 8001f4c:	f008 fc32 	bl	800a7b4 <HAL_GPIO_WritePin>
            break;
 8001f50:	e04a      	b.n	8001fe8 <turn_stepper_motor+0x198>
        } case 1: {
        	HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_RESET);
 8001f52:	8a3b      	ldrh	r3, [r7, #16]
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	69b8      	ldr	r0, [r7, #24]
 8001f5a:	f008 fc2b 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f66:	f008 fc25 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_SET);
 8001f6a:	8a7b      	ldrh	r3, [r7, #18]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	69f8      	ldr	r0, [r7, #28]
 8001f72:	f008 fc1f 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001f76:	8abb      	ldrh	r3, [r7, #20]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6a38      	ldr	r0, [r7, #32]
 8001f7e:	f008 fc19 	bl	800a7b4 <HAL_GPIO_WritePin>
            break;
 8001f82:	e031      	b.n	8001fe8 <turn_stepper_motor+0x198>
        } case 2: {
        	HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_RESET);
 8001f84:	8afb      	ldrh	r3, [r7, #22]
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f8c:	f008 fc12 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001f90:	8a7b      	ldrh	r3, [r7, #18]
 8001f92:	2200      	movs	r2, #0
 8001f94:	4619      	mov	r1, r3
 8001f96:	69f8      	ldr	r0, [r7, #28]
 8001f98:	f008 fc0c 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_SET);
 8001f9c:	8abb      	ldrh	r3, [r7, #20]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6a38      	ldr	r0, [r7, #32]
 8001fa4:	f008 fc06 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8001fa8:	8a3b      	ldrh	r3, [r7, #16]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	69b8      	ldr	r0, [r7, #24]
 8001fb0:	f008 fc00 	bl	800a7b4 <HAL_GPIO_WritePin>
            break;  // swap which input is high/low for for negative polarity
 8001fb4:	e018      	b.n	8001fe8 <turn_stepper_motor+0x198>
        } case 3: {
        	HAL_GPIO_WritePin(mtrx_portB0, mtrx_pinB0, GPIO_PIN_RESET);
 8001fb6:	8a7b      	ldrh	r3, [r7, #18]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	69f8      	ldr	r0, [r7, #28]
 8001fbe:	f008 fbf9 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA1, mtrx_pinA1, GPIO_PIN_RESET);
 8001fc2:	8abb      	ldrh	r3, [r7, #20]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6a38      	ldr	r0, [r7, #32]
 8001fca:	f008 fbf3 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portB1, mtrx_pinB1, GPIO_PIN_SET);
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	69b8      	ldr	r0, [r7, #24]
 8001fd6:	f008 fbed 	bl	800a7b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mtrx_portA0, mtrx_pinA0, GPIO_PIN_SET);
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fe2:	f008 fbe7 	bl	800a7b4 <HAL_GPIO_WritePin>
            break;
 8001fe6:	bf00      	nop
        }
    }
    HAL_TIM_PWM_Start(htimx, pwm_channela); // start pwm on channels 1 and 2 for stepper
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f00a f8fa 	bl	800c1e4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htimx, pwm_channelb);
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f00a f8f6 	bl	800c1e4 <HAL_TIM_PWM_Start>
}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200006c8 	.word	0x200006c8

08002004 <moveMotorToPos>:

void moveMotorToPos(float deg, uint8_t motor_num) {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	ed87 0a01 	vstr	s0, [r7, #4]
 800200e:	4603      	mov	r3, r0
 8002010:	70fb      	strb	r3, [r7, #3]
	manual_stepper_pos_override[motor_num] = 1;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	4a16      	ldr	r2, [pc, #88]	; (8002070 <moveMotorToPos+0x6c>)
 8002016:	2101      	movs	r1, #1
 8002018:	54d1      	strb	r1, [r2, r3]
	targetPos[motor_num] = deg; // position given in deg
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	4a15      	ldr	r2, [pc, #84]	; (8002074 <moveMotorToPos+0x70>)
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
	curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <moveMotorToPos+0x74>)
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <moveMotorToPos+0x70>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d501      	bpl.n	800204c <moveMotorToPos+0x48>
 8002048:	2101      	movs	r1, #1
 800204a:	e001      	b.n	8002050 <moveMotorToPos+0x4c>
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <moveMotorToPos+0x78>)
 8002054:	54d1      	strb	r1, [r2, r3]
	mtr_set[motor_num] = deg; // save new motor position setpoint
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <moveMotorToPos+0x7c>)
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200003cc 	.word	0x200003cc
 8002074:	200003d0 	.word	0x200003d0
 8002078:	200003d8 	.word	0x200003d8
 800207c:	200003e0 	.word	0x200003e0
 8002080:	200003bc 	.word	0x200003bc

08002084 <readAdcs>:

void readAdcs(SPI_HandleTypeDef* hspix, GPIO_MAX11131_Pinfo* adc_pins, uint16_t (*adc_counts)[16]) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e03d      	b.n	8002112 <readAdcs+0x8e>
        read_adc(hspix, &adc_pins[i], adc_counts[i]);
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1899      	adds	r1, r3, r2
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	461a      	mov	r2, r3
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f005 fe3e 	bl	8007d32 <read_adc>
        for (uint8_t ch = 0; ch < 16; ++ch) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	74fb      	strb	r3, [r7, #19]
 80020ba:	e024      	b.n	8002106 <readAdcs+0x82>
			adc_counts[i][ch] = adc_counts[i][ch]*adc_calibrations[i].slope[ch] + adc_calibrations[i].offset[ch];
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	015b      	lsls	r3, r3, #5
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	7cfa      	ldrb	r2, [r7, #19]
 80020c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	4815      	ldr	r0, [pc, #84]	; (8002124 <readAdcs+0xa0>)
 80020ce:	6979      	ldr	r1, [r7, #20]
 80020d0:	0149      	lsls	r1, r1, #5
 80020d2:	440b      	add	r3, r1
 80020d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80020d8:	fb12 f303 	smulbb	r3, r2, r3
 80020dc:	b298      	uxth	r0, r3
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	4910      	ldr	r1, [pc, #64]	; (8002124 <readAdcs+0xa0>)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	0152      	lsls	r2, r2, #5
 80020e6:	4413      	add	r3, r2
 80020e8:	3310      	adds	r3, #16
 80020ea:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	7cfa      	ldrb	r2, [r7, #19]
 80020f8:	4401      	add	r1, r0
 80020fa:	b289      	uxth	r1, r1
 80020fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t ch = 0; ch < 16; ++ch) {
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	3301      	adds	r3, #1
 8002104:	74fb      	strb	r3, [r7, #19]
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d9d7      	bls.n	80020bc <readAdcs+0x38>
    for (int i = 0; i < 3; ++i) {
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b02      	cmp	r3, #2
 8002116:	ddbe      	ble.n	8002096 <readAdcs+0x12>
        } // apply adc offset and slope to raw counts
    }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200003e4 	.word	0x200003e4

08002128 <setValve>:

void setValve(uint32_t vlv_num, uint8_t state) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
    GPIO_PinState gpio_state = (state == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	75fb      	strb	r3, [r7, #23]
    uint32_t vlv_bit = 1<<vlv_num;
 8002142:	2201      	movs	r2, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	613b      	str	r3, [r7, #16]
    uint32_t vlv_value = state<<vlv_num;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	60fb      	str	r3, [r7, #12]
	setValveHelper(vlv_num, gpio_state);
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f814 	bl	8002188 <setValveHelper>

    // set valves states variable
    valve_states &= ~vlv_bit;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43da      	mvns	r2, r3
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <setValve+0x5c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4013      	ands	r3, r2
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <setValve+0x5c>)
 800216c:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <setValve+0x5c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	4a03      	ldr	r2, [pc, #12]	; (8002184 <setValve+0x5c>)
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200002e8 	.word	0x200002e8

08002188 <setValveHelper>:

static void setValveHelper(uint32_t vlv_num, GPIO_PinState gpio_state) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d856      	bhi.n	8002248 <setValveHelper+0xc0>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <setValveHelper+0x18>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021c5 	.word	0x080021c5
 80021a4:	080021d3 	.word	0x080021d3
 80021a8:	080021e3 	.word	0x080021e3
 80021ac:	080021f3 	.word	0x080021f3
 80021b0:	08002203 	.word	0x08002203
 80021b4:	08002211 	.word	0x08002211
 80021b8:	0800221f 	.word	0x0800221f
 80021bc:	0800222d 	.word	0x0800222d
 80021c0:	0800223b 	.word	0x0800223b
	 switch(vlv_num) {
	    case 0: {
	        HAL_GPIO_WritePin(en_vlv0_GPIO_Port, en_vlv0_Pin, gpio_state);
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	461a      	mov	r2, r3
 80021c8:	2102      	movs	r1, #2
 80021ca:	4821      	ldr	r0, [pc, #132]	; (8002250 <setValveHelper+0xc8>)
 80021cc:	f008 faf2 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 80021d0:	e03a      	b.n	8002248 <setValveHelper+0xc0>
	    } case 1: {
	        HAL_GPIO_WritePin(en_vlv1_GPIO_Port, en_vlv1_Pin, gpio_state);
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021da:	481e      	ldr	r0, [pc, #120]	; (8002254 <setValveHelper+0xcc>)
 80021dc:	f008 faea 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 80021e0:	e032      	b.n	8002248 <setValveHelper+0xc0>
	    } case 2: {
	        HAL_GPIO_WritePin(en_vlv2_GPIO_Port, en_vlv2_Pin, gpio_state);
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ea:	481a      	ldr	r0, [pc, #104]	; (8002254 <setValveHelper+0xcc>)
 80021ec:	f008 fae2 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 80021f0:	e02a      	b.n	8002248 <setValveHelper+0xc0>
	    } case 3: {
	        HAL_GPIO_WritePin(en_vlv3_GPIO_Port, en_vlv3_Pin, gpio_state);
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fa:	4816      	ldr	r0, [pc, #88]	; (8002254 <setValveHelper+0xcc>)
 80021fc:	f008 fada 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 8002200:	e022      	b.n	8002248 <setValveHelper+0xc0>
	    } case 4: {
	        HAL_GPIO_WritePin(en_vlv4_GPIO_Port, en_vlv4_Pin, gpio_state);
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	461a      	mov	r2, r3
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	4811      	ldr	r0, [pc, #68]	; (8002250 <setValveHelper+0xc8>)
 800220a:	f008 fad3 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 800220e:	e01b      	b.n	8002248 <setValveHelper+0xc0>
	    } case 5: {
	        HAL_GPIO_WritePin(en_vlv5_GPIO_Port, en_vlv5_Pin, gpio_state);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	461a      	mov	r2, r3
 8002214:	2120      	movs	r1, #32
 8002216:	480e      	ldr	r0, [pc, #56]	; (8002250 <setValveHelper+0xc8>)
 8002218:	f008 facc 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 800221c:	e014      	b.n	8002248 <setValveHelper+0xc0>
	    } case 6: {
	        HAL_GPIO_WritePin(en_vlv6_GPIO_Port, en_vlv6_Pin, gpio_state);
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	461a      	mov	r2, r3
 8002222:	2110      	movs	r1, #16
 8002224:	480a      	ldr	r0, [pc, #40]	; (8002250 <setValveHelper+0xc8>)
 8002226:	f008 fac5 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 800222a:	e00d      	b.n	8002248 <setValveHelper+0xc0>
	    } case 7: {
	        HAL_GPIO_WritePin(en_vlv7_GPIO_Port, en_vlv7_Pin, gpio_state);
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	461a      	mov	r2, r3
 8002230:	2108      	movs	r1, #8
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <setValveHelper+0xc8>)
 8002234:	f008 fabe 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 8002238:	e006      	b.n	8002248 <setValveHelper+0xc0>
	    } case 8: {
	        HAL_GPIO_WritePin(en_vlv8_GPIO_Port, en_vlv8_Pin, gpio_state);
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	461a      	mov	r2, r3
 800223e:	2104      	movs	r1, #4
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <setValveHelper+0xc8>)
 8002242:	f008 fab7 	bl	800a7b4 <HAL_GPIO_WritePin>
	        break;
 8002246:	bf00      	nop
	    }
	}
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	40020800 	.word	0x40020800

08002258 <readThermocouples>:

void readThermocouples(SPI_HandleTypeDef* hspix, MAX31855_Pinfo *tc_pins,
                                                            uint8_t tc_num) {
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < tc_num; ++i) {
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
 800226a:	e012      	b.n	8002292 <readThermocouples+0x3a>
    	tc[i] = read_tc(hspix, &tc_pins[i]);
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	7dfc      	ldrb	r4, [r7, #23]
 8002276:	4619      	mov	r1, r3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f005 feed 	bl	8008058 <read_tc>
 800227e:	eef0 7a40 	vmov.f32	s15, s0
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <readThermocouples+0x4c>)
 8002284:	00a3      	lsls	r3, r4, #2
 8002286:	4413      	add	r3, r2
 8002288:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < tc_num; ++i) {
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	3301      	adds	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
 8002292:	7dfa      	ldrb	r2, [r7, #23]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3e8      	bcc.n	800226c <readThermocouples+0x14>
    }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	20000384 	.word	0x20000384

080022a8 <updatePeripherals>:

void updatePeripherals(uint16_t (*adc_counts)[16]) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    // Programmer defined, transfer adc readings to correct memory arrays based on schematic

    /* Load vlv voltages */
    ivlv[0] = vlvCountsToVolts(adc_counts[0][0]);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa0b 	bl	80026d0 <vlvCountsToVolts>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	4ba7      	ldr	r3, [pc, #668]	; (800255c <updatePeripherals+0x2b4>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
    ivlv[1] = vlvCountsToVolts(adc_counts[1][10]);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3320      	adds	r3, #32
 80022c8:	8a9b      	ldrh	r3, [r3, #20]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa00 	bl	80026d0 <vlvCountsToVolts>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	4ba1      	ldr	r3, [pc, #644]	; (800255c <updatePeripherals+0x2b4>)
 80022d6:	edc3 7a01 	vstr	s15, [r3, #4]
    ivlv[2] = vlvCountsToVolts(adc_counts[1][8]);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	8a1b      	ldrh	r3, [r3, #16]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f9f5 	bl	80026d0 <vlvCountsToVolts>
 80022e6:	eef0 7a40 	vmov.f32	s15, s0
 80022ea:	4b9c      	ldr	r3, [pc, #624]	; (800255c <updatePeripherals+0x2b4>)
 80022ec:	edc3 7a02 	vstr	s15, [r3, #8]
    ivlv[3] = vlvCountsToVolts(adc_counts[1][6]);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3320      	adds	r3, #32
 80022f4:	899b      	ldrh	r3, [r3, #12]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f9ea 	bl	80026d0 <vlvCountsToVolts>
 80022fc:	eef0 7a40 	vmov.f32	s15, s0
 8002300:	4b96      	ldr	r3, [pc, #600]	; (800255c <updatePeripherals+0x2b4>)
 8002302:	edc3 7a03 	vstr	s15, [r3, #12]
    ivlv[4] = vlvCountsToVolts(adc_counts[1][4]);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	891b      	ldrh	r3, [r3, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f9df 	bl	80026d0 <vlvCountsToVolts>
 8002312:	eef0 7a40 	vmov.f32	s15, s0
 8002316:	4b91      	ldr	r3, [pc, #580]	; (800255c <updatePeripherals+0x2b4>)
 8002318:	edc3 7a04 	vstr	s15, [r3, #16]
    ivlv[5] = vlvCountsToVolts(adc_counts[1][2]);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3320      	adds	r3, #32
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f9d4 	bl	80026d0 <vlvCountsToVolts>
 8002328:	eef0 7a40 	vmov.f32	s15, s0
 800232c:	4b8b      	ldr	r3, [pc, #556]	; (800255c <updatePeripherals+0x2b4>)
 800232e:	edc3 7a05 	vstr	s15, [r3, #20]
    ivlv[6] = vlvCountsToVolts(adc_counts[1][0]);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3320      	adds	r3, #32
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f9c9 	bl	80026d0 <vlvCountsToVolts>
 800233e:	eef0 7a40 	vmov.f32	s15, s0
 8002342:	4b86      	ldr	r3, [pc, #536]	; (800255c <updatePeripherals+0x2b4>)
 8002344:	edc3 7a06 	vstr	s15, [r3, #24]
    ivlv[7] = vlvCountsToVolts(adc_counts[0][11]);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8adb      	ldrh	r3, [r3, #22]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f9bf 	bl	80026d0 <vlvCountsToVolts>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	4b81      	ldr	r3, [pc, #516]	; (800255c <updatePeripherals+0x2b4>)
 8002358:	edc3 7a07 	vstr	s15, [r3, #28]
    ivlv[8] = vlvCountsToVolts(adc_counts[0][13]);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8b5b      	ldrh	r3, [r3, #26]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f9b5 	bl	80026d0 <vlvCountsToVolts>
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	4b7c      	ldr	r3, [pc, #496]	; (800255c <updatePeripherals+0x2b4>)
 800236c:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load vlv currents */
    evlv[0] = vlvCountsToAmps(adc_counts[0][1]);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	885b      	ldrh	r3, [r3, #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f9cb 	bl	8002710 <vlvCountsToAmps>
 800237a:	eef0 7a40 	vmov.f32	s15, s0
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <updatePeripherals+0x2b8>)
 8002380:	edc3 7a00 	vstr	s15, [r3]
    evlv[1] = vlvCountsToAmps(adc_counts[1][11]);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3320      	adds	r3, #32
 8002388:	8adb      	ldrh	r3, [r3, #22]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f9c0 	bl	8002710 <vlvCountsToAmps>
 8002390:	eef0 7a40 	vmov.f32	s15, s0
 8002394:	4b72      	ldr	r3, [pc, #456]	; (8002560 <updatePeripherals+0x2b8>)
 8002396:	edc3 7a01 	vstr	s15, [r3, #4]
    evlv[2] = vlvCountsToAmps(adc_counts[1][9]);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3320      	adds	r3, #32
 800239e:	8a5b      	ldrh	r3, [r3, #18]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f9b5 	bl	8002710 <vlvCountsToAmps>
 80023a6:	eef0 7a40 	vmov.f32	s15, s0
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <updatePeripherals+0x2b8>)
 80023ac:	edc3 7a02 	vstr	s15, [r3, #8]
    evlv[3] = vlvCountsToAmps(adc_counts[1][7]);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3320      	adds	r3, #32
 80023b4:	89db      	ldrh	r3, [r3, #14]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f9aa 	bl	8002710 <vlvCountsToAmps>
 80023bc:	eef0 7a40 	vmov.f32	s15, s0
 80023c0:	4b67      	ldr	r3, [pc, #412]	; (8002560 <updatePeripherals+0x2b8>)
 80023c2:	edc3 7a03 	vstr	s15, [r3, #12]
    evlv[4] = vlvCountsToAmps(adc_counts[1][5]);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3320      	adds	r3, #32
 80023ca:	895b      	ldrh	r3, [r3, #10]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f99f 	bl	8002710 <vlvCountsToAmps>
 80023d2:	eef0 7a40 	vmov.f32	s15, s0
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <updatePeripherals+0x2b8>)
 80023d8:	edc3 7a04 	vstr	s15, [r3, #16]
    evlv[5] = vlvCountsToAmps(adc_counts[1][3]);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3320      	adds	r3, #32
 80023e0:	88db      	ldrh	r3, [r3, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f994 	bl	8002710 <vlvCountsToAmps>
 80023e8:	eef0 7a40 	vmov.f32	s15, s0
 80023ec:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <updatePeripherals+0x2b8>)
 80023ee:	edc3 7a05 	vstr	s15, [r3, #20]
    evlv[6] = vlvCountsToAmps(adc_counts[1][1]);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3320      	adds	r3, #32
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f989 	bl	8002710 <vlvCountsToAmps>
 80023fe:	eef0 7a40 	vmov.f32	s15, s0
 8002402:	4b57      	ldr	r3, [pc, #348]	; (8002560 <updatePeripherals+0x2b8>)
 8002404:	edc3 7a06 	vstr	s15, [r3, #24]
    evlv[7] = vlvCountsToAmps(adc_counts[0][10]);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8a9b      	ldrh	r3, [r3, #20]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f97f 	bl	8002710 <vlvCountsToAmps>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	4b52      	ldr	r3, [pc, #328]	; (8002560 <updatePeripherals+0x2b8>)
 8002418:	edc3 7a07 	vstr	s15, [r3, #28]
    evlv[8] = vlvCountsToAmps(adc_counts[0][12]);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8b1b      	ldrh	r3, [r3, #24]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f975 	bl	8002710 <vlvCountsToAmps>
 8002426:	eef0 7a40 	vmov.f32	s15, s0
 800242a:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <updatePeripherals+0x2b8>)
 800242c:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Load pressure transducer voltages */
    for (int8_t i = 7; i >= 2; --i) {
 8002430:	2307      	movs	r3, #7
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e021      	b.n	800247a <updatePeripherals+0x1d2>
        uint8_t channel = 7-i;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	f1c3 0307 	rsb	r3, r3, #7
 800243c:	72fb      	strb	r3, [r7, #11]
        pressure[channel] = pt_counts_to_psi( channel, adc_counts[0][i]) - pt_ambients[channel];
 800243e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f9e3 	bl	8001818 <pt_counts_to_psi>
 8002452:	eeb0 7a40 	vmov.f32	s14, s0
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <updatePeripherals+0x2bc>)
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002468:	4a3f      	ldr	r2, [pc, #252]	; (8002568 <updatePeripherals+0x2c0>)
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 7; i >= 2; --i) {
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	3b01      	subs	r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	2b01      	cmp	r3, #1
 8002480:	dcd9      	bgt.n	8002436 <updatePeripherals+0x18e>
    }

    /* Load mtr currents */
    i_mtr_ab[0] = mtrCountsToAmps(adc_counts[2][5]);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3340      	adds	r3, #64	; 0x40
 8002486:	895b      	ldrh	r3, [r3, #10]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f961 	bl	8002750 <mtrCountsToAmps>
 800248e:	eef0 7a40 	vmov.f32	s15, s0
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <updatePeripherals+0x2c4>)
 8002494:	edc3 7a00 	vstr	s15, [r3]
    i_mtr_ab[1] = mtrCountsToAmps(adc_counts[2][4]);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3340      	adds	r3, #64	; 0x40
 800249c:	891b      	ldrh	r3, [r3, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f956 	bl	8002750 <mtrCountsToAmps>
 80024a4:	eef0 7a40 	vmov.f32	s15, s0
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <updatePeripherals+0x2c4>)
 80024aa:	edc3 7a01 	vstr	s15, [r3, #4]
    i_mtr_ab[2] = mtrCountsToAmps(adc_counts[2][0]);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3340      	adds	r3, #64	; 0x40
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f94b 	bl	8002750 <mtrCountsToAmps>
 80024ba:	eef0 7a40 	vmov.f32	s15, s0
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <updatePeripherals+0x2c4>)
 80024c0:	edc3 7a02 	vstr	s15, [r3, #8]
    i_mtr_ab[3] = mtrCountsToAmps(adc_counts[2][1]);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3340      	adds	r3, #64	; 0x40
 80024c8:	885b      	ldrh	r3, [r3, #2]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f940 	bl	8002750 <mtrCountsToAmps>
 80024d0:	eef0 7a40 	vmov.f32	s15, s0
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <updatePeripherals+0x2c4>)
 80024d6:	edc3 7a03 	vstr	s15, [r3, #12]

    i_mtr[0]    = mtrCountsToAmps(adc_counts[2][2]);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3340      	adds	r3, #64	; 0x40
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f935 	bl	8002750 <mtrCountsToAmps>
 80024e6:	eef0 7a40 	vmov.f32	s15, s0
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <updatePeripherals+0x2c8>)
 80024ec:	edc3 7a00 	vstr	s15, [r3]
    i_mtr[1]    = mtrCountsToAmps(adc_counts[2][3]);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3340      	adds	r3, #64	; 0x40
 80024f4:	88db      	ldrh	r3, [r3, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f92a 	bl	8002750 <mtrCountsToAmps>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <updatePeripherals+0x2c8>)
 8002502:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Load thermocouples temps above */

    /* Load potentiometer degrees */
    for (int8_t i = 9; i >= 6; --i) {
 8002506:	2309      	movs	r3, #9
 8002508:	73bb      	strb	r3, [r7, #14]
 800250a:	e020      	b.n	800254e <updatePeripherals+0x2a6>
        int8_t channel  = 9-i;
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	f1c3 0309 	rsb	r3, r3, #9
 8002512:	b2db      	uxtb	r3, r3
 8002514:	733b      	strb	r3, [r7, #12]
        if (channel < NUM_POTS) {  // Press board code uses 4 pots
 8002516:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	dc13      	bgt.n	8002546 <updatePeripherals+0x29e>
        	epot[channel]   = potCountsToDegrees(adc_counts[2][i], channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800252a:	7b3a      	ldrb	r2, [r7, #12]
 800252c:	f997 400c 	ldrsb.w	r4, [r7, #12]
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f92c 	bl	8002790 <potCountsToDegrees>
 8002538:	eef0 7a40 	vmov.f32	s15, s0
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <updatePeripherals+0x2cc>)
 800253e:	00a3      	lsls	r3, r4, #2
 8002540:	4413      	add	r3, r2
 8002542:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 9; i >= 6; --i) {
 8002546:	7bbb      	ldrb	r3, [r7, #14]
 8002548:	3b01      	subs	r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	73bb      	strb	r3, [r7, #14]
 800254e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002552:	2b05      	cmp	r3, #5
 8002554:	dcda      	bgt.n	800250c <updatePeripherals+0x264>
        }
    }

    /* Load stepper motor position */
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 8002556:	2300      	movs	r3, #0
 8002558:	737b      	strb	r3, [r7, #13]
 800255a:	e01a      	b.n	8002592 <updatePeripherals+0x2ea>
 800255c:	2000033c 	.word	0x2000033c
 8002560:	20000360 	.word	0x20000360
 8002564:	20000274 	.word	0x20000274
 8002568:	20000324 	.word	0x20000324
 800256c:	200003a4 	.word	0x200003a4
 8002570:	200003b4 	.word	0x200003b4
 8002574:	200003c4 	.word	0x200003c4
        mtr_pos[i] = curPos[i];
 8002578:	7b7a      	ldrb	r2, [r7, #13]
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	494c      	ldr	r1, [pc, #304]	; (80026b0 <updatePeripherals+0x408>)
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	440a      	add	r2, r1
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	494b      	ldr	r1, [pc, #300]	; (80026b4 <updatePeripherals+0x40c>)
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_TANKS; ++i) {
 800258c:	7b7b      	ldrb	r3, [r7, #13]
 800258e:	3301      	adds	r3, #1
 8002590:	737b      	strb	r3, [r7, #13]
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d9ef      	bls.n	8002578 <updatePeripherals+0x2d0>
    }

    /* Load board currents and voltages */
    i_batt  = adc_counts[2][12]*ibatt_cal;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3340      	adds	r3, #64	; 0x40
 800259c:	8b1b      	ldrh	r3, [r3, #24]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff84 	bl	80004ac <__aeabi_i2d>
 80025a4:	a33a      	add	r3, pc, #232	; (adr r3, 8002690 <updatePeripherals+0x3e8>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fd ffe9 	bl	8000580 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe fadb 	bl	8000b70 <__aeabi_d2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a3e      	ldr	r2, [pc, #248]	; (80026b8 <updatePeripherals+0x410>)
 80025be:	6013      	str	r3, [r2, #0]
    e_batt  = adc_counts[2][13]*ebatt_slope + ebatt_offset;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3340      	adds	r3, #64	; 0x40
 80025c4:	8b5b      	ldrh	r3, [r3, #26]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ff70 	bl	80004ac <__aeabi_i2d>
 80025cc:	a332      	add	r3, pc, #200	; (adr r3, 8002698 <updatePeripherals+0x3f0>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd ffd5 	bl	8000580 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	a330      	add	r3, pc, #192	; (adr r3, 80026a0 <updatePeripherals+0x3f8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd fe14 	bl	8000210 <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fabe 	bl	8000b70 <__aeabi_d2f>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a31      	ldr	r2, [pc, #196]	; (80026bc <updatePeripherals+0x414>)
 80025f8:	6013      	str	r3, [r2, #0]
    i3v     = adc_counts[2][10]*i3v_cal;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3340      	adds	r3, #64	; 0x40
 80025fe:	8a9b      	ldrh	r3, [r3, #20]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ff53 	bl	80004ac <__aeabi_i2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe faaf 	bl	8000b70 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <updatePeripherals+0x418>)
 8002616:	6013      	str	r3, [r2, #0]
    e3v     = adc_counts[2][11]*e3v_cal;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3340      	adds	r3, #64	; 0x40
 800261c:	8adb      	ldrh	r3, [r3, #22]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff44 	bl	80004ac <__aeabi_i2d>
 8002624:	a320      	add	r3, pc, #128	; (adr r3, 80026a8 <updatePeripherals+0x400>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fd ffa9 	bl	8000580 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fa9b 	bl	8000b70 <__aeabi_d2f>
 800263a:	4603      	mov	r3, r0
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <updatePeripherals+0x41c>)
 800263e:	6013      	str	r3, [r2, #0]
    i5v     = adc_counts[0][8]*i5v_cal;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8a1b      	ldrh	r3, [r3, #16]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff31 	bl	80004ac <__aeabi_i2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe fa8d 	bl	8000b70 <__aeabi_d2f>
 8002656:	4603      	mov	r3, r0
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <updatePeripherals+0x420>)
 800265a:	6013      	str	r3, [r2, #0]
    e5v     = adc_counts[0][9]*e5v_cal;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8a5b      	ldrh	r3, [r3, #18]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff23 	bl	80004ac <__aeabi_i2d>
 8002666:	a310      	add	r3, pc, #64	; (adr r3, 80026a8 <updatePeripherals+0x400>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ff88 	bl	8000580 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa7a 	bl	8000b70 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <updatePeripherals+0x424>)
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	a7693b02 	.word	0xa7693b02
 8002694:	3f908107 	.word	0x3f908107
 8002698:	77318fc5 	.word	0x77318fc5
 800269c:	3f6f212d 	.word	0x3f6f212d
 80026a0:	c5d63886 	.word	0xc5d63886
 80026a4:	3fe2346d 	.word	0x3fe2346d
 80026a8:	ad045a83 	.word	0xad045a83
 80026ac:	3f5a665d 	.word	0x3f5a665d
 80026b0:	200003d8 	.word	0x200003d8
 80026b4:	20000398 	.word	0x20000398
 80026b8:	200002e4 	.word	0x200002e4
 80026bc:	200002e0 	.word	0x200002e0
 80026c0:	200002f8 	.word	0x200002f8
 80026c4:	200002ec 	.word	0x200002ec
 80026c8:	200002f4 	.word	0x200002f4
 80026cc:	200002f0 	.word	0x200002f0

080026d0 <vlvCountsToVolts>:

float vlvCountsToVolts(uint16_t counts) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
    return counts*evlv_cal;
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fee5 	bl	80004ac <__aeabi_i2d>
 80026e2:	a309      	add	r3, pc, #36	; (adr r3, 8002708 <vlvCountsToVolts+0x38>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd ff4a 	bl	8000580 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa3c 	bl	8000b70 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	ee07 3a90 	vmov	s15, r3
}
 80026fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	6ea67bd5 	.word	0x6ea67bd5
 800270c:	3f6a9999 	.word	0x3f6a9999

08002710 <vlvCountsToAmps>:

float vlvCountsToAmps(uint16_t counts) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
    return counts*ivlv_cal;
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fec5 	bl	80004ac <__aeabi_i2d>
 8002722:	a309      	add	r3, pc, #36	; (adr r3, 8002748 <vlvCountsToAmps+0x38>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fd ff2a 	bl	8000580 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe fa1c 	bl	8000b70 <__aeabi_d2f>
 8002738:	4603      	mov	r3, r0
 800273a:	ee07 3a90 	vmov	s15, r3
}
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	0b68130f 	.word	0x0b68130f
 800274c:	3f6a6663 	.word	0x3f6a6663

08002750 <mtrCountsToAmps>:
    return ( counts- pt_offset[pt_num]) *pt_slope[pt_num] - pt_ambients[pt_num];
	//return 0;
}
*/

float mtrCountsToAmps(uint16_t counts) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
    return counts*imtr_cal;
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fea5 	bl	80004ac <__aeabi_i2d>
 8002762:	a309      	add	r3, pc, #36	; (adr r3, 8002788 <mtrCountsToAmps+0x38>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd ff0a 	bl	8000580 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe f9fc 	bl	8000b70 <__aeabi_d2f>
 8002778:	4603      	mov	r3, r0
 800277a:	ee07 3a90 	vmov	s15, r3
}
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	0b68130f 	.word	0x0b68130f
 800278c:	3f6a6663 	.word	0x3f6a6663

08002790 <potCountsToDegrees>:

float potCountsToDegrees(uint16_t counts, uint8_t pot_num) {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	4613      	mov	r3, r2
 800279e:	717b      	strb	r3, [r7, #5]
    // negative sign to align motor pos direction with pot pos direction
    return -EPOT_CHAR_SLOPE*(
                        (pot_cal_info.slope * (counts - pot_cal_info.offset))
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <potCountsToDegrees+0x50>)
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <potCountsToDegrees+0x50>)
 80027b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027ba:	ee27 7a27 	vmul.f32	s14, s14, s15
                         - pot_ambients[pot_num] - EPOT_CHAR_OFFSET
 80027be:	797b      	ldrb	r3, [r7, #5]
 80027c0:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <potCountsToDegrees+0x54>)
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    return -EPOT_CHAR_SLOPE*(
 80027ce:	eef1 7a67 	vneg.f32	s15, s15
                           );
}
 80027d2:	eeb0 0a67 	vmov.f32	s0, s15
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	20000720 	.word	0x20000720
 80027e4:	2000028c 	.word	0x2000028c

080027e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d103      	bne.n	8002800 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
		handleMotorStepping(0);
	}
	else if (htim == &TIM_MTR1_STEP) {
		handleMotorStepping(1);
	}
}
 80027fe:	e01e      	b.n	800283e <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_50MS) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d103      	bne.n	8002810 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
}
 800280e:	e016      	b.n	800283e <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_100MS) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <HAL_TIM_PeriodElapsedCallback+0x38>
		periodic_flag_100ms = 1;
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
}
 800281e:	e00e      	b.n	800283e <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR0_STEP) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x48>
		handleMotorStepping(0);
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff f9e5 	bl	8001bf8 <handleMotorStepping>
}
 800282e:	e006      	b.n	800283e <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim == &TIM_MTR1_STEP) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <HAL_TIM_PeriodElapsedCallback+0x56>
		handleMotorStepping(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f7ff f9dd 	bl	8001bf8 <handleMotorStepping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200020b0 	.word	0x200020b0
 800284c:	20000820 	.word	0x20000820
 8002850:	200008dc 	.word	0x200008dc
 8002854:	200020ac 	.word	0x200020ac
 8002858:	20000c0c 	.word	0x20000c0c
 800285c:	20000930 	.word	0x20000930
 8002860:	20000ac4 	.word	0x20000ac4
 8002864:	20000d78 	.word	0x20000d78

08002868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    // idle detection needs at least one UART clock to detect the bus is idle. So
    // in the case, that the transmission length is one full buffer length
    // and the start buffer pointer is at 0, it will be also 0 at the end of the
    // transmission. In this case the DMA rollover will increment the RxRollover
    // variable first and len will not be zero.
    if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {                    // Check if it is an "Idle Interrupt"
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b10      	cmp	r3, #16
 800287c:	f040 8083 	bne.w	8002986 <HAL_UART_RxCpltCallback+0x11e>
        __HAL_UART_CLEAR_IDLEFLAG(huart);                             // clear the interrupt
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]

        uint16_t start = RxBfrPos;                                        // Rx bytes start position (=last buffer position)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	823b      	strh	r3, [r7, #16]
        RxBfrPos = DMA_RX_BUFFER_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;// determine actual buffer position
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 80028ae:	801a      	strh	r2, [r3, #0]
        uint16_t len = DMA_RX_BUFFER_SIZE;                                // init len with max. size
 80028b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b4:	82fb      	strh	r3, [r7, #22]

        if(RxRollover < 2)  {
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_UART_RxCpltCallback+0x138>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d81b      	bhi.n	80028f6 <HAL_UART_RxCpltCallback+0x8e>
            if(RxRollover) {                                                        // rolled over once
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_UART_RxCpltCallback+0x138>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <HAL_UART_RxCpltCallback+0x82>
                if(RxBfrPos <= start) {
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	8a3a      	ldrh	r2, [r7, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d308      	bcc.n	80028e2 <HAL_UART_RxCpltCallback+0x7a>
                    len = RxBfrPos + DMA_RX_BUFFER_SIZE - start;  // no bytes overwritten
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	8a3b      	ldrh	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028de:	82fb      	strh	r3, [r7, #22]
 80028e0:	e00c      	b.n	80028fc <HAL_UART_RxCpltCallback+0x94>
                } else {
                    len = DMA_RX_BUFFER_SIZE + 1;                 // bytes overwritten error
 80028e2:	f640 0301 	movw	r3, #2049	; 0x801
 80028e6:	82fb      	strh	r3, [r7, #22]
 80028e8:	e008      	b.n	80028fc <HAL_UART_RxCpltCallback+0x94>
                }
            } else {
                len = RxBfrPos - start;                           // no bytes overwritten
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	8a3b      	ldrh	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	82fb      	strh	r3, [r7, #22]
 80028f4:	e002      	b.n	80028fc <HAL_UART_RxCpltCallback+0x94>
            }
        } else {
            len = DMA_RX_BUFFER_SIZE + 2;                         // dual rollover error
 80028f6:	f640 0302 	movw	r3, #2050	; 0x802
 80028fa:	82fb      	strh	r3, [r7, #22]
        }

        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 80028fc:	8afb      	ldrh	r3, [r7, #22]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02d      	beq.n	800295e <HAL_UART_RxCpltCallback+0xf6>
 8002902:	8afb      	ldrh	r3, [r7, #22]
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	d829      	bhi.n	800295e <HAL_UART_RxCpltCallback+0xf6>
            uint16_t bytes_in_first_part = len;
 800290a:	8afb      	ldrh	r3, [r7, #22]
 800290c:	82bb      	strh	r3, [r7, #20]
            uint16_t bytes_in_second_part = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	827b      	strh	r3, [r7, #18]
            if (RxBfrPos < start) { // if data loops in buffer
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_UART_RxCpltCallback+0x134>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	8a3a      	ldrh	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d907      	bls.n	800292c <HAL_UART_RxCpltCallback+0xc4>
                bytes_in_first_part = DMA_RX_BUFFER_SIZE - start;
 800291c:	8a3b      	ldrh	r3, [r7, #16]
 800291e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002922:	82bb      	strh	r3, [r7, #20]
                bytes_in_second_part= len - bytes_in_first_part;
 8002924:	8afa      	ldrh	r2, [r7, #22]
 8002926:	8abb      	ldrh	r3, [r7, #20]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	827b      	strh	r3, [r7, #18]
            }

            // handle telem for yourself immediately
            memcpy(temp_telem_buffer, DMA_RX_Buffer+start, bytes_in_first_part);
 800292c:	8a3b      	ldrh	r3, [r7, #16]
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_UART_RxCpltCallback+0x13c>)
 8002930:	4413      	add	r3, r2
 8002932:	8aba      	ldrh	r2, [r7, #20]
 8002934:	4619      	mov	r1, r3
 8002936:	481c      	ldr	r0, [pc, #112]	; (80029a8 <HAL_UART_RxCpltCallback+0x140>)
 8002938:	f00b fd62 	bl	800e400 <memcpy>
            memcpy(temp_telem_buffer+bytes_in_first_part, DMA_RX_Buffer, bytes_in_second_part);
 800293c:	8abb      	ldrh	r3, [r7, #20]
 800293e:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_UART_RxCpltCallback+0x140>)
 8002940:	4413      	add	r3, r2
 8002942:	8a7a      	ldrh	r2, [r7, #18]
 8002944:	4917      	ldr	r1, [pc, #92]	; (80029a4 <HAL_UART_RxCpltCallback+0x13c>)
 8002946:	4618      	mov	r0, r3
 8002948:	f00b fd5a 	bl	800e400 <memcpy>
            uint8_t cmd_status = receive_data(huart, temp_telem_buffer, len);
 800294c:	8afb      	ldrh	r3, [r7, #22]
 800294e:	461a      	mov	r2, r3
 8002950:	4915      	ldr	r1, [pc, #84]	; (80029a8 <HAL_UART_RxCpltCallback+0x140>)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f005 fe24 	bl	80085a0 <receive_data>
 8002958:	4603      	mov	r3, r0
 800295a:	73fb      	strb	r3, [r7, #15]
        if(len && (len <= DMA_RX_BUFFER_SIZE)) {
 800295c:	e00f      	b.n	800297e <HAL_UART_RxCpltCallback+0x116>
                last_telem_packet_pos = (last_telem_packet_pos + 1) % NUM_BUFFER_PACKETS;
            }
            */
        } else {
            // buffer overflow error:
            HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800295e:	2102      	movs	r1, #2
 8002960:	4812      	ldr	r0, [pc, #72]	; (80029ac <HAL_UART_RxCpltCallback+0x144>)
 8002962:	f007 ff40 	bl	800a7e6 <HAL_GPIO_TogglePin>
			init_board(OWN_BOARD_ADDR); //Fixes an issue with CLB_board_addr changing
 8002966:	2003      	movs	r0, #3
 8002968:	f005 fce8 	bl	800833c <init_board>
			last_telem_packet_pos = 0;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_UART_RxCpltCallback+0x148>)
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // dma buffer overflowed
 8002972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002976:	490b      	ldr	r1, [pc, #44]	; (80029a4 <HAL_UART_RxCpltCallback+0x13c>)
 8002978:	480e      	ldr	r0, [pc, #56]	; (80029b4 <HAL_UART_RxCpltCallback+0x14c>)
 800297a:	f00a fca4 	bl	800d2c6 <HAL_UART_Receive_DMA>
        }

        RxRollover = 0;                                                    // reset the Rollover variable
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_UART_RxCpltCallback+0x138>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    } else {
        // no idle flag? --> DMA rollover occurred
        RxRollover++;       // increment Rollover Counter
    }
}
 8002984:	e005      	b.n	8002992 <HAL_UART_RxCpltCallback+0x12a>
        RxRollover++;       // increment Rollover Counter
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_UART_RxCpltCallback+0x138>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_UART_RxCpltCallback+0x138>)
 8002990:	701a      	strb	r2, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200005ae 	.word	0x200005ae
 80029a0:	200005b0 	.word	0x200005b0
 80029a4:	200017bc 	.word	0x200017bc
 80029a8:	200004ac 	.word	0x200004ac
 80029ac:	40020800 	.word	0x40020800
 80029b0:	200005ac 	.word	0x200005ac
 80029b4:	2000205c 	.word	0x2000205c

080029b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029bc:	f006 ff8a 	bl	80098d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029c0:	f000 f962 	bl	8002c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029c4:	f000 fcfc 	bl	80033c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80029c8:	f000 fcda 	bl	8003380 <MX_DMA_Init>
  MX_SPI1_Init();
 80029cc:	f000 f9e4 	bl	8002d98 <MX_SPI1_Init>
  MX_SPI2_Init();
 80029d0:	f000 fa18 	bl	8002e04 <MX_SPI2_Init>
  MX_SPI4_Init();
 80029d4:	f000 fa4c 	bl	8002e70 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80029d8:	f000 fca8 	bl	800332c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80029dc:	f000 fa7e 	bl	8002edc <MX_TIM2_Init>
  MX_TIM6_Init();
 80029e0:	f000 fbcc 	bl	800317c <MX_TIM6_Init>
  MX_TIM7_Init();
 80029e4:	f000 fc00 	bl	80031e8 <MX_TIM7_Init>
  MX_TIM10_Init();
 80029e8:	f000 fc34 	bl	8003254 <MX_TIM10_Init>
  MX_TIM11_Init();
 80029ec:	f000 fc56 	bl	800329c <MX_TIM11_Init>
  MX_TIM3_Init();
 80029f0:	f000 faf4 	bl	8002fdc <MX_TIM3_Init>
  MX_TIM5_Init();
 80029f4:	f000 fb74 	bl	80030e0 <MX_TIM5_Init>
  MX_TIM13_Init();
 80029f8:	f000 fc74 	bl	80032e4 <MX_TIM13_Init>
  MX_IWDG_Init();
 80029fc:	f000 f9b2 	bl	8002d64 <MX_IWDG_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8002a00:	4882      	ldr	r0, [pc, #520]	; (8002c0c <main+0x254>)
 8002a02:	f009 fabd 	bl	800bf80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 8002a06:	4882      	ldr	r0, [pc, #520]	; (8002c10 <main+0x258>)
 8002a08:	f009 fb22 	bl	800c050 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8002a0c:	4881      	ldr	r0, [pc, #516]	; (8002c14 <main+0x25c>)
 8002a0e:	f009 fb1f 	bl	800c050 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8002a12:	4881      	ldr	r0, [pc, #516]	; (8002c18 <main+0x260>)
 8002a14:	f009 fb1c 	bl	800c050 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&TIM_MTR0_PWM);
 8002a18:	4880      	ldr	r0, [pc, #512]	; (8002c1c <main+0x264>)
 8002a1a:	f009 fab1 	bl	800bf80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&TIM_MTR1_PWM);
 8002a1e:	4880      	ldr	r0, [pc, #512]	; (8002c20 <main+0x268>)
 8002a20:	f009 faae 	bl	800bf80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_MTR0_STEP);
 8002a24:	487f      	ldr	r0, [pc, #508]	; (8002c24 <main+0x26c>)
 8002a26:	f009 fb13 	bl	800c050 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_MTR1_STEP);
 8002a2a:	487f      	ldr	r0, [pc, #508]	; (8002c28 <main+0x270>)
 8002a2c:	f009 fb10 	bl	800c050 <HAL_TIM_Base_Start_IT>

  // UART DMA
  __HAL_UART_ENABLE_IT(&COM_UART, UART_IT_IDLE);   // enable idle line interrupt
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <main+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <main+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0210 	orr.w	r2, r2, #16
 8002a3e:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&COM_UART, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	497a      	ldr	r1, [pc, #488]	; (8002c30 <main+0x278>)
 8002a46:	4879      	ldr	r0, [pc, #484]	; (8002c2c <main+0x274>)
 8002a48:	f00a fc3d 	bl	800d2c6 <HAL_UART_Receive_DMA>

  // Read variables from flash: this must be called very early in initialization!
  HAL_Delay(100);  // Small delay to ensure flash boots up completely
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	f006 ffb3 	bl	80099b8 <HAL_Delay>
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8002a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a56:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <main+0x27c>)
 8002a58:	4977      	ldr	r1, [pc, #476]	; (8002c38 <main+0x280>)
 8002a5a:	4878      	ldr	r0, [pc, #480]	; (8002c3c <main+0x284>)
 8002a5c:	f006 fc51 	bl	8009302 <init_flash>
  read_nonvolatile_variables();
 8002a60:	f000 fe30 	bl	80036c4 <read_nonvolatile_variables>

  // Initializations
  init_board(OWN_BOARD_ADDR);  // Comms
 8002a64:	2003      	movs	r0, #3
 8002a66:	f005 fc69 	bl	800833c <init_board>
  init_autosequence_constants();  // Hardcoded values
 8002a6a:	f7fe fa4d 	bl	8000f08 <init_autosequence_constants>
  init_autosequence_control_variables();
 8002a6e:	f7fe fad1 	bl	8001014 <init_autosequence_control_variables>
  init_tank_pressure_control_configuration();  // PID
 8002a72:	f7fe fa7f 	bl	8000f74 <init_tank_pressure_control_configuration>
  init_hardware();  // Press board sensors, etc
 8002a76:	f7fe ff65 	bl	8001944 <init_hardware>

  // Packet values
  telem_rate = 1000/(TIM_100MS.Init.Period+1);
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <main+0x260>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <main+0x288>)
 8002a8c:	701a      	strb	r2, [r3, #0]
  adc_rate = 1000/(TIM_5MS.Init.Period+1);
 8002a8e:	4b60      	ldr	r3, [pc, #384]	; (8002c10 <main+0x258>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	3301      	adds	r3, #1
 8002a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <main+0x28c>)
 8002aa0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  execute_autosequence();
 8002aa2:	f7fe fd0b 	bl	80014bc <execute_autosequence>

	  if (periodic_flag_50ms) {
 8002aa6:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <main+0x290>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <main+0x126>
		  periodic_flag_50ms = 0;
 8002ab0:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <main+0x290>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <main+0x294>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10f      	bne.n	8002ade <main+0x126>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002abe:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <main+0x298>)
 8002ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <main+0x116>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 8002ac8:	4862      	ldr	r0, [pc, #392]	; (8002c54 <main+0x29c>)
 8002aca:	f003 fec7 	bl	800685c <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002ace:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <main+0x298>)
 8002ad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <main+0x126>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 8002ad8:	485f      	ldr	r0, [pc, #380]	; (8002c58 <main+0x2a0>)
 8002ada:	f003 febf 	bl	800685c <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <main+0x2a4>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d079      	beq.n	8002bdc <main+0x224>
		  periodic_flag_5ms = 0;
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <main+0x2a4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]

		  // sample adcs and thermocouples
		  readAdcs(&SPI_ADC, adc_pins, adc_counts);
 8002aee:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <main+0x2a8>)
 8002af0:	495c      	ldr	r1, [pc, #368]	; (8002c64 <main+0x2ac>)
 8002af2:	485d      	ldr	r0, [pc, #372]	; (8002c68 <main+0x2b0>)
 8002af4:	f7ff fac6 	bl	8002084 <readAdcs>
		  readThermocouples(&SPI_TC, tc_pins, 5);
 8002af8:	2205      	movs	r2, #5
 8002afa:	495c      	ldr	r1, [pc, #368]	; (8002c6c <main+0x2b4>)
 8002afc:	485c      	ldr	r0, [pc, #368]	; (8002c70 <main+0x2b8>)
 8002afe:	f7ff fbab 	bl	8002258 <readThermocouples>
		  updatePeripherals(adc_counts);
 8002b02:	4857      	ldr	r0, [pc, #348]	; (8002c60 <main+0x2a8>)
 8002b04:	f7ff fbd0 	bl	80022a8 <updatePeripherals>

		  update_serial_data_vars();
 8002b08:	f003 f9de 	bl	8005ec8 <update_serial_data_vars>

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <main+0x294>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d105      	bne.n	8002b20 <main+0x168>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 8002b14:	484f      	ldr	r0, [pc, #316]	; (8002c54 <main+0x29c>)
 8002b16:	f003 fe6c 	bl	80067f2 <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 8002b1a:	484f      	ldr	r0, [pc, #316]	; (8002c58 <main+0x2a0>)
 8002b1c:	f003 fe69 	bl	80067f2 <tank_autopress_bang_bang>
		  }

		  // Initial motor position
		  if (STATE == Startup || STATE == Ignition) {
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <main+0x294>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d003      	beq.n	8002b30 <main+0x178>
 8002b28:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <main+0x294>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11c      	bne.n	8002b6a <main+0x1b2>
			  autosequence.T_state = get_ellapsed_time_in_autosequence_state_ms();
 8002b30:	f7fe fc46 	bl	80013c0 <get_ellapsed_time_in_autosequence_state_ms>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4a46      	ldr	r2, [pc, #280]	; (8002c50 <main+0x298>)
 8002b38:	6293      	str	r3, [r2, #40]	; 0x28

			  // Initial motor position is arbitrarily put in the 5ms loop
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <main+0x294>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d009      	beq.n	8002b56 <main+0x19e>
 8002b42:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <main+0x294>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d10f      	bne.n	8002b6a <main+0x1b2>
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <main+0x298>)
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
					  >= autosequence.startup_motor_start_delay_ms)) {
 8002b4e:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <main+0x298>)
 8002b50:	681b      	ldr	r3, [r3, #0]
			  if (STATE == Ignition || (STATE == Startup && autosequence.T_state
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d309      	bcc.n	8002b6a <main+0x1b2>
				  // Allow manual transition to Ignition
				  autosequence.startup_init_motor_pos_complete = 1;
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <main+0x298>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

				  // Set motors to initial position
				  tank_startup_init_motor_position(&tanks[LOX_TANK_NUM]);
 8002b5e:	483d      	ldr	r0, [pc, #244]	; (8002c54 <main+0x29c>)
 8002b60:	f003 ff9e 	bl	8006aa0 <tank_startup_init_motor_position>
				  tank_startup_init_motor_position(&tanks[FUEL_TANK_NUM]);
 8002b64:	483c      	ldr	r0, [pc, #240]	; (8002c58 <main+0x2a0>)
 8002b66:	f003 ff9b 	bl	8006aa0 <tank_startup_init_motor_position>
			  }
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 8002b6a:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <main+0x294>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10f      	bne.n	8002b92 <main+0x1da>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <main+0x298>)
 8002b74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <main+0x1ca>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 8002b7c:	4835      	ldr	r0, [pc, #212]	; (8002c54 <main+0x29c>)
 8002b7e:	f003 ff63 	bl	8006a48 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <main+0x298>)
 8002b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <main+0x1da>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 8002b8c:	4832      	ldr	r0, [pc, #200]	; (8002c58 <main+0x2a0>)
 8002b8e:	f003 ff5b 	bl	8006a48 <tank_check_control_valve_threshold>
			  }
		  }

		  // Ignitor break detection
		  if (STATE == Ignition && autosequence.T_state
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <main+0x294>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d108      	bne.n	8002bac <main+0x1f4>
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <main+0x298>)
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				  >= autosequence.ignition_ignitor_on_delay_ms) {
 8002b9e:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <main+0x298>)
 8002ba0:	8892      	ldrh	r2, [r2, #4]
 8002ba2:	b292      	uxth	r2, r2
		  if (STATE == Ignition && autosequence.T_state
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d301      	bcc.n	8002bac <main+0x1f4>
			  update_ignitor_break_detector();
 8002ba8:	f7fe facc 	bl	8001144 <update_ignitor_break_detector>
		  }

		  // Combustion failure detection
		  if (STATE == Hotfire && autosequence.T_state
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <main+0x294>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d107      	bne.n	8002bc4 <main+0x20c>
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <main+0x298>)
 8002bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
				  >= autosequence.hotfire_chamber_pres_lower_bound_abort_start_time_ms) {
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <main+0x298>)
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		  if (STATE == Hotfire && autosequence.T_state
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d301      	bcc.n	8002bc4 <main+0x20c>
			  update_combustion_failure_detector();
 8002bc0:	f7fe faf0 	bl	80011a4 <update_combustion_failure_detector>
		  }

		  // Hard start detection
		  if (STATE == Hotfire) {
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <main+0x294>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d101      	bne.n	8002bd0 <main+0x218>
			  update_hard_start_detector();
 8002bcc:	f7fe fb1e 	bl	800120c <update_hard_start_detector>
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <main+0x2bc>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <main+0x224>
			  save_flash_packet();
 8002bd8:	f003 f9d6 	bl	8005f88 <save_flash_packet>

	  }


	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <main+0x2c0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <main+0x24a>
		  periodic_flag_100ms = 0;
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <main+0x2c0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]

		  // Send telemetry
		  if (!telem_disabled) {
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <main+0x2c4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <main+0x24a>
			  send_telem_packet(SERVER_ADDR);
 8002bf4:	2007      	movs	r0, #7
 8002bf6:	f003 f9a5 	bl	8005f44 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4820      	ldr	r0, [pc, #128]	; (8002c80 <main+0x2c8>)
 8002bfe:	f007 fdf2 	bl	800a7e6 <HAL_GPIO_TogglePin>
		  }
	  }

	  // Refresh watchdog timer to keep the board running
	  HAL_IWDG_Refresh(&hiwdg);
 8002c02:	4820      	ldr	r0, [pc, #128]	; (8002c84 <main+0x2cc>)
 8002c04:	f007 fe4b 	bl	800a89e <HAL_IWDG_Refresh>
	  execute_autosequence();
 8002c08:	e74b      	b.n	8002aa2 <main+0xea>
 8002c0a:	bf00      	nop
 8002c0c:	20000934 	.word	0x20000934
 8002c10:	200020b0 	.word	0x200020b0
 8002c14:	200008dc 	.word	0x200008dc
 8002c18:	20000c0c 	.word	0x20000c0c
 8002c1c:	20002014 	.word	0x20002014
 8002c20:	2000097c 	.word	0x2000097c
 8002c24:	20000ac4 	.word	0x20000ac4
 8002c28:	20000d78 	.word	0x20000d78
 8002c2c:	2000205c 	.word	0x2000205c
 8002c30:	200017bc 	.word	0x200017bc
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	20000884 	.word	0x20000884
 8002c3c:	20002288 	.word	0x20002288
 8002c40:	20000318 	.word	0x20000318
 8002c44:	20000319 	.word	0x20000319
 8002c48:	200020ac 	.word	0x200020ac
 8002c4c:	200002dc 	.word	0x200002dc
 8002c50:	2000065c 	.word	0x2000065c
 8002c54:	200005b4 	.word	0x200005b4
 8002c58:	20000608 	.word	0x20000608
 8002c5c:	20000820 	.word	0x20000820
 8002c60:	20000750 	.word	0x20000750
 8002c64:	200007b0 	.word	0x200007b0
 8002c68:	20001fbc 	.word	0x20001fbc
 8002c6c:	20000728 	.word	0x20000728
 8002c70:	20000c54 	.word	0x20000c54
 8002c74:	20000320 	.word	0x20000320
 8002c78:	20000930 	.word	0x20000930
 8002c7c:	200005b1 	.word	0x200005b1
 8002c80:	40020800 	.word	0x40020800
 8002c84:	20000924 	.word	0x20000924

08002c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b094      	sub	sp, #80	; 0x50
 8002c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	2234      	movs	r2, #52	; 0x34
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f00b fbc0 	bl	800e41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <SystemClock_Config+0xd4>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <SystemClock_Config+0xd4>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <SystemClock_Config+0xd4>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <SystemClock_Config+0xd8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <SystemClock_Config+0xd8>)
 8002cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <SystemClock_Config+0xd8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ce8:	2309      	movs	r3, #9
 8002cea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002cec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d00:	2308      	movs	r3, #8
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002d04:	235a      	movs	r3, #90	; 0x5a
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d10:	2302      	movs	r3, #2
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f008 f89b 	bl	800ae54 <HAL_RCC_OscConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002d24:	f000 fcc8 	bl	80036b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d28:	230f      	movs	r3, #15
 8002d2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f007 fdbc 	bl	800a8c0 <HAL_RCC_ClockConfig>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002d4e:	f000 fcb3 	bl	80036b8 <Error_Handler>
  }
}
 8002d52:	bf00      	nop
 8002d54:	3750      	adds	r7, #80	; 0x50
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40007000 	.word	0x40007000

08002d64 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_IWDG_Init+0x2c>)
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <MX_IWDG_Init+0x30>)
 8002d6c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MX_IWDG_Init+0x2c>)
 8002d70:	2206      	movs	r2, #6
 8002d72:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 624;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_IWDG_Init+0x2c>)
 8002d76:	f44f 721c 	mov.w	r2, #624	; 0x270
 8002d7a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002d7c:	4804      	ldr	r0, [pc, #16]	; (8002d90 <MX_IWDG_Init+0x2c>)
 8002d7e:	f007 fd4c 	bl	800a81a <HAL_IWDG_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002d88:	f000 fc96 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000924 	.word	0x20000924
 8002d94:	40003000 	.word	0x40003000

08002d98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <MX_SPI1_Init+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002da8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002db8:	2202      	movs	r2, #2
 8002dba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dea:	f008 fad1 	bl	800b390 <HAL_SPI_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002df4:	f000 fc60 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20001fbc 	.word	0x20001fbc
 8002e00:	40013000 	.word	0x40013000

08002e04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <MX_SPI2_Init+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e50:	220a      	movs	r2, #10
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e56:	f008 fa9b 	bl	800b390 <HAL_SPI_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e60:	f000 fc2a 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000884 	.word	0x20000884
 8002e6c:	40003800 	.word	0x40003800

08002e70 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <MX_SPI4_Init+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <MX_SPI4_Init+0x64>)
 8002ec2:	f008 fa65 	bl	800b390 <HAL_SPI_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002ecc:	f000 fbf4 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000c54 	.word	0x20000c54
 8002ed8:	40013400 	.word	0x40013400

08002edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
 8002f08:	615a      	str	r2, [r3, #20]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44999;
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f16:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1c:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f24:	2263      	movs	r2, #99	; 0x63
 8002f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f34:	4828      	ldr	r0, [pc, #160]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f36:	f008 ffd3 	bl	800bee0 <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002f40:	f000 fbba 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4821      	ldr	r0, [pc, #132]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f52:	f009 fc49 	bl	800c7e8 <HAL_TIM_ConfigClockSource>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002f5c:	f000 fbac 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f60:	481d      	ldr	r0, [pc, #116]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f62:	f009 f8e5 	bl	800c130 <HAL_TIM_PWM_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002f6c:	f000 fba4 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f78:	f107 0320 	add.w	r3, r7, #32
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4816      	ldr	r0, [pc, #88]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002f80:	f00a f832 	bl	800cfe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002f8a:	f000 fb95 	bl	80036b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f8e:	2360      	movs	r3, #96	; 0x60
 8002f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002f96:	2302      	movs	r3, #2
 8002f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002fa6:	f009 fb5d 	bl	800c664 <HAL_TIM_PWM_ConfigChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002fb0:	f000 fb82 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002fbc:	f009 fb52 	bl	800c664 <HAL_TIM_PWM_ConfigChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002fc6:	f000 fb77 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fca:	4803      	ldr	r0, [pc, #12]	; (8002fd8 <MX_TIM2_Init+0xfc>)
 8002fcc:	f003 fa66 	bl	800649c <HAL_TIM_MspPostInit>

}
 8002fd0:	bf00      	nop
 8002fd2:	3738      	adds	r7, #56	; 0x38
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20002014 	.word	0x20002014

08002fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff0:	f107 0320 	add.w	r3, r7, #32
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800300c:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <MX_TIM3_Init+0xfc>)
 800300e:	4a33      	ldr	r2, [pc, #204]	; (80030dc <MX_TIM3_Init+0x100>)
 8003010:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44999;
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003014:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003018:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <MX_TIM3_Init+0xfc>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003022:	2263      	movs	r2, #99	; 0x63
 8003024:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <MX_TIM3_Init+0xfc>)
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003032:	4829      	ldr	r0, [pc, #164]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003034:	f008 ff54 	bl	800bee0 <HAL_TIM_Base_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800303e:	f000 fb3b 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304c:	4619      	mov	r1, r3
 800304e:	4822      	ldr	r0, [pc, #136]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003050:	f009 fbca 	bl	800c7e8 <HAL_TIM_ConfigClockSource>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800305a:	f000 fb2d 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800305e:	481e      	ldr	r0, [pc, #120]	; (80030d8 <MX_TIM3_Init+0xfc>)
 8003060:	f009 f866 	bl	800c130 <HAL_TIM_PWM_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800306a:	f000 fb25 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003076:	f107 0320 	add.w	r3, r7, #32
 800307a:	4619      	mov	r1, r3
 800307c:	4816      	ldr	r0, [pc, #88]	; (80030d8 <MX_TIM3_Init+0xfc>)
 800307e:	f009 ffb3 	bl	800cfe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003088:	f000 fb16 	bl	80036b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308c:	2360      	movs	r3, #96	; 0x60
 800308e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003094:	2302      	movs	r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	4619      	mov	r1, r3
 80030a2:	480d      	ldr	r0, [pc, #52]	; (80030d8 <MX_TIM3_Init+0xfc>)
 80030a4:	f009 fade 	bl	800c664 <HAL_TIM_PWM_ConfigChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80030ae:	f000 fb03 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	2204      	movs	r2, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4807      	ldr	r0, [pc, #28]	; (80030d8 <MX_TIM3_Init+0xfc>)
 80030ba:	f009 fad3 	bl	800c664 <HAL_TIM_PWM_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80030c4:	f000 faf8 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <MX_TIM3_Init+0xfc>)
 80030ca:	f003 f9e7 	bl	800649c <HAL_TIM_MspPostInit>

}
 80030ce:	bf00      	nop
 80030d0:	3738      	adds	r7, #56	; 0x38
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000097c 	.word	0x2000097c
 80030dc:	40000400 	.word	0x40000400

080030e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <MX_TIM5_Init+0x94>)
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <MX_TIM5_Init+0x98>)
 8003100:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 44;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <MX_TIM5_Init+0x94>)
 8003104:	222c      	movs	r2, #44	; 0x2c
 8003106:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <MX_TIM5_Init+0x94>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <MX_TIM5_Init+0x94>)
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <MX_TIM5_Init+0x94>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <MX_TIM5_Init+0x94>)
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003122:	4814      	ldr	r0, [pc, #80]	; (8003174 <MX_TIM5_Init+0x94>)
 8003124:	f008 fedc 	bl	800bee0 <HAL_TIM_Base_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800312e:	f000 fac3 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	4619      	mov	r1, r3
 800313e:	480d      	ldr	r0, [pc, #52]	; (8003174 <MX_TIM5_Init+0x94>)
 8003140:	f009 fb52 	bl	800c7e8 <HAL_TIM_ConfigClockSource>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800314a:	f000 fab5 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003156:	463b      	mov	r3, r7
 8003158:	4619      	mov	r1, r3
 800315a:	4806      	ldr	r0, [pc, #24]	; (8003174 <MX_TIM5_Init+0x94>)
 800315c:	f009 ff44 	bl	800cfe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003166:	f000 faa7 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000934 	.word	0x20000934
 8003178:	40000c00 	.word	0x40000c00

0800317c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003182:	463b      	mov	r3, r7
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <MX_TIM6_Init+0x64>)
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <MX_TIM6_Init+0x68>)
 800318e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <MX_TIM6_Init+0x64>)
 8003192:	222c      	movs	r2, #44	; 0x2c
 8003194:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <MX_TIM6_Init+0x64>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MX_TIM6_Init+0x64>)
 800319e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_TIM6_Init+0x64>)
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <MX_TIM6_Init+0x64>)
 80031ac:	f008 fe98 	bl	800bee0 <HAL_TIM_Base_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80031b6:	f000 fa7f 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031c2:	463b      	mov	r3, r7
 80031c4:	4619      	mov	r1, r3
 80031c6:	4806      	ldr	r0, [pc, #24]	; (80031e0 <MX_TIM6_Init+0x64>)
 80031c8:	f009 ff0e 	bl	800cfe8 <HAL_TIMEx_MasterConfigSynchronization>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80031d2:	f000 fa71 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000d78 	.word	0x20000d78
 80031e4:	40001000 	.word	0x40001000

080031e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ee:	463b      	mov	r3, r7
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <MX_TIM7_Init+0x64>)
 80031f8:	4a15      	ldr	r2, [pc, #84]	; (8003250 <MX_TIM7_Init+0x68>)
 80031fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 44999;
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <MX_TIM7_Init+0x64>)
 80031fe:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003202:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_TIM7_Init+0x64>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4;
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <MX_TIM7_Init+0x64>)
 800320c:	2204      	movs	r2, #4
 800320e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_TIM7_Init+0x64>)
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <MX_TIM7_Init+0x64>)
 8003218:	f008 fe62 	bl	800bee0 <HAL_TIM_Base_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003222:	f000 fa49 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800322e:	463b      	mov	r3, r7
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <MX_TIM7_Init+0x64>)
 8003234:	f009 fed8 	bl	800cfe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800323e:	f000 fa3b 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200020b0 	.word	0x200020b0
 8003250:	40001400 	.word	0x40001400

08003254 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <MX_TIM10_Init+0x40>)
 800325a:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <MX_TIM10_Init+0x44>)
 800325c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 44999;
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <MX_TIM10_Init+0x40>)
 8003260:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003264:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <MX_TIM10_Init+0x40>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <MX_TIM10_Init+0x40>)
 800326e:	2231      	movs	r2, #49	; 0x31
 8003270:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <MX_TIM10_Init+0x40>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <MX_TIM10_Init+0x40>)
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800327e:	4805      	ldr	r0, [pc, #20]	; (8003294 <MX_TIM10_Init+0x40>)
 8003280:	f008 fe2e 	bl	800bee0 <HAL_TIM_Base_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800328a:	f000 fa15 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200008dc 	.word	0x200008dc
 8003298:	40014400 	.word	0x40014400

0800329c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_TIM11_Init+0x40>)
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <MX_TIM11_Init+0x44>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 44999;
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <MX_TIM11_Init+0x40>)
 80032a8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80032ac:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <MX_TIM11_Init+0x40>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_TIM11_Init+0x40>)
 80032b6:	2263      	movs	r2, #99	; 0x63
 80032b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <MX_TIM11_Init+0x40>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_TIM11_Init+0x40>)
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <MX_TIM11_Init+0x40>)
 80032c8:	f008 fe0a 	bl	800bee0 <HAL_TIM_Base_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80032d2:	f000 f9f1 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000c0c 	.word	0x20000c0c
 80032e0:	40014800 	.word	0x40014800

080032e4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <MX_TIM13_Init+0x40>)
 80032ea:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <MX_TIM13_Init+0x44>)
 80032ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 44;
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <MX_TIM13_Init+0x40>)
 80032f0:	222c      	movs	r2, #44	; 0x2c
 80032f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <MX_TIM13_Init+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <MX_TIM13_Init+0x40>)
 80032fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003300:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <MX_TIM13_Init+0x40>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <MX_TIM13_Init+0x40>)
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <MX_TIM13_Init+0x40>)
 8003310:	f008 fde6 	bl	800bee0 <HAL_TIM_Base_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800331a:	f000 f9cd 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000ac4 	.word	0x20000ac4
 8003328:	40001c00 	.word	0x40001c00

0800332c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <MX_USART2_UART_Init+0x50>)
 8003334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800333c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003364:	f009 fed0 	bl	800d108 <HAL_UART_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800336e:	f000 f9a3 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	2000205c 	.word	0x2000205c
 800337c:	40004400 	.word	0x40004400

08003380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_DMA_Init+0x3c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <MX_DMA_Init+0x3c>)
 8003390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_DMA_Init+0x3c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2010      	movs	r0, #16
 80033a8:	f006 fc1b 	bl	8009be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80033ac:	2010      	movs	r0, #16
 80033ae:	f006 fc34 	bl	8009c1a <HAL_NVIC_EnableIRQ>

}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	; 0x30
 80033c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	4bb1      	ldr	r3, [pc, #708]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4ab0      	ldr	r2, [pc, #704]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 80033e0:	f043 0310 	orr.w	r3, r3, #16
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4bae      	ldr	r3, [pc, #696]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	4baa      	ldr	r3, [pc, #680]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4aa9      	ldr	r2, [pc, #676]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	4ba3      	ldr	r3, [pc, #652]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4aa2      	ldr	r2, [pc, #648]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4ba0      	ldr	r3, [pc, #640]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b9c      	ldr	r3, [pc, #624]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a9b      	ldr	r2, [pc, #620]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b99      	ldr	r3, [pc, #612]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b95      	ldr	r3, [pc, #596]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a94      	ldr	r2, [pc, #592]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b92      	ldr	r3, [pc, #584]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a8d      	ldr	r2, [pc, #564]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b8b      	ldr	r3, [pc, #556]	; (80036a0 <MX_GPIO_Init+0x2e0>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 800347e:	2200      	movs	r2, #0
 8003480:	217f      	movs	r1, #127	; 0x7f
 8003482:	4888      	ldr	r0, [pc, #544]	; (80036a4 <MX_GPIO_Init+0x2e4>)
 8003484:	f007 f996 	bl	800a7b4 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003488:	2200      	movs	r2, #0
 800348a:	f64f 610f 	movw	r1, #65039	; 0xfe0f
 800348e:	4886      	ldr	r0, [pc, #536]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 8003490:	f007 f990 	bl	800a7b4 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin|mtr0_inB0_Pin
                          |mtr0_inA0_Pin|mtr0_inA1_Pin|mtr3_in0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cs_GPIO_Port, adc0_cs_Pin, GPIO_PIN_SET);
 8003494:	2201      	movs	r2, #1
 8003496:	2108      	movs	r1, #8
 8003498:	4884      	ldr	r0, [pc, #528]	; (80036ac <MX_GPIO_Init+0x2ec>)
 800349a:	f007 f98b 	bl	800a7b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc0_cnvst_GPIO_Port, adc0_cnvst_Pin, GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	2110      	movs	r1, #16
 80034a2:	4881      	ldr	r0, [pc, #516]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 80034a4:	f007 f986 	bl	800a7b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 80034a8:	2201      	movs	r2, #1
 80034aa:	f241 4107 	movw	r1, #5127	; 0x1407
 80034ae:	4880      	ldr	r0, [pc, #512]	; (80036b0 <MX_GPIO_Init+0x2f0>)
 80034b0:	f007 f980 	bl	800a7b4 <HAL_GPIO_WritePin>
                          |SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 80034b4:	2201      	movs	r2, #1
 80034b6:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 80034ba:	487a      	ldr	r0, [pc, #488]	; (80036a4 <MX_GPIO_Init+0x2e4>)
 80034bc:	f007 f97a 	bl	800a7b4 <HAL_GPIO_WritePin>
                          |tc3_cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80034c0:	2201      	movs	r2, #1
 80034c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c6:	487b      	ldr	r0, [pc, #492]	; (80036b4 <MX_GPIO_Init+0x2f4>)
 80034c8:	f007 f974 	bl	800a7b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin|mtr3_in1_Pin
 80034cc:	2200      	movs	r2, #0
 80034ce:	f640 619f 	movw	r1, #3743	; 0xe9f
 80034d2:	4878      	ldr	r0, [pc, #480]	; (80036b4 <MX_GPIO_Init+0x2f4>)
 80034d4:	f007 f96e 	bl	800a7b4 <HAL_GPIO_WritePin>
                          |mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin|mtr1_inB0_Pin
                          |mtr1_inB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, mtr0_inB1_Pin|GPIO_3_Pin, GPIO_PIN_RESET);
 80034d8:	2200      	movs	r2, #0
 80034da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034de:	4873      	ldr	r0, [pc, #460]	; (80036ac <MX_GPIO_Init+0x2ec>)
 80034e0:	f007 f968 	bl	800a7b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : en_vlv8_Pin en_vlv7_Pin en_vlv6_Pin en_vlv5_Pin
                           en_vlv4_Pin GPIO_1_Pin en_vlv0_Pin */
  GPIO_InitStruct.Pin = en_vlv8_Pin|en_vlv7_Pin|en_vlv6_Pin|en_vlv5_Pin
 80034e4:	237f      	movs	r3, #127	; 0x7f
 80034e6:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin|GPIO_1_Pin|en_vlv0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	2301      	movs	r3, #1
 80034ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4619      	mov	r1, r3
 80034fa:	486a      	ldr	r0, [pc, #424]	; (80036a4 <MX_GPIO_Init+0x2e4>)
 80034fc:	f006 ffae 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv3_Pin en_vlv2_Pin en_vlv1_Pin LED0_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = en_vlv3_Pin|en_vlv2_Pin|en_vlv1_Pin|LED0_Pin
 8003500:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8003504:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	4619      	mov	r1, r3
 8003518:	4863      	ldr	r0, [pc, #396]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 800351a:	f006 ff9f 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall1A_Pin e_hall1B_Pin e_hall1C_Pin adc0_eoc_Pin */
  GPIO_InitStruct.Pin = e_hall1A_Pin|e_hall1B_Pin|e_hall1C_Pin|adc0_eoc_Pin;
 800351e:	2317      	movs	r3, #23
 8003520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	f107 031c 	add.w	r3, r7, #28
 800352e:	4619      	mov	r1, r3
 8003530:	485e      	ldr	r0, [pc, #376]	; (80036ac <MX_GPIO_Init+0x2ec>)
 8003532:	f006 ff93 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cs_Pin mtr0_inB1_Pin */
  GPIO_InitStruct.Pin = adc0_cs_Pin|mtr0_inB1_Pin;
 8003536:	f640 0308 	movw	r3, #2056	; 0x808
 800353a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353c:	2301      	movs	r3, #1
 800353e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	4619      	mov	r1, r3
 800354e:	4857      	ldr	r0, [pc, #348]	; (80036ac <MX_GPIO_Init+0x2ec>)
 8003550:	f006 ff84 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : adc0_cnvst_Pin mtr0_inB0_Pin mtr0_inA0_Pin mtr0_inA1_Pin
                           mtr3_in0_Pin */
  GPIO_InitStruct.Pin = adc0_cnvst_Pin|mtr0_inB0_Pin|mtr0_inA0_Pin|mtr0_inA1_Pin
 8003554:	f641 6310 	movw	r3, #7696	; 0x1e10
 8003558:	61fb      	str	r3, [r7, #28]
                          |mtr3_in0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003566:	f107 031c 	add.w	r3, r7, #28
 800356a:	4619      	mov	r1, r3
 800356c:	484e      	ldr	r0, [pc, #312]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 800356e:	f006 ff75 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pin : adc1_eoc_Pin */
  GPIO_InitStruct.Pin = adc1_eoc_Pin;
 8003572:	2320      	movs	r3, #32
 8003574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc1_eoc_GPIO_Port, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4848      	ldr	r0, [pc, #288]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 8003586:	f006 ff69 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : adc1_cs_Pin adc1_cnvst_Pin adc2_cs_Pin tc4_cs_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = adc1_cs_Pin|adc1_cnvst_Pin|adc2_cs_Pin|tc4_cs_Pin
 800358a:	f241 4307 	movw	r3, #5127	; 0x1407
 800358e:	61fb      	str	r3, [r7, #28]
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	2301      	movs	r3, #1
 8003592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	4619      	mov	r1, r3
 80035a2:	4843      	ldr	r0, [pc, #268]	; (80036b0 <MX_GPIO_Init+0x2f0>)
 80035a4:	f006 ff5a 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pin : adc2_eoc_Pin */
  GPIO_InitStruct.Pin = adc2_eoc_Pin;
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(adc2_eoc_GPIO_Port, &GPIO_InitStruct);
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	4619      	mov	r1, r3
 80035ba:	483a      	ldr	r0, [pc, #232]	; (80036a4 <MX_GPIO_Init+0x2e4>)
 80035bc:	f006 ff4e 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : adc2_cnvst_Pin tc0_cs_Pin tc1_cs_Pin tc2_cs_Pin
                           tc3_cs_Pin */
  GPIO_InitStruct.Pin = adc2_cnvst_Pin|tc0_cs_Pin|tc1_cs_Pin|tc2_cs_Pin
 80035c0:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 80035c4:	61fb      	str	r3, [r7, #28]
                          |tc3_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	4832      	ldr	r0, [pc, #200]	; (80036a4 <MX_GPIO_Init+0x2e4>)
 80035da:	f006 ff3f 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin mtr2_in0_Pin mtr2_in1_Pin mtr2_in2_Pin
                           mtr3_in1_Pin mtr3_in2_Pin mtr1_inA0_Pin mtr1_inA1_Pin
                           mtr1_inB0_Pin mtr1_inB1_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|mtr2_in0_Pin|mtr2_in1_Pin|mtr2_in2_Pin
 80035de:	f640 739f 	movw	r3, #3999	; 0xf9f
 80035e2:	61fb      	str	r3, [r7, #28]
                          |mtr3_in1_Pin|mtr3_in2_Pin|mtr1_inA0_Pin|mtr1_inA1_Pin
                          |mtr1_inB0_Pin|mtr1_inB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	4619      	mov	r1, r3
 80035f6:	482f      	ldr	r0, [pc, #188]	; (80036b4 <MX_GPIO_Init+0x2f4>)
 80035f8:	f006 ff30 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : e_hall0A_Pin e_hall0B_Pin e_hall0C_Pin */
  GPIO_InitStruct.Pin = e_hall0A_Pin|e_hall0B_Pin|e_hall0C_Pin;
 80035fc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	4828      	ldr	r0, [pc, #160]	; (80036b4 <MX_GPIO_Init+0x2f4>)
 8003612:	f006 ff23 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr2_pwm0_Pin mtr2_pwm1_Pin mtr2_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr2_pwm0_Pin|mtr2_pwm1_Pin|mtr2_pwm2_Pin;
 8003616:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800361a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003628:	2303      	movs	r3, #3
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	4619      	mov	r1, r3
 8003632:	481d      	ldr	r0, [pc, #116]	; (80036a8 <MX_GPIO_Init+0x2e8>)
 8003634:	f006 ff12 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : mtr3_pwm0_Pin mtr3_pwm1_Pin mtr3_pwm2_Pin */
  GPIO_InitStruct.Pin = mtr3_pwm0_Pin|mtr3_pwm1_Pin|mtr3_pwm2_Pin;
 8003638:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800363c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800364a:	2301      	movs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	f107 031c 	add.w	r3, r7, #28
 8003652:	4619      	mov	r1, r3
 8003654:	4815      	ldr	r0, [pc, #84]	; (80036ac <MX_GPIO_Init+0x2ec>)
 8003656:	f006 ff01 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 800365a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003660:	2301      	movs	r3, #1
 8003662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4619      	mov	r1, r3
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <MX_GPIO_Init+0x2ec>)
 8003674:	f006 fef2 	bl	800a45c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003678:	23c0      	movs	r3, #192	; 0xc0
 800367a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003688:	2307      	movs	r3, #7
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	4619      	mov	r1, r3
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <MX_GPIO_Init+0x2f0>)
 8003694:	f006 fee2 	bl	800a45c <HAL_GPIO_Init>

}
 8003698:	bf00      	nop
 800369a:	3730      	adds	r7, #48	; 0x30
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40020400 	.word	0x40020400
 80036b4:	40020c00 	.word	0x40020c00

080036b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036bc:	b672      	cpsid	i
}
 80036be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <Error_Handler+0x8>
	...

080036c4 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036ca:	b672      	cpsid	i
}
 80036cc:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 80036ce:	f44f 73b3 	mov.w	r3, #358	; 0x166
 80036d2:	4a95      	ldr	r2, [pc, #596]	; (8003928 <read_nonvolatile_variables+0x264>)
 80036d4:	2100      	movs	r1, #0
 80036d6:	4895      	ldr	r0, [pc, #596]	; (800392c <read_nonvolatile_variables+0x268>)
 80036d8:	f006 f8af 	bl	800983a <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <read_nonvolatile_variables+0x264>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <read_nonvolatile_variables+0x24>
		return 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e238      	b.n	8003b5a <read_nonvolatile_variables+0x496>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 80036e8:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <read_nonvolatile_variables+0x264>)
 80036ea:	785b      	ldrb	r3, [r3, #1]
 80036ec:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 80036ee:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <read_nonvolatile_variables+0x264>)
 80036f0:	789b      	ldrb	r3, [r3, #2]
 80036f2:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 80036f4:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fe:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8003930 <read_nonvolatile_variables+0x26c>
 8003702:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003708:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 800370c:	4b86      	ldr	r3, [pc, #536]	; (8003928 <read_nonvolatile_variables+0x264>)
 800370e:	78db      	ldrb	r3, [r3, #3]
 8003710:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8003718:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003722:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003930 <read_nonvolatile_variables+0x26c>
 8003726:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 800372a:	4b82      	ldr	r3, [pc, #520]	; (8003934 <read_nonvolatile_variables+0x270>)
 800372c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 8003730:	4b7d      	ldr	r3, [pc, #500]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003732:	795b      	ldrb	r3, [r3, #5]
 8003734:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 8003736:	4b7c      	ldr	r3, [pc, #496]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003738:	799b      	ldrb	r3, [r3, #6]
 800373a:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 800373c:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003746:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8003930 <read_nonvolatile_variables+0x26c>
 800374a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 800374e:	4b79      	ldr	r3, [pc, #484]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003750:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003754:	4b74      	ldr	r3, [pc, #464]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003756:	79db      	ldrb	r3, [r3, #7]
 8003758:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <read_nonvolatile_variables+0x264>)
 800375c:	7a1b      	ldrb	r3, [r3, #8]
 800375e:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003760:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376a:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003930 <read_nonvolatile_variables+0x26c>
 800376e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8003772:	4b70      	ldr	r3, [pc, #448]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003774:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8003778:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <read_nonvolatile_variables+0x264>)
 800377a:	7a5b      	ldrb	r3, [r3, #9]
 800377c:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003780:	7a9b      	ldrb	r3, [r3, #10]
 8003782:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8003784:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003930 <read_nonvolatile_variables+0x26c>
 8003792:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8003796:	4b67      	ldr	r3, [pc, #412]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003798:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 800379c:	4b62      	ldr	r3, [pc, #392]	; (8003928 <read_nonvolatile_variables+0x264>)
 800379e:	7adb      	ldrb	r3, [r3, #11]
 80037a0:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 80037a2:	4b61      	ldr	r3, [pc, #388]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037a4:	7b1b      	ldrb	r3, [r3, #12]
 80037a6:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 80037a8:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003930 <read_nonvolatile_variables+0x26c>
 80037b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 80037ba:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <read_nonvolatile_variables+0x270>)
 80037bc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037c2:	7b5b      	ldrb	r3, [r3, #13]
 80037c4:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037c8:	7b9b      	ldrb	r3, [r3, #14]
 80037ca:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 80037cc:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037d0:	7bdb      	ldrb	r3, [r3, #15]
 80037d2:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 80037d4:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037d8:	7c1b      	ldrb	r3, [r3, #16]
 80037da:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 80037dc:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003930 <read_nonvolatile_variables+0x26c>
 80037ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <read_nonvolatile_variables+0x270>)
 80037f0:	edc3 7a04 	vstr	s15, [r3, #16]
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80037f4:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037f6:	7c5b      	ldrb	r3, [r3, #17]
 80037f8:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 80037fa:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <read_nonvolatile_variables+0x264>)
 80037fc:	7c9b      	ldrb	r3, [r3, #18]
 80037fe:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8003800:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003804:	7cdb      	ldrb	r3, [r3, #19]
 8003806:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8003808:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <read_nonvolatile_variables+0x264>)
 800380c:	7d1b      	ldrb	r3, [r3, #20]
 800380e:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8003810:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800381a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003930 <read_nonvolatile_variables+0x26c>
 800381e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8003822:	4b44      	ldr	r3, [pc, #272]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003824:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003828:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <read_nonvolatile_variables+0x264>)
 800382a:	7d5b      	ldrb	r3, [r3, #21]
 800382c:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 800382e:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003830:	7d9b      	ldrb	r3, [r3, #22]
 8003832:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003834:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800383e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003842:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8003846:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003848:	edc3 7a08 	vstr	s15, [r3, #32]
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <read_nonvolatile_variables+0x264>)
 800384e:	7ddb      	ldrb	r3, [r3, #23]
 8003850:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8003852:	4b35      	ldr	r3, [pc, #212]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003854:	7e1b      	ldrb	r3, [r3, #24]
 8003856:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8003858:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003862:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003866:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <read_nonvolatile_variables+0x270>)
 800386c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003872:	7f5b      	ldrb	r3, [r3, #29]
 8003874:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8003876:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003878:	7f9b      	ldrb	r3, [r3, #30]
 800387a:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 800387c:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003886:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800388a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <read_nonvolatile_variables+0x270>)
 8003890:	edc3 7a07 	vstr	s15, [r3, #28]
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <read_nonvolatile_variables+0x264>)
 8003896:	7fdb      	ldrb	r3, [r3, #31]
 8003898:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <read_nonvolatile_variables+0x264>)
 800389c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a0:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 80038a2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 80038b4:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <read_nonvolatile_variables+0x270>)
 80038b6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	71fb      	strb	r3, [r7, #7]
 80038be:	e02c      	b.n	800391a <read_nonvolatile_variables+0x256>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3325      	adds	r3, #37	; 0x25
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <read_nonvolatile_variables+0x264>)
 80038c8:	5cd3      	ldrb	r3, [r2, r3]
 80038ca:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3326      	adds	r3, #38	; 0x26
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <read_nonvolatile_variables+0x264>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80038d8:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	3327      	adds	r3, #39	; 0x27
 80038e2:	4911      	ldr	r1, [pc, #68]	; (8003928 <read_nonvolatile_variables+0x264>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80038e8:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	330a      	adds	r3, #10
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	490d      	ldr	r1, [pc, #52]	; (8003928 <read_nonvolatile_variables+0x264>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80038f6:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003900:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003902:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003906:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <read_nonvolatile_variables+0x274>)
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	3301      	adds	r3, #1
 8003918:	71fb      	strb	r3, [r7, #7]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d9cf      	bls.n	80038c0 <read_nonvolatile_variables+0x1fc>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003920:	2300      	movs	r3, #0
 8003922:	71bb      	strb	r3, [r7, #6]
 8003924:	e037      	b.n	8003996 <read_nonvolatile_variables+0x2d2>
 8003926:	bf00      	nop
 8003928:	200020fc 	.word	0x200020fc
 800392c:	20002288 	.word	0x20002288
 8003930:	42c80000 	.word	0x42c80000
 8003934:	200005b4 	.word	0x200005b4
 8003938:	20000274 	.word	0x20000274
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800393c:	79bb      	ldrb	r3, [r7, #6]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	333d      	adds	r3, #61	; 0x3d
 8003942:	4a88      	ldr	r2, [pc, #544]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003944:	5cd3      	ldrb	r3, [r2, r3]
 8003946:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003948:	79bb      	ldrb	r3, [r7, #6]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	333e      	adds	r3, #62	; 0x3e
 800394e:	4a85      	ldr	r2, [pc, #532]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003954:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003958:	79bb      	ldrb	r3, [r7, #6]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	333f      	adds	r3, #63	; 0x3f
 800395e:	4981      	ldr	r1, [pc, #516]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8003964:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003966:	79bb      	ldrb	r3, [r7, #6]
 8003968:	3310      	adds	r3, #16
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	497d      	ldr	r1, [pc, #500]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8003972:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800397c:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 800397e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003982:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8003986:	4a78      	ldr	r2, [pc, #480]	; (8003b68 <read_nonvolatile_variables+0x4a4>)
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003990:	79bb      	ldrb	r3, [r7, #6]
 8003992:	3301      	adds	r3, #1
 8003994:	71bb      	strb	r3, [r7, #6]
 8003996:	79bb      	ldrb	r3, [r7, #6]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d9cf      	bls.n	800393c <read_nonvolatile_variables+0x278>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 800399c:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 800399e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <read_nonvolatile_variables+0x4a8>)
 80039a4:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 80039a6:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039a8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <read_nonvolatile_variables+0x4a8>)
 80039ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 80039b2:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039b4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80039b8:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80039c0:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 80039c2:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 80039c4:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039c6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80039ca:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 80039cc:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039d0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80039d4:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 80039d6:	4313      	orrs	r3, r2
 80039d8:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 80039dc:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 80039de:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039e0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80039e4:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 80039e6:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80039ec:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 80039ee:	b21b      	sxth	r3, r3
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b21b      	sxth	r3, r3
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 80039f8:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 80039fa:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 80039fc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003a00:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a04:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003a08:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8003a0a:	b21b      	sxth	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	4b57      	ldr	r3, [pc, #348]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 8003a14:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8003a16:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a18:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8003a1c:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 8003a1e:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a26:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8003a28:	4b4e      	ldr	r3, [pc, #312]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a2e:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8003a30:	b21b      	sxth	r3, r3
 8003a32:	4313      	orrs	r3, r2
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 8003a3a:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003a3c:	4b49      	ldr	r3, [pc, #292]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a3e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003a42:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8003a44:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a46:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003a4a:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 8003a56:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a5e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a62:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003a66:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003a68:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003a70:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8003a72:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003a76:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003a7a:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8003a7c:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a86:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003b74 <read_nonvolatile_variables+0x4b0>
 8003a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <read_nonvolatile_variables+0x4b4>)
 8003a90:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	717b      	strb	r3, [r7, #5]
 8003a98:	e053      	b.n	8003b42 <read_nonvolatile_variables+0x47e>
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003a9a:	797b      	ldrb	r3, [r7, #5]
 8003a9c:	3332      	adds	r3, #50	; 0x32
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003aa6:	797b      	ldrb	r3, [r7, #5]
 8003aa8:	3332      	adds	r3, #50	; 0x32
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	021b      	lsls	r3, r3, #8
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003ab4:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003abe:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003ac0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003ac8:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <read_nonvolatile_variables+0x4b8>)
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003ad2:	797b      	ldrb	r3, [r7, #5]
 8003ad4:	332c      	adds	r3, #44	; 0x2c
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003ade:	797b      	ldrb	r3, [r7, #5]
 8003ae0:	332c      	adds	r3, #44	; 0x2c
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	021b      	lsls	r3, r3, #8
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003aec:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003af6:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8003af8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <read_nonvolatile_variables+0x4bc>)
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8003b0a:	797b      	ldrb	r3, [r7, #5]
 8003b0c:	3338      	adds	r3, #56	; 0x38
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] << 8));
 8003b16:	797b      	ldrb	r3, [r7, #5]
 8003b18:	3338      	adds	r3, #56	; 0x38
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
 8003b22:	021b      	lsls	r3, r3, #8
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8003b24:	ea41 0203 	orr.w	r2, r1, r3
 8003b28:	797b      	ldrb	r3, [r7, #5]
 8003b2a:	ee07 2a90 	vmov	s15, r2
 8003b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <read_nonvolatile_variables+0x4c0>)
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003b3c:	797b      	ldrb	r3, [r7, #5]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	717b      	strb	r3, [r7, #5]
 8003b42:	797b      	ldrb	r3, [r7, #5]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d9a8      	bls.n	8003a9a <read_nonvolatile_variables+0x3d6>
	}

	// Autosequence automatic abort enable
	autosequence.enable_auto_aborts = nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR];
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <read_nonvolatile_variables+0x4a0>)
 8003b4a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <read_nonvolatile_variables+0x4ac>)
 8003b50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  __ASM volatile ("cpsie i" : : : "memory");
 8003b54:	b662      	cpsie	i
}
 8003b56:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM

	// Successful read
	return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200020fc 	.word	0x200020fc
 8003b68:	2000028c 	.word	0x2000028c
 8003b6c:	200005b4 	.word	0x200005b4
 8003b70:	2000065c 	.word	0x2000065c
 8003b74:	461c4000 	.word	0x461c4000
 8003b78:	20000310 	.word	0x20000310
 8003b7c:	20000294 	.word	0x20000294
 8003b80:	200002ac 	.word	0x200002ac
 8003b84:	200002c4 	.word	0x200002c4

08003b88 <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b8e:	b672      	cpsid	i
}
 8003b90:	bf00      	nop
	__disable_irq();  // Trying to stop a bug that corrupts NVM

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 8003b92:	4bcb      	ldr	r3, [pc, #812]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 8003b98:	4bca      	ldr	r3, [pc, #808]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003b9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b9e:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4bc3      	ldr	r3, [pc, #780]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003bb4:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 8003bb6:	4bc3      	ldr	r3, [pc, #780]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003bb8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003bbc:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc8:	ee17 3a90 	vmov	r3, s15
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4bba      	ldr	r3, [pc, #744]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003bd6:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8003bd8:	4bba      	ldr	r3, [pc, #744]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003bda:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003bde:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 3a90 	vmov	r3, s15
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4bb3      	ldr	r3, [pc, #716]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003bf4:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 8003bf6:	4bb3      	ldr	r3, [pc, #716]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003bfc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c08:	ee17 3a90 	vmov	r3, s15
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4baa      	ldr	r3, [pc, #680]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003c16:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8003c18:	4baa      	ldr	r3, [pc, #680]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003c1a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c1e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2a:	ee17 3a90 	vmov	r3, s15
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003c34:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 8003c36:	4ba3      	ldr	r3, [pc, #652]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003c38:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c3c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c48:	ee17 3a90 	vmov	r3, s15
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b9a      	ldr	r3, [pc, #616]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003c56:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8003c58:	4b9a      	ldr	r3, [pc, #616]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003c5a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003c5e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6a:	ee17 3a90 	vmov	r3, s15
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b93      	ldr	r3, [pc, #588]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003c74:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 8003c76:	4b93      	ldr	r3, [pc, #588]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003c78:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003c7c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c88:	ee17 3a90 	vmov	r3, s15
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b8a      	ldr	r3, [pc, #552]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003c96:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003c9a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003c9e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 3a90 	vmov	r3, s15
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003cb4:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 8003cb6:	4b83      	ldr	r3, [pc, #524]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003cb8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003cbc:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc8:	ee17 3a90 	vmov	r3, s15
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003cd6:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8003cd8:	4b7a      	ldr	r3, [pc, #488]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003cda:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003cde:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cea:	ee17 3a90 	vmov	r3, s15
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003cf4:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 8003cf6:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003cf8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003cfc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d08:	ee17 3a90 	vmov	r3, s15
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003d16:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 8003d18:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003d1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d1e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d2e:	793a      	ldrb	r2, [r7, #4]
 8003d30:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003d32:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 8003d34:	4b63      	ldr	r3, [pc, #396]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003d36:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d3a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d46:	ee17 3a90 	vmov	r3, s15
 8003d4a:	121b      	asrs	r3, r3, #8
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003d50:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003d54:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d58:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d64:	ee17 3a90 	vmov	r3, s15
 8003d68:	141b      	asrs	r3, r3, #16
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003d6e:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8003d70:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003d72:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d76:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d82:	ee17 3a90 	vmov	r3, s15
 8003d86:	161b      	asrs	r3, r3, #24
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003d8c:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 8003d8e:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003d90:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d94:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003da4:	793a      	ldrb	r2, [r7, #4]
 8003da6:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003da8:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 8003daa:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003dac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003db0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dbc:	ee17 3a90 	vmov	r3, s15
 8003dc0:	121b      	asrs	r3, r3, #8
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003dc6:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003dca:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003dce:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dda:	ee17 3a90 	vmov	r3, s15
 8003dde:	141b      	asrs	r3, r3, #16
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003de4:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 8003de6:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003de8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003dec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ec8 <save_nonvolatile_variables+0x340>
 8003df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003df8:	ee17 3a90 	vmov	r3, s15
 8003dfc:	161b      	asrs	r3, r3, #24
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003e02:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003e06:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e16:	ee17 3a90 	vmov	r3, s15
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003e20:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003e22:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003e24:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e34:	ee17 3a90 	vmov	r3, s15
 8003e38:	b21b      	sxth	r3, r3
 8003e3a:	121b      	asrs	r3, r3, #8
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003e42:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003e46:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003e4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e56:	ee17 3a90 	vmov	r3, s15
 8003e5a:	b21b      	sxth	r3, r3
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003e60:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8003e62:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003e64:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003e68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e74:	ee17 3a90 	vmov	r3, s15
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	121b      	asrs	r3, r3, #8
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003e82:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003e86:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e96:	ee17 3a90 	vmov	r3, s15
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <save_nonvolatile_variables+0x338>)
 8003ea0:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <save_nonvolatile_variables+0x33c>)
 8003ea4:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ea8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb4:	ee17 3a90 	vmov	r3, s15
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	121b      	asrs	r3, r3, #8
 8003ebc:	e006      	b.n	8003ecc <save_nonvolatile_variables+0x344>
 8003ebe:	bf00      	nop
 8003ec0:	200020fc 	.word	0x200020fc
 8003ec4:	200005b4 	.word	0x200005b4
 8003ec8:	42c80000 	.word	0x42c80000
 8003ecc:	b21b      	sxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b40      	ldr	r3, [pc, #256]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003ed2:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <save_nonvolatile_variables+0x450>)
 8003ed6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003eda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee6:	ee17 3a90 	vmov	r3, s15
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003ef0:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <save_nonvolatile_variables+0x450>)
 8003ef4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ef8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f04:	ee17 3a90 	vmov	r3, s15
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	121b      	asrs	r3, r3, #8
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003f12:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e055      	b.n	8003fc8 <save_nonvolatile_variables+0x440>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <save_nonvolatile_variables+0x454>)
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f34:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	3325      	adds	r3, #37	; 0x25
 8003f3e:	7939      	ldrb	r1, [r7, #4]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003f42:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	4a25      	ldr	r2, [pc, #148]	; (8003fdc <save_nonvolatile_variables+0x454>)
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f5c:	ee17 3a90 	vmov	r3, s15
 8003f60:	121a      	asrs	r2, r3, #8
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	3326      	adds	r3, #38	; 0x26
 8003f68:	b2d1      	uxtb	r1, r2
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003f6c:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <save_nonvolatile_variables+0x454>)
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f86:	ee17 3a90 	vmov	r3, s15
 8003f8a:	141a      	asrs	r2, r3, #16
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	3327      	adds	r3, #39	; 0x27
 8003f92:	b2d1      	uxtb	r1, r2
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003f96:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <save_nonvolatile_variables+0x454>)
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb0:	ee17 3a90 	vmov	r3, s15
 8003fb4:	161a      	asrs	r2, r3, #24
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	330a      	adds	r3, #10
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	b2d1      	uxtb	r1, r2
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <save_nonvolatile_variables+0x44c>)
 8003fc0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d9a6      	bls.n	8003f1c <save_nonvolatile_variables+0x394>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73bb      	strb	r3, [r7, #14]
 8003fd2:	e05b      	b.n	800408c <save_nonvolatile_variables+0x504>
 8003fd4:	200020fc 	.word	0x200020fc
 8003fd8:	200005b4 	.word	0x200005b4
 8003fdc:	20000274 	.word	0x20000274
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 8003fe0:	7bbb      	ldrb	r3, [r7, #14]
 8003fe2:	4a84      	ldr	r2, [pc, #528]	; (80041f4 <save_nonvolatile_variables+0x66c>)
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	edd3 7a00 	vldr	s15, [r3]
 8003fec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ff8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	333d      	adds	r3, #61	; 0x3d
 8004002:	7939      	ldrb	r1, [r7, #4]
 8004004:	4a7c      	ldr	r2, [pc, #496]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004006:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <save_nonvolatile_variables+0x66c>)
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	121a      	asrs	r2, r3, #8
 8004026:	7bbb      	ldrb	r3, [r7, #14]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	333e      	adds	r3, #62	; 0x3e
 800402c:	b2d1      	uxtb	r1, r2
 800402e:	4a72      	ldr	r2, [pc, #456]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004030:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	4a6f      	ldr	r2, [pc, #444]	; (80041f4 <save_nonvolatile_variables+0x66c>)
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404a:	ee17 3a90 	vmov	r3, s15
 800404e:	141a      	asrs	r2, r3, #16
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	333f      	adds	r3, #63	; 0x3f
 8004056:	b2d1      	uxtb	r1, r2
 8004058:	4a67      	ldr	r2, [pc, #412]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800405a:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <save_nonvolatile_variables+0x66c>)
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800406c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004074:	ee17 3a90 	vmov	r3, s15
 8004078:	161a      	asrs	r2, r3, #24
 800407a:	7bbb      	ldrb	r3, [r7, #14]
 800407c:	3310      	adds	r3, #16
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	b2d1      	uxtb	r1, r2
 8004082:	4a5d      	ldr	r2, [pc, #372]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004084:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	3301      	adds	r3, #1
 800408a:	73bb      	strb	r3, [r7, #14]
 800408c:	7bbb      	ldrb	r3, [r7, #14]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d9a6      	bls.n	8003fe0 <save_nonvolatile_variables+0x458>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 8004092:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <save_nonvolatile_variables+0x674>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <save_nonvolatile_variables+0x674>)
 80040a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b54      	ldr	r3, [pc, #336]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 0;
 80040ac:	4b54      	ldr	r3, [pc, #336]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 8;
 80040b8:	4b51      	ldr	r3, [pc, #324]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 16;
 80040c6:	4b4e      	ldr	r3, [pc, #312]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 24;
 80040d4:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	0e1b      	lsrs	r3, r3, #24
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040e4:	889b      	ldrh	r3, [r3, #4]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 80040f0:	4b43      	ldr	r3, [pc, #268]	; (8004200 <save_nonvolatile_variables+0x678>)
 80040f2:	889b      	ldrh	r3, [r3, #4]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80040fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <save_nonvolatile_variables+0x678>)
 8004104:	88db      	ldrh	r3, [r3, #6]
 8004106:	b29b      	uxth	r3, r3
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800410c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 8004110:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <save_nonvolatile_variables+0x678>)
 8004112:	88db      	ldrh	r3, [r3, #6]
 8004114:	b29b      	uxth	r3, r3
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800411e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_delay_ms;
 8004122:	4b37      	ldr	r3, [pc, #220]	; (8004200 <save_nonvolatile_variables+0x678>)
 8004124:	7a1b      	ldrb	r3, [r3, #8]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800412a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <save_nonvolatile_variables+0x678>)
 8004130:	895b      	ldrh	r3, [r3, #10]
 8004132:	b29b      	uxth	r3, r3
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 800413c:	4b30      	ldr	r3, [pc, #192]	; (8004200 <save_nonvolatile_variables+0x678>)
 800413e:	895b      	ldrh	r3, [r3, #10]
 8004140:	b29b      	uxth	r3, r3
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	b29b      	uxth	r3, r3
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <save_nonvolatile_variables+0x678>)
 8004150:	899b      	ldrh	r3, [r3, #12]
 8004152:	b29b      	uxth	r3, r3
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004158:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <save_nonvolatile_variables+0x678>)
 800415e:	899b      	ldrh	r3, [r3, #12]
 8004160:	b29b      	uxth	r3, r3
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	b29b      	uxth	r3, r3
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <save_nonvolatile_variables+0x670>)
 800416a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <save_nonvolatile_variables+0x67c>)
 8004170:	edd3 7a00 	vldr	s15, [r3]
 8004174:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004208 <save_nonvolatile_variables+0x680>
 8004178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800417c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004180:	edc7 7a01 	vstr	s15, [r7, #4]
 8004184:	793a      	ldrb	r2, [r7, #4]
 8004186:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <save_nonvolatile_variables+0x670>)
 8004188:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <save_nonvolatile_variables+0x67c>)
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004208 <save_nonvolatile_variables+0x680>
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419e:	ee17 3a90 	vmov	r3, s15
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80041a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <save_nonvolatile_variables+0x67c>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004208 <save_nonvolatile_variables+0x680>
 80041b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 3a90 	vmov	r3, s15
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80041c8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <save_nonvolatile_variables+0x67c>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004208 <save_nonvolatile_variables+0x680>
 80041d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 3a90 	vmov	r3, s15
 80041e2:	0e1b      	lsrs	r3, r3, #24
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <save_nonvolatile_variables+0x670>)
 80041e8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80041ec:	2300      	movs	r3, #0
 80041ee:	737b      	strb	r3, [r7, #13]
 80041f0:	e08e      	b.n	8004310 <save_nonvolatile_variables+0x788>
 80041f2:	bf00      	nop
 80041f4:	2000028c 	.word	0x2000028c
 80041f8:	200020fc 	.word	0x200020fc
 80041fc:	200005b4 	.word	0x200005b4
 8004200:	2000065c 	.word	0x2000065c
 8004204:	20000310 	.word	0x20000310
 8004208:	461c4000 	.word	0x461c4000
		// Lower output voltage
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 0;
 800420c:	7b7b      	ldrb	r3, [r7, #13]
 800420e:	4a4f      	ldr	r2, [pc, #316]	; (800434c <save_nonvolatile_variables+0x7c4>)
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800421c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004224:	ee17 3a90 	vmov	r3, s15
 8004228:	b29a      	uxth	r2, r3
 800422a:	7b7b      	ldrb	r3, [r7, #13]
 800422c:	3332      	adds	r3, #50	; 0x32
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	b2d1      	uxtb	r1, r2
 8004232:	4a47      	ldr	r2, [pc, #284]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 8004234:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 8;
 8004236:	7b7b      	ldrb	r3, [r7, #13]
 8004238:	4a44      	ldr	r2, [pc, #272]	; (800434c <save_nonvolatile_variables+0x7c4>)
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 3a90 	vmov	r3, s15
 8004252:	b29b      	uxth	r3, r3
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29a      	uxth	r2, r3
 8004258:	7b7b      	ldrb	r3, [r7, #13]
 800425a:	3332      	adds	r3, #50	; 0x32
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	3301      	adds	r3, #1
 8004260:	b2d1      	uxtb	r1, r2
 8004262:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 8004264:	54d1      	strb	r1, [r2, r3]

		// Upper output voltage
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 0;
 8004266:	7b7b      	ldrb	r3, [r7, #13]
 8004268:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <save_nonvolatile_variables+0x7cc>)
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	edd3 7a00 	vldr	s15, [r3]
 8004272:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800427a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427e:	ee17 3a90 	vmov	r3, s15
 8004282:	b29a      	uxth	r2, r3
 8004284:	7b7b      	ldrb	r3, [r7, #13]
 8004286:	332c      	adds	r3, #44	; 0x2c
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	b2d1      	uxtb	r1, r2
 800428c:	4a30      	ldr	r2, [pc, #192]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 800428e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 8;
 8004290:	7b7b      	ldrb	r3, [r7, #13]
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <save_nonvolatile_variables+0x7cc>)
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	edd3 7a00 	vldr	s15, [r3]
 800429c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a8:	ee17 3a90 	vmov	r3, s15
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	7b7b      	ldrb	r3, [r7, #13]
 80042b4:	332c      	adds	r3, #44	; 0x2c
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	3301      	adds	r3, #1
 80042ba:	b2d1      	uxtb	r1, r2
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 80042be:	54d1      	strb	r1, [r2, r3]

		// Pressure range
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 0;
 80042c0:	7b7b      	ldrb	r3, [r7, #13]
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <save_nonvolatile_variables+0x7d0>)
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d0:	ee17 3a90 	vmov	r3, s15
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	7b7b      	ldrb	r3, [r7, #13]
 80042d8:	3338      	adds	r3, #56	; 0x38
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	b2d1      	uxtb	r1, r2
 80042de:	4a1c      	ldr	r2, [pc, #112]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 80042e0:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 8;
 80042e2:	7b7b      	ldrb	r3, [r7, #13]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <save_nonvolatile_variables+0x7d0>)
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f2:	ee17 3a90 	vmov	r3, s15
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	7b7b      	ldrb	r3, [r7, #13]
 80042fe:	3338      	adds	r3, #56	; 0x38
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	3301      	adds	r3, #1
 8004304:	b2d1      	uxtb	r1, r2
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 8004308:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	3301      	adds	r3, #1
 800430e:	737b      	strb	r3, [r7, #13]
 8004310:	7b7b      	ldrb	r3, [r7, #13]
 8004312:	2b05      	cmp	r3, #5
 8004314:	f67f af7a 	bls.w	800420c <save_nonvolatile_variables+0x684>
	}

	// Autosequence automatic abort enable
	nonvolatile_memory_buffer[NVM_AUTO_ABORT_ADDR] = autosequence.enable_auto_aborts;
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <save_nonvolatile_variables+0x7d4>)
 800431a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 8004322:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 8004326:	480e      	ldr	r0, [pc, #56]	; (8004360 <save_nonvolatile_variables+0x7d8>)
 8004328:	f005 faa0 	bl	800986c <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 800432c:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8004330:	4a07      	ldr	r2, [pc, #28]	; (8004350 <save_nonvolatile_variables+0x7c8>)
 8004332:	2100      	movs	r1, #0
 8004334:	480a      	ldr	r0, [pc, #40]	; (8004360 <save_nonvolatile_variables+0x7d8>)
 8004336:	f005 fa5e 	bl	80097f6 <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 800433a:	f7ff f9c3 	bl	80036c4 <read_nonvolatile_variables>
  __ASM volatile ("cpsie i" : : : "memory");
 800433e:	b662      	cpsie	i
}
 8004340:	bf00      	nop

	__enable_irq();  // Trying to stop a bug that corrupts NVM
	return 1;
 8004342:	2301      	movs	r3, #1
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000294 	.word	0x20000294
 8004350:	200020fc 	.word	0x200020fc
 8004354:	200002ac 	.word	0x200002ac
 8004358:	200002c4 	.word	0x200002c4
 800435c:	2000065c 	.word	0x2000065c
 8004360:	20002288 	.word	0x20002288

08004364 <pack_calibration_data>:
/// pack_calibration_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/calibration_file_generator.py on Mon Aug  9 00:35:42 2021

#include "pack_calibration_defines.h"

void pack_calibration_data(uint8_t* dst){
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	*(dst + 0) = CALIBRATION_ITEM_0;
 800436c:	4bc9      	ldr	r3, [pc, #804]	; (8004694 <pack_calibration_data+0x330>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800437e:	ee17 3a90 	vmov	r3, s15
 8004382:	b21b      	sxth	r3, r3
 8004384:	b2da      	uxtb	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = CALIBRATION_ITEM_1;
 800438a:	4bc2      	ldr	r3, [pc, #776]	; (8004694 <pack_calibration_data+0x330>)
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800439c:	ee17 3a90 	vmov	r3, s15
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	121b      	asrs	r3, r3, #8
 80043a4:	b21a      	sxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = CALIBRATION_ITEM_2;
 80043ae:	4bb9      	ldr	r3, [pc, #740]	; (8004694 <pack_calibration_data+0x330>)
 80043b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80043b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c0:	ee17 3a90 	vmov	r3, s15
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3302      	adds	r3, #2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = CALIBRATION_ITEM_3;
 80043ce:	4bb1      	ldr	r3, [pc, #708]	; (8004694 <pack_calibration_data+0x330>)
 80043d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80043d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e0:	ee17 3a90 	vmov	r3, s15
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	121b      	asrs	r3, r3, #8
 80043e8:	b21a      	sxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3303      	adds	r3, #3
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = CALIBRATION_ITEM_4;
 80043f2:	4ba8      	ldr	r3, [pc, #672]	; (8004694 <pack_calibration_data+0x330>)
 80043f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004404:	ee17 3a90 	vmov	r3, s15
 8004408:	b21a      	sxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = CALIBRATION_ITEM_5;
 8004412:	4ba0      	ldr	r3, [pc, #640]	; (8004694 <pack_calibration_data+0x330>)
 8004414:	edd3 7a02 	vldr	s15, [r3, #8]
 8004418:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800441c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004424:	ee17 3a90 	vmov	r3, s15
 8004428:	b21b      	sxth	r3, r3
 800442a:	121b      	asrs	r3, r3, #8
 800442c:	b21a      	sxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3305      	adds	r3, #5
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = CALIBRATION_ITEM_6;
 8004436:	4b97      	ldr	r3, [pc, #604]	; (8004694 <pack_calibration_data+0x330>)
 8004438:	edd3 7a03 	vldr	s15, [r3, #12]
 800443c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004448:	ee17 3a90 	vmov	r3, s15
 800444c:	b21a      	sxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3306      	adds	r3, #6
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = CALIBRATION_ITEM_7;
 8004456:	4b8f      	ldr	r3, [pc, #572]	; (8004694 <pack_calibration_data+0x330>)
 8004458:	edd3 7a03 	vldr	s15, [r3, #12]
 800445c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004468:	ee17 3a90 	vmov	r3, s15
 800446c:	b21b      	sxth	r3, r3
 800446e:	121b      	asrs	r3, r3, #8
 8004470:	b21a      	sxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3307      	adds	r3, #7
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = CALIBRATION_ITEM_8;
 800447a:	4b86      	ldr	r3, [pc, #536]	; (8004694 <pack_calibration_data+0x330>)
 800447c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004480:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800448c:	ee17 3a90 	vmov	r3, s15
 8004490:	b21a      	sxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3308      	adds	r3, #8
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = CALIBRATION_ITEM_9;
 800449a:	4b7e      	ldr	r3, [pc, #504]	; (8004694 <pack_calibration_data+0x330>)
 800449c:	edd3 7a04 	vldr	s15, [r3, #16]
 80044a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ac:	ee17 3a90 	vmov	r3, s15
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	121b      	asrs	r3, r3, #8
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3309      	adds	r3, #9
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = CALIBRATION_ITEM_10;
 80044be:	4b75      	ldr	r3, [pc, #468]	; (8004694 <pack_calibration_data+0x330>)
 80044c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80044c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d0:	ee17 3a90 	vmov	r3, s15
 80044d4:	b21a      	sxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	330a      	adds	r3, #10
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = CALIBRATION_ITEM_11;
 80044de:	4b6d      	ldr	r3, [pc, #436]	; (8004694 <pack_calibration_data+0x330>)
 80044e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80044e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f0:	ee17 3a90 	vmov	r3, s15
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	121b      	asrs	r3, r3, #8
 80044f8:	b21a      	sxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	330b      	adds	r3, #11
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = CALIBRATION_ITEM_12;
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <pack_calibration_data+0x334>)
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800450c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004514:	ee17 3a90 	vmov	r3, s15
 8004518:	b21a      	sxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	330c      	adds	r3, #12
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = CALIBRATION_ITEM_13;
 8004522:	4b5d      	ldr	r3, [pc, #372]	; (8004698 <pack_calibration_data+0x334>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800452c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004534:	ee17 3a90 	vmov	r3, s15
 8004538:	b21b      	sxth	r3, r3
 800453a:	121b      	asrs	r3, r3, #8
 800453c:	b21a      	sxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	330d      	adds	r3, #13
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = CALIBRATION_ITEM_14;
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <pack_calibration_data+0x334>)
 8004548:	edd3 7a01 	vldr	s15, [r3, #4]
 800454c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004558:	ee17 3a90 	vmov	r3, s15
 800455c:	b21a      	sxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	330e      	adds	r3, #14
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = CALIBRATION_ITEM_15;
 8004566:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <pack_calibration_data+0x334>)
 8004568:	edd3 7a01 	vldr	s15, [r3, #4]
 800456c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004578:	ee17 3a90 	vmov	r3, s15
 800457c:	b21b      	sxth	r3, r3
 800457e:	121b      	asrs	r3, r3, #8
 8004580:	b21a      	sxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	330f      	adds	r3, #15
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = CALIBRATION_ITEM_16;
 800458a:	4b43      	ldr	r3, [pc, #268]	; (8004698 <pack_calibration_data+0x334>)
 800458c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004590:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800459c:	ee17 3a90 	vmov	r3, s15
 80045a0:	b21a      	sxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3310      	adds	r3, #16
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = CALIBRATION_ITEM_17;
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <pack_calibration_data+0x334>)
 80045ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80045b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045bc:	ee17 3a90 	vmov	r3, s15
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	121b      	asrs	r3, r3, #8
 80045c4:	b21a      	sxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3311      	adds	r3, #17
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = CALIBRATION_ITEM_18;
 80045ce:	4b32      	ldr	r3, [pc, #200]	; (8004698 <pack_calibration_data+0x334>)
 80045d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80045d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 3a90 	vmov	r3, s15
 80045e4:	b21a      	sxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3312      	adds	r3, #18
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = CALIBRATION_ITEM_19;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <pack_calibration_data+0x334>)
 80045f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80045f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004600:	ee17 3a90 	vmov	r3, s15
 8004604:	b21b      	sxth	r3, r3
 8004606:	121b      	asrs	r3, r3, #8
 8004608:	b21a      	sxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3313      	adds	r3, #19
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = CALIBRATION_ITEM_20;
 8004612:	4b21      	ldr	r3, [pc, #132]	; (8004698 <pack_calibration_data+0x334>)
 8004614:	edd3 7a04 	vldr	s15, [r3, #16]
 8004618:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800461c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004624:	ee17 3a90 	vmov	r3, s15
 8004628:	b21a      	sxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3314      	adds	r3, #20
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = CALIBRATION_ITEM_21;
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <pack_calibration_data+0x334>)
 8004634:	edd3 7a04 	vldr	s15, [r3, #16]
 8004638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800463c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004644:	ee17 3a90 	vmov	r3, s15
 8004648:	b21b      	sxth	r3, r3
 800464a:	121b      	asrs	r3, r3, #8
 800464c:	b21a      	sxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3315      	adds	r3, #21
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = CALIBRATION_ITEM_22;
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <pack_calibration_data+0x334>)
 8004658:	edd3 7a05 	vldr	s15, [r3, #20]
 800465c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004668:	ee17 3a90 	vmov	r3, s15
 800466c:	b21a      	sxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3316      	adds	r3, #22
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = CALIBRATION_ITEM_23;
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <pack_calibration_data+0x334>)
 8004678:	edd3 7a05 	vldr	s15, [r3, #20]
 800467c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004688:	ee17 3a90 	vmov	r3, s15
 800468c:	b21b      	sxth	r3, r3
 800468e:	121b      	asrs	r3, r3, #8
 8004690:	e004      	b.n	800469c <pack_calibration_data+0x338>
 8004692:	bf00      	nop
 8004694:	20000294 	.word	0x20000294
 8004698:	200002ac 	.word	0x200002ac
 800469c:	b21a      	sxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3317      	adds	r3, #23
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = CALIBRATION_ITEM_24;
 80046a6:	4b51      	ldr	r3, [pc, #324]	; (80047ec <pack_calibration_data+0x488>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	b21a      	sxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3318      	adds	r3, #24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = CALIBRATION_ITEM_25;
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <pack_calibration_data+0x488>)
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046c8:	ee17 3a90 	vmov	r3, s15
 80046cc:	b21b      	sxth	r3, r3
 80046ce:	121b      	asrs	r3, r3, #8
 80046d0:	b21a      	sxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3319      	adds	r3, #25
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = CALIBRATION_ITEM_26;
 80046da:	4b44      	ldr	r3, [pc, #272]	; (80047ec <pack_calibration_data+0x488>)
 80046dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e4:	ee17 3a90 	vmov	r3, s15
 80046e8:	b21a      	sxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	331a      	adds	r3, #26
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = CALIBRATION_ITEM_27;
 80046f2:	4b3e      	ldr	r3, [pc, #248]	; (80047ec <pack_calibration_data+0x488>)
 80046f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	b21b      	sxth	r3, r3
 8004702:	121b      	asrs	r3, r3, #8
 8004704:	b21a      	sxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	331b      	adds	r3, #27
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = CALIBRATION_ITEM_28;
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <pack_calibration_data+0x488>)
 8004710:	edd3 7a02 	vldr	s15, [r3, #8]
 8004714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004718:	ee17 3a90 	vmov	r3, s15
 800471c:	b21a      	sxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	331c      	adds	r3, #28
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = CALIBRATION_ITEM_29;
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <pack_calibration_data+0x488>)
 8004728:	edd3 7a02 	vldr	s15, [r3, #8]
 800472c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	b21b      	sxth	r3, r3
 8004736:	121b      	asrs	r3, r3, #8
 8004738:	b21a      	sxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	331d      	adds	r3, #29
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = CALIBRATION_ITEM_30;
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <pack_calibration_data+0x488>)
 8004744:	edd3 7a03 	vldr	s15, [r3, #12]
 8004748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800474c:	ee17 3a90 	vmov	r3, s15
 8004750:	b21a      	sxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	331e      	adds	r3, #30
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = CALIBRATION_ITEM_31;
 800475a:	4b24      	ldr	r3, [pc, #144]	; (80047ec <pack_calibration_data+0x488>)
 800475c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004764:	ee17 3a90 	vmov	r3, s15
 8004768:	b21b      	sxth	r3, r3
 800476a:	121b      	asrs	r3, r3, #8
 800476c:	b21a      	sxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	331f      	adds	r3, #31
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = CALIBRATION_ITEM_32;
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <pack_calibration_data+0x488>)
 8004778:	edd3 7a04 	vldr	s15, [r3, #16]
 800477c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004780:	ee17 3a90 	vmov	r3, s15
 8004784:	b21a      	sxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3320      	adds	r3, #32
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = CALIBRATION_ITEM_33;
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <pack_calibration_data+0x488>)
 8004790:	edd3 7a04 	vldr	s15, [r3, #16]
 8004794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004798:	ee17 3a90 	vmov	r3, s15
 800479c:	b21b      	sxth	r3, r3
 800479e:	121b      	asrs	r3, r3, #8
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3321      	adds	r3, #33	; 0x21
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = CALIBRATION_ITEM_34;
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <pack_calibration_data+0x488>)
 80047ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80047b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047b4:	ee17 3a90 	vmov	r3, s15
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3322      	adds	r3, #34	; 0x22
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = CALIBRATION_ITEM_35;
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <pack_calibration_data+0x488>)
 80047c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80047c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047cc:	ee17 3a90 	vmov	r3, s15
 80047d0:	b21b      	sxth	r3, r3
 80047d2:	121b      	asrs	r3, r3, #8
 80047d4:	b21a      	sxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3323      	adds	r3, #35	; 0x23
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	200002c4 	.word	0x200002c4

080047f0 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Wed Aug 18 16:48:35 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 80047f8:	4bc3      	ldr	r3, [pc, #780]	; (8004b08 <pack_telem_data+0x318>)
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 8004800:	4bc2      	ldr	r3, [pc, #776]	; (8004b0c <pack_telem_data+0x31c>)
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004b10 <pack_telem_data+0x320>
 800480a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004812:	ee17 3a90 	vmov	r3, s15
 8004816:	b21a      	sxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 8004820:	4bba      	ldr	r3, [pc, #744]	; (8004b0c <pack_telem_data+0x31c>)
 8004822:	edd3 7a00 	vldr	s15, [r3]
 8004826:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8004b10 <pack_telem_data+0x320>
 800482a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800482e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004832:	ee17 3a90 	vmov	r3, s15
 8004836:	b21b      	sxth	r3, r3
 8004838:	121b      	asrs	r3, r3, #8
 800483a:	b21a      	sxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3302      	adds	r3, #2
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 8004844:	4bb3      	ldr	r3, [pc, #716]	; (8004b14 <pack_telem_data+0x324>)
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004b10 <pack_telem_data+0x320>
 800484e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004856:	ee17 3a90 	vmov	r3, s15
 800485a:	b21a      	sxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3303      	adds	r3, #3
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 8004864:	4bab      	ldr	r3, [pc, #684]	; (8004b14 <pack_telem_data+0x324>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004b10 <pack_telem_data+0x320>
 800486e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004876:	ee17 3a90 	vmov	r3, s15
 800487a:	b21b      	sxth	r3, r3
 800487c:	121b      	asrs	r3, r3, #8
 800487e:	b21a      	sxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 8004888:	4ba3      	ldr	r3, [pc, #652]	; (8004b18 <pack_telem_data+0x328>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3305      	adds	r3, #5
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 8004894:	4ba0      	ldr	r3, [pc, #640]	; (8004b18 <pack_telem_data+0x328>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0a1a      	lsrs	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3306      	adds	r3, #6
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 80048a2:	4b9d      	ldr	r3, [pc, #628]	; (8004b18 <pack_telem_data+0x328>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0c1a      	lsrs	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3307      	adds	r3, #7
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 80048b0:	4b99      	ldr	r3, [pc, #612]	; (8004b18 <pack_telem_data+0x328>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e1a      	lsrs	r2, r3, #24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3308      	adds	r3, #8
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 80048be:	4b97      	ldr	r3, [pc, #604]	; (8004b1c <pack_telem_data+0x32c>)
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004b10 <pack_telem_data+0x320>
 80048c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048d0:	ee17 3a90 	vmov	r3, s15
 80048d4:	b21a      	sxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3309      	adds	r3, #9
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 80048de:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <pack_telem_data+0x32c>)
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004b10 <pack_telem_data+0x320>
 80048e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f0:	ee17 3a90 	vmov	r3, s15
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	121b      	asrs	r3, r3, #8
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	330a      	adds	r3, #10
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 8004902:	4b87      	ldr	r3, [pc, #540]	; (8004b20 <pack_telem_data+0x330>)
 8004904:	edd3 7a00 	vldr	s15, [r3]
 8004908:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004b10 <pack_telem_data+0x320>
 800490c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004914:	ee17 3a90 	vmov	r3, s15
 8004918:	b21a      	sxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	330b      	adds	r3, #11
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 8004922:	4b7f      	ldr	r3, [pc, #508]	; (8004b20 <pack_telem_data+0x330>)
 8004924:	edd3 7a00 	vldr	s15, [r3]
 8004928:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004b10 <pack_telem_data+0x320>
 800492c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004934:	ee17 3a90 	vmov	r3, s15
 8004938:	b21b      	sxth	r3, r3
 800493a:	121b      	asrs	r3, r3, #8
 800493c:	b21a      	sxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	330c      	adds	r3, #12
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 8004946:	4b77      	ldr	r3, [pc, #476]	; (8004b24 <pack_telem_data+0x334>)
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004b10 <pack_telem_data+0x320>
 8004950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	330d      	adds	r3, #13
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	edc7 7a00 	vstr	s15, [r7]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 8004966:	4b70      	ldr	r3, [pc, #448]	; (8004b28 <pack_telem_data+0x338>)
 8004968:	edd3 7a00 	vldr	s15, [r3]
 800496c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004b10 <pack_telem_data+0x320>
 8004970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	330e      	adds	r3, #14
 8004978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497c:	edc7 7a00 	vstr	s15, [r7]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	330f      	adds	r3, #15
 800498a:	4a68      	ldr	r2, [pc, #416]	; (8004b2c <pack_telem_data+0x33c>)
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 8004990:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <pack_telem_data+0x340>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3310      	adds	r3, #16
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <pack_telem_data+0x340>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0a1a      	lsrs	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3311      	adds	r3, #17
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 80049aa:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <pack_telem_data+0x340>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	0c1a      	lsrs	r2, r3, #16
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3312      	adds	r3, #18
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 80049b8:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <pack_telem_data+0x340>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0e1a      	lsrs	r2, r3, #24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3313      	adds	r3, #19
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 80049c6:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <pack_telem_data+0x344>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d8:	edc7 7a00 	vstr	s15, [r7]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3314      	adds	r3, #20
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 80049e6:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <pack_telem_data+0x344>)
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f8:	ee17 3a90 	vmov	r3, s15
 80049fc:	121a      	asrs	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3315      	adds	r3, #21
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 8004a06:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <pack_telem_data+0x344>)
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a18:	ee17 3a90 	vmov	r3, s15
 8004a1c:	141a      	asrs	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3316      	adds	r3, #22
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 8004a26:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <pack_telem_data+0x344>)
 8004a28:	edd3 7a00 	vldr	s15, [r3]
 8004a2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a38:	ee17 3a90 	vmov	r3, s15
 8004a3c:	161a      	asrs	r2, r3, #24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3317      	adds	r3, #23
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 8004a46:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <pack_telem_data+0x344>)
 8004a48:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a58:	edc7 7a00 	vstr	s15, [r7]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <pack_telem_data+0x344>)
 8004a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a78:	ee17 3a90 	vmov	r3, s15
 8004a7c:	121a      	asrs	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3319      	adds	r3, #25
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8004a86:	4b2b      	ldr	r3, [pc, #172]	; (8004b34 <pack_telem_data+0x344>)
 8004a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a98:	ee17 3a90 	vmov	r3, s15
 8004a9c:	141a      	asrs	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	331a      	adds	r3, #26
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <pack_telem_data+0x344>)
 8004aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab8:	ee17 3a90 	vmov	r3, s15
 8004abc:	161a      	asrs	r2, r3, #24
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	331b      	adds	r3, #27
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <pack_telem_data+0x344>)
 8004ac8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004acc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	edc7 7a00 	vstr	s15, [r7]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	331c      	adds	r3, #28
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <pack_telem_data+0x344>)
 8004ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af8:	ee17 3a90 	vmov	r3, s15
 8004afc:	121a      	asrs	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	331d      	adds	r3, #29
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e017      	b.n	8004b38 <pack_telem_data+0x348>
 8004b08:	200002dc 	.word	0x200002dc
 8004b0c:	200002e0 	.word	0x200002e0
 8004b10:	42c80000 	.word	0x42c80000
 8004b14:	200002e4 	.word	0x200002e4
 8004b18:	200002e8 	.word	0x200002e8
 8004b1c:	200002ec 	.word	0x200002ec
 8004b20:	200002f0 	.word	0x200002f0
 8004b24:	200002f4 	.word	0x200002f4
 8004b28:	200002f8 	.word	0x200002f8
 8004b2c:	200002fc 	.word	0x200002fc
 8004b30:	20000300 	.word	0x20000300
 8004b34:	20000324 	.word	0x20000324
	*(dst + 30) = TELEM_ITEM_30;
 8004b38:	4bcf      	ldr	r3, [pc, #828]	; (8004e78 <pack_telem_data+0x688>)
 8004b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4a:	ee17 3a90 	vmov	r3, s15
 8004b4e:	141a      	asrs	r2, r3, #16
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	331e      	adds	r3, #30
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 8004b58:	4bc7      	ldr	r3, [pc, #796]	; (8004e78 <pack_telem_data+0x688>)
 8004b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b6a:	ee17 3a90 	vmov	r3, s15
 8004b6e:	161a      	asrs	r2, r3, #24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	331f      	adds	r3, #31
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 8004b78:	4bbf      	ldr	r3, [pc, #764]	; (8004e78 <pack_telem_data+0x688>)
 8004b7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b8a:	edc7 7a00 	vstr	s15, [r7]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3320      	adds	r3, #32
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 8004b98:	4bb7      	ldr	r3, [pc, #732]	; (8004e78 <pack_telem_data+0x688>)
 8004b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004baa:	ee17 3a90 	vmov	r3, s15
 8004bae:	121a      	asrs	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3321      	adds	r3, #33	; 0x21
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 8004bb8:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <pack_telem_data+0x688>)
 8004bba:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bca:	ee17 3a90 	vmov	r3, s15
 8004bce:	141a      	asrs	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3322      	adds	r3, #34	; 0x22
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 8004bd8:	4ba7      	ldr	r3, [pc, #668]	; (8004e78 <pack_telem_data+0x688>)
 8004bda:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bea:	ee17 3a90 	vmov	r3, s15
 8004bee:	161a      	asrs	r2, r3, #24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3323      	adds	r3, #35	; 0x23
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 8004bf8:	4b9f      	ldr	r3, [pc, #636]	; (8004e78 <pack_telem_data+0x688>)
 8004bfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0a:	edc7 7a00 	vstr	s15, [r7]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3324      	adds	r3, #36	; 0x24
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 8004c18:	4b97      	ldr	r3, [pc, #604]	; (8004e78 <pack_telem_data+0x688>)
 8004c1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c2a:	ee17 3a90 	vmov	r3, s15
 8004c2e:	121a      	asrs	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3325      	adds	r3, #37	; 0x25
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <pack_telem_data+0x688>)
 8004c3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c4a:	ee17 3a90 	vmov	r3, s15
 8004c4e:	141a      	asrs	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3326      	adds	r3, #38	; 0x26
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8004c58:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <pack_telem_data+0x688>)
 8004c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c6a:	ee17 3a90 	vmov	r3, s15
 8004c6e:	161a      	asrs	r2, r3, #24
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3327      	adds	r3, #39	; 0x27
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8004c78:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <pack_telem_data+0x688>)
 8004c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c8a:	edc7 7a00 	vstr	s15, [r7]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3328      	adds	r3, #40	; 0x28
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8004c98:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <pack_telem_data+0x688>)
 8004c9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004caa:	ee17 3a90 	vmov	r3, s15
 8004cae:	121a      	asrs	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3329      	adds	r3, #41	; 0x29
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <pack_telem_data+0x688>)
 8004cba:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cca:	ee17 3a90 	vmov	r3, s15
 8004cce:	141a      	asrs	r2, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	332a      	adds	r3, #42	; 0x2a
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8004cd8:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <pack_telem_data+0x688>)
 8004cda:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cea:	ee17 3a90 	vmov	r3, s15
 8004cee:	161a      	asrs	r2, r3, #24
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	332b      	adds	r3, #43	; 0x2b
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8004cf8:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <pack_telem_data+0x68c>)
 8004cfa:	edd3 7a00 	vldr	s15, [r3]
 8004cfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	332c      	adds	r3, #44	; 0x2c
 8004d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0e:	edc7 7a00 	vstr	s15, [r7]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8004d18:	4b58      	ldr	r3, [pc, #352]	; (8004e7c <pack_telem_data+0x68c>)
 8004d1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	332d      	adds	r3, #45	; 0x2d
 8004d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2e:	edc7 7a00 	vstr	s15, [r7]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8004d38:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <pack_telem_data+0x68c>)
 8004d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	332e      	adds	r3, #46	; 0x2e
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	edc7 7a00 	vstr	s15, [r7]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8004d58:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <pack_telem_data+0x68c>)
 8004d5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	332f      	adds	r3, #47	; 0x2f
 8004d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6e:	edc7 7a00 	vstr	s15, [r7]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <pack_telem_data+0x68c>)
 8004d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3330      	adds	r3, #48	; 0x30
 8004d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8e:	edc7 7a00 	vstr	s15, [r7]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <pack_telem_data+0x68c>)
 8004d9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3331      	adds	r3, #49	; 0x31
 8004daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dae:	edc7 7a00 	vstr	s15, [r7]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <pack_telem_data+0x68c>)
 8004dba:	edd3 7a06 	vldr	s15, [r3, #24]
 8004dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3332      	adds	r3, #50	; 0x32
 8004dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dce:	edc7 7a00 	vstr	s15, [r7]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <pack_telem_data+0x68c>)
 8004dda:	edd3 7a07 	vldr	s15, [r3, #28]
 8004dde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3333      	adds	r3, #51	; 0x33
 8004dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dee:	edc7 7a00 	vstr	s15, [r7]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <pack_telem_data+0x68c>)
 8004dfa:	edd3 7a08 	vldr	s15, [r3, #32]
 8004dfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3334      	adds	r3, #52	; 0x34
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	edc7 7a00 	vstr	s15, [r7]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <pack_telem_data+0x690>)
 8004e1a:	edd3 7a00 	vldr	s15, [r3]
 8004e1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3335      	adds	r3, #53	; 0x35
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	edc7 7a00 	vstr	s15, [r7]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <pack_telem_data+0x690>)
 8004e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3336      	adds	r3, #54	; 0x36
 8004e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4e:	edc7 7a00 	vstr	s15, [r7]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <pack_telem_data+0x690>)
 8004e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3337      	adds	r3, #55	; 0x37
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	edc7 7a00 	vstr	s15, [r7]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	e005      	b.n	8004e84 <pack_telem_data+0x694>
 8004e78:	20000324 	.word	0x20000324
 8004e7c:	2000033c 	.word	0x2000033c
 8004e80:	20000360 	.word	0x20000360
 8004e84:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8004e86:	4bc7      	ldr	r3, [pc, #796]	; (80051a4 <pack_telem_data+0x9b4>)
 8004e88:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3338      	adds	r3, #56	; 0x38
 8004e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9c:	edc7 7a00 	vstr	s15, [r7]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8004ea6:	4bbf      	ldr	r3, [pc, #764]	; (80051a4 <pack_telem_data+0x9b4>)
 8004ea8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004eac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3339      	adds	r3, #57	; 0x39
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	edc7 7a00 	vstr	s15, [r7]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8004ec6:	4bb7      	ldr	r3, [pc, #732]	; (80051a4 <pack_telem_data+0x9b4>)
 8004ec8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ecc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	333a      	adds	r3, #58	; 0x3a
 8004ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004edc:	edc7 7a00 	vstr	s15, [r7]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8004ee6:	4baf      	ldr	r3, [pc, #700]	; (80051a4 <pack_telem_data+0x9b4>)
 8004ee8:	edd3 7a06 	vldr	s15, [r3, #24]
 8004eec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	333b      	adds	r3, #59	; 0x3b
 8004ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efc:	edc7 7a00 	vstr	s15, [r7]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8004f06:	4ba7      	ldr	r3, [pc, #668]	; (80051a4 <pack_telem_data+0x9b4>)
 8004f08:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	333c      	adds	r3, #60	; 0x3c
 8004f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1c:	edc7 7a00 	vstr	s15, [r7]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8004f26:	4b9f      	ldr	r3, [pc, #636]	; (80051a4 <pack_telem_data+0x9b4>)
 8004f28:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	333d      	adds	r3, #61	; 0x3d
 8004f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3c:	edc7 7a00 	vstr	s15, [r7]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8004f46:	4b98      	ldr	r3, [pc, #608]	; (80051a8 <pack_telem_data+0x9b8>)
 8004f48:	edd3 7a00 	vldr	s15, [r3]
 8004f4c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80051ac <pack_telem_data+0x9bc>
 8004f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f58:	ee17 3a90 	vmov	r3, s15
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	333e      	adds	r3, #62	; 0x3e
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8004f66:	4b90      	ldr	r3, [pc, #576]	; (80051a8 <pack_telem_data+0x9b8>)
 8004f68:	edd3 7a00 	vldr	s15, [r3]
 8004f6c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80051ac <pack_telem_data+0x9bc>
 8004f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f78:	ee17 3a90 	vmov	r3, s15
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	333f      	adds	r3, #63	; 0x3f
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8004f8a:	4b87      	ldr	r3, [pc, #540]	; (80051a8 <pack_telem_data+0x9b8>)
 8004f8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f90:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80051ac <pack_telem_data+0x9bc>
 8004f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9c:	ee17 3a90 	vmov	r3, s15
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3340      	adds	r3, #64	; 0x40
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8004faa:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <pack_telem_data+0x9b8>)
 8004fac:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fb0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80051ac <pack_telem_data+0x9bc>
 8004fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbc:	ee17 3a90 	vmov	r3, s15
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3341      	adds	r3, #65	; 0x41
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8004fce:	4b76      	ldr	r3, [pc, #472]	; (80051a8 <pack_telem_data+0x9b8>)
 8004fd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fd4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80051ac <pack_telem_data+0x9bc>
 8004fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe0:	ee17 3a90 	vmov	r3, s15
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3342      	adds	r3, #66	; 0x42
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8004fee:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <pack_telem_data+0x9b8>)
 8004ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ff4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80051ac <pack_telem_data+0x9bc>
 8004ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005000:	ee17 3a90 	vmov	r3, s15
 8005004:	b29b      	uxth	r3, r3
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3343      	adds	r3, #67	; 0x43
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8005012:	4b65      	ldr	r3, [pc, #404]	; (80051a8 <pack_telem_data+0x9b8>)
 8005014:	edd3 7a03 	vldr	s15, [r3, #12]
 8005018:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80051ac <pack_telem_data+0x9bc>
 800501c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005024:	ee17 3a90 	vmov	r3, s15
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3344      	adds	r3, #68	; 0x44
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 8005032:	4b5d      	ldr	r3, [pc, #372]	; (80051a8 <pack_telem_data+0x9b8>)
 8005034:	edd3 7a03 	vldr	s15, [r3, #12]
 8005038:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80051ac <pack_telem_data+0x9bc>
 800503c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005044:	ee17 3a90 	vmov	r3, s15
 8005048:	b29b      	uxth	r3, r3
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b29a      	uxth	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3345      	adds	r3, #69	; 0x45
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 8005056:	4b54      	ldr	r3, [pc, #336]	; (80051a8 <pack_telem_data+0x9b8>)
 8005058:	edd3 7a04 	vldr	s15, [r3, #16]
 800505c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80051ac <pack_telem_data+0x9bc>
 8005060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005068:	ee17 3a90 	vmov	r3, s15
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3346      	adds	r3, #70	; 0x46
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <pack_telem_data+0x9b8>)
 8005078:	edd3 7a04 	vldr	s15, [r3, #16]
 800507c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80051ac <pack_telem_data+0x9bc>
 8005080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	ee17 3a90 	vmov	r3, s15
 800508c:	b29b      	uxth	r3, r3
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3347      	adds	r3, #71	; 0x47
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 800509a:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <pack_telem_data+0x9c0>)
 800509c:	edd3 7a00 	vldr	s15, [r3]
 80050a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ac:	ee17 3a90 	vmov	r3, s15
 80050b0:	b21a      	sxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3348      	adds	r3, #72	; 0x48
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <pack_telem_data+0x9c0>)
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050cc:	ee17 3a90 	vmov	r3, s15
 80050d0:	b21b      	sxth	r3, r3
 80050d2:	121b      	asrs	r3, r3, #8
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3349      	adds	r3, #73	; 0x49
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 80050de:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <pack_telem_data+0x9c0>)
 80050e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80050e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f0:	ee17 3a90 	vmov	r3, s15
 80050f4:	b21a      	sxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	334a      	adds	r3, #74	; 0x4a
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <pack_telem_data+0x9c0>)
 8005100:	edd3 7a01 	vldr	s15, [r3, #4]
 8005104:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800510c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005110:	ee17 3a90 	vmov	r3, s15
 8005114:	b21b      	sxth	r3, r3
 8005116:	121b      	asrs	r3, r3, #8
 8005118:	b21a      	sxth	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	334b      	adds	r3, #75	; 0x4b
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <pack_telem_data+0x9c4>)
 8005124:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	334c      	adds	r3, #76	; 0x4c
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <pack_telem_data+0x9c4>)
 8005132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005136:	121b      	asrs	r3, r3, #8
 8005138:	b21a      	sxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	334d      	adds	r3, #77	; 0x4d
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <pack_telem_data+0x9c4>)
 8005144:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	334e      	adds	r3, #78	; 0x4e
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 8005150:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <pack_telem_data+0x9c4>)
 8005152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005156:	121b      	asrs	r3, r3, #8
 8005158:	b21a      	sxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	334f      	adds	r3, #79	; 0x4f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <pack_telem_data+0x9c8>)
 8005164:	edd3 7a00 	vldr	s15, [r3]
 8005168:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80051ac <pack_telem_data+0x9bc>
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 3a90 	vmov	r3, s15
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3350      	adds	r3, #80	; 0x50
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <pack_telem_data+0x9c8>)
 8005184:	edd3 7a00 	vldr	s15, [r3]
 8005188:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80051ac <pack_telem_data+0x9bc>
 800518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005194:	ee17 3a90 	vmov	r3, s15
 8005198:	b29b      	uxth	r3, r3
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3351      	adds	r3, #81	; 0x51
 80051a2:	e00b      	b.n	80051bc <pack_telem_data+0x9cc>
 80051a4:	20000360 	.word	0x20000360
 80051a8:	20000384 	.word	0x20000384
 80051ac:	42c80000 	.word	0x42c80000
 80051b0:	20000398 	.word	0x20000398
 80051b4:	200003a0 	.word	0x200003a0
 80051b8:	200003a4 	.word	0x200003a4
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 80051c0:	4bcc      	ldr	r3, [pc, #816]	; (80054f4 <pack_telem_data+0xd04>)
 80051c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80051c6:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80054f8 <pack_telem_data+0xd08>
 80051ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d2:	ee17 3a90 	vmov	r3, s15
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3352      	adds	r3, #82	; 0x52
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 80051e0:	4bc4      	ldr	r3, [pc, #784]	; (80054f4 <pack_telem_data+0xd04>)
 80051e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80051e6:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80054f8 <pack_telem_data+0xd08>
 80051ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f2:	ee17 3a90 	vmov	r3, s15
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3353      	adds	r3, #83	; 0x53
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 8005204:	4bbb      	ldr	r3, [pc, #748]	; (80054f4 <pack_telem_data+0xd04>)
 8005206:	edd3 7a02 	vldr	s15, [r3, #8]
 800520a:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80054f8 <pack_telem_data+0xd08>
 800520e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005216:	ee17 3a90 	vmov	r3, s15
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3354      	adds	r3, #84	; 0x54
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 8005224:	4bb3      	ldr	r3, [pc, #716]	; (80054f4 <pack_telem_data+0xd04>)
 8005226:	edd3 7a02 	vldr	s15, [r3, #8]
 800522a:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80054f8 <pack_telem_data+0xd08>
 800522e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005236:	ee17 3a90 	vmov	r3, s15
 800523a:	b29b      	uxth	r3, r3
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3355      	adds	r3, #85	; 0x55
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 8005248:	4baa      	ldr	r3, [pc, #680]	; (80054f4 <pack_telem_data+0xd04>)
 800524a:	edd3 7a03 	vldr	s15, [r3, #12]
 800524e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80054f8 <pack_telem_data+0xd08>
 8005252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	ee17 3a90 	vmov	r3, s15
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3356      	adds	r3, #86	; 0x56
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 8005268:	4ba2      	ldr	r3, [pc, #648]	; (80054f4 <pack_telem_data+0xd04>)
 800526a:	edd3 7a03 	vldr	s15, [r3, #12]
 800526e:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80054f8 <pack_telem_data+0xd08>
 8005272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527a:	ee17 3a90 	vmov	r3, s15
 800527e:	b29b      	uxth	r3, r3
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3357      	adds	r3, #87	; 0x57
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 800528c:	4b9b      	ldr	r3, [pc, #620]	; (80054fc <pack_telem_data+0xd0c>)
 800528e:	edd3 7a00 	vldr	s15, [r3]
 8005292:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80054f8 <pack_telem_data+0xd08>
 8005296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 3a90 	vmov	r3, s15
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3358      	adds	r3, #88	; 0x58
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 80052ac:	4b93      	ldr	r3, [pc, #588]	; (80054fc <pack_telem_data+0xd0c>)
 80052ae:	edd3 7a00 	vldr	s15, [r3]
 80052b2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80054f8 <pack_telem_data+0xd08>
 80052b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052be:	ee17 3a90 	vmov	r3, s15
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3359      	adds	r3, #89	; 0x59
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 80052d0:	4b8a      	ldr	r3, [pc, #552]	; (80054fc <pack_telem_data+0xd0c>)
 80052d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80052d6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80054f8 <pack_telem_data+0xd08>
 80052da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e2:	ee17 3a90 	vmov	r3, s15
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	335a      	adds	r3, #90	; 0x5a
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 80052f0:	4b82      	ldr	r3, [pc, #520]	; (80054fc <pack_telem_data+0xd0c>)
 80052f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80052f6:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80054f8 <pack_telem_data+0xd08>
 80052fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005302:	ee17 3a90 	vmov	r3, s15
 8005306:	b29b      	uxth	r3, r3
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	335b      	adds	r3, #91	; 0x5b
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 8005314:	4b7a      	ldr	r3, [pc, #488]	; (8005500 <pack_telem_data+0xd10>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80054f8 <pack_telem_data+0xd08>
 800531e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005326:	edc7 7a00 	vstr	s15, [r7]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	335c      	adds	r3, #92	; 0x5c
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 8005334:	4b72      	ldr	r3, [pc, #456]	; (8005500 <pack_telem_data+0xd10>)
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80054f8 <pack_telem_data+0xd08>
 800533e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005346:	ee17 3a90 	vmov	r3, s15
 800534a:	121a      	asrs	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	335d      	adds	r3, #93	; 0x5d
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 8005354:	4b6a      	ldr	r3, [pc, #424]	; (8005500 <pack_telem_data+0xd10>)
 8005356:	edd3 7a00 	vldr	s15, [r3]
 800535a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80054f8 <pack_telem_data+0xd08>
 800535e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005366:	ee17 3a90 	vmov	r3, s15
 800536a:	141a      	asrs	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	335e      	adds	r3, #94	; 0x5e
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 8005374:	4b62      	ldr	r3, [pc, #392]	; (8005500 <pack_telem_data+0xd10>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80054f8 <pack_telem_data+0xd08>
 800537e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005386:	ee17 3a90 	vmov	r3, s15
 800538a:	161a      	asrs	r2, r3, #24
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	335f      	adds	r3, #95	; 0x5f
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 8005394:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <pack_telem_data+0xd10>)
 8005396:	edd3 7a01 	vldr	s15, [r3, #4]
 800539a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80054f8 <pack_telem_data+0xd08>
 800539e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a6:	edc7 7a00 	vstr	s15, [r7]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3360      	adds	r3, #96	; 0x60
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 80053b4:	4b52      	ldr	r3, [pc, #328]	; (8005500 <pack_telem_data+0xd10>)
 80053b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ba:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80054f8 <pack_telem_data+0xd08>
 80053be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053c6:	ee17 3a90 	vmov	r3, s15
 80053ca:	121a      	asrs	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3361      	adds	r3, #97	; 0x61
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 80053d4:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <pack_telem_data+0xd10>)
 80053d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053da:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80054f8 <pack_telem_data+0xd08>
 80053de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e6:	ee17 3a90 	vmov	r3, s15
 80053ea:	141a      	asrs	r2, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3362      	adds	r3, #98	; 0x62
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 80053f4:	4b42      	ldr	r3, [pc, #264]	; (8005500 <pack_telem_data+0xd10>)
 80053f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053fa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80054f8 <pack_telem_data+0xd08>
 80053fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005406:	ee17 3a90 	vmov	r3, s15
 800540a:	161a      	asrs	r2, r3, #24
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3363      	adds	r3, #99	; 0x63
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 8005414:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <pack_telem_data+0xd14>)
 8005416:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800541a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80054f8 <pack_telem_data+0xd08>
 800541e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005426:	ee17 3a90 	vmov	r3, s15
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3364      	adds	r3, #100	; 0x64
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 8005434:	4b33      	ldr	r3, [pc, #204]	; (8005504 <pack_telem_data+0xd14>)
 8005436:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800543a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80054f8 <pack_telem_data+0xd08>
 800543e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005446:	ee17 3a90 	vmov	r3, s15
 800544a:	b29b      	uxth	r3, r3
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3365      	adds	r3, #101	; 0x65
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 8005458:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <pack_telem_data+0xd14>)
 800545a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800545e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80054f8 <pack_telem_data+0xd08>
 8005462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546a:	ee17 3a90 	vmov	r3, s15
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3366      	adds	r3, #102	; 0x66
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <pack_telem_data+0xd14>)
 800547a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800547e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80054f8 <pack_telem_data+0xd08>
 8005482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548a:	ee17 3a90 	vmov	r3, s15
 800548e:	b29b      	uxth	r3, r3
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3367      	adds	r3, #103	; 0x67
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <pack_telem_data+0xd14>)
 800549e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054a2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80054f8 <pack_telem_data+0xd08>
 80054a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ae:	ee17 3a90 	vmov	r3, s15
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3368      	adds	r3, #104	; 0x68
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <pack_telem_data+0xd14>)
 80054be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80054f8 <pack_telem_data+0xd08>
 80054c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ce:	ee17 3a90 	vmov	r3, s15
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3369      	adds	r3, #105	; 0x69
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 80054e0:	4b08      	ldr	r3, [pc, #32]	; (8005504 <pack_telem_data+0xd14>)
 80054e2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80054e6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80054f8 <pack_telem_data+0xd08>
 80054ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f2:	e009      	b.n	8005508 <pack_telem_data+0xd18>
 80054f4:	200003a4 	.word	0x200003a4
 80054f8:	42c80000 	.word	0x42c80000
 80054fc:	200003b4 	.word	0x200003b4
 8005500:	200003bc 	.word	0x200003bc
 8005504:	200005b4 	.word	0x200005b4
 8005508:	ee17 3a90 	vmov	r3, s15
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	336a      	adds	r3, #106	; 0x6a
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 8005516:	4bcb      	ldr	r3, [pc, #812]	; (8005844 <pack_telem_data+0x1054>)
 8005518:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800551c:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8005848 <pack_telem_data+0x1058>
 8005520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	b29b      	uxth	r3, r3
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	336b      	adds	r3, #107	; 0x6b
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 800553a:	4bc2      	ldr	r3, [pc, #776]	; (8005844 <pack_telem_data+0x1054>)
 800553c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005540:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8005848 <pack_telem_data+0x1058>
 8005544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554c:	ee17 3a90 	vmov	r3, s15
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	336c      	adds	r3, #108	; 0x6c
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 800555a:	4bba      	ldr	r3, [pc, #744]	; (8005844 <pack_telem_data+0x1054>)
 800555c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005560:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8005848 <pack_telem_data+0x1058>
 8005564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556c:	ee17 3a90 	vmov	r3, s15
 8005570:	b29b      	uxth	r3, r3
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	336d      	adds	r3, #109	; 0x6d
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = TELEM_ITEM_110;
 800557e:	4bb1      	ldr	r3, [pc, #708]	; (8005844 <pack_telem_data+0x1054>)
 8005580:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005584:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8005848 <pack_telem_data+0x1058>
 8005588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005590:	ee17 3a90 	vmov	r3, s15
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	336e      	adds	r3, #110	; 0x6e
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 800559e:	4ba9      	ldr	r3, [pc, #676]	; (8005844 <pack_telem_data+0x1054>)
 80055a0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80055a4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8005848 <pack_telem_data+0x1058>
 80055a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b0:	ee17 3a90 	vmov	r3, s15
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	336f      	adds	r3, #111	; 0x6f
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 80055c2:	4ba0      	ldr	r3, [pc, #640]	; (8005844 <pack_telem_data+0x1054>)
 80055c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d4:	ee17 3a90 	vmov	r3, s15
 80055d8:	b21a      	sxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3370      	adds	r3, #112	; 0x70
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 80055e2:	4b98      	ldr	r3, [pc, #608]	; (8005844 <pack_telem_data+0x1054>)
 80055e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f4:	ee17 3a90 	vmov	r3, s15
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	121b      	asrs	r3, r3, #8
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3371      	adds	r3, #113	; 0x71
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 8005606:	4b8f      	ldr	r3, [pc, #572]	; (8005844 <pack_telem_data+0x1054>)
 8005608:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800560c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005618:	ee17 3a90 	vmov	r3, s15
 800561c:	b21a      	sxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3372      	adds	r3, #114	; 0x72
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 8005626:	4b87      	ldr	r3, [pc, #540]	; (8005844 <pack_telem_data+0x1054>)
 8005628:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800562c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005638:	ee17 3a90 	vmov	r3, s15
 800563c:	b21b      	sxth	r3, r3
 800563e:	121b      	asrs	r3, r3, #8
 8005640:	b21a      	sxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3373      	adds	r3, #115	; 0x73
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 800564a:	4b7e      	ldr	r3, [pc, #504]	; (8005844 <pack_telem_data+0x1054>)
 800564c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005650:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800565c:	ee17 3a90 	vmov	r3, s15
 8005660:	b21a      	sxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3374      	adds	r3, #116	; 0x74
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 800566a:	4b76      	ldr	r3, [pc, #472]	; (8005844 <pack_telem_data+0x1054>)
 800566c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005670:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800567c:	ee17 3a90 	vmov	r3, s15
 8005680:	b21b      	sxth	r3, r3
 8005682:	121b      	asrs	r3, r3, #8
 8005684:	b21a      	sxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3375      	adds	r3, #117	; 0x75
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 800568e:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <pack_telem_data+0x1054>)
 8005690:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005694:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a0:	ee17 3a90 	vmov	r3, s15
 80056a4:	b21a      	sxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3376      	adds	r3, #118	; 0x76
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 80056ae:	4b65      	ldr	r3, [pc, #404]	; (8005844 <pack_telem_data+0x1054>)
 80056b0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80056b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c0:	ee17 3a90 	vmov	r3, s15
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	121b      	asrs	r3, r3, #8
 80056c8:	b21a      	sxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3377      	adds	r3, #119	; 0x77
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 80056d2:	4b5c      	ldr	r3, [pc, #368]	; (8005844 <pack_telem_data+0x1054>)
 80056d4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80056d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056e4:	ee17 3a90 	vmov	r3, s15
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3378      	adds	r3, #120	; 0x78
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 80056f2:	4b54      	ldr	r3, [pc, #336]	; (8005844 <pack_telem_data+0x1054>)
 80056f4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80056f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005704:	ee17 3a90 	vmov	r3, s15
 8005708:	b21b      	sxth	r3, r3
 800570a:	121b      	asrs	r3, r3, #8
 800570c:	b21a      	sxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3379      	adds	r3, #121	; 0x79
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 8005716:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <pack_telem_data+0x1054>)
 8005718:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800571c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005728:	ee17 3a90 	vmov	r3, s15
 800572c:	b21a      	sxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	337a      	adds	r3, #122	; 0x7a
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 8005736:	4b43      	ldr	r3, [pc, #268]	; (8005844 <pack_telem_data+0x1054>)
 8005738:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800573c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005748:	ee17 3a90 	vmov	r3, s15
 800574c:	b21b      	sxth	r3, r3
 800574e:	121b      	asrs	r3, r3, #8
 8005750:	b21a      	sxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	337b      	adds	r3, #123	; 0x7b
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 800575a:	4b3a      	ldr	r3, [pc, #232]	; (8005844 <pack_telem_data+0x1054>)
 800575c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005760:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005848 <pack_telem_data+0x1058>
 8005764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576c:	edc7 7a00 	vstr	s15, [r7]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	337c      	adds	r3, #124	; 0x7c
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 800577a:	4b32      	ldr	r3, [pc, #200]	; (8005844 <pack_telem_data+0x1054>)
 800577c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005780:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005848 <pack_telem_data+0x1058>
 8005784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800578c:	ee17 3a90 	vmov	r3, s15
 8005790:	121a      	asrs	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	337d      	adds	r3, #125	; 0x7d
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 800579a:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <pack_telem_data+0x1054>)
 800579c:	edd3 7a04 	vldr	s15, [r3, #16]
 80057a0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005848 <pack_telem_data+0x1058>
 80057a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ac:	ee17 3a90 	vmov	r3, s15
 80057b0:	141a      	asrs	r2, r3, #16
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	337e      	adds	r3, #126	; 0x7e
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <pack_telem_data+0x1054>)
 80057bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80057c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005848 <pack_telem_data+0x1058>
 80057c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057cc:	ee17 3a90 	vmov	r3, s15
 80057d0:	161a      	asrs	r2, r3, #24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	337f      	adds	r3, #127	; 0x7f
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <pack_telem_data+0x1054>)
 80057dc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80057e0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005848 <pack_telem_data+0x1058>
 80057e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ec:	edc7 7a00 	vstr	s15, [r7]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3380      	adds	r3, #128	; 0x80
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <pack_telem_data+0x1054>)
 80057fc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005800:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005848 <pack_telem_data+0x1058>
 8005804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800580c:	ee17 3a90 	vmov	r3, s15
 8005810:	121a      	asrs	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3381      	adds	r3, #129	; 0x81
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <pack_telem_data+0x1054>)
 800581c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005820:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005848 <pack_telem_data+0x1058>
 8005824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800582c:	ee17 3a90 	vmov	r3, s15
 8005830:	141a      	asrs	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3382      	adds	r3, #130	; 0x82
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 800583a:	4b02      	ldr	r3, [pc, #8]	; (8005844 <pack_telem_data+0x1054>)
 800583c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005840:	e004      	b.n	800584c <pack_telem_data+0x105c>
 8005842:	bf00      	nop
 8005844:	200005b4 	.word	0x200005b4
 8005848:	42c80000 	.word	0x42c80000
 800584c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8005848 <pack_telem_data+0x1058>
 8005850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005858:	ee17 3a90 	vmov	r3, s15
 800585c:	161a      	asrs	r2, r3, #24
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3383      	adds	r3, #131	; 0x83
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 8005866:	4bd0      	ldr	r3, [pc, #832]	; (8005ba8 <pack_telem_data+0x13b8>)
 8005868:	edd3 7a08 	vldr	s15, [r3, #32]
 800586c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005878:	ee17 3a90 	vmov	r3, s15
 800587c:	b21a      	sxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3384      	adds	r3, #132	; 0x84
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 8005886:	4bc8      	ldr	r3, [pc, #800]	; (8005ba8 <pack_telem_data+0x13b8>)
 8005888:	edd3 7a08 	vldr	s15, [r3, #32]
 800588c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005898:	ee17 3a90 	vmov	r3, s15
 800589c:	b21b      	sxth	r3, r3
 800589e:	121b      	asrs	r3, r3, #8
 80058a0:	b21a      	sxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3385      	adds	r3, #133	; 0x85
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 80058aa:	4bbf      	ldr	r3, [pc, #764]	; (8005ba8 <pack_telem_data+0x13b8>)
 80058ac:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80058b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058bc:	ee17 3a90 	vmov	r3, s15
 80058c0:	b21a      	sxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3386      	adds	r3, #134	; 0x86
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 80058ca:	4bb7      	ldr	r3, [pc, #732]	; (8005ba8 <pack_telem_data+0x13b8>)
 80058cc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80058d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058dc:	ee17 3a90 	vmov	r3, s15
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	121b      	asrs	r3, r3, #8
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3387      	adds	r3, #135	; 0x87
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 80058ee:	4bae      	ldr	r3, [pc, #696]	; (8005ba8 <pack_telem_data+0x13b8>)
 80058f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80058f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005900:	ee17 3a90 	vmov	r3, s15
 8005904:	b21a      	sxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3388      	adds	r3, #136	; 0x88
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 800590e:	4ba6      	ldr	r3, [pc, #664]	; (8005ba8 <pack_telem_data+0x13b8>)
 8005910:	edd3 7a07 	vldr	s15, [r3, #28]
 8005914:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800591c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005920:	ee17 3a90 	vmov	r3, s15
 8005924:	b21b      	sxth	r3, r3
 8005926:	121b      	asrs	r3, r3, #8
 8005928:	b21a      	sxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3389      	adds	r3, #137	; 0x89
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 8005932:	4b9d      	ldr	r3, [pc, #628]	; (8005ba8 <pack_telem_data+0x13b8>)
 8005934:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005938:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800593c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005944:	ee17 3a90 	vmov	r3, s15
 8005948:	b21a      	sxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	338a      	adds	r3, #138	; 0x8a
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 8005952:	4b95      	ldr	r3, [pc, #596]	; (8005ba8 <pack_telem_data+0x13b8>)
 8005954:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005958:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800595c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005964:	ee17 3a90 	vmov	r3, s15
 8005968:	b21b      	sxth	r3, r3
 800596a:	121b      	asrs	r3, r3, #8
 800596c:	b21a      	sxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	338b      	adds	r3, #139	; 0x8b
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 8005976:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <pack_telem_data+0x13bc>)
 8005978:	edd3 7a00 	vldr	s15, [r3]
 800597c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005988:	edc7 7a00 	vstr	s15, [r7]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	338c      	adds	r3, #140	; 0x8c
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 8005996:	4b85      	ldr	r3, [pc, #532]	; (8005bac <pack_telem_data+0x13bc>)
 8005998:	edd3 7a00 	vldr	s15, [r3]
 800599c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059a8:	ee17 3a90 	vmov	r3, s15
 80059ac:	121a      	asrs	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	338d      	adds	r3, #141	; 0x8d
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 80059b6:	4b7d      	ldr	r3, [pc, #500]	; (8005bac <pack_telem_data+0x13bc>)
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059c8:	ee17 3a90 	vmov	r3, s15
 80059cc:	141a      	asrs	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	338e      	adds	r3, #142	; 0x8e
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 80059d6:	4b75      	ldr	r3, [pc, #468]	; (8005bac <pack_telem_data+0x13bc>)
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80059e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e8:	ee17 3a90 	vmov	r3, s15
 80059ec:	161a      	asrs	r2, r3, #24
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	338f      	adds	r3, #143	; 0x8f
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 80059f6:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <pack_telem_data+0x13bc>)
 80059f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80059fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a08:	edc7 7a00 	vstr	s15, [r7]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3390      	adds	r3, #144	; 0x90
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 8005a16:	4b65      	ldr	r3, [pc, #404]	; (8005bac <pack_telem_data+0x13bc>)
 8005a18:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a28:	ee17 3a90 	vmov	r3, s15
 8005a2c:	121a      	asrs	r2, r3, #8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3391      	adds	r3, #145	; 0x91
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 8005a36:	4b5d      	ldr	r3, [pc, #372]	; (8005bac <pack_telem_data+0x13bc>)
 8005a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a48:	ee17 3a90 	vmov	r3, s15
 8005a4c:	141a      	asrs	r2, r3, #16
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3392      	adds	r3, #146	; 0x92
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 8005a56:	4b55      	ldr	r3, [pc, #340]	; (8005bac <pack_telem_data+0x13bc>)
 8005a58:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a68:	ee17 3a90 	vmov	r3, s15
 8005a6c:	161a      	asrs	r2, r3, #24
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3393      	adds	r3, #147	; 0x93
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 8005a76:	4b4e      	ldr	r3, [pc, #312]	; (8005bb0 <pack_telem_data+0x13c0>)
 8005a78:	edd3 7a00 	vldr	s15, [r3]
 8005a7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a88:	edc7 7a00 	vstr	s15, [r7]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3394      	adds	r3, #148	; 0x94
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <pack_telem_data+0x13c0>)
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aa8:	ee17 3a90 	vmov	r3, s15
 8005aac:	121a      	asrs	r2, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3395      	adds	r3, #149	; 0x95
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 8005ab6:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <pack_telem_data+0x13c0>)
 8005ab8:	edd3 7a00 	vldr	s15, [r3]
 8005abc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ac8:	ee17 3a90 	vmov	r3, s15
 8005acc:	141a      	asrs	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3396      	adds	r3, #150	; 0x96
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <pack_telem_data+0x13c0>)
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ae8:	ee17 3a90 	vmov	r3, s15
 8005aec:	161a      	asrs	r2, r3, #24
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3397      	adds	r3, #151	; 0x97
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 8005af6:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <pack_telem_data+0x13c4>)
 8005af8:	edd3 7a00 	vldr	s15, [r3]
 8005afc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b08:	edc7 7a00 	vstr	s15, [r7]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3398      	adds	r3, #152	; 0x98
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <pack_telem_data+0x13c4>)
 8005b18:	edd3 7a00 	vldr	s15, [r3]
 8005b1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b28:	ee17 3a90 	vmov	r3, s15
 8005b2c:	121a      	asrs	r2, r3, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3399      	adds	r3, #153	; 0x99
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <pack_telem_data+0x13c4>)
 8005b38:	edd3 7a00 	vldr	s15, [r3]
 8005b3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b48:	ee17 3a90 	vmov	r3, s15
 8005b4c:	141a      	asrs	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	339a      	adds	r3, #154	; 0x9a
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <pack_telem_data+0x13c4>)
 8005b58:	edd3 7a00 	vldr	s15, [r3]
 8005b5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b68:	ee17 3a90 	vmov	r3, s15
 8005b6c:	161a      	asrs	r2, r3, #24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	339b      	adds	r3, #155	; 0x9b
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <pack_telem_data+0x13c8>)
 8005b78:	edd3 7a00 	vldr	s15, [r3]
 8005b7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b88:	edc7 7a00 	vstr	s15, [r7]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	339c      	adds	r3, #156	; 0x9c
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8005b96:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <pack_telem_data+0x13c8>)
 8005b98:	edd3 7a00 	vldr	s15, [r3]
 8005b9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ba4:	e00a      	b.n	8005bbc <pack_telem_data+0x13cc>
 8005ba6:	bf00      	nop
 8005ba8:	200005b4 	.word	0x200005b4
 8005bac:	200003c4 	.word	0x200003c4
 8005bb0:	20000304 	.word	0x20000304
 8005bb4:	20000308 	.word	0x20000308
 8005bb8:	2000030c 	.word	0x2000030c
 8005bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc0:	ee17 3a90 	vmov	r3, s15
 8005bc4:	121a      	asrs	r2, r3, #8
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	339d      	adds	r3, #157	; 0x9d
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8005bce:	4bad      	ldr	r3, [pc, #692]	; (8005e84 <pack_telem_data+0x1694>)
 8005bd0:	edd3 7a00 	vldr	s15, [r3]
 8005bd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be0:	ee17 3a90 	vmov	r3, s15
 8005be4:	141a      	asrs	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	339e      	adds	r3, #158	; 0x9e
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8005bee:	4ba5      	ldr	r3, [pc, #660]	; (8005e84 <pack_telem_data+0x1694>)
 8005bf0:	edd3 7a00 	vldr	s15, [r3]
 8005bf4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c00:	ee17 3a90 	vmov	r3, s15
 8005c04:	161a      	asrs	r2, r3, #24
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	339f      	adds	r3, #159	; 0x9f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	33a0      	adds	r3, #160	; 0xa0
 8005c12:	4a9d      	ldr	r2, [pc, #628]	; (8005e88 <pack_telem_data+0x1698>)
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	33a1      	adds	r3, #161	; 0xa1
 8005c1e:	4a9a      	ldr	r2, [pc, #616]	; (8005e88 <pack_telem_data+0x1698>)
 8005c20:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8005c28:	4b98      	ldr	r3, [pc, #608]	; (8005e8c <pack_telem_data+0x169c>)
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	33a2      	adds	r3, #162	; 0xa2
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8005c34:	4b95      	ldr	r3, [pc, #596]	; (8005e8c <pack_telem_data+0x169c>)
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	0a1a      	lsrs	r2, r3, #8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	33a3      	adds	r3, #163	; 0xa3
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8005c42:	4b92      	ldr	r3, [pc, #584]	; (8005e8c <pack_telem_data+0x169c>)
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	0c1a      	lsrs	r2, r3, #16
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	33a4      	adds	r3, #164	; 0xa4
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8005c50:	4b8e      	ldr	r3, [pc, #568]	; (8005e8c <pack_telem_data+0x169c>)
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	0e1a      	lsrs	r2, r3, #24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	33a5      	adds	r3, #165	; 0xa5
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8005c5e:	4b8b      	ldr	r3, [pc, #556]	; (8005e8c <pack_telem_data+0x169c>)
 8005c60:	889b      	ldrh	r3, [r3, #4]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	33a6      	adds	r3, #166	; 0xa6
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8005c6c:	4b87      	ldr	r3, [pc, #540]	; (8005e8c <pack_telem_data+0x169c>)
 8005c6e:	889b      	ldrh	r3, [r3, #4]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	33a7      	adds	r3, #167	; 0xa7
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8005c7e:	4b83      	ldr	r3, [pc, #524]	; (8005e8c <pack_telem_data+0x169c>)
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	33a8      	adds	r3, #168	; 0xa8
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8005c8c:	4b7f      	ldr	r3, [pc, #508]	; (8005e8c <pack_telem_data+0x169c>)
 8005c8e:	88db      	ldrh	r3, [r3, #6]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	33a9      	adds	r3, #169	; 0xa9
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	33aa      	adds	r3, #170	; 0xaa
 8005ca2:	4a7a      	ldr	r2, [pc, #488]	; (8005e8c <pack_telem_data+0x169c>)
 8005ca4:	7a12      	ldrb	r2, [r2, #8]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8005caa:	4b78      	ldr	r3, [pc, #480]	; (8005e8c <pack_telem_data+0x169c>)
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	33ab      	adds	r3, #171	; 0xab
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8005cb8:	4b74      	ldr	r3, [pc, #464]	; (8005e8c <pack_telem_data+0x169c>)
 8005cba:	895b      	ldrh	r3, [r3, #10]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	33ac      	adds	r3, #172	; 0xac
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8005cca:	4b70      	ldr	r3, [pc, #448]	; (8005e8c <pack_telem_data+0x169c>)
 8005ccc:	899b      	ldrh	r3, [r3, #12]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	33ad      	adds	r3, #173	; 0xad
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	; (8005e8c <pack_telem_data+0x169c>)
 8005cda:	899b      	ldrh	r3, [r3, #12]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	33ae      	adds	r3, #174	; 0xae
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8005cea:	4b69      	ldr	r3, [pc, #420]	; (8005e90 <pack_telem_data+0x16a0>)
 8005cec:	edd3 7a00 	vldr	s15, [r3]
 8005cf0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005e94 <pack_telem_data+0x16a4>
 8005cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfc:	edc7 7a00 	vstr	s15, [r7]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	33af      	adds	r3, #175	; 0xaf
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8005d0a:	4b61      	ldr	r3, [pc, #388]	; (8005e90 <pack_telem_data+0x16a0>)
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005e94 <pack_telem_data+0x16a4>
 8005d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d1c:	ee17 3a90 	vmov	r3, s15
 8005d20:	121a      	asrs	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	33b0      	adds	r3, #176	; 0xb0
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8005d2a:	4b59      	ldr	r3, [pc, #356]	; (8005e90 <pack_telem_data+0x16a0>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005e94 <pack_telem_data+0x16a4>
 8005d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d3c:	ee17 3a90 	vmov	r3, s15
 8005d40:	141a      	asrs	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	33b1      	adds	r3, #177	; 0xb1
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8005d4a:	4b51      	ldr	r3, [pc, #324]	; (8005e90 <pack_telem_data+0x16a0>)
 8005d4c:	edd3 7a00 	vldr	s15, [r3]
 8005d50:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005e94 <pack_telem_data+0x16a4>
 8005d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d5c:	ee17 3a90 	vmov	r3, s15
 8005d60:	161a      	asrs	r2, r3, #24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	33b2      	adds	r3, #178	; 0xb2
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8005d6a:	4b4b      	ldr	r3, [pc, #300]	; (8005e98 <pack_telem_data+0x16a8>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	33b3      	adds	r3, #179	; 0xb3
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8005d76:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <pack_telem_data+0x16a8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	121a      	asrs	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	33b4      	adds	r3, #180	; 0xb4
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <pack_telem_data+0x16a8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	141a      	asrs	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	33b5      	adds	r3, #181	; 0xb5
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8005d92:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <pack_telem_data+0x16a8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	161a      	asrs	r2, r3, #24
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	33b6      	adds	r3, #182	; 0xb6
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	33b7      	adds	r3, #183	; 0xb7
 8005da4:	4a3d      	ldr	r2, [pc, #244]	; (8005e9c <pack_telem_data+0x16ac>)
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	33b8      	adds	r3, #184	; 0xb8
 8005dae:	4a3c      	ldr	r2, [pc, #240]	; (8005ea0 <pack_telem_data+0x16b0>)
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8005db4:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <pack_telem_data+0x16b4>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	33b9      	adds	r3, #185	; 0xb9
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8005dc0:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <pack_telem_data+0x16b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	0a1a      	lsrs	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	33ba      	adds	r3, #186	; 0xba
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <pack_telem_data+0x16b4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0c1a      	lsrs	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	33bb      	adds	r3, #187	; 0xbb
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8005ddc:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <pack_telem_data+0x16b4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	0e1a      	lsrs	r2, r3, #24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	33bc      	adds	r3, #188	; 0xbc
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	33bd      	adds	r3, #189	; 0xbd
 8005dee:	4a2e      	ldr	r2, [pc, #184]	; (8005ea8 <pack_telem_data+0x16b8>)
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	33be      	adds	r3, #190	; 0xbe
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <pack_telem_data+0x169c>)
 8005dfa:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <pack_telem_data+0x169c>)
 8005e04:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	33bf      	adds	r3, #191	; 0xbf
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8005e0e:	4b1f      	ldr	r3, [pc, #124]	; (8005e8c <pack_telem_data+0x169c>)
 8005e10:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	33c0      	adds	r3, #192	; 0xc0
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <pack_telem_data+0x169c>)
 8005e20:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	33c1      	adds	r3, #193	; 0xc1
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8005e2c:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <pack_telem_data+0x169c>)
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	33c2      	adds	r3, #194	; 0xc2
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <pack_telem_data+0x169c>)
 8005e40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	33c3      	adds	r3, #195	; 0xc3
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <pack_telem_data+0x169c>)
 8005e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	33c4      	adds	r3, #196	; 0xc4
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	33c5      	adds	r3, #197	; 0xc5
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <pack_telem_data+0x169c>)
 8005e64:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005e68:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	33c6      	adds	r3, #198	; 0xc6
 8005e6e:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <pack_telem_data+0x169c>)
 8005e70:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005e74:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	33c7      	adds	r3, #199	; 0xc7
 8005e7a:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <pack_telem_data+0x169c>)
 8005e7c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e013      	b.n	8005eac <pack_telem_data+0x16bc>
 8005e84:	2000030c 	.word	0x2000030c
 8005e88:	200005b4 	.word	0x200005b4
 8005e8c:	2000065c 	.word	0x2000065c
 8005e90:	20000310 	.word	0x20000310
 8005e94:	461c4000 	.word	0x461c4000
 8005e98:	20000314 	.word	0x20000314
 8005e9c:	20000318 	.word	0x20000318
 8005ea0:	20000319 	.word	0x20000319
 8005ea4:	2000031c 	.word	0x2000031c
 8005ea8:	20000320 	.word	0x20000320
	*(dst + 200) = TELEM_ITEM_200;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	33c8      	adds	r3, #200	; 0xc8
 8005eb0:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <pack_telem_data+0x16d4>)
 8005eb2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	2000065c 	.word	0x2000065c

08005ec8 <update_serial_data_vars>:
		buffer_info->telem_buffer[i] = 0;
	}
	*/
}

void update_serial_data_vars() {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
    flash_mem = get_bytes_remaining(&flash);
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <update_serial_data_vars+0x1c>)
 8005ece:	f003 fc78 	bl	80097c2 <get_bytes_remaining>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <update_serial_data_vars+0x20>)
 8005ed6:	6013      	str	r3, [r2, #0]

    // Update last command received
    last_command_id = CLB_last_cmd_received;
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <update_serial_data_vars+0x24>)
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <update_serial_data_vars+0x28>)
 8005ede:	701a      	strb	r2, [r3, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20002288 	.word	0x20002288
 8005ee8:	2000031c 	.word	0x2000031c
 8005eec:	20000dc0 	.word	0x20000dc0
 8005ef0:	200002fc 	.word	0x200002fc

08005ef4 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
	header->origin_addr = OWN_BOARD_ADDR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	70da      	strb	r2, [r3, #3]
	header->num_packets = 1;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	711a      	strb	r2, [r3, #4]
	header->do_cobbs = 1; // enable COBS
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	715a      	strb	r2, [r3, #5]
	header->checksum = 0;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	80da      	strh	r2, [r3, #6]
	header->timestamp = SYS_MICROS;
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <init_packet_header+0x4c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000934 	.word	0x20000934

08005f44 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 8005f4e:	79fa      	ldrb	r2, [r7, #7]
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff ffcc 	bl	8005ef4 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	461a      	mov	r2, r3
 8005f62:	f04f 31ff 	mov.w	r1, #4294967295
 8005f66:	2000      	movs	r0, #0
 8005f68:	f002 f9fe 	bl	8008368 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <send_telem_packet+0x40>)
 8005f6e:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8005f70:	f107 0308 	add.w	r3, r7, #8
 8005f74:	2100      	movs	r1, #0
 8005f76:	4618      	mov	r0, r3
 8005f78:	f002 fa22 	bl	80083c0 <send_data>
}
 8005f7c:	bf00      	nop
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	2000205c 	.word	0x2000205c

08005f88 <save_flash_packet>:

void save_flash_packet() {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b0c8      	sub	sp, #288	; 0x120
 8005f8c:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 8005f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f92:	2107      	movs	r1, #7
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ffad 	bl	8005ef4 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 8005f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	f002 f9df 	bl	8008368 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	22f9      	movs	r2, #249	; 0xf9
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f008 fa2f 	bl	800e41c <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	22fd      	movs	r2, #253	; 0xfd
 8005fc8:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	f107 0210 	add.w	r2, r7, #16
 8005fd0:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f002 f9f2 	bl	80083c0 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005fe2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 8005fe6:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8005fea:	f107 0310 	add.w	r3, r7, #16
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4803      	ldr	r0, [pc, #12]	; (8006000 <save_flash_packet+0x78>)
 8005ff2:	f003 fa76 	bl	80094e2 <write_to_flash>
}
 8005ff6:	bf00      	nop
 8005ff8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20002288 	.word	0x20002288

08006004 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 8006004:	b580      	push	{r7, lr}
 8006006:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800600a:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 800600c:	481e      	ldr	r0, [pc, #120]	; (8006088 <transmit_flash_data+0x84>)
 800600e:	f003 fb33 	bl	8009678 <finish_flash_write>

	uint32_t page = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <transmit_flash_data+0x84>)
 800601a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800601e:	3301      	adds	r3, #1
 8006020:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8006024:	4b18      	ldr	r3, [pc, #96]	; (8006088 <transmit_flash_data+0x84>)
 8006026:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <transmit_flash_data+0x34>
		end_page--;
 800602e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006032:	3b01      	subs	r3, #1
 8006034:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 8006038:	4813      	ldr	r0, [pc, #76]	; (8006088 <transmit_flash_data+0x84>)
 800603a:	f003 fb63 	bl	8009704 <reset_flash_read_pointer>
	while (page < end_page) {
 800603e:	e014      	b.n	800606a <transmit_flash_data+0x66>
	    read_next_2KB_from_flash(&flash, read_buffer);
 8006040:	463b      	mov	r3, r7
 8006042:	4619      	mov	r1, r3
 8006044:	4810      	ldr	r0, [pc, #64]	; (8006088 <transmit_flash_data+0x84>)
 8006046:	f003 fb6b 	bl	8009720 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 800604a:	4639      	mov	r1, r7
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006054:	480d      	ldr	r0, [pc, #52]	; (800608c <transmit_flash_data+0x88>)
 8006056:	f007 f8a4 	bl	800d1a2 <HAL_UART_Transmit>
	    ++page;
 800605a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
		HAL_IWDG_Refresh(&hiwdg);
 8006064:	480a      	ldr	r0, [pc, #40]	; (8006090 <transmit_flash_data+0x8c>)
 8006066:	f004 fc1a 	bl	800a89e <HAL_IWDG_Refresh>
	while (page < end_page) {
 800606a:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800606e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8006072:	429a      	cmp	r2, r3
 8006074:	d3e4      	bcc.n	8006040 <transmit_flash_data+0x3c>
	}
	reset_flash_read_pointer(&flash);
 8006076:	4804      	ldr	r0, [pc, #16]	; (8006088 <transmit_flash_data+0x84>)
 8006078:	f003 fb44 	bl	8009704 <reset_flash_read_pointer>
}
 800607c:	bf00      	nop
 800607e:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20002288 	.word	0x20002288
 800608c:	2000205c 	.word	0x2000205c
 8006090:	20000924 	.word	0x20000924

08006094 <send_calibration_data>:
        RxRollover++;       // increment Rollover Counter
    }
}
*/

void send_calibration_data() {
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
	CLB_Packet_Header cal_header;

	cal_header.packet_type = 2; // calibration packet
 800609a:	2302      	movs	r3, #2
 800609c:	733b      	strb	r3, [r7, #12]
	cal_header.origin_addr = OWN_BOARD_ADDR;
 800609e:	2303      	movs	r3, #3
 80060a0:	737b      	strb	r3, [r7, #13]
	cal_header.target_addr = SERVER_ADDR;
 80060a2:	2307      	movs	r3, #7
 80060a4:	73bb      	strb	r3, [r7, #14]
	cal_header.priority = 1; // medium
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
	cal_header.num_packets = 1;
 80060aa:	2301      	movs	r3, #1
 80060ac:	743b      	strb	r3, [r7, #16]
	cal_header.do_cobbs = 1; // enable COBS
 80060ae:	2301      	movs	r3, #1
 80060b0:	747b      	strb	r3, [r7, #17]
	cal_header.checksum = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	827b      	strh	r3, [r7, #18]
	cal_header.timestamp = SYS_MICROS;
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <send_calibration_data+0x54>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	617b      	str	r3, [r7, #20]

	pack_calibration_data(calibration_telem_buffer);
 80060be:	480b      	ldr	r0, [pc, #44]	; (80060ec <send_calibration_data+0x58>)
 80060c0:	f7fe f950 	bl	8004364 <pack_calibration_data>
    init_data(calibration_telem_buffer, CLB_NUM_CALIBRATION_ITEMS, &cal_header);  // Comms library (tx, so no buffer)
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	461a      	mov	r2, r3
 80060ca:	2124      	movs	r1, #36	; 0x24
 80060cc:	4807      	ldr	r0, [pc, #28]	; (80060ec <send_calibration_data+0x58>)
 80060ce:	f002 f94b 	bl	8008368 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 80060d2:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <send_calibration_data+0x5c>)
 80060d4:	603b      	str	r3, [r7, #0]
    send_data(&info, CLB_Telem);
 80060d6:	463b      	mov	r3, r7
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f002 f970 	bl	80083c0 <send_data>
}
 80060e0:	bf00      	nop
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000934 	.word	0x20000934
 80060ec:	20002264 	.word	0x20002264
 80060f0:	2000205c 	.word	0x2000205c

080060f4 <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 80060fc:	2201      	movs	r2, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	461a      	mov	r2, r3
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <set_status_flag+0x28>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	4a03      	ldr	r2, [pc, #12]	; (800611c <set_status_flag+0x28>)
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000300 	.word	0x20000300

08006120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	4b10      	ldr	r3, [pc, #64]	; (800616c <HAL_MspInit+0x4c>)
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	4a0f      	ldr	r2, [pc, #60]	; (800616c <HAL_MspInit+0x4c>)
 8006130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006134:	6453      	str	r3, [r2, #68]	; 0x44
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <HAL_MspInit+0x4c>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_MspInit+0x4c>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <HAL_MspInit+0x4c>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_MspInit+0x4c>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800615e:	2004      	movs	r0, #4
 8006160:	f003 fd34 	bl	8009bcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800

08006170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4c      	ldr	r2, [pc, #304]	; (80062c0 <HAL_SPI_MspInit+0x150>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d12c      	bne.n	80061ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	4b4b      	ldr	r3, [pc, #300]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	4a4a      	ldr	r2, [pc, #296]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 800619c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061a0:	6453      	str	r3, [r2, #68]	; 0x44
 80061a2:	4b48      	ldr	r3, [pc, #288]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	4b44      	ldr	r3, [pc, #272]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	4a43      	ldr	r2, [pc, #268]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6313      	str	r3, [r2, #48]	; 0x30
 80061be:	4b41      	ldr	r3, [pc, #260]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80061ca:	23e0      	movs	r3, #224	; 0xe0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ce:	2302      	movs	r3, #2
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d6:	2303      	movs	r3, #3
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80061da:	2305      	movs	r3, #5
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e2:	4619      	mov	r1, r3
 80061e4:	4838      	ldr	r0, [pc, #224]	; (80062c8 <HAL_SPI_MspInit+0x158>)
 80061e6:	f004 f939 	bl	800a45c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80061ea:	e064      	b.n	80062b6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a36      	ldr	r2, [pc, #216]	; (80062cc <HAL_SPI_MspInit+0x15c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12d      	bne.n	8006252 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006204:	6413      	str	r3, [r2, #64]	; 0x40
 8006206:	4b2f      	ldr	r3, [pc, #188]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 800621c:	f043 0302 	orr.w	r3, r3, #2
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800622e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006234:	2302      	movs	r3, #2
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006240:	2305      	movs	r3, #5
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006248:	4619      	mov	r1, r3
 800624a:	4821      	ldr	r0, [pc, #132]	; (80062d0 <HAL_SPI_MspInit+0x160>)
 800624c:	f004 f906 	bl	800a45c <HAL_GPIO_Init>
}
 8006250:	e031      	b.n	80062b6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI4)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_SPI_MspInit+0x164>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d12c      	bne.n	80062b6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800626a:	6453      	str	r3, [r2, #68]	; 0x44
 800626c:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 800626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 8006282:	f043 0310 	orr.w	r3, r3, #16
 8006286:	6313      	str	r3, [r2, #48]	; 0x30
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <HAL_SPI_MspInit+0x154>)
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8006294:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629a:	2302      	movs	r3, #2
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a2:	2303      	movs	r3, #3
 80062a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80062a6:	2305      	movs	r3, #5
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ae:	4619      	mov	r1, r3
 80062b0:	4809      	ldr	r0, [pc, #36]	; (80062d8 <HAL_SPI_MspInit+0x168>)
 80062b2:	f004 f8d3 	bl	800a45c <HAL_GPIO_Init>
}
 80062b6:	bf00      	nop
 80062b8:	3738      	adds	r7, #56	; 0x38
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40013000 	.word	0x40013000
 80062c4:	40023800 	.word	0x40023800
 80062c8:	40020000 	.word	0x40020000
 80062cc:	40003800 	.word	0x40003800
 80062d0:	40020400 	.word	0x40020400
 80062d4:	40013400 	.word	0x40013400
 80062d8:	40021000 	.word	0x40021000

080062dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d10e      	bne.n	800630c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	4b62      	ldr	r3, [pc, #392]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a61      	ldr	r2, [pc, #388]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6413      	str	r3, [r2, #64]	; 0x40
 80062fe:	4b5f      	ldr	r3, [pc, #380]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800630a:	e0b2      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM3)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5b      	ldr	r2, [pc, #364]	; (8006480 <HAL_TIM_Base_MspInit+0x1a4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006316:	2300      	movs	r3, #0
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	4b58      	ldr	r3, [pc, #352]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	4a57      	ldr	r2, [pc, #348]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	6413      	str	r3, [r2, #64]	; 0x40
 8006326:	4b55      	ldr	r3, [pc, #340]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	6a3b      	ldr	r3, [r7, #32]
}
 8006332:	e09e      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM5)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_TIM_Base_MspInit+0x1a8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10e      	bne.n	800635c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	4b4e      	ldr	r3, [pc, #312]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	4a4d      	ldr	r2, [pc, #308]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006348:	f043 0308 	orr.w	r3, r3, #8
 800634c:	6413      	str	r3, [r2, #64]	; 0x40
 800634e:	4b4b      	ldr	r3, [pc, #300]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	69fb      	ldr	r3, [r7, #28]
}
 800635a:	e08a      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM6)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a49      	ldr	r2, [pc, #292]	; (8006488 <HAL_TIM_Base_MspInit+0x1ac>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d116      	bne.n	8006394 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	4b44      	ldr	r3, [pc, #272]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	4a43      	ldr	r2, [pc, #268]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006370:	f043 0310 	orr.w	r3, r3, #16
 8006374:	6413      	str	r3, [r2, #64]	; 0x40
 8006376:	4b41      	ldr	r3, [pc, #260]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006382:	2200      	movs	r2, #0
 8006384:	2101      	movs	r1, #1
 8006386:	2036      	movs	r0, #54	; 0x36
 8006388:	f003 fc2b 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800638c:	2036      	movs	r0, #54	; 0x36
 800638e:	f003 fc44 	bl	8009c1a <HAL_NVIC_EnableIRQ>
}
 8006392:	e06e      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM7)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a3c      	ldr	r2, [pc, #240]	; (800648c <HAL_TIM_Base_MspInit+0x1b0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d116      	bne.n	80063cc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a35      	ldr	r2, [pc, #212]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063a8:	f043 0320 	orr.w	r3, r3, #32
 80063ac:	6413      	str	r3, [r2, #64]	; 0x40
 80063ae:	4b33      	ldr	r3, [pc, #204]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2102      	movs	r1, #2
 80063be:	2037      	movs	r0, #55	; 0x37
 80063c0:	f003 fc0f 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80063c4:	2037      	movs	r0, #55	; 0x37
 80063c6:	f003 fc28 	bl	8009c1a <HAL_NVIC_EnableIRQ>
}
 80063ca:	e052      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM10)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <HAL_TIM_Base_MspInit+0x1b4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d116      	bne.n	8006404 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	4b28      	ldr	r3, [pc, #160]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	4a27      	ldr	r2, [pc, #156]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e4:	6453      	str	r3, [r2, #68]	; 0x44
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80063f2:	2200      	movs	r2, #0
 80063f4:	2102      	movs	r1, #2
 80063f6:	2019      	movs	r0, #25
 80063f8:	f003 fbf3 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80063fc:	2019      	movs	r0, #25
 80063fe:	f003 fc0c 	bl	8009c1a <HAL_NVIC_EnableIRQ>
}
 8006402:	e036      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM11)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a22      	ldr	r2, [pc, #136]	; (8006494 <HAL_TIM_Base_MspInit+0x1b8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d116      	bne.n	800643c <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800641c:	6453      	str	r3, [r2, #68]	; 0x44
 800641e:	4b17      	ldr	r3, [pc, #92]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 800642a:	2200      	movs	r2, #0
 800642c:	2102      	movs	r1, #2
 800642e:	201a      	movs	r0, #26
 8006430:	f003 fbd7 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006434:	201a      	movs	r0, #26
 8006436:	f003 fbf0 	bl	8009c1a <HAL_NVIC_EnableIRQ>
}
 800643a:	e01a      	b.n	8006472 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM13)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <HAL_TIM_Base_MspInit+0x1bc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d115      	bne.n	8006472 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	4a0b      	ldr	r2, [pc, #44]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006454:	6413      	str	r3, [r2, #64]	; 0x40
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_TIM_Base_MspInit+0x1a0>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8006462:	2200      	movs	r2, #0
 8006464:	2101      	movs	r1, #1
 8006466:	202c      	movs	r0, #44	; 0x2c
 8006468:	f003 fbbb 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800646c:	202c      	movs	r0, #44	; 0x2c
 800646e:	f003 fbd4 	bl	8009c1a <HAL_NVIC_EnableIRQ>
}
 8006472:	bf00      	nop
 8006474:	3728      	adds	r7, #40	; 0x28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800
 8006480:	40000400 	.word	0x40000400
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40001000 	.word	0x40001000
 800648c:	40001400 	.word	0x40001400
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800
 8006498:	40001c00 	.word	0x40001c00

0800649c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d11f      	bne.n	80064fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 80064c8:	f043 0302 	orr.w	r3, r3, #2
 80064cc:	6313      	str	r3, [r2, #48]	; 0x30
 80064ce:	4b1f      	ldr	r3, [pc, #124]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = mtr0_pwmA_Pin|mtr0_pwmB_Pin;
 80064da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e0:	2302      	movs	r3, #2
 80064e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e8:	2300      	movs	r3, #0
 80064ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f0:	f107 0314 	add.w	r3, r7, #20
 80064f4:	4619      	mov	r1, r3
 80064f6:	4816      	ldr	r0, [pc, #88]	; (8006550 <HAL_TIM_MspPostInit+0xb4>)
 80064f8:	f003 ffb0 	bl	800a45c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80064fc:	e022      	b.n	8006544 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a14      	ldr	r2, [pc, #80]	; (8006554 <HAL_TIM_MspPostInit+0xb8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d11d      	bne.n	8006544 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	4a0e      	ldr	r2, [pc, #56]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 8006512:	f043 0302 	orr.w	r3, r3, #2
 8006516:	6313      	str	r3, [r2, #48]	; 0x30
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_TIM_MspPostInit+0xb0>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mtr1_pwmA_Pin|mtr1_pwmB_Pin;
 8006524:	2330      	movs	r3, #48	; 0x30
 8006526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006530:	2300      	movs	r3, #0
 8006532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006534:	2302      	movs	r3, #2
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006538:	f107 0314 	add.w	r3, r7, #20
 800653c:	4619      	mov	r1, r3
 800653e:	4804      	ldr	r0, [pc, #16]	; (8006550 <HAL_TIM_MspPostInit+0xb4>)
 8006540:	f003 ff8c 	bl	800a45c <HAL_GPIO_Init>
}
 8006544:	bf00      	nop
 8006546:	3728      	adds	r7, #40	; 0x28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	40020400 	.word	0x40020400
 8006554:	40000400 	.word	0x40000400

08006558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a35      	ldr	r2, [pc, #212]	; (800664c <HAL_UART_MspInit+0xf4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d163      	bne.n	8006642 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	4b34      	ldr	r3, [pc, #208]	; (8006650 <HAL_UART_MspInit+0xf8>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a33      	ldr	r2, [pc, #204]	; (8006650 <HAL_UART_MspInit+0xf8>)
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b31      	ldr	r3, [pc, #196]	; (8006650 <HAL_UART_MspInit+0xf8>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <HAL_UART_MspInit+0xf8>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <HAL_UART_MspInit+0xf8>)
 80065a0:	f043 0308 	orr.w	r3, r3, #8
 80065a4:	6313      	str	r3, [r2, #48]	; 0x30
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <HAL_UART_MspInit+0xf8>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80065b2:	2360      	movs	r3, #96	; 0x60
 80065b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b6:	2302      	movs	r3, #2
 80065b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065be:	2303      	movs	r3, #3
 80065c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065c2:	2307      	movs	r3, #7
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4619      	mov	r1, r3
 80065cc:	4821      	ldr	r0, [pc, #132]	; (8006654 <HAL_UART_MspInit+0xfc>)
 80065ce:	f003 ff45 	bl	800a45c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065d4:	4a21      	ldr	r2, [pc, #132]	; (800665c <HAL_UART_MspInit+0x104>)
 80065d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80065d8:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065de:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065e0:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065e6:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065fa:	4b17      	ldr	r3, [pc, #92]	; (8006658 <HAL_UART_MspInit+0x100>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006600:	4b15      	ldr	r3, [pc, #84]	; (8006658 <HAL_UART_MspInit+0x100>)
 8006602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006606:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_UART_MspInit+0x100>)
 800660a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800660e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <HAL_UART_MspInit+0x100>)
 8006612:	2200      	movs	r2, #0
 8006614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006616:	4810      	ldr	r0, [pc, #64]	; (8006658 <HAL_UART_MspInit+0x100>)
 8006618:	f003 fb1e 	bl	8009c58 <HAL_DMA_Init>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006622:	f7fd f849 	bl	80036b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <HAL_UART_MspInit+0x100>)
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
 800662c:	4a0a      	ldr	r2, [pc, #40]	; (8006658 <HAL_UART_MspInit+0x100>)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	2026      	movs	r0, #38	; 0x26
 8006638:	f003 fad3 	bl	8009be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800663c:	2026      	movs	r0, #38	; 0x26
 800663e:	f003 faec 	bl	8009c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006642:	bf00      	nop
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40004400 	.word	0x40004400
 8006650:	40023800 	.word	0x40023800
 8006654:	40020c00 	.word	0x40020c00
 8006658:	20000824 	.word	0x20000824
 800665c:	40026088 	.word	0x40026088

08006660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006664:	e7fe      	b.n	8006664 <NMI_Handler+0x4>

08006666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006666:	b480      	push	{r7}
 8006668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800666a:	e7fe      	b.n	800666a <HardFault_Handler+0x4>

0800666c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006670:	e7fe      	b.n	8006670 <MemManage_Handler+0x4>

08006672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006676:	e7fe      	b.n	8006676 <BusFault_Handler+0x4>

08006678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800667c:	e7fe      	b.n	800667c <UsageFault_Handler+0x4>

0800667e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800667e:	b480      	push	{r7}
 8006680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006682:	bf00      	nop
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006690:	bf00      	nop
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800669a:	b480      	push	{r7}
 800669c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066ac:	f003 f964 	bl	8009978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066b0:	bf00      	nop
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <DMA1_Stream5_IRQHandler+0x10>)
 80066ba:	f003 fc65 	bl	8009f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000824 	.word	0x20000824

080066c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80066ce:	f005 fec1 	bl	800c454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200008dc 	.word	0x200008dc

080066dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80066e0:	4802      	ldr	r0, [pc, #8]	; (80066ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80066e2:	f005 feb7 	bl	800c454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000c0c 	.word	0x20000c0c

080066f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80066f4:	4807      	ldr	r0, [pc, #28]	; (8006714 <USART2_IRQHandler+0x24>)
 80066f6:	f006 fe17 	bl	800d328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <USART2_IRQHandler+0x24>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	d102      	bne.n	800670e <USART2_IRQHandler+0x1e>
      HAL_UART_RxCpltCallback(&huart2);
 8006708:	4802      	ldr	r0, [pc, #8]	; (8006714 <USART2_IRQHandler+0x24>)
 800670a:	f7fc f8ad 	bl	8002868 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000205c 	.word	0x2000205c

08006718 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800671c:	4802      	ldr	r0, [pc, #8]	; (8006728 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800671e:	f005 fe99 	bl	800c454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000ac4 	.word	0x20000ac4

0800672c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006730:	4802      	ldr	r0, [pc, #8]	; (800673c <TIM6_DAC_IRQHandler+0x10>)
 8006732:	f005 fe8f 	bl	800c454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000d78 	.word	0x20000d78

08006740 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006744:	4802      	ldr	r0, [pc, #8]	; (8006750 <TIM7_IRQHandler+0x10>)
 8006746:	f005 fe85 	bl	800c454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200020b0 	.word	0x200020b0

08006754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <SystemInit+0x20>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	4a05      	ldr	r2, [pc, #20]	; (8006774 <SystemInit+0x20>)
 8006760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006768:	bf00      	nop
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	789b      	ldrb	r3, [r3, #2]
 8006792:	461a      	mov	r2, r3
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f001 fa46 	bl	8007c2a <set_valve_channel>
	}
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <tank_init_control_loop>:

/**
 * Call this right before entering the control loop
 */
void tank_init_control_loop(TPC_Info* tank) {
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
	tank->Kp_error = 0,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	635a      	str	r2, [r3, #52]	; 0x34
	tank->Ki_error = 0;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
	tank->Kd_error = 0;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	63da      	str	r2, [r3, #60]	; 0x3c
	tank->PID_error_sum = 0;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	edd3 7a00 	vldr	s15, [r3]
 80067dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <tank_autopress_bang_bang>:


void tank_autopress_bang_bang(TPC_Info* tank) {
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	ed93 7a00 	vldr	s14, [r3]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_low_pres_diff)) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	edd3 7a05 	vldr	s15, [r3, #20]
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 8006812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681a:	d504      	bpl.n	8006826 <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 800681c:	2101      	movs	r1, #1
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ffaa 	bl	8006778 <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8006824:	e015      	b.n	8006852 <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	ed93 7a00 	vldr	s14, [r3]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	edd3 6a04 	vldr	s13, [r3, #16]
			+ tank->bang_bang_high_pres_diff)) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	edd3 7a06 	vldr	s15, [r3, #24]
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 800683e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	dc00      	bgt.n	800684a <tank_autopress_bang_bang+0x58>
}
 8006848:	e003      	b.n	8006852 <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff93 	bl	8006778 <actuate_tank_control_valve>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	; 0x30
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f7f9 fe0f 	bl	800048c <__aeabi_ui2d>
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <tank_PID_pressure_control+0x1d4>)
 8006874:	f7f9 ffae 	bl	80007d4 <__aeabi_ddiv>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4610      	mov	r0, r2
 800687e:	4619      	mov	r1, r3
 8006880:	f7fa f976 	bl	8000b70 <__aeabi_d2f>
 8006884:	4603      	mov	r3, r0
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
    float max_motor_delta = maxPos - curPos[tank->motor_num]; //distance from maxPos
 8006888:	4b6a      	ldr	r3, [pc, #424]	; (8006a34 <tank_PID_pressure_control+0x1d8>)
 800688a:	ed93 7a00 	vldr	s14, [r3]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	78db      	ldrb	r3, [r3, #3]
 8006892:	4a69      	ldr	r2, [pc, #420]	; (8006a38 <tank_PID_pressure_control+0x1dc>)
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	edd3 7a00 	vldr	s15, [r3]
 800689c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	edd3 7a00 	vldr	s15, [r3]
 80068b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b6:	edc7 7a08 	vstr	s15, [r7, #32]
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80068c0:	edd7 6a08 	vldr	s13, [r7, #32]
 80068c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80068c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d0:	edc7 7a07 	vstr	s15, [r7, #28]
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068da:	ed97 7a08 	vldr	s14, [r7, #32]
 80068de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80068e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	edc7 7a06 	vstr	s15, [r7, #24]
	tank->PID_prev_step_error = error;  // store for next D calculation
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44

	// Apply gains
	float Kp_term = tank->K_p * error;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80068fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a05 	vstr	s15, [r7, #20]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a04 	vstr	s15, [r7, #16]
	float Kd_term = tank->K_d * slope;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006920:	ed97 7a06 	vldr	s14, [r7, #24]
 8006924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006928:	edc7 7a03 	vstr	s15, [r7, #12]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 800692c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006930:	edd7 7a04 	vldr	s15, [r7, #16]
 8006934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006938:	ed97 7a03 	vldr	s14, [r7, #12]
 800693c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006940:	edc7 7a02 	vstr	s15, [r7, #8]

	// Limit output
	float motor_delta;
	if (PID_total_output < -curPos[tank->motor_num]) {  // Lower bound
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	4a3b      	ldr	r2, [pc, #236]	; (8006a38 <tank_PID_pressure_control+0x1dc>)
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	edd3 7a00 	vldr	s15, [r3]
 8006952:	eef1 7a67 	vneg.f32	s15, s15
 8006956:	ed97 7a02 	vldr	s14, [r7, #8]
 800695a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006962:	d50b      	bpl.n	800697c <tank_PID_pressure_control+0x120>
		motor_delta = -curPos[tank->motor_num];
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	4a33      	ldr	r2, [pc, #204]	; (8006a38 <tank_PID_pressure_control+0x1dc>)
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	edd3 7a00 	vldr	s15, [r3]
 8006972:	eef1 7a67 	vneg.f32	s15, s15
 8006976:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800697a:	e010      	b.n	800699e <tank_PID_pressure_control+0x142>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 800697c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	dd02      	ble.n	8006994 <tank_PID_pressure_control+0x138>
		motor_delta = max_motor_delta;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006992:	e004      	b.n	800699e <tank_PID_pressure_control+0x142>
	}
	else {
		motor_delta = PID_total_output;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// Actuate motor to new position
	//actuate_tank_motor_pos(tank, motor_pos + motor_delta);  Not yet lol
    targetPos[tank->motor_num] = curPos[tank->motor_num] + motor_delta;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	78db      	ldrb	r3, [r3, #3]
 80069a2:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <tank_PID_pressure_control+0x1dc>)
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	ed93 7a00 	vldr	s14, [r3]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	78db      	ldrb	r3, [r3, #3]
 80069b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80069b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069b8:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <tank_PID_pressure_control+0x1e0>)
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	edc3 7a00 	vstr	s15, [r3]
    curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	78db      	ldrb	r3, [r3, #3]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <tank_PID_pressure_control+0x1dc>)
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	ed93 7a00 	vldr	s14, [r3]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <tank_PID_pressure_control+0x1e0>)
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	edd3 7a00 	vldr	s15, [r3]
 80069de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e6:	d501      	bpl.n	80069ec <tank_PID_pressure_control+0x190>
 80069e8:	2101      	movs	r1, #1
 80069ea:	e001      	b.n	80069f0 <tank_PID_pressure_control+0x194>
 80069ec:	f04f 31ff 	mov.w	r1, #4294967295
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	78db      	ldrb	r3, [r3, #3]
 80069f4:	461a      	mov	r2, r3
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <tank_PID_pressure_control+0x1e4>)
 80069f8:	5499      	strb	r1, [r3, r2]

	// Log data
    mtr_set[tank->motor_num] = targetPos[tank->motor_num];
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	4619      	mov	r1, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	4618      	mov	r0, r3
 8006a06:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <tank_PID_pressure_control+0x1e0>)
 8006a08:	008b      	lsls	r3, r1, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	490d      	ldr	r1, [pc, #52]	; (8006a44 <tank_PID_pressure_control+0x1e8>)
 8006a10:	0083      	lsls	r3, r0, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	601a      	str	r2, [r3, #0]
    tank->Kp_error = Kp_term;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	635a      	str	r2, [r3, #52]	; 0x34
    tank->Ki_error = Ki_term;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
    tank->Kd_error = Kd_term;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a28:	bf00      	nop
 8006a2a:	3730      	adds	r7, #48	; 0x30
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	408f4000 	.word	0x408f4000
 8006a34:	20000010 	.word	0x20000010
 8006a38:	200003d8 	.word	0x200003d8
 8006a3c:	200003d0 	.word	0x200003d0
 8006a40:	200003e0 	.word	0x200003e0
 8006a44:	200003bc 	.word	0x200003bc

08006a48 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	ed93 7a00 	vldr	s14, [r3]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	d504      	bpl.n	8006a72 <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe84 	bl	8006778 <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8006a70:	e010      	b.n	8006a94 <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	ed93 7a00 	vldr	s14, [r3]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	dc00      	bgt.n	8006a8c <tank_check_control_valve_threshold+0x44>
}
 8006a8a:	e003      	b.n	8006a94 <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe72 	bl	8006778 <actuate_tank_control_valve>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	0000      	movs	r0, r0
	...

08006aa0 <tank_startup_init_motor_position>:


// TODO: refactor this bigly
void tank_startup_init_motor_position(TPC_Info* tank) {
 8006aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006aa4:	ed2d 8b02 	vpush	{d8}
 8006aa8:	b09a      	sub	sp, #104	; 0x68
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
	static double c2     = 6140;
	static double c3     = 5360;
	static double c4     = 769.8;

	double crit_pr, t_r, valve_cv, t_f, /*p_rat, t_rat,*/ q_acf, q_scf, vdot;
	double deg = 0;
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double p_i    = (double)(*(tank->COPV_pres));       // cng pressure
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7f9 fd05 	bl	80004d0 <__aeabi_f2d>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double p_o    = (double)(*(tank->control_pres));     // tank pressure
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7f9 fcfb 	bl	80004d0 <__aeabi_f2d>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Avoid divide by zero error
	if (p_i == 0) {
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006aee:	f7f9 ffaf 	bl	8000a50 <__aeabi_dcmpeq>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <tank_startup_init_motor_position+0x62>
		p_i = 0.1;
 8006af8:	a392      	add	r3, pc, #584	; (adr r3, 8006d44 <tank_startup_init_motor_position+0x2a4>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (p_o == 0) {
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006b0e:	f7f9 ff9f 	bl	8000a50 <__aeabi_dcmpeq>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <tank_startup_init_motor_position+0x82>
		p_o = 0.1;
 8006b18:	a38a      	add	r3, pc, #552	; (adr r3, 8006d44 <tank_startup_init_motor_position+0x2a4>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	t_f = 300; // K  TODO: what are these, and why aren't they also static?
 8006b22:	a38a      	add	r3, pc, #552	; (adr r3, 8006d4c <tank_startup_init_motor_position+0x2ac>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_std = 288; // K
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	4b7f      	ldr	r3, [pc, #508]	; (8006d30 <tank_startup_init_motor_position+0x290>)
 8006b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p_std = 14.7; // psi
 8006b36:	a372      	add	r3, pc, #456	; (adr r3, 8006d00 <tank_startup_init_motor_position+0x260>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (tank->is_cryogenic) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <tank_startup_init_motor_position+0xb4>
		vdot   = 0.00317;
 8006b48:	a36f      	add	r3, pc, #444	; (adr r3, 8006d08 <tank_startup_init_motor_position+0x268>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006b52:	e004      	b.n	8006b5e <tank_startup_init_motor_position+0xbe>
	}
	else {
		vdot   = 0.00361;
 8006b54:	a36e      	add	r3, pc, #440	; (adr r3, 8006d10 <tank_startup_init_motor_position+0x270>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	// Calculations
	crit_pr = pow(2.0 / (gamma + 1), gamma / (gamma - 1));
 8006b5e:	4b75      	ldr	r3, [pc, #468]	; (8006d34 <tank_startup_init_motor_position+0x294>)
 8006b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	4b73      	ldr	r3, [pc, #460]	; (8006d38 <tank_startup_init_motor_position+0x298>)
 8006b6a:	f7f9 fb53 	bl	8000214 <__adddf3>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b7a:	f7f9 fe2b 	bl	80007d4 <__aeabi_ddiv>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	ec43 2b18 	vmov	d8, r2, r3
 8006b86:	4b6b      	ldr	r3, [pc, #428]	; (8006d34 <tank_startup_init_motor_position+0x294>)
 8006b88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b8c:	4b69      	ldr	r3, [pc, #420]	; (8006d34 <tank_startup_init_motor_position+0x294>)
 8006b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	4b68      	ldr	r3, [pc, #416]	; (8006d38 <tank_startup_init_motor_position+0x298>)
 8006b98:	f7f9 fb3a 	bl	8000210 <__aeabi_dsub>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fe16 	bl	80007d4 <__aeabi_ddiv>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	ec43 2b17 	vmov	d7, r2, r3
 8006bb0:	eeb0 1a47 	vmov.f32	s2, s14
 8006bb4:	eef0 1a67 	vmov.f32	s3, s15
 8006bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bbc:	eef0 0a68 	vmov.f32	s1, s17
 8006bc0:	f007 fd3a 	bl	800e638 <pow>
 8006bc4:	ed87 0b06 	vstr	d0, [r7, #24]
	t_r     = (double)(300) * (9.0/5);  // Hardcoded temp bc tcs are buggy
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	4b5b      	ldr	r3, [pc, #364]	; (8006d3c <tank_startup_init_motor_position+0x29c>)
 8006bce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// TODO: uncomment that when tcs are fixed
	//t_r     = (double)(*(tank->COPV_temp)) * (9.0/5);
	q_acf = vdot*2118.88; // cfm
 8006bd2:	a351      	add	r3, pc, #324	; (adr r3, 8006d18 <tank_startup_init_motor_position+0x278>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006bdc:	f7f9 fcd0 	bl	8000580 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (tank->is_cryogenic) { // cryogenic liquid case
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <tank_startup_init_motor_position+0x188>
		q_scf = q_acf*p_o/(p_std)*1.3;
 8006bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bf8:	f7f9 fcc2 	bl	8000580 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4610      	mov	r0, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c08:	f7f9 fde4 	bl	80007d4 <__aeabi_ddiv>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	a342      	add	r3, pc, #264	; (adr r3, 8006d20 <tank_startup_init_motor_position+0x280>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fcb1 	bl	8000580 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8006c26:	e021      	b.n	8006c6c <tank_startup_init_motor_position+0x1cc>
	}
	else {
		q_scf = q_acf*p_o*t_std/(p_std*t_f);
 8006c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c30:	f7f9 fca6 	bl	8000580 <__aeabi_dmul>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c40:	f7f9 fc9e 	bl	8000580 <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c54:	f7f9 fc94 	bl	8000580 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fdb8 	bl	80007d4 <__aeabi_ddiv>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	if (crit_pr >= p_o/p_i) { // Critical flows
 8006c6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c74:	f7f9 fdae 	bl	80007d4 <__aeabi_ddiv>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c80:	f7f9 ff04 	bl	8000a8c <__aeabi_dcmpge>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d064      	beq.n	8006d54 <tank_startup_init_motor_position+0x2b4>
		valve_cv = q_scf/13.61/p_i/sqrt(1.0/sg/t_r);
 8006c8a:	a327      	add	r3, pc, #156	; (adr r3, 8006d28 <tank_startup_init_motor_position+0x288>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c94:	f7f9 fd9e 	bl	80007d4 <__aeabi_ddiv>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ca4:	f7f9 fd96 	bl	80007d4 <__aeabi_ddiv>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4614      	mov	r4, r2
 8006cae:	461d      	mov	r5, r3
 8006cb0:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <tank_startup_init_motor_position+0x2a0>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f04f 0000 	mov.w	r0, #0
 8006cba:	491f      	ldr	r1, [pc, #124]	; (8006d38 <tank_startup_init_motor_position+0x298>)
 8006cbc:	f7f9 fd8a 	bl	80007d4 <__aeabi_ddiv>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ccc:	f7f9 fd82 	bl	80007d4 <__aeabi_ddiv>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	ec43 2b17 	vmov	d7, r2, r3
 8006cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8006cdc:	eef0 0a67 	vmov.f32	s1, s15
 8006ce0:	f007 fd58 	bl	800e794 <sqrt>
 8006ce4:	ec53 2b10 	vmov	r2, r3, d0
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f7f9 fd72 	bl	80007d4 <__aeabi_ddiv>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8006cf8:	e070      	b.n	8006ddc <tank_startup_init_motor_position+0x33c>
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w
 8006d00:	66666666 	.word	0x66666666
 8006d04:	402d6666 	.word	0x402d6666
 8006d08:	ca8198f2 	.word	0xca8198f2
 8006d0c:	3f69f7f8 	.word	0x3f69f7f8
 8006d10:	fe08aefb 	.word	0xfe08aefb
 8006d14:	3f6d92b7 	.word	0x3f6d92b7
 8006d18:	8f5c28f6 	.word	0x8f5c28f6
 8006d1c:	40a08dc2 	.word	0x40a08dc2
 8006d20:	cccccccd 	.word	0xcccccccd
 8006d24:	3ff4cccc 	.word	0x3ff4cccc
 8006d28:	eb851eb8 	.word	0xeb851eb8
 8006d2c:	402b3851 	.word	0x402b3851
 8006d30:	40720000 	.word	0x40720000
 8006d34:	200001b8 	.word	0x200001b8
 8006d38:	3ff00000 	.word	0x3ff00000
 8006d3c:	4080e000 	.word	0x4080e000
 8006d40:	200001c0 	.word	0x200001c0
 8006d44:	9999999a 	.word	0x9999999a
 8006d48:	3fb99999 	.word	0x3fb99999
 8006d4c:	00000000 	.word	0x00000000
 8006d50:	4072c000 	.word	0x4072c000
	} else {
		valve_cv = q_scf/16.05/sqrt((pow(p_i,2)-pow(p_o,2))/sg/t_r);
 8006d54:	a397      	add	r3, pc, #604	; (adr r3, 8006fb4 <tank_startup_init_motor_position+0x514>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d5e:	f7f9 fd39 	bl	80007d4 <__aeabi_ddiv>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	461d      	mov	r5, r3
 8006d6a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8006f68 <tank_startup_init_motor_position+0x4c8>
 8006d6e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006d72:	f007 fc61 	bl	800e638 <pow>
 8006d76:	ec59 8b10 	vmov	r8, r9, d0
 8006d7a:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8006f68 <tank_startup_init_motor_position+0x4c8>
 8006d7e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006d82:	f007 fc59 	bl	800e638 <pow>
 8006d86:	ec53 2b10 	vmov	r2, r3, d0
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	f7f9 fa3f 	bl	8000210 <__aeabi_dsub>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4b7b      	ldr	r3, [pc, #492]	; (8006f88 <tank_startup_init_motor_position+0x4e8>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f7f9 fd18 	bl	80007d4 <__aeabi_ddiv>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4610      	mov	r0, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006db0:	f7f9 fd10 	bl	80007d4 <__aeabi_ddiv>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	ec43 2b17 	vmov	d7, r2, r3
 8006dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8006dc0:	eef0 0a67 	vmov.f32	s1, s15
 8006dc4:	f007 fce6 	bl	800e794 <sqrt>
 8006dc8:	ec53 2b10 	vmov	r2, r3, d0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fd00 	bl	80007d4 <__aeabi_ddiv>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006ddc:	4b6b      	ldr	r3, [pc, #428]	; (8006f8c <tank_startup_init_motor_position+0x4ec>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fb75 	bl	80004d0 <__aeabi_f2d>
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
 8006dea:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8006f70 <tank_startup_init_motor_position+0x4d0>
 8006dee:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006df2:	f007 fc21 	bl	800e638 <pow>
 8006df6:	ec51 0b10 	vmov	r0, r1, d0
 8006dfa:	4b65      	ldr	r3, [pc, #404]	; (8006f90 <tank_startup_init_motor_position+0x4f0>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fbbe 	bl	8000580 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4690      	mov	r8, r2
 8006e0a:	4699      	mov	r9, r3
		  c2*pow(valve_cv, 3) +
 8006e0c:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8006f78 <tank_startup_init_motor_position+0x4d8>
 8006e10:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e14:	f007 fc10 	bl	800e638 <pow>
 8006e18:	ec51 0b10 	vmov	r0, r1, d0
 8006e1c:	4b5d      	ldr	r3, [pc, #372]	; (8006f94 <tank_startup_init_motor_position+0x4f4>)
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f7f9 fbad 	bl	8000580 <__aeabi_dmul>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 f9f1 	bl	8000214 <__adddf3>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4690      	mov	r8, r2
 8006e38:	4699      	mov	r9, r3
		  c3*pow(valve_cv, 2) +
 8006e3a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8006f68 <tank_startup_init_motor_position+0x4c8>
 8006e3e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006e42:	f007 fbf9 	bl	800e638 <pow>
 8006e46:	ec51 0b10 	vmov	r0, r1, d0
 8006e4a:	4b53      	ldr	r3, [pc, #332]	; (8006f98 <tank_startup_init_motor_position+0x4f8>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fb96 	bl	8000580 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
		  c2*pow(valve_cv, 3) +
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 f9da 	bl	8000214 <__adddf3>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4690      	mov	r8, r2
 8006e66:	4699      	mov	r9, r3
		  c4*valve_cv);
 8006e68:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <tank_startup_init_motor_position+0x4fc>)
 8006e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e72:	f7f9 fb85 	bl	8000580 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
		  c3*pow(valve_cv, 2) +
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 f9c9 	bl	8000214 <__adddf3>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fb79 	bl	8000580 <__aeabi_dmul>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Output limiting
	if (deg < 0) { deg = 0; }
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ea2:	f7f9 fddf 	bl	8000a64 <__aeabi_dcmplt>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <tank_startup_init_motor_position+0x418>
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (deg > 2460) { deg = 2460; }
 8006eb8:	a331      	add	r3, pc, #196	; (adr r3, 8006f80 <tank_startup_init_motor_position+0x4e0>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ec2:	f7f9 fded 	bl	8000aa0 <__aeabi_dcmpgt>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <tank_startup_init_motor_position+0x436>
 8006ecc:	a32c      	add	r3, pc, #176	; (adr r3, 8006f80 <tank_startup_init_motor_position+0x4e0>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	// TODO: where does 2460 come from?

	// TODO: Why is the direction manually set here?
	// can it just be the shortest path?
	if (tank->tank_enable) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d039      	beq.n	8006f54 <tank_startup_init_motor_position+0x4b4>
		manual_stepper_pos_override[tank->motor_num] = 1;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	78db      	ldrb	r3, [r3, #3]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <tank_startup_init_motor_position+0x500>)
 8006ee8:	2101      	movs	r1, #1
 8006eea:	5499      	strb	r1, [r3, r2]
		targetPos[tank->motor_num] = deg; // position given in deg
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	78db      	ldrb	r3, [r3, #3]
 8006ef0:	461c      	mov	r4, r3
 8006ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ef6:	f7f9 fe3b 	bl	8000b70 <__aeabi_d2f>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4929      	ldr	r1, [pc, #164]	; (8006fa4 <tank_startup_init_motor_position+0x504>)
 8006efe:	00a3      	lsls	r3, r4, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	601a      	str	r2, [r3, #0]
		curDir[tank->motor_num] = (curPos[tank->motor_num] < targetPos[tank->motor_num]) ? 1 : -1; // CCW facing the motor
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	78db      	ldrb	r3, [r3, #3]
 8006f08:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <tank_startup_init_motor_position+0x508>)
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	ed93 7a00 	vldr	s14, [r3]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	78db      	ldrb	r3, [r3, #3]
 8006f16:	4a23      	ldr	r2, [pc, #140]	; (8006fa4 <tank_startup_init_motor_position+0x504>)
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	edd3 7a00 	vldr	s15, [r3]
 8006f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f28:	d501      	bpl.n	8006f2e <tank_startup_init_motor_position+0x48e>
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	e001      	b.n	8006f32 <tank_startup_init_motor_position+0x492>
 8006f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	78db      	ldrb	r3, [r3, #3]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <tank_startup_init_motor_position+0x50c>)
 8006f3a:	5499      	strb	r1, [r3, r2]
		mtr_set[tank->motor_num] = deg; // save new motor position setpoint
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	78db      	ldrb	r3, [r3, #3]
 8006f40:	461c      	mov	r4, r3
 8006f42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f46:	f7f9 fe13 	bl	8000b70 <__aeabi_d2f>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4918      	ldr	r1, [pc, #96]	; (8006fb0 <tank_startup_init_motor_position+0x510>)
 8006f4e:	00a3      	lsls	r3, r4, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	601a      	str	r2, [r3, #0]
	}
}
 8006f54:	bf00      	nop
 8006f56:	3768      	adds	r7, #104	; 0x68
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	ecbd 8b02 	vpop	{d8}
 8006f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f62:	bf00      	nop
 8006f64:	f3af 8000 	nop.w
 8006f68:	00000000 	.word	0x00000000
 8006f6c:	40000000 	.word	0x40000000
 8006f70:	00000000 	.word	0x00000000
 8006f74:	40100000 	.word	0x40100000
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	40080000 	.word	0x40080000
 8006f80:	00000000 	.word	0x00000000
 8006f84:	40a33800 	.word	0x40a33800
 8006f88:	200001c0 	.word	0x200001c0
 8006f8c:	20000310 	.word	0x20000310
 8006f90:	200001c8 	.word	0x200001c8
 8006f94:	200001d0 	.word	0x200001d0
 8006f98:	200001d8 	.word	0x200001d8
 8006f9c:	200001e0 	.word	0x200001e0
 8006fa0:	200003cc 	.word	0x200003cc
 8006fa4:	200003d0 	.word	0x200003d0
 8006fa8:	200003d8 	.word	0x200003d8
 8006fac:	200003e0 	.word	0x200003e0
 8006fb0:	200003bc 	.word	0x200003bc
 8006fb4:	cccccccd 	.word	0xcccccccd
 8006fb8:	40300ccc 	.word	0x40300ccc

08006fbc <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	061a      	lsls	r2, r3, #24
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	7812      	ldrb	r2, [r2, #0]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// Don't allow operator intervention during the autosequence
	if (STATE == Ignition ||
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <set_vlv+0x68>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d011      	beq.n	800701c <set_vlv+0x60>
			STATE == Hotfire ||
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <set_vlv+0x68>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
	if (STATE == Ignition ||
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d00d      	beq.n	800701c <set_vlv+0x60>
			STATE == Post ||
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <set_vlv+0x68>)
 8007002:	781b      	ldrb	r3, [r3, #0]
			STATE == Hotfire ||
 8007004:	2b07      	cmp	r3, #7
 8007006:	d009      	beq.n	800701c <set_vlv+0x60>
			STATE == Abort) {
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <set_vlv+0x68>)
 800700a:	781b      	ldrb	r3, [r3, #0]
			STATE == Post ||
 800700c:	2b06      	cmp	r3, #6
 800700e:	d005      	beq.n	800701c <set_vlv+0x60>
		return;
	}
	else {
		set_valve_channel(vlv_num, state);
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	4619      	mov	r1, r3
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fe08 	bl	8007c2a <set_valve_channel>
 800701a:	e000      	b.n	800701e <set_vlv+0x62>
		return;
 800701c:	bf00      	nop
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	200002dc 	.word	0x200002dc

08007028 <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3308      	adds	r3, #8
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	2338      	movs	r3, #56	; 0x38
 8007042:	409a      	lsls	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3307      	adds	r3, #7
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4619      	mov	r1, r3
 800704c:	2330      	movs	r3, #48	; 0x30
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3306      	adds	r3, #6
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	2328      	movs	r3, #40	; 0x28
 800705e:	fa01 f303 	lsl.w	r3, r1, r3
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3305      	adds	r3, #5
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	2320      	movs	r3, #32
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	061b      	lsls	r3, r3, #24
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3303      	adds	r3, #3
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	041b      	lsls	r3, r3, #16
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3302      	adds	r3, #2
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	4313      	orrs	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	3201      	adds	r2, #1
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	4313      	orrs	r3, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 fa06 	bl	80004ac <__aeabi_i2d>
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <set_kp+0xb8>)
 80070a6:	f7f9 fb95 	bl	80007d4 <__aeabi_ddiv>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d80e      	bhi.n	80070d6 <set_kp+0xae>
		tanks[motor_num].K_p = gain;
 80070b8:	7dfc      	ldrb	r4, [r7, #23]
 80070ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070be:	f7f9 fd57 	bl	8000b70 <__aeabi_d2f>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4907      	ldr	r1, [pc, #28]	; (80070e4 <set_kp+0xbc>)
 80070c6:	2354      	movs	r3, #84	; 0x54
 80070c8:	fb03 f304 	mul.w	r3, r3, r4
 80070cc:	440b      	add	r3, r1
 80070ce:	3328      	adds	r3, #40	; 0x28
 80070d0:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80070d2:	f7fc fd59 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	40590000 	.word	0x40590000
 80070e4:	200005b4 	.word	0x200005b4

080070e8 <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3308      	adds	r3, #8
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	2338      	movs	r3, #56	; 0x38
 8007102:	409a      	lsls	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3307      	adds	r3, #7
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	2330      	movs	r3, #48	; 0x30
 800710e:	fa01 f303 	lsl.w	r3, r1, r3
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3306      	adds	r3, #6
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	2328      	movs	r3, #40	; 0x28
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3305      	adds	r3, #5
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	2320      	movs	r3, #32
 800712e:	fa01 f303 	lsl.w	r3, r1, r3
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3304      	adds	r3, #4
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	061b      	lsls	r3, r3, #24
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3303      	adds	r3, #3
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3302      	adds	r3, #2
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	4313      	orrs	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	3201      	adds	r2, #1
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	4313      	orrs	r3, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7f9 f9a6 	bl	80004ac <__aeabi_i2d>
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <set_ki+0xb8>)
 8007166:	f7f9 fb35 	bl	80007d4 <__aeabi_ddiv>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d80e      	bhi.n	8007196 <set_ki+0xae>
		tanks[motor_num].K_i = gain;
 8007178:	7dfc      	ldrb	r4, [r7, #23]
 800717a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800717e:	f7f9 fcf7 	bl	8000b70 <__aeabi_d2f>
 8007182:	4602      	mov	r2, r0
 8007184:	4907      	ldr	r1, [pc, #28]	; (80071a4 <set_ki+0xbc>)
 8007186:	2354      	movs	r3, #84	; 0x54
 8007188:	fb03 f304 	mul.w	r3, r3, r4
 800718c:	440b      	add	r3, r1
 800718e:	332c      	adds	r3, #44	; 0x2c
 8007190:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007192:	f7fc fcf9 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	bd90      	pop	{r4, r7, pc}
 800719e:	bf00      	nop
 80071a0:	40590000 	.word	0x40590000
 80071a4:	200005b4 	.word	0x200005b4

080071a8 <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3308      	adds	r3, #8
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	2338      	movs	r3, #56	; 0x38
 80071c2:	409a      	lsls	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3307      	adds	r3, #7
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	2330      	movs	r3, #48	; 0x30
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3306      	adds	r3, #6
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	4619      	mov	r1, r3
 80071dc:	2328      	movs	r3, #40	; 0x28
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3305      	adds	r3, #5
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	4619      	mov	r1, r3
 80071ec:	2320      	movs	r3, #32
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	061b      	lsls	r3, r3, #24
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3303      	adds	r3, #3
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3302      	adds	r3, #2
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	4313      	orrs	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	3201      	adds	r2, #1
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	4313      	orrs	r3, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 f946 	bl	80004ac <__aeabi_i2d>
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <set_kd+0xb8>)
 8007226:	f7f9 fad5 	bl	80007d4 <__aeabi_ddiv>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d80e      	bhi.n	8007256 <set_kd+0xae>
		tanks[motor_num].K_d = gain;
 8007238:	7dfc      	ldrb	r4, [r7, #23]
 800723a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800723e:	f7f9 fc97 	bl	8000b70 <__aeabi_d2f>
 8007242:	4602      	mov	r2, r0
 8007244:	4907      	ldr	r1, [pc, #28]	; (8007264 <set_kd+0xbc>)
 8007246:	2354      	movs	r3, #84	; 0x54
 8007248:	fb03 f304 	mul.w	r3, r3, r4
 800724c:	440b      	add	r3, r1
 800724e:	3330      	adds	r3, #48	; 0x30
 8007250:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007252:	f7fc fc99 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}
 800725e:	bf00      	nop
 8007260:	40590000 	.word	0x40590000
 8007264:	200005b4 	.word	0x200005b4

08007268 <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 fffa 	bl	8001274 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 8007292:	f7fe feb7 	bl	8006004 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 80072aa:	4803      	ldr	r0, [pc, #12]	; (80072b8 <wipe_flash+0x18>)
 80072ac:	f002 fa57 	bl	800975e <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20002288 	.word	0x20002288

080072bc <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <start_logging+0x28>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 80072cc:	2201      	movs	r2, #1
 80072ce:	2101      	movs	r1, #1
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <start_logging+0x2c>)
 80072d2:	f003 fa6f 	bl	800a7b4 <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 80072d6:	4805      	ldr	r0, [pc, #20]	; (80072ec <start_logging+0x30>)
 80072d8:	f002 fade 	bl	8009898 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000320 	.word	0x20000320
 80072e8:	40020800 	.word	0x40020800
 80072ec:	20002288 	.word	0x20002288

080072f0 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 80072fa:	4b07      	ldr	r3, [pc, #28]	; (8007318 <stop_logging+0x28>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 8007300:	4806      	ldr	r0, [pc, #24]	; (800731c <stop_logging+0x2c>)
 8007302:	f002 f9b9 	bl	8009678 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 8007306:	2200      	movs	r2, #0
 8007308:	2102      	movs	r1, #2
 800730a:	4805      	ldr	r0, [pc, #20]	; (8007320 <stop_logging+0x30>)
 800730c:	f003 fa52 	bl	800a7b4 <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000320 	.word	0x20000320
 800731c:	20002288 	.word	0x20002288
 8007320:	40020800 	.word	0x40020800

08007324 <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	061a      	lsls	r2, r3, #24
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3303      	adds	r3, #3
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3302      	adds	r3, #2
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	4313      	orrs	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	3201      	adds	r2, #1
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7f9 f8a7 	bl	80004ac <__aeabi_i2d>
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <set_stepper_pos+0xb4>)
 8007364:	f7f9 fa36 	bl	80007d4 <__aeabi_ddiv>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4610      	mov	r0, r2
 800736e:	4619      	mov	r1, r3
 8007370:	f7f9 fbfe 	bl	8000b70 <__aeabi_d2f>
 8007374:	4603      	mov	r3, r0
 8007376:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d827      	bhi.n	80073ce <set_stepper_pos+0xaa>
		manual_stepper_pos_override[motor_num] = 1;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <set_stepper_pos+0xb8>)
 8007382:	2101      	movs	r1, #1
 8007384:	54d1      	strb	r1, [r2, r3]
		targetPos[motor_num] = position; // position converted form deg to steps
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <set_stepper_pos+0xbc>)
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	601a      	str	r2, [r3, #0]
		curDir[motor_num] = (curPos[motor_num] < targetPos[motor_num]) ? 1 : -1; // CCW facing the motor
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <set_stepper_pos+0xc0>)
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	ed93 7a00 	vldr	s14, [r3]
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <set_stepper_pos+0xbc>)
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	edd3 7a00 	vldr	s15, [r3]
 80073aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	d501      	bpl.n	80073b8 <set_stepper_pos+0x94>
 80073b4:	2101      	movs	r1, #1
 80073b6:	e001      	b.n	80073bc <set_stepper_pos+0x98>
 80073b8:	f04f 31ff 	mov.w	r1, #4294967295
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <set_stepper_pos+0xc4>)
 80073c0:	54d1      	strb	r1, [r2, r3]
		mtr_set[motor_num] = position; // save new motor position setpoint
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	4a09      	ldr	r2, [pc, #36]	; (80073ec <set_stepper_pos+0xc8>)
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	601a      	str	r2, [r3, #0]
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40590000 	.word	0x40590000
 80073dc:	200003cc 	.word	0x200003cc
 80073e0:	200003d0 	.word	0x200003d0
 80073e4:	200003d8 	.word	0x200003d8
 80073e8:	200003e0 	.word	0x200003e0
 80073ec:	200003bc 	.word	0x200003bc

080073f0 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d80d      	bhi.n	8007422 <set_stepper_zero+0x32>
	    mtr_pos[motor_num] = 0;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <set_stepper_zero+0x40>)
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
	    curPos[motor_num] = 0;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <set_stepper_zero+0x44>)
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
		//L6470_zero_motor(&(tanks[motor_num].motor));
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000398 	.word	0x20000398
 8007434:	200003d8 	.word	0x200003d8

08007438 <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	061a      	lsls	r2, r3, #24
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3303      	adds	r3, #3
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3302      	adds	r3, #2
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	4313      	orrs	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	3201      	adds	r2, #1
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	4313      	orrs	r3, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7f9 f81d 	bl	80004ac <__aeabi_i2d>
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <set_control_target_pressure+0x78>)
 8007478:	f7f9 f9ac 	bl	80007d4 <__aeabi_ddiv>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4610      	mov	r0, r2
 8007482:	4619      	mov	r1, r3
 8007484:	f7f9 fb74 	bl	8000b70 <__aeabi_d2f>
 8007488:	4603      	mov	r3, r0
 800748a:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d80a      	bhi.n	80074a8 <set_control_target_pressure+0x70>
		tanks[tank_num].target_pres = target_pressure;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <set_control_target_pressure+0x7c>)
 8007496:	2154      	movs	r1, #84	; 0x54
 8007498:	fb01 f303 	mul.w	r3, r1, r3
 800749c:	4413      	add	r3, r2
 800749e:	3310      	adds	r3, #16
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80074a4:	f7fc fb70 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	408f4000 	.word	0x408f4000
 80074b4:	200005b4 	.word	0x200005b4

080074b8 <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
 80074c6:	e016      	b.n	80074f6 <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <ambientize_pressure_transducers+0x50>)
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	ed93 7a00 	vldr	s14, [r3]
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4a0d      	ldr	r2, [pc, #52]	; (800750c <ambientize_pressure_transducers+0x54>)
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	edd3 7a00 	vldr	s15, [r3]
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <ambientize_pressure_transducers+0x54>)
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	3301      	adds	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	d9e5      	bls.n	80074c8 <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 80074fc:	f7fc fb44 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000324 	.word	0x20000324
 800750c:	20000274 	.word	0x20000274

08007510 <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	061a      	lsls	r2, r3, #24
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3303      	adds	r3, #3
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3302      	adds	r3, #2
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	4313      	orrs	r3, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	3201      	adds	r2, #1
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7f8 ffb1 	bl	80004ac <__aeabi_i2d>
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <set_low_toggle_percent+0x94>)
 8007550:	f7f9 f940 	bl	80007d4 <__aeabi_ddiv>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	f7f9 fb08 	bl	8000b70 <__aeabi_d2f>
 8007560:	4603      	mov	r3, r0
 8007562:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d817      	bhi.n	800759a <set_low_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	4a0e      	ldr	r2, [pc, #56]	; (80075a8 <set_low_toggle_percent+0x98>)
 800756e:	2154      	movs	r1, #84	; 0x54
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	4413      	add	r3, r2
 8007576:	3310      	adds	r3, #16
 8007578:	ed93 7a00 	vldr	s14, [r3]
 800757c:	7bfb      	ldrb	r3, [r7, #15]
				* lower_threshold_pct;
 800757e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 8007586:	4a08      	ldr	r2, [pc, #32]	; (80075a8 <set_low_toggle_percent+0x98>)
 8007588:	2154      	movs	r1, #84	; 0x54
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	331c      	adds	r3, #28
 8007592:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8007596:	f7fc faf7 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	408f4000 	.word	0x408f4000
 80075a8:	200005b4 	.word	0x200005b4

080075ac <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	061a      	lsls	r2, r3, #24
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3303      	adds	r3, #3
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3302      	adds	r3, #2
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	4313      	orrs	r3, r2
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	3201      	adds	r2, #1
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f8 ff63 	bl	80004ac <__aeabi_i2d>
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	4b15      	ldr	r3, [pc, #84]	; (8007640 <set_high_toggle_percent+0x94>)
 80075ec:	f7f9 f8f2 	bl	80007d4 <__aeabi_ddiv>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f7f9 faba 	bl	8000b70 <__aeabi_d2f>
 80075fc:	4603      	mov	r3, r0
 80075fe:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d817      	bhi.n	8007636 <set_high_toggle_percent+0x8a>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <set_high_toggle_percent+0x98>)
 800760a:	2154      	movs	r1, #84	; 0x54
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	3310      	adds	r3, #16
 8007614:	ed93 7a00 	vldr	s14, [r3]
 8007618:	7bfb      	ldrb	r3, [r7, #15]
				* upper_threshold_pct;
 800761a:	edd7 7a02 	vldr	s15, [r7, #8]
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8007622:	4a08      	ldr	r2, [pc, #32]	; (8007644 <set_high_toggle_percent+0x98>)
 8007624:	2154      	movs	r1, #84	; 0x54
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	3320      	adds	r3, #32
 800762e:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8007632:	f7fc faa9 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	408f4000 	.word	0x408f4000
 8007644:	200005b4 	.word	0x200005b4

08007648 <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	telem_disabled = state;
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <set_telem+0x24>)
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	7013      	strb	r3, [r2, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200005b1 	.word	0x200005b1

08007670 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d809      	bhi.n	80076a0 <set_presstank_status+0x30>
		tanks[tank_num].tank_enable = state;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	4a06      	ldr	r2, [pc, #24]	; (80076a8 <set_presstank_status+0x38>)
 8007690:	2154      	movs	r1, #84	; 0x54
 8007692:	fb01 f303 	mul.w	r3, r1, r3
 8007696:	4413      	add	r3, r2
 8007698:	7bba      	ldrb	r2, [r7, #14]
 800769a:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 800769c:	f7fc fa74 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	200005b4 	.word	0x200005b4

080076ac <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pot_num < NUM_POTS) {
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d815      	bhi.n	80076ee <ambientize_pot+0x42>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[pot_num] = -epot[pot_num]+pot_ambients[pot_num];
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <ambientize_pot+0x4c>)
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	ed93 7a00 	vldr	s14, [r3]
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <ambientize_pot+0x50>)
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	edd3 7a00 	vldr	s15, [r3]
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e0:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <ambientize_pot+0x4c>)
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 80076ea:	f7fc fa4d 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	2000028c 	.word	0x2000028c
 80076fc:	200003c4 	.word	0x200003c4

08007700 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d827      	bhi.n	800776c <led_write+0x6c>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <led_write+0x24>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007735 	.word	0x08007735
 8007728:	08007743 	.word	0x08007743
 800772c:	08007751 	.word	0x08007751
 8007730:	0800775f 	.word	0x0800775f
	case 0:
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state);
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	461a      	mov	r2, r3
 8007738:	2101      	movs	r1, #1
 800773a:	480f      	ldr	r0, [pc, #60]	; (8007778 <led_write+0x78>)
 800773c:	f003 f83a 	bl	800a7b4 <HAL_GPIO_WritePin>
		break;
 8007740:	e015      	b.n	800776e <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	461a      	mov	r2, r3
 8007746:	2102      	movs	r1, #2
 8007748:	480b      	ldr	r0, [pc, #44]	; (8007778 <led_write+0x78>)
 800774a:	f003 f833 	bl	800a7b4 <HAL_GPIO_WritePin>
		break;
 800774e:	e00e      	b.n	800776e <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	461a      	mov	r2, r3
 8007754:	2104      	movs	r1, #4
 8007756:	4808      	ldr	r0, [pc, #32]	; (8007778 <led_write+0x78>)
 8007758:	f003 f82c 	bl	800a7b4 <HAL_GPIO_WritePin>
		break;
 800775c:	e007      	b.n	800776e <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	461a      	mov	r2, r3
 8007762:	2108      	movs	r1, #8
 8007764:	4804      	ldr	r0, [pc, #16]	; (8007778 <led_write+0x78>)
 8007766:	f003 f825 	bl	800a7b4 <HAL_GPIO_WritePin>
		break;
 800776a:	e000      	b.n	800776e <led_write+0x6e>
	default:
		break;
 800776c:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40020800 	.word	0x40020800

0800777c <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3303      	adds	r3, #3
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	061a      	lsls	r2, r3, #24
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3302      	adds	r3, #2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	4313      	orrs	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <set_system_clock+0x44>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20000934 	.word	0x20000934

080077c4 <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
 80077d2:	e009      	b.n	80077e8 <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <remove_pressure_ambients+0x38>)
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	3301      	adds	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d9f2      	bls.n	80077d4 <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 80077ee:	f7fc f9cb 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000274 	.word	0x20000274

08007800 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_delay_ms = mpv_delay_ms;
 8007810:	4a04      	ldr	r2, [pc, #16]	; (8007824 <set_fuel_mpv_on_delay+0x24>)
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	7213      	strb	r3, [r2, #8]
	save_nonvolatile_variables();
 8007816:	f7fc f9b7 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000065c 	.word	0x2000065c

08007828 <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3303      	adds	r3, #3
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	061a      	lsls	r2, r3, #24
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3302      	adds	r3, #2
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3301      	adds	r3, #1
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	4313      	orrs	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_test_duration_ms = engine_test_duration_ms;
 8007856:	4a04      	ldr	r2, [pc, #16]	; (8007868 <set_engine_test_duration+0x40>)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6153      	str	r3, [r2, #20]
	save_nonvolatile_variables();
 800785c:	f7fc f994 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	2000065c 	.word	0x2000065c

0800786c <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3301      	adds	r3, #1
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	b21a      	sxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	b21b      	sxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b21b      	sxth	r3, r3
 800788a:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 800788c:	4a04      	ldr	r2, [pc, #16]	; (80078a0 <set_pid_start_delay+0x34>)
 800788e:	89fb      	ldrh	r3, [r7, #14]
 8007890:	8193      	strh	r3, [r2, #12]
	save_nonvolatile_variables();
 8007892:	f7fc f979 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2000065c 	.word	0x2000065c

080078a4 <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3301      	adds	r3, #1
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b21a      	sxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b21b      	sxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <set_ignitor_on_delay+0x34>)
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	8093      	strh	r3, [r2, #4]
	save_nonvolatile_variables();
 80078ca:	f7fc f95d 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2000065c 	.word	0x2000065c

080078dc <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3301      	adds	r3, #1
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b21a      	sxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b21b      	sxth	r3, r3
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 80078fc:	4a04      	ldr	r2, [pc, #16]	; (8007910 <set_ignitor_high_duration+0x34>)
 80078fe:	89fb      	ldrh	r3, [r7, #14]
 8007900:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 8007902:	f7fc f941 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000065c 	.word	0x2000065c

08007914 <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3301      	adds	r3, #1
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b21a      	sxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b21b      	sxth	r3, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	b21b      	sxth	r3, r3
 8007932:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 8007934:	4a04      	ldr	r2, [pc, #16]	; (8007948 <set_film_cooling_on_delay+0x34>)
 8007936:	89fb      	ldrh	r3, [r7, #14]
 8007938:	8153      	strh	r3, [r2, #10]
	save_nonvolatile_variables();
 800793a:	f7fc f925 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000065c 	.word	0x2000065c
 800794c:	00000000 	.word	0x00000000

08007950 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3307      	adds	r3, #7
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	2338      	movs	r3, #56	; 0x38
 8007964:	409a      	lsls	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3306      	adds	r3, #6
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	4619      	mov	r1, r3
 800796e:	2330      	movs	r3, #48	; 0x30
 8007970:	fa01 f303 	lsl.w	r3, r1, r3
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3305      	adds	r3, #5
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	2328      	movs	r3, #40	; 0x28
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	4619      	mov	r1, r3
 800798e:	2320      	movs	r3, #32
 8007990:	fa01 f303 	lsl.w	r3, r1, r3
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3303      	adds	r3, #3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3302      	adds	r3, #2
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3301      	adds	r3, #1
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	4313      	orrs	r3, r2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f8 fd76 	bl	80004ac <__aeabi_i2d>
 80079c0:	a30c      	add	r3, pc, #48	; (adr r3, 80079f4 <set_init_motor_deg_factor+0xa4>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 ff05 	bl	80007d4 <__aeabi_ddiv>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 80079d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079d6:	f7f9 f8cb 	bl	8000b70 <__aeabi_d2f>
 80079da:	4603      	mov	r3, r0
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <set_init_motor_deg_factor+0xa0>)
 80079de:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 80079e0:	f7fc f8d2 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	f3af 8000 	nop.w
 80079f0:	20000310 	.word	0x20000310
 80079f4:	00000000 	.word	0x00000000
 80079f8:	40c38800 	.word	0x40c38800

080079fc <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 8007a06:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <clear_status_flags+0x1c>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	20000300 	.word	0x20000300

08007a1c <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
	...

08007a60 <set_pt_lower_voltage>:

void set_pt_lower_voltage(uint8_t* data, uint8_t* status){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	73fb      	strb	r3, [r7, #15]
	float lower_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	061a      	lsls	r2, r3, #24
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3303      	adds	r3, #3
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3302      	adds	r3, #2
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	3201      	adds	r2, #1
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fd09 	bl	80004ac <__aeabi_i2d>
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <set_pt_lower_voltage+0x74>)
 8007aa0:	f7f8 fe98 	bl	80007d4 <__aeabi_ddiv>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f7f9 f860 	bl	8000b70 <__aeabi_d2f>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d807      	bhi.n	8007aca <set_pt_lower_voltage+0x6a>
		pt_cal_lower_voltage[pt_num] = lower_voltage;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <set_pt_lower_voltage+0x78>)
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007ac6:	f7fc f85f 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40240000 	.word	0x40240000
 8007ad8:	20000294 	.word	0x20000294

08007adc <set_pt_upper_voltage>:

void set_pt_upper_voltage(uint8_t* data, uint8_t* status){
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	73fb      	strb	r3, [r7, #15]
	float upper_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	061a      	lsls	r2, r3, #24
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3303      	adds	r3, #3
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3302      	adds	r3, #2
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	3201      	adds	r2, #1
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f8 fccb 	bl	80004ac <__aeabi_i2d>
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <set_pt_upper_voltage+0x74>)
 8007b1c:	f7f8 fe5a 	bl	80007d4 <__aeabi_ddiv>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4610      	mov	r0, r2
 8007b26:	4619      	mov	r1, r3
 8007b28:	f7f9 f822 	bl	8000b70 <__aeabi_d2f>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d807      	bhi.n	8007b46 <set_pt_upper_voltage+0x6a>
		pt_cal_upper_voltage[pt_num] = upper_voltage;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	4a06      	ldr	r2, [pc, #24]	; (8007b54 <set_pt_upper_voltage+0x78>)
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007b42:	f7fc f821 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40240000 	.word	0x40240000
 8007b54:	200002ac 	.word	0x200002ac

08007b58 <set_pt_upper_pressure>:

void set_pt_upper_pressure(uint8_t* data, uint8_t* status){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	73fb      	strb	r3, [r7, #15]
	float pressure_range = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1.0;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	061a      	lsls	r2, r3, #24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3303      	adds	r3, #3
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	4313      	orrs	r3, r2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	3201      	adds	r2, #1
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fc8d 	bl	80004ac <__aeabi_i2d>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7f8 ffe9 	bl	8000b70 <__aeabi_d2f>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d807      	bhi.n	8007bb8 <set_pt_upper_pressure+0x60>
		pt_cal_upper_pressure[pt_num] = pressure_range;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	4a05      	ldr	r2, [pc, #20]	; (8007bc0 <set_pt_upper_pressure+0x68>)
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8007bb4:	f7fb ffe8 	bl	8003b88 <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	200002c4 	.word	0x200002c4

08007bc4 <refresh_calibrations>:

void refresh_calibrations(uint8_t* data, uint8_t* status){
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	send_calibration_data();
 8007bce:	f7fe fa61 	bl	8006094 <send_calibration_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <set_automatic_abort_enable>:

void set_automatic_abort_enable(uint8_t* data, uint8_t* status){
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]

	uint8_t abort_enable_status = (data[0])/1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (abort_enable_status) {
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <set_automatic_abort_enable+0x20>
		autosequence.enable_auto_aborts = 1;
 8007bf2:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <set_automatic_abort_enable+0x34>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007bfa:	e003      	b.n	8007c04 <set_automatic_abort_enable+0x28>
	}
	else {
		autosequence.enable_auto_aborts = 0;
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <set_automatic_abort_enable+0x34>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	save_nonvolatile_variables();
 8007c04:	f7fb ffc0 	bl	8003b88 <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	2000065c 	.word	0x2000065c

08007c14 <reset_micro>:

void reset_micro(uint8_t* data, uint8_t* status){
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	HAL_NVIC_SystemReset();
 8007c1e:	f002 f80a 	bl	8009c36 <HAL_NVIC_SystemReset>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <set_valve_channel>:
		en_vlv12_Pin,
		en_vlv13_Pin
};
*/

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
    valve_states |= vlv_value;  // Set the new valve state
    */

	// Press board
	setValve(vlv_num, vlv_state);
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fa fa74 	bl	8002128 <setValve>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c4c:	480d      	ldr	r0, [pc, #52]	; (8007c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007c4e:	490e      	ldr	r1, [pc, #56]	; (8007c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007c50:	4a0e      	ldr	r2, [pc, #56]	; (8007c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c54:	e002      	b.n	8007c5c <LoopCopyDataInit>

08007c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c5a:	3304      	adds	r3, #4

08007c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c60:	d3f9      	bcc.n	8007c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c62:	4a0b      	ldr	r2, [pc, #44]	; (8007c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007c64:	4c0b      	ldr	r4, [pc, #44]	; (8007c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c68:	e001      	b.n	8007c6e <LoopFillZerobss>

08007c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c6c:	3204      	adds	r2, #4

08007c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c70:	d3fb      	bcc.n	8007c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c72:	f7fe fd6f 	bl	8006754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c76:	f006 fb9f 	bl	800e3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c7a:	f7fa fe9d 	bl	80029b8 <main>
  bx  lr    
 8007c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c88:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8007c8c:	0800faf0 	.word	0x0800faf0
  ldr r2, =_sbss
 8007c90:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8007c94:	200024a4 	.word	0x200024a4

08007c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c98:	e7fe      	b.n	8007c98 <ADC_IRQHandler>

08007c9a <init_adc>:
 */
static inline void package_cmd(uint16_t cmd, uint8_t *tx);

/*-------------------------Public Interface Functions-------------------------*/

void init_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
     *      7. Select the right SWCNV bit
     *
     *
     */
    // Configure settings for all ADCs
    uint8_t tx[2] = {0, 0};
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	813b      	strh	r3, [r7, #8]

    // 	note: these types are taken from the GPIO_TypeDef line 486
    //          in file stm32f446x.h

    // Generate adc config data
    uint16_t ADC_CONFIG_REG	   = MAX11131_CONFIG|SET_MAX11131_AVGON;
 8007ca8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8007cac:	81fb      	strh	r3, [r7, #14]
    uint16_t ADC_MODE_CNTL_REG = MAX11131_MODE_CNTL|(CUSTOM_INT<<11);
 8007cae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007cb2:	81bb      	strh	r3, [r7, #12]

    configure_read_adc_all(pinfo);
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f000 f91e 	bl	8007ef6 <configure_read_adc_all>
    set_read_adc_range(SPI_BUS, pinfo);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8a7 	bl	8007e10 <set_read_adc_range>

    package_cmd(ADC_CONFIG_REG, tx);
 8007cc2:	f107 0208 	add.w	r2, r7, #8
 8007cc6:	89fb      	ldrh	r3, [r7, #14]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 f944 	bl	8007f58 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007cd0:	b672      	cpsid	i
}
 8007cd2:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6838      	ldr	r0, [r7, #0]
 8007cd8:	f000 f955 	bl	8007f86 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f003 fbdc 	bl	800b4a2 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007cea:	2101      	movs	r1, #1
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f000 f94a 	bl	8007f86 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007cf2:	b662      	cpsie	i
}
 8007cf4:	bf00      	nop
    __enable_irq();

    package_cmd(ADC_MODE_CNTL_REG, tx);
 8007cf6:	f107 0208 	add.w	r2, r7, #8
 8007cfa:	89bb      	ldrh	r3, [r7, #12]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f92a 	bl	8007f58 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007d04:	b672      	cpsid	i
}
 8007d06:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	6838      	ldr	r0, [r7, #0]
 8007d0c:	f000 f93b 	bl	8007f86 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	2301      	movs	r3, #1
 8007d16:	2202      	movs	r2, #2
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f003 fbc2 	bl	800b4a2 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007d1e:	2101      	movs	r1, #1
 8007d20:	6838      	ldr	r0, [r7, #0]
 8007d22:	f000 f930 	bl	8007f86 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d26:	b662      	cpsie	i
}
 8007d28:	bf00      	nop
    __enable_irq();
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <read_adc>:

void read_adc(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo,
                                                uint16_t *adc_out) {
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b088      	sub	sp, #32
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
            not complete within the maximum acquistion time, we terminate
            early to avoid an infinite loop
    */
    /* ADC startup and FIFO register intialization */

    set_adc(pinfo, GPIO_PIN_SET);
 8007d3e:	2101      	movs	r1, #1
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f000 f920 	bl	8007f86 <set_adc>
    cycle_cnvst(pinfo);
 8007d46:	68b8      	ldr	r0, [r7, #8]
 8007d48:	f000 f92f 	bl	8007faa <cycle_cnvst>
    
    uint16_t elapsed_cycles = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007d50:	e005      	b.n	8007d5e <read_adc+0x2c>
                            pinfo->MAX11131_EOC_ADDR)) {
        if (elapsed_cycles > MAX11131_EOC_WAIT_TIME) {
 8007d52:	8bfb      	ldrh	r3, [r7, #30]
 8007d54:	2b14      	cmp	r3, #20
 8007d56:	d80e      	bhi.n	8007d76 <read_adc+0x44>
            break;
        }
        ++elapsed_cycles;
 8007d58:	8bfb      	ldrh	r3, [r7, #30]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	83fb      	strh	r3, [r7, #30]
    while (HAL_GPIO_ReadPin(pinfo->MAX11131_EOC_PORT,
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	89db      	ldrh	r3, [r3, #14]
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f002 fd0b 	bl	800a784 <HAL_GPIO_ReadPin>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ee      	bne.n	8007d52 <read_adc+0x20>
 8007d74:	e000      	b.n	8007d78 <read_adc+0x46>
            break;
 8007d76:	bf00      	nop

    /* Serial communications with ADC */

    // The number of bytes in the FIFO is simply the
    // number of channels * 2 (bytes for each channel)
    uint8_t rx[2] = {0};
 8007d78:	2300      	movs	r3, #0
 8007d7a:	82bb      	strh	r3, [r7, #20]
    uint8_t tx[2] = {0};
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	823b      	strh	r3, [r7, #16]
    uint16_t adc_counts = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	837b      	strh	r3, [r7, #26]
    uint16_t channelId  = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007d88:	2300      	movs	r3, #0
 8007d8a:	777b      	strb	r3, [r7, #29]
 8007d8c:	e036      	b.n	8007dfc <read_adc+0xca>
        rx[0] = rx[1] = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	757b      	strb	r3, [r7, #21]
 8007d92:	7d7b      	ldrb	r3, [r7, #21]
 8007d94:	753b      	strb	r3, [r7, #20]
        tx[0] = tx[1] = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	747b      	strb	r3, [r7, #17]
 8007d9a:	7c7b      	ldrb	r3, [r7, #17]
 8007d9c:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d9e:	b672      	cpsid	i
}
 8007da0:	bf00      	nop
        __disable_irq();
        set_adc(pinfo, GPIO_PIN_RESET);
 8007da2:	2100      	movs	r1, #0
 8007da4:	68b8      	ldr	r0, [r7, #8]
 8007da6:	f000 f8ee 	bl	8007f86 <set_adc>
        write_adc_reg(SPI_BUS, tx, rx);
 8007daa:	f107 0214 	add.w	r2, r7, #20
 8007dae:	f107 0310 	add.w	r3, r7, #16
 8007db2:	4619      	mov	r1, r3
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f8bd 	bl	8007f34 <write_adc_reg>
        set_adc(pinfo, GPIO_PIN_SET);
 8007dba:	2101      	movs	r1, #1
 8007dbc:	68b8      	ldr	r0, [r7, #8]
 8007dbe:	f000 f8e2 	bl	8007f86 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007dc2:	b662      	cpsie	i
}
 8007dc4:	bf00      	nop
        __enable_irq();

        adc_counts = ((rx[0]<<8)|rx[1]) & 0x0FFF;
 8007dc6:	7d3b      	ldrb	r3, [r7, #20]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b21a      	sxth	r2, r3
 8007dcc:	7d7b      	ldrb	r3, [r7, #21]
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b21b      	sxth	r3, r3
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dda:	837b      	strh	r3, [r7, #26]
        channelId = (rx[0] >> 4) & 0x0F;
 8007ddc:	7d3b      	ldrb	r3, [r7, #20]
 8007dde:	091b      	lsrs	r3, r3, #4
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	833b      	strh	r3, [r7, #24]
        adc_out[channelId] = adc_counts;
 8007dea:	8b3b      	ldrh	r3, [r7, #24]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	8b7a      	ldrh	r2, [r7, #26]
 8007df4:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < pinfo->NUM_CHANNELS; ++i) {
 8007df6:	7f7b      	ldrb	r3, [r7, #29]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	777b      	strb	r3, [r7, #29]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	7c9b      	ldrb	r3, [r3, #18]
 8007e00:	7f7a      	ldrb	r2, [r7, #29]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d3c3      	bcc.n	8007d8e <read_adc+0x5c>
    }

}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <set_read_adc_range>:

void set_read_adc_range(SPI_HandleTypeDef *SPI_BUS, GPIO_MAX11131_Pinfo *pinfo) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
     5. Set CHSEL[3:0] to Channel Number (Not needed for CUSTOM INT)
     6. Set SWCNV bit to 1 to enable conversions with chip select
     */
    uint8_t tx[2];

    uint16_t SET_SCAN_REGISTER_0 = MAX11131_CUSTOM_SCAN0;
 8007e1a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007e1e:	82fb      	strh	r3, [r7, #22]
    uint16_t SET_SCAN_REGISTER_1 = MAX11131_CUSTOM_SCAN1;
 8007e20:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8007e24:	82bb      	strh	r3, [r7, #20]
    uint8_t num_channels		= pinfo->NUM_CHANNELS;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	7c9b      	ldrb	r3, [r3, #18]
 8007e2a:	74bb      	strb	r3, [r7, #18]

    for (uint8_t i = 0; i < num_channels; ++i) {
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	74fb      	strb	r3, [r7, #19]
 8007e30:	e025      	b.n	8007e7e <set_read_adc_range+0x6e>
        uint8_t ch = pinfo->MAX11131_CHANNELS[i];
 8007e32:	7cfb      	ldrb	r3, [r7, #19]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	4413      	add	r3, r2
 8007e38:	7cdb      	ldrb	r3, [r3, #19]
 8007e3a:	747b      	strb	r3, [r7, #17]
        if (ch > 7) {
 8007e3c:	7c7b      	ldrb	r3, [r7, #17]
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	d90d      	bls.n	8007e5e <set_read_adc_range+0x4e>
            ch -= MAX11131_CUSTOM_SCAN0_SUB;
 8007e42:	7c7b      	ldrb	r3, [r7, #17]
 8007e44:	3b05      	subs	r3, #5
 8007e46:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_0 = SET_SCAN_REGISTER_0 | (1 << ch);
 8007e48:	7c7b      	ldrb	r3, [r7, #17]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	b21a      	sxth	r2, r3
 8007e52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b21b      	sxth	r3, r3
 8007e5a:	82fb      	strh	r3, [r7, #22]
 8007e5c:	e00c      	b.n	8007e78 <set_read_adc_range+0x68>
        } else {
            ch += MAX11131_CUSTOM_SCAN1_ADD;
 8007e5e:	7c7b      	ldrb	r3, [r7, #17]
 8007e60:	3303      	adds	r3, #3
 8007e62:	747b      	strb	r3, [r7, #17]
            SET_SCAN_REGISTER_1 = SET_SCAN_REGISTER_1 | (1 << ch);
 8007e64:	7c7b      	ldrb	r3, [r7, #17]
 8007e66:	2201      	movs	r2, #1
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	b21a      	sxth	r2, r3
 8007e6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b21b      	sxth	r3, r3
 8007e76:	82bb      	strh	r3, [r7, #20]
    for (uint8_t i = 0; i < num_channels; ++i) {
 8007e78:	7cfb      	ldrb	r3, [r7, #19]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	74fb      	strb	r3, [r7, #19]
 8007e7e:	7cfa      	ldrb	r2, [r7, #19]
 8007e80:	7cbb      	ldrb	r3, [r7, #18]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d3d5      	bcc.n	8007e32 <set_read_adc_range+0x22>
    }

    /* Set ADC to custom scan channel range */

    /* Transmit custom channels to send data from */
    package_cmd(SET_SCAN_REGISTER_0, tx);
 8007e86:	f107 020c 	add.w	r2, r7, #12
 8007e8a:	8afb      	ldrh	r3, [r7, #22]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f862 	bl	8007f58 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e94:	b672      	cpsid	i
}
 8007e96:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6838      	ldr	r0, [r7, #0]
 8007e9c:	f000 f873 	bl	8007f86 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007ea0:	f107 010c 	add.w	r1, r7, #12
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f003 fafa 	bl	800b4a2 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007eae:	2101      	movs	r1, #1
 8007eb0:	6838      	ldr	r0, [r7, #0]
 8007eb2:	f000 f868 	bl	8007f86 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007eb6:	b662      	cpsie	i
}
 8007eb8:	bf00      	nop
    __enable_irq();

    package_cmd(SET_SCAN_REGISTER_1, tx);
 8007eba:	f107 020c 	add.w	r2, r7, #12
 8007ebe:	8abb      	ldrh	r3, [r7, #20]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f848 	bl	8007f58 <package_cmd>
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec8:	b672      	cpsid	i
}
 8007eca:	bf00      	nop
    __disable_irq();
    set_adc(pinfo, GPIO_PIN_RESET);
 8007ecc:	2100      	movs	r1, #0
 8007ece:	6838      	ldr	r0, [r7, #0]
 8007ed0:	f000 f859 	bl	8007f86 <set_adc>
    if (HAL_SPI_Transmit(SPI_BUS, tx, 2, 1) == HAL_TIMEOUT) {}
 8007ed4:	f107 010c 	add.w	r1, r7, #12
 8007ed8:	2301      	movs	r3, #1
 8007eda:	2202      	movs	r2, #2
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f003 fae0 	bl	800b4a2 <HAL_SPI_Transmit>
    set_adc(pinfo, GPIO_PIN_SET);
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	6838      	ldr	r0, [r7, #0]
 8007ee6:	f000 f84e 	bl	8007f86 <set_adc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007eea:	b662      	cpsie	i
}
 8007eec:	bf00      	nop
    __enable_irq();
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <configure_read_adc_all>:

void configure_read_adc_all(GPIO_MAX11131_Pinfo *pinfo) {
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
    // Convenience function for reading all channels on adc
    pinfo->NUM_CHANNELS = MAX11131_MAX_CHANNELS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220f      	movs	r2, #15
 8007f02:	749a      	strb	r2, [r3, #18]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	e007      	b.n	8007f1a <configure_read_adc_all+0x24>
        pinfo->MAX11131_CHANNELS[i] = i;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < MAX11131_MAX_CHANNELS; ++i) {
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	3301      	adds	r3, #1
 8007f18:	73fb      	strb	r3, [r7, #15]
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b0e      	cmp	r3, #14
 8007f1e:	d9f4      	bls.n	8007f0a <configure_read_adc_all+0x14>
    }
    pinfo->MAX11131_CHANNELS[14] = 15;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	220f      	movs	r2, #15
 8007f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <write_adc_reg>:

static inline void write_adc_reg(SPI_HandleTypeDef *SPI_BUS, uint8_t *tx, uint8_t *rx) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
    if (HAL_SPI_TransmitReceive(SPI_BUS, tx, rx, 2, 1) == HAL_TIMEOUT) {
 8007f40:	2301      	movs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2302      	movs	r3, #2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f003 fcf6 	bl	800b93c <HAL_SPI_TransmitReceive>
    }
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <package_cmd>:


static inline void package_cmd(uint16_t cmd, uint8_t *tx) {
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	80fb      	strh	r3, [r7, #6]
    tx[0] = (cmd >> 8) & 0x00ff;
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	701a      	strb	r2, [r3, #0]
    tx[1] = (cmd & 0x00ff);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <set_adc>:

static inline void set_adc(GPIO_MAX11131_Pinfo *pinfo, GPIO_PinState state) {
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pinfo->MAX11131_CS_PORT, pinfo->MAX11131_CS_ADDR, state);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	899b      	ldrh	r3, [r3, #12]
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f002 fc09 	bl	800a7b4 <HAL_GPIO_WritePin>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <cycle_cnvst>:

void cycle_cnvst(GPIO_MAX11131_Pinfo *pinfo) {
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6898      	ldr	r0, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8a1b      	ldrh	r3, [r3, #16]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f002 fbf9 	bl	800a7b4 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_RESET
    );
    asm("nop");  // Clock Freq maxes at 180 MHz, at which each noop instruction
 8007fc2:	bf00      	nop
    asm("nop");  // takes about 5.5 ns to complete
 8007fc4:	bf00      	nop
    HAL_GPIO_WritePin(
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6898      	ldr	r0, [r3, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8a1b      	ldrh	r3, [r3, #16]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f002 fbef 	bl	800a7b4 <HAL_GPIO_WritePin>
        pinfo->MAX11131_CNVST_PORT, pinfo->MAX11131_CNVST_ADDR, GPIO_PIN_SET
    );
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <findClosestTTMV>:
 *  Created on: Jan 4, 2021
 *      Author: arthur
 */
#include "MAX31855.h"

int32_t findClosestTTMV(float target) {
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t right = MAX31855_TTMV_LUT_SZ - 1;
 8007fea:	f240 2326 	movw	r3, #550	; 0x226
 8007fee:	617b      	str	r3, [r7, #20]
	int32_t left = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
	int32_t mid = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
    // Find the two closest microvolt points
    while (left < right) {
 8007ff8:	e01e      	b.n	8008038 <findClosestTTMV+0x58>
        mid = ((right-left)/2)+left;
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	0fda      	lsrs	r2, r3, #31
 8008002:	4413      	add	r3, r2
 8008004:	105b      	asrs	r3, r3, #1
 8008006:	461a      	mov	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
        if (MAX31855_TTMV_LUT[mid] < target) {
 800800e:	4a10      	ldr	r2, [pc, #64]	; (8008050 <findClosestTTMV+0x70>)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800801e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802a:	dd03      	ble.n	8008034 <findClosestTTMV+0x54>
            left = mid+1;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e001      	b.n	8008038 <findClosestTTMV+0x58>
        } else {
            right = mid;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	617b      	str	r3, [r7, #20]
    while (left < right) {
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	429a      	cmp	r2, r3
 800803e:	dbdc      	blt.n	8007ffa <findClosestTTMV+0x1a>
        }
    } // TODO: write bs alg to find correct microvolt conversions
    return left;
 8008040:	693b      	ldr	r3, [r7, #16]
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	0800f640 	.word	0x0800f640
 8008054:	00000000 	.word	0x00000000

08008058 <read_tc>:

float read_tc(SPI_HandleTypeDef *SPI_BUS, MAX31855_Pinfo *pinfo) {
 8008058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800805c:	b096      	sub	sp, #88	; 0x58
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
	uint8_t tx[4] = { 0 };
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
    uint8_t rx[4] = { 0 };
 8008068:	2300      	movs	r3, #0
 800806a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800806c:	b672      	cpsid	i
}
 800806e:	bf00      	nop
    // Read thermocouples raw temperature
    __disable_irq();
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	889b      	ldrh	r3, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	4619      	mov	r1, r3
 800807c:	f002 fb9a 	bl	800a7b4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_SPI_Receive(SPI_BUS, rx, 4, 1);
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	2301      	movs	r3, #1
 8008086:	2204      	movs	r2, #4
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f003 fb46 	bl	800b71a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(pinfo->MAX31855_CS_PORT, pinfo->MAX31855_CS_ADDR,
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	4619      	mov	r1, r3
 800809a:	f002 fb8b 	bl	800a7b4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800809e:	b662      	cpsie	i
}
 80080a0:	bf00      	nop
            GPIO_PIN_SET);
    __enable_irq();

    int32_t spiData = rx[0] << 24 | rx[1] << 16 | rx[2] << 8 | rx[3];
 80080a2:	7a3b      	ldrb	r3, [r7, #8]
 80080a4:	061a      	lsls	r2, r3, #24
 80080a6:	7a7b      	ldrb	r3, [r7, #9]
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	431a      	orrs	r2, r3
 80080ac:	7abb      	ldrb	r3, [r7, #10]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	4313      	orrs	r3, r2
 80080b2:	7afa      	ldrb	r2, [r7, #11]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	64bb      	str	r3, [r7, #72]	; 0x48
    float uncorrectedThermocoupleTemp;
    float refJuncTemp;
    float totalOutputMicroVolts;
    float refJuncMicroVolts;
    float thermocoupleMicroVolts;
    float correctedThermocoupleTemp = 0.0f;
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t ocFaultFlag = rx[3]&0b1;
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    faultFlag = (spiData & 0x00010000) >> 16;
 80080c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ca:	141b      	asrs	r3, r3, #16
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	643b      	str	r3, [r7, #64]	; 0x40
    if ((spiData & 0x80000000) == 0x80000000) {
 80080d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da0a      	bge.n	80080ee <read_tc+0x96>
        thermocoupleData = (spiData ^ 0xFFFFFFFF) >> 18;
 80080d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080da:	43db      	mvns	r3, r3
 80080dc:	0c9b      	lsrs	r3, r3, #18
 80080de:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData++;
 80080e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e2:	3301      	adds	r3, #1
 80080e4:	657b      	str	r3, [r7, #84]	; 0x54
        thermocoupleData = thermocoupleData * -1;
 80080e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e8:	425b      	negs	r3, r3
 80080ea:	657b      	str	r3, [r7, #84]	; 0x54
 80080ec:	e002      	b.n	80080f4 <read_tc+0x9c>
    } else {
        thermocoupleData = spiData >> 18;
 80080ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f0:	149b      	asrs	r3, r3, #18
 80080f2:	657b      	str	r3, [r7, #84]	; 0x54
    }
    if ((spiData & 0x00008000) == 0x00008000) {
 80080f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <read_tc+0xc0>
        refJuncData = ((spiData ^ 0xFFFFFFFF) >> 4) & 0x00000FFF;
 80080fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008100:	43db      	mvns	r3, r3
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008108:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData++;
 800810a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810c:	3301      	adds	r3, #1
 800810e:	653b      	str	r3, [r7, #80]	; 0x50
        refJuncData = refJuncData * -1;
 8008110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008112:	425b      	negs	r3, r3
 8008114:	653b      	str	r3, [r7, #80]	; 0x50
 8008116:	e004      	b.n	8008122 <read_tc+0xca>
    } else {
        refJuncData = (spiData >> 4) & 0x00000FFF;
 8008118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811a:	111b      	asrs	r3, r3, #4
 800811c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008120:	653b      	str	r3, [r7, #80]	; 0x50
    }
    // Calculate out the uncorrected temperatures from the MAX31855 and
    // find the total output voltage in micro volts
    // (using the MAX31855 equation from datasheet)
    uncorrectedThermocoupleTemp = thermocoupleData * 0.25;
 8008122:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008124:	f7f8 f9c2 	bl	80004ac <__aeabi_i2d>
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	4b7e      	ldr	r3, [pc, #504]	; (8008328 <read_tc+0x2d0>)
 800812e:	f7f8 fa27 	bl	8000580 <__aeabi_dmul>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4610      	mov	r0, r2
 8008138:	4619      	mov	r1, r3
 800813a:	f7f8 fd19 	bl	8000b70 <__aeabi_d2f>
 800813e:	4603      	mov	r3, r0
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
    refJuncTemp = refJuncData * 0.0625;
 8008142:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008144:	f7f8 f9b2 	bl	80004ac <__aeabi_i2d>
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	4b77      	ldr	r3, [pc, #476]	; (800832c <read_tc+0x2d4>)
 800814e:	f7f8 fa17 	bl	8000580 <__aeabi_dmul>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	f7f8 fd09 	bl	8000b70 <__aeabi_d2f>
 800815e:	4603      	mov	r3, r0
 8008160:	63bb      	str	r3, [r7, #56]	; 0x38
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
            * (uncorrectedThermocoupleTemp - refJuncTemp);
 8008162:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008166:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800816a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800816e:	ee17 0a90 	vmov	r0, s15
 8008172:	f7f8 f9ad 	bl	80004d0 <__aeabi_f2d>
 8008176:	a368      	add	r3, pc, #416	; (adr r3, 8008318 <read_tc+0x2c0>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f7f8 fa00 	bl	8000580 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
    totalOutputMicroVolts = (COLD_JUNC_SENSITIVITY_COEFF_T)
 8008184:	4610      	mov	r0, r2
 8008186:	4619      	mov	r1, r3
 8008188:	f7f8 fcf2 	bl	8000b70 <__aeabi_d2f>
 800818c:	4603      	mov	r3, r0
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
    // given temperature --> y2 = m(x2-x1) + y1 (we must cast back as a signed
    // int since pgm_read returns unsigned)
    int refJuncMicrovoltsHigh;
    int refJuncMicrovoltsLow;
    int refJuncMicrovoltsSlope;
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 8008190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008192:	f7f8 f99d 	bl	80004d0 <__aeabi_f2d>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	ec43 2b10 	vmov	d0, r2, r3
 800819e:	f006 f947 	bl	800e430 <ceil>
 80081a2:	ec53 2b10 	vmov	r2, r3, d0
 80081a6:	4610      	mov	r0, r2
 80081a8:	4619      	mov	r1, r3
 80081aa:	f7f8 fc99 	bl	8000ae0 <__aeabi_d2iz>
 80081ae:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 80081b0:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsHigh = (int) (MAX31855_TTMV_LUT[((int) ceil(
 80081b2:	4a5f      	ldr	r2, [pc, #380]	; (8008330 <read_tc+0x2d8>)
 80081b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 80081ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081bc:	f7f8 f988 	bl	80004d0 <__aeabi_f2d>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	ec43 2b10 	vmov	d0, r2, r3
 80081c8:	f006 f9b6 	bl	800e538 <floor>
 80081cc:	ec53 2b10 	vmov	r2, r3, d0
 80081d0:	4610      	mov	r0, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	f7f8 fc84 	bl	8000ae0 <__aeabi_d2iz>
 80081d8:	4603      	mov	r3, r0
            refJuncTemp) + MAX31855_LUT_OFFSET)]);
 80081da:	33c8      	adds	r3, #200	; 0xc8
    refJuncMicrovoltsLow = (int) (MAX31855_TTMV_LUT[((int) floor(
 80081dc:	4a54      	ldr	r2, [pc, #336]	; (8008330 <read_tc+0x2d8>)
 80081de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    refJuncMicrovoltsSlope = (refJuncMicrovoltsHigh - refJuncMicrovoltsLow);
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
    refJuncMicroVolts = refJuncMicrovoltsSlope
            * (refJuncTemp - floor(refJuncTemp)) + refJuncMicrovoltsLow;
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f7f8 f95d 	bl	80004ac <__aeabi_i2d>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081f8:	f7f8 f96a 	bl	80004d0 <__aeabi_f2d>
 80081fc:	4680      	mov	r8, r0
 80081fe:	4689      	mov	r9, r1
 8008200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008202:	f7f8 f965 	bl	80004d0 <__aeabi_f2d>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	ec43 2b10 	vmov	d0, r2, r3
 800820e:	f006 f993 	bl	800e538 <floor>
 8008212:	ec53 2b10 	vmov	r2, r3, d0
 8008216:	4640      	mov	r0, r8
 8008218:	4649      	mov	r1, r9
 800821a:	f7f7 fff9 	bl	8000210 <__aeabi_dsub>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 f9ab 	bl	8000580 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4614      	mov	r4, r2
 8008230:	461d      	mov	r5, r3
 8008232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008234:	f7f8 f93a 	bl	80004ac <__aeabi_i2d>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4620      	mov	r0, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7f7 ffe8 	bl	8000214 <__adddf3>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
    refJuncMicroVolts = refJuncMicrovoltsSlope
 8008248:	4610      	mov	r0, r2
 800824a:	4619      	mov	r1, r3
 800824c:	f7f8 fc90 	bl	8000b70 <__aeabi_d2f>
 8008250:	4603      	mov	r3, r0
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
    // Calculate the voltage of the desired thermocouple junction itself (thermocouple junction and ref junction polarities are opposing in our application
    // with a type T thermocouple --> V_out = V_tc - V_ref)
    thermocoupleMicroVolts = totalOutputMicroVolts + refJuncMicroVolts;
 8008254:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008258:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800825c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008260:	edc7 7a08 	vstr	s15, [r7, #32]
    // Check to make sure this voltage is within our range of -200 to 350C then proceed to lookup table processing, or else return an out or range error
    if (thermocoupleMicroVolts < MAX31855_minVoltage
 8008264:	edd7 7a08 	vldr	s15, [r7, #32]
 8008268:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008334 <read_tc+0x2dc>
 800826c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008274:	d436      	bmi.n	80082e4 <read_tc+0x28c>
            || thermocoupleMicroVolts > MAX31855_maxVoltage) {
 8008276:	edd7 7a08 	vldr	s15, [r7, #32]
 800827a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008338 <read_tc+0x2e0>
 800827e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008286:	dc2d      	bgt.n	80082e4 <read_tc+0x28c>
        int32_t correctedMicrovoltsHigh;
        int32_t correctedMicrovoltsLow;
        int32_t correctedMicrovoltsSlope;
        int32_t closestIdx;
        // Set the starting points
        closestIdx = findClosestTTMV(thermocoupleMicroVolts);
 8008288:	ed97 0a08 	vldr	s0, [r7, #32]
 800828c:	f7ff fea8 	bl	8007fe0 <findClosestTTMV>
 8008290:	61f8      	str	r0, [r7, #28]
        correctedMicrovoltsHigh = (int32_t) MAX31855_TTMV_LUT[closestIdx];
 8008292:	4a27      	ldr	r2, [pc, #156]	; (8008330 <read_tc+0x2d8>)
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800829a:	61bb      	str	r3, [r7, #24]
        correctedMicrovoltsLow  = (int32_t) MAX31855_TTMV_LUT[closestIdx-1];
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a23      	ldr	r2, [pc, #140]	; (8008330 <read_tc+0x2d8>)
 80082a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80082a6:	617b      	str	r3, [r7, #20]

        // Find the final corrected temperature from microvolts using
        // linear interpolation - x2 = (y2-y1)/m + x1
        correctedMicrovoltsSlope = correctedMicrovoltsHigh
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	613b      	str	r3, [r7, #16]
                - correctedMicrovoltsLow;
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
                - correctedMicrovoltsLow) / correctedMicrovoltsSlope)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80082be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                + ((closestIdx - 1) - MAX31855_LUT_OFFSET);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	3bc9      	subs	r3, #201	; 0xc9
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        correctedThermocoupleTemp = ((thermocoupleMicroVolts
 80082dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    }

    return correctedThermocoupleTemp + 273.15; // replace with return value
 80082e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80082e6:	f7f8 f8f3 	bl	80004d0 <__aeabi_f2d>
 80082ea:	a30d      	add	r3, pc, #52	; (adr r3, 8008320 <read_tc+0x2c8>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f7 ff90 	bl	8000214 <__adddf3>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	f7f8 fc38 	bl	8000b70 <__aeabi_d2f>
 8008300:	4603      	mov	r3, r0
 8008302:	ee07 3a90 	vmov	s15, r3
}
 8008306:	eeb0 0a67 	vmov.f32	s0, s15
 800830a:	3758      	adds	r7, #88	; 0x58
 800830c:	46bd      	mov	sp, r7
 800830e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	f3af 8000 	nop.w
 8008318:	3d70a3d7 	.word	0x3d70a3d7
 800831c:	404a170a 	.word	0x404a170a
 8008320:	66666666 	.word	0x66666666
 8008324:	40711266 	.word	0x40711266
 8008328:	3fd00000 	.word	0x3fd00000
 800832c:	3fb00000 	.word	0x3fb00000
 8008330:	0800f640 	.word	0x0800f640
 8008334:	c5af1800 	.word	0xc5af1800
 8008338:	468b3600 	.word	0x468b3600

0800833c <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 8008346:	4b06      	ldr	r3, [pc, #24]	; (8008360 <init_board+0x24>)
 8008348:	2200      	movs	r2, #0
 800834a:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 800834c:	4a05      	ldr	r2, [pc, #20]	; (8008364 <init_board+0x28>)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	7013      	strb	r3, [r2, #0]
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	200020a0 	.word	0x200020a0
 8008364:	20000ac3 	.word	0x20000ac3

08008368 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	460b      	mov	r3, r1
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 8008376:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837e:	d109      	bne.n	8008394 <init_data+0x2c>
	    // repack CLB_telem_data
		pack_telem_data(CLB_telem_data);
 8008380:	480b      	ldr	r0, [pc, #44]	; (80083b0 <init_data+0x48>)
 8008382:	f7fc fa35 	bl	80047f0 <pack_telem_data>
		CLB_buffer = CLB_telem_data;
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <init_data+0x4c>)
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <init_data+0x48>)
 800838a:	601a      	str	r2, [r3, #0]
		CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <init_data+0x50>)
 800838e:	22c9      	movs	r2, #201	; 0xc9
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e005      	b.n	80083a0 <init_data+0x38>
	} else {				// custom telem
		CLB_buffer = buffer;
 8008394:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <init_data+0x4c>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 800839a:	897a      	ldrh	r2, [r7, #10]
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <init_data+0x50>)
 800839e:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 80083a0:	4a06      	ldr	r2, [pc, #24]	; (80083bc <init_data+0x54>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6013      	str	r3, [r2, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000cac 	.word	0x20000cac
 80083b4:	2000081c 	.word	0x2000081c
 80083b8:	200017ba 	.word	0x200017ba
 80083bc:	200020f8 	.word	0x200020f8

080083c0 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b08d      	sub	sp, #52	; 0x34
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 80083d6:	2300      	movs	r3, #0
 80083d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 80083da:	4b6c      	ldr	r3, [pc, #432]	; (800858c <send_data+0x1cc>)
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 80083e0:	2300      	movs	r3, #0
 80083e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 80083e4:	23fd      	movs	r3, #253	; 0xfd
 80083e6:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 80083e8:	2300      	movs	r3, #0
 80083ea:	60bb      	str	r3, [r7, #8]
 80083ec:	f107 030c 	add.w	r3, r7, #12
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 80083f6:	4b66      	ldr	r3, [pc, #408]	; (8008590 <send_data+0x1d0>)
 80083f8:	681c      	ldr	r4, [r3, #0]
 80083fa:	f000 fa3f 	bl	800887c <compute_checksum>
 80083fe:	4603      	mov	r3, r0
 8008400:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 8008402:	4b63      	ldr	r3, [pc, #396]	; (8008590 <send_data+0x1d0>)
 8008404:	681c      	ldr	r4, [r3, #0]
 8008406:	f000 fa43 	bl	8008890 <compute_packet_sz>
 800840a:	4603      	mov	r3, r0
 800840c:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 800840e:	4b60      	ldr	r3, [pc, #384]	; (8008590 <send_data+0x1d0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f107 0208 	add.w	r2, r7, #8
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f9b1 	bl	8008780 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 800841e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008420:	4a5c      	ldr	r2, [pc, #368]	; (8008594 <send_data+0x1d4>)
 8008422:	1899      	adds	r1, r3, r2
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	220c      	movs	r2, #12
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f9f9 	bl	8008822 <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 8008430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008432:	330c      	adds	r3, #12
 8008434:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 800843c:	e08c      	b.n	8008558 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 800843e:	8bfa      	ldrh	r2, [r7, #30]
 8008440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 8008446:	8bba      	ldrh	r2, [r7, #28]
 8008448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 800844e:	8b7a      	ldrh	r2, [r7, #26]
 8008450:	8b3b      	ldrh	r3, [r7, #24]
 8008452:	4293      	cmp	r3, r2
 8008454:	bf28      	it	cs
 8008456:	4613      	movcs	r3, r2
 8008458:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 800845a:	4b4f      	ldr	r3, [pc, #316]	; (8008598 <send_data+0x1d8>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008460:	18d0      	adds	r0, r2, r3
 8008462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008464:	4a4b      	ldr	r2, [pc, #300]	; (8008594 <send_data+0x1d4>)
 8008466:	4413      	add	r3, r2
 8008468:	8afa      	ldrh	r2, [r7, #22]
 800846a:	4619      	mov	r1, r3
 800846c:	f000 f9d9 	bl	8008822 <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8008470:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008472:	8afb      	ldrh	r3, [r7, #22]
 8008474:	4413      	add	r3, r2
 8008476:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8008478:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800847a:	8afb      	ldrh	r3, [r7, #22]
 800847c:	4413      	add	r3, r2
 800847e:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d121      	bne.n	80084ce <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 800848a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800848c:	461a      	mov	r2, r3
 800848e:	4943      	ldr	r1, [pc, #268]	; (800859c <send_data+0x1dc>)
 8008490:	4840      	ldr	r0, [pc, #256]	; (8008594 <send_data+0x1d4>)
 8008492:	f000 fa2b 	bl	80088ec <stuff_packet>
 8008496:	4603      	mov	r3, r0
 8008498:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 800849a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800849c:	8bfb      	ldrh	r3, [r7, #30]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d10d      	bne.n	80084be <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 80084a2:	8c3b      	ldrh	r3, [r7, #32]
 80084a4:	2bfe      	cmp	r3, #254	; 0xfe
 80084a6:	d807      	bhi.n	80084b8 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 80084a8:	8c3b      	ldrh	r3, [r7, #32]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	843a      	strh	r2, [r7, #32]
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b3a      	ldr	r3, [pc, #232]	; (800859c <send_data+0x1dc>)
 80084b2:	2100      	movs	r1, #0
 80084b4:	5499      	strb	r1, [r3, r2]
 80084b6:	e002      	b.n	80084be <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	8c3a      	ldrh	r2, [r7, #32]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f900 	bl	80086cc <transmit_packet>
 80084cc:	e03e      	b.n	800854c <send_data+0x18c>
		} else if (type == CLB_Flash) {
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d13b      	bne.n	800854c <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	4413      	add	r3, r2
 80084dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084de:	4619      	mov	r1, r3
 80084e0:	482c      	ldr	r0, [pc, #176]	; (8008594 <send_data+0x1d4>)
 80084e2:	f000 fa03 	bl	80088ec <stuff_packet>
 80084e6:	4603      	mov	r3, r0
 80084e8:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 80084ea:	8c3b      	ldrh	r3, [r7, #32]
 80084ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ee:	4413      	add	r3, r2
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	8c3b      	ldrh	r3, [r7, #32]
 80084fc:	4413      	add	r3, r2
 80084fe:	b29b      	uxth	r3, r3
 8008500:	b21a      	sxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 8008506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008508:	8bfb      	ldrh	r3, [r7, #30]
 800850a:	429a      	cmp	r2, r3
 800850c:	d115      	bne.n	800853a <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 800850e:	8c3b      	ldrh	r3, [r7, #32]
 8008510:	2bfe      	cmp	r3, #254	; 0xfe
 8008512:	d80f      	bhi.n	8008534 <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800851e:	b28a      	uxth	r2, r1
 8008520:	3201      	adds	r2, #1
 8008522:	b292      	uxth	r2, r2
 8008524:	b210      	sxth	r0, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	80d0      	strh	r0, [r2, #6]
 800852a:	460a      	mov	r2, r1
 800852c:	4413      	add	r3, r2
 800852e:	2200      	movs	r2, #0
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	e002      	b.n	800853a <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	da03      	bge.n	800854c <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800854a:	e00b      	b.n	8008564 <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 800854c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800854e:	8bbb      	ldrh	r3, [r7, #28]
 8008550:	429a      	cmp	r2, r3
 8008552:	d301      	bcc.n	8008558 <send_data+0x198>
			ping_pos = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <send_data+0x1cc>)
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800855e:	429a      	cmp	r2, r3
 8008560:	f4ff af6d 	bcc.w	800843e <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 8008564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008568:	2b00      	cmp	r3, #0
 800856a:	d008      	beq.n	800857e <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <send_data+0x1dc>)
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2101      	movs	r1, #1
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f8a7 	bl	80086cc <transmit_packet>
	}

	return status; // TODO: return better error handling
 800857e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008582:	4618      	mov	r0, r3
 8008584:	3734      	adds	r7, #52	; 0x34
 8008586:	46bd      	mov	sp, r7
 8008588:	bd90      	pop	{r4, r7, pc}
 800858a:	bf00      	nop
 800858c:	200017ba 	.word	0x200017ba
 8008590:	200020f8 	.word	0x200020f8
 8008594:	20000b0c 	.word	0x20000b0c
 8008598:	2000081c 	.word	0x2000081c
 800859c:	200009c4 	.word	0x200009c4

080085a0 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 80085ae:	2300      	movs	r3, #0
 80085b0:	83fb      	strh	r3, [r7, #30]
 80085b2:	e009      	b.n	80085c8 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 80085b4:	8bfb      	ldrh	r3, [r7, #30]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	441a      	add	r2, r3
 80085ba:	8bfb      	ldrh	r3, [r7, #30]
 80085bc:	7811      	ldrb	r1, [r2, #0]
 80085be:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <receive_data+0xd4>)
 80085c0:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 80085c2:	8bfb      	ldrh	r3, [r7, #30]
 80085c4:	3301      	adds	r3, #1
 80085c6:	83fb      	strh	r3, [r7, #30]
 80085c8:	8bfa      	ldrh	r2, [r7, #30]
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3f1      	bcc.n	80085b4 <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	461a      	mov	r2, r3
 80085d4:	4928      	ldr	r1, [pc, #160]	; (8008678 <receive_data+0xd8>)
 80085d6:	4827      	ldr	r0, [pc, #156]	; (8008674 <receive_data+0xd4>)
 80085d8:	f000 f9ee 	bl	80089b8 <unstuff_packet>
 80085dc:	4603      	mov	r3, r0
 80085de:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 80085e0:	4925      	ldr	r1, [pc, #148]	; (8008678 <receive_data+0xd8>)
 80085e2:	4826      	ldr	r0, [pc, #152]	; (800867c <receive_data+0xdc>)
 80085e4:	f000 f886 	bl	80086f4 <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 80085e8:	4b24      	ldr	r3, [pc, #144]	; (800867c <receive_data+0xdc>)
 80085ea:	88db      	ldrh	r3, [r3, #6]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f939 	bl	8008864 <verify_checksum>
 80085f2:	4603      	mov	r3, r0
 80085f4:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 80085f6:	7efb      	ldrb	r3, [r7, #27]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 80085fc:	2303      	movs	r3, #3
 80085fe:	e034      	b.n	800866a <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <receive_data+0xdc>)
 8008606:	789a      	ldrb	r2, [r3, #2]
 8008608:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <receive_data+0xe0>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d129      	bne.n	8008664 <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <receive_data+0xdc>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b36      	cmp	r3, #54	; 0x36
 8008616:	d827      	bhi.n	8008668 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 8008618:	4b18      	ldr	r3, [pc, #96]	; (800867c <receive_data+0xdc>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	4b19      	ldr	r3, [pc, #100]	; (8008684 <receive_data+0xe4>)
 8008620:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008624:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 8008626:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d01b      	beq.n	8008668 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 8008630:	4b12      	ldr	r3, [pc, #72]	; (800867c <receive_data+0xdc>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b21b      	sxth	r3, r3
 8008636:	8bba      	ldrh	r2, [r7, #28]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f82a 	bl	8008694 <validate_command>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d110      	bne.n	8008668 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 8008646:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800864a:	4a0f      	ldr	r2, [pc, #60]	; (8008688 <receive_data+0xe8>)
 800864c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008650:	480e      	ldr	r0, [pc, #56]	; (800868c <receive_data+0xec>)
 8008652:	f107 0217 	add.w	r2, r7, #23
 8008656:	4611      	mov	r1, r2
 8008658:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 800865a:	4b08      	ldr	r3, [pc, #32]	; (800867c <receive_data+0xdc>)
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <receive_data+0xf0>)
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e001      	b.n	8008668 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 8008664:	2302      	movs	r3, #2
 8008666:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3720      	adds	r7, #32
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200009c4 	.word	0x200009c4
 8008678:	20000b0c 	.word	0x20000b0c
 800867c:	200020a0 	.word	0x200020a0
 8008680:	20000ac3 	.word	0x20000ac3
 8008684:	20000018 	.word	0x20000018
 8008688:	200000f8 	.word	0x200000f8
 800868c:	20000b18 	.word	0x20000b18
 8008690:	20000dc0 	.word	0x20000dc0

08008694 <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	460a      	mov	r2, r1
 800869e:	80fb      	strh	r3, [r7, #6]
 80086a0:	4613      	mov	r3, r2
 80086a2:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 80086a4:	88bb      	ldrh	r3, [r7, #4]
 80086a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086aa:	4907      	ldr	r1, [pc, #28]	; (80086c8 <validate_command+0x34>)
 80086ac:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d101      	bne.n	80086b8 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e000      	b.n	80086ba <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 80086b8:	2301      	movs	r3, #1
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000088 	.word	0x20000088

080086cc <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 80086d8:	887a      	ldrh	r2, [r7, #2]
 80086da:	f04f 33ff 	mov.w	r3, #4294967295
 80086de:	4904      	ldr	r1, [pc, #16]	; (80086f0 <transmit_packet+0x24>)
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f004 fd5e 	bl	800d1a2 <HAL_UART_Transmit>
//	__enable_irq();
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200009c4 	.word	0x200009c4

080086f4 <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	785a      	ldrb	r2, [r3, #1]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	789a      	ldrb	r2, [r3, #2]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	78da      	ldrb	r2, [r3, #3]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	791a      	ldrb	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	795a      	ldrb	r2, [r3, #5]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	3306      	adds	r3, #6
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	b21a      	sxth	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3307      	adds	r3, #7
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b21b      	sxth	r3, r3
 8008740:	4313      	orrs	r3, r2
 8008742:	b21b      	sxth	r3, r3
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	061a      	lsls	r2, r3, #24
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3309      	adds	r3, #9
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	041b      	lsls	r3, r3, #16
 800875a:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	330a      	adds	r3, #10
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8008764:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	320b      	adds	r2, #11
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	4313      	orrs	r3, r2
 800876e:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	609a      	str	r2, [r3, #8]
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	3301      	adds	r3, #1
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	7852      	ldrb	r2, [r2, #1]
 800879a:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	3302      	adds	r3, #2
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	7892      	ldrb	r2, [r2, #2]
 80087a4:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	3303      	adds	r3, #3
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	78d2      	ldrb	r2, [r2, #3]
 80087ae:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	3304      	adds	r3, #4
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7912      	ldrb	r2, [r2, #4]
 80087b8:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	3305      	adds	r3, #5
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	7952      	ldrb	r2, [r2, #5]
 80087c2:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	88da      	ldrh	r2, [r3, #6]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	3306      	adds	r3, #6
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	88db      	ldrh	r3, [r3, #6]
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	3307      	adds	r3, #7
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	0a1a      	lsrs	r2, r3, #8
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	3309      	adds	r3, #9
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	0c1a      	lsrs	r2, r3, #16
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	330a      	adds	r3, #10
 8008804:	b2d2      	uxtb	r2, r2
 8008806:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	0e1a      	lsrs	r2, r3, #24
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	330b      	adds	r3, #11
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 8008822:	b480      	push	{r7}
 8008824:	b087      	sub	sp, #28
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	4613      	mov	r3, r2
 800882e:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 800883c:	e007      	b.n	800884e <pack_packet+0x2c>
		*dst++ = *curr++;
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	1c53      	adds	r3, r2, #1
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	1c59      	adds	r1, r3, #1
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d1f3      	bne.n	800883e <pack_packet+0x1c>
	}
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <compute_checksum>:

uint16_t compute_checksum() {
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	0000      	movs	r0, r0
	...

08008890 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 8008896:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <compute_packet_sz+0x58>)
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	330d      	adds	r3, #13
 800889c:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f7 fe03 	bl	80004ac <__aeabi_i2d>
 80088a6:	a30e      	add	r3, pc, #56	; (adr r3, 80088e0 <compute_packet_sz+0x50>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 ff92 	bl	80007d4 <__aeabi_ddiv>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	ec43 2b17 	vmov	d7, r2, r3
 80088b8:	eeb0 0a47 	vmov.f32	s0, s14
 80088bc:	eef0 0a67 	vmov.f32	s1, s15
 80088c0:	f005 fdb6 	bl	800e430 <ceil>
 80088c4:	ec53 2b10 	vmov	r2, r3, d0
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	f7f8 f930 	bl	8000b30 <__aeabi_d2uiz>
 80088d0:	4603      	mov	r3, r0
 80088d2:	717b      	strb	r3, [r7, #5]
    return num_packets;
 80088d4:	797b      	ldrb	r3, [r7, #5]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	00000000 	.word	0x00000000
 80088e4:	406fe000 	.word	0x406fe000
 80088e8:	200017ba 	.word	0x200017ba

080088ec <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 80088ec:	b480      	push	{r7}
 80088ee:	b089      	sub	sp, #36	; 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 80088fe:	4b2d      	ldr	r3, [pc, #180]	; (80089b4 <stuff_packet+0xc8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	795b      	ldrb	r3, [r3, #5]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d038      	beq.n	800897a <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	60ba      	str	r2, [r7, #8]
 800890e:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2201      	movs	r2, #1
 8008914:	701a      	strb	r2, [r3, #0]
        while (length--)
 8008916:	e02a      	b.n	800896e <stuff_packet+0x82>
        {
            if (*unstuffed) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	1c53      	adds	r3, r2, #1
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	1c59      	adds	r1, r3, #1
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	b2da      	uxtb	r2, r3
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e009      	b.n	8008952 <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	60ba      	str	r2, [r7, #8]
 8008944:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2201      	movs	r2, #1
 800894a:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2bff      	cmp	r3, #255	; 0xff
 8008958:	d109      	bne.n	800896e <stuff_packet+0x82>
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d006      	beq.n	800896e <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	60ba      	str	r2, [r7, #8]
 8008966:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
        while (length--)
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	1e5a      	subs	r2, r3, #1
 8008972:	80fa      	strh	r2, [r7, #6]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1cf      	bne.n	8008918 <stuff_packet+0x2c>
 8008978:	e011      	b.n	800899e <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 800897a:	2300      	movs	r3, #0
 800897c:	837b      	strh	r3, [r7, #26]
 800897e:	e00a      	b.n	8008996 <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	1c53      	adds	r3, r2, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	1c59      	adds	r1, r3, #1
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8008990:	8b7b      	ldrh	r3, [r7, #26]
 8008992:	3301      	adds	r3, #1
 8008994:	837b      	strh	r3, [r7, #26]
 8008996:	8b7a      	ldrh	r2, [r7, #26]
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	429a      	cmp	r2, r3
 800899c:	d3f0      	bcc.n	8008980 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	b29b      	uxth	r3, r3
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3724      	adds	r7, #36	; 0x24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	200020f8 	.word	0x200020f8

080089b8 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b089      	sub	sp, #36	; 0x24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 80089d2:	23ff      	movs	r3, #255	; 0xff
 80089d4:	77fb      	strb	r3, [r7, #31]
 80089d6:	2300      	movs	r3, #0
 80089d8:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 80089da:	e024      	b.n	8008a26 <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d025      	beq.n	8008a30 <unstuff_packet+0x78>
		if (copy != 0) {
 80089e4:	7fbb      	ldrb	r3, [r7, #30]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	1c53      	adds	r3, r2, #1
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	1c59      	adds	r1, r3, #1
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	e011      	b.n	8008a20 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 80089fc:	7ffb      	ldrb	r3, [r7, #31]
 80089fe:	2bff      	cmp	r3, #255	; 0xff
 8008a00:	d004      	beq.n	8008a0c <unstuff_packet+0x54>
				*unstuffed++ = 0;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	60ba      	str	r2, [r7, #8]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	60fa      	str	r2, [r7, #12]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	7ffb      	ldrb	r3, [r7, #31]
 8008a18:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 8008a1a:	7ffb      	ldrb	r3, [r7, #31]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 8008a20:	7fbb      	ldrb	r3, [r7, #30]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	77bb      	strb	r3, [r7, #30]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d3d6      	bcc.n	80089dc <unstuff_packet+0x24>
 8008a2e:	e002      	b.n	8008a36 <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <unstuff_packet+0x7e>
				break; /* Source length too long */
 8008a34:	bf00      	nop
		}
	}
	return unstuffed - start;
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	b29b      	uxth	r3, r3
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3724      	adds	r7, #36	; 0x24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	4613      	mov	r3, r2
 8008a56:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a58:	b672      	cpsid	i
}
 8008a5a:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	f001 fea2 	bl	800a7b4 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	23ff      	movs	r3, #255	; 0xff
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	f002 fd11 	bl	800b4a2 <HAL_SPI_Transmit>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f001 fe8b 	bl	800a7b4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a9e:	b662      	cpsie	i
}
 8008aa0:	bf00      	nop
	__enable_irq();

}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aba:	b672      	cpsid	i
}
 8008abc:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008aca:	2200      	movs	r2, #0
 8008acc:	4619      	mov	r1, r3
 8008ace:	f001 fe71 	bl	800a7b4 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	23ff      	movs	r3, #255	; 0xff
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	f002 fce0 	bl	800b4a2 <HAL_SPI_Transmit>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008af2:	8b3a      	ldrh	r2, [r7, #24]
 8008af4:	23ff      	movs	r3, #255	; 0xff
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	f002 fe0f 	bl	800b71a <HAL_SPI_Receive>
 8008afc:	4603      	mov	r3, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	f001 fe4d 	bl	800a7b4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008b1a:	b662      	cpsie	i
}
 8008b1c:	bf00      	nop
	__enable_irq();

}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af02      	add	r7, sp, #8
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8008b32:	230f      	movs	r3, #15
 8008b34:	733b      	strb	r3, [r7, #12]
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	f107 010c 	add.w	r1, r7, #12
 8008b42:	2201      	movs	r2, #1
 8008b44:	9200      	str	r2, [sp, #0]
 8008b46:	2202      	movs	r2, #2
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffae 	bl	8008aaa <spi_transmit_receive>

	return *rx;
 8008b4e:	7a3b      	ldrb	r3, [r7, #8]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008b60:	21c0      	movs	r1, #192	; 0xc0
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff ffdf 	bl	8008b26 <read_status_register>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	b2db      	uxtb	r3, r3
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008b8a:	e002      	b.n	8008b92 <wait_for_operation+0x16>
		++count;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff ffe0 	bl	8008b58 <flash_is_busy>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d008      	beq.n	8008bb0 <wait_for_operation+0x34>
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d3ed      	bcc.n	8008b8c <wait_for_operation+0x10>
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8008bc8:	231f      	movs	r3, #31
 8008bca:	733b      	strb	r3, [r7, #12]
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	737b      	strb	r3, [r7, #13]
 8008bd0:	78bb      	ldrb	r3, [r7, #2]
 8008bd2:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8008bd4:	f107 030c 	add.w	r3, r7, #12
 8008bd8:	2203      	movs	r2, #3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff34 	bl	8008a4a <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8008be2:	2132      	movs	r1, #50	; 0x32
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ffc9 	bl	8008b7c <wait_for_operation>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	0a1b      	lsrs	r3, r3, #8
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	733b      	strb	r3, [r7, #12]
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8008c0e:	2313      	movs	r3, #19
 8008c10:	723b      	strb	r3, [r7, #8]
 8008c12:	2300      	movs	r3, #0
 8008c14:	727b      	strb	r3, [r7, #9]
 8008c16:	7b3b      	ldrb	r3, [r7, #12]
 8008c18:	72bb      	strb	r3, [r7, #10]
 8008c1a:	7b7b      	ldrb	r3, [r7, #13]
 8008c1c:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	2204      	movs	r2, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff ff0f 	bl	8008a4a <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8008c2c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ffa3 	bl	8008b7c <wait_for_operation>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008c46:	21a0      	movs	r1, #160	; 0xa0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff ff6c 	bl	8008b26 <read_status_register>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008c58:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	21a0      	movs	r1, #160	; 0xa0
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ffa9 	bl	8008bb8 <write_status_register>
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8008c76:	21a0      	movs	r1, #160	; 0xa0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff54 	bl	8008b26 <read_status_register>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8008c88:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c90:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	461a      	mov	r2, r3
 8008c96:	21a0      	movs	r1, #160	; 0xa0
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ff8d 	bl	8008bb8 <write_status_register>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8008cae:	2306      	movs	r3, #6
 8008cb0:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008cb2:	f107 030c 	add.w	r3, r7, #12
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fec5 	bl	8008a4a <spi_transmit>
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8008cd4:	f107 030c 	add.w	r3, r7, #12
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff feb4 	bl	8008a4a <spi_transmit>
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	80fb      	strh	r3, [r7, #6]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008d00:	88bb      	ldrh	r3, [r7, #4]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	753b      	strb	r3, [r7, #20]
 8008d0a:	88bb      	ldrh	r3, [r7, #4]
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8008d10:	2302      	movs	r3, #2
 8008d12:	743b      	strb	r3, [r7, #16]
 8008d14:	7d3b      	ldrb	r3, [r7, #20]
 8008d16:	747b      	strb	r3, [r7, #17]
 8008d18:	7d7b      	ldrb	r3, [r7, #21]
 8008d1a:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d22:	d902      	bls.n	8008d2a <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8008d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d28:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d2a:	b672      	cpsid	i
}
 8008d2c:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f001 fd39 	bl	800a7b4 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008d48:	f107 0110 	add.w	r1, r7, #16
 8008d4c:	23ff      	movs	r3, #255	; 0xff
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f002 fba7 	bl	800b4a2 <HAL_SPI_Transmit>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8008d64:	88fa      	ldrh	r2, [r7, #6]
 8008d66:	23ff      	movs	r3, #255	; 0xff
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	f002 fb9a 	bl	800b4a2 <HAL_SPI_Transmit>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8008d84:	2201      	movs	r2, #1
 8008d86:	4619      	mov	r1, r3
 8008d88:	f001 fd14 	bl	800a7b4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008d8c:	b662      	cpsie	i
}
 8008d8e:	bf00      	nop
	__enable_irq();
}
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	733b      	strb	r3, [r7, #12]
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8008db4:	2310      	movs	r3, #16
 8008db6:	723b      	strb	r3, [r7, #8]
 8008db8:	2300      	movs	r3, #0
 8008dba:	727b      	strb	r3, [r7, #9]
 8008dbc:	7b3b      	ldrb	r3, [r7, #12]
 8008dbe:	72bb      	strb	r3, [r7, #10]
 8008dc0:	7b7b      	ldrb	r3, [r7, #13]
 8008dc2:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	2204      	movs	r2, #4
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fe3c 	bl	8008a4a <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8008dd2:	4904      	ldr	r1, [pc, #16]	; (8008de4 <program_buffer_to_memory+0x4c>)
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fed1 	bl	8008b7c <wait_for_operation>
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	000aae60 	.word	0x000aae60

08008de8 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fabd 	bl	8009370 <ping_flash>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00d      	beq.n	8008e18 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008dfc:	21c0      	movs	r1, #192	; 0xc0
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fe91 	bl	8008b26 <read_status_register>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8008e16:	e003      	b.n	8008e20 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa9a 	bl	8009370 <ping_flash>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00d      	beq.n	8008e5e <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008e42:	21c0      	movs	r1, #192	; 0xc0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff fe6e 	bl	8008b26 <read_status_register>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8008e5c:	e003      	b.n	8008e66 <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2204      	movs	r2, #4
 8008e62:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff ff10 	bl	8008ca6 <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8008e86:	887b      	ldrh	r3, [r7, #2]
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	733b      	strb	r3, [r7, #12]
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8008e96:	23d8      	movs	r3, #216	; 0xd8
 8008e98:	723b      	strb	r3, [r7, #8]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	727b      	strb	r3, [r7, #9]
 8008e9e:	7b3b      	ldrb	r3, [r7, #12]
 8008ea0:	72bb      	strb	r3, [r7, #10]
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8008ea6:	f107 0308 	add.w	r3, r7, #8
 8008eaa:	2204      	movs	r2, #4
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fdcb 	bl	8008a4a <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff ff07 	bl	8008cc8 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 8008eba:	4905      	ldr	r1, [pc, #20]	; (8008ed0 <erase_block+0x5c>)
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff fe5d 	bl	8008b7c <wait_for_operation>

	get_erase_failure_status(flash);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ffb3 	bl	8008e2e <get_erase_failure_status>
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	003d0900 	.word	0x003d0900

08008ed4 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fa47 	bl	8009370 <ping_flash>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d033      	beq.n	8008f50 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8008ee8:	21c0      	movs	r1, #192	; 0xc0
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff fe1b 	bl	8008b26 <read_status_register>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d107      	bne.n	8008f1a <get_ECC_status+0x46>
 8008f0a:	7b7b      	ldrb	r3, [r7, #13]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008f18:	e01f      	b.n	8008f5a <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d107      	bne.n	8008f30 <get_ECC_status+0x5c>
 8008f20:	7b7b      	ldrb	r3, [r7, #13]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008f2e:	e014      	b.n	8008f5a <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <get_ECC_status+0x72>
 8008f36:	7b7b      	ldrb	r3, [r7, #13]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008f44:	e009      	b.n	8008f5a <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2203      	movs	r2, #3
 8008f4a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8008f4e:	e004      	b.n	8008f5a <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2204      	movs	r2, #4
 8008f54:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8008f58:	e7ff      	b.n	8008f5a <get_ECC_status+0x86>
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b088      	sub	sp, #32
 8008f66:	af02      	add	r7, sp, #8
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	461a      	mov	r2, r3
 8008f70:	460b      	mov	r3, r1
 8008f72:	80fb      	strh	r3, [r7, #6]
 8008f74:	4613      	mov	r3, r2
 8008f76:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008f78:	88bb      	ldrh	r3, [r7, #4]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	753b      	strb	r3, [r7, #20]
 8008f82:	88bb      	ldrh	r3, [r7, #4]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8008f88:	2303      	movs	r3, #3
 8008f8a:	743b      	strb	r3, [r7, #16]
 8008f8c:	7d3b      	ldrb	r3, [r7, #20]
 8008f8e:	747b      	strb	r3, [r7, #17]
 8008f90:	7d7b      	ldrb	r3, [r7, #21]
 8008f92:	74bb      	strb	r3, [r7, #18]
 8008f94:	2300      	movs	r3, #0
 8008f96:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8008f98:	f107 0110 	add.w	r1, r7, #16
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fd80 	bl	8008aaa <spi_transmit_receive>
}
 8008faa:	bf00      	nop
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	80fb      	strh	r3, [r7, #6]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8008fc8:	88bb      	ldrh	r3, [r7, #4]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff fe10 	bl	8008bf2 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8008fd2:	8b3b      	ldrh	r3, [r7, #24]
 8008fd4:	88fa      	ldrh	r2, [r7, #6]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff ffc2 	bl	8008f62 <read_flash_buffer>

	get_ECC_status(flash);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff ff78 	bl	8008ed4 <get_ECC_status>
}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	80fb      	strh	r3, [r7, #6]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff fe4f 	bl	8008ca6 <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 8009008:	8b3b      	ldrh	r3, [r7, #24]
 800900a:	88fa      	ldrh	r2, [r7, #6]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff fe6b 	bl	8008cea <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8009014:	88bb      	ldrh	r3, [r7, #4]
 8009016:	4619      	mov	r1, r3
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff febd 	bl	8008d98 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff fe52 	bl	8008cc8 <disable_write>

	get_write_failure_status(flash);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fedf 	bl	8008de8 <get_write_failure_status>
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800903a:	21b0      	movs	r1, #176	; 0xb0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fd72 	bl	8008b26 <read_status_register>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	f043 0310 	orr.w	r3, r3, #16
 800904c:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 800904e:	7bba      	ldrb	r2, [r7, #14]
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	429a      	cmp	r2, r3
 8009054:	d005      	beq.n	8009062 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	461a      	mov	r2, r3
 800905a:	21b0      	movs	r1, #176	; 0xb0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fdab 	bl	8008bb8 <write_status_register>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8009072:	21b0      	movs	r1, #176	; 0xb0
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fd56 	bl	8008b26 <read_status_register>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	f043 0308 	orr.w	r3, r3, #8
 8009084:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8009086:	7bba      	ldrb	r2, [r7, #14]
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	429a      	cmp	r2, r3
 800908c:	d005      	beq.n	800909a <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	461a      	mov	r2, r3
 8009092:	21b0      	movs	r1, #176	; 0xb0
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fd8f 	bl	8008bb8 <write_status_register>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 80090a2:	b580      	push	{r7, lr}
 80090a4:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	1d3b      	adds	r3, r7, #4
 80090ac:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 80090ae:	f107 0108 	add.w	r1, r7, #8
 80090b2:	1d38      	adds	r0, r7, #4
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	f7ff ff77 	bl	8008fb2 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80090ca:	2300      	movs	r3, #0
 80090cc:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80090d0:	e00e      	b.n	80090f0 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 80090d2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80090d6:	f107 0208 	add.w	r2, r7, #8
 80090da:	5cd3      	ldrb	r3, [r2, r3]
 80090dc:	2bff      	cmp	r3, #255	; 0xff
 80090de:	d002      	beq.n	80090e6 <find_write_ptr+0x44>
			first_page_empty = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80090e6:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80090f0:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80090f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f8:	d3eb      	bcc.n	80090d2 <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 80090fa:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <find_write_ptr+0x76>
		flash->current_page = 0;
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 800910c:	1d3b      	adds	r3, r7, #4
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8009116:	e0f0      	b.n	80092fa <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8009118:	2300      	movs	r3, #0
 800911a:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 800911e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8009122:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8009126:	e041      	b.n	80091ac <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 8009128:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800912c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800913a:	b29b      	uxth	r3, r3
 800913c:	4413      	add	r3, r2
 800913e:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8009142:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8009146:	f107 0108 	add.w	r1, r7, #8
 800914a:	1d38      	adds	r0, r7, #4
 800914c:	2200      	movs	r2, #0
 800914e:	9200      	str	r2, [sp, #0]
 8009150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009154:	6800      	ldr	r0, [r0, #0]
 8009156:	f7ff ff2c 	bl	8008fb2 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 800915a:	2301      	movs	r3, #1
 800915c:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8009160:	2300      	movs	r3, #0
 8009162:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8009166:	e00f      	b.n	8009188 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8009168:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800916c:	f107 0208 	add.w	r2, r7, #8
 8009170:	5cd3      	ldrb	r3, [r2, r3]
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d003      	beq.n	800917e <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 800917c:	e009      	b.n	8009192 <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 800917e:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8009182:	3301      	adds	r3, #1
 8009184:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8009188:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800918c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009190:	d3ea      	bcc.n	8009168 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8009192:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <find_write_ptr+0x102>
			max = cur_search_page;
 800919a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800919e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80091a2:	e003      	b.n	80091ac <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 80091a4:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80091a8:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80091ac:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80091b0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d8b6      	bhi.n	8009128 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 80091ba:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80091be:	b29a      	uxth	r2, r3
 80091c0:	1d3b      	adds	r3, r7, #4
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80091d0:	f107 0108 	add.w	r1, r7, #8
 80091d4:	1d38      	adds	r0, r7, #4
 80091d6:	2200      	movs	r2, #0
 80091d8:	9200      	str	r2, [sp, #0]
 80091da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091de:	6800      	ldr	r0, [r0, #0]
 80091e0:	f7ff fee7 	bl	8008fb2 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 80091ec:	2bff      	cmp	r3, #255	; 0xff
 80091ee:	d01e      	beq.n	800922e <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 80091f0:	1d3b      	adds	r3, r7, #4
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80091f8:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d106      	bne.n	800920e <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 8009200:	1d3b      	adds	r3, r7, #4
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009208:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 800920c:	e075      	b.n	80092fa <find_write_ptr+0x258>
			flash->current_page++;
 800920e:	1d3b      	adds	r3, r7, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8009216:	3301      	adds	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	1d3b      	adds	r3, r7, #4
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 8009222:	1d3b      	adds	r3, r7, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 800922c:	e065      	b.n	80092fa <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8009234:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009238:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 800923c:	e019      	b.n	8009272 <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 800923e:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8009242:	f107 0208 	add.w	r2, r7, #8
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	2bff      	cmp	r3, #255	; 0xff
 800924a:	d00b      	beq.n	8009264 <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 800924c:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8009250:	3301      	adds	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	1d3b      	adds	r3, r7, #4
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8009262:	e00a      	b.n	800927a <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8009264:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29b      	uxth	r3, r3
 800926e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8009272:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8009276:	2b00      	cmp	r3, #0
 8009278:	dae1      	bge.n	800923e <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 800927a:	1d3b      	adds	r3, r7, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009286:	d806      	bhi.n	8009296 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8009288:	1d3b      	adds	r3, r7, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009290:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8009294:	e031      	b.n	80092fa <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8009296:	1d3b      	adds	r3, r7, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a2:	d806      	bhi.n	80092b2 <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 80092a4:	1d3b      	adds	r3, r7, #4
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092ac:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 80092b0:	e023      	b.n	80092fa <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80092ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092be:	d806      	bhi.n	80092ce <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80092c8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 80092cc:	e015      	b.n	80092fa <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 80092ce:	1d3b      	adds	r3, r7, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80092d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092da:	d20e      	bcs.n	80092fa <find_write_ptr+0x258>
		flash->next_free_column = 0;
 80092dc:	1d3b      	adds	r3, r7, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80092ee:	3301      	adds	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 80092fa:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	887a      	ldrh	r2, [r7, #2]
 8009324:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f837 	bl	80093c4 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff fe6b 	bl	8009032 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fe84 	bl	800906a <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fe9d 	bl	80090a2 <find_write_ptr>
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af02      	add	r7, sp, #8
 8009376:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8009378:	239f      	movs	r3, #159	; 0x9f
 800937a:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 800937c:	f107 030c 	add.w	r3, r7, #12
 8009380:	f107 0110 	add.w	r1, r7, #16
 8009384:	2203      	movs	r2, #3
 8009386:	9200      	str	r2, [sp, #0]
 8009388:	2202      	movs	r2, #2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fb8d 	bl	8008aaa <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8009390:	7b3b      	ldrb	r3, [r7, #12]
 8009392:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8009394:	7b7b      	ldrb	r3, [r7, #13]
 8009396:	b29b      	uxth	r3, r3
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	b29a      	uxth	r2, r3
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	2bef      	cmp	r3, #239	; 0xef
 80093a8:	d106      	bne.n	80093b8 <ping_flash+0x48>
 80093aa:	8abb      	ldrh	r3, [r7, #20]
 80093ac:	f64a 2221 	movw	r2, #43553	; 0xaa21
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d101      	bne.n	80093b8 <ping_flash+0x48>
		return 1;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <ping_flash+0x4a>
	else
		return 0;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fbc3 	bl	8008b58 <flash_is_busy>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <reset_flash+0x18>
		return 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	e00d      	b.n	80093f8 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 80093dc:	23ff      	movs	r3, #255	; 0xff
 80093de:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	2201      	movs	r2, #1
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff fb2e 	bl	8008a4a <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 80093ee:	4904      	ldr	r1, [pc, #16]	; (8009400 <reset_flash+0x3c>)
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff fbc3 	bl	8008b7c <wait_for_operation>

	return 1;
 80093f6:	2301      	movs	r3, #1
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	0007a120 	.word	0x0007a120

08009404 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8009414:	2300      	movs	r3, #0
 8009416:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 8009418:	e05a      	b.n	80094d0 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	b29a      	uxth	r2, r3
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	b29b      	uxth	r3, r3
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8009426:	8a3a      	ldrh	r2, [r7, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800942e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009432:	429a      	cmp	r2, r3
 8009434:	dd05      	ble.n	8009442 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800943c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009440:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	18d1      	adds	r1, r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8009454:	8a3a      	ldrh	r2, [r7, #16]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	4603      	mov	r3, r0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fdc6 	bl	8008fec <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <write_to_flash_contiguous+0x6c>
			write_failures++;
 800946a:	8a7b      	ldrh	r3, [r7, #18]
 800946c:	3301      	adds	r3, #1
 800946e:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8009470:	8a3b      	ldrh	r3, [r7, #16]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4413      	add	r3, r2
 8009476:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800947e:	461a      	mov	r2, r3
 8009480:	8a3b      	ldrh	r3, [r7, #16]
 8009482:	4413      	add	r3, r2
 8009484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009488:	da09      	bge.n	800949e <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8009490:	8a3b      	ldrh	r3, [r7, #16]
 8009492:	4413      	add	r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800949c:	e018      	b.n	80094d0 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80094a4:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d105      	bne.n	80094b8 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094b2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 80094b6:	e00b      	b.n	80094d0 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80094c6:	3301      	adds	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d3a0      	bcc.n	800941a <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 80094d8:	8a7b      	ldrh	r3, [r7, #18]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b08c      	sub	sp, #48	; 0x30
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f967 	bl	80097c2 <get_bytes_remaining>
 80094f4:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d901      	bls.n	8009502 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8009502:	2300      	movs	r3, #0
 8009504:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8009506:	2300      	movs	r3, #0
 8009508:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009512:	2b00      	cmp	r3, #0
 8009514:	d035      	beq.n	8009582 <write_to_flash+0xa0>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4413      	add	r3, r2
 8009522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009526:	d32c      	bcc.n	8009582 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800952e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009532:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8009534:	2300      	movs	r3, #0
 8009536:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009538:	e00e      	b.n	8009558 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 800953a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	441a      	add	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009546:	4619      	mov	r1, r3
 8009548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800954a:	440b      	add	r3, r1
 800954c:	7811      	ldrb	r1, [r2, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8009552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009554:	3301      	adds	r3, #1
 8009556:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009558:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800955a:	8bfb      	ldrh	r3, [r7, #30]
 800955c:	429a      	cmp	r2, r3
 800955e:	d3ec      	bcc.n	800953a <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009566:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8009570:	8bfb      	ldrh	r3, [r7, #30]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	4413      	add	r3, r2
 8009576:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8009578:	8bfb      	ldrh	r3, [r7, #30]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8009580:	e02a      	b.n	80095d8 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009592:	d221      	bcs.n	80095d8 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8009594:	2300      	movs	r3, #0
 8009596:	853b      	strh	r3, [r7, #40]	; 0x28
 8009598:	e00e      	b.n	80095b8 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 800959a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	441a      	add	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80095a6:	4619      	mov	r1, r3
 80095a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095aa:	440b      	add	r3, r1
 80095ac:	7811      	ldrb	r1, [r2, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 80095b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095b4:	3301      	adds	r3, #1
 80095b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80095b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d8ec      	bhi.n	800959a <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e04b      	b.n	8009670 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ec:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	4413      	add	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fb21 	bl	8008c3e <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 80095fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00f      	beq.n	8009624 <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800960a:	4619      	mov	r1, r3
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff fef9 	bl	8009404 <write_to_flash_contiguous>
 8009612:	4603      	mov	r3, r0
 8009614:	461a      	mov	r2, r3
 8009616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009618:	4413      	add	r3, r2
 800961a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fee8 	bl	8009404 <write_to_flash_contiguous>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800963a:	4413      	add	r3, r2
 800963c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fb15 	bl	8008c6e <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 8009644:	2300      	movs	r3, #0
 8009646:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009648:	e009      	b.n	800965e <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 800964a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	441a      	add	r2, r3
 8009650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009652:	7811      	ldrb	r1, [r2, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8009658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800965a:	3301      	adds	r3, #1
 800965c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800965e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009660:	8afb      	ldrh	r3, [r7, #22]
 8009662:	429a      	cmp	r2, r3
 8009664:	d3f1      	bcc.n	800964a <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8afa      	ldrh	r2, [r7, #22]
 800966a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 800966e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8009670:	4618      	mov	r0, r3
 8009672:	3730      	adds	r7, #48	; 0x30
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10d      	bne.n	80096a6 <finish_flash_write+0x2e>
		return 0;
 800968a:	2300      	movs	r3, #0
 800968c:	e036      	b.n	80096fc <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	b291      	uxth	r1, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2100      	movs	r1, #0
 80096a4:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80096ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b0:	d3ed      	bcc.n	800968e <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f885 	bl	80097c2 <get_bytes_remaining>
 80096b8:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80096c0:	461a      	mov	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d204      	bcs.n	80096d2 <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fab3 	bl	8008c3e <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80096d8:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80096e0:	461a      	mov	r2, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fe8e 	bl	8009404 <write_to_flash_contiguous>
 80096e8:	4603      	mov	r3, r0
 80096ea:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff faba 	bl	8008c6e <lock_flash>

	return write_failures;
 80096fa:	897b      	ldrh	r3, [r7, #10]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af02      	add	r7, sp, #8
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009730:	b29b      	uxth	r3, r3
 8009732:	2200      	movs	r2, #0
 8009734:	9200      	str	r2, [sp, #0]
 8009736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fc38 	bl	8008fb2 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fbbf 	bl	8008ed4 <get_ECC_status>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fa67 	bl	8008c3e <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8009770:	2300      	movs	r3, #0
 8009772:	81bb      	strh	r3, [r7, #12]
 8009774:	e011      	b.n	800979a <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 8009776:	89bb      	ldrh	r3, [r7, #12]
 8009778:	019b      	lsls	r3, r3, #6
 800977a:	b29b      	uxth	r3, r3
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fb78 	bl	8008e74 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <erase_flash+0x36>
			erase_failures++;
 800978e:	89fb      	ldrh	r3, [r7, #14]
 8009790:	3301      	adds	r3, #1
 8009792:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8009794:	89bb      	ldrh	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	81bb      	strh	r3, [r7, #12]
 800979a:	89bb      	ldrh	r3, [r7, #12]
 800979c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d9e8      	bls.n	8009776 <erase_flash+0x18>
	}

	lock_flash(flash);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff fa62 	bl	8008c6e <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fc79 	bl	80090a2 <find_write_ptr>
	flash->write_buffer_size = 0;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 80097b8:	89fb      	ldrh	r3, [r7, #14]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80097d0:	02db      	lsls	r3, r3, #11
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 80097d8:	4413      	add	r3, r2
 80097da:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 80097de:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 80097e8:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b086      	sub	sp, #24
 80097fa:	af02      	add	r7, sp, #8
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	461a      	mov	r2, r3
 8009802:	460b      	mov	r3, r1
 8009804:	72fb      	strb	r3, [r7, #11]
 8009806:	4613      	mov	r3, r2
 8009808:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff fa17 	bl	8008c3e <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b40      	subs	r3, #64	; 0x40
 8009816:	b29b      	uxth	r3, r3
 8009818:	893a      	ldrh	r2, [r7, #8]
 800981a:	2100      	movs	r1, #0
 800981c:	9100      	str	r1, [sp, #0]
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff fbe3 	bl	8008fec <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7ff fa21 	bl	8008c6e <lock_flash>

	return flash->last_write_failure_status;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 800983a:	b580      	push	{r7, lr}
 800983c:	b086      	sub	sp, #24
 800983e:	af02      	add	r7, sp, #8
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	461a      	mov	r2, r3
 8009846:	460b      	mov	r3, r1
 8009848:	72fb      	strb	r3, [r7, #11]
 800984a:	4613      	mov	r3, r2
 800984c:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b40      	subs	r3, #64	; 0x40
 8009854:	b29b      	uxth	r3, r3
 8009856:	893a      	ldrh	r2, [r7, #8]
 8009858:	2100      	movs	r1, #0
 800985a:	9100      	str	r1, [sp, #0]
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fba7 	bl	8008fb2 <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff f9e2 	bl	8008c3e <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 800987a:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff faf8 	bl	8008e74 <erase_block>
	lock_flash(flash);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff f9f2 	bl	8008c6e <lock_flash>
	return flash->last_erase_failure_status;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8009898:	b580      	push	{r7, lr}
 800989a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800989e:	af00      	add	r7, sp, #0
 80098a0:	1d3b      	adds	r3, r7, #4
 80098a2:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	3304      	adds	r3, #4
 80098ae:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f004 fdb1 	bl	800e41c <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 80098ba:	f107 0108 	add.w	r1, r7, #8
 80098be:	1d3b      	adds	r3, r7, #4
 80098c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff fe0c 	bl	80094e2 <write_to_flash>
}
 80098ca:	bf00      	nop
 80098cc:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098d8:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <HAL_Init+0x40>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a0d      	ldr	r2, [pc, #52]	; (8009914 <HAL_Init+0x40>)
 80098de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_Init+0x40>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a0a      	ldr	r2, [pc, #40]	; (8009914 <HAL_Init+0x40>)
 80098ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098f0:	4b08      	ldr	r3, [pc, #32]	; (8009914 <HAL_Init+0x40>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a07      	ldr	r2, [pc, #28]	; (8009914 <HAL_Init+0x40>)
 80098f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098fc:	2003      	movs	r0, #3
 80098fe:	f000 f965 	bl	8009bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009902:	2000      	movs	r0, #0
 8009904:	f000 f808 	bl	8009918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009908:	f7fc fc0a 	bl	8006120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40023c00 	.word	0x40023c00

08009918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009920:	4b12      	ldr	r3, [pc, #72]	; (800996c <HAL_InitTick+0x54>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <HAL_InitTick+0x58>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	4619      	mov	r1, r3
 800992a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800992e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f981 	bl	8009c3e <HAL_SYSTICK_Config>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e00e      	b.n	8009964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b0f      	cmp	r3, #15
 800994a:	d80a      	bhi.n	8009962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800994c:	2200      	movs	r2, #0
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	f000 f945 	bl	8009be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009958:	4a06      	ldr	r2, [pc, #24]	; (8009974 <HAL_InitTick+0x5c>)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	200001b4 	.word	0x200001b4
 8009970:	200001ec 	.word	0x200001ec
 8009974:	200001e8 	.word	0x200001e8

08009978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <HAL_IncTick+0x20>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <HAL_IncTick+0x24>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4413      	add	r3, r2
 8009988:	4a04      	ldr	r2, [pc, #16]	; (800999c <HAL_IncTick+0x24>)
 800998a:	6013      	str	r3, [r2, #0]
}
 800998c:	bf00      	nop
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	200001ec 	.word	0x200001ec
 800999c:	200024a0 	.word	0x200024a0

080099a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
  return uwTick;
 80099a4:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <HAL_GetTick+0x14>)
 80099a6:	681b      	ldr	r3, [r3, #0]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	200024a0 	.word	0x200024a0

080099b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80099c0:	f7ff ffee 	bl	80099a0 <HAL_GetTick>
 80099c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d005      	beq.n	80099de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80099d2:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <HAL_Delay+0x44>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80099de:	bf00      	nop
 80099e0:	f7ff ffde 	bl	80099a0 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d8f7      	bhi.n	80099e0 <HAL_Delay+0x28>
  {
  }
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200001ec 	.word	0x200001ec

08009a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a10:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <__NVIC_SetPriorityGrouping+0x44>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a32:	4a04      	ldr	r2, [pc, #16]	; (8009a44 <__NVIC_SetPriorityGrouping+0x44>)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	60d3      	str	r3, [r2, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	e000ed00 	.word	0xe000ed00

08009a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a4c:	4b04      	ldr	r3, [pc, #16]	; (8009a60 <__NVIC_GetPriorityGrouping+0x18>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	0a1b      	lsrs	r3, r3, #8
 8009a52:	f003 0307 	and.w	r3, r3, #7
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db0b      	blt.n	8009a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	f003 021f 	and.w	r2, r3, #31
 8009a7c:	4907      	ldr	r1, [pc, #28]	; (8009a9c <__NVIC_EnableIRQ+0x38>)
 8009a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	2001      	movs	r0, #1
 8009a86:	fa00 f202 	lsl.w	r2, r0, r2
 8009a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	e000e100 	.word	0xe000e100

08009aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	6039      	str	r1, [r7, #0]
 8009aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	db0a      	blt.n	8009aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	490c      	ldr	r1, [pc, #48]	; (8009aec <__NVIC_SetPriority+0x4c>)
 8009aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009abe:	0112      	lsls	r2, r2, #4
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009ac8:	e00a      	b.n	8009ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	4908      	ldr	r1, [pc, #32]	; (8009af0 <__NVIC_SetPriority+0x50>)
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	0112      	lsls	r2, r2, #4
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	440b      	add	r3, r1
 8009ade:	761a      	strb	r2, [r3, #24]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	e000e100 	.word	0xe000e100
 8009af0:	e000ed00 	.word	0xe000ed00

08009af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b089      	sub	sp, #36	; 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f1c3 0307 	rsb	r3, r3, #7
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	bf28      	it	cs
 8009b12:	2304      	movcs	r3, #4
 8009b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	2b06      	cmp	r3, #6
 8009b1c:	d902      	bls.n	8009b24 <NVIC_EncodePriority+0x30>
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3b03      	subs	r3, #3
 8009b22:	e000      	b.n	8009b26 <NVIC_EncodePriority+0x32>
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	43da      	mvns	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	401a      	ands	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	fa01 f303 	lsl.w	r3, r1, r3
 8009b46:	43d9      	mvns	r1, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b4c:	4313      	orrs	r3, r2
         );
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3724      	adds	r7, #36	; 0x24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
	...

08009b5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b60:	f3bf 8f4f 	dsb	sy
}
 8009b64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <__NVIC_SystemReset+0x24>)
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b6e:	4904      	ldr	r1, [pc, #16]	; (8009b80 <__NVIC_SystemReset+0x24>)
 8009b70:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <__NVIC_SystemReset+0x28>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b76:	f3bf 8f4f 	dsb	sy
}
 8009b7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009b7c:	bf00      	nop
 8009b7e:	e7fd      	b.n	8009b7c <__NVIC_SystemReset+0x20>
 8009b80:	e000ed00 	.word	0xe000ed00
 8009b84:	05fa0004 	.word	0x05fa0004

08009b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b98:	d301      	bcc.n	8009b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e00f      	b.n	8009bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b9e:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <SysTick_Config+0x40>)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ba6:	210f      	movs	r1, #15
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	f7ff ff78 	bl	8009aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <SysTick_Config+0x40>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009bb6:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <SysTick_Config+0x40>)
 8009bb8:	2207      	movs	r2, #7
 8009bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	e000e010 	.word	0xe000e010

08009bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff ff13 	bl	8009a00 <__NVIC_SetPriorityGrouping>
}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	4603      	mov	r3, r0
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bf4:	f7ff ff28 	bl	8009a48 <__NVIC_GetPriorityGrouping>
 8009bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	f7ff ff78 	bl	8009af4 <NVIC_EncodePriority>
 8009c04:	4602      	mov	r2, r0
 8009c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff ff47 	bl	8009aa0 <__NVIC_SetPriority>
}
 8009c12:	bf00      	nop
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	4603      	mov	r3, r0
 8009c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff ff1b 	bl	8009a64 <__NVIC_EnableIRQ>
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009c3a:	f7ff ff8f 	bl	8009b5c <__NVIC_SystemReset>

08009c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff ff9e 	bl	8009b88 <SysTick_Config>
 8009c4c:	4603      	mov	r3, r0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009c64:	f7ff fe9c 	bl	80099a0 <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e099      	b.n	8009da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0201 	bic.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c94:	e00f      	b.n	8009cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c96:	f7ff fe83 	bl	80099a0 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b05      	cmp	r3, #5
 8009ca2:	d908      	bls.n	8009cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2203      	movs	r2, #3
 8009cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e078      	b.n	8009da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e8      	bne.n	8009c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4b38      	ldr	r3, [pc, #224]	; (8009db0 <HAL_DMA_Init+0x158>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d107      	bne.n	8009d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f023 0307 	bic.w	r3, r3, #7
 8009d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d117      	bne.n	8009d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fb01 	bl	800a364 <DMA_CheckFifoParam>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2240      	movs	r2, #64	; 0x40
 8009d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009d76:	2301      	movs	r3, #1
 8009d78:	e016      	b.n	8009da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fab8 	bl	800a2f8 <DMA_CalcBaseAndBitshift>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d90:	223f      	movs	r2, #63	; 0x3f
 8009d92:	409a      	lsls	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	f010803f 	.word	0xf010803f

08009db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_DMA_Start_IT+0x26>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e040      	b.n	8009e5c <HAL_DMA_Start_IT+0xa8>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d12f      	bne.n	8009e4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2202      	movs	r2, #2
 8009df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fa4a 	bl	800a29c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0c:	223f      	movs	r2, #63	; 0x3f
 8009e0e:	409a      	lsls	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0216 	orr.w	r2, r2, #22
 8009e22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0208 	orr.w	r2, r2, #8
 8009e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0201 	orr.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	e005      	b.n	8009e5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009e56:	2302      	movs	r3, #2
 8009e58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009e72:	f7ff fd95 	bl	80099a0 <HAL_GetTick>
 8009e76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d008      	beq.n	8009e96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2280      	movs	r2, #128	; 0x80
 8009e88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e052      	b.n	8009f3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 0216 	bic.w	r2, r2, #22
 8009ea4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	695a      	ldr	r2, [r3, #20]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <HAL_DMA_Abort+0x62>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0208 	bic.w	r2, r2, #8
 8009ed4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ee6:	e013      	b.n	8009f10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ee8:	f7ff fd5a 	bl	80099a0 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	d90c      	bls.n	8009f10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2203      	movs	r2, #3
 8009f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e015      	b.n	8009f3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e4      	bne.n	8009ee8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f22:	223f      	movs	r2, #63	; 0x3f
 8009f24:	409a      	lsls	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d004      	beq.n	8009f62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2280      	movs	r2, #128	; 0x80
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e00c      	b.n	8009f7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2205      	movs	r2, #5
 8009f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009f94:	4b92      	ldr	r3, [pc, #584]	; (800a1e0 <HAL_DMA_IRQHandler+0x258>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a92      	ldr	r2, [pc, #584]	; (800a1e4 <HAL_DMA_IRQHandler+0x25c>)
 8009f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9e:	0a9b      	lsrs	r3, r3, #10
 8009fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	409a      	lsls	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d01a      	beq.n	8009ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d013      	beq.n	8009ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0204 	bic.w	r2, r2, #4
 8009fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	409a      	lsls	r2, r3
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fec:	f043 0201 	orr.w	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	409a      	lsls	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4013      	ands	r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d012      	beq.n	800a02a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00b      	beq.n	800a02a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a016:	2201      	movs	r2, #1
 800a018:	409a      	lsls	r2, r3
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a022:	f043 0202 	orr.w	r2, r3, #2
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	2204      	movs	r2, #4
 800a030:	409a      	lsls	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4013      	ands	r3, r2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d012      	beq.n	800a060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04c:	2204      	movs	r2, #4
 800a04e:	409a      	lsls	r2, r3
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a058:	f043 0204 	orr.w	r2, r3, #4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a064:	2210      	movs	r2, #16
 800a066:	409a      	lsls	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4013      	ands	r3, r2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d043      	beq.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d03c      	beq.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a082:	2210      	movs	r2, #16
 800a084:	409a      	lsls	r2, r3
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d018      	beq.n	800a0ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d108      	bne.n	800a0b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d024      	beq.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
 800a0b6:	e01f      	b.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01b      	beq.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
 800a0c8:	e016      	b.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d107      	bne.n	800a0e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0208 	bic.w	r2, r2, #8
 800a0e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	409a      	lsls	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4013      	ands	r3, r2
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 808e 	beq.w	800a226 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8086 	beq.w	800a226 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a11e:	2220      	movs	r2, #32
 800a120:	409a      	lsls	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d136      	bne.n	800a1a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0216 	bic.w	r2, r2, #22
 800a140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695a      	ldr	r2, [r3, #20]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <HAL_DMA_IRQHandler+0x1da>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0208 	bic.w	r2, r2, #8
 800a170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a176:	223f      	movs	r2, #63	; 0x3f
 800a178:	409a      	lsls	r2, r3
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a192:	2b00      	cmp	r3, #0
 800a194:	d07d      	beq.n	800a292 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	4798      	blx	r3
        }
        return;
 800a19e:	e078      	b.n	800a292 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01c      	beq.n	800a1e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d108      	bne.n	800a1ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d030      	beq.n	800a226 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	4798      	blx	r3
 800a1cc:	e02b      	b.n	800a226 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d027      	beq.n	800a226 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	4798      	blx	r3
 800a1de:	e022      	b.n	800a226 <HAL_DMA_IRQHandler+0x29e>
 800a1e0:	200001b4 	.word	0x200001b4
 800a1e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10f      	bne.n	800a216 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f022 0210 	bic.w	r2, r2, #16
 800a204:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d032      	beq.n	800a294 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d022      	beq.n	800a280 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2205      	movs	r2, #5
 800a23e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 0201 	bic.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	3301      	adds	r3, #1
 800a256:	60bb      	str	r3, [r7, #8]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d307      	bcc.n	800a26e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1f2      	bne.n	800a252 <HAL_DMA_IRQHandler+0x2ca>
 800a26c:	e000      	b.n	800a270 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a26e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	4798      	blx	r3
 800a290:	e000      	b.n	800a294 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a292:	bf00      	nop
    }
  }
}
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop

0800a29c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	d108      	bne.n	800a2dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a2da:	e007      	b.n	800a2ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	60da      	str	r2, [r3, #12]
}
 800a2ec:	bf00      	nop
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	3b10      	subs	r3, #16
 800a308:	4a14      	ldr	r2, [pc, #80]	; (800a35c <DMA_CalcBaseAndBitshift+0x64>)
 800a30a:	fba2 2303 	umull	r2, r3, r2, r3
 800a30e:	091b      	lsrs	r3, r3, #4
 800a310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a312:	4a13      	ldr	r2, [pc, #76]	; (800a360 <DMA_CalcBaseAndBitshift+0x68>)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b03      	cmp	r3, #3
 800a324:	d909      	bls.n	800a33a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	659a      	str	r2, [r3, #88]	; 0x58
 800a338:	e007      	b.n	800a34a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	aaaaaaab 	.word	0xaaaaaaab
 800a360:	0800fa90 	.word	0x0800fa90

0800a364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d11f      	bne.n	800a3be <DMA_CheckFifoParam+0x5a>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d856      	bhi.n	800a432 <DMA_CheckFifoParam+0xce>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <DMA_CheckFifoParam+0x28>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3af 	.word	0x0800a3af
 800a394:	0800a39d 	.word	0x0800a39d
 800a398:	0800a433 	.word	0x0800a433
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d046      	beq.n	800a436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3ac:	e043      	b.n	800a436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a3b6:	d140      	bne.n	800a43a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3bc:	e03d      	b.n	800a43a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c6:	d121      	bne.n	800a40c <DMA_CheckFifoParam+0xa8>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d837      	bhi.n	800a43e <DMA_CheckFifoParam+0xda>
 800a3ce:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <DMA_CheckFifoParam+0x70>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a3e5 	.word	0x0800a3e5
 800a3d8:	0800a3eb 	.word	0x0800a3eb
 800a3dc:	0800a3e5 	.word	0x0800a3e5
 800a3e0:	0800a3fd 	.word	0x0800a3fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e8:	e030      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d025      	beq.n	800a442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3fa:	e022      	b.n	800a442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a404:	d11f      	bne.n	800a446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a40a:	e01c      	b.n	800a446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d903      	bls.n	800a41a <DMA_CheckFifoParam+0xb6>
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2b03      	cmp	r3, #3
 800a416:	d003      	beq.n	800a420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a418:	e018      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	73fb      	strb	r3, [r7, #15]
      break;
 800a41e:	e015      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00e      	beq.n	800a44a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	73fb      	strb	r3, [r7, #15]
      break;
 800a430:	e00b      	b.n	800a44a <DMA_CheckFifoParam+0xe6>
      break;
 800a432:	bf00      	nop
 800a434:	e00a      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;
 800a436:	bf00      	nop
 800a438:	e008      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;
 800a43a:	bf00      	nop
 800a43c:	e006      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;
 800a43e:	bf00      	nop
 800a440:	e004      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;
 800a442:	bf00      	nop
 800a444:	e002      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;   
 800a446:	bf00      	nop
 800a448:	e000      	b.n	800a44c <DMA_CheckFifoParam+0xe8>
      break;
 800a44a:	bf00      	nop
    }
  } 
  
  return status; 
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop

0800a45c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a466:	2300      	movs	r3, #0
 800a468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	e165      	b.n	800a744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a478:	2201      	movs	r2, #1
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4013      	ands	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	429a      	cmp	r2, r3
 800a492:	f040 8154 	bne.w	800a73e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d005      	beq.n	800a4ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d130      	bne.n	800a510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a4be:	43db      	mvns	r3, r3
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	091b      	lsrs	r3, r3, #4
 800a4fa:	f003 0201 	and.w	r2, r3, #1
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	4313      	orrs	r3, r2
 800a508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d017      	beq.n	800a54c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	2203      	movs	r2, #3
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	43db      	mvns	r3, r3
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	4013      	ands	r3, r2
 800a532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	fa02 f303 	lsl.w	r3, r2, r3
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	4313      	orrs	r3, r2
 800a544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d123      	bne.n	800a5a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	08da      	lsrs	r2, r3, #3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3208      	adds	r2, #8
 800a560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	f003 0307 	and.w	r3, r3, #7
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	220f      	movs	r2, #15
 800a570:	fa02 f303 	lsl.w	r3, r2, r3
 800a574:	43db      	mvns	r3, r3
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	4013      	ands	r3, r2
 800a57a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	4313      	orrs	r3, r2
 800a590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	08da      	lsrs	r2, r3, #3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3208      	adds	r2, #8
 800a59a:	69b9      	ldr	r1, [r7, #24]
 800a59c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	2203      	movs	r2, #3
 800a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f003 0203 	and.w	r2, r3, #3
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 80ae 	beq.w	800a73e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	4b5d      	ldr	r3, [pc, #372]	; (800a75c <HAL_GPIO_Init+0x300>)
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ea:	4a5c      	ldr	r2, [pc, #368]	; (800a75c <HAL_GPIO_Init+0x300>)
 800a5ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5f0:	6453      	str	r3, [r2, #68]	; 0x44
 800a5f2:	4b5a      	ldr	r3, [pc, #360]	; (800a75c <HAL_GPIO_Init+0x300>)
 800a5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a5fe:	4a58      	ldr	r2, [pc, #352]	; (800a760 <HAL_GPIO_Init+0x304>)
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	089b      	lsrs	r3, r3, #2
 800a604:	3302      	adds	r3, #2
 800a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	220f      	movs	r2, #15
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	43db      	mvns	r3, r3
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	4013      	ands	r3, r2
 800a620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a4f      	ldr	r2, [pc, #316]	; (800a764 <HAL_GPIO_Init+0x308>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d025      	beq.n	800a676 <HAL_GPIO_Init+0x21a>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a4e      	ldr	r2, [pc, #312]	; (800a768 <HAL_GPIO_Init+0x30c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d01f      	beq.n	800a672 <HAL_GPIO_Init+0x216>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a4d      	ldr	r2, [pc, #308]	; (800a76c <HAL_GPIO_Init+0x310>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d019      	beq.n	800a66e <HAL_GPIO_Init+0x212>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a4c      	ldr	r2, [pc, #304]	; (800a770 <HAL_GPIO_Init+0x314>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d013      	beq.n	800a66a <HAL_GPIO_Init+0x20e>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a4b      	ldr	r2, [pc, #300]	; (800a774 <HAL_GPIO_Init+0x318>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d00d      	beq.n	800a666 <HAL_GPIO_Init+0x20a>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a4a      	ldr	r2, [pc, #296]	; (800a778 <HAL_GPIO_Init+0x31c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d007      	beq.n	800a662 <HAL_GPIO_Init+0x206>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a49      	ldr	r2, [pc, #292]	; (800a77c <HAL_GPIO_Init+0x320>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d101      	bne.n	800a65e <HAL_GPIO_Init+0x202>
 800a65a:	2306      	movs	r3, #6
 800a65c:	e00c      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a65e:	2307      	movs	r3, #7
 800a660:	e00a      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a662:	2305      	movs	r3, #5
 800a664:	e008      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a666:	2304      	movs	r3, #4
 800a668:	e006      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a66a:	2303      	movs	r3, #3
 800a66c:	e004      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a66e:	2302      	movs	r3, #2
 800a670:	e002      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <HAL_GPIO_Init+0x21c>
 800a676:	2300      	movs	r3, #0
 800a678:	69fa      	ldr	r2, [r7, #28]
 800a67a:	f002 0203 	and.w	r2, r2, #3
 800a67e:	0092      	lsls	r2, r2, #2
 800a680:	4093      	lsls	r3, r2
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	4313      	orrs	r3, r2
 800a686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a688:	4935      	ldr	r1, [pc, #212]	; (800a760 <HAL_GPIO_Init+0x304>)
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	089b      	lsrs	r3, r3, #2
 800a68e:	3302      	adds	r3, #2
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a696:	4b3a      	ldr	r3, [pc, #232]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	43db      	mvns	r3, r3
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a6ba:	4a31      	ldr	r2, [pc, #196]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a6c0:	4b2f      	ldr	r3, [pc, #188]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	43db      	mvns	r3, r3
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a6e4:	4a26      	ldr	r2, [pc, #152]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a6ea:	4b25      	ldr	r3, [pc, #148]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	69ba      	ldr	r2, [r7, #24]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a70e:	4a1c      	ldr	r2, [pc, #112]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a714:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	43db      	mvns	r3, r3
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	4013      	ands	r3, r2
 800a722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d003      	beq.n	800a738 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	4313      	orrs	r3, r2
 800a736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a738:	4a11      	ldr	r2, [pc, #68]	; (800a780 <HAL_GPIO_Init+0x324>)
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	3301      	adds	r3, #1
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	2b0f      	cmp	r3, #15
 800a748:	f67f ae96 	bls.w	800a478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	3724      	adds	r7, #36	; 0x24
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40023800 	.word	0x40023800
 800a760:	40013800 	.word	0x40013800
 800a764:	40020000 	.word	0x40020000
 800a768:	40020400 	.word	0x40020400
 800a76c:	40020800 	.word	0x40020800
 800a770:	40020c00 	.word	0x40020c00
 800a774:	40021000 	.word	0x40021000
 800a778:	40021400 	.word	0x40021400
 800a77c:	40021800 	.word	0x40021800
 800a780:	40013c00 	.word	0x40013c00

0800a784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	887b      	ldrh	r3, [r7, #2]
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a79c:	2301      	movs	r3, #1
 800a79e:	73fb      	strb	r3, [r7, #15]
 800a7a0:	e001      	b.n	800a7a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	807b      	strh	r3, [r7, #2]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a7c4:	787b      	ldrb	r3, [r7, #1]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a7ca:	887a      	ldrh	r2, [r7, #2]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a7d0:	e003      	b.n	800a7da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a7d2:	887b      	ldrh	r3, [r7, #2]
 800a7d4:	041a      	lsls	r2, r3, #16
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	619a      	str	r2, [r3, #24]
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a7f8:	887a      	ldrh	r2, [r7, #2]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	041a      	lsls	r2, r3, #16
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	43d9      	mvns	r1, r3
 800a804:	887b      	ldrh	r3, [r7, #2]
 800a806:	400b      	ands	r3, r1
 800a808:	431a      	orrs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	619a      	str	r2, [r3, #24]
}
 800a80e:	bf00      	nop
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e034      	b.n	800a896 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a834:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f245 5255 	movw	r2, #21845	; 0x5555
 800a83e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6852      	ldr	r2, [r2, #4]
 800a848:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6892      	ldr	r2, [r2, #8]
 800a852:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a854:	f7ff f8a4 	bl	80099a0 <HAL_GetTick>
 800a858:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a85a:	e00f      	b.n	800a87c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a85c:	f7ff f8a0 	bl	80099a0 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b31      	cmp	r3, #49	; 0x31
 800a868:	d908      	bls.n	800a87c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e00c      	b.n	800a896 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e8      	bne.n	800a85c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a892:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a8ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e0cc      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a8d4:	4b68      	ldr	r3, [pc, #416]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 030f 	and.w	r3, r3, #15
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d90c      	bls.n	800a8fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8e2:	4b65      	ldr	r3, [pc, #404]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ea:	4b63      	ldr	r3, [pc, #396]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 030f 	and.w	r3, r3, #15
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d001      	beq.n	800a8fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e0b8      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d020      	beq.n	800a94a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a914:	4b59      	ldr	r3, [pc, #356]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	4a58      	ldr	r2, [pc, #352]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a91a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a91e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0308 	and.w	r3, r3, #8
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a92c:	4b53      	ldr	r3, [pc, #332]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4a52      	ldr	r2, [pc, #328]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a938:	4b50      	ldr	r3, [pc, #320]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	494d      	ldr	r1, [pc, #308]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a946:	4313      	orrs	r3, r2
 800a948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d044      	beq.n	800a9e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d107      	bne.n	800a96e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a95e:	4b47      	ldr	r3, [pc, #284]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d119      	bne.n	800a99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e07f      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d003      	beq.n	800a97e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d107      	bne.n	800a98e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a97e:	4b3f      	ldr	r3, [pc, #252]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e06f      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a98e:	4b3b      	ldr	r3, [pc, #236]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e067      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a99e:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f023 0203 	bic.w	r2, r3, #3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4934      	ldr	r1, [pc, #208]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a9b0:	f7fe fff6 	bl	80099a0 <HAL_GetTick>
 800a9b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9b6:	e00a      	b.n	800a9ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9b8:	f7fe fff2 	bl	80099a0 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e04f      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ce:	4b2b      	ldr	r3, [pc, #172]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f003 020c 	and.w	r2, r3, #12
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d1eb      	bne.n	800a9b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d20c      	bcs.n	800aa08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ee:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9f6:	4b20      	ldr	r3, [pc, #128]	; (800aa78 <HAL_RCC_ClockConfig+0x1b8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 030f 	and.w	r3, r3, #15
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d001      	beq.n	800aa08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e032      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d008      	beq.n	800aa26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa14:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	4916      	ldr	r1, [pc, #88]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800aa22:	4313      	orrs	r3, r2
 800aa24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0308 	and.w	r3, r3, #8
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa32:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	490e      	ldr	r1, [pc, #56]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa46:	f000 f855 	bl	800aaf4 <HAL_RCC_GetSysClockFreq>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <HAL_RCC_ClockConfig+0x1bc>)
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	091b      	lsrs	r3, r3, #4
 800aa52:	f003 030f 	and.w	r3, r3, #15
 800aa56:	490a      	ldr	r1, [pc, #40]	; (800aa80 <HAL_RCC_ClockConfig+0x1c0>)
 800aa58:	5ccb      	ldrb	r3, [r1, r3]
 800aa5a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <HAL_RCC_ClockConfig+0x1c4>)
 800aa60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa62:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <HAL_RCC_ClockConfig+0x1c8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe ff56 	bl	8009918 <HAL_InitTick>

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	40023c00 	.word	0x40023c00
 800aa7c:	40023800 	.word	0x40023800
 800aa80:	0800f628 	.word	0x0800f628
 800aa84:	200001b4 	.word	0x200001b4
 800aa88:	200001e8 	.word	0x200001e8

0800aa8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa90:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa92:	681b      	ldr	r3, [r3, #0]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	200001b4 	.word	0x200001b4

0800aaa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aaa8:	f7ff fff0 	bl	800aa8c <HAL_RCC_GetHCLKFreq>
 800aaac:	4602      	mov	r2, r0
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	0a9b      	lsrs	r3, r3, #10
 800aab4:	f003 0307 	and.w	r3, r3, #7
 800aab8:	4903      	ldr	r1, [pc, #12]	; (800aac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aaba:	5ccb      	ldrb	r3, [r1, r3]
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	40023800 	.word	0x40023800
 800aac8:	0800f638 	.word	0x0800f638

0800aacc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aad0:	f7ff ffdc 	bl	800aa8c <HAL_RCC_GetHCLKFreq>
 800aad4:	4602      	mov	r2, r0
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <HAL_RCC_GetPCLK2Freq+0x20>)
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	0b5b      	lsrs	r3, r3, #13
 800aadc:	f003 0307 	and.w	r3, r3, #7
 800aae0:	4903      	ldr	r1, [pc, #12]	; (800aaf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aae2:	5ccb      	ldrb	r3, [r1, r3]
 800aae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	40023800 	.word	0x40023800
 800aaf0:	0800f638 	.word	0x0800f638

0800aaf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaf8:	b088      	sub	sp, #32
 800aafa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab10:	4bce      	ldr	r3, [pc, #824]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f003 030c 	and.w	r3, r3, #12
 800ab18:	2b0c      	cmp	r3, #12
 800ab1a:	f200 818d 	bhi.w	800ae38 <HAL_RCC_GetSysClockFreq+0x344>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <HAL_RCC_GetSysClockFreq+0x30>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab59 	.word	0x0800ab59
 800ab28:	0800ae39 	.word	0x0800ae39
 800ab2c:	0800ae39 	.word	0x0800ae39
 800ab30:	0800ae39 	.word	0x0800ae39
 800ab34:	0800ab5f 	.word	0x0800ab5f
 800ab38:	0800ae39 	.word	0x0800ae39
 800ab3c:	0800ae39 	.word	0x0800ae39
 800ab40:	0800ae39 	.word	0x0800ae39
 800ab44:	0800ab65 	.word	0x0800ab65
 800ab48:	0800ae39 	.word	0x0800ae39
 800ab4c:	0800ae39 	.word	0x0800ae39
 800ab50:	0800ae39 	.word	0x0800ae39
 800ab54:	0800acd9 	.word	0x0800acd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab58:	4bbd      	ldr	r3, [pc, #756]	; (800ae50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ab5a:	61bb      	str	r3, [r7, #24]
       break;
 800ab5c:	e16f      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab5e:	4bbc      	ldr	r3, [pc, #752]	; (800ae50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ab60:	61bb      	str	r3, [r7, #24]
      break;
 800ab62:	e16c      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab64:	4bb9      	ldr	r3, [pc, #740]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab6e:	4bb7      	ldr	r3, [pc, #732]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d053      	beq.n	800ac22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab7a:	4bb4      	ldr	r3, [pc, #720]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	099b      	lsrs	r3, r3, #6
 800ab80:	461a      	mov	r2, r3
 800ab82:	f04f 0300 	mov.w	r3, #0
 800ab86:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ab8a:	f04f 0100 	mov.w	r1, #0
 800ab8e:	ea02 0400 	and.w	r4, r2, r0
 800ab92:	603c      	str	r4, [r7, #0]
 800ab94:	400b      	ands	r3, r1
 800ab96:	607b      	str	r3, [r7, #4]
 800ab98:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f04f 0200 	mov.w	r2, #0
 800aba4:	f04f 0300 	mov.w	r3, #0
 800aba8:	014b      	lsls	r3, r1, #5
 800abaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800abae:	0142      	lsls	r2, r0, #5
 800abb0:	4610      	mov	r0, r2
 800abb2:	4619      	mov	r1, r3
 800abb4:	4623      	mov	r3, r4
 800abb6:	1ac0      	subs	r0, r0, r3
 800abb8:	462b      	mov	r3, r5
 800abba:	eb61 0103 	sbc.w	r1, r1, r3
 800abbe:	f04f 0200 	mov.w	r2, #0
 800abc2:	f04f 0300 	mov.w	r3, #0
 800abc6:	018b      	lsls	r3, r1, #6
 800abc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800abcc:	0182      	lsls	r2, r0, #6
 800abce:	1a12      	subs	r2, r2, r0
 800abd0:	eb63 0301 	sbc.w	r3, r3, r1
 800abd4:	f04f 0000 	mov.w	r0, #0
 800abd8:	f04f 0100 	mov.w	r1, #0
 800abdc:	00d9      	lsls	r1, r3, #3
 800abde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abe2:	00d0      	lsls	r0, r2, #3
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4621      	mov	r1, r4
 800abea:	1852      	adds	r2, r2, r1
 800abec:	4629      	mov	r1, r5
 800abee:	eb43 0101 	adc.w	r1, r3, r1
 800abf2:	460b      	mov	r3, r1
 800abf4:	f04f 0000 	mov.w	r0, #0
 800abf8:	f04f 0100 	mov.w	r1, #0
 800abfc:	0299      	lsls	r1, r3, #10
 800abfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ac02:	0290      	lsls	r0, r2, #10
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	f7f5 fffc 	bl	8000c10 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	e04c      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac22:	4b8a      	ldr	r3, [pc, #552]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	461a      	mov	r2, r3
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac32:	f04f 0100 	mov.w	r1, #0
 800ac36:	ea02 0a00 	and.w	sl, r2, r0
 800ac3a:	ea03 0b01 	and.w	fp, r3, r1
 800ac3e:	4650      	mov	r0, sl
 800ac40:	4659      	mov	r1, fp
 800ac42:	f04f 0200 	mov.w	r2, #0
 800ac46:	f04f 0300 	mov.w	r3, #0
 800ac4a:	014b      	lsls	r3, r1, #5
 800ac4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac50:	0142      	lsls	r2, r0, #5
 800ac52:	4610      	mov	r0, r2
 800ac54:	4619      	mov	r1, r3
 800ac56:	ebb0 000a 	subs.w	r0, r0, sl
 800ac5a:	eb61 010b 	sbc.w	r1, r1, fp
 800ac5e:	f04f 0200 	mov.w	r2, #0
 800ac62:	f04f 0300 	mov.w	r3, #0
 800ac66:	018b      	lsls	r3, r1, #6
 800ac68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac6c:	0182      	lsls	r2, r0, #6
 800ac6e:	1a12      	subs	r2, r2, r0
 800ac70:	eb63 0301 	sbc.w	r3, r3, r1
 800ac74:	f04f 0000 	mov.w	r0, #0
 800ac78:	f04f 0100 	mov.w	r1, #0
 800ac7c:	00d9      	lsls	r1, r3, #3
 800ac7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac82:	00d0      	lsls	r0, r2, #3
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	eb12 020a 	adds.w	r2, r2, sl
 800ac8c:	eb43 030b 	adc.w	r3, r3, fp
 800ac90:	f04f 0000 	mov.w	r0, #0
 800ac94:	f04f 0100 	mov.w	r1, #0
 800ac98:	0299      	lsls	r1, r3, #10
 800ac9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ac9e:	0290      	lsls	r0, r2, #10
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4610      	mov	r0, r2
 800aca6:	4619      	mov	r1, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	461a      	mov	r2, r3
 800acac:	f04f 0300 	mov.w	r3, #0
 800acb0:	f7f5 ffae 	bl	8000c10 <__aeabi_uldivmod>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4613      	mov	r3, r2
 800acba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800acbc:	4b63      	ldr	r3, [pc, #396]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	0c1b      	lsrs	r3, r3, #16
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	3301      	adds	r3, #1
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd4:	61bb      	str	r3, [r7, #24]
      break;
 800acd6:	e0b2      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800acd8:	4b5c      	ldr	r3, [pc, #368]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ace0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ace2:	4b5a      	ldr	r3, [pc, #360]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d04d      	beq.n	800ad8a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acee:	4b57      	ldr	r3, [pc, #348]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	099b      	lsrs	r3, r3, #6
 800acf4:	461a      	mov	r2, r3
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800acfe:	f04f 0100 	mov.w	r1, #0
 800ad02:	ea02 0800 	and.w	r8, r2, r0
 800ad06:	ea03 0901 	and.w	r9, r3, r1
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	f04f 0300 	mov.w	r3, #0
 800ad16:	014b      	lsls	r3, r1, #5
 800ad18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad1c:	0142      	lsls	r2, r0, #5
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4619      	mov	r1, r3
 800ad22:	ebb0 0008 	subs.w	r0, r0, r8
 800ad26:	eb61 0109 	sbc.w	r1, r1, r9
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	018b      	lsls	r3, r1, #6
 800ad34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad38:	0182      	lsls	r2, r0, #6
 800ad3a:	1a12      	subs	r2, r2, r0
 800ad3c:	eb63 0301 	sbc.w	r3, r3, r1
 800ad40:	f04f 0000 	mov.w	r0, #0
 800ad44:	f04f 0100 	mov.w	r1, #0
 800ad48:	00d9      	lsls	r1, r3, #3
 800ad4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad4e:	00d0      	lsls	r0, r2, #3
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	eb12 0208 	adds.w	r2, r2, r8
 800ad58:	eb43 0309 	adc.w	r3, r3, r9
 800ad5c:	f04f 0000 	mov.w	r0, #0
 800ad60:	f04f 0100 	mov.w	r1, #0
 800ad64:	0299      	lsls	r1, r3, #10
 800ad66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad6a:	0290      	lsls	r0, r2, #10
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4610      	mov	r0, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f04f 0300 	mov.w	r3, #0
 800ad7c:	f7f5 ff48 	bl	8000c10 <__aeabi_uldivmod>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4613      	mov	r3, r2
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	e04a      	b.n	800ae20 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad8a:	4b30      	ldr	r3, [pc, #192]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	099b      	lsrs	r3, r3, #6
 800ad90:	461a      	mov	r2, r3
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ad9a:	f04f 0100 	mov.w	r1, #0
 800ad9e:	ea02 0400 	and.w	r4, r2, r0
 800ada2:	ea03 0501 	and.w	r5, r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	014b      	lsls	r3, r1, #5
 800adb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800adb8:	0142      	lsls	r2, r0, #5
 800adba:	4610      	mov	r0, r2
 800adbc:	4619      	mov	r1, r3
 800adbe:	1b00      	subs	r0, r0, r4
 800adc0:	eb61 0105 	sbc.w	r1, r1, r5
 800adc4:	f04f 0200 	mov.w	r2, #0
 800adc8:	f04f 0300 	mov.w	r3, #0
 800adcc:	018b      	lsls	r3, r1, #6
 800adce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800add2:	0182      	lsls	r2, r0, #6
 800add4:	1a12      	subs	r2, r2, r0
 800add6:	eb63 0301 	sbc.w	r3, r3, r1
 800adda:	f04f 0000 	mov.w	r0, #0
 800adde:	f04f 0100 	mov.w	r1, #0
 800ade2:	00d9      	lsls	r1, r3, #3
 800ade4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ade8:	00d0      	lsls	r0, r2, #3
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	1912      	adds	r2, r2, r4
 800adf0:	eb45 0303 	adc.w	r3, r5, r3
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f04f 0100 	mov.w	r1, #0
 800adfc:	0299      	lsls	r1, r3, #10
 800adfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ae02:	0290      	lsls	r0, r2, #10
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f04f 0300 	mov.w	r3, #0
 800ae14:	f7f5 fefc 	bl	8000c10 <__aeabi_uldivmod>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <HAL_RCC_GetSysClockFreq+0x358>)
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	0f1b      	lsrs	r3, r3, #28
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800ae2c:	69fa      	ldr	r2, [r7, #28]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae34:	61bb      	str	r3, [r7, #24]
      break;
 800ae36:	e002      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ae38:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ae3a:	61bb      	str	r3, [r7, #24]
      break;
 800ae3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3720      	adds	r7, #32
 800ae44:	46bd      	mov	sp, r7
 800ae46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40023800 	.word	0x40023800
 800ae50:	00f42400 	.word	0x00f42400

0800ae54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e28d      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 8083 	beq.w	800af7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae74:	4b94      	ldr	r3, [pc, #592]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f003 030c 	and.w	r3, r3, #12
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d019      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae80:	4b91      	ldr	r3, [pc, #580]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ae88:	2b08      	cmp	r3, #8
 800ae8a:	d106      	bne.n	800ae9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ae8c:	4b8e      	ldr	r3, [pc, #568]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae98:	d00c      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae9a:	4b8b      	ldr	r3, [pc, #556]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800aea2:	2b0c      	cmp	r3, #12
 800aea4:	d112      	bne.n	800aecc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aea6:	4b88      	ldr	r3, [pc, #544]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aeb2:	d10b      	bne.n	800aecc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeb4:	4b84      	ldr	r3, [pc, #528]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d05b      	beq.n	800af78 <HAL_RCC_OscConfig+0x124>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d157      	bne.n	800af78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e25a      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed4:	d106      	bne.n	800aee4 <HAL_RCC_OscConfig+0x90>
 800aed6:	4b7c      	ldr	r3, [pc, #496]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a7b      	ldr	r2, [pc, #492]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aedc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e01d      	b.n	800af20 <HAL_RCC_OscConfig+0xcc>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeec:	d10c      	bne.n	800af08 <HAL_RCC_OscConfig+0xb4>
 800aeee:	4b76      	ldr	r3, [pc, #472]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a75      	ldr	r2, [pc, #468]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	4b73      	ldr	r3, [pc, #460]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a72      	ldr	r2, [pc, #456]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	e00b      	b.n	800af20 <HAL_RCC_OscConfig+0xcc>
 800af08:	4b6f      	ldr	r3, [pc, #444]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a6e      	ldr	r2, [pc, #440]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	4b6c      	ldr	r3, [pc, #432]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a6b      	ldr	r2, [pc, #428]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d013      	beq.n	800af50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af28:	f7fe fd3a 	bl	80099a0 <HAL_GetTick>
 800af2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af2e:	e008      	b.n	800af42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af30:	f7fe fd36 	bl	80099a0 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b64      	cmp	r3, #100	; 0x64
 800af3c:	d901      	bls.n	800af42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e21f      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af42:	4b61      	ldr	r3, [pc, #388]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0f0      	beq.n	800af30 <HAL_RCC_OscConfig+0xdc>
 800af4e:	e014      	b.n	800af7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af50:	f7fe fd26 	bl	80099a0 <HAL_GetTick>
 800af54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af56:	e008      	b.n	800af6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af58:	f7fe fd22 	bl	80099a0 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b64      	cmp	r3, #100	; 0x64
 800af64:	d901      	bls.n	800af6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e20b      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af6a:	4b57      	ldr	r3, [pc, #348]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f0      	bne.n	800af58 <HAL_RCC_OscConfig+0x104>
 800af76:	e000      	b.n	800af7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d06f      	beq.n	800b066 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af86:	4b50      	ldr	r3, [pc, #320]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f003 030c 	and.w	r3, r3, #12
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d017      	beq.n	800afc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af92:	4b4d      	ldr	r3, [pc, #308]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d105      	bne.n	800afaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800af9e:	4b4a      	ldr	r3, [pc, #296]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00b      	beq.n	800afc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afaa:	4b47      	ldr	r3, [pc, #284]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800afb2:	2b0c      	cmp	r3, #12
 800afb4:	d11c      	bne.n	800aff0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afb6:	4b44      	ldr	r3, [pc, #272]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d116      	bne.n	800aff0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afc2:	4b41      	ldr	r3, [pc, #260]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <HAL_RCC_OscConfig+0x186>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d001      	beq.n	800afda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e1d3      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afda:	4b3b      	ldr	r3, [pc, #236]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	4937      	ldr	r1, [pc, #220]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800afea:	4313      	orrs	r3, r2
 800afec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afee:	e03a      	b.n	800b066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d020      	beq.n	800b03a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aff8:	4b34      	ldr	r3, [pc, #208]	; (800b0cc <HAL_RCC_OscConfig+0x278>)
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800affe:	f7fe fccf 	bl	80099a0 <HAL_GetTick>
 800b002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b004:	e008      	b.n	800b018 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b006:	f7fe fccb 	bl	80099a0 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	d901      	bls.n	800b018 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e1b4      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b018:	4b2b      	ldr	r3, [pc, #172]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0f0      	beq.n	800b006 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b024:	4b28      	ldr	r3, [pc, #160]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	4925      	ldr	r1, [pc, #148]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800b034:	4313      	orrs	r3, r2
 800b036:	600b      	str	r3, [r1, #0]
 800b038:	e015      	b.n	800b066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b03a:	4b24      	ldr	r3, [pc, #144]	; (800b0cc <HAL_RCC_OscConfig+0x278>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b040:	f7fe fcae 	bl	80099a0 <HAL_GetTick>
 800b044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b046:	e008      	b.n	800b05a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b048:	f7fe fcaa 	bl	80099a0 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	d901      	bls.n	800b05a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e193      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b05a:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1f0      	bne.n	800b048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d036      	beq.n	800b0e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d016      	beq.n	800b0a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <HAL_RCC_OscConfig+0x27c>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b080:	f7fe fc8e 	bl	80099a0 <HAL_GetTick>
 800b084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b086:	e008      	b.n	800b09a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b088:	f7fe fc8a 	bl	80099a0 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d901      	bls.n	800b09a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e173      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b09a:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <HAL_RCC_OscConfig+0x274>)
 800b09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0f0      	beq.n	800b088 <HAL_RCC_OscConfig+0x234>
 800b0a6:	e01b      	b.n	800b0e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <HAL_RCC_OscConfig+0x27c>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ae:	f7fe fc77 	bl	80099a0 <HAL_GetTick>
 800b0b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0b4:	e00e      	b.n	800b0d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0b6:	f7fe fc73 	bl	80099a0 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d907      	bls.n	800b0d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e15c      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
 800b0c8:	40023800 	.word	0x40023800
 800b0cc:	42470000 	.word	0x42470000
 800b0d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0d4:	4b8a      	ldr	r3, [pc, #552]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1ea      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 8097 	beq.w	800b21c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0f2:	4b83      	ldr	r3, [pc, #524]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10f      	bne.n	800b11e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]
 800b102:	4b7f      	ldr	r3, [pc, #508]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	4a7e      	ldr	r2, [pc, #504]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b10c:	6413      	str	r3, [r2, #64]	; 0x40
 800b10e:	4b7c      	ldr	r3, [pc, #496]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b116:	60bb      	str	r3, [r7, #8]
 800b118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b11a:	2301      	movs	r3, #1
 800b11c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b11e:	4b79      	ldr	r3, [pc, #484]	; (800b304 <HAL_RCC_OscConfig+0x4b0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b126:	2b00      	cmp	r3, #0
 800b128:	d118      	bne.n	800b15c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b12a:	4b76      	ldr	r3, [pc, #472]	; (800b304 <HAL_RCC_OscConfig+0x4b0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a75      	ldr	r2, [pc, #468]	; (800b304 <HAL_RCC_OscConfig+0x4b0>)
 800b130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b136:	f7fe fc33 	bl	80099a0 <HAL_GetTick>
 800b13a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b13c:	e008      	b.n	800b150 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b13e:	f7fe fc2f 	bl	80099a0 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d901      	bls.n	800b150 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e118      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b150:	4b6c      	ldr	r3, [pc, #432]	; (800b304 <HAL_RCC_OscConfig+0x4b0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0f0      	beq.n	800b13e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d106      	bne.n	800b172 <HAL_RCC_OscConfig+0x31e>
 800b164:	4b66      	ldr	r3, [pc, #408]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b168:	4a65      	ldr	r2, [pc, #404]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b16a:	f043 0301 	orr.w	r3, r3, #1
 800b16e:	6713      	str	r3, [r2, #112]	; 0x70
 800b170:	e01c      	b.n	800b1ac <HAL_RCC_OscConfig+0x358>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	2b05      	cmp	r3, #5
 800b178:	d10c      	bne.n	800b194 <HAL_RCC_OscConfig+0x340>
 800b17a:	4b61      	ldr	r3, [pc, #388]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17e:	4a60      	ldr	r2, [pc, #384]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b180:	f043 0304 	orr.w	r3, r3, #4
 800b184:	6713      	str	r3, [r2, #112]	; 0x70
 800b186:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b18a:	4a5d      	ldr	r2, [pc, #372]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b18c:	f043 0301 	orr.w	r3, r3, #1
 800b190:	6713      	str	r3, [r2, #112]	; 0x70
 800b192:	e00b      	b.n	800b1ac <HAL_RCC_OscConfig+0x358>
 800b194:	4b5a      	ldr	r3, [pc, #360]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b198:	4a59      	ldr	r2, [pc, #356]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b19a:	f023 0301 	bic.w	r3, r3, #1
 800b19e:	6713      	str	r3, [r2, #112]	; 0x70
 800b1a0:	4b57      	ldr	r3, [pc, #348]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a4:	4a56      	ldr	r2, [pc, #344]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b1a6:	f023 0304 	bic.w	r3, r3, #4
 800b1aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d015      	beq.n	800b1e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1b4:	f7fe fbf4 	bl	80099a0 <HAL_GetTick>
 800b1b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1ba:	e00a      	b.n	800b1d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1bc:	f7fe fbf0 	bl	80099a0 <HAL_GetTick>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d901      	bls.n	800b1d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e0d7      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1d2:	4b4b      	ldr	r3, [pc, #300]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d6:	f003 0302 	and.w	r3, r3, #2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0ee      	beq.n	800b1bc <HAL_RCC_OscConfig+0x368>
 800b1de:	e014      	b.n	800b20a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e0:	f7fe fbde 	bl	80099a0 <HAL_GetTick>
 800b1e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1e6:	e00a      	b.n	800b1fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1e8:	f7fe fbda 	bl	80099a0 <HAL_GetTick>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d901      	bls.n	800b1fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e0c1      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1fe:	4b40      	ldr	r3, [pc, #256]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1ee      	bne.n	800b1e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d105      	bne.n	800b21c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b210:	4b3b      	ldr	r3, [pc, #236]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b214:	4a3a      	ldr	r2, [pc, #232]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b21a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80ad 	beq.w	800b380 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b226:	4b36      	ldr	r3, [pc, #216]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f003 030c 	and.w	r3, r3, #12
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d060      	beq.n	800b2f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d145      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b23a:	4b33      	ldr	r3, [pc, #204]	; (800b308 <HAL_RCC_OscConfig+0x4b4>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b240:	f7fe fbae 	bl	80099a0 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b248:	f7fe fbaa 	bl	80099a0 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e093      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b25a:	4b29      	ldr	r3, [pc, #164]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1f0      	bne.n	800b248 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69da      	ldr	r2, [r3, #28]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	019b      	lsls	r3, r3, #6
 800b276:	431a      	orrs	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	3b01      	subs	r3, #1
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	061b      	lsls	r3, r3, #24
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b290:	071b      	lsls	r3, r3, #28
 800b292:	491b      	ldr	r1, [pc, #108]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b294:	4313      	orrs	r3, r2
 800b296:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b298:	4b1b      	ldr	r3, [pc, #108]	; (800b308 <HAL_RCC_OscConfig+0x4b4>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29e:	f7fe fb7f 	bl	80099a0 <HAL_GetTick>
 800b2a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2a4:	e008      	b.n	800b2b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2a6:	f7fe fb7b 	bl	80099a0 <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d901      	bls.n	800b2b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e064      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2b8:	4b11      	ldr	r3, [pc, #68]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0f0      	beq.n	800b2a6 <HAL_RCC_OscConfig+0x452>
 800b2c4:	e05c      	b.n	800b380 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_RCC_OscConfig+0x4b4>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2cc:	f7fe fb68 	bl	80099a0 <HAL_GetTick>
 800b2d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2d4:	f7fe fb64 	bl	80099a0 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e04d      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2e6:	4b06      	ldr	r3, [pc, #24]	; (800b300 <HAL_RCC_OscConfig+0x4ac>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1f0      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x480>
 800b2f2:	e045      	b.n	800b380 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d107      	bne.n	800b30c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e040      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
 800b300:	40023800 	.word	0x40023800
 800b304:	40007000 	.word	0x40007000
 800b308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b30c:	4b1f      	ldr	r3, [pc, #124]	; (800b38c <HAL_RCC_OscConfig+0x538>)
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d030      	beq.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b324:	429a      	cmp	r2, r3
 800b326:	d129      	bne.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b332:	429a      	cmp	r2, r3
 800b334:	d122      	bne.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b33c:	4013      	ands	r3, r2
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b344:	4293      	cmp	r3, r2
 800b346:	d119      	bne.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	085b      	lsrs	r3, r3, #1
 800b354:	3b01      	subs	r3, #1
 800b356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b358:	429a      	cmp	r2, r3
 800b35a:	d10f      	bne.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b368:	429a      	cmp	r2, r3
 800b36a:	d107      	bne.n	800b37c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b376:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b378:	429a      	cmp	r2, r3
 800b37a:	d001      	beq.n	800b380 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e000      	b.n	800b382 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	40023800 	.word	0x40023800

0800b390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e07b      	b.n	800b49a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d108      	bne.n	800b3bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3b2:	d009      	beq.n	800b3c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	61da      	str	r2, [r3, #28]
 800b3ba:	e005      	b.n	800b3c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7fa fec4 	bl	8006170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b41a:	431a      	orrs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b438:	431a      	orrs	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b44c:	ea42 0103 	orr.w	r1, r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	0c1b      	lsrs	r3, r3, #16
 800b466:	f003 0104 	and.w	r1, r3, #4
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	f003 0210 	and.w	r2, r3, #16
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	69da      	ldr	r2, [r3, #28]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b088      	sub	sp, #32
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_SPI_Transmit+0x22>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e126      	b.n	800b712 <HAL_SPI_Transmit+0x270>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4cc:	f7fe fa68 	bl	80099a0 <HAL_GetTick>
 800b4d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b4d2:	88fb      	ldrh	r3, [r7, #6]
 800b4d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4e6:	e10b      	b.n	800b700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <HAL_SPI_Transmit+0x52>
 800b4ee:	88fb      	ldrh	r3, [r7, #6]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4f8:	e102      	b.n	800b700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2203      	movs	r2, #3
 800b4fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	88fa      	ldrh	r2, [r7, #6]
 800b512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	88fa      	ldrh	r2, [r7, #6]
 800b518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b540:	d10f      	bne.n	800b562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56c:	2b40      	cmp	r3, #64	; 0x40
 800b56e:	d007      	beq.n	800b580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b57e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b588:	d14b      	bne.n	800b622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <HAL_SPI_Transmit+0xf6>
 800b592:	8afb      	ldrh	r3, [r7, #22]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d13e      	bne.n	800b616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	881a      	ldrh	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	1c9a      	adds	r2, r3, #2
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b5bc:	e02b      	b.n	800b616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d112      	bne.n	800b5f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d0:	881a      	ldrh	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	1c9a      	adds	r2, r3, #2
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5f0:	e011      	b.n	800b616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5f2:	f7fe f9d5 	bl	80099a0 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d803      	bhi.n	800b60a <HAL_SPI_Transmit+0x168>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b608:	d102      	bne.n	800b610 <HAL_SPI_Transmit+0x16e>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b614:	e074      	b.n	800b700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1ce      	bne.n	800b5be <HAL_SPI_Transmit+0x11c>
 800b620:	e04c      	b.n	800b6bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d002      	beq.n	800b630 <HAL_SPI_Transmit+0x18e>
 800b62a:	8afb      	ldrh	r3, [r7, #22]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d140      	bne.n	800b6b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	7812      	ldrb	r2, [r2, #0]
 800b63c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b656:	e02c      	b.n	800b6b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b02      	cmp	r3, #2
 800b664:	d113      	bne.n	800b68e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	330c      	adds	r3, #12
 800b670:	7812      	ldrb	r2, [r2, #0]
 800b672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b682:	b29b      	uxth	r3, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b68c:	e011      	b.n	800b6b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b68e:	f7fe f987 	bl	80099a0 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d803      	bhi.n	800b6a6 <HAL_SPI_Transmit+0x204>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d102      	bne.n	800b6ac <HAL_SPI_Transmit+0x20a>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6b0:	e026      	b.n	800b700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1cd      	bne.n	800b658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fbcb 	bl	800be5c <SPI_EndRxTxTransaction>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6da:	2300      	movs	r3, #0
 800b6dc:	613b      	str	r3, [r7, #16]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	613b      	str	r3, [r7, #16]
 800b6ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e000      	b.n	800b700 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b6fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b710:	7ffb      	ldrb	r3, [r7, #31]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b088      	sub	sp, #32
 800b71e:	af02      	add	r7, sp, #8
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	603b      	str	r3, [r7, #0]
 800b726:	4613      	mov	r3, r2
 800b728:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b736:	d112      	bne.n	800b75e <HAL_SPI_Receive+0x44>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10e      	bne.n	800b75e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2204      	movs	r2, #4
 800b744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b748:	88fa      	ldrh	r2, [r7, #6]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	4613      	mov	r3, r2
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f8f1 	bl	800b93c <HAL_SPI_TransmitReceive>
 800b75a:	4603      	mov	r3, r0
 800b75c:	e0ea      	b.n	800b934 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_SPI_Receive+0x52>
 800b768:	2302      	movs	r3, #2
 800b76a:	e0e3      	b.n	800b934 <HAL_SPI_Receive+0x21a>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b774:	f7fe f914 	bl	80099a0 <HAL_GetTick>
 800b778:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b01      	cmp	r3, #1
 800b784:	d002      	beq.n	800b78c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b786:	2302      	movs	r3, #2
 800b788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b78a:	e0ca      	b.n	800b922 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_SPI_Receive+0x7e>
 800b792:	88fb      	ldrh	r3, [r7, #6]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b79c:	e0c1      	b.n	800b922 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2204      	movs	r2, #4
 800b7a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	88fa      	ldrh	r2, [r7, #6]
 800b7b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	88fa      	ldrh	r2, [r7, #6]
 800b7bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e4:	d10f      	bne.n	800b806 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b804:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b810:	2b40      	cmp	r3, #64	; 0x40
 800b812:	d007      	beq.n	800b824 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b822:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d162      	bne.n	800b8f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b82c:	e02e      	b.n	800b88c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d115      	bne.n	800b868 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f103 020c 	add.w	r2, r3, #12
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	7812      	ldrb	r2, [r2, #0]
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	3b01      	subs	r3, #1
 800b860:	b29a      	uxth	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b866:	e011      	b.n	800b88c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b868:	f7fe f89a 	bl	80099a0 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d803      	bhi.n	800b880 <HAL_SPI_Receive+0x166>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87e:	d102      	bne.n	800b886 <HAL_SPI_Receive+0x16c>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d102      	bne.n	800b88c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b88a:	e04a      	b.n	800b922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1cb      	bne.n	800b82e <HAL_SPI_Receive+0x114>
 800b896:	e031      	b.n	800b8fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d113      	bne.n	800b8ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b0:	b292      	uxth	r2, r2
 800b8b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	1c9a      	adds	r2, r3, #2
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8cc:	e011      	b.n	800b8f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8ce:	f7fe f867 	bl	80099a0 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d803      	bhi.n	800b8e6 <HAL_SPI_Receive+0x1cc>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e4:	d102      	bne.n	800b8ec <HAL_SPI_Receive+0x1d2>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b8f0:	e017      	b.n	800b922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1cd      	bne.n	800b898 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fa45 	bl	800bd90 <SPI_EndRxTransaction>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2220      	movs	r2, #32
 800b910:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	75fb      	strb	r3, [r7, #23]
 800b91e:	e000      	b.n	800b922 <HAL_SPI_Receive+0x208>
  }

error :
 800b920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08c      	sub	sp, #48	; 0x30
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b94a:	2301      	movs	r3, #1
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d101      	bne.n	800b962 <HAL_SPI_TransmitReceive+0x26>
 800b95e:	2302      	movs	r3, #2
 800b960:	e18a      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x33c>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b96a:	f7fe f819 	bl	80099a0 <HAL_GetTick>
 800b96e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b980:	887b      	ldrh	r3, [r7, #2]
 800b982:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d00f      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x70>
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b992:	d107      	bne.n	800b9a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <HAL_SPI_TransmitReceive+0x68>
 800b99c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	d003      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9aa:	e15b      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d005      	beq.n	800b9be <HAL_SPI_TransmitReceive+0x82>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <HAL_SPI_TransmitReceive+0x82>
 800b9b8:	887b      	ldrh	r3, [r7, #2]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d103      	bne.n	800b9c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9c4:	e14e      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d003      	beq.n	800b9da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	887a      	ldrh	r2, [r7, #2]
 800b9ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	887a      	ldrh	r2, [r7, #2]
 800b9f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	887a      	ldrh	r2, [r7, #2]
 800b9fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	887a      	ldrh	r2, [r7, #2]
 800ba02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba1a:	2b40      	cmp	r3, #64	; 0x40
 800ba1c:	d007      	beq.n	800ba2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba36:	d178      	bne.n	800bb2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <HAL_SPI_TransmitReceive+0x10a>
 800ba40:	8b7b      	ldrh	r3, [r7, #26]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d166      	bne.n	800bb14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4a:	881a      	ldrh	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba56:	1c9a      	adds	r2, r3, #2
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba6a:	e053      	b.n	800bb14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d11b      	bne.n	800bab2 <HAL_SPI_TransmitReceive+0x176>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d016      	beq.n	800bab2 <HAL_SPI_TransmitReceive+0x176>
 800ba84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d113      	bne.n	800bab2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8e:	881a      	ldrh	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9a:	1c9a      	adds	r2, r3, #2
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b01      	cmp	r3, #1
 800babe:	d119      	bne.n	800baf4 <HAL_SPI_TransmitReceive+0x1b8>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d014      	beq.n	800baf4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad4:	b292      	uxth	r2, r2
 800bad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	1c9a      	adds	r2, r3, #2
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	3b01      	subs	r3, #1
 800baea:	b29a      	uxth	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800baf0:	2301      	movs	r3, #1
 800baf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800baf4:	f7fd ff54 	bl	80099a0 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d807      	bhi.n	800bb14 <HAL_SPI_TransmitReceive+0x1d8>
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d003      	beq.n	800bb14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb12:	e0a7      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1a6      	bne.n	800ba6c <HAL_SPI_TransmitReceive+0x130>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1a1      	bne.n	800ba6c <HAL_SPI_TransmitReceive+0x130>
 800bb28:	e07c      	b.n	800bc24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_SPI_TransmitReceive+0x1fc>
 800bb32:	8b7b      	ldrh	r3, [r7, #26]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d16b      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	330c      	adds	r3, #12
 800bb42:	7812      	ldrb	r2, [r2, #0]
 800bb44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb5e:	e057      	b.n	800bc10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d11c      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x26c>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d017      	beq.n	800bba8 <HAL_SPI_TransmitReceive+0x26c>
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d114      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	7812      	ldrb	r2, [r2, #0]
 800bb8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d119      	bne.n	800bbea <HAL_SPI_TransmitReceive+0x2ae>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d014      	beq.n	800bbea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbea:	f7fd fed9 	bl	80099a0 <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d803      	bhi.n	800bc02 <HAL_SPI_TransmitReceive+0x2c6>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d102      	bne.n	800bc08 <HAL_SPI_TransmitReceive+0x2cc>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bc0e:	e029      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1a2      	bne.n	800bb60 <HAL_SPI_TransmitReceive+0x224>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d19d      	bne.n	800bb60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f917 	bl	800be5c <SPI_EndRxTxTransaction>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d006      	beq.n	800bc42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc40:	e010      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10b      	bne.n	800bc62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	617b      	str	r3, [r7, #20]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	617b      	str	r3, [r7, #20]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	e000      	b.n	800bc64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bc62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3730      	adds	r7, #48	; 0x30
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	603b      	str	r3, [r7, #0]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc90:	f7fd fe86 	bl	80099a0 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bca0:	f7fd fe7e 	bl	80099a0 <HAL_GetTick>
 800bca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bca6:	4b39      	ldr	r3, [pc, #228]	; (800bd8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	015b      	lsls	r3, r3, #5
 800bcac:	0d1b      	lsrs	r3, r3, #20
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcb6:	e054      	b.n	800bd62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcbe:	d050      	beq.n	800bd62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcc0:	f7fd fe6e 	bl	80099a0 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	69fa      	ldr	r2, [r7, #28]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d902      	bls.n	800bcd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d13d      	bne.n	800bd52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcee:	d111      	bne.n	800bd14 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf8:	d004      	beq.n	800bd04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd02:	d107      	bne.n	800bd14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd1c:	d10f      	bne.n	800bd3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e017      	b.n	800bd82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	bf0c      	ite	eq
 800bd72:	2301      	moveq	r3, #1
 800bd74:	2300      	movne	r3, #0
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	461a      	mov	r2, r3
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d19b      	bne.n	800bcb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3720      	adds	r7, #32
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200001b4 	.word	0x200001b4

0800bd90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bda4:	d111      	bne.n	800bdca <SPI_EndRxTransaction+0x3a>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdae:	d004      	beq.n	800bdba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb8:	d107      	bne.n	800bdca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdd2:	d12a      	bne.n	800be2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bddc:	d012      	beq.n	800be04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2200      	movs	r2, #0
 800bde6:	2180      	movs	r1, #128	; 0x80
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f7ff ff49 	bl	800bc80 <SPI_WaitFlagStateUntilTimeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d02d      	beq.n	800be50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf8:	f043 0220 	orr.w	r2, r3, #32
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e026      	b.n	800be52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2200      	movs	r2, #0
 800be0c:	2101      	movs	r1, #1
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7ff ff36 	bl	800bc80 <SPI_WaitFlagStateUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d01a      	beq.n	800be50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1e:	f043 0220 	orr.w	r2, r3, #32
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e013      	b.n	800be52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2200      	movs	r2, #0
 800be32:	2101      	movs	r1, #1
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff ff23 	bl	800bc80 <SPI_WaitFlagStateUntilTimeout>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be44:	f043 0220 	orr.w	r2, r3, #32
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e000      	b.n	800be52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be68:	4b1b      	ldr	r3, [pc, #108]	; (800bed8 <SPI_EndRxTxTransaction+0x7c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a1b      	ldr	r2, [pc, #108]	; (800bedc <SPI_EndRxTxTransaction+0x80>)
 800be6e:	fba2 2303 	umull	r2, r3, r2, r3
 800be72:	0d5b      	lsrs	r3, r3, #21
 800be74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be78:	fb02 f303 	mul.w	r3, r2, r3
 800be7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be86:	d112      	bne.n	800beae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2200      	movs	r2, #0
 800be90:	2180      	movs	r1, #128	; 0x80
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff fef4 	bl	800bc80 <SPI_WaitFlagStateUntilTimeout>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d016      	beq.n	800becc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea2:	f043 0220 	orr.w	r2, r3, #32
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e00f      	b.n	800bece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec4:	2b80      	cmp	r3, #128	; 0x80
 800bec6:	d0f2      	beq.n	800beae <SPI_EndRxTxTransaction+0x52>
 800bec8:	e000      	b.n	800becc <SPI_EndRxTxTransaction+0x70>
        break;
 800beca:	bf00      	nop
  }

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	200001b4 	.word	0x200001b4
 800bedc:	165e9f81 	.word	0x165e9f81

0800bee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e041      	b.n	800bf76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d106      	bne.n	800bf0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7fa f9e8 	bl	80062dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f000 fd52 	bl	800c9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d001      	beq.n	800bf98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e046      	b.n	800c026 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a23      	ldr	r2, [pc, #140]	; (800c034 <HAL_TIM_Base_Start+0xb4>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d022      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb2:	d01d      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a1f      	ldr	r2, [pc, #124]	; (800c038 <HAL_TIM_Base_Start+0xb8>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d018      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a1e      	ldr	r2, [pc, #120]	; (800c03c <HAL_TIM_Base_Start+0xbc>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d013      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a1c      	ldr	r2, [pc, #112]	; (800c040 <HAL_TIM_Base_Start+0xc0>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d00e      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a1b      	ldr	r2, [pc, #108]	; (800c044 <HAL_TIM_Base_Start+0xc4>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d009      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a19      	ldr	r2, [pc, #100]	; (800c048 <HAL_TIM_Base_Start+0xc8>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d004      	beq.n	800bff0 <HAL_TIM_Base_Start+0x70>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a18      	ldr	r2, [pc, #96]	; (800c04c <HAL_TIM_Base_Start+0xcc>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d111      	bne.n	800c014 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b06      	cmp	r3, #6
 800c000:	d010      	beq.n	800c024 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f042 0201 	orr.w	r2, r2, #1
 800c010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c012:	e007      	b.n	800c024 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f042 0201 	orr.w	r2, r2, #1
 800c022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	40010000 	.word	0x40010000
 800c038:	40000400 	.word	0x40000400
 800c03c:	40000800 	.word	0x40000800
 800c040:	40000c00 	.word	0x40000c00
 800c044:	40010400 	.word	0x40010400
 800c048:	40014000 	.word	0x40014000
 800c04c:	40001800 	.word	0x40001800

0800c050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b01      	cmp	r3, #1
 800c062:	d001      	beq.n	800c068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e04e      	b.n	800c106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f042 0201 	orr.w	r2, r2, #1
 800c07e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a23      	ldr	r2, [pc, #140]	; (800c114 <HAL_TIM_Base_Start_IT+0xc4>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d022      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c092:	d01d      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1f      	ldr	r2, [pc, #124]	; (800c118 <HAL_TIM_Base_Start_IT+0xc8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d018      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <HAL_TIM_Base_Start_IT+0xcc>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d013      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a1c      	ldr	r2, [pc, #112]	; (800c120 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00e      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a1b      	ldr	r2, [pc, #108]	; (800c124 <HAL_TIM_Base_Start_IT+0xd4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d009      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a19      	ldr	r2, [pc, #100]	; (800c128 <HAL_TIM_Base_Start_IT+0xd8>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x80>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a18      	ldr	r2, [pc, #96]	; (800c12c <HAL_TIM_Base_Start_IT+0xdc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d111      	bne.n	800c0f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b06      	cmp	r3, #6
 800c0e0:	d010      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f042 0201 	orr.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f2:	e007      	b.n	800c104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40010000 	.word	0x40010000
 800c118:	40000400 	.word	0x40000400
 800c11c:	40000800 	.word	0x40000800
 800c120:	40000c00 	.word	0x40000c00
 800c124:	40010400 	.word	0x40010400
 800c128:	40014000 	.word	0x40014000
 800c12c:	40001800 	.word	0x40001800

0800c130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e041      	b.n	800c1c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d106      	bne.n	800c15c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f839 	bl	800c1ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	4610      	mov	r0, r2
 800c170:	f000 fc2a 	bl	800c9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <HAL_TIM_PWM_Start+0x24>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	bf14      	ite	ne
 800c200:	2301      	movne	r3, #1
 800c202:	2300      	moveq	r3, #0
 800c204:	b2db      	uxtb	r3, r3
 800c206:	e022      	b.n	800c24e <HAL_TIM_PWM_Start+0x6a>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b04      	cmp	r3, #4
 800c20c:	d109      	bne.n	800c222 <HAL_TIM_PWM_Start+0x3e>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b01      	cmp	r3, #1
 800c218:	bf14      	ite	ne
 800c21a:	2301      	movne	r3, #1
 800c21c:	2300      	moveq	r3, #0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	e015      	b.n	800c24e <HAL_TIM_PWM_Start+0x6a>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b08      	cmp	r3, #8
 800c226:	d109      	bne.n	800c23c <HAL_TIM_PWM_Start+0x58>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b01      	cmp	r3, #1
 800c232:	bf14      	ite	ne
 800c234:	2301      	movne	r3, #1
 800c236:	2300      	moveq	r3, #0
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	e008      	b.n	800c24e <HAL_TIM_PWM_Start+0x6a>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b01      	cmp	r3, #1
 800c246:	bf14      	ite	ne
 800c248:	2301      	movne	r3, #1
 800c24a:	2300      	moveq	r3, #0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e07c      	b.n	800c350 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d104      	bne.n	800c266 <HAL_TIM_PWM_Start+0x82>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2202      	movs	r2, #2
 800c260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c264:	e013      	b.n	800c28e <HAL_TIM_PWM_Start+0xaa>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d104      	bne.n	800c276 <HAL_TIM_PWM_Start+0x92>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c274:	e00b      	b.n	800c28e <HAL_TIM_PWM_Start+0xaa>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d104      	bne.n	800c286 <HAL_TIM_PWM_Start+0xa2>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2202      	movs	r2, #2
 800c280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c284:	e003      	b.n	800c28e <HAL_TIM_PWM_Start+0xaa>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2202      	movs	r2, #2
 800c28a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2201      	movs	r2, #1
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	f000 fe80 	bl	800cf9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a2d      	ldr	r2, [pc, #180]	; (800c358 <HAL_TIM_PWM_Start+0x174>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <HAL_TIM_PWM_Start+0xcc>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a2c      	ldr	r2, [pc, #176]	; (800c35c <HAL_TIM_PWM_Start+0x178>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d101      	bne.n	800c2b4 <HAL_TIM_PWM_Start+0xd0>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e000      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xd2>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d007      	beq.n	800c2ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a22      	ldr	r2, [pc, #136]	; (800c358 <HAL_TIM_PWM_Start+0x174>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d022      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2dc:	d01d      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <HAL_TIM_PWM_Start+0x17c>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d018      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a1d      	ldr	r2, [pc, #116]	; (800c364 <HAL_TIM_PWM_Start+0x180>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d013      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a1c      	ldr	r2, [pc, #112]	; (800c368 <HAL_TIM_PWM_Start+0x184>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d00e      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a16      	ldr	r2, [pc, #88]	; (800c35c <HAL_TIM_PWM_Start+0x178>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d009      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a18      	ldr	r2, [pc, #96]	; (800c36c <HAL_TIM_PWM_Start+0x188>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d004      	beq.n	800c31a <HAL_TIM_PWM_Start+0x136>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a16      	ldr	r2, [pc, #88]	; (800c370 <HAL_TIM_PWM_Start+0x18c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d111      	bne.n	800c33e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f003 0307 	and.w	r3, r3, #7
 800c324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b06      	cmp	r3, #6
 800c32a:	d010      	beq.n	800c34e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f042 0201 	orr.w	r2, r2, #1
 800c33a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c33c:	e007      	b.n	800c34e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0201 	orr.w	r2, r2, #1
 800c34c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	40010000 	.word	0x40010000
 800c35c:	40010400 	.word	0x40010400
 800c360:	40000400 	.word	0x40000400
 800c364:	40000800 	.word	0x40000800
 800c368:	40000c00 	.word	0x40000c00
 800c36c:	40014000 	.word	0x40014000
 800c370:	40001800 	.word	0x40001800

0800c374 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2200      	movs	r2, #0
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fe08 	bl	800cf9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a2e      	ldr	r2, [pc, #184]	; (800c44c <HAL_TIM_PWM_Stop+0xd8>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d004      	beq.n	800c3a0 <HAL_TIM_PWM_Stop+0x2c>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a2d      	ldr	r2, [pc, #180]	; (800c450 <HAL_TIM_PWM_Stop+0xdc>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d101      	bne.n	800c3a4 <HAL_TIM_PWM_Stop+0x30>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <HAL_TIM_PWM_Stop+0x32>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d017      	beq.n	800c3da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6a1a      	ldr	r2, [r3, #32]
 800c3b0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10f      	bne.n	800c3da <HAL_TIM_PWM_Stop+0x66>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6a1a      	ldr	r2, [r3, #32]
 800c3c0:	f240 4344 	movw	r3, #1092	; 0x444
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d107      	bne.n	800c3da <HAL_TIM_PWM_Stop+0x66>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c3d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6a1a      	ldr	r2, [r3, #32]
 800c3e0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10f      	bne.n	800c40a <HAL_TIM_PWM_Stop+0x96>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6a1a      	ldr	r2, [r3, #32]
 800c3f0:	f240 4344 	movw	r3, #1092	; 0x444
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d107      	bne.n	800c40a <HAL_TIM_PWM_Stop+0x96>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0201 	bic.w	r2, r2, #1
 800c408:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <HAL_TIM_PWM_Stop+0xa6>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c418:	e013      	b.n	800c442 <HAL_TIM_PWM_Stop+0xce>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	d104      	bne.n	800c42a <HAL_TIM_PWM_Stop+0xb6>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c428:	e00b      	b.n	800c442 <HAL_TIM_PWM_Stop+0xce>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d104      	bne.n	800c43a <HAL_TIM_PWM_Stop+0xc6>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c438:	e003      	b.n	800c442 <HAL_TIM_PWM_Stop+0xce>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	40010000 	.word	0x40010000
 800c450:	40010400 	.word	0x40010400

0800c454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	2b02      	cmp	r3, #2
 800c468:	d122      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b02      	cmp	r3, #2
 800c476:	d11b      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f06f 0202 	mvn.w	r2, #2
 800c480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	f003 0303 	and.w	r3, r3, #3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa77 	bl	800c98a <HAL_TIM_IC_CaptureCallback>
 800c49c:	e005      	b.n	800c4aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa69 	bl	800c976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fa7a 	bl	800c99e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0304 	and.w	r3, r3, #4
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d122      	bne.n	800c504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d11b      	bne.n	800c504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f06f 0204 	mvn.w	r2, #4
 800c4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2202      	movs	r2, #2
 800c4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699b      	ldr	r3, [r3, #24]
 800c4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa4d 	bl	800c98a <HAL_TIM_IC_CaptureCallback>
 800c4f0:	e005      	b.n	800c4fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fa3f 	bl	800c976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fa50 	bl	800c99e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b08      	cmp	r3, #8
 800c510:	d122      	bne.n	800c558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f003 0308 	and.w	r3, r3, #8
 800c51c:	2b08      	cmp	r3, #8
 800c51e:	d11b      	bne.n	800c558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f06f 0208 	mvn.w	r2, #8
 800c528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2204      	movs	r2, #4
 800c52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	69db      	ldr	r3, [r3, #28]
 800c536:	f003 0303 	and.w	r3, r3, #3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d003      	beq.n	800c546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa23 	bl	800c98a <HAL_TIM_IC_CaptureCallback>
 800c544:	e005      	b.n	800c552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa15 	bl	800c976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fa26 	bl	800c99e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	f003 0310 	and.w	r3, r3, #16
 800c562:	2b10      	cmp	r3, #16
 800c564:	d122      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	2b10      	cmp	r3, #16
 800c572:	d11b      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f06f 0210 	mvn.w	r2, #16
 800c57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2208      	movs	r2, #8
 800c582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f9f9 	bl	800c98a <HAL_TIM_IC_CaptureCallback>
 800c598:	e005      	b.n	800c5a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f9eb 	bl	800c976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f9fc 	bl	800c99e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d10e      	bne.n	800c5d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d107      	bne.n	800c5d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f06f 0201 	mvn.w	r2, #1
 800c5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7f6 f908 	bl	80027e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e2:	2b80      	cmp	r3, #128	; 0x80
 800c5e4:	d10e      	bne.n	800c604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f0:	2b80      	cmp	r3, #128	; 0x80
 800c5f2:	d107      	bne.n	800c604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fd78 	bl	800d0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c60e:	2b40      	cmp	r3, #64	; 0x40
 800c610:	d10e      	bne.n	800c630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61c:	2b40      	cmp	r3, #64	; 0x40
 800c61e:	d107      	bne.n	800c630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f9c1 	bl	800c9b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	f003 0320 	and.w	r3, r3, #32
 800c63a:	2b20      	cmp	r3, #32
 800c63c:	d10e      	bne.n	800c65c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b20      	cmp	r3, #32
 800c64a:	d107      	bne.n	800c65c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f06f 0220 	mvn.w	r2, #32
 800c654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fd42 	bl	800d0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d101      	bne.n	800c682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c67e:	2302      	movs	r3, #2
 800c680:	e0ae      	b.n	800c7e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b0c      	cmp	r3, #12
 800c68e:	f200 809f 	bhi.w	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6cd 	.word	0x0800c6cd
 800c69c:	0800c7d1 	.word	0x0800c7d1
 800c6a0:	0800c7d1 	.word	0x0800c7d1
 800c6a4:	0800c7d1 	.word	0x0800c7d1
 800c6a8:	0800c70d 	.word	0x0800c70d
 800c6ac:	0800c7d1 	.word	0x0800c7d1
 800c6b0:	0800c7d1 	.word	0x0800c7d1
 800c6b4:	0800c7d1 	.word	0x0800c7d1
 800c6b8:	0800c74f 	.word	0x0800c74f
 800c6bc:	0800c7d1 	.word	0x0800c7d1
 800c6c0:	0800c7d1 	.word	0x0800c7d1
 800c6c4:	0800c7d1 	.word	0x0800c7d1
 800c6c8:	0800c78f 	.word	0x0800c78f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fa18 	bl	800cb08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f042 0208 	orr.w	r2, r2, #8
 800c6e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699a      	ldr	r2, [r3, #24]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f022 0204 	bic.w	r2, r2, #4
 800c6f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6999      	ldr	r1, [r3, #24]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	691a      	ldr	r2, [r3, #16]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	619a      	str	r2, [r3, #24]
      break;
 800c70a:	e064      	b.n	800c7d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68b9      	ldr	r1, [r7, #8]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fa68 	bl	800cbe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	699a      	ldr	r2, [r3, #24]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	699a      	ldr	r2, [r3, #24]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6999      	ldr	r1, [r3, #24]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	021a      	lsls	r2, r3, #8
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	430a      	orrs	r2, r1
 800c74a:	619a      	str	r2, [r3, #24]
      break;
 800c74c:	e043      	b.n	800c7d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68b9      	ldr	r1, [r7, #8]
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fabd 	bl	800ccd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	69da      	ldr	r2, [r3, #28]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f042 0208 	orr.w	r2, r2, #8
 800c768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69da      	ldr	r2, [r3, #28]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0204 	bic.w	r2, r2, #4
 800c778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	69d9      	ldr	r1, [r3, #28]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	61da      	str	r2, [r3, #28]
      break;
 800c78c:	e023      	b.n	800c7d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fb11 	bl	800cdbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	69da      	ldr	r2, [r3, #28]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69da      	ldr	r2, [r3, #28]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69d9      	ldr	r1, [r3, #28]
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	021a      	lsls	r2, r3, #8
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	61da      	str	r2, [r3, #28]
      break;
 800c7ce:	e002      	b.n	800c7d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d101      	bne.n	800c804 <HAL_TIM_ConfigClockSource+0x1c>
 800c800:	2302      	movs	r3, #2
 800c802:	e0b4      	b.n	800c96e <HAL_TIM_ConfigClockSource+0x186>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c82a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c83c:	d03e      	beq.n	800c8bc <HAL_TIM_ConfigClockSource+0xd4>
 800c83e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c842:	f200 8087 	bhi.w	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c84a:	f000 8086 	beq.w	800c95a <HAL_TIM_ConfigClockSource+0x172>
 800c84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c852:	d87f      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c854:	2b70      	cmp	r3, #112	; 0x70
 800c856:	d01a      	beq.n	800c88e <HAL_TIM_ConfigClockSource+0xa6>
 800c858:	2b70      	cmp	r3, #112	; 0x70
 800c85a:	d87b      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c85c:	2b60      	cmp	r3, #96	; 0x60
 800c85e:	d050      	beq.n	800c902 <HAL_TIM_ConfigClockSource+0x11a>
 800c860:	2b60      	cmp	r3, #96	; 0x60
 800c862:	d877      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c864:	2b50      	cmp	r3, #80	; 0x50
 800c866:	d03c      	beq.n	800c8e2 <HAL_TIM_ConfigClockSource+0xfa>
 800c868:	2b50      	cmp	r3, #80	; 0x50
 800c86a:	d873      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c86c:	2b40      	cmp	r3, #64	; 0x40
 800c86e:	d058      	beq.n	800c922 <HAL_TIM_ConfigClockSource+0x13a>
 800c870:	2b40      	cmp	r3, #64	; 0x40
 800c872:	d86f      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c874:	2b30      	cmp	r3, #48	; 0x30
 800c876:	d064      	beq.n	800c942 <HAL_TIM_ConfigClockSource+0x15a>
 800c878:	2b30      	cmp	r3, #48	; 0x30
 800c87a:	d86b      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d060      	beq.n	800c942 <HAL_TIM_ConfigClockSource+0x15a>
 800c880:	2b20      	cmp	r3, #32
 800c882:	d867      	bhi.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d05c      	beq.n	800c942 <HAL_TIM_ConfigClockSource+0x15a>
 800c888:	2b10      	cmp	r3, #16
 800c88a:	d05a      	beq.n	800c942 <HAL_TIM_ConfigClockSource+0x15a>
 800c88c:	e062      	b.n	800c954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	6899      	ldr	r1, [r3, #8]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	f000 fb5d 	bl	800cf5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	609a      	str	r2, [r3, #8]
      break;
 800c8ba:	e04f      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	6899      	ldr	r1, [r3, #8]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	f000 fb46 	bl	800cf5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	689a      	ldr	r2, [r3, #8]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8de:	609a      	str	r2, [r3, #8]
      break;
 800c8e0:	e03c      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6818      	ldr	r0, [r3, #0]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	6859      	ldr	r1, [r3, #4]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f000 faba 	bl	800ce68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2150      	movs	r1, #80	; 0x50
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 fb13 	bl	800cf26 <TIM_ITRx_SetConfig>
      break;
 800c900:	e02c      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	6859      	ldr	r1, [r3, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	461a      	mov	r2, r3
 800c910:	f000 fad9 	bl	800cec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2160      	movs	r1, #96	; 0x60
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 fb03 	bl	800cf26 <TIM_ITRx_SetConfig>
      break;
 800c920:	e01c      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6818      	ldr	r0, [r3, #0]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	6859      	ldr	r1, [r3, #4]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	461a      	mov	r2, r3
 800c930:	f000 fa9a 	bl	800ce68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2140      	movs	r1, #64	; 0x40
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 faf3 	bl	800cf26 <TIM_ITRx_SetConfig>
      break;
 800c940:	e00c      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f000 faea 	bl	800cf26 <TIM_ITRx_SetConfig>
      break;
 800c952:	e003      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	73fb      	strb	r3, [r7, #15]
      break;
 800c958:	e000      	b.n	800c95c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c95a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c97e:	bf00      	nop
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c992:	bf00      	nop
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a40      	ldr	r2, [pc, #256]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d013      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e6:	d00f      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a3d      	ldr	r2, [pc, #244]	; (800cae0 <TIM_Base_SetConfig+0x118>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d00b      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a3c      	ldr	r2, [pc, #240]	; (800cae4 <TIM_Base_SetConfig+0x11c>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d007      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a3b      	ldr	r2, [pc, #236]	; (800cae8 <TIM_Base_SetConfig+0x120>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d003      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a3a      	ldr	r2, [pc, #232]	; (800caec <TIM_Base_SetConfig+0x124>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d108      	bne.n	800ca1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a2f      	ldr	r2, [pc, #188]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d02b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca28:	d027      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a2c      	ldr	r2, [pc, #176]	; (800cae0 <TIM_Base_SetConfig+0x118>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d023      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a2b      	ldr	r2, [pc, #172]	; (800cae4 <TIM_Base_SetConfig+0x11c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d01f      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a2a      	ldr	r2, [pc, #168]	; (800cae8 <TIM_Base_SetConfig+0x120>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d01b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a29      	ldr	r2, [pc, #164]	; (800caec <TIM_Base_SetConfig+0x124>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d017      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a28      	ldr	r2, [pc, #160]	; (800caf0 <TIM_Base_SetConfig+0x128>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d013      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a27      	ldr	r2, [pc, #156]	; (800caf4 <TIM_Base_SetConfig+0x12c>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00f      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a26      	ldr	r2, [pc, #152]	; (800caf8 <TIM_Base_SetConfig+0x130>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a25      	ldr	r2, [pc, #148]	; (800cafc <TIM_Base_SetConfig+0x134>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d007      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a24      	ldr	r2, [pc, #144]	; (800cb00 <TIM_Base_SetConfig+0x138>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a23      	ldr	r2, [pc, #140]	; (800cb04 <TIM_Base_SetConfig+0x13c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d108      	bne.n	800ca8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	689a      	ldr	r2, [r3, #8]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d003      	beq.n	800cac0 <TIM_Base_SetConfig+0xf8>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a0c      	ldr	r2, [pc, #48]	; (800caec <TIM_Base_SetConfig+0x124>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d103      	bne.n	800cac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	691a      	ldr	r2, [r3, #16]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	615a      	str	r2, [r3, #20]
}
 800cace:	bf00      	nop
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	40010000 	.word	0x40010000
 800cae0:	40000400 	.word	0x40000400
 800cae4:	40000800 	.word	0x40000800
 800cae8:	40000c00 	.word	0x40000c00
 800caec:	40010400 	.word	0x40010400
 800caf0:	40014000 	.word	0x40014000
 800caf4:	40014400 	.word	0x40014400
 800caf8:	40014800 	.word	0x40014800
 800cafc:	40001800 	.word	0x40001800
 800cb00:	40001c00 	.word	0x40001c00
 800cb04:	40002000 	.word	0x40002000

0800cb08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	f023 0201 	bic.w	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f023 0302 	bic.w	r3, r3, #2
 800cb50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a20      	ldr	r2, [pc, #128]	; (800cbe0 <TIM_OC1_SetConfig+0xd8>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d003      	beq.n	800cb6c <TIM_OC1_SetConfig+0x64>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a1f      	ldr	r2, [pc, #124]	; (800cbe4 <TIM_OC1_SetConfig+0xdc>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d10c      	bne.n	800cb86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f023 0308 	bic.w	r3, r3, #8
 800cb72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f023 0304 	bic.w	r3, r3, #4
 800cb84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a15      	ldr	r2, [pc, #84]	; (800cbe0 <TIM_OC1_SetConfig+0xd8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d003      	beq.n	800cb96 <TIM_OC1_SetConfig+0x8e>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a14      	ldr	r2, [pc, #80]	; (800cbe4 <TIM_OC1_SetConfig+0xdc>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d111      	bne.n	800cbba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	621a      	str	r2, [r3, #32]
}
 800cbd4:	bf00      	nop
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	40010000 	.word	0x40010000
 800cbe4:	40010400 	.word	0x40010400

0800cbe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b087      	sub	sp, #28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	f023 0210 	bic.w	r2, r3, #16
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f023 0320 	bic.w	r3, r3, #32
 800cc32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	011b      	lsls	r3, r3, #4
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a22      	ldr	r2, [pc, #136]	; (800cccc <TIM_OC2_SetConfig+0xe4>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d003      	beq.n	800cc50 <TIM_OC2_SetConfig+0x68>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a21      	ldr	r2, [pc, #132]	; (800ccd0 <TIM_OC2_SetConfig+0xe8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d10d      	bne.n	800cc6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a17      	ldr	r2, [pc, #92]	; (800cccc <TIM_OC2_SetConfig+0xe4>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d003      	beq.n	800cc7c <TIM_OC2_SetConfig+0x94>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a16      	ldr	r2, [pc, #88]	; (800ccd0 <TIM_OC2_SetConfig+0xe8>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d113      	bne.n	800cca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	621a      	str	r2, [r3, #32]
}
 800ccbe:	bf00      	nop
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	40010000 	.word	0x40010000
 800ccd0:	40010400 	.word	0x40010400

0800ccd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a21      	ldr	r2, [pc, #132]	; (800cdb4 <TIM_OC3_SetConfig+0xe0>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_OC3_SetConfig+0x66>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a20      	ldr	r2, [pc, #128]	; (800cdb8 <TIM_OC3_SetConfig+0xe4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d10d      	bne.n	800cd56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	021b      	lsls	r3, r3, #8
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a16      	ldr	r2, [pc, #88]	; (800cdb4 <TIM_OC3_SetConfig+0xe0>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d003      	beq.n	800cd66 <TIM_OC3_SetConfig+0x92>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a15      	ldr	r2, [pc, #84]	; (800cdb8 <TIM_OC3_SetConfig+0xe4>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d113      	bne.n	800cd8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	011b      	lsls	r3, r3, #4
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	011b      	lsls	r3, r3, #4
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	685a      	ldr	r2, [r3, #4]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	621a      	str	r2, [r3, #32]
}
 800cda8:	bf00      	nop
 800cdaa:	371c      	adds	r7, #28
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40010400 	.word	0x40010400

0800cdbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	031b      	lsls	r3, r3, #12
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a12      	ldr	r2, [pc, #72]	; (800ce60 <TIM_OC4_SetConfig+0xa4>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d003      	beq.n	800ce24 <TIM_OC4_SetConfig+0x68>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a11      	ldr	r2, [pc, #68]	; (800ce64 <TIM_OC4_SetConfig+0xa8>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d109      	bne.n	800ce38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	019b      	lsls	r3, r3, #6
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	621a      	str	r2, [r3, #32]
}
 800ce52:	bf00      	nop
 800ce54:	371c      	adds	r7, #28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	40010000 	.word	0x40010000
 800ce64:	40010400 	.word	0x40010400

0800ce68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	f023 0201 	bic.w	r2, r3, #1
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	011b      	lsls	r3, r3, #4
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f023 030a 	bic.w	r3, r3, #10
 800cea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	621a      	str	r2, [r3, #32]
}
 800ceba:	bf00      	nop
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b087      	sub	sp, #28
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	60b9      	str	r1, [r7, #8]
 800ced0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	f023 0210 	bic.w	r2, r3, #16
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	031b      	lsls	r3, r3, #12
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	011b      	lsls	r3, r3, #4
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	621a      	str	r2, [r3, #32]
}
 800cf1a:	bf00      	nop
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b085      	sub	sp, #20
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	f043 0307 	orr.w	r3, r3, #7
 800cf48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	609a      	str	r2, [r3, #8]
}
 800cf50:	bf00      	nop
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	021a      	lsls	r2, r3, #8
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	609a      	str	r2, [r3, #8]
}
 800cf90:	bf00      	nop
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	f003 031f 	and.w	r3, r3, #31
 800cfae:	2201      	movs	r2, #1
 800cfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a1a      	ldr	r2, [r3, #32]
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	43db      	mvns	r3, r3
 800cfbe:	401a      	ands	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a1a      	ldr	r2, [r3, #32]
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	f003 031f 	and.w	r3, r3, #31
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	fa01 f303 	lsl.w	r3, r1, r3
 800cfd4:	431a      	orrs	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	621a      	str	r2, [r3, #32]
}
 800cfda:	bf00      	nop
 800cfdc:	371c      	adds	r7, #28
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
	...

0800cfe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e05a      	b.n	800d0b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a21      	ldr	r2, [pc, #132]	; (800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d022      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d04c:	d01d      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a1d      	ldr	r2, [pc, #116]	; (800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d018      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a1b      	ldr	r2, [pc, #108]	; (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d013      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a1a      	ldr	r2, [pc, #104]	; (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d00e      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a18      	ldr	r2, [pc, #96]	; (800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d009      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a17      	ldr	r2, [pc, #92]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d004      	beq.n	800d08a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a15      	ldr	r2, [pc, #84]	; (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d10c      	bne.n	800d0a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	4313      	orrs	r3, r2
 800d09a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	40010000 	.word	0x40010000
 800d0c8:	40000400 	.word	0x40000400
 800d0cc:	40000800 	.word	0x40000800
 800d0d0:	40000c00 	.word	0x40000c00
 800d0d4:	40010400 	.word	0x40010400
 800d0d8:	40014000 	.word	0x40014000
 800d0dc:	40001800 	.word	0x40001800

0800d0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e03f      	b.n	800d19a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7f9 fa12 	bl	8006558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2224      	movs	r2, #36	; 0x24
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68da      	ldr	r2, [r3, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d14a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 ff65 	bl	800e01c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	691a      	ldr	r2, [r3, #16]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	695a      	ldr	r2, [r3, #20]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68da      	ldr	r2, [r3, #12]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2220      	movs	r2, #32
 800d18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2220      	movs	r2, #32
 800d194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b08a      	sub	sp, #40	; 0x28
 800d1a6:	af02      	add	r7, sp, #8
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	603b      	str	r3, [r7, #0]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b20      	cmp	r3, #32
 800d1c0:	d17c      	bne.n	800d2bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <HAL_UART_Transmit+0x2c>
 800d1c8:	88fb      	ldrh	r3, [r7, #6]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d101      	bne.n	800d1d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e075      	b.n	800d2be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d101      	bne.n	800d1e0 <HAL_UART_Transmit+0x3e>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e06e      	b.n	800d2be <HAL_UART_Transmit+0x11c>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2221      	movs	r2, #33	; 0x21
 800d1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1f6:	f7fc fbd3 	bl	80099a0 <HAL_GetTick>
 800d1fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	88fa      	ldrh	r2, [r7, #6]
 800d200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	88fa      	ldrh	r2, [r7, #6]
 800d206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d210:	d108      	bne.n	800d224 <HAL_UART_Transmit+0x82>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d104      	bne.n	800d224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	61bb      	str	r3, [r7, #24]
 800d222:	e003      	b.n	800d22c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d228:	2300      	movs	r3, #0
 800d22a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d234:	e02a      	b.n	800d28c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2200      	movs	r2, #0
 800d23e:	2180      	movs	r1, #128	; 0x80
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 fc21 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e036      	b.n	800d2be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	3302      	adds	r3, #2
 800d26a:	61bb      	str	r3, [r7, #24]
 800d26c:	e007      	b.n	800d27e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	781a      	ldrb	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	3301      	adds	r3, #1
 800d27c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d282:	b29b      	uxth	r3, r3
 800d284:	3b01      	subs	r3, #1
 800d286:	b29a      	uxth	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d290:	b29b      	uxth	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1cf      	bne.n	800d236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2200      	movs	r2, #0
 800d29e:	2140      	movs	r1, #64	; 0x40
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f000 fbf1 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e006      	b.n	800d2be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e000      	b.n	800d2be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
  }
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	60b9      	str	r1, [r7, #8]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	d11d      	bne.n	800d31c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <HAL_UART_Receive_DMA+0x26>
 800d2e6:	88fb      	ldrh	r3, [r7, #6]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e016      	b.n	800d31e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d101      	bne.n	800d2fe <HAL_UART_Receive_DMA+0x38>
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	e00f      	b.n	800d31e <HAL_UART_Receive_DMA+0x58>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d30c:	88fb      	ldrh	r3, [r7, #6]
 800d30e:	461a      	mov	r2, r3
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f000 fc26 	bl	800db64 <UART_Start_Receive_DMA>
 800d318:	4603      	mov	r3, r0
 800d31a:	e000      	b.n	800d31e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d31c:	2302      	movs	r3, #2
  }
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b0ba      	sub	sp, #232	; 0xe8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d34e:	2300      	movs	r3, #0
 800d350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d354:	2300      	movs	r3, #0
 800d356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d35e:	f003 030f 	and.w	r3, r3, #15
 800d362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10f      	bne.n	800d38e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d372:	f003 0320 	and.w	r3, r3, #32
 800d376:	2b00      	cmp	r3, #0
 800d378:	d009      	beq.n	800d38e <HAL_UART_IRQHandler+0x66>
 800d37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d37e:	f003 0320 	and.w	r3, r3, #32
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fd8d 	bl	800dea6 <UART_Receive_IT>
      return;
 800d38c:	e256      	b.n	800d83c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d38e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80de 	beq.w	800d554 <HAL_UART_IRQHandler+0x22c>
 800d398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80d1 	beq.w	800d554 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00b      	beq.n	800d3d6 <HAL_UART_IRQHandler+0xae>
 800d3be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d005      	beq.n	800d3d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	f043 0201 	orr.w	r2, r3, #1
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00b      	beq.n	800d3fa <HAL_UART_IRQHandler+0xd2>
 800d3e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f2:	f043 0202 	orr.w	r2, r3, #2
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fe:	f003 0302 	and.w	r3, r3, #2
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00b      	beq.n	800d41e <HAL_UART_IRQHandler+0xf6>
 800d406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d005      	beq.n	800d41e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d416:	f043 0204 	orr.w	r2, r3, #4
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d422:	f003 0308 	and.w	r3, r3, #8
 800d426:	2b00      	cmp	r3, #0
 800d428:	d011      	beq.n	800d44e <HAL_UART_IRQHandler+0x126>
 800d42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d42e:	f003 0320 	and.w	r3, r3, #32
 800d432:	2b00      	cmp	r3, #0
 800d434:	d105      	bne.n	800d442 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d005      	beq.n	800d44e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d446:	f043 0208 	orr.w	r2, r3, #8
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 81ed 	beq.w	800d832 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d45c:	f003 0320 	and.w	r3, r3, #32
 800d460:	2b00      	cmp	r3, #0
 800d462:	d008      	beq.n	800d476 <HAL_UART_IRQHandler+0x14e>
 800d464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d468:	f003 0320 	and.w	r3, r3, #32
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fd18 	bl	800dea6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d480:	2b40      	cmp	r3, #64	; 0x40
 800d482:	bf0c      	ite	eq
 800d484:	2301      	moveq	r3, #1
 800d486:	2300      	movne	r3, #0
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <HAL_UART_IRQHandler+0x17a>
 800d49a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d04f      	beq.n	800d542 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fc20 	bl	800dce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b2:	2b40      	cmp	r3, #64	; 0x40
 800d4b4:	d141      	bne.n	800d53a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3314      	adds	r3, #20
 800d4bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d4cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	3314      	adds	r3, #20
 800d4de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d4e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d4e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d4ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1d9      	bne.n	800d4b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	2b00      	cmp	r3, #0
 800d508:	d013      	beq.n	800d532 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	4a7d      	ldr	r2, [pc, #500]	; (800d704 <HAL_UART_IRQHandler+0x3dc>)
 800d510:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d516:	4618      	mov	r0, r3
 800d518:	f7fc fd14 	bl	8009f44 <HAL_DMA_Abort_IT>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d016      	beq.n	800d550 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d52c:	4610      	mov	r0, r2
 800d52e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d530:	e00e      	b.n	800d550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f99a 	bl	800d86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d538:	e00a      	b.n	800d550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f996 	bl	800d86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d540:	e006      	b.n	800d550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f992 	bl	800d86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d54e:	e170      	b.n	800d832 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d550:	bf00      	nop
    return;
 800d552:	e16e      	b.n	800d832 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d558:	2b01      	cmp	r3, #1
 800d55a:	f040 814a 	bne.w	800d7f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d562:	f003 0310 	and.w	r3, r3, #16
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 8143 	beq.w	800d7f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d570:	f003 0310 	and.w	r3, r3, #16
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 813c 	beq.w	800d7f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d57a:	2300      	movs	r3, #0
 800d57c:	60bb      	str	r3, [r7, #8]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	60bb      	str	r3, [r7, #8]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	60bb      	str	r3, [r7, #8]
 800d58e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	f040 80b4 	bne.w	800d708 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d5ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8140 	beq.w	800d836 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d5ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	f080 8139 	bcs.w	800d836 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d6:	f000 8088 	beq.w	800d6ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	330c      	adds	r3, #12
 800d5e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	330c      	adds	r3, #12
 800d602:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d60a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1d9      	bne.n	800d5da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3314      	adds	r3, #20
 800d62c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3314      	adds	r3, #20
 800d646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d64a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d64e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d656:	e841 2300 	strex	r3, r2, [r1]
 800d65a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d65c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e1      	bne.n	800d626 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3314      	adds	r3, #20
 800d668:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3314      	adds	r3, #20
 800d682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d686:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d68c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d68e:	e841 2300 	strex	r3, r2, [r1]
 800d692:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1e3      	bne.n	800d662 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2220      	movs	r2, #32
 800d69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	330c      	adds	r3, #12
 800d6ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b2:	e853 3f00 	ldrex	r3, [r3]
 800d6b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ba:	f023 0310 	bic.w	r3, r3, #16
 800d6be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	330c      	adds	r3, #12
 800d6c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d6cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800d6ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6d4:	e841 2300 	strex	r3, r2, [r1]
 800d6d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1e3      	bne.n	800d6a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fc fbbd 	bl	8009e64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f8c0 	bl	800d880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d700:	e099      	b.n	800d836 <HAL_UART_IRQHandler+0x50e>
 800d702:	bf00      	nop
 800d704:	0800ddaf 	.word	0x0800ddaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d710:	b29b      	uxth	r3, r3
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 808b 	beq.w	800d83a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 8086 	beq.w	800d83a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	330c      	adds	r3, #12
 800d734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d738:	e853 3f00 	ldrex	r3, [r3]
 800d73c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	330c      	adds	r3, #12
 800d74e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d752:	647a      	str	r2, [r7, #68]	; 0x44
 800d754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d75a:	e841 2300 	strex	r3, r2, [r1]
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1e3      	bne.n	800d72e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3314      	adds	r3, #20
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	e853 3f00 	ldrex	r3, [r3]
 800d774:	623b      	str	r3, [r7, #32]
   return(result);
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	f023 0301 	bic.w	r3, r3, #1
 800d77c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3314      	adds	r3, #20
 800d786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d78a:	633a      	str	r2, [r7, #48]	; 0x30
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d792:	e841 2300 	strex	r3, r2, [r1]
 800d796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1e3      	bne.n	800d766 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	330c      	adds	r3, #12
 800d7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 0310 	bic.w	r3, r3, #16
 800d7c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	330c      	adds	r3, #12
 800d7cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d7d0:	61fa      	str	r2, [r7, #28]
 800d7d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	69b9      	ldr	r1, [r7, #24]
 800d7d6:	69fa      	ldr	r2, [r7, #28]
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e3      	bne.n	800d7ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f848 	bl	800d880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d7f0:	e023      	b.n	800d83a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d009      	beq.n	800d812 <HAL_UART_IRQHandler+0x4ea>
 800d7fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fae3 	bl	800ddd6 <UART_Transmit_IT>
    return;
 800d810:	e014      	b.n	800d83c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00e      	beq.n	800d83c <HAL_UART_IRQHandler+0x514>
 800d81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b00      	cmp	r3, #0
 800d828:	d008      	beq.n	800d83c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 fb23 	bl	800de76 <UART_EndTransmit_IT>
    return;
 800d830:	e004      	b.n	800d83c <HAL_UART_IRQHandler+0x514>
    return;
 800d832:	bf00      	nop
 800d834:	e002      	b.n	800d83c <HAL_UART_IRQHandler+0x514>
      return;
 800d836:	bf00      	nop
 800d838:	e000      	b.n	800d83c <HAL_UART_IRQHandler+0x514>
      return;
 800d83a:	bf00      	nop
  }
}
 800d83c:	37e8      	adds	r7, #232	; 0xe8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop

0800d844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b09c      	sub	sp, #112	; 0x70
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d172      	bne.n	800d99a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	330c      	adds	r3, #12
 800d8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	330c      	adds	r3, #12
 800d8d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8da:	65ba      	str	r2, [r7, #88]	; 0x58
 800d8dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8e2:	e841 2300 	strex	r3, r2, [r1]
 800d8e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e5      	bne.n	800d8ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3314      	adds	r3, #20
 800d8f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f8:	e853 3f00 	ldrex	r3, [r3]
 800d8fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d900:	f023 0301 	bic.w	r3, r3, #1
 800d904:	667b      	str	r3, [r7, #100]	; 0x64
 800d906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3314      	adds	r3, #20
 800d90c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d90e:	647a      	str	r2, [r7, #68]	; 0x44
 800d910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d916:	e841 2300 	strex	r3, r2, [r1]
 800d91a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1e5      	bne.n	800d8ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3314      	adds	r3, #20
 800d928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	e853 3f00 	ldrex	r3, [r3]
 800d930:	623b      	str	r3, [r7, #32]
   return(result);
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d938:	663b      	str	r3, [r7, #96]	; 0x60
 800d93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3314      	adds	r3, #20
 800d940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d942:	633a      	str	r2, [r7, #48]	; 0x30
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d94a:	e841 2300 	strex	r3, r2, [r1]
 800d94e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1e5      	bne.n	800d922 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d958:	2220      	movs	r2, #32
 800d95a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	2b01      	cmp	r3, #1
 800d964:	d119      	bne.n	800d99a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	330c      	adds	r3, #12
 800d96c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	e853 3f00 	ldrex	r3, [r3]
 800d974:	60fb      	str	r3, [r7, #12]
   return(result);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f023 0310 	bic.w	r3, r3, #16
 800d97c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	330c      	adds	r3, #12
 800d984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d986:	61fa      	str	r2, [r7, #28]
 800d988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98a:	69b9      	ldr	r1, [r7, #24]
 800d98c:	69fa      	ldr	r2, [r7, #28]
 800d98e:	e841 2300 	strex	r3, r2, [r1]
 800d992:	617b      	str	r3, [r7, #20]
   return(result);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e5      	bne.n	800d966 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d106      	bne.n	800d9b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9aa:	f7ff ff69 	bl	800d880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9ae:	e002      	b.n	800d9b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d9b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9b2:	f7f4 ff59 	bl	8002868 <HAL_UART_RxCpltCallback>
}
 800d9b6:	bf00      	nop
 800d9b8:	3770      	adds	r7, #112	; 0x70
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d108      	bne.n	800d9e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d9d8:	085b      	lsrs	r3, r3, #1
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	4619      	mov	r1, r3
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f7ff ff4e 	bl	800d880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9e4:	e002      	b.n	800d9ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff ff36 	bl	800d858 <HAL_UART_RxHalfCpltCallback>
}
 800d9ec:	bf00      	nop
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da10:	2b80      	cmp	r3, #128	; 0x80
 800da12:	bf0c      	ite	eq
 800da14:	2301      	moveq	r3, #1
 800da16:	2300      	movne	r3, #0
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b21      	cmp	r3, #33	; 0x21
 800da26:	d108      	bne.n	800da3a <UART_DMAError+0x46>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d005      	beq.n	800da3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2200      	movs	r2, #0
 800da32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800da34:	68b8      	ldr	r0, [r7, #8]
 800da36:	f000 f92f 	bl	800dc98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da44:	2b40      	cmp	r3, #64	; 0x40
 800da46:	bf0c      	ite	eq
 800da48:	2301      	moveq	r3, #1
 800da4a:	2300      	movne	r3, #0
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b22      	cmp	r3, #34	; 0x22
 800da5a:	d108      	bne.n	800da6e <UART_DMAError+0x7a>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2200      	movs	r2, #0
 800da66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800da68:	68b8      	ldr	r0, [r7, #8]
 800da6a:	f000 f93d 	bl	800dce8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da72:	f043 0210 	orr.w	r2, r3, #16
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da7a:	68b8      	ldr	r0, [r7, #8]
 800da7c:	f7ff fef6 	bl	800d86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da80:	bf00      	nop
 800da82:	3710      	adds	r7, #16
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b090      	sub	sp, #64	; 0x40
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da98:	e050      	b.n	800db3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa0:	d04c      	beq.n	800db3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800daa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d007      	beq.n	800dab8 <UART_WaitOnFlagUntilTimeout+0x30>
 800daa8:	f7fb ff7a 	bl	80099a0 <HAL_GetTick>
 800daac:	4602      	mov	r2, r0
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d241      	bcs.n	800db3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	330c      	adds	r3, #12
 800dabe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	e853 3f00 	ldrex	r3, [r3]
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dace:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	330c      	adds	r3, #12
 800dad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dad8:	637a      	str	r2, [r7, #52]	; 0x34
 800dada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dadc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae0:	e841 2300 	strex	r3, r2, [r1]
 800dae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1e5      	bne.n	800dab8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3314      	adds	r3, #20
 800daf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	e853 3f00 	ldrex	r3, [r3]
 800dafa:	613b      	str	r3, [r7, #16]
   return(result);
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	f023 0301 	bic.w	r3, r3, #1
 800db02:	63bb      	str	r3, [r7, #56]	; 0x38
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	3314      	adds	r3, #20
 800db0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db0c:	623a      	str	r2, [r7, #32]
 800db0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	69f9      	ldr	r1, [r7, #28]
 800db12:	6a3a      	ldr	r2, [r7, #32]
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	61bb      	str	r3, [r7, #24]
   return(result);
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e5      	bne.n	800daec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2220      	movs	r2, #32
 800db24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2220      	movs	r2, #32
 800db2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	e00f      	b.n	800db5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	4013      	ands	r3, r2
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	429a      	cmp	r2, r3
 800db4a:	bf0c      	ite	eq
 800db4c:	2301      	moveq	r3, #1
 800db4e:	2300      	movne	r3, #0
 800db50:	b2db      	uxtb	r3, r3
 800db52:	461a      	mov	r2, r3
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	429a      	cmp	r2, r3
 800db58:	d09f      	beq.n	800da9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3740      	adds	r7, #64	; 0x40
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b098      	sub	sp, #96	; 0x60
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	4613      	mov	r3, r2
 800db70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	88fa      	ldrh	r2, [r7, #6]
 800db7c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2222      	movs	r2, #34	; 0x22
 800db88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db90:	4a3e      	ldr	r2, [pc, #248]	; (800dc8c <UART_Start_Receive_DMA+0x128>)
 800db92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	4a3d      	ldr	r2, [pc, #244]	; (800dc90 <UART_Start_Receive_DMA+0x12c>)
 800db9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba0:	4a3c      	ldr	r2, [pc, #240]	; (800dc94 <UART_Start_Receive_DMA+0x130>)
 800dba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	2200      	movs	r2, #0
 800dbaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3304      	adds	r3, #4
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	88fb      	ldrh	r3, [r7, #6]
 800dbc4:	f7fc f8f6 	bl	8009db4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	613b      	str	r3, [r7, #16]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	613b      	str	r3, [r7, #16]
 800dbdc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	330c      	adds	r3, #12
 800dbec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf0:	e853 3f00 	ldrex	r3, [r3]
 800dbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	330c      	adds	r3, #12
 800dc04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc06:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc0e:	e841 2300 	strex	r3, r2, [r1]
 800dc12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1e5      	bne.n	800dbe6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3314      	adds	r3, #20
 800dc20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2c:	f043 0301 	orr.w	r3, r3, #1
 800dc30:	657b      	str	r3, [r7, #84]	; 0x54
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3314      	adds	r3, #20
 800dc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc3a:	63ba      	str	r2, [r7, #56]	; 0x38
 800dc3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc42:	e841 2300 	strex	r3, r2, [r1]
 800dc46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1e5      	bne.n	800dc1a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	3314      	adds	r3, #20
 800dc54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	e853 3f00 	ldrex	r3, [r3]
 800dc5c:	617b      	str	r3, [r7, #20]
   return(result);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc64:	653b      	str	r3, [r7, #80]	; 0x50
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3314      	adds	r3, #20
 800dc6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc6e:	627a      	str	r2, [r7, #36]	; 0x24
 800dc70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc72:	6a39      	ldr	r1, [r7, #32]
 800dc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc76:	e841 2300 	strex	r3, r2, [r1]
 800dc7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1e5      	bne.n	800dc4e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3760      	adds	r7, #96	; 0x60
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	0800d899 	.word	0x0800d899
 800dc90:	0800d9bf 	.word	0x0800d9bf
 800dc94:	0800d9f5 	.word	0x0800d9f5

0800dc98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b089      	sub	sp, #36	; 0x24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	330c      	adds	r3, #12
 800dca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	e853 3f00 	ldrex	r3, [r3]
 800dcae:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcb6:	61fb      	str	r3, [r7, #28]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	330c      	adds	r3, #12
 800dcbe:	69fa      	ldr	r2, [r7, #28]
 800dcc0:	61ba      	str	r2, [r7, #24]
 800dcc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	6979      	ldr	r1, [r7, #20]
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	e841 2300 	strex	r3, r2, [r1]
 800dccc:	613b      	str	r3, [r7, #16]
   return(result);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e5      	bne.n	800dca0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dcdc:	bf00      	nop
 800dcde:	3724      	adds	r7, #36	; 0x24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b095      	sub	sp, #84	; 0x54
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	330c      	adds	r3, #12
 800dcf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfa:	e853 3f00 	ldrex	r3, [r3]
 800dcfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	330c      	adds	r3, #12
 800dd0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd10:	643a      	str	r2, [r7, #64]	; 0x40
 800dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd18:	e841 2300 	strex	r3, r2, [r1]
 800dd1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e5      	bne.n	800dcf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3314      	adds	r3, #20
 800dd2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	e853 3f00 	ldrex	r3, [r3]
 800dd32:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	f023 0301 	bic.w	r3, r3, #1
 800dd3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3314      	adds	r3, #20
 800dd42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd4c:	e841 2300 	strex	r3, r2, [r1]
 800dd50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e5      	bne.n	800dd24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d119      	bne.n	800dd94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	330c      	adds	r3, #12
 800dd66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	e853 3f00 	ldrex	r3, [r3]
 800dd6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	f023 0310 	bic.w	r3, r3, #16
 800dd76:	647b      	str	r3, [r7, #68]	; 0x44
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	330c      	adds	r3, #12
 800dd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd80:	61ba      	str	r2, [r7, #24]
 800dd82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd84:	6979      	ldr	r1, [r7, #20]
 800dd86:	69ba      	ldr	r2, [r7, #24]
 800dd88:	e841 2300 	strex	r3, r2, [r1]
 800dd8c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1e5      	bne.n	800dd60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2220      	movs	r2, #32
 800dd98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dda2:	bf00      	nop
 800dda4:	3754      	adds	r7, #84	; 0x54
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr

0800ddae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff fd4f 	bl	800d86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ddd6:	b480      	push	{r7}
 800ddd8:	b085      	sub	sp, #20
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b21      	cmp	r3, #33	; 0x21
 800dde8:	d13e      	bne.n	800de68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddf2:	d114      	bne.n	800de1e <UART_Transmit_IT+0x48>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d110      	bne.n	800de1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6a1b      	ldr	r3, [r3, #32]
 800de00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	1c9a      	adds	r2, r3, #2
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	621a      	str	r2, [r3, #32]
 800de1c:	e008      	b.n	800de30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	1c59      	adds	r1, r3, #1
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	6211      	str	r1, [r2, #32]
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de34:	b29b      	uxth	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	b29b      	uxth	r3, r3
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	4619      	mov	r1, r3
 800de3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10f      	bne.n	800de64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	e000      	b.n	800de6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800de68:	2302      	movs	r3, #2
  }
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68da      	ldr	r2, [r3, #12]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2220      	movs	r2, #32
 800de92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff fcd4 	bl	800d844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b08c      	sub	sp, #48	; 0x30
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b22      	cmp	r3, #34	; 0x22
 800deb8:	f040 80ab 	bne.w	800e012 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dec4:	d117      	bne.n	800def6 <UART_Receive_IT+0x50>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d113      	bne.n	800def6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deee:	1c9a      	adds	r2, r3, #2
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	629a      	str	r2, [r3, #40]	; 0x28
 800def4:	e026      	b.n	800df44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800defc:	2300      	movs	r3, #0
 800defe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df08:	d007      	beq.n	800df1a <UART_Receive_IT+0x74>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <UART_Receive_IT+0x82>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	b2da      	uxtb	r2, r3
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	e008      	b.n	800df3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df34:	b2da      	uxtb	r2, r3
 800df36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df3e:	1c5a      	adds	r2, r3, #1
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800df48:	b29b      	uxth	r3, r3
 800df4a:	3b01      	subs	r3, #1
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	4619      	mov	r1, r3
 800df52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800df54:	2b00      	cmp	r3, #0
 800df56:	d15a      	bne.n	800e00e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f022 0220 	bic.w	r2, r2, #32
 800df66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68da      	ldr	r2, [r3, #12]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	695a      	ldr	r2, [r3, #20]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f022 0201 	bic.w	r2, r2, #1
 800df86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2220      	movs	r2, #32
 800df8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df94:	2b01      	cmp	r3, #1
 800df96:	d135      	bne.n	800e004 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	330c      	adds	r3, #12
 800dfa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	e853 3f00 	ldrex	r3, [r3]
 800dfac:	613b      	str	r3, [r7, #16]
   return(result);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f023 0310 	bic.w	r3, r3, #16
 800dfb4:	627b      	str	r3, [r7, #36]	; 0x24
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	330c      	adds	r3, #12
 800dfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfbe:	623a      	str	r2, [r7, #32]
 800dfc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc2:	69f9      	ldr	r1, [r7, #28]
 800dfc4:	6a3a      	ldr	r2, [r7, #32]
 800dfc6:	e841 2300 	strex	r3, r2, [r1]
 800dfca:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1e5      	bne.n	800df9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f003 0310 	and.w	r3, r3, #16
 800dfdc:	2b10      	cmp	r3, #16
 800dfde:	d10a      	bne.n	800dff6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff fc3f 	bl	800d880 <HAL_UARTEx_RxEventCallback>
 800e002:	e002      	b.n	800e00a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7f4 fc2f 	bl	8002868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e002      	b.n	800e014 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	e000      	b.n	800e014 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e012:	2302      	movs	r3, #2
  }
}
 800e014:	4618      	mov	r0, r3
 800e016:	3730      	adds	r7, #48	; 0x30
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	b09f      	sub	sp, #124	; 0x7c
 800e022:	af00      	add	r7, sp, #0
 800e024:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e032:	68d9      	ldr	r1, [r3, #12]
 800e034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	ea40 0301 	orr.w	r3, r0, r1
 800e03c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e040:	689a      	ldr	r2, [r3, #8]
 800e042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	431a      	orrs	r2, r3
 800e048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e04a:	695b      	ldr	r3, [r3, #20]
 800e04c:	431a      	orrs	r2, r3
 800e04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	4313      	orrs	r3, r2
 800e054:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e060:	f021 010c 	bic.w	r1, r1, #12
 800e064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e06a:	430b      	orrs	r3, r1
 800e06c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	695b      	ldr	r3, [r3, #20]
 800e074:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e07a:	6999      	ldr	r1, [r3, #24]
 800e07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	ea40 0301 	orr.w	r3, r0, r1
 800e084:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4bc5      	ldr	r3, [pc, #788]	; (800e3a0 <UART_SetConfig+0x384>)
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d004      	beq.n	800e09a <UART_SetConfig+0x7e>
 800e090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	4bc3      	ldr	r3, [pc, #780]	; (800e3a4 <UART_SetConfig+0x388>)
 800e096:	429a      	cmp	r2, r3
 800e098:	d103      	bne.n	800e0a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e09a:	f7fc fd17 	bl	800aacc <HAL_RCC_GetPCLK2Freq>
 800e09e:	6778      	str	r0, [r7, #116]	; 0x74
 800e0a0:	e002      	b.n	800e0a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e0a2:	f7fc fcff 	bl	800aaa4 <HAL_RCC_GetPCLK1Freq>
 800e0a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0aa:	69db      	ldr	r3, [r3, #28]
 800e0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0b0:	f040 80b6 	bne.w	800e220 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e0b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0b6:	461c      	mov	r4, r3
 800e0b8:	f04f 0500 	mov.w	r5, #0
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	1891      	adds	r1, r2, r2
 800e0c2:	6439      	str	r1, [r7, #64]	; 0x40
 800e0c4:	415b      	adcs	r3, r3
 800e0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e0c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e0cc:	1912      	adds	r2, r2, r4
 800e0ce:	eb45 0303 	adc.w	r3, r5, r3
 800e0d2:	f04f 0000 	mov.w	r0, #0
 800e0d6:	f04f 0100 	mov.w	r1, #0
 800e0da:	00d9      	lsls	r1, r3, #3
 800e0dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e0e0:	00d0      	lsls	r0, r2, #3
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	1911      	adds	r1, r2, r4
 800e0e8:	6639      	str	r1, [r7, #96]	; 0x60
 800e0ea:	416b      	adcs	r3, r5
 800e0ec:	667b      	str	r3, [r7, #100]	; 0x64
 800e0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	f04f 0300 	mov.w	r3, #0
 800e0f8:	1891      	adds	r1, r2, r2
 800e0fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800e0fc:	415b      	adcs	r3, r3
 800e0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e104:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e108:	f7f2 fd82 	bl	8000c10 <__aeabi_uldivmod>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4ba5      	ldr	r3, [pc, #660]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e112:	fba3 2302 	umull	r2, r3, r3, r2
 800e116:	095b      	lsrs	r3, r3, #5
 800e118:	011e      	lsls	r6, r3, #4
 800e11a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e11c:	461c      	mov	r4, r3
 800e11e:	f04f 0500 	mov.w	r5, #0
 800e122:	4622      	mov	r2, r4
 800e124:	462b      	mov	r3, r5
 800e126:	1891      	adds	r1, r2, r2
 800e128:	6339      	str	r1, [r7, #48]	; 0x30
 800e12a:	415b      	adcs	r3, r3
 800e12c:	637b      	str	r3, [r7, #52]	; 0x34
 800e12e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e132:	1912      	adds	r2, r2, r4
 800e134:	eb45 0303 	adc.w	r3, r5, r3
 800e138:	f04f 0000 	mov.w	r0, #0
 800e13c:	f04f 0100 	mov.w	r1, #0
 800e140:	00d9      	lsls	r1, r3, #3
 800e142:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e146:	00d0      	lsls	r0, r2, #3
 800e148:	4602      	mov	r2, r0
 800e14a:	460b      	mov	r3, r1
 800e14c:	1911      	adds	r1, r2, r4
 800e14e:	65b9      	str	r1, [r7, #88]	; 0x58
 800e150:	416b      	adcs	r3, r5
 800e152:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	461a      	mov	r2, r3
 800e15a:	f04f 0300 	mov.w	r3, #0
 800e15e:	1891      	adds	r1, r2, r2
 800e160:	62b9      	str	r1, [r7, #40]	; 0x28
 800e162:	415b      	adcs	r3, r3
 800e164:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e16a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e16e:	f7f2 fd4f 	bl	8000c10 <__aeabi_uldivmod>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4b8c      	ldr	r3, [pc, #560]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e178:	fba3 1302 	umull	r1, r3, r3, r2
 800e17c:	095b      	lsrs	r3, r3, #5
 800e17e:	2164      	movs	r1, #100	; 0x64
 800e180:	fb01 f303 	mul.w	r3, r1, r3
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	3332      	adds	r3, #50	; 0x32
 800e18a:	4a87      	ldr	r2, [pc, #540]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e18c:	fba2 2303 	umull	r2, r3, r2, r3
 800e190:	095b      	lsrs	r3, r3, #5
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e198:	441e      	add	r6, r3
 800e19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e19c:	4618      	mov	r0, r3
 800e19e:	f04f 0100 	mov.w	r1, #0
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	1894      	adds	r4, r2, r2
 800e1a8:	623c      	str	r4, [r7, #32]
 800e1aa:	415b      	adcs	r3, r3
 800e1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1b2:	1812      	adds	r2, r2, r0
 800e1b4:	eb41 0303 	adc.w	r3, r1, r3
 800e1b8:	f04f 0400 	mov.w	r4, #0
 800e1bc:	f04f 0500 	mov.w	r5, #0
 800e1c0:	00dd      	lsls	r5, r3, #3
 800e1c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e1c6:	00d4      	lsls	r4, r2, #3
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	462b      	mov	r3, r5
 800e1cc:	1814      	adds	r4, r2, r0
 800e1ce:	653c      	str	r4, [r7, #80]	; 0x50
 800e1d0:	414b      	adcs	r3, r1
 800e1d2:	657b      	str	r3, [r7, #84]	; 0x54
 800e1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	f04f 0300 	mov.w	r3, #0
 800e1de:	1891      	adds	r1, r2, r2
 800e1e0:	61b9      	str	r1, [r7, #24]
 800e1e2:	415b      	adcs	r3, r3
 800e1e4:	61fb      	str	r3, [r7, #28]
 800e1e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e1ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e1ee:	f7f2 fd0f 	bl	8000c10 <__aeabi_uldivmod>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4b6c      	ldr	r3, [pc, #432]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e1f8:	fba3 1302 	umull	r1, r3, r3, r2
 800e1fc:	095b      	lsrs	r3, r3, #5
 800e1fe:	2164      	movs	r1, #100	; 0x64
 800e200:	fb01 f303 	mul.w	r3, r1, r3
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	3332      	adds	r3, #50	; 0x32
 800e20a:	4a67      	ldr	r2, [pc, #412]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e20c:	fba2 2303 	umull	r2, r3, r2, r3
 800e210:	095b      	lsrs	r3, r3, #5
 800e212:	f003 0207 	and.w	r2, r3, #7
 800e216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4432      	add	r2, r6
 800e21c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e21e:	e0b9      	b.n	800e394 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e222:	461c      	mov	r4, r3
 800e224:	f04f 0500 	mov.w	r5, #0
 800e228:	4622      	mov	r2, r4
 800e22a:	462b      	mov	r3, r5
 800e22c:	1891      	adds	r1, r2, r2
 800e22e:	6139      	str	r1, [r7, #16]
 800e230:	415b      	adcs	r3, r3
 800e232:	617b      	str	r3, [r7, #20]
 800e234:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e238:	1912      	adds	r2, r2, r4
 800e23a:	eb45 0303 	adc.w	r3, r5, r3
 800e23e:	f04f 0000 	mov.w	r0, #0
 800e242:	f04f 0100 	mov.w	r1, #0
 800e246:	00d9      	lsls	r1, r3, #3
 800e248:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e24c:	00d0      	lsls	r0, r2, #3
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	eb12 0804 	adds.w	r8, r2, r4
 800e256:	eb43 0905 	adc.w	r9, r3, r5
 800e25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f04f 0100 	mov.w	r1, #0
 800e264:	f04f 0200 	mov.w	r2, #0
 800e268:	f04f 0300 	mov.w	r3, #0
 800e26c:	008b      	lsls	r3, r1, #2
 800e26e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e272:	0082      	lsls	r2, r0, #2
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f2 fcca 	bl	8000c10 <__aeabi_uldivmod>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	4b49      	ldr	r3, [pc, #292]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e282:	fba3 2302 	umull	r2, r3, r3, r2
 800e286:	095b      	lsrs	r3, r3, #5
 800e288:	011e      	lsls	r6, r3, #4
 800e28a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e28c:	4618      	mov	r0, r3
 800e28e:	f04f 0100 	mov.w	r1, #0
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	1894      	adds	r4, r2, r2
 800e298:	60bc      	str	r4, [r7, #8]
 800e29a:	415b      	adcs	r3, r3
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e2a2:	1812      	adds	r2, r2, r0
 800e2a4:	eb41 0303 	adc.w	r3, r1, r3
 800e2a8:	f04f 0400 	mov.w	r4, #0
 800e2ac:	f04f 0500 	mov.w	r5, #0
 800e2b0:	00dd      	lsls	r5, r3, #3
 800e2b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e2b6:	00d4      	lsls	r4, r2, #3
 800e2b8:	4622      	mov	r2, r4
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	1814      	adds	r4, r2, r0
 800e2be:	64bc      	str	r4, [r7, #72]	; 0x48
 800e2c0:	414b      	adcs	r3, r1
 800e2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f04f 0100 	mov.w	r1, #0
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	f04f 0300 	mov.w	r3, #0
 800e2d6:	008b      	lsls	r3, r1, #2
 800e2d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e2dc:	0082      	lsls	r2, r0, #2
 800e2de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e2e2:	f7f2 fc95 	bl	8000c10 <__aeabi_uldivmod>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4b2f      	ldr	r3, [pc, #188]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800e2f0:	095b      	lsrs	r3, r3, #5
 800e2f2:	2164      	movs	r1, #100	; 0x64
 800e2f4:	fb01 f303 	mul.w	r3, r1, r3
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	011b      	lsls	r3, r3, #4
 800e2fc:	3332      	adds	r3, #50	; 0x32
 800e2fe:	4a2a      	ldr	r2, [pc, #168]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e300:	fba2 2303 	umull	r2, r3, r2, r3
 800e304:	095b      	lsrs	r3, r3, #5
 800e306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e30a:	441e      	add	r6, r3
 800e30c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e30e:	4618      	mov	r0, r3
 800e310:	f04f 0100 	mov.w	r1, #0
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	1894      	adds	r4, r2, r2
 800e31a:	603c      	str	r4, [r7, #0]
 800e31c:	415b      	adcs	r3, r3
 800e31e:	607b      	str	r3, [r7, #4]
 800e320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e324:	1812      	adds	r2, r2, r0
 800e326:	eb41 0303 	adc.w	r3, r1, r3
 800e32a:	f04f 0400 	mov.w	r4, #0
 800e32e:	f04f 0500 	mov.w	r5, #0
 800e332:	00dd      	lsls	r5, r3, #3
 800e334:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e338:	00d4      	lsls	r4, r2, #3
 800e33a:	4622      	mov	r2, r4
 800e33c:	462b      	mov	r3, r5
 800e33e:	eb12 0a00 	adds.w	sl, r2, r0
 800e342:	eb43 0b01 	adc.w	fp, r3, r1
 800e346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f04f 0100 	mov.w	r1, #0
 800e350:	f04f 0200 	mov.w	r2, #0
 800e354:	f04f 0300 	mov.w	r3, #0
 800e358:	008b      	lsls	r3, r1, #2
 800e35a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e35e:	0082      	lsls	r2, r0, #2
 800e360:	4650      	mov	r0, sl
 800e362:	4659      	mov	r1, fp
 800e364:	f7f2 fc54 	bl	8000c10 <__aeabi_uldivmod>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	4b0e      	ldr	r3, [pc, #56]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e36e:	fba3 1302 	umull	r1, r3, r3, r2
 800e372:	095b      	lsrs	r3, r3, #5
 800e374:	2164      	movs	r1, #100	; 0x64
 800e376:	fb01 f303 	mul.w	r3, r1, r3
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	011b      	lsls	r3, r3, #4
 800e37e:	3332      	adds	r3, #50	; 0x32
 800e380:	4a09      	ldr	r2, [pc, #36]	; (800e3a8 <UART_SetConfig+0x38c>)
 800e382:	fba2 2303 	umull	r2, r3, r2, r3
 800e386:	095b      	lsrs	r3, r3, #5
 800e388:	f003 020f 	and.w	r2, r3, #15
 800e38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4432      	add	r2, r6
 800e392:	609a      	str	r2, [r3, #8]
}
 800e394:	bf00      	nop
 800e396:	377c      	adds	r7, #124	; 0x7c
 800e398:	46bd      	mov	sp, r7
 800e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	bf00      	nop
 800e3a0:	40011000 	.word	0x40011000
 800e3a4:	40011400 	.word	0x40011400
 800e3a8:	51eb851f 	.word	0x51eb851f

0800e3ac <__errno>:
 800e3ac:	4b01      	ldr	r3, [pc, #4]	; (800e3b4 <__errno+0x8>)
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	200001f0 	.word	0x200001f0

0800e3b8 <__libc_init_array>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	4d0d      	ldr	r5, [pc, #52]	; (800e3f0 <__libc_init_array+0x38>)
 800e3bc:	4c0d      	ldr	r4, [pc, #52]	; (800e3f4 <__libc_init_array+0x3c>)
 800e3be:	1b64      	subs	r4, r4, r5
 800e3c0:	10a4      	asrs	r4, r4, #2
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	42a6      	cmp	r6, r4
 800e3c6:	d109      	bne.n	800e3dc <__libc_init_array+0x24>
 800e3c8:	4d0b      	ldr	r5, [pc, #44]	; (800e3f8 <__libc_init_array+0x40>)
 800e3ca:	4c0c      	ldr	r4, [pc, #48]	; (800e3fc <__libc_init_array+0x44>)
 800e3cc:	f001 f91e 	bl	800f60c <_init>
 800e3d0:	1b64      	subs	r4, r4, r5
 800e3d2:	10a4      	asrs	r4, r4, #2
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	42a6      	cmp	r6, r4
 800e3d8:	d105      	bne.n	800e3e6 <__libc_init_array+0x2e>
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e0:	4798      	blx	r3
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	e7ee      	b.n	800e3c4 <__libc_init_array+0xc>
 800e3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ea:	4798      	blx	r3
 800e3ec:	3601      	adds	r6, #1
 800e3ee:	e7f2      	b.n	800e3d6 <__libc_init_array+0x1e>
 800e3f0:	0800fae8 	.word	0x0800fae8
 800e3f4:	0800fae8 	.word	0x0800fae8
 800e3f8:	0800fae8 	.word	0x0800fae8
 800e3fc:	0800faec 	.word	0x0800faec

0800e400 <memcpy>:
 800e400:	440a      	add	r2, r1
 800e402:	4291      	cmp	r1, r2
 800e404:	f100 33ff 	add.w	r3, r0, #4294967295
 800e408:	d100      	bne.n	800e40c <memcpy+0xc>
 800e40a:	4770      	bx	lr
 800e40c:	b510      	push	{r4, lr}
 800e40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e416:	4291      	cmp	r1, r2
 800e418:	d1f9      	bne.n	800e40e <memcpy+0xe>
 800e41a:	bd10      	pop	{r4, pc}

0800e41c <memset>:
 800e41c:	4402      	add	r2, r0
 800e41e:	4603      	mov	r3, r0
 800e420:	4293      	cmp	r3, r2
 800e422:	d100      	bne.n	800e426 <memset+0xa>
 800e424:	4770      	bx	lr
 800e426:	f803 1b01 	strb.w	r1, [r3], #1
 800e42a:	e7f9      	b.n	800e420 <memset+0x4>
 800e42c:	0000      	movs	r0, r0
	...

0800e430 <ceil>:
 800e430:	ec51 0b10 	vmov	r0, r1, d0
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e43c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e440:	2e13      	cmp	r6, #19
 800e442:	ee10 5a10 	vmov	r5, s0
 800e446:	ee10 8a10 	vmov	r8, s0
 800e44a:	460c      	mov	r4, r1
 800e44c:	dc30      	bgt.n	800e4b0 <ceil+0x80>
 800e44e:	2e00      	cmp	r6, #0
 800e450:	da12      	bge.n	800e478 <ceil+0x48>
 800e452:	a335      	add	r3, pc, #212	; (adr r3, 800e528 <ceil+0xf8>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f7f1 fedc 	bl	8000214 <__adddf3>
 800e45c:	2200      	movs	r2, #0
 800e45e:	2300      	movs	r3, #0
 800e460:	f7f2 fb1e 	bl	8000aa0 <__aeabi_dcmpgt>
 800e464:	b128      	cbz	r0, 800e472 <ceil+0x42>
 800e466:	2c00      	cmp	r4, #0
 800e468:	db55      	blt.n	800e516 <ceil+0xe6>
 800e46a:	432c      	orrs	r4, r5
 800e46c:	d057      	beq.n	800e51e <ceil+0xee>
 800e46e:	4c30      	ldr	r4, [pc, #192]	; (800e530 <ceil+0x100>)
 800e470:	2500      	movs	r5, #0
 800e472:	4621      	mov	r1, r4
 800e474:	4628      	mov	r0, r5
 800e476:	e025      	b.n	800e4c4 <ceil+0x94>
 800e478:	4f2e      	ldr	r7, [pc, #184]	; (800e534 <ceil+0x104>)
 800e47a:	4137      	asrs	r7, r6
 800e47c:	ea01 0307 	and.w	r3, r1, r7
 800e480:	4303      	orrs	r3, r0
 800e482:	d01f      	beq.n	800e4c4 <ceil+0x94>
 800e484:	a328      	add	r3, pc, #160	; (adr r3, 800e528 <ceil+0xf8>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 fec3 	bl	8000214 <__adddf3>
 800e48e:	2200      	movs	r2, #0
 800e490:	2300      	movs	r3, #0
 800e492:	f7f2 fb05 	bl	8000aa0 <__aeabi_dcmpgt>
 800e496:	2800      	cmp	r0, #0
 800e498:	d0eb      	beq.n	800e472 <ceil+0x42>
 800e49a:	2c00      	cmp	r4, #0
 800e49c:	bfc2      	ittt	gt
 800e49e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e4a2:	fa43 f606 	asrgt.w	r6, r3, r6
 800e4a6:	19a4      	addgt	r4, r4, r6
 800e4a8:	ea24 0407 	bic.w	r4, r4, r7
 800e4ac:	2500      	movs	r5, #0
 800e4ae:	e7e0      	b.n	800e472 <ceil+0x42>
 800e4b0:	2e33      	cmp	r6, #51	; 0x33
 800e4b2:	dd0b      	ble.n	800e4cc <ceil+0x9c>
 800e4b4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e4b8:	d104      	bne.n	800e4c4 <ceil+0x94>
 800e4ba:	ee10 2a10 	vmov	r2, s0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	f7f1 fea8 	bl	8000214 <__adddf3>
 800e4c4:	ec41 0b10 	vmov	d0, r0, r1
 800e4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4cc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d4:	fa23 f707 	lsr.w	r7, r3, r7
 800e4d8:	4207      	tst	r7, r0
 800e4da:	d0f3      	beq.n	800e4c4 <ceil+0x94>
 800e4dc:	a312      	add	r3, pc, #72	; (adr r3, 800e528 <ceil+0xf8>)
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	f7f1 fe97 	bl	8000214 <__adddf3>
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f7f2 fad9 	bl	8000aa0 <__aeabi_dcmpgt>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d0bf      	beq.n	800e472 <ceil+0x42>
 800e4f2:	2c00      	cmp	r4, #0
 800e4f4:	dd02      	ble.n	800e4fc <ceil+0xcc>
 800e4f6:	2e14      	cmp	r6, #20
 800e4f8:	d103      	bne.n	800e502 <ceil+0xd2>
 800e4fa:	3401      	adds	r4, #1
 800e4fc:	ea25 0507 	bic.w	r5, r5, r7
 800e500:	e7b7      	b.n	800e472 <ceil+0x42>
 800e502:	2301      	movs	r3, #1
 800e504:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e508:	fa03 f606 	lsl.w	r6, r3, r6
 800e50c:	4435      	add	r5, r6
 800e50e:	4545      	cmp	r5, r8
 800e510:	bf38      	it	cc
 800e512:	18e4      	addcc	r4, r4, r3
 800e514:	e7f2      	b.n	800e4fc <ceil+0xcc>
 800e516:	2500      	movs	r5, #0
 800e518:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e51c:	e7a9      	b.n	800e472 <ceil+0x42>
 800e51e:	4625      	mov	r5, r4
 800e520:	e7a7      	b.n	800e472 <ceil+0x42>
 800e522:	bf00      	nop
 800e524:	f3af 8000 	nop.w
 800e528:	8800759c 	.word	0x8800759c
 800e52c:	7e37e43c 	.word	0x7e37e43c
 800e530:	3ff00000 	.word	0x3ff00000
 800e534:	000fffff 	.word	0x000fffff

0800e538 <floor>:
 800e538:	ec51 0b10 	vmov	r0, r1, d0
 800e53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e548:	2e13      	cmp	r6, #19
 800e54a:	ee10 5a10 	vmov	r5, s0
 800e54e:	ee10 8a10 	vmov	r8, s0
 800e552:	460c      	mov	r4, r1
 800e554:	dc32      	bgt.n	800e5bc <floor+0x84>
 800e556:	2e00      	cmp	r6, #0
 800e558:	da14      	bge.n	800e584 <floor+0x4c>
 800e55a:	a333      	add	r3, pc, #204	; (adr r3, 800e628 <floor+0xf0>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f1 fe58 	bl	8000214 <__adddf3>
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	f7f2 fa9a 	bl	8000aa0 <__aeabi_dcmpgt>
 800e56c:	b138      	cbz	r0, 800e57e <floor+0x46>
 800e56e:	2c00      	cmp	r4, #0
 800e570:	da57      	bge.n	800e622 <floor+0xea>
 800e572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e576:	431d      	orrs	r5, r3
 800e578:	d001      	beq.n	800e57e <floor+0x46>
 800e57a:	4c2d      	ldr	r4, [pc, #180]	; (800e630 <floor+0xf8>)
 800e57c:	2500      	movs	r5, #0
 800e57e:	4621      	mov	r1, r4
 800e580:	4628      	mov	r0, r5
 800e582:	e025      	b.n	800e5d0 <floor+0x98>
 800e584:	4f2b      	ldr	r7, [pc, #172]	; (800e634 <floor+0xfc>)
 800e586:	4137      	asrs	r7, r6
 800e588:	ea01 0307 	and.w	r3, r1, r7
 800e58c:	4303      	orrs	r3, r0
 800e58e:	d01f      	beq.n	800e5d0 <floor+0x98>
 800e590:	a325      	add	r3, pc, #148	; (adr r3, 800e628 <floor+0xf0>)
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	f7f1 fe3d 	bl	8000214 <__adddf3>
 800e59a:	2200      	movs	r2, #0
 800e59c:	2300      	movs	r3, #0
 800e59e:	f7f2 fa7f 	bl	8000aa0 <__aeabi_dcmpgt>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	d0eb      	beq.n	800e57e <floor+0x46>
 800e5a6:	2c00      	cmp	r4, #0
 800e5a8:	bfbe      	ittt	lt
 800e5aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e5ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800e5b2:	19a4      	addlt	r4, r4, r6
 800e5b4:	ea24 0407 	bic.w	r4, r4, r7
 800e5b8:	2500      	movs	r5, #0
 800e5ba:	e7e0      	b.n	800e57e <floor+0x46>
 800e5bc:	2e33      	cmp	r6, #51	; 0x33
 800e5be:	dd0b      	ble.n	800e5d8 <floor+0xa0>
 800e5c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e5c4:	d104      	bne.n	800e5d0 <floor+0x98>
 800e5c6:	ee10 2a10 	vmov	r2, s0
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	f7f1 fe22 	bl	8000214 <__adddf3>
 800e5d0:	ec41 0b10 	vmov	d0, r0, r1
 800e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e0:	fa23 f707 	lsr.w	r7, r3, r7
 800e5e4:	4207      	tst	r7, r0
 800e5e6:	d0f3      	beq.n	800e5d0 <floor+0x98>
 800e5e8:	a30f      	add	r3, pc, #60	; (adr r3, 800e628 <floor+0xf0>)
 800e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ee:	f7f1 fe11 	bl	8000214 <__adddf3>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f7f2 fa53 	bl	8000aa0 <__aeabi_dcmpgt>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d0bf      	beq.n	800e57e <floor+0x46>
 800e5fe:	2c00      	cmp	r4, #0
 800e600:	da02      	bge.n	800e608 <floor+0xd0>
 800e602:	2e14      	cmp	r6, #20
 800e604:	d103      	bne.n	800e60e <floor+0xd6>
 800e606:	3401      	adds	r4, #1
 800e608:	ea25 0507 	bic.w	r5, r5, r7
 800e60c:	e7b7      	b.n	800e57e <floor+0x46>
 800e60e:	2301      	movs	r3, #1
 800e610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e614:	fa03 f606 	lsl.w	r6, r3, r6
 800e618:	4435      	add	r5, r6
 800e61a:	4545      	cmp	r5, r8
 800e61c:	bf38      	it	cc
 800e61e:	18e4      	addcc	r4, r4, r3
 800e620:	e7f2      	b.n	800e608 <floor+0xd0>
 800e622:	2500      	movs	r5, #0
 800e624:	462c      	mov	r4, r5
 800e626:	e7aa      	b.n	800e57e <floor+0x46>
 800e628:	8800759c 	.word	0x8800759c
 800e62c:	7e37e43c 	.word	0x7e37e43c
 800e630:	bff00000 	.word	0xbff00000
 800e634:	000fffff 	.word	0x000fffff

0800e638 <pow>:
 800e638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e63c:	ec59 8b10 	vmov	r8, r9, d0
 800e640:	ec57 6b11 	vmov	r6, r7, d1
 800e644:	f000 f8dc 	bl	800e800 <__ieee754_pow>
 800e648:	4b4e      	ldr	r3, [pc, #312]	; (800e784 <pow+0x14c>)
 800e64a:	f993 3000 	ldrsb.w	r3, [r3]
 800e64e:	3301      	adds	r3, #1
 800e650:	ec55 4b10 	vmov	r4, r5, d0
 800e654:	d015      	beq.n	800e682 <pow+0x4a>
 800e656:	4632      	mov	r2, r6
 800e658:	463b      	mov	r3, r7
 800e65a:	4630      	mov	r0, r6
 800e65c:	4639      	mov	r1, r7
 800e65e:	f7f2 fa29 	bl	8000ab4 <__aeabi_dcmpun>
 800e662:	b970      	cbnz	r0, 800e682 <pow+0x4a>
 800e664:	4642      	mov	r2, r8
 800e666:	464b      	mov	r3, r9
 800e668:	4640      	mov	r0, r8
 800e66a:	4649      	mov	r1, r9
 800e66c:	f7f2 fa22 	bl	8000ab4 <__aeabi_dcmpun>
 800e670:	2200      	movs	r2, #0
 800e672:	2300      	movs	r3, #0
 800e674:	b148      	cbz	r0, 800e68a <pow+0x52>
 800e676:	4630      	mov	r0, r6
 800e678:	4639      	mov	r1, r7
 800e67a:	f7f2 f9e9 	bl	8000a50 <__aeabi_dcmpeq>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d17d      	bne.n	800e77e <pow+0x146>
 800e682:	ec45 4b10 	vmov	d0, r4, r5
 800e686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68a:	4640      	mov	r0, r8
 800e68c:	4649      	mov	r1, r9
 800e68e:	f7f2 f9df 	bl	8000a50 <__aeabi_dcmpeq>
 800e692:	b1e0      	cbz	r0, 800e6ce <pow+0x96>
 800e694:	2200      	movs	r2, #0
 800e696:	2300      	movs	r3, #0
 800e698:	4630      	mov	r0, r6
 800e69a:	4639      	mov	r1, r7
 800e69c:	f7f2 f9d8 	bl	8000a50 <__aeabi_dcmpeq>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d16c      	bne.n	800e77e <pow+0x146>
 800e6a4:	ec47 6b10 	vmov	d0, r6, r7
 800e6a8:	f000 fe89 	bl	800f3be <finite>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d0e8      	beq.n	800e682 <pow+0x4a>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	4639      	mov	r1, r7
 800e6b8:	f7f2 f9d4 	bl	8000a64 <__aeabi_dcmplt>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d0e0      	beq.n	800e682 <pow+0x4a>
 800e6c0:	f7ff fe74 	bl	800e3ac <__errno>
 800e6c4:	2321      	movs	r3, #33	; 0x21
 800e6c6:	6003      	str	r3, [r0, #0]
 800e6c8:	2400      	movs	r4, #0
 800e6ca:	4d2f      	ldr	r5, [pc, #188]	; (800e788 <pow+0x150>)
 800e6cc:	e7d9      	b.n	800e682 <pow+0x4a>
 800e6ce:	ec45 4b10 	vmov	d0, r4, r5
 800e6d2:	f000 fe74 	bl	800f3be <finite>
 800e6d6:	bbb8      	cbnz	r0, 800e748 <pow+0x110>
 800e6d8:	ec49 8b10 	vmov	d0, r8, r9
 800e6dc:	f000 fe6f 	bl	800f3be <finite>
 800e6e0:	b390      	cbz	r0, 800e748 <pow+0x110>
 800e6e2:	ec47 6b10 	vmov	d0, r6, r7
 800e6e6:	f000 fe6a 	bl	800f3be <finite>
 800e6ea:	b368      	cbz	r0, 800e748 <pow+0x110>
 800e6ec:	4622      	mov	r2, r4
 800e6ee:	462b      	mov	r3, r5
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f7f2 f9de 	bl	8000ab4 <__aeabi_dcmpun>
 800e6f8:	b160      	cbz	r0, 800e714 <pow+0xdc>
 800e6fa:	f7ff fe57 	bl	800e3ac <__errno>
 800e6fe:	2321      	movs	r3, #33	; 0x21
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	2200      	movs	r2, #0
 800e704:	2300      	movs	r3, #0
 800e706:	4610      	mov	r0, r2
 800e708:	4619      	mov	r1, r3
 800e70a:	f7f2 f863 	bl	80007d4 <__aeabi_ddiv>
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	e7b6      	b.n	800e682 <pow+0x4a>
 800e714:	f7ff fe4a 	bl	800e3ac <__errno>
 800e718:	2322      	movs	r3, #34	; 0x22
 800e71a:	6003      	str	r3, [r0, #0]
 800e71c:	2200      	movs	r2, #0
 800e71e:	2300      	movs	r3, #0
 800e720:	4640      	mov	r0, r8
 800e722:	4649      	mov	r1, r9
 800e724:	f7f2 f99e 	bl	8000a64 <__aeabi_dcmplt>
 800e728:	2400      	movs	r4, #0
 800e72a:	b158      	cbz	r0, 800e744 <pow+0x10c>
 800e72c:	ec47 6b10 	vmov	d0, r6, r7
 800e730:	f000 fe5a 	bl	800f3e8 <rint>
 800e734:	4632      	mov	r2, r6
 800e736:	ec51 0b10 	vmov	r0, r1, d0
 800e73a:	463b      	mov	r3, r7
 800e73c:	f7f2 f988 	bl	8000a50 <__aeabi_dcmpeq>
 800e740:	2800      	cmp	r0, #0
 800e742:	d0c2      	beq.n	800e6ca <pow+0x92>
 800e744:	4d11      	ldr	r5, [pc, #68]	; (800e78c <pow+0x154>)
 800e746:	e79c      	b.n	800e682 <pow+0x4a>
 800e748:	2200      	movs	r2, #0
 800e74a:	2300      	movs	r3, #0
 800e74c:	4620      	mov	r0, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	f7f2 f97e 	bl	8000a50 <__aeabi_dcmpeq>
 800e754:	2800      	cmp	r0, #0
 800e756:	d094      	beq.n	800e682 <pow+0x4a>
 800e758:	ec49 8b10 	vmov	d0, r8, r9
 800e75c:	f000 fe2f 	bl	800f3be <finite>
 800e760:	2800      	cmp	r0, #0
 800e762:	d08e      	beq.n	800e682 <pow+0x4a>
 800e764:	ec47 6b10 	vmov	d0, r6, r7
 800e768:	f000 fe29 	bl	800f3be <finite>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d088      	beq.n	800e682 <pow+0x4a>
 800e770:	f7ff fe1c 	bl	800e3ac <__errno>
 800e774:	2322      	movs	r3, #34	; 0x22
 800e776:	6003      	str	r3, [r0, #0]
 800e778:	2400      	movs	r4, #0
 800e77a:	2500      	movs	r5, #0
 800e77c:	e781      	b.n	800e682 <pow+0x4a>
 800e77e:	4d04      	ldr	r5, [pc, #16]	; (800e790 <pow+0x158>)
 800e780:	2400      	movs	r4, #0
 800e782:	e77e      	b.n	800e682 <pow+0x4a>
 800e784:	20000254 	.word	0x20000254
 800e788:	fff00000 	.word	0xfff00000
 800e78c:	7ff00000 	.word	0x7ff00000
 800e790:	3ff00000 	.word	0x3ff00000

0800e794 <sqrt>:
 800e794:	b538      	push	{r3, r4, r5, lr}
 800e796:	ed2d 8b02 	vpush	{d8}
 800e79a:	ec55 4b10 	vmov	r4, r5, d0
 800e79e:	f000 fd51 	bl	800f244 <__ieee754_sqrt>
 800e7a2:	4b15      	ldr	r3, [pc, #84]	; (800e7f8 <sqrt+0x64>)
 800e7a4:	eeb0 8a40 	vmov.f32	s16, s0
 800e7a8:	eef0 8a60 	vmov.f32	s17, s1
 800e7ac:	f993 3000 	ldrsb.w	r3, [r3]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	d019      	beq.n	800e7e8 <sqrt+0x54>
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	462b      	mov	r3, r5
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	f7f2 f97a 	bl	8000ab4 <__aeabi_dcmpun>
 800e7c0:	b990      	cbnz	r0, 800e7e8 <sqrt+0x54>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	f7f2 f94b 	bl	8000a64 <__aeabi_dcmplt>
 800e7ce:	b158      	cbz	r0, 800e7e8 <sqrt+0x54>
 800e7d0:	f7ff fdec 	bl	800e3ac <__errno>
 800e7d4:	2321      	movs	r3, #33	; 0x21
 800e7d6:	6003      	str	r3, [r0, #0]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	2300      	movs	r3, #0
 800e7dc:	4610      	mov	r0, r2
 800e7de:	4619      	mov	r1, r3
 800e7e0:	f7f1 fff8 	bl	80007d4 <__aeabi_ddiv>
 800e7e4:	ec41 0b18 	vmov	d8, r0, r1
 800e7e8:	eeb0 0a48 	vmov.f32	s0, s16
 800e7ec:	eef0 0a68 	vmov.f32	s1, s17
 800e7f0:	ecbd 8b02 	vpop	{d8}
 800e7f4:	bd38      	pop	{r3, r4, r5, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20000254 	.word	0x20000254
 800e7fc:	00000000 	.word	0x00000000

0800e800 <__ieee754_pow>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	ed2d 8b06 	vpush	{d8-d10}
 800e808:	b08d      	sub	sp, #52	; 0x34
 800e80a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e80e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e812:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e816:	ea56 0100 	orrs.w	r1, r6, r0
 800e81a:	ec53 2b10 	vmov	r2, r3, d0
 800e81e:	f000 84d1 	beq.w	800f1c4 <__ieee754_pow+0x9c4>
 800e822:	497f      	ldr	r1, [pc, #508]	; (800ea20 <__ieee754_pow+0x220>)
 800e824:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e828:	428c      	cmp	r4, r1
 800e82a:	ee10 8a10 	vmov	r8, s0
 800e82e:	4699      	mov	r9, r3
 800e830:	dc09      	bgt.n	800e846 <__ieee754_pow+0x46>
 800e832:	d103      	bne.n	800e83c <__ieee754_pow+0x3c>
 800e834:	b97a      	cbnz	r2, 800e856 <__ieee754_pow+0x56>
 800e836:	42a6      	cmp	r6, r4
 800e838:	dd02      	ble.n	800e840 <__ieee754_pow+0x40>
 800e83a:	e00c      	b.n	800e856 <__ieee754_pow+0x56>
 800e83c:	428e      	cmp	r6, r1
 800e83e:	dc02      	bgt.n	800e846 <__ieee754_pow+0x46>
 800e840:	428e      	cmp	r6, r1
 800e842:	d110      	bne.n	800e866 <__ieee754_pow+0x66>
 800e844:	b178      	cbz	r0, 800e866 <__ieee754_pow+0x66>
 800e846:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e84a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e84e:	ea54 0308 	orrs.w	r3, r4, r8
 800e852:	f000 84b7 	beq.w	800f1c4 <__ieee754_pow+0x9c4>
 800e856:	4873      	ldr	r0, [pc, #460]	; (800ea24 <__ieee754_pow+0x224>)
 800e858:	b00d      	add	sp, #52	; 0x34
 800e85a:	ecbd 8b06 	vpop	{d8-d10}
 800e85e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e862:	f000 bdb9 	b.w	800f3d8 <nan>
 800e866:	f1b9 0f00 	cmp.w	r9, #0
 800e86a:	da36      	bge.n	800e8da <__ieee754_pow+0xda>
 800e86c:	496e      	ldr	r1, [pc, #440]	; (800ea28 <__ieee754_pow+0x228>)
 800e86e:	428e      	cmp	r6, r1
 800e870:	dc51      	bgt.n	800e916 <__ieee754_pow+0x116>
 800e872:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e876:	428e      	cmp	r6, r1
 800e878:	f340 84af 	ble.w	800f1da <__ieee754_pow+0x9da>
 800e87c:	1531      	asrs	r1, r6, #20
 800e87e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e882:	2914      	cmp	r1, #20
 800e884:	dd0f      	ble.n	800e8a6 <__ieee754_pow+0xa6>
 800e886:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e88a:	fa20 fc01 	lsr.w	ip, r0, r1
 800e88e:	fa0c f101 	lsl.w	r1, ip, r1
 800e892:	4281      	cmp	r1, r0
 800e894:	f040 84a1 	bne.w	800f1da <__ieee754_pow+0x9da>
 800e898:	f00c 0c01 	and.w	ip, ip, #1
 800e89c:	f1cc 0102 	rsb	r1, ip, #2
 800e8a0:	9100      	str	r1, [sp, #0]
 800e8a2:	b180      	cbz	r0, 800e8c6 <__ieee754_pow+0xc6>
 800e8a4:	e059      	b.n	800e95a <__ieee754_pow+0x15a>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d155      	bne.n	800e956 <__ieee754_pow+0x156>
 800e8aa:	f1c1 0114 	rsb	r1, r1, #20
 800e8ae:	fa46 fc01 	asr.w	ip, r6, r1
 800e8b2:	fa0c f101 	lsl.w	r1, ip, r1
 800e8b6:	42b1      	cmp	r1, r6
 800e8b8:	f040 848c 	bne.w	800f1d4 <__ieee754_pow+0x9d4>
 800e8bc:	f00c 0c01 	and.w	ip, ip, #1
 800e8c0:	f1cc 0102 	rsb	r1, ip, #2
 800e8c4:	9100      	str	r1, [sp, #0]
 800e8c6:	4959      	ldr	r1, [pc, #356]	; (800ea2c <__ieee754_pow+0x22c>)
 800e8c8:	428e      	cmp	r6, r1
 800e8ca:	d12d      	bne.n	800e928 <__ieee754_pow+0x128>
 800e8cc:	2f00      	cmp	r7, #0
 800e8ce:	da79      	bge.n	800e9c4 <__ieee754_pow+0x1c4>
 800e8d0:	4956      	ldr	r1, [pc, #344]	; (800ea2c <__ieee754_pow+0x22c>)
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	f7f1 ff7e 	bl	80007d4 <__aeabi_ddiv>
 800e8d8:	e016      	b.n	800e908 <__ieee754_pow+0x108>
 800e8da:	2100      	movs	r1, #0
 800e8dc:	9100      	str	r1, [sp, #0]
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d13b      	bne.n	800e95a <__ieee754_pow+0x15a>
 800e8e2:	494f      	ldr	r1, [pc, #316]	; (800ea20 <__ieee754_pow+0x220>)
 800e8e4:	428e      	cmp	r6, r1
 800e8e6:	d1ee      	bne.n	800e8c6 <__ieee754_pow+0xc6>
 800e8e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e8ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e8f0:	ea53 0308 	orrs.w	r3, r3, r8
 800e8f4:	f000 8466 	beq.w	800f1c4 <__ieee754_pow+0x9c4>
 800e8f8:	4b4d      	ldr	r3, [pc, #308]	; (800ea30 <__ieee754_pow+0x230>)
 800e8fa:	429c      	cmp	r4, r3
 800e8fc:	dd0d      	ble.n	800e91a <__ieee754_pow+0x11a>
 800e8fe:	2f00      	cmp	r7, #0
 800e900:	f280 8464 	bge.w	800f1cc <__ieee754_pow+0x9cc>
 800e904:	2000      	movs	r0, #0
 800e906:	2100      	movs	r1, #0
 800e908:	ec41 0b10 	vmov	d0, r0, r1
 800e90c:	b00d      	add	sp, #52	; 0x34
 800e90e:	ecbd 8b06 	vpop	{d8-d10}
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	2102      	movs	r1, #2
 800e918:	e7e0      	b.n	800e8dc <__ieee754_pow+0xdc>
 800e91a:	2f00      	cmp	r7, #0
 800e91c:	daf2      	bge.n	800e904 <__ieee754_pow+0x104>
 800e91e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e922:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e926:	e7ef      	b.n	800e908 <__ieee754_pow+0x108>
 800e928:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e92c:	d104      	bne.n	800e938 <__ieee754_pow+0x138>
 800e92e:	4610      	mov	r0, r2
 800e930:	4619      	mov	r1, r3
 800e932:	f7f1 fe25 	bl	8000580 <__aeabi_dmul>
 800e936:	e7e7      	b.n	800e908 <__ieee754_pow+0x108>
 800e938:	493e      	ldr	r1, [pc, #248]	; (800ea34 <__ieee754_pow+0x234>)
 800e93a:	428f      	cmp	r7, r1
 800e93c:	d10d      	bne.n	800e95a <__ieee754_pow+0x15a>
 800e93e:	f1b9 0f00 	cmp.w	r9, #0
 800e942:	db0a      	blt.n	800e95a <__ieee754_pow+0x15a>
 800e944:	ec43 2b10 	vmov	d0, r2, r3
 800e948:	b00d      	add	sp, #52	; 0x34
 800e94a:	ecbd 8b06 	vpop	{d8-d10}
 800e94e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e952:	f000 bc77 	b.w	800f244 <__ieee754_sqrt>
 800e956:	2100      	movs	r1, #0
 800e958:	9100      	str	r1, [sp, #0]
 800e95a:	ec43 2b10 	vmov	d0, r2, r3
 800e95e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e962:	f000 fd23 	bl	800f3ac <fabs>
 800e966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e96a:	ec51 0b10 	vmov	r0, r1, d0
 800e96e:	f1b8 0f00 	cmp.w	r8, #0
 800e972:	d12a      	bne.n	800e9ca <__ieee754_pow+0x1ca>
 800e974:	b12c      	cbz	r4, 800e982 <__ieee754_pow+0x182>
 800e976:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800ea2c <__ieee754_pow+0x22c>
 800e97a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e97e:	45e6      	cmp	lr, ip
 800e980:	d123      	bne.n	800e9ca <__ieee754_pow+0x1ca>
 800e982:	2f00      	cmp	r7, #0
 800e984:	da05      	bge.n	800e992 <__ieee754_pow+0x192>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	2000      	movs	r0, #0
 800e98c:	4927      	ldr	r1, [pc, #156]	; (800ea2c <__ieee754_pow+0x22c>)
 800e98e:	f7f1 ff21 	bl	80007d4 <__aeabi_ddiv>
 800e992:	f1b9 0f00 	cmp.w	r9, #0
 800e996:	dab7      	bge.n	800e908 <__ieee754_pow+0x108>
 800e998:	9b00      	ldr	r3, [sp, #0]
 800e99a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e99e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9a2:	4323      	orrs	r3, r4
 800e9a4:	d108      	bne.n	800e9b8 <__ieee754_pow+0x1b8>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	f7f1 fc2f 	bl	8000210 <__aeabi_dsub>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	e78d      	b.n	800e8d4 <__ieee754_pow+0xd4>
 800e9b8:	9b00      	ldr	r3, [sp, #0]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d1a4      	bne.n	800e908 <__ieee754_pow+0x108>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	e79e      	b.n	800e908 <__ieee754_pow+0x108>
 800e9ca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e9ce:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e9d2:	950a      	str	r5, [sp, #40]	; 0x28
 800e9d4:	9d00      	ldr	r5, [sp, #0]
 800e9d6:	46ac      	mov	ip, r5
 800e9d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e9da:	ea5c 0505 	orrs.w	r5, ip, r5
 800e9de:	d0e4      	beq.n	800e9aa <__ieee754_pow+0x1aa>
 800e9e0:	4b15      	ldr	r3, [pc, #84]	; (800ea38 <__ieee754_pow+0x238>)
 800e9e2:	429e      	cmp	r6, r3
 800e9e4:	f340 80fc 	ble.w	800ebe0 <__ieee754_pow+0x3e0>
 800e9e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e9ec:	429e      	cmp	r6, r3
 800e9ee:	4b10      	ldr	r3, [pc, #64]	; (800ea30 <__ieee754_pow+0x230>)
 800e9f0:	dd07      	ble.n	800ea02 <__ieee754_pow+0x202>
 800e9f2:	429c      	cmp	r4, r3
 800e9f4:	dc0a      	bgt.n	800ea0c <__ieee754_pow+0x20c>
 800e9f6:	2f00      	cmp	r7, #0
 800e9f8:	da84      	bge.n	800e904 <__ieee754_pow+0x104>
 800e9fa:	a307      	add	r3, pc, #28	; (adr r3, 800ea18 <__ieee754_pow+0x218>)
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	e795      	b.n	800e92e <__ieee754_pow+0x12e>
 800ea02:	429c      	cmp	r4, r3
 800ea04:	dbf7      	blt.n	800e9f6 <__ieee754_pow+0x1f6>
 800ea06:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <__ieee754_pow+0x22c>)
 800ea08:	429c      	cmp	r4, r3
 800ea0a:	dd17      	ble.n	800ea3c <__ieee754_pow+0x23c>
 800ea0c:	2f00      	cmp	r7, #0
 800ea0e:	dcf4      	bgt.n	800e9fa <__ieee754_pow+0x1fa>
 800ea10:	e778      	b.n	800e904 <__ieee754_pow+0x104>
 800ea12:	bf00      	nop
 800ea14:	f3af 8000 	nop.w
 800ea18:	8800759c 	.word	0x8800759c
 800ea1c:	7e37e43c 	.word	0x7e37e43c
 800ea20:	7ff00000 	.word	0x7ff00000
 800ea24:	0800fa98 	.word	0x0800fa98
 800ea28:	433fffff 	.word	0x433fffff
 800ea2c:	3ff00000 	.word	0x3ff00000
 800ea30:	3fefffff 	.word	0x3fefffff
 800ea34:	3fe00000 	.word	0x3fe00000
 800ea38:	41e00000 	.word	0x41e00000
 800ea3c:	4b64      	ldr	r3, [pc, #400]	; (800ebd0 <__ieee754_pow+0x3d0>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f7f1 fbe6 	bl	8000210 <__aeabi_dsub>
 800ea44:	a356      	add	r3, pc, #344	; (adr r3, 800eba0 <__ieee754_pow+0x3a0>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	f7f1 fd97 	bl	8000580 <__aeabi_dmul>
 800ea52:	a355      	add	r3, pc, #340	; (adr r3, 800eba8 <__ieee754_pow+0x3a8>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	4629      	mov	r1, r5
 800ea60:	f7f1 fd8e 	bl	8000580 <__aeabi_dmul>
 800ea64:	4b5b      	ldr	r3, [pc, #364]	; (800ebd4 <__ieee754_pow+0x3d4>)
 800ea66:	4682      	mov	sl, r0
 800ea68:	468b      	mov	fp, r1
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	4629      	mov	r1, r5
 800ea70:	f7f1 fd86 	bl	8000580 <__aeabi_dmul>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	a14d      	add	r1, pc, #308	; (adr r1, 800ebb0 <__ieee754_pow+0x3b0>)
 800ea7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea7e:	f7f1 fbc7 	bl	8000210 <__aeabi_dsub>
 800ea82:	4622      	mov	r2, r4
 800ea84:	462b      	mov	r3, r5
 800ea86:	f7f1 fd7b 	bl	8000580 <__aeabi_dmul>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	2000      	movs	r0, #0
 800ea90:	4951      	ldr	r1, [pc, #324]	; (800ebd8 <__ieee754_pow+0x3d8>)
 800ea92:	f7f1 fbbd 	bl	8000210 <__aeabi_dsub>
 800ea96:	4622      	mov	r2, r4
 800ea98:	4680      	mov	r8, r0
 800ea9a:	4689      	mov	r9, r1
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f1 fd6d 	bl	8000580 <__aeabi_dmul>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4640      	mov	r0, r8
 800eaac:	4649      	mov	r1, r9
 800eaae:	f7f1 fd67 	bl	8000580 <__aeabi_dmul>
 800eab2:	a341      	add	r3, pc, #260	; (adr r3, 800ebb8 <__ieee754_pow+0x3b8>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fd62 	bl	8000580 <__aeabi_dmul>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	4650      	mov	r0, sl
 800eac2:	4659      	mov	r1, fp
 800eac4:	f7f1 fba4 	bl	8000210 <__aeabi_dsub>
 800eac8:	4602      	mov	r2, r0
 800eaca:	460b      	mov	r3, r1
 800eacc:	4680      	mov	r8, r0
 800eace:	4689      	mov	r9, r1
 800ead0:	4630      	mov	r0, r6
 800ead2:	4639      	mov	r1, r7
 800ead4:	f7f1 fb9e 	bl	8000214 <__adddf3>
 800ead8:	2400      	movs	r4, #0
 800eada:	4632      	mov	r2, r6
 800eadc:	463b      	mov	r3, r7
 800eade:	4620      	mov	r0, r4
 800eae0:	460d      	mov	r5, r1
 800eae2:	f7f1 fb95 	bl	8000210 <__aeabi_dsub>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4640      	mov	r0, r8
 800eaec:	4649      	mov	r1, r9
 800eaee:	f7f1 fb8f 	bl	8000210 <__aeabi_dsub>
 800eaf2:	9b00      	ldr	r3, [sp, #0]
 800eaf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	4682      	mov	sl, r0
 800eafc:	468b      	mov	fp, r1
 800eafe:	f040 81f1 	bne.w	800eee4 <__ieee754_pow+0x6e4>
 800eb02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ebc0 <__ieee754_pow+0x3c0>
 800eb06:	eeb0 8a47 	vmov.f32	s16, s14
 800eb0a:	eef0 8a67 	vmov.f32	s17, s15
 800eb0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb12:	2600      	movs	r6, #0
 800eb14:	4632      	mov	r2, r6
 800eb16:	463b      	mov	r3, r7
 800eb18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb1c:	f7f1 fb78 	bl	8000210 <__aeabi_dsub>
 800eb20:	4622      	mov	r2, r4
 800eb22:	462b      	mov	r3, r5
 800eb24:	f7f1 fd2c 	bl	8000580 <__aeabi_dmul>
 800eb28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	4689      	mov	r9, r1
 800eb30:	4650      	mov	r0, sl
 800eb32:	4659      	mov	r1, fp
 800eb34:	f7f1 fd24 	bl	8000580 <__aeabi_dmul>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	4649      	mov	r1, r9
 800eb40:	f7f1 fb68 	bl	8000214 <__adddf3>
 800eb44:	4632      	mov	r2, r6
 800eb46:	463b      	mov	r3, r7
 800eb48:	4680      	mov	r8, r0
 800eb4a:	4689      	mov	r9, r1
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	4629      	mov	r1, r5
 800eb50:	f7f1 fd16 	bl	8000580 <__aeabi_dmul>
 800eb54:	460b      	mov	r3, r1
 800eb56:	4604      	mov	r4, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	4640      	mov	r0, r8
 800eb60:	f7f1 fb58 	bl	8000214 <__adddf3>
 800eb64:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <__ieee754_pow+0x3dc>)
 800eb66:	4299      	cmp	r1, r3
 800eb68:	ec45 4b19 	vmov	d9, r4, r5
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	460f      	mov	r7, r1
 800eb70:	468b      	mov	fp, r1
 800eb72:	f340 82fe 	ble.w	800f172 <__ieee754_pow+0x972>
 800eb76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eb7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eb7e:	4303      	orrs	r3, r0
 800eb80:	f000 81f0 	beq.w	800ef64 <__ieee754_pow+0x764>
 800eb84:	a310      	add	r3, pc, #64	; (adr r3, 800ebc8 <__ieee754_pow+0x3c8>)
 800eb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8a:	ec51 0b18 	vmov	r0, r1, d8
 800eb8e:	f7f1 fcf7 	bl	8000580 <__aeabi_dmul>
 800eb92:	a30d      	add	r3, pc, #52	; (adr r3, 800ebc8 <__ieee754_pow+0x3c8>)
 800eb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb98:	e6cb      	b.n	800e932 <__ieee754_pow+0x132>
 800eb9a:	bf00      	nop
 800eb9c:	f3af 8000 	nop.w
 800eba0:	60000000 	.word	0x60000000
 800eba4:	3ff71547 	.word	0x3ff71547
 800eba8:	f85ddf44 	.word	0xf85ddf44
 800ebac:	3e54ae0b 	.word	0x3e54ae0b
 800ebb0:	55555555 	.word	0x55555555
 800ebb4:	3fd55555 	.word	0x3fd55555
 800ebb8:	652b82fe 	.word	0x652b82fe
 800ebbc:	3ff71547 	.word	0x3ff71547
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	bff00000 	.word	0xbff00000
 800ebc8:	8800759c 	.word	0x8800759c
 800ebcc:	7e37e43c 	.word	0x7e37e43c
 800ebd0:	3ff00000 	.word	0x3ff00000
 800ebd4:	3fd00000 	.word	0x3fd00000
 800ebd8:	3fe00000 	.word	0x3fe00000
 800ebdc:	408fffff 	.word	0x408fffff
 800ebe0:	4bd7      	ldr	r3, [pc, #860]	; (800ef40 <__ieee754_pow+0x740>)
 800ebe2:	ea03 0309 	and.w	r3, r3, r9
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	b92b      	cbnz	r3, 800ebf6 <__ieee754_pow+0x3f6>
 800ebea:	4bd6      	ldr	r3, [pc, #856]	; (800ef44 <__ieee754_pow+0x744>)
 800ebec:	f7f1 fcc8 	bl	8000580 <__aeabi_dmul>
 800ebf0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	1523      	asrs	r3, r4, #20
 800ebf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ebfc:	4413      	add	r3, r2
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	4bd1      	ldr	r3, [pc, #836]	; (800ef48 <__ieee754_pow+0x748>)
 800ec02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ec06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ec0a:	429c      	cmp	r4, r3
 800ec0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec10:	dd08      	ble.n	800ec24 <__ieee754_pow+0x424>
 800ec12:	4bce      	ldr	r3, [pc, #824]	; (800ef4c <__ieee754_pow+0x74c>)
 800ec14:	429c      	cmp	r4, r3
 800ec16:	f340 8163 	ble.w	800eee0 <__ieee754_pow+0x6e0>
 800ec1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ec24:	2400      	movs	r4, #0
 800ec26:	00e3      	lsls	r3, r4, #3
 800ec28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec2a:	4bc9      	ldr	r3, [pc, #804]	; (800ef50 <__ieee754_pow+0x750>)
 800ec2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec30:	ed93 7b00 	vldr	d7, [r3]
 800ec34:	4629      	mov	r1, r5
 800ec36:	ec53 2b17 	vmov	r2, r3, d7
 800ec3a:	eeb0 8a47 	vmov.f32	s16, s14
 800ec3e:	eef0 8a67 	vmov.f32	s17, s15
 800ec42:	4682      	mov	sl, r0
 800ec44:	f7f1 fae4 	bl	8000210 <__aeabi_dsub>
 800ec48:	4652      	mov	r2, sl
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	462b      	mov	r3, r5
 800ec50:	ec51 0b18 	vmov	r0, r1, d8
 800ec54:	f7f1 fade 	bl	8000214 <__adddf3>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	49bd      	ldr	r1, [pc, #756]	; (800ef54 <__ieee754_pow+0x754>)
 800ec60:	f7f1 fdb8 	bl	80007d4 <__aeabi_ddiv>
 800ec64:	ec41 0b19 	vmov	d9, r0, r1
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4639      	mov	r1, r7
 800ec70:	f7f1 fc86 	bl	8000580 <__aeabi_dmul>
 800ec74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ec80:	2300      	movs	r3, #0
 800ec82:	9304      	str	r3, [sp, #16]
 800ec84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ec88:	46ab      	mov	fp, r5
 800ec8a:	106d      	asrs	r5, r5, #1
 800ec8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec94:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec98:	2200      	movs	r2, #0
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	4614      	mov	r4, r2
 800eca0:	461d      	mov	r5, r3
 800eca2:	f7f1 fc6d 	bl	8000580 <__aeabi_dmul>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	4630      	mov	r0, r6
 800ecac:	4639      	mov	r1, r7
 800ecae:	f7f1 faaf 	bl	8000210 <__aeabi_dsub>
 800ecb2:	ec53 2b18 	vmov	r2, r3, d8
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	460f      	mov	r7, r1
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	f7f1 faa7 	bl	8000210 <__aeabi_dsub>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4650      	mov	r0, sl
 800ecc8:	4659      	mov	r1, fp
 800ecca:	f7f1 faa1 	bl	8000210 <__aeabi_dsub>
 800ecce:	4642      	mov	r2, r8
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	f7f1 fc55 	bl	8000580 <__aeabi_dmul>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4639      	mov	r1, r7
 800ecde:	f7f1 fa97 	bl	8000210 <__aeabi_dsub>
 800ece2:	ec53 2b19 	vmov	r2, r3, d9
 800ece6:	f7f1 fc4b 	bl	8000580 <__aeabi_dmul>
 800ecea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecee:	ec41 0b18 	vmov	d8, r0, r1
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7f1 fc43 	bl	8000580 <__aeabi_dmul>
 800ecfa:	a37d      	add	r3, pc, #500	; (adr r3, 800eef0 <__ieee754_pow+0x6f0>)
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	4604      	mov	r4, r0
 800ed02:	460d      	mov	r5, r1
 800ed04:	f7f1 fc3c 	bl	8000580 <__aeabi_dmul>
 800ed08:	a37b      	add	r3, pc, #492	; (adr r3, 800eef8 <__ieee754_pow+0x6f8>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fa81 	bl	8000214 <__adddf3>
 800ed12:	4622      	mov	r2, r4
 800ed14:	462b      	mov	r3, r5
 800ed16:	f7f1 fc33 	bl	8000580 <__aeabi_dmul>
 800ed1a:	a379      	add	r3, pc, #484	; (adr r3, 800ef00 <__ieee754_pow+0x700>)
 800ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed20:	f7f1 fa78 	bl	8000214 <__adddf3>
 800ed24:	4622      	mov	r2, r4
 800ed26:	462b      	mov	r3, r5
 800ed28:	f7f1 fc2a 	bl	8000580 <__aeabi_dmul>
 800ed2c:	a376      	add	r3, pc, #472	; (adr r3, 800ef08 <__ieee754_pow+0x708>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 fa6f 	bl	8000214 <__adddf3>
 800ed36:	4622      	mov	r2, r4
 800ed38:	462b      	mov	r3, r5
 800ed3a:	f7f1 fc21 	bl	8000580 <__aeabi_dmul>
 800ed3e:	a374      	add	r3, pc, #464	; (adr r3, 800ef10 <__ieee754_pow+0x710>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 fa66 	bl	8000214 <__adddf3>
 800ed48:	4622      	mov	r2, r4
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	f7f1 fc18 	bl	8000580 <__aeabi_dmul>
 800ed50:	a371      	add	r3, pc, #452	; (adr r3, 800ef18 <__ieee754_pow+0x718>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fa5d 	bl	8000214 <__adddf3>
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	460f      	mov	r7, r1
 800ed60:	462b      	mov	r3, r5
 800ed62:	4620      	mov	r0, r4
 800ed64:	4629      	mov	r1, r5
 800ed66:	f7f1 fc0b 	bl	8000580 <__aeabi_dmul>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4630      	mov	r0, r6
 800ed70:	4639      	mov	r1, r7
 800ed72:	f7f1 fc05 	bl	8000580 <__aeabi_dmul>
 800ed76:	4642      	mov	r2, r8
 800ed78:	4604      	mov	r4, r0
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	464b      	mov	r3, r9
 800ed7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed82:	f7f1 fa47 	bl	8000214 <__adddf3>
 800ed86:	ec53 2b18 	vmov	r2, r3, d8
 800ed8a:	f7f1 fbf9 	bl	8000580 <__aeabi_dmul>
 800ed8e:	4622      	mov	r2, r4
 800ed90:	462b      	mov	r3, r5
 800ed92:	f7f1 fa3f 	bl	8000214 <__adddf3>
 800ed96:	4642      	mov	r2, r8
 800ed98:	4682      	mov	sl, r0
 800ed9a:	468b      	mov	fp, r1
 800ed9c:	464b      	mov	r3, r9
 800ed9e:	4640      	mov	r0, r8
 800eda0:	4649      	mov	r1, r9
 800eda2:	f7f1 fbed 	bl	8000580 <__aeabi_dmul>
 800eda6:	4b6c      	ldr	r3, [pc, #432]	; (800ef58 <__ieee754_pow+0x758>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	f7f1 fa31 	bl	8000214 <__adddf3>
 800edb2:	4652      	mov	r2, sl
 800edb4:	465b      	mov	r3, fp
 800edb6:	f7f1 fa2d 	bl	8000214 <__adddf3>
 800edba:	9c04      	ldr	r4, [sp, #16]
 800edbc:	460d      	mov	r5, r1
 800edbe:	4622      	mov	r2, r4
 800edc0:	460b      	mov	r3, r1
 800edc2:	4640      	mov	r0, r8
 800edc4:	4649      	mov	r1, r9
 800edc6:	f7f1 fbdb 	bl	8000580 <__aeabi_dmul>
 800edca:	4b63      	ldr	r3, [pc, #396]	; (800ef58 <__ieee754_pow+0x758>)
 800edcc:	4680      	mov	r8, r0
 800edce:	4689      	mov	r9, r1
 800edd0:	2200      	movs	r2, #0
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	f7f1 fa1b 	bl	8000210 <__aeabi_dsub>
 800edda:	4632      	mov	r2, r6
 800eddc:	463b      	mov	r3, r7
 800edde:	f7f1 fa17 	bl	8000210 <__aeabi_dsub>
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	4650      	mov	r0, sl
 800ede8:	4659      	mov	r1, fp
 800edea:	f7f1 fa11 	bl	8000210 <__aeabi_dsub>
 800edee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edf2:	f7f1 fbc5 	bl	8000580 <__aeabi_dmul>
 800edf6:	4622      	mov	r2, r4
 800edf8:	4606      	mov	r6, r0
 800edfa:	460f      	mov	r7, r1
 800edfc:	462b      	mov	r3, r5
 800edfe:	ec51 0b18 	vmov	r0, r1, d8
 800ee02:	f7f1 fbbd 	bl	8000580 <__aeabi_dmul>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	f7f1 fa01 	bl	8000214 <__adddf3>
 800ee12:	4606      	mov	r6, r0
 800ee14:	460f      	mov	r7, r1
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	f7f1 f9f9 	bl	8000214 <__adddf3>
 800ee22:	9c04      	ldr	r4, [sp, #16]
 800ee24:	a33e      	add	r3, pc, #248	; (adr r3, 800ef20 <__ieee754_pow+0x720>)
 800ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	f7f1 fba7 	bl	8000580 <__aeabi_dmul>
 800ee32:	4642      	mov	r2, r8
 800ee34:	ec41 0b18 	vmov	d8, r0, r1
 800ee38:	464b      	mov	r3, r9
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	f7f1 f9e7 	bl	8000210 <__aeabi_dsub>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4630      	mov	r0, r6
 800ee48:	4639      	mov	r1, r7
 800ee4a:	f7f1 f9e1 	bl	8000210 <__aeabi_dsub>
 800ee4e:	a336      	add	r3, pc, #216	; (adr r3, 800ef28 <__ieee754_pow+0x728>)
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	f7f1 fb94 	bl	8000580 <__aeabi_dmul>
 800ee58:	a335      	add	r3, pc, #212	; (adr r3, 800ef30 <__ieee754_pow+0x730>)
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	4606      	mov	r6, r0
 800ee60:	460f      	mov	r7, r1
 800ee62:	4620      	mov	r0, r4
 800ee64:	4629      	mov	r1, r5
 800ee66:	f7f1 fb8b 	bl	8000580 <__aeabi_dmul>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7f1 f9cf 	bl	8000214 <__adddf3>
 800ee76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee78:	4b38      	ldr	r3, [pc, #224]	; (800ef5c <__ieee754_pow+0x75c>)
 800ee7a:	4413      	add	r3, r2
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 f9c8 	bl	8000214 <__adddf3>
 800ee84:	4682      	mov	sl, r0
 800ee86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee88:	468b      	mov	fp, r1
 800ee8a:	f7f1 fb0f 	bl	80004ac <__aeabi_i2d>
 800ee8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee90:	4b33      	ldr	r3, [pc, #204]	; (800ef60 <__ieee754_pow+0x760>)
 800ee92:	4413      	add	r3, r2
 800ee94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee98:	4606      	mov	r6, r0
 800ee9a:	460f      	mov	r7, r1
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	465b      	mov	r3, fp
 800eea0:	ec51 0b18 	vmov	r0, r1, d8
 800eea4:	f7f1 f9b6 	bl	8000214 <__adddf3>
 800eea8:	4642      	mov	r2, r8
 800eeaa:	464b      	mov	r3, r9
 800eeac:	f7f1 f9b2 	bl	8000214 <__adddf3>
 800eeb0:	4632      	mov	r2, r6
 800eeb2:	463b      	mov	r3, r7
 800eeb4:	f7f1 f9ae 	bl	8000214 <__adddf3>
 800eeb8:	9c04      	ldr	r4, [sp, #16]
 800eeba:	4632      	mov	r2, r6
 800eebc:	463b      	mov	r3, r7
 800eebe:	4620      	mov	r0, r4
 800eec0:	460d      	mov	r5, r1
 800eec2:	f7f1 f9a5 	bl	8000210 <__aeabi_dsub>
 800eec6:	4642      	mov	r2, r8
 800eec8:	464b      	mov	r3, r9
 800eeca:	f7f1 f9a1 	bl	8000210 <__aeabi_dsub>
 800eece:	ec53 2b18 	vmov	r2, r3, d8
 800eed2:	f7f1 f99d 	bl	8000210 <__aeabi_dsub>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4650      	mov	r0, sl
 800eedc:	4659      	mov	r1, fp
 800eede:	e606      	b.n	800eaee <__ieee754_pow+0x2ee>
 800eee0:	2401      	movs	r4, #1
 800eee2:	e6a0      	b.n	800ec26 <__ieee754_pow+0x426>
 800eee4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ef38 <__ieee754_pow+0x738>
 800eee8:	e60d      	b.n	800eb06 <__ieee754_pow+0x306>
 800eeea:	bf00      	nop
 800eeec:	f3af 8000 	nop.w
 800eef0:	4a454eef 	.word	0x4a454eef
 800eef4:	3fca7e28 	.word	0x3fca7e28
 800eef8:	93c9db65 	.word	0x93c9db65
 800eefc:	3fcd864a 	.word	0x3fcd864a
 800ef00:	a91d4101 	.word	0xa91d4101
 800ef04:	3fd17460 	.word	0x3fd17460
 800ef08:	518f264d 	.word	0x518f264d
 800ef0c:	3fd55555 	.word	0x3fd55555
 800ef10:	db6fabff 	.word	0xdb6fabff
 800ef14:	3fdb6db6 	.word	0x3fdb6db6
 800ef18:	33333303 	.word	0x33333303
 800ef1c:	3fe33333 	.word	0x3fe33333
 800ef20:	e0000000 	.word	0xe0000000
 800ef24:	3feec709 	.word	0x3feec709
 800ef28:	dc3a03fd 	.word	0xdc3a03fd
 800ef2c:	3feec709 	.word	0x3feec709
 800ef30:	145b01f5 	.word	0x145b01f5
 800ef34:	be3e2fe0 	.word	0xbe3e2fe0
 800ef38:	00000000 	.word	0x00000000
 800ef3c:	3ff00000 	.word	0x3ff00000
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	43400000 	.word	0x43400000
 800ef48:	0003988e 	.word	0x0003988e
 800ef4c:	000bb679 	.word	0x000bb679
 800ef50:	0800faa0 	.word	0x0800faa0
 800ef54:	3ff00000 	.word	0x3ff00000
 800ef58:	40080000 	.word	0x40080000
 800ef5c:	0800fac0 	.word	0x0800fac0
 800ef60:	0800fab0 	.word	0x0800fab0
 800ef64:	a3b5      	add	r3, pc, #724	; (adr r3, 800f23c <__ieee754_pow+0xa3c>)
 800ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6a:	4640      	mov	r0, r8
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	f7f1 f951 	bl	8000214 <__adddf3>
 800ef72:	4622      	mov	r2, r4
 800ef74:	ec41 0b1a 	vmov	d10, r0, r1
 800ef78:	462b      	mov	r3, r5
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	4639      	mov	r1, r7
 800ef7e:	f7f1 f947 	bl	8000210 <__aeabi_dsub>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	ec51 0b1a 	vmov	r0, r1, d10
 800ef8a:	f7f1 fd89 	bl	8000aa0 <__aeabi_dcmpgt>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f47f adf8 	bne.w	800eb84 <__ieee754_pow+0x384>
 800ef94:	4aa4      	ldr	r2, [pc, #656]	; (800f228 <__ieee754_pow+0xa28>)
 800ef96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	f340 810b 	ble.w	800f1b6 <__ieee754_pow+0x9b6>
 800efa0:	151b      	asrs	r3, r3, #20
 800efa2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800efa6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800efaa:	fa4a f303 	asr.w	r3, sl, r3
 800efae:	445b      	add	r3, fp
 800efb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800efb4:	4e9d      	ldr	r6, [pc, #628]	; (800f22c <__ieee754_pow+0xa2c>)
 800efb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800efba:	4116      	asrs	r6, r2
 800efbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800efc0:	2000      	movs	r0, #0
 800efc2:	ea23 0106 	bic.w	r1, r3, r6
 800efc6:	f1c2 0214 	rsb	r2, r2, #20
 800efca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800efce:	fa4a fa02 	asr.w	sl, sl, r2
 800efd2:	f1bb 0f00 	cmp.w	fp, #0
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	4620      	mov	r0, r4
 800efdc:	4629      	mov	r1, r5
 800efde:	bfb8      	it	lt
 800efe0:	f1ca 0a00 	rsblt	sl, sl, #0
 800efe4:	f7f1 f914 	bl	8000210 <__aeabi_dsub>
 800efe8:	ec41 0b19 	vmov	d9, r0, r1
 800efec:	4642      	mov	r2, r8
 800efee:	464b      	mov	r3, r9
 800eff0:	ec51 0b19 	vmov	r0, r1, d9
 800eff4:	f7f1 f90e 	bl	8000214 <__adddf3>
 800eff8:	2400      	movs	r4, #0
 800effa:	a379      	add	r3, pc, #484	; (adr r3, 800f1e0 <__ieee754_pow+0x9e0>)
 800effc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f000:	4620      	mov	r0, r4
 800f002:	460d      	mov	r5, r1
 800f004:	f7f1 fabc 	bl	8000580 <__aeabi_dmul>
 800f008:	ec53 2b19 	vmov	r2, r3, d9
 800f00c:	4606      	mov	r6, r0
 800f00e:	460f      	mov	r7, r1
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	f7f1 f8fc 	bl	8000210 <__aeabi_dsub>
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	4640      	mov	r0, r8
 800f01e:	4649      	mov	r1, r9
 800f020:	f7f1 f8f6 	bl	8000210 <__aeabi_dsub>
 800f024:	a370      	add	r3, pc, #448	; (adr r3, 800f1e8 <__ieee754_pow+0x9e8>)
 800f026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02a:	f7f1 faa9 	bl	8000580 <__aeabi_dmul>
 800f02e:	a370      	add	r3, pc, #448	; (adr r3, 800f1f0 <__ieee754_pow+0x9f0>)
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	4680      	mov	r8, r0
 800f036:	4689      	mov	r9, r1
 800f038:	4620      	mov	r0, r4
 800f03a:	4629      	mov	r1, r5
 800f03c:	f7f1 faa0 	bl	8000580 <__aeabi_dmul>
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4640      	mov	r0, r8
 800f046:	4649      	mov	r1, r9
 800f048:	f7f1 f8e4 	bl	8000214 <__adddf3>
 800f04c:	4604      	mov	r4, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 f8dc 	bl	8000214 <__adddf3>
 800f05c:	4632      	mov	r2, r6
 800f05e:	463b      	mov	r3, r7
 800f060:	4680      	mov	r8, r0
 800f062:	4689      	mov	r9, r1
 800f064:	f7f1 f8d4 	bl	8000210 <__aeabi_dsub>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 f8ce 	bl	8000210 <__aeabi_dsub>
 800f074:	4642      	mov	r2, r8
 800f076:	4606      	mov	r6, r0
 800f078:	460f      	mov	r7, r1
 800f07a:	464b      	mov	r3, r9
 800f07c:	4640      	mov	r0, r8
 800f07e:	4649      	mov	r1, r9
 800f080:	f7f1 fa7e 	bl	8000580 <__aeabi_dmul>
 800f084:	a35c      	add	r3, pc, #368	; (adr r3, 800f1f8 <__ieee754_pow+0x9f8>)
 800f086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08a:	4604      	mov	r4, r0
 800f08c:	460d      	mov	r5, r1
 800f08e:	f7f1 fa77 	bl	8000580 <__aeabi_dmul>
 800f092:	a35b      	add	r3, pc, #364	; (adr r3, 800f200 <__ieee754_pow+0xa00>)
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	f7f1 f8ba 	bl	8000210 <__aeabi_dsub>
 800f09c:	4622      	mov	r2, r4
 800f09e:	462b      	mov	r3, r5
 800f0a0:	f7f1 fa6e 	bl	8000580 <__aeabi_dmul>
 800f0a4:	a358      	add	r3, pc, #352	; (adr r3, 800f208 <__ieee754_pow+0xa08>)
 800f0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0aa:	f7f1 f8b3 	bl	8000214 <__adddf3>
 800f0ae:	4622      	mov	r2, r4
 800f0b0:	462b      	mov	r3, r5
 800f0b2:	f7f1 fa65 	bl	8000580 <__aeabi_dmul>
 800f0b6:	a356      	add	r3, pc, #344	; (adr r3, 800f210 <__ieee754_pow+0xa10>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	f7f1 f8a8 	bl	8000210 <__aeabi_dsub>
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	462b      	mov	r3, r5
 800f0c4:	f7f1 fa5c 	bl	8000580 <__aeabi_dmul>
 800f0c8:	a353      	add	r3, pc, #332	; (adr r3, 800f218 <__ieee754_pow+0xa18>)
 800f0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ce:	f7f1 f8a1 	bl	8000214 <__adddf3>
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	462b      	mov	r3, r5
 800f0d6:	f7f1 fa53 	bl	8000580 <__aeabi_dmul>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 f895 	bl	8000210 <__aeabi_dsub>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	f7f1 fa45 	bl	8000580 <__aeabi_dmul>
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	ec41 0b19 	vmov	d9, r0, r1
 800f0fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f100:	4620      	mov	r0, r4
 800f102:	4629      	mov	r1, r5
 800f104:	f7f1 f884 	bl	8000210 <__aeabi_dsub>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	ec51 0b19 	vmov	r0, r1, d9
 800f110:	f7f1 fb60 	bl	80007d4 <__aeabi_ddiv>
 800f114:	4632      	mov	r2, r6
 800f116:	4604      	mov	r4, r0
 800f118:	460d      	mov	r5, r1
 800f11a:	463b      	mov	r3, r7
 800f11c:	4640      	mov	r0, r8
 800f11e:	4649      	mov	r1, r9
 800f120:	f7f1 fa2e 	bl	8000580 <__aeabi_dmul>
 800f124:	4632      	mov	r2, r6
 800f126:	463b      	mov	r3, r7
 800f128:	f7f1 f874 	bl	8000214 <__adddf3>
 800f12c:	4602      	mov	r2, r0
 800f12e:	460b      	mov	r3, r1
 800f130:	4620      	mov	r0, r4
 800f132:	4629      	mov	r1, r5
 800f134:	f7f1 f86c 	bl	8000210 <__aeabi_dsub>
 800f138:	4642      	mov	r2, r8
 800f13a:	464b      	mov	r3, r9
 800f13c:	f7f1 f868 	bl	8000210 <__aeabi_dsub>
 800f140:	460b      	mov	r3, r1
 800f142:	4602      	mov	r2, r0
 800f144:	493a      	ldr	r1, [pc, #232]	; (800f230 <__ieee754_pow+0xa30>)
 800f146:	2000      	movs	r0, #0
 800f148:	f7f1 f862 	bl	8000210 <__aeabi_dsub>
 800f14c:	e9cd 0100 	strd	r0, r1, [sp]
 800f150:	9b01      	ldr	r3, [sp, #4]
 800f152:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f15a:	da2f      	bge.n	800f1bc <__ieee754_pow+0x9bc>
 800f15c:	4650      	mov	r0, sl
 800f15e:	ed9d 0b00 	vldr	d0, [sp]
 800f162:	f000 f9cd 	bl	800f500 <scalbn>
 800f166:	ec51 0b10 	vmov	r0, r1, d0
 800f16a:	ec53 2b18 	vmov	r2, r3, d8
 800f16e:	f7ff bbe0 	b.w	800e932 <__ieee754_pow+0x132>
 800f172:	4b30      	ldr	r3, [pc, #192]	; (800f234 <__ieee754_pow+0xa34>)
 800f174:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f178:	429e      	cmp	r6, r3
 800f17a:	f77f af0b 	ble.w	800ef94 <__ieee754_pow+0x794>
 800f17e:	4b2e      	ldr	r3, [pc, #184]	; (800f238 <__ieee754_pow+0xa38>)
 800f180:	440b      	add	r3, r1
 800f182:	4303      	orrs	r3, r0
 800f184:	d00b      	beq.n	800f19e <__ieee754_pow+0x99e>
 800f186:	a326      	add	r3, pc, #152	; (adr r3, 800f220 <__ieee754_pow+0xa20>)
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	ec51 0b18 	vmov	r0, r1, d8
 800f190:	f7f1 f9f6 	bl	8000580 <__aeabi_dmul>
 800f194:	a322      	add	r3, pc, #136	; (adr r3, 800f220 <__ieee754_pow+0xa20>)
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	f7ff bbca 	b.w	800e932 <__ieee754_pow+0x132>
 800f19e:	4622      	mov	r2, r4
 800f1a0:	462b      	mov	r3, r5
 800f1a2:	f7f1 f835 	bl	8000210 <__aeabi_dsub>
 800f1a6:	4642      	mov	r2, r8
 800f1a8:	464b      	mov	r3, r9
 800f1aa:	f7f1 fc6f 	bl	8000a8c <__aeabi_dcmpge>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f43f aef0 	beq.w	800ef94 <__ieee754_pow+0x794>
 800f1b4:	e7e7      	b.n	800f186 <__ieee754_pow+0x986>
 800f1b6:	f04f 0a00 	mov.w	sl, #0
 800f1ba:	e717      	b.n	800efec <__ieee754_pow+0x7ec>
 800f1bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	e7d2      	b.n	800f16a <__ieee754_pow+0x96a>
 800f1c4:	491a      	ldr	r1, [pc, #104]	; (800f230 <__ieee754_pow+0xa30>)
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	f7ff bb9e 	b.w	800e908 <__ieee754_pow+0x108>
 800f1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1d0:	f7ff bb9a 	b.w	800e908 <__ieee754_pow+0x108>
 800f1d4:	9000      	str	r0, [sp, #0]
 800f1d6:	f7ff bb76 	b.w	800e8c6 <__ieee754_pow+0xc6>
 800f1da:	2100      	movs	r1, #0
 800f1dc:	f7ff bb60 	b.w	800e8a0 <__ieee754_pow+0xa0>
 800f1e0:	00000000 	.word	0x00000000
 800f1e4:	3fe62e43 	.word	0x3fe62e43
 800f1e8:	fefa39ef 	.word	0xfefa39ef
 800f1ec:	3fe62e42 	.word	0x3fe62e42
 800f1f0:	0ca86c39 	.word	0x0ca86c39
 800f1f4:	be205c61 	.word	0xbe205c61
 800f1f8:	72bea4d0 	.word	0x72bea4d0
 800f1fc:	3e663769 	.word	0x3e663769
 800f200:	c5d26bf1 	.word	0xc5d26bf1
 800f204:	3ebbbd41 	.word	0x3ebbbd41
 800f208:	af25de2c 	.word	0xaf25de2c
 800f20c:	3f11566a 	.word	0x3f11566a
 800f210:	16bebd93 	.word	0x16bebd93
 800f214:	3f66c16c 	.word	0x3f66c16c
 800f218:	5555553e 	.word	0x5555553e
 800f21c:	3fc55555 	.word	0x3fc55555
 800f220:	c2f8f359 	.word	0xc2f8f359
 800f224:	01a56e1f 	.word	0x01a56e1f
 800f228:	3fe00000 	.word	0x3fe00000
 800f22c:	000fffff 	.word	0x000fffff
 800f230:	3ff00000 	.word	0x3ff00000
 800f234:	4090cbff 	.word	0x4090cbff
 800f238:	3f6f3400 	.word	0x3f6f3400
 800f23c:	652b82fe 	.word	0x652b82fe
 800f240:	3c971547 	.word	0x3c971547

0800f244 <__ieee754_sqrt>:
 800f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f248:	ec55 4b10 	vmov	r4, r5, d0
 800f24c:	4e56      	ldr	r6, [pc, #344]	; (800f3a8 <__ieee754_sqrt+0x164>)
 800f24e:	43ae      	bics	r6, r5
 800f250:	ee10 0a10 	vmov	r0, s0
 800f254:	ee10 3a10 	vmov	r3, s0
 800f258:	4629      	mov	r1, r5
 800f25a:	462a      	mov	r2, r5
 800f25c:	d110      	bne.n	800f280 <__ieee754_sqrt+0x3c>
 800f25e:	ee10 2a10 	vmov	r2, s0
 800f262:	462b      	mov	r3, r5
 800f264:	f7f1 f98c 	bl	8000580 <__aeabi_dmul>
 800f268:	4602      	mov	r2, r0
 800f26a:	460b      	mov	r3, r1
 800f26c:	4620      	mov	r0, r4
 800f26e:	4629      	mov	r1, r5
 800f270:	f7f0 ffd0 	bl	8000214 <__adddf3>
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	ec45 4b10 	vmov	d0, r4, r5
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	2d00      	cmp	r5, #0
 800f282:	dc10      	bgt.n	800f2a6 <__ieee754_sqrt+0x62>
 800f284:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f288:	4330      	orrs	r0, r6
 800f28a:	d0f5      	beq.n	800f278 <__ieee754_sqrt+0x34>
 800f28c:	b15d      	cbz	r5, 800f2a6 <__ieee754_sqrt+0x62>
 800f28e:	ee10 2a10 	vmov	r2, s0
 800f292:	462b      	mov	r3, r5
 800f294:	ee10 0a10 	vmov	r0, s0
 800f298:	f7f0 ffba 	bl	8000210 <__aeabi_dsub>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	f7f1 fa98 	bl	80007d4 <__aeabi_ddiv>
 800f2a4:	e7e6      	b.n	800f274 <__ieee754_sqrt+0x30>
 800f2a6:	1509      	asrs	r1, r1, #20
 800f2a8:	d076      	beq.n	800f398 <__ieee754_sqrt+0x154>
 800f2aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f2ae:	07ce      	lsls	r6, r1, #31
 800f2b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f2b4:	bf5e      	ittt	pl
 800f2b6:	0fda      	lsrpl	r2, r3, #31
 800f2b8:	005b      	lslpl	r3, r3, #1
 800f2ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f2be:	0fda      	lsrs	r2, r3, #31
 800f2c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f2c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	106d      	asrs	r5, r5, #1
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	f04f 0e16 	mov.w	lr, #22
 800f2d2:	4684      	mov	ip, r0
 800f2d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2d8:	eb0c 0401 	add.w	r4, ip, r1
 800f2dc:	4294      	cmp	r4, r2
 800f2de:	bfde      	ittt	le
 800f2e0:	1b12      	suble	r2, r2, r4
 800f2e2:	eb04 0c01 	addle.w	ip, r4, r1
 800f2e6:	1840      	addle	r0, r0, r1
 800f2e8:	0052      	lsls	r2, r2, #1
 800f2ea:	f1be 0e01 	subs.w	lr, lr, #1
 800f2ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f2f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f2f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2fa:	d1ed      	bne.n	800f2d8 <__ieee754_sqrt+0x94>
 800f2fc:	4671      	mov	r1, lr
 800f2fe:	2720      	movs	r7, #32
 800f300:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f304:	4562      	cmp	r2, ip
 800f306:	eb04 060e 	add.w	r6, r4, lr
 800f30a:	dc02      	bgt.n	800f312 <__ieee754_sqrt+0xce>
 800f30c:	d113      	bne.n	800f336 <__ieee754_sqrt+0xf2>
 800f30e:	429e      	cmp	r6, r3
 800f310:	d811      	bhi.n	800f336 <__ieee754_sqrt+0xf2>
 800f312:	2e00      	cmp	r6, #0
 800f314:	eb06 0e04 	add.w	lr, r6, r4
 800f318:	da43      	bge.n	800f3a2 <__ieee754_sqrt+0x15e>
 800f31a:	f1be 0f00 	cmp.w	lr, #0
 800f31e:	db40      	blt.n	800f3a2 <__ieee754_sqrt+0x15e>
 800f320:	f10c 0801 	add.w	r8, ip, #1
 800f324:	eba2 020c 	sub.w	r2, r2, ip
 800f328:	429e      	cmp	r6, r3
 800f32a:	bf88      	it	hi
 800f32c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f330:	1b9b      	subs	r3, r3, r6
 800f332:	4421      	add	r1, r4
 800f334:	46c4      	mov	ip, r8
 800f336:	0052      	lsls	r2, r2, #1
 800f338:	3f01      	subs	r7, #1
 800f33a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f33e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f342:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f346:	d1dd      	bne.n	800f304 <__ieee754_sqrt+0xc0>
 800f348:	4313      	orrs	r3, r2
 800f34a:	d006      	beq.n	800f35a <__ieee754_sqrt+0x116>
 800f34c:	1c4c      	adds	r4, r1, #1
 800f34e:	bf13      	iteet	ne
 800f350:	3101      	addne	r1, #1
 800f352:	3001      	addeq	r0, #1
 800f354:	4639      	moveq	r1, r7
 800f356:	f021 0101 	bicne.w	r1, r1, #1
 800f35a:	1043      	asrs	r3, r0, #1
 800f35c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f360:	0849      	lsrs	r1, r1, #1
 800f362:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f366:	07c2      	lsls	r2, r0, #31
 800f368:	bf48      	it	mi
 800f36a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f36e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f372:	460c      	mov	r4, r1
 800f374:	463d      	mov	r5, r7
 800f376:	e77f      	b.n	800f278 <__ieee754_sqrt+0x34>
 800f378:	0ada      	lsrs	r2, r3, #11
 800f37a:	3815      	subs	r0, #21
 800f37c:	055b      	lsls	r3, r3, #21
 800f37e:	2a00      	cmp	r2, #0
 800f380:	d0fa      	beq.n	800f378 <__ieee754_sqrt+0x134>
 800f382:	02d7      	lsls	r7, r2, #11
 800f384:	d50a      	bpl.n	800f39c <__ieee754_sqrt+0x158>
 800f386:	f1c1 0420 	rsb	r4, r1, #32
 800f38a:	fa23 f404 	lsr.w	r4, r3, r4
 800f38e:	1e4d      	subs	r5, r1, #1
 800f390:	408b      	lsls	r3, r1
 800f392:	4322      	orrs	r2, r4
 800f394:	1b41      	subs	r1, r0, r5
 800f396:	e788      	b.n	800f2aa <__ieee754_sqrt+0x66>
 800f398:	4608      	mov	r0, r1
 800f39a:	e7f0      	b.n	800f37e <__ieee754_sqrt+0x13a>
 800f39c:	0052      	lsls	r2, r2, #1
 800f39e:	3101      	adds	r1, #1
 800f3a0:	e7ef      	b.n	800f382 <__ieee754_sqrt+0x13e>
 800f3a2:	46e0      	mov	r8, ip
 800f3a4:	e7be      	b.n	800f324 <__ieee754_sqrt+0xe0>
 800f3a6:	bf00      	nop
 800f3a8:	7ff00000 	.word	0x7ff00000

0800f3ac <fabs>:
 800f3ac:	ec51 0b10 	vmov	r0, r1, d0
 800f3b0:	ee10 2a10 	vmov	r2, s0
 800f3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3b8:	ec43 2b10 	vmov	d0, r2, r3
 800f3bc:	4770      	bx	lr

0800f3be <finite>:
 800f3be:	b082      	sub	sp, #8
 800f3c0:	ed8d 0b00 	vstr	d0, [sp]
 800f3c4:	9801      	ldr	r0, [sp, #4]
 800f3c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f3ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f3ce:	0fc0      	lsrs	r0, r0, #31
 800f3d0:	b002      	add	sp, #8
 800f3d2:	4770      	bx	lr
 800f3d4:	0000      	movs	r0, r0
	...

0800f3d8 <nan>:
 800f3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3e0 <nan+0x8>
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	00000000 	.word	0x00000000
 800f3e4:	7ff80000 	.word	0x7ff80000

0800f3e8 <rint>:
 800f3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ea:	ec51 0b10 	vmov	r0, r1, d0
 800f3ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f3f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f3f6:	2e13      	cmp	r6, #19
 800f3f8:	ee10 4a10 	vmov	r4, s0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f402:	dc58      	bgt.n	800f4b6 <rint+0xce>
 800f404:	2e00      	cmp	r6, #0
 800f406:	da2b      	bge.n	800f460 <rint+0x78>
 800f408:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f40c:	4302      	orrs	r2, r0
 800f40e:	d023      	beq.n	800f458 <rint+0x70>
 800f410:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f414:	4302      	orrs	r2, r0
 800f416:	4254      	negs	r4, r2
 800f418:	4314      	orrs	r4, r2
 800f41a:	0c4b      	lsrs	r3, r1, #17
 800f41c:	0b24      	lsrs	r4, r4, #12
 800f41e:	045b      	lsls	r3, r3, #17
 800f420:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f424:	ea44 0103 	orr.w	r1, r4, r3
 800f428:	4b32      	ldr	r3, [pc, #200]	; (800f4f4 <rint+0x10c>)
 800f42a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f42e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f0 feeb 	bl	8000214 <__adddf3>
 800f43e:	e9cd 0100 	strd	r0, r1, [sp]
 800f442:	463b      	mov	r3, r7
 800f444:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f448:	4632      	mov	r2, r6
 800f44a:	f7f0 fee1 	bl	8000210 <__aeabi_dsub>
 800f44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f452:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f456:	4639      	mov	r1, r7
 800f458:	ec41 0b10 	vmov	d0, r0, r1
 800f45c:	b003      	add	sp, #12
 800f45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f460:	4a25      	ldr	r2, [pc, #148]	; (800f4f8 <rint+0x110>)
 800f462:	4132      	asrs	r2, r6
 800f464:	ea01 0702 	and.w	r7, r1, r2
 800f468:	4307      	orrs	r7, r0
 800f46a:	d0f5      	beq.n	800f458 <rint+0x70>
 800f46c:	0851      	lsrs	r1, r2, #1
 800f46e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f472:	4314      	orrs	r4, r2
 800f474:	d00c      	beq.n	800f490 <rint+0xa8>
 800f476:	ea23 0201 	bic.w	r2, r3, r1
 800f47a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f47e:	2e13      	cmp	r6, #19
 800f480:	fa43 f606 	asr.w	r6, r3, r6
 800f484:	bf0c      	ite	eq
 800f486:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f48a:	2400      	movne	r4, #0
 800f48c:	ea42 0306 	orr.w	r3, r2, r6
 800f490:	4918      	ldr	r1, [pc, #96]	; (800f4f4 <rint+0x10c>)
 800f492:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f496:	4622      	mov	r2, r4
 800f498:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f49c:	4620      	mov	r0, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f7f0 feb8 	bl	8000214 <__adddf3>
 800f4a4:	e9cd 0100 	strd	r0, r1, [sp]
 800f4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4ac:	4622      	mov	r2, r4
 800f4ae:	462b      	mov	r3, r5
 800f4b0:	f7f0 feae 	bl	8000210 <__aeabi_dsub>
 800f4b4:	e7d0      	b.n	800f458 <rint+0x70>
 800f4b6:	2e33      	cmp	r6, #51	; 0x33
 800f4b8:	dd07      	ble.n	800f4ca <rint+0xe2>
 800f4ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f4be:	d1cb      	bne.n	800f458 <rint+0x70>
 800f4c0:	ee10 2a10 	vmov	r2, s0
 800f4c4:	f7f0 fea6 	bl	8000214 <__adddf3>
 800f4c8:	e7c6      	b.n	800f458 <rint+0x70>
 800f4ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f4ce:	f04f 36ff 	mov.w	r6, #4294967295
 800f4d2:	40d6      	lsrs	r6, r2
 800f4d4:	4230      	tst	r0, r6
 800f4d6:	d0bf      	beq.n	800f458 <rint+0x70>
 800f4d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f4dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f4e0:	bf1f      	itttt	ne
 800f4e2:	ea24 0101 	bicne.w	r1, r4, r1
 800f4e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f4ea:	fa44 f202 	asrne.w	r2, r4, r2
 800f4ee:	ea41 0402 	orrne.w	r4, r1, r2
 800f4f2:	e7cd      	b.n	800f490 <rint+0xa8>
 800f4f4:	0800fad0 	.word	0x0800fad0
 800f4f8:	000fffff 	.word	0x000fffff
 800f4fc:	00000000 	.word	0x00000000

0800f500 <scalbn>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	ec55 4b10 	vmov	r4, r5, d0
 800f506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f50a:	4606      	mov	r6, r0
 800f50c:	462b      	mov	r3, r5
 800f50e:	b99a      	cbnz	r2, 800f538 <scalbn+0x38>
 800f510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f514:	4323      	orrs	r3, r4
 800f516:	d036      	beq.n	800f586 <scalbn+0x86>
 800f518:	4b39      	ldr	r3, [pc, #228]	; (800f600 <scalbn+0x100>)
 800f51a:	4629      	mov	r1, r5
 800f51c:	ee10 0a10 	vmov	r0, s0
 800f520:	2200      	movs	r2, #0
 800f522:	f7f1 f82d 	bl	8000580 <__aeabi_dmul>
 800f526:	4b37      	ldr	r3, [pc, #220]	; (800f604 <scalbn+0x104>)
 800f528:	429e      	cmp	r6, r3
 800f52a:	4604      	mov	r4, r0
 800f52c:	460d      	mov	r5, r1
 800f52e:	da10      	bge.n	800f552 <scalbn+0x52>
 800f530:	a32b      	add	r3, pc, #172	; (adr r3, 800f5e0 <scalbn+0xe0>)
 800f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f536:	e03a      	b.n	800f5ae <scalbn+0xae>
 800f538:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f53c:	428a      	cmp	r2, r1
 800f53e:	d10c      	bne.n	800f55a <scalbn+0x5a>
 800f540:	ee10 2a10 	vmov	r2, s0
 800f544:	4620      	mov	r0, r4
 800f546:	4629      	mov	r1, r5
 800f548:	f7f0 fe64 	bl	8000214 <__adddf3>
 800f54c:	4604      	mov	r4, r0
 800f54e:	460d      	mov	r5, r1
 800f550:	e019      	b.n	800f586 <scalbn+0x86>
 800f552:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f556:	460b      	mov	r3, r1
 800f558:	3a36      	subs	r2, #54	; 0x36
 800f55a:	4432      	add	r2, r6
 800f55c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f560:	428a      	cmp	r2, r1
 800f562:	dd08      	ble.n	800f576 <scalbn+0x76>
 800f564:	2d00      	cmp	r5, #0
 800f566:	a120      	add	r1, pc, #128	; (adr r1, 800f5e8 <scalbn+0xe8>)
 800f568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f56c:	da1c      	bge.n	800f5a8 <scalbn+0xa8>
 800f56e:	a120      	add	r1, pc, #128	; (adr r1, 800f5f0 <scalbn+0xf0>)
 800f570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f574:	e018      	b.n	800f5a8 <scalbn+0xa8>
 800f576:	2a00      	cmp	r2, #0
 800f578:	dd08      	ble.n	800f58c <scalbn+0x8c>
 800f57a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f57e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f582:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f586:	ec45 4b10 	vmov	d0, r4, r5
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f590:	da19      	bge.n	800f5c6 <scalbn+0xc6>
 800f592:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f596:	429e      	cmp	r6, r3
 800f598:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f59c:	dd0a      	ble.n	800f5b4 <scalbn+0xb4>
 800f59e:	a112      	add	r1, pc, #72	; (adr r1, 800f5e8 <scalbn+0xe8>)
 800f5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1e2      	bne.n	800f56e <scalbn+0x6e>
 800f5a8:	a30f      	add	r3, pc, #60	; (adr r3, 800f5e8 <scalbn+0xe8>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f7f0 ffe7 	bl	8000580 <__aeabi_dmul>
 800f5b2:	e7cb      	b.n	800f54c <scalbn+0x4c>
 800f5b4:	a10a      	add	r1, pc, #40	; (adr r1, 800f5e0 <scalbn+0xe0>)
 800f5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d0b8      	beq.n	800f530 <scalbn+0x30>
 800f5be:	a10e      	add	r1, pc, #56	; (adr r1, 800f5f8 <scalbn+0xf8>)
 800f5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5c4:	e7b4      	b.n	800f530 <scalbn+0x30>
 800f5c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5ca:	3236      	adds	r2, #54	; 0x36
 800f5cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	4b0c      	ldr	r3, [pc, #48]	; (800f608 <scalbn+0x108>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	e7e8      	b.n	800f5ae <scalbn+0xae>
 800f5dc:	f3af 8000 	nop.w
 800f5e0:	c2f8f359 	.word	0xc2f8f359
 800f5e4:	01a56e1f 	.word	0x01a56e1f
 800f5e8:	8800759c 	.word	0x8800759c
 800f5ec:	7e37e43c 	.word	0x7e37e43c
 800f5f0:	8800759c 	.word	0x8800759c
 800f5f4:	fe37e43c 	.word	0xfe37e43c
 800f5f8:	c2f8f359 	.word	0xc2f8f359
 800f5fc:	81a56e1f 	.word	0x81a56e1f
 800f600:	43500000 	.word	0x43500000
 800f604:	ffff3cb0 	.word	0xffff3cb0
 800f608:	3c900000 	.word	0x3c900000

0800f60c <_init>:
 800f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60e:	bf00      	nop
 800f610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f612:	bc08      	pop	{r3}
 800f614:	469e      	mov	lr, r3
 800f616:	4770      	bx	lr

0800f618 <_fini>:
 800f618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61a:	bf00      	nop
 800f61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f61e:	bc08      	pop	{r3}
 800f620:	469e      	mov	lr, r3
 800f622:	4770      	bx	lr
