/*
 * serial_data.h
 *
 *  Created on: May 18, 2021
 *      Author: natha
 *
 */

#ifndef INC_SERIAL_DATA_H_
#define INC_SERIAL_DATA_H_

#include <stdint.h>
#include "W25N01GV.h"
#include "comms.h"
#include "stm32f4xx.h"

// For DMA RX
/*
#define DMA_RX_BUFFER_SIZE          2048
#define NUM_BUFFER_PACKETS          10
#define CIRCULAR_TELEM_BUFFER_SZ    PONG_MAX_PACKET_SIZE*NUM_BUFFER_PACKETS
*/

/**
 * Struct to hold all the comms bullshit
 */
/*
typedef struct {
	uint8_t circular_telem_buffer[CIRCULAR_TELEM_BUFFER_SZ];
	volatile int16_t curr_circular_buffer_pos;
	volatile int16_t curr_telem_start[NUM_BUFFER_PACKETS];
	volatile int16_t curr_telem_len[NUM_BUFFER_PACKETS];
	volatile int16_t last_telem_packet_pos;

	uint8_t telem_buffer[PONG_MAX_PACKET_SIZE];
	uint8_t DMA_RX_Buffer[DMA_RX_BUFFER_SIZE];
} DmaBufferInfo;
*/

/**
 * Inits telemetry stuff and flash.
 */
void init_serial_data(/*DmaBufferInfo* buffer_info*/);


void update_serial_data_vars();


/**
 * Sends a telemetry packet to an address in blocking mode
 * This function is only ever called with target_addr == SERVER_ADDR,
 * but allows for other addresses for flexibility
 *
 * @param target_addr: Address of board/location to send packet to
 */
void send_telem_packet(uint8_t target_addr);

/**
 * Writes a telemetry packet to flash
 */
void save_flash_packet();

/**
 * Transmits all flash data at once, for a flash dump
 */
void transmit_flash_data();

/**
 * TODO: move this to autogenerated function
 */
void write_flash_constants();

/**
 * TODO: move this to autogenerated function
 */
void read_flash_constants();


void send_calibration_data();

/**
 * Reads an incoming packet and handles it.
 * Note: this is called in an interrupt.
 */
//void handle_uart_dma_rx(UART_HandleTypeDef *huart, DmaBufferInfo* buffer_info);

#endif /* INC_SERIAL_DATA_H_ */
