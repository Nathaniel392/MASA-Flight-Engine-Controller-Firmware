
tsm-flight-ec-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd14  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800cee0  0800cee0  0001cee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf40  0800cf40  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf48  0800cf48  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800cf50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  2000028c  0800d1dc  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002408  0800d1dc  00022408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022071  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7a  00000000  00000000  0004232d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  00047640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002575f  00000000  00000000  00048938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a230  00000000  00000000  0006e097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc06a  00000000  00000000  000882c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000586c  00000000  00000000  00164384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000028c 	.word	0x2000028c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800cec4 	.word	0x0800cec4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000290 	.word	0x20000290
 8000204:	0800cec4 	.word	0x0800cec4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8083 	bne.w	8000d06 <__udivmoddi4+0x116>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d947      	bls.n	8000c96 <__udivmoddi4+0xa6>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b142      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0c:	f1c2 0020 	rsb	r0, r2, #32
 8000c10:	fa24 f000 	lsr.w	r0, r4, r0
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4097      	lsls	r7, r2
 8000c18:	ea40 0c01 	orr.w	ip, r0, r1
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbbc f6f8 	udiv	r6, ip, r8
 8000c28:	fa1f fe87 	uxth.w	lr, r7
 8000c2c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c34:	fb06 f10e 	mul.w	r1, r6, lr
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 8119 	bcs.w	8000e78 <__udivmoddi4+0x288>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8116 	bls.w	8000e78 <__udivmoddi4+0x288>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	443b      	add	r3, r7
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8105 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8102 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c80:	eba4 040e 	sub.w	r4, r4, lr
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b902      	cbnz	r2, 8000c9a <__udivmoddi4+0xaa>
 8000c98:	deff      	udf	#255	; 0xff
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d150      	bne.n	8000d44 <__udivmoddi4+0x154>
 8000ca2:	1bcb      	subs	r3, r1, r7
 8000ca4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca8:	fa1f f887 	uxth.w	r8, r7
 8000cac:	2601      	movs	r6, #1
 8000cae:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0xe2>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	f200 80e9 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000cd2:	4684      	mov	ip, r0
 8000cd4:	1ac9      	subs	r1, r1, r3
 8000cd6:	b2a3      	uxth	r3, r4
 8000cd8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cdc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce4:	fb08 f800 	mul.w	r8, r8, r0
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x10c>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x10a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80d9 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d04:	e7bf      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d909      	bls.n	8000d1e <__udivmoddi4+0x12e>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <__udivmoddi4+0x282>
 8000d10:	2600      	movs	r6, #0
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	4630      	mov	r0, r6
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	fab3 f683 	clz	r6, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d14a      	bne.n	8000dbc <__udivmoddi4+0x1cc>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0x140>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 80b8 	bhi.w	8000ea0 <__udivmoddi4+0x2b0>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb61 0103 	sbc.w	r1, r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	468c      	mov	ip, r1
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0a8      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000d3e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f603 	lsr.w	r6, r0, r3
 8000d4c:	4097      	lsls	r7, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d56:	40d9      	lsrs	r1, r3
 8000d58:	4330      	orrs	r0, r6
 8000d5a:	0c03      	lsrs	r3, r0, #16
 8000d5c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f108 	mul.w	r1, r6, r8
 8000d70:	4299      	cmp	r1, r3
 8000d72:	fa04 f402 	lsl.w	r4, r4, r2
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x19c>
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7e:	f080 808d 	bcs.w	8000e9c <__udivmoddi4+0x2ac>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 808a 	bls.w	8000e9c <__udivmoddi4+0x2ac>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	443b      	add	r3, r7
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b281      	uxth	r1, r0
 8000d90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb00 f308 	mul.w	r3, r0, r8
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x1c4>
 8000da4:	1879      	adds	r1, r7, r1
 8000da6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000daa:	d273      	bcs.n	8000e94 <__udivmoddi4+0x2a4>
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d971      	bls.n	8000e94 <__udivmoddi4+0x2a4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4439      	add	r1, r7
 8000db4:	1acb      	subs	r3, r1, r3
 8000db6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dba:	e778      	b.n	8000cae <__udivmoddi4+0xbe>
 8000dbc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dce:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	0c3b      	lsrs	r3, r7, #16
 8000dde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de2:	fa1f f884 	uxth.w	r8, r4
 8000de6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dee:	fb09 fa08 	mul.w	sl, r9, r8
 8000df2:	458a      	cmp	sl, r1
 8000df4:	fa02 f206 	lsl.w	r2, r2, r6
 8000df8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x220>
 8000dfe:	1861      	adds	r1, r4, r1
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d248      	bcs.n	8000e98 <__udivmoddi4+0x2a8>
 8000e06:	458a      	cmp	sl, r1
 8000e08:	d946      	bls.n	8000e98 <__udivmoddi4+0x2a8>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	4421      	add	r1, r4
 8000e10:	eba1 010a 	sub.w	r1, r1, sl
 8000e14:	b2bf      	uxth	r7, r7
 8000e16:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e1a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x24a>
 8000e2a:	19e7      	adds	r7, r4, r7
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d22e      	bcs.n	8000e90 <__udivmoddi4+0x2a0>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d92c      	bls.n	8000e90 <__udivmoddi4+0x2a0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4427      	add	r7, r4
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba7 0708 	sub.w	r7, r7, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	d31a      	bcc.n	8000e84 <__udivmoddi4+0x294>
 8000e4e:	d017      	beq.n	8000e80 <__udivmoddi4+0x290>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x27a>
 8000e52:	ebb3 020e 	subs.w	r2, r3, lr
 8000e56:	eb67 0701 	sbc.w	r7, r7, r1
 8000e5a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5e:	40f2      	lsrs	r2, r6
 8000e60:	ea4c 0202 	orr.w	r2, ip, r2
 8000e64:	40f7      	lsrs	r7, r6
 8000e66:	e9c5 2700 	strd	r2, r7, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	462e      	mov	r6, r5
 8000e74:	4628      	mov	r0, r5
 8000e76:	e70b      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e78:	4606      	mov	r6, r0
 8000e7a:	e6e9      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fd      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e80:	4543      	cmp	r3, r8
 8000e82:	d2e5      	bcs.n	8000e50 <__udivmoddi4+0x260>
 8000e84:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e88:	eb69 0104 	sbc.w	r1, r9, r4
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7df      	b.n	8000e50 <__udivmoddi4+0x260>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e7d2      	b.n	8000e3a <__udivmoddi4+0x24a>
 8000e94:	4660      	mov	r0, ip
 8000e96:	e78d      	b.n	8000db4 <__udivmoddi4+0x1c4>
 8000e98:	4681      	mov	r9, r0
 8000e9a:	e7b9      	b.n	8000e10 <__udivmoddi4+0x220>
 8000e9c:	4666      	mov	r6, ip
 8000e9e:	e775      	b.n	8000d8c <__udivmoddi4+0x19c>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e74a      	b.n	8000d3a <__udivmoddi4+0x14a>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	4439      	add	r1, r7
 8000eaa:	e713      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	e724      	b.n	8000cfc <__udivmoddi4+0x10c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <init_autosequence_timings>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_timings() {
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	// Valve timings read from flash
	// PID start delay read from flash
	// Film cooling start time read from flash
	// hotfire duration read from flash

	autosequence.startup_motor_start_delay_ms = 500;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <init_autosequence_timings+0x30>)
 8000ebe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ec2:	601a      	str	r2, [r3, #0]

	autosequence.post_vent_on_time_ms = 1000;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <init_autosequence_timings+0x30>)
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eca:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_off_time_ms = 6000;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <init_autosequence_timings+0x30>)
 8000ece:	f241 7270 	movw	r2, #6000	; 0x1770
 8000ed2:	61da      	str	r2, [r3, #28]
	autosequence.post_purge_off_time_ms = 10000;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <init_autosequence_timings+0x30>)
 8000ed6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eda:	621a      	str	r2, [r3, #32]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000604 	.word	0x20000604

08000eec <enter_abort_state>:

/**
 * Call this function every time you want to abort.
 * Handles all actuations.
 */
void enter_abort_state() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	// Enter Abort state
	// This line is for in case someone forgets to set Abort elsewhere
	STATE = Abort;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <enter_abort_state+0x84>)
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	701a      	strb	r2, [r3, #0]

	// Close MPVs
	set_valve_channel(FUEL_MPV_PRESS_VALVE_CH, VALVE_OFF);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f005 ffb3 	bl	8006e64 <set_valve_channel>
	set_valve_channel(FUEL_MPV_VENT_VALVE_CH, VALVE_OFF);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2005      	movs	r0, #5
 8000f02:	f005 ffaf 	bl	8006e64 <set_valve_channel>
	set_valve_channel(LOX_MPV_VALVE_CH, VALVE_OFF);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2007      	movs	r0, #7
 8000f0a:	f005 ffab 	bl	8006e64 <set_valve_channel>

	// Stop nozzle film cooling
	set_valve_channel(NOZZLE_FILM_COOLING_VALVE_CH, VALVE_OFF);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2008      	movs	r0, #8
 8000f12:	f005 ffa7 	bl	8006e64 <set_valve_channel>

	// Close control valves
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f005 ffa3 	bl	8006e64 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2001      	movs	r0, #1
 8000f22:	f005 ff9f 	bl	8006e64 <set_valve_channel>

	// De-energize ignitor
	set_valve_channel(IGNITOR_CH, VALVE_OFF);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2009      	movs	r0, #9
 8000f2a:	f005 ff9b 	bl	8006e64 <set_valve_channel>

	// Open vent valves
	set_valve_channel(FUEL_TANK_VENT_VALVE_CH, VALVE_ON);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2003      	movs	r0, #3
 8000f32:	f005 ff97 	bl	8006e64 <set_valve_channel>
	set_valve_channel(LOX_TANK_VENT_VALVE_CH, VALVE_ON);
 8000f36:	2101      	movs	r1, #1
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f005 ff93 	bl	8006e64 <set_valve_channel>

	// Open purge valve
	set_valve_channel(PURGE_VALVE_CH, VALVE_ON);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2004      	movs	r0, #4
 8000f42:	f005 ff8f 	bl	8006e64 <set_valve_channel>

	// Close motors (needle valves), 0 degrees should be closed.
	L6470_goto_motor_pos(&(tanks[LOX_TANK_NUM].motor), 0);
 8000f46:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000f74 <enter_abort_state+0x88>
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <enter_abort_state+0x8c>)
 8000f4c:	f006 f9d7 	bl	80072fe <L6470_goto_motor_pos>
	L6470_goto_motor_pos(&(tanks[FUEL_TANK_NUM].motor), 0);
 8000f50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000f74 <enter_abort_state+0x88>
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <enter_abort_state+0x90>)
 8000f56:	f006 f9d2 	bl	80072fe <L6470_goto_motor_pos>

	// Stop TPC (not an actuation)
	autosequence.hotfire_lox_tank_enable_PID_control = 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <enter_abort_state+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	autosequence.hotfire_fuel_tank_enable_PID_control = 0;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <enter_abort_state+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200003f0 	.word	0x200003f0
 8000f74:	00000000 	.word	0x00000000
 8000f78:	20000500 	.word	0x20000500
 8000f7c:	20000584 	.word	0x20000584
 8000f80:	20000604 	.word	0x20000604

08000f84 <enter_safe_disarm_state>:
 * Call this function to safe the system.
 * Not the same as abort.
 *
 * Can only be called in AutoPress and Startup.
 */
void enter_safe_disarm_state() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// Including this line in case programmer forgets to set it elsewhere
	STATE = Safe;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <enter_safe_disarm_state+0x20>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	701a      	strb	r2, [r3, #0]

	// Close control valves and go back to Manual.
	// TODO: should tank enable be looked at here?
	set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2000      	movs	r0, #0
 8000f92:	f005 ff67 	bl	8006e64 <set_valve_channel>
	set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f005 ff63 	bl	8006e64 <set_valve_channel>

	// TODO: go back to Manual?
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003f0 	.word	0x200003f0

08000fa8 <manual_state_transition>:

void manual_state_transition(uint8_t next_state) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]

	// Aborts work in any state
	if (next_state == Abort) {
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d108      	bne.n	8000fca <manual_state_transition+0x22>
		STATE = Abort;
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <manual_state_transition+0x118>)
 8000fba:	2206      	movs	r2, #6
 8000fbc:	701a      	strb	r2, [r3, #0]
		enter_abort_state();
 8000fbe:	f7ff ff95 	bl	8000eec <enter_abort_state>
		set_status_flag(EC_FLAG_ABORT_MANUAL);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f004 fb78 	bl	80056b8 <set_status_flag>
		return;
 8000fc8:	e077      	b.n	80010ba <manual_state_transition+0x112>
	}

	// Check current state to determine next state transition
	if (STATE == Manual) {
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <manual_state_transition+0x118>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d106      	bne.n	8000fe0 <manual_state_transition+0x38>
		if (next_state == Armed) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d170      	bne.n	80010ba <manual_state_transition+0x112>
			STATE = Armed;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <manual_state_transition+0x118>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e06c      	b.n	80010ba <manual_state_transition+0x112>
		}
	}
	else if (STATE == Armed) {
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <manual_state_transition+0x118>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d10d      	bne.n	8001004 <manual_state_transition+0x5c>
		if (next_state == Manual) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <manual_state_transition+0x4e>
			STATE = Manual;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <manual_state_transition+0x118>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e061      	b.n	80010ba <manual_state_transition+0x112>
		}
		else if (next_state == AutoPress) {
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d15e      	bne.n	80010ba <manual_state_transition+0x112>
			STATE = AutoPress;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <manual_state_transition+0x118>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e05a      	b.n	80010ba <manual_state_transition+0x112>
		}
	}
	else if (STATE == AutoPress) {
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <manual_state_transition+0x118>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d120      	bne.n	800104e <manual_state_transition+0xa6>
		if (next_state == Manual) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <manual_state_transition+0x76>
			STATE = Safe;
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <manual_state_transition+0x118>)
 8001014:	2208      	movs	r2, #8
 8001016:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001018:	f7ff ffb4 	bl	8000f84 <enter_safe_disarm_state>
 800101c:	e04d      	b.n	80010ba <manual_state_transition+0x112>
		}
		// Autopress is given instead of Startup to simplify the GUI code
		else if (next_state == AutoPress) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d14a      	bne.n	80010ba <manual_state_transition+0x112>
			// Close control valves
			set_valve_channel(LOX_CONTROL_VALVE_CH, VALVE_OFF);
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f005 ff1c 	bl	8006e64 <set_valve_channel>
			set_valve_channel(FUEL_CONTROL_VALVE_CH, VALVE_OFF);
 800102c:	2100      	movs	r1, #0
 800102e:	2001      	movs	r0, #1
 8001030:	f005 ff18 	bl	8006e64 <set_valve_channel>

			autosequence.startup_start_time_ms = SYS_MILLIS;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <manual_state_transition+0x11c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <manual_state_transition+0x120>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <manual_state_transition+0x124>)
 8001044:	6293      	str	r3, [r2, #40]	; 0x28
			STATE = Startup;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <manual_state_transition+0x118>)
 8001048:	2203      	movs	r2, #3
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e035      	b.n	80010ba <manual_state_transition+0x112>
		}
	}
	else if (STATE == Startup) {
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <manual_state_transition+0x118>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d11c      	bne.n	8001090 <manual_state_transition+0xe8>
		if (next_state == Manual) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d105      	bne.n	8001068 <manual_state_transition+0xc0>
			STATE = Safe;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <manual_state_transition+0x118>)
 800105e:	2208      	movs	r2, #8
 8001060:	701a      	strb	r2, [r3, #0]
			enter_safe_disarm_state();
 8001062:	f7ff ff8f 	bl	8000f84 <enter_safe_disarm_state>
 8001066:	e028      	b.n	80010ba <manual_state_transition+0x112>
		}
		else if (next_state == Ignition) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d125      	bne.n	80010ba <manual_state_transition+0x112>
			STATE = Ignition;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <manual_state_transition+0x118>)
 8001070:	2204      	movs	r2, #4
 8001072:	701a      	strb	r2, [r3, #0]
			autosequence.ignition_start_time_ms = SYS_MILLIS;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <manual_state_transition+0x11c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <manual_state_transition+0x120>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <manual_state_transition+0x124>)
 8001084:	62d3      	str	r3, [r2, #44]	; 0x2c
			set_valve_channel(PURGE_VALVE_CH, VALVE_ON);  // Turn purge on
 8001086:	2101      	movs	r1, #1
 8001088:	2004      	movs	r0, #4
 800108a:	f005 feeb 	bl	8006e64 <set_valve_channel>
 800108e:	e014      	b.n	80010ba <manual_state_transition+0x112>
		}
	}
	else if (STATE == IgnitionFail) {
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <manual_state_transition+0x118>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d106      	bne.n	80010a6 <manual_state_transition+0xfe>
		if (next_state == Manual) {
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10d      	bne.n	80010ba <manual_state_transition+0x112>
			STATE = Manual;  // Operator must dismiss IgnitionFail condition
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <manual_state_transition+0x118>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e009      	b.n	80010ba <manual_state_transition+0x112>
		}
	}
	else if (STATE == Abort) {
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <manual_state_transition+0x118>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d105      	bne.n	80010ba <manual_state_transition+0x112>
		if (next_state == Manual) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <manual_state_transition+0x112>
			STATE = Manual;  // Operator must dismiss Abort condition
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <manual_state_transition+0x118>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200003f0 	.word	0x200003f0
 80010c4:	200006e8 	.word	0x200006e8
 80010c8:	10624dd3 	.word	0x10624dd3
 80010cc:	20000604 	.word	0x20000604

080010d0 <get_ellapsed_time_in_autosequence_state_ms>:

/**
 * Only works for Ignition, Hotfire, and Post
 */
uint32_t get_ellapsed_time_in_autosequence_state_ms() {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	if (STATE == Startup) {
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d10a      	bne.n	80010f2 <get_ellapsed_time_in_autosequence_state_ms+0x22>
		return SYS_MILLIS - autosequence.startup_start_time_ms;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	099a      	lsrs	r2, r3, #6
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	e02d      	b.n	800114e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Ignition) {
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d10a      	bne.n	8001110 <get_ellapsed_time_in_autosequence_state_ms+0x40>
		return SYS_MILLIS - autosequence.ignition_start_time_ms;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	099a      	lsrs	r2, r3, #6
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	e01e      	b.n	800114e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Hotfire) {
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10a      	bne.n	800112e <get_ellapsed_time_in_autosequence_state_ms+0x5e>
		return SYS_MILLIS - autosequence.hotfire_start_time_ms;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099a      	lsrs	r2, r3, #6
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	e00f      	b.n	800114e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else if (STATE == Post) {
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <get_ellapsed_time_in_autosequence_state_ms+0x88>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b07      	cmp	r3, #7
 8001134:	d10a      	bne.n	800114c <get_ellapsed_time_in_autosequence_state_ms+0x7c>
		return SYS_MILLIS - autosequence.post_start_time_ms;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <get_ellapsed_time_in_autosequence_state_ms+0x8c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <get_ellapsed_time_in_autosequence_state_ms+0x90>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	099a      	lsrs	r2, r3, #6
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <get_ellapsed_time_in_autosequence_state_ms+0x94>)
 8001146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	e000      	b.n	800114e <get_ellapsed_time_in_autosequence_state_ms+0x7e>
	}
	else {
		return 0;
 800114c:	2300      	movs	r3, #0
	}
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	200003f0 	.word	0x200003f0
 800115c:	200006e8 	.word	0x200006e8
 8001160:	10624dd3 	.word	0x10624dd3
 8001164:	20000604 	.word	0x20000604

08001168 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d103      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		periodic_flag_50ms = 1;
	}
	else if (htim == &TIM_100MS) {
		periodic_flag_100ms = 1;
	}
}
 800117e:	e00e      	b.n	800119e <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_50MS) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d103      	bne.n	8001190 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	e006      	b.n	800119e <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_100MS) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d102      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x36>
		periodic_flag_100ms = 1;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000888 	.word	0x20000888
 80011b0:	20000640 	.word	0x20000640
 80011b4:	2000069c 	.word	0x2000069c
 80011b8:	20000dc0 	.word	0x20000dc0
 80011bc:	20000a14 	.word	0x20000a14
 80011c0:	200006e4 	.word	0x200006e4

080011c4 <HAL_UART_RxCpltCallback>:
volatile uint16_t telem_buffer_sz = 0;
uint8_t telem_buffer[255];
uint8_t eof_received = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if (huart == &COM_UART) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d117      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x40>
		HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <HAL_UART_RxCpltCallback+0x4c>)
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011da:	f00a f84a 	bl	800b272 <HAL_UART_Receive_IT>
		telem_buffer[telem_buffer_sz++] = last_byte_uart;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_UART_RxCpltCallback+0x50>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	b291      	uxth	r1, r2
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_UART_RxCpltCallback+0x50>)
 80011ea:	8011      	strh	r1, [r2, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_UART_RxCpltCallback+0x4c>)
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_UART_RxCpltCallback+0x54>)
 80011f4:	5499      	strb	r1, [r3, r2]
		if (last_byte_uart == 0) {
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_UART_RxCpltCallback+0x4c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x40>
			eof_received = 1;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_UART_RxCpltCallback+0x58>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200008d0 	.word	0x200008d0
 8001210:	20000000 	.word	0x20000000
 8001214:	200004f8 	.word	0x200004f8
 8001218:	20000cb4 	.word	0x20000cb4
 800121c:	200004fa 	.word	0x200004fa

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f007 fbc5 	bl	80089b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f90d 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 fb33 	bl	8001898 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001232:	f000 f975 	bl	8001520 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001236:	f000 fa15 	bl	8001664 <MX_SPI4_Init>
  MX_SPI2_Init();
 800123a:	f000 f9a7 	bl	800158c <MX_SPI2_Init>
  MX_SPI3_Init();
 800123e:	f000 f9db 	bl	80015f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001242:	f000 faff 	bl	8001844 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001246:	f000 fa43 	bl	80016d0 <MX_TIM5_Init>
  MX_TIM10_Init();
 800124a:	f000 fa8f 	bl	800176c <MX_TIM10_Init>
  MX_TIM11_Init();
 800124e:	f000 fab1 	bl	80017b4 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001252:	f000 fad3 	bl	80017fc <MX_TIM13_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8001256:	4861      	ldr	r0, [pc, #388]	; (80013dc <main+0x1bc>)
 8001258:	f009 fa96 	bl	800a788 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 800125c:	4860      	ldr	r0, [pc, #384]	; (80013e0 <main+0x1c0>)
 800125e:	f009 fafb 	bl	800a858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8001262:	4860      	ldr	r0, [pc, #384]	; (80013e4 <main+0x1c4>)
 8001264:	f009 faf8 	bl	800a858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8001268:	485f      	ldr	r0, [pc, #380]	; (80013e8 <main+0x1c8>)
 800126a:	f009 faf5 	bl	800a858 <HAL_TIM_Base_Start_IT>

  // UART DMA
  HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	495e      	ldr	r1, [pc, #376]	; (80013ec <main+0x1cc>)
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <main+0x1d0>)
 8001274:	f009 fffd 	bl	800b272 <HAL_UART_Receive_IT>


  // Watchdog

  // Read variables from flash: this must be called very early in initialization!
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <main+0x1d4>)
 800127e:	495e      	ldr	r1, [pc, #376]	; (80013f8 <main+0x1d8>)
 8001280:	485e      	ldr	r0, [pc, #376]	; (80013fc <main+0x1dc>)
 8001282:	f007 f8ae 	bl	80083e2 <init_flash>
  read_nonvolatile_variables();
 8001286:	f000 fc0b 	bl	8001aa0 <read_nonvolatile_variables>
  // Board-specific hardware
  //init_spi_peripherals();  // Set chip selects high and initialize

  //init_adcs();
  //init_thermocouples();
  init_serial_data(&buffer_info);
 800128a:	485d      	ldr	r0, [pc, #372]	; (8001400 <main+0x1e0>)
 800128c:	f004 f8e2 	bl	8005454 <init_serial_data>

  init_board(FLIGHT_EC_ADDR);  // Comms
 8001290:	2002      	movs	r0, #2
 8001292:	f006 f8af 	bl	80073f4 <init_board>

  init_autosequence_timings();
 8001296:	f7ff fe0f 	bl	8000eb8 <init_autosequence_timings>


  // Motor stress test
  motor.hspi = &SPI_MOTOR;
 800129a:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <main+0x1e4>)
 800129c:	4a5a      	ldr	r2, [pc, #360]	; (8001408 <main+0x1e8>)
 800129e:	601a      	str	r2, [r3, #0]
  motor.cs_base = MTR0_CS_GPIO_Port;
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <main+0x1e4>)
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <main+0x1ec>)
 80012a4:	605a      	str	r2, [r3, #4]
  motor.cs_pin = MTR0_CS_Pin;
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <main+0x1e4>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ac:	811a      	strh	r2, [r3, #8]
  motor.busy_base = MTR0_BUSY_GPIO_Port;
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <main+0x1e4>)
 80012b0:	4a56      	ldr	r2, [pc, #344]	; (800140c <main+0x1ec>)
 80012b2:	60da      	str	r2, [r3, #12]
  motor.busy_pin = MTR0_BUSY_Pin;
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <main+0x1e4>)
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	821a      	strh	r2, [r3, #16]

  L6470_init_motor(&motor, L6470_FULL_STEP_MODE, 1.8);
 80012bc:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001410 <main+0x1f0>
 80012c0:	2100      	movs	r1, #0
 80012c2:	4850      	ldr	r0, [pc, #320]	; (8001404 <main+0x1e4>)
 80012c4:	f005 fffa 	bl	80072bc <L6470_init_motor>
  {
	  // Handle autosequence first in every loop
	  // most important, time sensitive operation
	  // TODO: call autosequence functions
	  //execute_autosequence();
	  flash_mem = get_bytes_remaining(&flash);
 80012c8:	484c      	ldr	r0, [pc, #304]	; (80013fc <main+0x1dc>)
 80012ca:	f007 faea 	bl	80088a2 <get_bytes_remaining>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a50      	ldr	r2, [pc, #320]	; (8001414 <main+0x1f4>)
 80012d2:	6013      	str	r3, [r2, #0]



	  if (periodic_flag_50ms) {
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <main+0x1f8>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <main+0xec>
		  periodic_flag_50ms = 0;
 80012de:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <main+0x1f8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

		  // Active tank pressure PID control
		  // tank enable flags get set during the autosequence
		  if (STATE == Hotfire) {
 80012e4:	4b4d      	ldr	r3, [pc, #308]	; (800141c <main+0x1fc>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d10f      	bne.n	800130c <main+0xec>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 80012ec:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <main+0x200>)
 80012ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <main+0xdc>
				  tank_PID_pressure_control(&tanks[LOX_TANK_NUM]);
 80012f6:	484b      	ldr	r0, [pc, #300]	; (8001424 <main+0x204>)
 80012f8:	f004 fc94 	bl	8005c24 <tank_PID_pressure_control>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <main+0x200>)
 80012fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <main+0xec>
				  tank_PID_pressure_control(&tanks[FUEL_TANK_NUM]);
 8001306:	4848      	ldr	r0, [pc, #288]	; (8001428 <main+0x208>)
 8001308:	f004 fc8c 	bl	8005c24 <tank_PID_pressure_control>
			  }
		  }
	  }

	  if (periodic_flag_5ms) {
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <main+0x20c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d03b      	beq.n	800138e <main+0x16e>
		  periodic_flag_5ms = 0;
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <main+0x20c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]

		  // handle redundant sensor voting algorithms
		  //resolve_redundant_sensors();

		  // Autopress bang bang
		  if (STATE == AutoPress) {
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <main+0x1fc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d106      	bne.n	8001332 <main+0x112>
			  tank_autopress_bang_bang(&tanks[LOX_TANK_NUM]);
 8001324:	483f      	ldr	r0, [pc, #252]	; (8001424 <main+0x204>)
 8001326:	f004 fc48 	bl	8005bba <tank_autopress_bang_bang>
			  tank_autopress_bang_bang(&tanks[FUEL_TANK_NUM]);
 800132a:	483f      	ldr	r0, [pc, #252]	; (8001428 <main+0x208>)
 800132c:	f004 fc45 	bl	8005bba <tank_autopress_bang_bang>
 8001330:	e027      	b.n	8001382 <main+0x162>
		  }

		  else if (STATE == Startup) {
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <main+0x1fc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d10f      	bne.n	800135a <main+0x13a>
			  // Very similar to execute_autosequence() logic
			  uint32_t T_state = get_ellapsed_time_in_autosequence_state_ms();
 800133a:	f7ff fec9 	bl	80010d0 <get_ellapsed_time_in_autosequence_state_ms>
 800133e:	4603      	mov	r3, r0
 8001340:	607b      	str	r3, [r7, #4]

			  // Initial motor position is arbitrarily put in the 5ms loop
			  if (T_state >= autosequence.startup_motor_start_delay_ms) {
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <main+0x200>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d31a      	bcc.n	8001382 <main+0x162>
				  tank_startup_init_motor_position(&tanks[LOX_TANK_NUM]);
 800134c:	4835      	ldr	r0, [pc, #212]	; (8001424 <main+0x204>)
 800134e:	f004 fd37 	bl	8005dc0 <tank_startup_init_motor_position>
				  tank_startup_init_motor_position(&tanks[FUEL_TANK_NUM]);
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <main+0x208>)
 8001354:	f004 fd34 	bl	8005dc0 <tank_startup_init_motor_position>
 8001358:	e013      	b.n	8001382 <main+0x162>
			  }
		  }

		  // Active tank pressure control valve bang bang
		  // tank enable flags get set during the autosequence
		  else if (STATE == Hotfire) {
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <main+0x1fc>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10f      	bne.n	8001382 <main+0x162>
			  if (autosequence.hotfire_lox_tank_enable_PID_control) {
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <main+0x200>)
 8001364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <main+0x152>
				  tank_check_control_valve_threshold(&tanks[LOX_TANK_NUM]);
 800136c:	482d      	ldr	r0, [pc, #180]	; (8001424 <main+0x204>)
 800136e:	f004 fcfb 	bl	8005d68 <tank_check_control_valve_threshold>
			  }
			  if (autosequence.hotfire_fuel_tank_enable_PID_control) {
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <main+0x200>)
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <main+0x162>
				  tank_check_control_valve_threshold(&tanks[FUEL_TANK_NUM]);
 800137c:	482a      	ldr	r0, [pc, #168]	; (8001428 <main+0x208>)
 800137e:	f004 fcf3 	bl	8005d68 <tank_check_control_valve_threshold>
			  }
		  }

		  // log flash data
		  if (LOGGING_ACTIVE) {
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <main+0x210>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <main+0x16e>
			  save_flash_packet();
 800138a:	f004 f8ed 	bl	8005568 <save_flash_packet>
	  }



	  // Check periodic interrupt flags and call appropriate functions if needed
	  if (periodic_flag_100ms) {
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <main+0x214>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00d      	beq.n	80013b4 <main+0x194>
		  periodic_flag_100ms = 0;
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <main+0x214>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

		  if (!telem_disabled) {
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <main+0x218>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <main+0x194>
			  send_telem_packet(SERVER_ADDR);
 80013a6:	2007      	movs	r0, #7
 80013a8:	f004 f8bc 	bl	8005524 <send_telem_packet>
			  HAL_GPIO_TogglePin(LED_TELEM_PORT, LED_TELEM_PIN);
 80013ac:	2101      	movs	r1, #1
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <main+0x1d4>)
 80013b0:	f007 fec3 	bl	800913a <HAL_GPIO_TogglePin>

	  }

	  //HAL_UART_Receive(&COM_UART, rx_buffer, 13, HAL_MAX_DELAY);

	  if (eof_received) {
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <main+0x21c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d085      	beq.n	80012c8 <main+0xa8>
		  receive_data(&COM_UART, telem_buffer, telem_buffer_sz);
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <main+0x220>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	491f      	ldr	r1, [pc, #124]	; (8001444 <main+0x224>)
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <main+0x1d0>)
 80013c8:	f006 f95a 	bl	8007680 <receive_data>
		  eof_received = 0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <main+0x21c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
		  telem_buffer_sz = 0;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <main+0x220>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	801a      	strh	r2, [r3, #0]
	  flash_mem = get_bytes_remaining(&flash);
 80013d8:	e776      	b.n	80012c8 <main+0xa8>
 80013da:	bf00      	nop
 80013dc:	200006e8 	.word	0x200006e8
 80013e0:	20000888 	.word	0x20000888
 80013e4:	2000069c 	.word	0x2000069c
 80013e8:	20000a14 	.word	0x20000a14
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200008d0 	.word	0x200008d0
 80013f4:	40020800 	.word	0x40020800
 80013f8:	20000ae0 	.word	0x20000ae0
 80013fc:	20000ec8 	.word	0x20000ec8
 8001400:	200010e0 	.word	0x200010e0
 8001404:	20000c84 	.word	0x20000c84
 8001408:	20000730 	.word	0x20000730
 800140c:	40020000 	.word	0x40020000
 8001410:	3fe66666 	.word	0x3fe66666
 8001414:	2000042c 	.word	0x2000042c
 8001418:	20000dc0 	.word	0x20000dc0
 800141c:	200003f0 	.word	0x200003f0
 8001420:	20000604 	.word	0x20000604
 8001424:	200004fc 	.word	0x200004fc
 8001428:	20000580 	.word	0x20000580
 800142c:	20000640 	.word	0x20000640
 8001430:	20000430 	.word	0x20000430
 8001434:	200006e4 	.word	0x200006e4
 8001438:	200004fb 	.word	0x200004fb
 800143c:	200004fa 	.word	0x200004fa
 8001440:	200004f8 	.word	0x200004f8
 8001444:	20000cb4 	.word	0x20000cb4

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2234      	movs	r2, #52	; 0x34
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00a fcbe 	bl	800bdd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <SystemClock_Config+0xd0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <SystemClock_Config+0xd0>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <SystemClock_Config+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <SystemClock_Config+0xd4>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80014c0:	235a      	movs	r3, #90	; 0x5a
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 f8c1 	bl	800965c <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e0:	f000 fad8 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 fe36 	bl	8009170 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800150a:	f000 fac3 	bl	8001a94 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_SPI1_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <MX_SPI1_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_SPI1_Init+0x64>)
 800152c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_SPI1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_SPI1_Init+0x64>)
 800154c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI1_Init+0x64>)
 8001554:	2218      	movs	r2, #24
 8001556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI1_Init+0x64>)
 800156c:	220a      	movs	r2, #10
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_SPI1_Init+0x64>)
 8001572:	f008 fb11 	bl	8009b98 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800157c:	f000 fa8a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000c2c 	.word	0x20000c2c
 8001588:	40013000 	.word	0x40013000

0800158c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_SPI2_Init+0x64>)
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <MX_SPI2_Init+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_SPI2_Init+0x64>)
 8001598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015c0:	2218      	movs	r2, #24
 80015c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015d8:	220a      	movs	r2, #10
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_SPI2_Init+0x64>)
 80015de:	f008 fadb 	bl	8009b98 <HAL_SPI_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015e8:	f000 fa54 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000644 	.word	0x20000644
 80015f4:	40003800 	.word	0x40003800

080015f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_SPI3_Init+0x64>)
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <MX_SPI3_Init+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_SPI3_Init+0x64>)
 8001604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001608:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI3_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_SPI3_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_SPI3_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI3_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_SPI3_Init+0x64>)
 8001624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001628:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI3_Init+0x64>)
 800162c:	2218      	movs	r2, #24
 800162e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_SPI3_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI3_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_SPI3_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI3_Init+0x64>)
 8001644:	220a      	movs	r2, #10
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_SPI3_Init+0x64>)
 800164a:	f008 faa5 	bl	8009b98 <HAL_SPI_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001654:	f000 fa1e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000730 	.word	0x20000730
 8001660:	40003c00 	.word	0x40003c00

08001664 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_SPI4_Init+0x64>)
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <MX_SPI4_Init+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI4_Init+0x64>)
 8001670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001674:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI4_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_SPI4_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI4_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI4_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI4_Init+0x64>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI4_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_SPI4_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI4_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <MX_SPI4_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI4_Init+0x64>)
 80016b0:	220a      	movs	r2, #10
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_SPI4_Init+0x64>)
 80016b6:	f008 fa6f 	bl	8009b98 <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80016c0:	f000 f9e8 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000ae0 	.word	0x20000ae0
 80016cc:	40013400 	.word	0x40013400

080016d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM5_Init+0x94>)
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <MX_TIM5_Init+0x98>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45 - 1;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_TIM5_Init+0x94>)
 80016f4:	222c      	movs	r2, #44	; 0x2c
 80016f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM5_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_TIM5_Init+0x94>)
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_TIM5_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM5_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <MX_TIM5_Init+0x94>)
 8001714:	f008 ffe8 	bl	800a6e8 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800171e:	f000 f9b9 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_TIM5_Init+0x94>)
 8001730:	f009 fa0a 	bl	800ab48 <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f9ab 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_TIM5_Init+0x94>)
 800174c:	f009 fc22 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001756:	f000 f99d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006e8 	.word	0x200006e8
 8001768:	40000c00 	.word	0x40000c00

0800176c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_TIM10_Init+0x40>)
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <MX_TIM10_Init+0x44>)
 8001774:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000 - 1;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <MX_TIM10_Init+0x40>)
 8001778:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800177c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_TIM10_Init+0x40>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50 - 1;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_TIM10_Init+0x40>)
 8001786:	2231      	movs	r2, #49	; 0x31
 8001788:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_TIM10_Init+0x40>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_TIM10_Init+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_TIM10_Init+0x40>)
 8001798:	f008 ffa6 	bl	800a6e8 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80017a2:	f000 f977 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000069c 	.word	0x2000069c
 80017b0:	40014400 	.word	0x40014400

080017b4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <MX_TIM11_Init+0x44>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 45000 - 1;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017c0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80017c4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100 - 1;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017ce:	2263      	movs	r2, #99	; 0x63
 80017d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_TIM11_Init+0x40>)
 80017e0:	f008 ff82 	bl	800a6e8 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017ea:	f000 f953 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000a14 	.word	0x20000a14
 80017f8:	40014800 	.word	0x40014800

080017fc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_TIM13_Init+0x40>)
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <MX_TIM13_Init+0x44>)
 8001804:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000 - 1;
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <MX_TIM13_Init+0x40>)
 8001808:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800180c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_TIM13_Init+0x40>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5 - 1;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_TIM13_Init+0x40>)
 8001816:	2204      	movs	r2, #4
 8001818:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_TIM13_Init+0x40>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_TIM13_Init+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_TIM13_Init+0x40>)
 8001828:	f008 ff5e 	bl	800a6e8 <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001832:	f000 f92f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000888 	.word	0x20000888
 8001840:	40001c00 	.word	0x40001c00

08001844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f009 fc1a 	bl	800b0b4 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 f905 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200008d0 	.word	0x200008d0
 8001894:	40011000 	.word	0x40011000

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a5c      	ldr	r2, [pc, #368]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a55      	ldr	r2, [pc, #340]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <MX_GPIO_Init+0x1e4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f24e 0110 	movw	r1, #57360	; 0xe010
 800195c:	4848      	ldr	r0, [pc, #288]	; (8001a80 <MX_GPIO_Init+0x1e8>)
 800195e:	f007 fbd3 	bl	8009108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001962:	2200      	movs	r2, #0
 8001964:	f246 31ff 	movw	r1, #25599	; 0x63ff
 8001968:	4846      	ldr	r0, [pc, #280]	; (8001a84 <MX_GPIO_Init+0x1ec>)
 800196a:	f007 fbcd 	bl	8009108 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	f241 5104 	movw	r1, #5380	; 0x1504
 8001974:	4844      	ldr	r0, [pc, #272]	; (8001a88 <MX_GPIO_Init+0x1f0>)
 8001976:	f007 fbc7 	bl	8009108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 800197a:	2200      	movs	r2, #0
 800197c:	f241 4107 	movw	r1, #5127	; 0x1407
 8001980:	4842      	ldr	r0, [pc, #264]	; (8001a8c <MX_GPIO_Init+0x1f4>)
 8001982:	f007 fbc1 	bl	8009108 <HAL_GPIO_WritePin>
                          |en_vlv4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 41be 	mov.w	r1, #24320	; 0x5f00
 800198c:	4840      	ldr	r0, [pc, #256]	; (8001a90 <MX_GPIO_Init+0x1f8>)
 800198e:	f007 fbbb 	bl	8009108 <HAL_GPIO_WritePin>
                          |en_vlv9_Pin|ADC0_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC2_EOC_Pin */
  GPIO_InitStruct.Pin = ADC2_EOC_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC2_EOC_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4836      	ldr	r0, [pc, #216]	; (8001a80 <MX_GPIO_Init+0x1e8>)
 80019a6:	f007 fa1b 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_CS_Pin en_vlv0_Pin en_vlv1_Pin en_vlv2_Pin */
  GPIO_InitStruct.Pin = ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin;
 80019aa:	f24e 0310 	movw	r3, #57360	; 0xe010
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	482f      	ldr	r0, [pc, #188]	; (8001a80 <MX_GPIO_Init+0x1e8>)
 80019c4:	f007 fa0c 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin EEPROM_CS_Pin LED_0_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin TC_MUX_EN_Pin TC_MUX_A3_Pin
                           ADC1_CS_Pin en_vlv10_Pin en_vlv11_Pin en_vlv12_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 80019c8:	f246 33ff 	movw	r3, #25599	; 0x63ff
 80019cc:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	4828      	ldr	r0, [pc, #160]	; (8001a84 <MX_GPIO_Init+0x1ec>)
 80019e2:	f007 f9fd 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_EOC_Pin MTR0_BUSY_Pin MTR1_BUSY_Pin */
  GPIO_InitStruct.Pin = ADC3_EOC_Pin|MTR0_BUSY_Pin|MTR1_BUSY_Pin;
 80019e6:	f640 2302 	movw	r3, #2562	; 0xa02
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <MX_GPIO_Init+0x1f0>)
 80019fc:	f007 f9f0 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_CS_Pin en_vlv13_Pin MTR0_CS_Pin MTR1_CS_Pin */
  GPIO_InitStruct.Pin = ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin;
 8001a00:	f241 5304 	movw	r3, #5380	; 0x1504
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	481b      	ldr	r0, [pc, #108]	; (8001a88 <MX_GPIO_Init+0x1f0>)
 8001a1a:	f007 f9e1 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_MUX_A2_Pin TC_MUX_A1_Pin TC_MUX_A0_Pin en_vlv3_Pin
                           en_vlv4_Pin */
  GPIO_InitStruct.Pin = TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 8001a1e:	f241 4307 	movw	r3, #5127	; 0x1407
 8001a22:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4815      	ldr	r0, [pc, #84]	; (8001a8c <MX_GPIO_Init+0x1f4>)
 8001a38:	f007 f9d2 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv5_Pin en_vlv6_Pin en_vlv7_Pin en_vlv8_Pin
                           en_vlv9_Pin ADC0_CS_Pin */
  GPIO_InitStruct.Pin = en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 8001a3c:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 8001a40:	61fb      	str	r3, [r7, #28]
                          |en_vlv9_Pin|ADC0_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	480e      	ldr	r0, [pc, #56]	; (8001a90 <MX_GPIO_Init+0x1f8>)
 8001a56:	f007 f9c3 	bl	8008de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_EOC_Pin ADC1_EOC_Pin */
  GPIO_InitStruct.Pin = ADC0_EOC_Pin|ADC1_EOC_Pin;
 8001a5a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4808      	ldr	r0, [pc, #32]	; (8001a90 <MX_GPIO_Init+0x1f8>)
 8001a70:	f007 f9b6 	bl	8008de0 <HAL_GPIO_Init>

}
 8001a74:	bf00      	nop
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020c00 	.word	0x40020c00

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8001aa6:	23fe      	movs	r3, #254	; 0xfe
 8001aa8:	4a94      	ldr	r2, [pc, #592]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4894      	ldr	r0, [pc, #592]	; (8001d00 <read_nonvolatile_variables+0x260>)
 8001aae:	f006 ff34 	bl	800891a <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 8001ab2:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <read_nonvolatile_variables+0x1e>
		return 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e22f      	b.n	8001f1e <read_nonvolatile_variables+0x47e>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001abe:	4b8f      	ldr	r3, [pc, #572]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001aca:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001ade:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8001ae2:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001ae4:	78db      	ldrb	r3, [r3, #3]
 8001ae6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8001ae8:	4b84      	ldr	r3, [pc, #528]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8001aee:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001b02:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 8001b06:	4b7d      	ldr	r3, [pc, #500]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b08:	795b      	ldrb	r3, [r3, #5]
 8001b0a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b0e:	799b      	ldrb	r3, [r3, #6]
 8001b10:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 8001b12:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1c:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 8001b24:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001b26:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001b2a:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b2c:	79db      	ldrb	r3, [r3, #7]
 8001b2e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8001b30:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b32:	7a1b      	ldrb	r3, [r3, #8]
 8001b34:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001b36:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b40:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001b4a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b50:	7a5b      	ldrb	r3, [r3, #9]
 8001b52:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8001b54:	4b69      	ldr	r3, [pc, #420]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b56:	7a9b      	ldrb	r3, [r3, #10]
 8001b58:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001b5a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b64:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001b6e:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001b72:	4b62      	ldr	r3, [pc, #392]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b74:	7adb      	ldrb	r3, [r3, #11]
 8001b76:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001b78:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b7a:	7b1b      	ldrb	r3, [r3, #12]
 8001b7c:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001b7e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001b90:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001b92:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001b96:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b98:	7b5b      	ldrb	r3, [r3, #13]
 8001b9a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001b9e:	7b9b      	ldrb	r3, [r3, #14]
 8001ba0:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001ba2:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001ba4:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001ba6:	7bdb      	ldrb	r3, [r3, #15]
 8001ba8:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 8001baa:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001bae:	7c1b      	ldrb	r3, [r3, #16]
 8001bb0:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001bb2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bbc:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001bc6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001bcc:	7c5b      	ldrb	r3, [r3, #17]
 8001bce:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001bd2:	7c9b      	ldrb	r3, [r3, #18]
 8001bd4:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001bd6:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001bda:	7cdb      	ldrb	r3, [r3, #19]
 8001bdc:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 8001bde:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001be2:	7d1b      	ldrb	r3, [r3, #20]
 8001be4:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 8001be6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001d04 <read_nonvolatile_variables+0x264>
 8001bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001bfa:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c00:	7d5b      	ldrb	r3, [r3, #21]
 8001c02:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c06:	7d9b      	ldrb	r3, [r3, #22]
 8001c08:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001c0a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c14:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001c1e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c24:	7ddb      	ldrb	r3, [r3, #23]
 8001c26:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001c2e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001c42:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c48:	7f5b      	ldrb	r3, [r3, #29]
 8001c4a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c4e:	7f9b      	ldrb	r3, [r3, #30]
 8001c50:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001c52:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001c66:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c6c:	7fdb      	ldrb	r3, [r3, #31]
 8001c6e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c76:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001c78:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c82:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <read_nonvolatile_variables+0x268>)
 8001c8c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	e02c      	b.n	8001cf0 <read_nonvolatile_variables+0x250>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3325      	adds	r3, #37	; 0x25
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	3326      	adds	r3, #38	; 0x26
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001cae:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3327      	adds	r3, #39	; 0x27
 8001cb8:	4910      	ldr	r1, [pc, #64]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001cbe:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	330a      	adds	r3, #10
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	490d      	ldr	r1, [pc, #52]	; (8001cfc <read_nonvolatile_variables+0x25c>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001ccc:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001cd8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <read_nonvolatile_variables+0x26c>)
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	3301      	adds	r3, #1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b13      	cmp	r3, #19
 8001cf4:	d9cf      	bls.n	8001c96 <read_nonvolatile_variables+0x1f6>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71bb      	strb	r3, [r7, #6]
 8001cfa:	e036      	b.n	8001d6a <read_nonvolatile_variables+0x2ca>
 8001cfc:	20000dc8 	.word	0x20000dc8
 8001d00:	20000ec8 	.word	0x20000ec8
 8001d04:	42c80000 	.word	0x42c80000
 8001d08:	200004fc 	.word	0x200004fc
 8001d0c:	200002a8 	.word	0x200002a8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	3375      	adds	r3, #117	; 0x75
 8001d16:	4a84      	ldr	r2, [pc, #528]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3376      	adds	r3, #118	; 0x76
 8001d22:	4a81      	ldr	r2, [pc, #516]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001d28:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	3377      	adds	r3, #119	; 0x77
 8001d32:	497d      	ldr	r1, [pc, #500]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001d38:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	331e      	adds	r3, #30
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4979      	ldr	r1, [pc, #484]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001d46:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001d50:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001d52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001d5a:	4a74      	ldr	r2, [pc, #464]	; (8001f2c <read_nonvolatile_variables+0x48c>)
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	3301      	adds	r3, #1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d9cf      	bls.n	8001d10 <read_nonvolatile_variables+0x270>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 8001d70:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d72:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <read_nonvolatile_variables+0x490>)
 8001d78:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 8001d7a:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d7c:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <read_nonvolatile_variables+0x490>)
 8001d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001d86:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d88:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d8c:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d94:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001d96:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001d9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001d9e:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8001da0:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001da4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001da8:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8001daa:	4313      	orrs	r3, r2
 8001dac:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001dae:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001db0:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001db4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001db8:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001dc0:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001dcc:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001dd0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001dd4:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001dd8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001ddc:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001de8:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001dec:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001df2:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001df6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001dfa:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001dfe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001e02:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001e0e:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e12:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001e16:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e1a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8001e1e:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <read_nonvolatile_variables+0x494>)
 8001e2a:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e2e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001e32:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e36:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001e3a:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001e3c:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e40:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001e44:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001e46:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e4a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001e4e:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8001e50:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001f38 <read_nonvolatile_variables+0x498>
 8001e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <read_nonvolatile_variables+0x49c>)
 8001e64:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	717b      	strb	r3, [r7, #5]
 8001e6c:	e053      	b.n	8001f16 <read_nonvolatile_variables+0x476>
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	335c      	adds	r3, #92	; 0x5c
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001e7a:	797b      	ldrb	r3, [r7, #5]
 8001e7c:	335c      	adds	r3, #92	; 0x5c
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	021b      	lsls	r3, r3, #8
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001e88:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001e92:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001e94:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <read_nonvolatile_variables+0x4a0>)
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	3348      	adds	r3, #72	; 0x48
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001eb2:	797b      	ldrb	r3, [r7, #5]
 8001eb4:	3348      	adds	r3, #72	; 0x48
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	021b      	lsls	r3, r3, #8
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001ec0:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001eca:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001ecc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <read_nonvolatile_variables+0x4a4>)
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	3370      	adds	r3, #112	; 0x70
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] << 8));
 8001eea:	797b      	ldrb	r3, [r7, #5]
 8001eec:	3370      	adds	r3, #112	; 0x70
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <read_nonvolatile_variables+0x488>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	021b      	lsls	r3, r3, #8
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 8001ef8:	ea41 0203 	orr.w	r2, r1, r3
 8001efc:	797b      	ldrb	r3, [r7, #5]
 8001efe:	ee07 2a90 	vmov	s15, r2
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <read_nonvolatile_variables+0x4a8>)
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001f10:	797b      	ldrb	r3, [r7, #5]
 8001f12:	3301      	adds	r3, #1
 8001f14:	717b      	strb	r3, [r7, #5]
 8001f16:	797b      	ldrb	r3, [r7, #5]
 8001f18:	2b13      	cmp	r3, #19
 8001f1a:	d9a8      	bls.n	8001e6e <read_nonvolatile_variables+0x3ce>
	}

	// Successful read
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000dc8 	.word	0x20000dc8
 8001f2c:	200002f8 	.word	0x200002f8
 8001f30:	200004fc 	.word	0x200004fc
 8001f34:	20000604 	.word	0x20000604
 8001f38:	461c4000 	.word	0x461c4000
 8001f3c:	20000420 	.word	0x20000420
 8001f40:	20000300 	.word	0x20000300
 8001f44:	20000350 	.word	0x20000350
 8001f48:	200003a0 	.word	0x200003a0

08001f4c <save_nonvolatile_variables>:


uint8_t save_nonvolatile_variables() {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0

	// First byte should always be 0; see read_nonvolatile_variables();
	nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] = 0;
 8001f52:	4bcb      	ldr	r3, [pc, #812]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

	// PID gains
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 0;
 8001f58:	4bca      	ldr	r3, [pc, #808]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001f5a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001f5e:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8002288 <save_nonvolatile_variables+0x33c>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6a:	ee17 3a90 	vmov	r3, s15
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4bc3      	ldr	r3, [pc, #780]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001f74:	705a      	strb	r2, [r3, #1]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] = ((uint16_t) (tanks[0].K_p * 100.0F)) >> 8;
 8001f76:	4bc3      	ldr	r3, [pc, #780]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001f78:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001f7c:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002288 <save_nonvolatile_variables+0x33c>
 8001f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f88:	ee17 3a90 	vmov	r3, s15
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4bba      	ldr	r3, [pc, #744]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001f96:	709a      	strb	r2, [r3, #2]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 0;
 8001f98:	4bba      	ldr	r3, [pc, #744]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001f9a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f9e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002288 <save_nonvolatile_variables+0x33c>
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001faa:	ee17 3a90 	vmov	r3, s15
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4bb3      	ldr	r3, [pc, #716]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001fb4:	70da      	strb	r2, [r3, #3]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] = ((uint16_t) (tanks[0].K_i * 100.0F)) >> 8;
 8001fb6:	4bb3      	ldr	r3, [pc, #716]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001fb8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001fbc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002288 <save_nonvolatile_variables+0x33c>
 8001fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 3a90 	vmov	r3, s15
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4baa      	ldr	r3, [pc, #680]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001fd6:	711a      	strb	r2, [r3, #4]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 0;
 8001fd8:	4baa      	ldr	r3, [pc, #680]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001fda:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001fde:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002288 <save_nonvolatile_variables+0x33c>
 8001fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fea:	ee17 3a90 	vmov	r3, s15
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <save_nonvolatile_variables+0x334>)
 8001ff4:	715a      	strb	r2, [r3, #5]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] = ((uint16_t) (tanks[0].K_d * 100.0F)) >> 8;
 8001ff6:	4ba3      	ldr	r3, [pc, #652]	; (8002284 <save_nonvolatile_variables+0x338>)
 8001ff8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001ffc:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002008:	ee17 3a90 	vmov	r3, s15
 800200c:	b29b      	uxth	r3, r3
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b9a      	ldr	r3, [pc, #616]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002016:	719a      	strb	r2, [r3, #6]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 0;
 8002018:	4b9a      	ldr	r3, [pc, #616]	; (8002284 <save_nonvolatile_variables+0x338>)
 800201a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800201e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202a:	ee17 3a90 	vmov	r3, s15
 800202e:	b29b      	uxth	r3, r3
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b93      	ldr	r3, [pc, #588]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002034:	71da      	strb	r2, [r3, #7]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] = ((uint16_t) (tanks[1].K_p * 100.0F)) >> 8;
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002038:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800203c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002048:	ee17 3a90 	vmov	r3, s15
 800204c:	b29b      	uxth	r3, r3
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b29b      	uxth	r3, r3
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b8a      	ldr	r3, [pc, #552]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002056:	721a      	strb	r2, [r3, #8]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 0;
 8002058:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <save_nonvolatile_variables+0x338>)
 800205a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800205e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	ee17 3a90 	vmov	r3, s15
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b83      	ldr	r3, [pc, #524]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002074:	725a      	strb	r2, [r3, #9]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] = ((uint16_t) (tanks[1].K_i * 100.0F)) >> 8;
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002078:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800207c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	b29b      	uxth	r3, r3
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002096:	729a      	strb	r2, [r3, #10]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 0;
 8002098:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <save_nonvolatile_variables+0x338>)
 800209a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800209e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002288 <save_nonvolatile_variables+0x33c>
 80020a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <save_nonvolatile_variables+0x334>)
 80020b4:	72da      	strb	r2, [r3, #11]
	nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] = ((uint16_t) (tanks[1].K_d * 100.0F)) >> 8;
 80020b6:	4b73      	ldr	r3, [pc, #460]	; (8002284 <save_nonvolatile_variables+0x338>)
 80020b8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80020bc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002288 <save_nonvolatile_variables+0x33c>
 80020c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c8:	ee17 3a90 	vmov	r3, s15
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <save_nonvolatile_variables+0x334>)
 80020d6:	731a      	strb	r2, [r3, #12]

	// Target pressure setpoints
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 0;
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <save_nonvolatile_variables+0x338>)
 80020da:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80020de:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002288 <save_nonvolatile_variables+0x33c>
 80020e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80020ee:	793a      	ldrb	r2, [r7, #4]
 80020f0:	4b63      	ldr	r3, [pc, #396]	; (8002280 <save_nonvolatile_variables+0x334>)
 80020f2:	735a      	strb	r2, [r3, #13]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 8;
 80020f4:	4b63      	ldr	r3, [pc, #396]	; (8002284 <save_nonvolatile_variables+0x338>)
 80020f6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80020fa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002288 <save_nonvolatile_variables+0x33c>
 80020fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002106:	ee17 3a90 	vmov	r3, s15
 800210a:	121b      	asrs	r3, r3, #8
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002110:	739a      	strb	r2, [r3, #14]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 16;
 8002112:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002114:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002118:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002288 <save_nonvolatile_variables+0x33c>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	141b      	asrs	r3, r3, #16
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <save_nonvolatile_variables+0x334>)
 800212e:	73da      	strb	r2, [r3, #15]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] = ((int32_t) (tanks[0].target_pres * 100.0F)) >> 24;
 8002130:	4b54      	ldr	r3, [pc, #336]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002132:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002136:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002288 <save_nonvolatile_variables+0x33c>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002142:	ee17 3a90 	vmov	r3, s15
 8002146:	161b      	asrs	r3, r3, #24
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <save_nonvolatile_variables+0x334>)
 800214c:	741a      	strb	r2, [r3, #16]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 0;
 800214e:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002150:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002154:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002160:	edc7 7a01 	vstr	s15, [r7, #4]
 8002164:	793a      	ldrb	r2, [r7, #4]
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002168:	745a      	strb	r2, [r3, #17]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 8;
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <save_nonvolatile_variables+0x338>)
 800216c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002170:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	121b      	asrs	r3, r3, #8
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002186:	749a      	strb	r2, [r3, #18]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 16;
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <save_nonvolatile_variables+0x338>)
 800218a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800218e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002288 <save_nonvolatile_variables+0x33c>
 8002192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219a:	ee17 3a90 	vmov	r3, s15
 800219e:	141b      	asrs	r3, r3, #16
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <save_nonvolatile_variables+0x334>)
 80021a4:	74da      	strb	r2, [r3, #19]
	nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] = ((int32_t) (tanks[1].target_pres * 100.0F)) >> 24;
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <save_nonvolatile_variables+0x338>)
 80021a8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80021ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002288 <save_nonvolatile_variables+0x33c>
 80021b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b8:	ee17 3a90 	vmov	r3, s15
 80021bc:	161b      	asrs	r3, r3, #24
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <save_nonvolatile_variables+0x334>)
 80021c2:	751a      	strb	r2, [r3, #20]

	// Control valve threshold pressures
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <save_nonvolatile_variables+0x338>)
 80021c6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80021ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d6:	ee17 3a90 	vmov	r3, s15
 80021da:	b21b      	sxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <save_nonvolatile_variables+0x334>)
 80021e0:	755a      	strb	r2, [r3, #21]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <save_nonvolatile_variables+0x338>)
 80021e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80021e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	121b      	asrs	r3, r3, #8
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002202:	759a      	strb	r2, [r3, #22]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 0;
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002206:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800220a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002216:	ee17 3a90 	vmov	r3, s15
 800221a:	b21b      	sxth	r3, r3
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002220:	75da      	strb	r2, [r3, #23]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_high_pres * 10.0F)) >> 8;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002224:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8002228:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800222c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002234:	ee17 3a90 	vmov	r3, s15
 8002238:	b21b      	sxth	r3, r3
 800223a:	121b      	asrs	r3, r3, #8
 800223c:	b21b      	sxth	r3, r3
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002242:	761a      	strb	r2, [r3, #24]

	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002246:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800224a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800224e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002256:	ee17 3a90 	vmov	r3, s15
 800225a:	b21b      	sxth	r3, r3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <save_nonvolatile_variables+0x334>)
 8002260:	775a      	strb	r2, [r3, #29]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] = ((int16_t) (tanks[0].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <save_nonvolatile_variables+0x338>)
 8002264:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002268:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002274:	ee17 3a90 	vmov	r3, s15
 8002278:	b21b      	sxth	r3, r3
 800227a:	121b      	asrs	r3, r3, #8
 800227c:	e006      	b.n	800228c <save_nonvolatile_variables+0x340>
 800227e:	bf00      	nop
 8002280:	20000dc8 	.word	0x20000dc8
 8002284:	200004fc 	.word	0x200004fc
 8002288:	42c80000 	.word	0x42c80000
 800228c:	b21b      	sxth	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b40      	ldr	r3, [pc, #256]	; (8002394 <save_nonvolatile_variables+0x448>)
 8002292:	779a      	strb	r2, [r3, #30]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 0;
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <save_nonvolatile_variables+0x44c>)
 8002296:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800229a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800229e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a6:	ee17 3a90 	vmov	r3, s15
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <save_nonvolatile_variables+0x448>)
 80022b0:	77da      	strb	r2, [r3, #31]
	nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] = ((int16_t) (tanks[1].PID_ctrl_vlv_low_pres * 10.0F)) >> 8;
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <save_nonvolatile_variables+0x44c>)
 80022b4:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80022b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 3a90 	vmov	r3, s15
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	121b      	asrs	r3, r3, #8
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <save_nonvolatile_variables+0x448>)
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]

	// Pressure ambients
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e055      	b.n	8002388 <save_nonvolatile_variables+0x43c>
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 0;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4a2f      	ldr	r2, [pc, #188]	; (800239c <save_nonvolatile_variables+0x450>)
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3325      	adds	r3, #37	; 0x25
 80022fe:	7939      	ldrb	r1, [r7, #4]
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <save_nonvolatile_variables+0x448>)
 8002302:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 8;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <save_nonvolatile_variables+0x450>)
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231c:	ee17 3a90 	vmov	r3, s15
 8002320:	121a      	asrs	r2, r3, #8
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	3326      	adds	r3, #38	; 0x26
 8002328:	b2d1      	uxtb	r1, r2
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <save_nonvolatile_variables+0x448>)
 800232c:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 16;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <save_nonvolatile_variables+0x450>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800233e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002346:	ee17 3a90 	vmov	r3, s15
 800234a:	141a      	asrs	r2, r3, #16
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3327      	adds	r3, #39	; 0x27
 8002352:	b2d1      	uxtb	r1, r2
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <save_nonvolatile_variables+0x448>)
 8002356:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pt_ambients[i] * 10.0F)) >> 24;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <save_nonvolatile_variables+0x450>)
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	161a      	asrs	r2, r3, #24
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	330a      	adds	r3, #10
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	b2d1      	uxtb	r1, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <save_nonvolatile_variables+0x448>)
 8002380:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	3301      	adds	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b13      	cmp	r3, #19
 800238c:	d9a6      	bls.n	80022dc <save_nonvolatile_variables+0x390>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 800238e:	2300      	movs	r3, #0
 8002390:	73bb      	strb	r3, [r7, #14]
 8002392:	e05b      	b.n	800244c <save_nonvolatile_variables+0x500>
 8002394:	20000dc8 	.word	0x20000dc8
 8002398:	200004fc 	.word	0x200004fc
 800239c:	200002a8 	.word	0x200002a8
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 0;
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	4a84      	ldr	r2, [pc, #528]	; (80025b4 <save_nonvolatile_variables+0x668>)
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3375      	adds	r3, #117	; 0x75
 80023c2:	7939      	ldrb	r1, [r7, #4]
 80023c4:	4a7c      	ldr	r2, [pc, #496]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80023c6:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 8;
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <save_nonvolatile_variables+0x668>)
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	121a      	asrs	r2, r3, #8
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3376      	adds	r3, #118	; 0x76
 80023ec:	b2d1      	uxtb	r1, r2
 80023ee:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80023f0:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 16;
 80023f2:	7bbb      	ldrb	r3, [r7, #14]
 80023f4:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <save_nonvolatile_variables+0x668>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240a:	ee17 3a90 	vmov	r3, s15
 800240e:	141a      	asrs	r2, r3, #16
 8002410:	7bbb      	ldrb	r3, [r7, #14]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3377      	adds	r3, #119	; 0x77
 8002416:	b2d1      	uxtb	r1, r2
 8002418:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 800241a:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] = ((int32_t) (pot_ambients[i] * 10.0F)) >> 24;
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <save_nonvolatile_variables+0x668>)
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800242c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002434:	ee17 3a90 	vmov	r3, s15
 8002438:	161a      	asrs	r2, r3, #24
 800243a:	7bbb      	ldrb	r3, [r7, #14]
 800243c:	331e      	adds	r3, #30
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	b2d1      	uxtb	r1, r2
 8002442:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002444:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	3301      	adds	r3, #1
 800244a:	73bb      	strb	r3, [r7, #14]
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d9a6      	bls.n	80023a0 <save_nonvolatile_variables+0x454>
	}

	// Tank enable flags
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0] = tanks[0].tank_enable;
 8002452:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <save_nonvolatile_variables+0x670>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 800245a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1] = tanks[1].tank_enable;
 800245e:	4b57      	ldr	r3, [pc, #348]	; (80025bc <save_nonvolatile_variables+0x670>)
 8002460:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002468:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	// Autosequence timings
	// Hotfire duration
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 0;
 800246c:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <save_nonvolatile_variables+0x674>)
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002474:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 8;
 8002478:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <save_nonvolatile_variables+0x674>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 16;
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <save_nonvolatile_variables+0x674>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002490:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] = ((uint32_t) (autosequence.hotfire_test_duration_ms)) >> 24;
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <save_nonvolatile_variables+0x674>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	0e1b      	lsrs	r3, r3, #24
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 800249e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	// Ignitor on delay
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 0;
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024a4:	889b      	ldrh	r3, [r3, #4]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_on_delay_ms)) >> 8;
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024b2:	889b      	ldrh	r3, [r3, #4]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Ignitor high duration
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 0;
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024c4:	88db      	ldrh	r3, [r3, #6]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024cc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] = ((uint16_t) (autosequence.ignition_ignitor_high_duration_ms)) >> 8;
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024d2:	88db      	ldrh	r3, [r3, #6]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024de:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// Fuel MPV on delay
	nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR + 0] = autosequence.hotfire_fuel_mpv_delay_ms;
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024e4:	7a1b      	ldrb	r3, [r3, #8]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024ea:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

	// Film cooling on time
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 0;
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024f0:	895b      	ldrh	r3, [r3, #10]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80024f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] = ((uint16_t) (autosequence.hotfire_film_cooling_on_time_ms)) >> 8;
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <save_nonvolatile_variables+0x674>)
 80024fe:	895b      	ldrh	r3, [r3, #10]
 8002500:	b29b      	uxth	r3, r3
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29b      	uxth	r3, r3
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 800250a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// PID start delay
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 0;
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <save_nonvolatile_variables+0x674>)
 8002510:	899b      	ldrh	r3, [r3, #12]
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002518:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] = ((uint16_t) (autosequence.hotfire_pid_start_delay_ms)) >> 8;
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <save_nonvolatile_variables+0x674>)
 800251e:	899b      	ldrh	r3, [r3, #12]
 8002520:	b29b      	uxth	r3, r3
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b29b      	uxth	r3, r3
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 800252a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

	// Initial motor position correction factor
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 0;
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <save_nonvolatile_variables+0x678>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80025c8 <save_nonvolatile_variables+0x67c>
 8002538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002540:	edc7 7a01 	vstr	s15, [r7, #4]
 8002544:	793a      	ldrb	r2, [r7, #4]
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002548:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 8;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <save_nonvolatile_variables+0x678>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80025c8 <save_nonvolatile_variables+0x67c>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002568:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 16;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <save_nonvolatile_variables+0x678>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025c8 <save_nonvolatile_variables+0x67c>
 8002576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257e:	ee17 3a90 	vmov	r3, s15
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 8002588:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] = ((uint32_t) (init_motor_pos_deg_correction_factor * 10000.0F)) >> 24;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <save_nonvolatile_variables+0x678>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80025c8 <save_nonvolatile_variables+0x67c>
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259e:	ee17 3a90 	vmov	r3, s15
 80025a2:	0e1b      	lsrs	r3, r3, #24
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <save_nonvolatile_variables+0x66c>)
 80025a8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	737b      	strb	r3, [r7, #13]
 80025b0:	e08e      	b.n	80026d0 <save_nonvolatile_variables+0x784>
 80025b2:	bf00      	nop
 80025b4:	200002f8 	.word	0x200002f8
 80025b8:	20000dc8 	.word	0x20000dc8
 80025bc:	200004fc 	.word	0x200004fc
 80025c0:	20000604 	.word	0x20000604
 80025c4:	20000420 	.word	0x20000420
 80025c8:	461c4000 	.word	0x461c4000
		// Lower output voltage
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 0;
 80025cc:	7b7b      	ldrb	r3, [r7, #13]
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <save_nonvolatile_variables+0x7ac>)
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e4:	ee17 3a90 	vmov	r3, s15
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	7b7b      	ldrb	r3, [r7, #13]
 80025ec:	335c      	adds	r3, #92	; 0x5c
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	b2d1      	uxtb	r1, r2
 80025f2:	4a42      	ldr	r2, [pc, #264]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 80025f4:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_lower_voltage[i] * 10.0F)) >> 8;
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	4a3f      	ldr	r2, [pc, #252]	; (80026f8 <save_nonvolatile_variables+0x7ac>)
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 3a90 	vmov	r3, s15
 8002612:	b29b      	uxth	r3, r3
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	b29a      	uxth	r2, r3
 8002618:	7b7b      	ldrb	r3, [r7, #13]
 800261a:	335c      	adds	r3, #92	; 0x5c
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3301      	adds	r3, #1
 8002620:	b2d1      	uxtb	r1, r2
 8002622:	4a36      	ldr	r2, [pc, #216]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 8002624:	54d1      	strb	r1, [r2, r3]

		// Upper output voltage
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 0;
 8002626:	7b7b      	ldrb	r3, [r7, #13]
 8002628:	4a35      	ldr	r2, [pc, #212]	; (8002700 <save_nonvolatile_variables+0x7b4>)
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
 8002642:	b29a      	uxth	r2, r3
 8002644:	7b7b      	ldrb	r3, [r7, #13]
 8002646:	3348      	adds	r3, #72	; 0x48
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	b2d1      	uxtb	r1, r2
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 800264e:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_voltage[i] * 10.0F)) >> 8;
 8002650:	7b7b      	ldrb	r3, [r7, #13]
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <save_nonvolatile_variables+0x7b4>)
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	b29b      	uxth	r3, r3
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	b29a      	uxth	r2, r3
 8002672:	7b7b      	ldrb	r3, [r7, #13]
 8002674:	3348      	adds	r3, #72	; 0x48
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	3301      	adds	r3, #1
 800267a:	b2d1      	uxtb	r1, r2
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 800267e:	54d1      	strb	r1, [r2, r3]

		// Pressure range
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 0;
 8002680:	7b7b      	ldrb	r3, [r7, #13]
 8002682:	4a20      	ldr	r2, [pc, #128]	; (8002704 <save_nonvolatile_variables+0x7b8>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002690:	ee17 3a90 	vmov	r3, s15
 8002694:	b29a      	uxth	r2, r3
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	3370      	adds	r3, #112	; 0x70
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	b2d1      	uxtb	r1, r2
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 80026a0:	54d1      	strb	r1, [r2, r3]
		nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] = ((uint16_t) (pt_cal_upper_pressure[i])) >> 8;
 80026a2:	7b7b      	ldrb	r3, [r7, #13]
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <save_nonvolatile_variables+0x7b8>)
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b2:	ee17 3a90 	vmov	r3, s15
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	7b7b      	ldrb	r3, [r7, #13]
 80026be:	3370      	adds	r3, #112	; 0x70
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	3301      	adds	r3, #1
 80026c4:	b2d1      	uxtb	r1, r2
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 80026c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80026ca:	7b7b      	ldrb	r3, [r7, #13]
 80026cc:	3301      	adds	r3, #1
 80026ce:	737b      	strb	r3, [r7, #13]
 80026d0:	7b7b      	ldrb	r3, [r7, #13]
 80026d2:	2b13      	cmp	r3, #19
 80026d4:	f67f af7a 	bls.w	80025cc <save_nonvolatile_variables+0x680>
	}

	// Overwrite previous values in flash
	erase_reserved_flash_pages(&flash);
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <save_nonvolatile_variables+0x7bc>)
 80026da:	f006 f937 	bl	800894c <erase_reserved_flash_pages>
	write_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 80026de:	23fe      	movs	r3, #254	; 0xfe
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <save_nonvolatile_variables+0x7b0>)
 80026e2:	2100      	movs	r1, #0
 80026e4:	4808      	ldr	r0, [pc, #32]	; (8002708 <save_nonvolatile_variables+0x7bc>)
 80026e6:	f006 f8f6 	bl	80088d6 <write_reserved_flash_page>
			NVM_BUFFER_SZ);

	// Ensure they got saved
	read_nonvolatile_variables();
 80026ea:	f7ff f9d9 	bl	8001aa0 <read_nonvolatile_variables>

	return 1;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000300 	.word	0x20000300
 80026fc:	20000dc8 	.word	0x20000dc8
 8002700:	20000350 	.word	0x20000350
 8002704:	200003a0 	.word	0x200003a0
 8002708:	20000ec8 	.word	0x20000ec8

0800270c <pack_calibration_data>:
/// pack_calibration_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/calibration_file_generator.py on Tue Aug  3 23:31:37 2021

#include "pack_calibration_defines.h"

void pack_calibration_data(uint8_t* dst){
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	*(dst + 0) = CALIBRATION_ITEM_0;
 8002714:	4bc9      	ldr	r3, [pc, #804]	; (8002a3c <pack_calibration_data+0x330>)
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800271e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	ee17 3a90 	vmov	r3, s15
 800272a:	b21b      	sxth	r3, r3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = CALIBRATION_ITEM_1;
 8002732:	4bc2      	ldr	r3, [pc, #776]	; (8002a3c <pack_calibration_data+0x330>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800273c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002744:	ee17 3a90 	vmov	r3, s15
 8002748:	b21b      	sxth	r3, r3
 800274a:	121b      	asrs	r3, r3, #8
 800274c:	b21a      	sxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = CALIBRATION_ITEM_2;
 8002756:	4bb9      	ldr	r3, [pc, #740]	; (8002a3c <pack_calibration_data+0x330>)
 8002758:	edd3 7a01 	vldr	s15, [r3, #4]
 800275c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002768:	ee17 3a90 	vmov	r3, s15
 800276c:	b21a      	sxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3302      	adds	r3, #2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = CALIBRATION_ITEM_3;
 8002776:	4bb1      	ldr	r3, [pc, #708]	; (8002a3c <pack_calibration_data+0x330>)
 8002778:	edd3 7a01 	vldr	s15, [r3, #4]
 800277c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002788:	ee17 3a90 	vmov	r3, s15
 800278c:	b21b      	sxth	r3, r3
 800278e:	121b      	asrs	r3, r3, #8
 8002790:	b21a      	sxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3303      	adds	r3, #3
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = CALIBRATION_ITEM_4;
 800279a:	4ba8      	ldr	r3, [pc, #672]	; (8002a3c <pack_calibration_data+0x330>)
 800279c:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ac:	ee17 3a90 	vmov	r3, s15
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = CALIBRATION_ITEM_5;
 80027ba:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <pack_calibration_data+0x330>)
 80027bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80027c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027cc:	ee17 3a90 	vmov	r3, s15
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	121b      	asrs	r3, r3, #8
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3305      	adds	r3, #5
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = CALIBRATION_ITEM_6;
 80027de:	4b97      	ldr	r3, [pc, #604]	; (8002a3c <pack_calibration_data+0x330>)
 80027e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f0:	ee17 3a90 	vmov	r3, s15
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3306      	adds	r3, #6
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = CALIBRATION_ITEM_7;
 80027fe:	4b8f      	ldr	r3, [pc, #572]	; (8002a3c <pack_calibration_data+0x330>)
 8002800:	edd3 7a03 	vldr	s15, [r3, #12]
 8002804:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002810:	ee17 3a90 	vmov	r3, s15
 8002814:	b21b      	sxth	r3, r3
 8002816:	121b      	asrs	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3307      	adds	r3, #7
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = CALIBRATION_ITEM_8;
 8002822:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <pack_calibration_data+0x330>)
 8002824:	edd3 7a04 	vldr	s15, [r3, #16]
 8002828:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	b21a      	sxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3308      	adds	r3, #8
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = CALIBRATION_ITEM_9;
 8002842:	4b7e      	ldr	r3, [pc, #504]	; (8002a3c <pack_calibration_data+0x330>)
 8002844:	edd3 7a04 	vldr	s15, [r3, #16]
 8002848:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002854:	ee17 3a90 	vmov	r3, s15
 8002858:	b21b      	sxth	r3, r3
 800285a:	121b      	asrs	r3, r3, #8
 800285c:	b21a      	sxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3309      	adds	r3, #9
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = CALIBRATION_ITEM_10;
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <pack_calibration_data+0x330>)
 8002868:	edd3 7a05 	vldr	s15, [r3, #20]
 800286c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002878:	ee17 3a90 	vmov	r3, s15
 800287c:	b21a      	sxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	330a      	adds	r3, #10
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = CALIBRATION_ITEM_11;
 8002886:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <pack_calibration_data+0x330>)
 8002888:	edd3 7a05 	vldr	s15, [r3, #20]
 800288c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002898:	ee17 3a90 	vmov	r3, s15
 800289c:	b21b      	sxth	r3, r3
 800289e:	121b      	asrs	r3, r3, #8
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	330b      	adds	r3, #11
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = CALIBRATION_ITEM_12;
 80028aa:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <pack_calibration_data+0x330>)
 80028ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80028b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028bc:	ee17 3a90 	vmov	r3, s15
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	330c      	adds	r3, #12
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = CALIBRATION_ITEM_13;
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <pack_calibration_data+0x330>)
 80028cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80028d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	121b      	asrs	r3, r3, #8
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	330d      	adds	r3, #13
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = CALIBRATION_ITEM_14;
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <pack_calibration_data+0x330>)
 80028f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80028f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	b21a      	sxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	330e      	adds	r3, #14
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = CALIBRATION_ITEM_15;
 800290e:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <pack_calibration_data+0x330>)
 8002910:	edd3 7a07 	vldr	s15, [r3, #28]
 8002914:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002920:	ee17 3a90 	vmov	r3, s15
 8002924:	b21b      	sxth	r3, r3
 8002926:	121b      	asrs	r3, r3, #8
 8002928:	b21a      	sxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	330f      	adds	r3, #15
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = CALIBRATION_ITEM_16;
 8002932:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <pack_calibration_data+0x330>)
 8002934:	edd3 7a08 	vldr	s15, [r3, #32]
 8002938:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800293c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002944:	ee17 3a90 	vmov	r3, s15
 8002948:	b21a      	sxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3310      	adds	r3, #16
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = CALIBRATION_ITEM_17;
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <pack_calibration_data+0x330>)
 8002954:	edd3 7a08 	vldr	s15, [r3, #32]
 8002958:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800295c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002964:	ee17 3a90 	vmov	r3, s15
 8002968:	b21b      	sxth	r3, r3
 800296a:	121b      	asrs	r3, r3, #8
 800296c:	b21a      	sxth	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3311      	adds	r3, #17
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = CALIBRATION_ITEM_18;
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <pack_calibration_data+0x330>)
 8002978:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800297c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002988:	ee17 3a90 	vmov	r3, s15
 800298c:	b21a      	sxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3312      	adds	r3, #18
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = CALIBRATION_ITEM_19;
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <pack_calibration_data+0x330>)
 8002998:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800299c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a8:	ee17 3a90 	vmov	r3, s15
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	121b      	asrs	r3, r3, #8
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3313      	adds	r3, #19
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = CALIBRATION_ITEM_20;
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <pack_calibration_data+0x330>)
 80029bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029cc:	ee17 3a90 	vmov	r3, s15
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3314      	adds	r3, #20
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = CALIBRATION_ITEM_21;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <pack_calibration_data+0x330>)
 80029dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ec:	ee17 3a90 	vmov	r3, s15
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	121b      	asrs	r3, r3, #8
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3315      	adds	r3, #21
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = CALIBRATION_ITEM_22;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <pack_calibration_data+0x330>)
 8002a00:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a10:	ee17 3a90 	vmov	r3, s15
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3316      	adds	r3, #22
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = CALIBRATION_ITEM_23;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <pack_calibration_data+0x330>)
 8002a20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	121b      	asrs	r3, r3, #8
 8002a38:	e002      	b.n	8002a40 <pack_calibration_data+0x334>
 8002a3a:	bf00      	nop
 8002a3c:	20000300 	.word	0x20000300
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3317      	adds	r3, #23
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = CALIBRATION_ITEM_24;
 8002a4a:	4bca      	ldr	r3, [pc, #808]	; (8002d74 <pack_calibration_data+0x668>)
 8002a4c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5c:	ee17 3a90 	vmov	r3, s15
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3318      	adds	r3, #24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = CALIBRATION_ITEM_25;
 8002a6a:	4bc2      	ldr	r3, [pc, #776]	; (8002d74 <pack_calibration_data+0x668>)
 8002a6c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a7c:	ee17 3a90 	vmov	r3, s15
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	121b      	asrs	r3, r3, #8
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3319      	adds	r3, #25
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = CALIBRATION_ITEM_26;
 8002a8e:	4bb9      	ldr	r3, [pc, #740]	; (8002d74 <pack_calibration_data+0x668>)
 8002a90:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002a94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa0:	ee17 3a90 	vmov	r3, s15
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	331a      	adds	r3, #26
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = CALIBRATION_ITEM_27;
 8002aae:	4bb1      	ldr	r3, [pc, #708]	; (8002d74 <pack_calibration_data+0x668>)
 8002ab0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002ab4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac0:	ee17 3a90 	vmov	r3, s15
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	121b      	asrs	r3, r3, #8
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	331b      	adds	r3, #27
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = CALIBRATION_ITEM_28;
 8002ad2:	4ba8      	ldr	r3, [pc, #672]	; (8002d74 <pack_calibration_data+0x668>)
 8002ad4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002ad8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae4:	ee17 3a90 	vmov	r3, s15
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	331c      	adds	r3, #28
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = CALIBRATION_ITEM_29;
 8002af2:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <pack_calibration_data+0x668>)
 8002af4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b04:	ee17 3a90 	vmov	r3, s15
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	121b      	asrs	r3, r3, #8
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	331d      	adds	r3, #29
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = CALIBRATION_ITEM_30;
 8002b16:	4b97      	ldr	r3, [pc, #604]	; (8002d74 <pack_calibration_data+0x668>)
 8002b18:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002b1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b28:	ee17 3a90 	vmov	r3, s15
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	331e      	adds	r3, #30
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = CALIBRATION_ITEM_31;
 8002b36:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <pack_calibration_data+0x668>)
 8002b38:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002b3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b48:	ee17 3a90 	vmov	r3, s15
 8002b4c:	b21b      	sxth	r3, r3
 8002b4e:	121b      	asrs	r3, r3, #8
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	331f      	adds	r3, #31
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = CALIBRATION_ITEM_32;
 8002b5a:	4b86      	ldr	r3, [pc, #536]	; (8002d74 <pack_calibration_data+0x668>)
 8002b5c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002b60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6c:	ee17 3a90 	vmov	r3, s15
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3320      	adds	r3, #32
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = CALIBRATION_ITEM_33;
 8002b7a:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <pack_calibration_data+0x668>)
 8002b7c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002b80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b8c:	ee17 3a90 	vmov	r3, s15
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	121b      	asrs	r3, r3, #8
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3321      	adds	r3, #33	; 0x21
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = CALIBRATION_ITEM_34;
 8002b9e:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <pack_calibration_data+0x668>)
 8002ba0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ba4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb0:	ee17 3a90 	vmov	r3, s15
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3322      	adds	r3, #34	; 0x22
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = CALIBRATION_ITEM_35;
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <pack_calibration_data+0x668>)
 8002bc0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd0:	ee17 3a90 	vmov	r3, s15
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	121b      	asrs	r3, r3, #8
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3323      	adds	r3, #35	; 0x23
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = CALIBRATION_ITEM_36;
 8002be2:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <pack_calibration_data+0x668>)
 8002be4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002be8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf4:	ee17 3a90 	vmov	r3, s15
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3324      	adds	r3, #36	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = CALIBRATION_ITEM_37;
 8002c02:	4b5c      	ldr	r3, [pc, #368]	; (8002d74 <pack_calibration_data+0x668>)
 8002c04:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c14:	ee17 3a90 	vmov	r3, s15
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	121b      	asrs	r3, r3, #8
 8002c1c:	b21a      	sxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3325      	adds	r3, #37	; 0x25
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = CALIBRATION_ITEM_38;
 8002c26:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <pack_calibration_data+0x668>)
 8002c28:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c38:	ee17 3a90 	vmov	r3, s15
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3326      	adds	r3, #38	; 0x26
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = CALIBRATION_ITEM_39;
 8002c46:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <pack_calibration_data+0x668>)
 8002c48:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c58:	ee17 3a90 	vmov	r3, s15
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	121b      	asrs	r3, r3, #8
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3327      	adds	r3, #39	; 0x27
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = CALIBRATION_ITEM_40;
 8002c6a:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <pack_calibration_data+0x668>)
 8002c6c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c7c:	ee17 3a90 	vmov	r3, s15
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3328      	adds	r3, #40	; 0x28
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = CALIBRATION_ITEM_41;
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <pack_calibration_data+0x668>)
 8002c8c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9c:	ee17 3a90 	vmov	r3, s15
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	121b      	asrs	r3, r3, #8
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3329      	adds	r3, #41	; 0x29
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = CALIBRATION_ITEM_42;
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <pack_calibration_data+0x668>)
 8002cb0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002cb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc0:	ee17 3a90 	vmov	r3, s15
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	332a      	adds	r3, #42	; 0x2a
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = CALIBRATION_ITEM_43;
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <pack_calibration_data+0x668>)
 8002cd0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002cd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ce0:	ee17 3a90 	vmov	r3, s15
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	121b      	asrs	r3, r3, #8
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	332b      	adds	r3, #43	; 0x2b
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = CALIBRATION_ITEM_44;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <pack_calibration_data+0x66c>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d04:	ee17 3a90 	vmov	r3, s15
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	332c      	adds	r3, #44	; 0x2c
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = CALIBRATION_ITEM_45;
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <pack_calibration_data+0x66c>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d24:	ee17 3a90 	vmov	r3, s15
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	121b      	asrs	r3, r3, #8
 8002d2c:	b21a      	sxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	332d      	adds	r3, #45	; 0x2d
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = CALIBRATION_ITEM_46;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <pack_calibration_data+0x66c>)
 8002d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d48:	ee17 3a90 	vmov	r3, s15
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	332e      	adds	r3, #46	; 0x2e
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = CALIBRATION_ITEM_47;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <pack_calibration_data+0x66c>)
 8002d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d68:	ee17 3a90 	vmov	r3, s15
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	121b      	asrs	r3, r3, #8
 8002d70:	e004      	b.n	8002d7c <pack_calibration_data+0x670>
 8002d72:	bf00      	nop
 8002d74:	20000300 	.word	0x20000300
 8002d78:	20000350 	.word	0x20000350
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	332f      	adds	r3, #47	; 0x2f
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = CALIBRATION_ITEM_48;
 8002d86:	4bca      	ldr	r3, [pc, #808]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = CALIBRATION_ITEM_49;
 8002da6:	4bc2      	ldr	r3, [pc, #776]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002da8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	121b      	asrs	r3, r3, #8
 8002dc0:	b21a      	sxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3331      	adds	r3, #49	; 0x31
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = CALIBRATION_ITEM_50;
 8002dca:	4bb9      	ldr	r3, [pc, #740]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002dcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ddc:	ee17 3a90 	vmov	r3, s15
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = CALIBRATION_ITEM_51;
 8002dea:	4bb1      	ldr	r3, [pc, #708]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002dec:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfc:	ee17 3a90 	vmov	r3, s15
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	121b      	asrs	r3, r3, #8
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3333      	adds	r3, #51	; 0x33
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = CALIBRATION_ITEM_52;
 8002e0e:	4ba8      	ldr	r3, [pc, #672]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002e10:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e20:	ee17 3a90 	vmov	r3, s15
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3334      	adds	r3, #52	; 0x34
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = CALIBRATION_ITEM_53;
 8002e2e:	4ba0      	ldr	r3, [pc, #640]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002e30:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e40:	ee17 3a90 	vmov	r3, s15
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	121b      	asrs	r3, r3, #8
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3335      	adds	r3, #53	; 0x35
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = CALIBRATION_ITEM_54;
 8002e52:	4b97      	ldr	r3, [pc, #604]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002e54:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e64:	ee17 3a90 	vmov	r3, s15
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3336      	adds	r3, #54	; 0x36
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = CALIBRATION_ITEM_55;
 8002e72:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002e74:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e84:	ee17 3a90 	vmov	r3, s15
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	121b      	asrs	r3, r3, #8
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3337      	adds	r3, #55	; 0x37
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = CALIBRATION_ITEM_56;
 8002e96:	4b86      	ldr	r3, [pc, #536]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002e98:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea8:	ee17 3a90 	vmov	r3, s15
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = CALIBRATION_ITEM_57;
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002eb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ebc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec8:	ee17 3a90 	vmov	r3, s15
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	121b      	asrs	r3, r3, #8
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3339      	adds	r3, #57	; 0x39
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = CALIBRATION_ITEM_58;
 8002eda:	4b75      	ldr	r3, [pc, #468]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002edc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eec:	ee17 3a90 	vmov	r3, s15
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	333a      	adds	r3, #58	; 0x3a
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = CALIBRATION_ITEM_59;
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002efc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0c:	ee17 3a90 	vmov	r3, s15
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	121b      	asrs	r3, r3, #8
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	333b      	adds	r3, #59	; 0x3b
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = CALIBRATION_ITEM_60;
 8002f1e:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002f20:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f30:	ee17 3a90 	vmov	r3, s15
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	333c      	adds	r3, #60	; 0x3c
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = CALIBRATION_ITEM_61;
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002f40:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f50:	ee17 3a90 	vmov	r3, s15
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	121b      	asrs	r3, r3, #8
 8002f58:	b21a      	sxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	333d      	adds	r3, #61	; 0x3d
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = CALIBRATION_ITEM_62;
 8002f62:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002f64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	333e      	adds	r3, #62	; 0x3e
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = CALIBRATION_ITEM_63;
 8002f82:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002f84:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f94:	ee17 3a90 	vmov	r3, s15
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	121b      	asrs	r3, r3, #8
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	333f      	adds	r3, #63	; 0x3f
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = CALIBRATION_ITEM_64;
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002fa8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002fac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb8:	ee17 3a90 	vmov	r3, s15
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3340      	adds	r3, #64	; 0x40
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = CALIBRATION_ITEM_65;
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002fc8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002fcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd8:	ee17 3a90 	vmov	r3, s15
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	121b      	asrs	r3, r3, #8
 8002fe0:	b21a      	sxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3341      	adds	r3, #65	; 0x41
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = CALIBRATION_ITEM_66;
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <pack_calibration_data+0x9a4>)
 8002fec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ff0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	b21a      	sxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3342      	adds	r3, #66	; 0x42
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = CALIBRATION_ITEM_67;
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <pack_calibration_data+0x9a4>)
 800300c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003010:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800301c:	ee17 3a90 	vmov	r3, s15
 8003020:	b21b      	sxth	r3, r3
 8003022:	121b      	asrs	r3, r3, #8
 8003024:	b21a      	sxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3343      	adds	r3, #67	; 0x43
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = CALIBRATION_ITEM_68;
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <pack_calibration_data+0x9a4>)
 8003030:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003034:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003040:	ee17 3a90 	vmov	r3, s15
 8003044:	b21a      	sxth	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3344      	adds	r3, #68	; 0x44
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = CALIBRATION_ITEM_69;
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <pack_calibration_data+0x9a4>)
 8003050:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003054:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003060:	ee17 3a90 	vmov	r3, s15
 8003064:	b21b      	sxth	r3, r3
 8003066:	121b      	asrs	r3, r3, #8
 8003068:	b21a      	sxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3345      	adds	r3, #69	; 0x45
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = CALIBRATION_ITEM_70;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <pack_calibration_data+0x9a4>)
 8003074:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800307c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003084:	ee17 3a90 	vmov	r3, s15
 8003088:	b21a      	sxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3346      	adds	r3, #70	; 0x46
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = CALIBRATION_ITEM_71;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <pack_calibration_data+0x9a4>)
 8003094:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003098:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800309c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a4:	ee17 3a90 	vmov	r3, s15
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	121b      	asrs	r3, r3, #8
 80030ac:	e002      	b.n	80030b4 <pack_calibration_data+0x9a8>
 80030ae:	bf00      	nop
 80030b0:	20000350 	.word	0x20000350
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3347      	adds	r3, #71	; 0x47
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = CALIBRATION_ITEM_72;
 80030be:	4bc6      	ldr	r3, [pc, #792]	; (80033d8 <pack_calibration_data+0xccc>)
 80030c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80030c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d0:	ee17 3a90 	vmov	r3, s15
 80030d4:	b21a      	sxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3348      	adds	r3, #72	; 0x48
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = CALIBRATION_ITEM_73;
 80030de:	4bbe      	ldr	r3, [pc, #760]	; (80033d8 <pack_calibration_data+0xccc>)
 80030e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80030e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030f0:	ee17 3a90 	vmov	r3, s15
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	121b      	asrs	r3, r3, #8
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3349      	adds	r3, #73	; 0x49
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = CALIBRATION_ITEM_74;
 8003102:	4bb5      	ldr	r3, [pc, #724]	; (80033d8 <pack_calibration_data+0xccc>)
 8003104:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800310c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003114:	ee17 3a90 	vmov	r3, s15
 8003118:	b21a      	sxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	334a      	adds	r3, #74	; 0x4a
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = CALIBRATION_ITEM_75;
 8003122:	4bad      	ldr	r3, [pc, #692]	; (80033d8 <pack_calibration_data+0xccc>)
 8003124:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003128:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800312c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003134:	ee17 3a90 	vmov	r3, s15
 8003138:	b21b      	sxth	r3, r3
 800313a:	121b      	asrs	r3, r3, #8
 800313c:	b21a      	sxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	334b      	adds	r3, #75	; 0x4b
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = CALIBRATION_ITEM_76;
 8003146:	4ba4      	ldr	r3, [pc, #656]	; (80033d8 <pack_calibration_data+0xccc>)
 8003148:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800314c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003158:	ee17 3a90 	vmov	r3, s15
 800315c:	b21a      	sxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	334c      	adds	r3, #76	; 0x4c
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = CALIBRATION_ITEM_77;
 8003166:	4b9c      	ldr	r3, [pc, #624]	; (80033d8 <pack_calibration_data+0xccc>)
 8003168:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800316c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003178:	ee17 3a90 	vmov	r3, s15
 800317c:	b21b      	sxth	r3, r3
 800317e:	121b      	asrs	r3, r3, #8
 8003180:	b21a      	sxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	334d      	adds	r3, #77	; 0x4d
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = CALIBRATION_ITEM_78;
 800318a:	4b93      	ldr	r3, [pc, #588]	; (80033d8 <pack_calibration_data+0xccc>)
 800318c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003190:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319c:	ee17 3a90 	vmov	r3, s15
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	334e      	adds	r3, #78	; 0x4e
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = CALIBRATION_ITEM_79;
 80031aa:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <pack_calibration_data+0xccc>)
 80031ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80031b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	121b      	asrs	r3, r3, #8
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	334f      	adds	r3, #79	; 0x4f
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = CALIBRATION_ITEM_80;
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <pack_calibration_data+0xccc>)
 80031d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80031d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e0:	ee17 3a90 	vmov	r3, s15
 80031e4:	b21a      	sxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3350      	adds	r3, #80	; 0x50
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = CALIBRATION_ITEM_81;
 80031ee:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <pack_calibration_data+0xccc>)
 80031f0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80031f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003200:	ee17 3a90 	vmov	r3, s15
 8003204:	b21b      	sxth	r3, r3
 8003206:	121b      	asrs	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3351      	adds	r3, #81	; 0x51
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = CALIBRATION_ITEM_82;
 8003212:	4b71      	ldr	r3, [pc, #452]	; (80033d8 <pack_calibration_data+0xccc>)
 8003214:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003218:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800321c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003224:	ee17 3a90 	vmov	r3, s15
 8003228:	b21a      	sxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3352      	adds	r3, #82	; 0x52
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = CALIBRATION_ITEM_83;
 8003232:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <pack_calibration_data+0xccc>)
 8003234:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003238:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800323c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003244:	ee17 3a90 	vmov	r3, s15
 8003248:	b21b      	sxth	r3, r3
 800324a:	121b      	asrs	r3, r3, #8
 800324c:	b21a      	sxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3353      	adds	r3, #83	; 0x53
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = CALIBRATION_ITEM_84;
 8003256:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <pack_calibration_data+0xccc>)
 8003258:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800325c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003268:	ee17 3a90 	vmov	r3, s15
 800326c:	b21a      	sxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3354      	adds	r3, #84	; 0x54
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = CALIBRATION_ITEM_85;
 8003276:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <pack_calibration_data+0xccc>)
 8003278:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800327c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	b21b      	sxth	r3, r3
 800328e:	121b      	asrs	r3, r3, #8
 8003290:	b21a      	sxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3355      	adds	r3, #85	; 0x55
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = CALIBRATION_ITEM_86;
 800329a:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <pack_calibration_data+0xccc>)
 800329c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ac:	ee17 3a90 	vmov	r3, s15
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3356      	adds	r3, #86	; 0x56
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = CALIBRATION_ITEM_87;
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <pack_calibration_data+0xccc>)
 80032bc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032cc:	ee17 3a90 	vmov	r3, s15
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	121b      	asrs	r3, r3, #8
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3357      	adds	r3, #87	; 0x57
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = CALIBRATION_ITEM_88;
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <pack_calibration_data+0xcd0>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	b21a      	sxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3358      	adds	r3, #88	; 0x58
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = CALIBRATION_ITEM_89;
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <pack_calibration_data+0xcd0>)
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003300:	ee17 3a90 	vmov	r3, s15
 8003304:	b21b      	sxth	r3, r3
 8003306:	121b      	asrs	r3, r3, #8
 8003308:	b21a      	sxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3359      	adds	r3, #89	; 0x59
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = CALIBRATION_ITEM_90;
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <pack_calibration_data+0xcd0>)
 8003314:	edd3 7a01 	vldr	s15, [r3, #4]
 8003318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331c:	ee17 3a90 	vmov	r3, s15
 8003320:	b21a      	sxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	335a      	adds	r3, #90	; 0x5a
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = CALIBRATION_ITEM_91;
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <pack_calibration_data+0xcd0>)
 800332c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003334:	ee17 3a90 	vmov	r3, s15
 8003338:	b21b      	sxth	r3, r3
 800333a:	121b      	asrs	r3, r3, #8
 800333c:	b21a      	sxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	335b      	adds	r3, #91	; 0x5b
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = CALIBRATION_ITEM_92;
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <pack_calibration_data+0xcd0>)
 8003348:	edd3 7a02 	vldr	s15, [r3, #8]
 800334c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003350:	ee17 3a90 	vmov	r3, s15
 8003354:	b21a      	sxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	335c      	adds	r3, #92	; 0x5c
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = CALIBRATION_ITEM_93;
 800335e:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <pack_calibration_data+0xcd0>)
 8003360:	edd3 7a02 	vldr	s15, [r3, #8]
 8003364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003368:	ee17 3a90 	vmov	r3, s15
 800336c:	b21b      	sxth	r3, r3
 800336e:	121b      	asrs	r3, r3, #8
 8003370:	b21a      	sxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	335d      	adds	r3, #93	; 0x5d
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = CALIBRATION_ITEM_94;
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <pack_calibration_data+0xcd0>)
 800337c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003384:	ee17 3a90 	vmov	r3, s15
 8003388:	b21a      	sxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	335e      	adds	r3, #94	; 0x5e
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = CALIBRATION_ITEM_95;
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <pack_calibration_data+0xcd0>)
 8003394:	edd3 7a03 	vldr	s15, [r3, #12]
 8003398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800339c:	ee17 3a90 	vmov	r3, s15
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	121b      	asrs	r3, r3, #8
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	335f      	adds	r3, #95	; 0x5f
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = CALIBRATION_ITEM_96;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <pack_calibration_data+0xcd0>)
 80033b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80033b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b8:	ee17 3a90 	vmov	r3, s15
 80033bc:	b21a      	sxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = CALIBRATION_ITEM_97;
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <pack_calibration_data+0xcd0>)
 80033c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 3a90 	vmov	r3, s15
 80033d4:	e004      	b.n	80033e0 <pack_calibration_data+0xcd4>
 80033d6:	bf00      	nop
 80033d8:	20000350 	.word	0x20000350
 80033dc:	200003a0 	.word	0x200003a0
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	121b      	asrs	r3, r3, #8
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3361      	adds	r3, #97	; 0x61
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = CALIBRATION_ITEM_98;
 80033ee:	4bbc      	ldr	r3, [pc, #752]	; (80036e0 <pack_calibration_data+0xfd4>)
 80033f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80033f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f8:	ee17 3a90 	vmov	r3, s15
 80033fc:	b21a      	sxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3362      	adds	r3, #98	; 0x62
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = CALIBRATION_ITEM_99;
 8003406:	4bb6      	ldr	r3, [pc, #728]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003408:	edd3 7a05 	vldr	s15, [r3, #20]
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 3a90 	vmov	r3, s15
 8003414:	b21b      	sxth	r3, r3
 8003416:	121b      	asrs	r3, r3, #8
 8003418:	b21a      	sxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3363      	adds	r3, #99	; 0x63
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = CALIBRATION_ITEM_100;
 8003422:	4baf      	ldr	r3, [pc, #700]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003424:	edd3 7a06 	vldr	s15, [r3, #24]
 8003428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342c:	ee17 3a90 	vmov	r3, s15
 8003430:	b21a      	sxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3364      	adds	r3, #100	; 0x64
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = CALIBRATION_ITEM_101;
 800343a:	4ba9      	ldr	r3, [pc, #676]	; (80036e0 <pack_calibration_data+0xfd4>)
 800343c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003444:	ee17 3a90 	vmov	r3, s15
 8003448:	b21b      	sxth	r3, r3
 800344a:	121b      	asrs	r3, r3, #8
 800344c:	b21a      	sxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3365      	adds	r3, #101	; 0x65
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = CALIBRATION_ITEM_102;
 8003456:	4ba2      	ldr	r3, [pc, #648]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003458:	edd3 7a07 	vldr	s15, [r3, #28]
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	b21a      	sxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3366      	adds	r3, #102	; 0x66
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = CALIBRATION_ITEM_103;
 800346e:	4b9c      	ldr	r3, [pc, #624]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003470:	edd3 7a07 	vldr	s15, [r3, #28]
 8003474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003478:	ee17 3a90 	vmov	r3, s15
 800347c:	b21b      	sxth	r3, r3
 800347e:	121b      	asrs	r3, r3, #8
 8003480:	b21a      	sxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3367      	adds	r3, #103	; 0x67
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = CALIBRATION_ITEM_104;
 800348a:	4b95      	ldr	r3, [pc, #596]	; (80036e0 <pack_calibration_data+0xfd4>)
 800348c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003494:	ee17 3a90 	vmov	r3, s15
 8003498:	b21a      	sxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3368      	adds	r3, #104	; 0x68
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = CALIBRATION_ITEM_105;
 80034a2:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <pack_calibration_data+0xfd4>)
 80034a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80034a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ac:	ee17 3a90 	vmov	r3, s15
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	121b      	asrs	r3, r3, #8
 80034b4:	b21a      	sxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3369      	adds	r3, #105	; 0x69
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = CALIBRATION_ITEM_106;
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <pack_calibration_data+0xfd4>)
 80034c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80034c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c8:	ee17 3a90 	vmov	r3, s15
 80034cc:	b21a      	sxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	336a      	adds	r3, #106	; 0x6a
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = CALIBRATION_ITEM_107;
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <pack_calibration_data+0xfd4>)
 80034d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e0:	ee17 3a90 	vmov	r3, s15
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	121b      	asrs	r3, r3, #8
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	336b      	adds	r3, #107	; 0x6b
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = CALIBRATION_ITEM_108;
 80034f2:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <pack_calibration_data+0xfd4>)
 80034f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80034f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fc:	ee17 3a90 	vmov	r3, s15
 8003500:	b21a      	sxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	336c      	adds	r3, #108	; 0x6c
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = CALIBRATION_ITEM_109;
 800350a:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <pack_calibration_data+0xfd4>)
 800350c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	b21b      	sxth	r3, r3
 800351a:	121b      	asrs	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	336d      	adds	r3, #109	; 0x6d
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
	*(dst + 110) = CALIBRATION_ITEM_110;
 8003526:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003528:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800352c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	b21a      	sxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	336e      	adds	r3, #110	; 0x6e
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = CALIBRATION_ITEM_111;
 800353e:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003540:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003548:	ee17 3a90 	vmov	r3, s15
 800354c:	b21b      	sxth	r3, r3
 800354e:	121b      	asrs	r3, r3, #8
 8003550:	b21a      	sxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	336f      	adds	r3, #111	; 0x6f
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = CALIBRATION_ITEM_112;
 800355a:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <pack_calibration_data+0xfd4>)
 800355c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003564:	ee17 3a90 	vmov	r3, s15
 8003568:	b21a      	sxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3370      	adds	r3, #112	; 0x70
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = CALIBRATION_ITEM_113;
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003574:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800357c:	ee17 3a90 	vmov	r3, s15
 8003580:	b21b      	sxth	r3, r3
 8003582:	121b      	asrs	r3, r3, #8
 8003584:	b21a      	sxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3371      	adds	r3, #113	; 0x71
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = CALIBRATION_ITEM_114;
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003590:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003598:	ee17 3a90 	vmov	r3, s15
 800359c:	b21a      	sxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3372      	adds	r3, #114	; 0x72
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = CALIBRATION_ITEM_115;
 80035a6:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <pack_calibration_data+0xfd4>)
 80035a8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80035ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b0:	ee17 3a90 	vmov	r3, s15
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	121b      	asrs	r3, r3, #8
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3373      	adds	r3, #115	; 0x73
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = CALIBRATION_ITEM_116;
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <pack_calibration_data+0xfd4>)
 80035c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 3a90 	vmov	r3, s15
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3374      	adds	r3, #116	; 0x74
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = CALIBRATION_ITEM_117;
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <pack_calibration_data+0xfd4>)
 80035dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e4:	ee17 3a90 	vmov	r3, s15
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	121b      	asrs	r3, r3, #8
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3375      	adds	r3, #117	; 0x75
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = CALIBRATION_ITEM_118;
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <pack_calibration_data+0xfd4>)
 80035f8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80035fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003600:	ee17 3a90 	vmov	r3, s15
 8003604:	b21a      	sxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3376      	adds	r3, #118	; 0x76
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = CALIBRATION_ITEM_119;
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003610:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003618:	ee17 3a90 	vmov	r3, s15
 800361c:	b21b      	sxth	r3, r3
 800361e:	121b      	asrs	r3, r3, #8
 8003620:	b21a      	sxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3377      	adds	r3, #119	; 0x77
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = CALIBRATION_ITEM_120;
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <pack_calibration_data+0xfd4>)
 800362c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003634:	ee17 3a90 	vmov	r3, s15
 8003638:	b21a      	sxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3378      	adds	r3, #120	; 0x78
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = CALIBRATION_ITEM_121;
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003644:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	b21b      	sxth	r3, r3
 8003652:	121b      	asrs	r3, r3, #8
 8003654:	b21a      	sxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3379      	adds	r3, #121	; 0x79
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = CALIBRATION_ITEM_122;
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003660:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003668:	ee17 3a90 	vmov	r3, s15
 800366c:	b21a      	sxth	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	337a      	adds	r3, #122	; 0x7a
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = CALIBRATION_ITEM_123;
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003678:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	b21b      	sxth	r3, r3
 8003686:	121b      	asrs	r3, r3, #8
 8003688:	b21a      	sxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	337b      	adds	r3, #123	; 0x7b
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = CALIBRATION_ITEM_124;
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <pack_calibration_data+0xfd4>)
 8003694:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369c:	ee17 3a90 	vmov	r3, s15
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	337c      	adds	r3, #124	; 0x7c
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = CALIBRATION_ITEM_125;
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <pack_calibration_data+0xfd4>)
 80036ac:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80036b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b4:	ee17 3a90 	vmov	r3, s15
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	121b      	asrs	r3, r3, #8
 80036bc:	b21a      	sxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	337d      	adds	r3, #125	; 0x7d
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = CALIBRATION_ITEM_126;
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <pack_calibration_data+0xfd4>)
 80036c8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80036cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d0:	ee17 3a90 	vmov	r3, s15
 80036d4:	b21a      	sxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	337e      	adds	r3, #126	; 0x7e
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e001      	b.n	80036e4 <pack_calibration_data+0xfd8>
 80036e0:	200003a0 	.word	0x200003a0
	*(dst + 127) = CALIBRATION_ITEM_127;
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <pack_calibration_data+0x1068>)
 80036e6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80036ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ee:	ee17 3a90 	vmov	r3, s15
 80036f2:	b21b      	sxth	r3, r3
 80036f4:	121b      	asrs	r3, r3, #8
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	337f      	adds	r3, #127	; 0x7f
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = CALIBRATION_ITEM_128;
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <pack_calibration_data+0x1068>)
 8003702:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800370a:	ee17 3a90 	vmov	r3, s15
 800370e:	b21a      	sxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3380      	adds	r3, #128	; 0x80
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = CALIBRATION_ITEM_129;
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <pack_calibration_data+0x1068>)
 800371a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003722:	ee17 3a90 	vmov	r3, s15
 8003726:	b21b      	sxth	r3, r3
 8003728:	121b      	asrs	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3381      	adds	r3, #129	; 0x81
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = CALIBRATION_ITEM_130;
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <pack_calibration_data+0x1068>)
 8003736:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800373a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373e:	ee17 3a90 	vmov	r3, s15
 8003742:	b21a      	sxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3382      	adds	r3, #130	; 0x82
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = CALIBRATION_ITEM_131;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <pack_calibration_data+0x1068>)
 800374e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003756:	ee17 3a90 	vmov	r3, s15
 800375a:	b21b      	sxth	r3, r3
 800375c:	121b      	asrs	r3, r3, #8
 800375e:	b21a      	sxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3383      	adds	r3, #131	; 0x83
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	200003a0 	.word	0x200003a0

08003778 <pack_telem_data>:
/// pack_telem_defines.c
/// Autogenerated by firmware-libraries/SerialComms/python/telem_file_generator.py on Fri Aug  6 01:55:37 2021

#include "pack_telem_defines.h"

void pack_telem_data(uint8_t* dst){
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	*(dst + 0) = TELEM_ITEM_0;
 8003780:	4bc5      	ldr	r3, [pc, #788]	; (8003a98 <pack_telem_data+0x320>)
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	701a      	strb	r2, [r3, #0]
	*(dst + 1) = TELEM_ITEM_1;
 8003788:	4bc4      	ldr	r3, [pc, #784]	; (8003a9c <pack_telem_data+0x324>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8003aa0 <pack_telem_data+0x328>
 8003792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800379a:	ee17 3a90 	vmov	r3, s15
 800379e:	b21a      	sxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
	*(dst + 2) = TELEM_ITEM_2;
 80037a8:	4bbc      	ldr	r3, [pc, #752]	; (8003a9c <pack_telem_data+0x324>)
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8003aa0 <pack_telem_data+0x328>
 80037b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ba:	ee17 3a90 	vmov	r3, s15
 80037be:	b21b      	sxth	r3, r3
 80037c0:	121b      	asrs	r3, r3, #8
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3302      	adds	r3, #2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
	*(dst + 3) = TELEM_ITEM_3;
 80037cc:	4bb5      	ldr	r3, [pc, #724]	; (8003aa4 <pack_telem_data+0x32c>)
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8003aa0 <pack_telem_data+0x328>
 80037d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037de:	ee17 3a90 	vmov	r3, s15
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3303      	adds	r3, #3
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
	*(dst + 4) = TELEM_ITEM_4;
 80037ec:	4bad      	ldr	r3, [pc, #692]	; (8003aa4 <pack_telem_data+0x32c>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8003aa0 <pack_telem_data+0x328>
 80037f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fe:	ee17 3a90 	vmov	r3, s15
 8003802:	b21b      	sxth	r3, r3
 8003804:	121b      	asrs	r3, r3, #8
 8003806:	b21a      	sxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
	*(dst + 5) = TELEM_ITEM_5;
 8003810:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <pack_telem_data+0x330>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3305      	adds	r3, #5
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
	*(dst + 6) = TELEM_ITEM_6;
 800381c:	4ba2      	ldr	r3, [pc, #648]	; (8003aa8 <pack_telem_data+0x330>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0a1a      	lsrs	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3306      	adds	r3, #6
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
	*(dst + 7) = TELEM_ITEM_7;
 800382a:	4b9f      	ldr	r3, [pc, #636]	; (8003aa8 <pack_telem_data+0x330>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0c1a      	lsrs	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3307      	adds	r3, #7
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
	*(dst + 8) = TELEM_ITEM_8;
 8003838:	4b9b      	ldr	r3, [pc, #620]	; (8003aa8 <pack_telem_data+0x330>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e1a      	lsrs	r2, r3, #24
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3308      	adds	r3, #8
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
	*(dst + 9) = TELEM_ITEM_9;
 8003846:	4b99      	ldr	r3, [pc, #612]	; (8003aac <pack_telem_data+0x334>)
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003aa0 <pack_telem_data+0x328>
 8003850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	b21a      	sxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3309      	adds	r3, #9
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
	*(dst + 10) = TELEM_ITEM_10;
 8003866:	4b91      	ldr	r3, [pc, #580]	; (8003aac <pack_telem_data+0x334>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003aa0 <pack_telem_data+0x328>
 8003870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	b21b      	sxth	r3, r3
 800387e:	121b      	asrs	r3, r3, #8
 8003880:	b21a      	sxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	330a      	adds	r3, #10
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
	*(dst + 11) = TELEM_ITEM_11;
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <pack_telem_data+0x338>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003aa0 <pack_telem_data+0x328>
 8003894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800389c:	ee17 3a90 	vmov	r3, s15
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	330b      	adds	r3, #11
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
	*(dst + 12) = TELEM_ITEM_12;
 80038aa:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <pack_telem_data+0x338>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003aa0 <pack_telem_data+0x328>
 80038b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038bc:	ee17 3a90 	vmov	r3, s15
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	121b      	asrs	r3, r3, #8
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	330c      	adds	r3, #12
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
	*(dst + 13) = TELEM_ITEM_13;
 80038ce:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <pack_telem_data+0x33c>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003aa0 <pack_telem_data+0x328>
 80038d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	330d      	adds	r3, #13
 80038e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e4:	edc7 7a00 	vstr	s15, [r7]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
	*(dst + 14) = TELEM_ITEM_14;
 80038ee:	4b72      	ldr	r3, [pc, #456]	; (8003ab8 <pack_telem_data+0x340>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003aa0 <pack_telem_data+0x328>
 80038f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	330e      	adds	r3, #14
 8003900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003904:	edc7 7a00 	vstr	s15, [r7]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
	*(dst + 15) = TELEM_ITEM_15;
 800390e:	4b6b      	ldr	r3, [pc, #428]	; (8003abc <pack_telem_data+0x344>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	330f      	adds	r3, #15
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
	*(dst + 16) = TELEM_ITEM_16;
 800391a:	4b68      	ldr	r3, [pc, #416]	; (8003abc <pack_telem_data+0x344>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0a1a      	lsrs	r2, r3, #8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3310      	adds	r3, #16
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]
	*(dst + 17) = TELEM_ITEM_17;
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <pack_telem_data+0x344>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0c1a      	lsrs	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3311      	adds	r3, #17
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
	*(dst + 18) = TELEM_ITEM_18;
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <pack_telem_data+0x344>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e1a      	lsrs	r2, r3, #24
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3312      	adds	r3, #18
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
	*(dst + 19) = TELEM_ITEM_19;
 8003944:	4b5e      	ldr	r3, [pc, #376]	; (8003ac0 <pack_telem_data+0x348>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800394e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003956:	edc7 7a00 	vstr	s15, [r7]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3313      	adds	r3, #19
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
	*(dst + 20) = TELEM_ITEM_20;
 8003964:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <pack_telem_data+0x348>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800396e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003976:	ee17 3a90 	vmov	r3, s15
 800397a:	121a      	asrs	r2, r3, #8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3314      	adds	r3, #20
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]
	*(dst + 21) = TELEM_ITEM_21;
 8003984:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <pack_telem_data+0x348>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800398e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003996:	ee17 3a90 	vmov	r3, s15
 800399a:	141a      	asrs	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3315      	adds	r3, #21
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
	*(dst + 22) = TELEM_ITEM_22;
 80039a4:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <pack_telem_data+0x348>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b6:	ee17 3a90 	vmov	r3, s15
 80039ba:	161a      	asrs	r2, r3, #24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3316      	adds	r3, #22
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
	*(dst + 23) = TELEM_ITEM_23;
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <pack_telem_data+0x348>)
 80039c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039d6:	edc7 7a00 	vstr	s15, [r7]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3317      	adds	r3, #23
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
	*(dst + 24) = TELEM_ITEM_24;
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <pack_telem_data+0x348>)
 80039e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f6:	ee17 3a90 	vmov	r3, s15
 80039fa:	121a      	asrs	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3318      	adds	r3, #24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
	*(dst + 25) = TELEM_ITEM_25;
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <pack_telem_data+0x348>)
 8003a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a16:	ee17 3a90 	vmov	r3, s15
 8003a1a:	141a      	asrs	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3319      	adds	r3, #25
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]
	*(dst + 26) = TELEM_ITEM_26;
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <pack_telem_data+0x348>)
 8003a26:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a36:	ee17 3a90 	vmov	r3, s15
 8003a3a:	161a      	asrs	r2, r3, #24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	331a      	adds	r3, #26
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
	*(dst + 27) = TELEM_ITEM_27;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <pack_telem_data+0x348>)
 8003a46:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a56:	edc7 7a00 	vstr	s15, [r7]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	331b      	adds	r3, #27
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]
	*(dst + 28) = TELEM_ITEM_28;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <pack_telem_data+0x348>)
 8003a66:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a76:	ee17 3a90 	vmov	r3, s15
 8003a7a:	121a      	asrs	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	331c      	adds	r3, #28
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
	*(dst + 29) = TELEM_ITEM_29;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <pack_telem_data+0x348>)
 8003a86:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a96:	e015      	b.n	8003ac4 <pack_telem_data+0x34c>
 8003a98:	200003f0 	.word	0x200003f0
 8003a9c:	200003f4 	.word	0x200003f4
 8003aa0:	42c80000 	.word	0x42c80000
 8003aa4:	200003f8 	.word	0x200003f8
 8003aa8:	200003fc 	.word	0x200003fc
 8003aac:	20000400 	.word	0x20000400
 8003ab0:	20000404 	.word	0x20000404
 8003ab4:	20000408 	.word	0x20000408
 8003ab8:	2000040c 	.word	0x2000040c
 8003abc:	20000410 	.word	0x20000410
 8003ac0:	20000434 	.word	0x20000434
 8003ac4:	ee17 3a90 	vmov	r3, s15
 8003ac8:	141a      	asrs	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	331d      	adds	r3, #29
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
	*(dst + 30) = TELEM_ITEM_30;
 8003ad2:	4bd3      	ldr	r3, [pc, #844]	; (8003e20 <pack_telem_data+0x6a8>)
 8003ad4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ad8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae4:	ee17 3a90 	vmov	r3, s15
 8003ae8:	161a      	asrs	r2, r3, #24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	331e      	adds	r3, #30
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
	*(dst + 31) = TELEM_ITEM_31;
 8003af2:	4bcb      	ldr	r3, [pc, #812]	; (8003e20 <pack_telem_data+0x6a8>)
 8003af4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b04:	edc7 7a00 	vstr	s15, [r7]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	331f      	adds	r3, #31
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
	*(dst + 32) = TELEM_ITEM_32;
 8003b12:	4bc3      	ldr	r3, [pc, #780]	; (8003e20 <pack_telem_data+0x6a8>)
 8003b14:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b24:	ee17 3a90 	vmov	r3, s15
 8003b28:	121a      	asrs	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3320      	adds	r3, #32
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
	*(dst + 33) = TELEM_ITEM_33;
 8003b32:	4bbb      	ldr	r3, [pc, #748]	; (8003e20 <pack_telem_data+0x6a8>)
 8003b34:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b44:	ee17 3a90 	vmov	r3, s15
 8003b48:	141a      	asrs	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3321      	adds	r3, #33	; 0x21
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
	*(dst + 34) = TELEM_ITEM_34;
 8003b52:	4bb3      	ldr	r3, [pc, #716]	; (8003e20 <pack_telem_data+0x6a8>)
 8003b54:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b64:	ee17 3a90 	vmov	r3, s15
 8003b68:	161a      	asrs	r2, r3, #24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3322      	adds	r3, #34	; 0x22
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
	*(dst + 35) = TELEM_ITEM_35;
 8003b72:	4bab      	ldr	r3, [pc, #684]	; (8003e20 <pack_telem_data+0x6a8>)
 8003b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b84:	edc7 7a00 	vstr	s15, [r7]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3323      	adds	r3, #35	; 0x23
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
	*(dst + 36) = TELEM_ITEM_36;
 8003b92:	4ba3      	ldr	r3, [pc, #652]	; (8003e20 <pack_telem_data+0x6a8>)
 8003b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	ee17 3a90 	vmov	r3, s15
 8003ba8:	121a      	asrs	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
	*(dst + 37) = TELEM_ITEM_37;
 8003bb2:	4b9b      	ldr	r3, [pc, #620]	; (8003e20 <pack_telem_data+0x6a8>)
 8003bb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc4:	ee17 3a90 	vmov	r3, s15
 8003bc8:	141a      	asrs	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3325      	adds	r3, #37	; 0x25
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
	*(dst + 38) = TELEM_ITEM_38;
 8003bd2:	4b93      	ldr	r3, [pc, #588]	; (8003e20 <pack_telem_data+0x6a8>)
 8003bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be4:	ee17 3a90 	vmov	r3, s15
 8003be8:	161a      	asrs	r2, r3, #24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3326      	adds	r3, #38	; 0x26
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
	*(dst + 39) = TELEM_ITEM_39;
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <pack_telem_data+0x6a8>)
 8003bf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bf8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c04:	edc7 7a00 	vstr	s15, [r7]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3327      	adds	r3, #39	; 0x27
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
	*(dst + 40) = TELEM_ITEM_40;
 8003c12:	4b83      	ldr	r3, [pc, #524]	; (8003e20 <pack_telem_data+0x6a8>)
 8003c14:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	121a      	asrs	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
	*(dst + 41) = TELEM_ITEM_41;
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <pack_telem_data+0x6a8>)
 8003c34:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c44:	ee17 3a90 	vmov	r3, s15
 8003c48:	141a      	asrs	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3329      	adds	r3, #41	; 0x29
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
	*(dst + 42) = TELEM_ITEM_42;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <pack_telem_data+0x6a8>)
 8003c54:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c64:	ee17 3a90 	vmov	r3, s15
 8003c68:	161a      	asrs	r2, r3, #24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	332a      	adds	r3, #42	; 0x2a
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
	*(dst + 43) = TELEM_ITEM_43;
 8003c72:	4b6b      	ldr	r3, [pc, #428]	; (8003e20 <pack_telem_data+0x6a8>)
 8003c74:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	332b      	adds	r3, #43	; 0x2b
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
	*(dst + 44) = TELEM_ITEM_44;
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <pack_telem_data+0x6a8>)
 8003c94:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca4:	ee17 3a90 	vmov	r3, s15
 8003ca8:	121a      	asrs	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	332c      	adds	r3, #44	; 0x2c
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
	*(dst + 45) = TELEM_ITEM_45;
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <pack_telem_data+0x6a8>)
 8003cb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc4:	ee17 3a90 	vmov	r3, s15
 8003cc8:	141a      	asrs	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	332d      	adds	r3, #45	; 0x2d
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
	*(dst + 46) = TELEM_ITEM_46;
 8003cd2:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <pack_telem_data+0x6a8>)
 8003cd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce4:	ee17 3a90 	vmov	r3, s15
 8003ce8:	161a      	asrs	r2, r3, #24
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	332e      	adds	r3, #46	; 0x2e
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
	*(dst + 47) = TELEM_ITEM_47;
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <pack_telem_data+0x6a8>)
 8003cf4:	edd3 7a07 	vldr	s15, [r3, #28]
 8003cf8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d04:	edc7 7a00 	vstr	s15, [r7]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	332f      	adds	r3, #47	; 0x2f
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
	*(dst + 48) = TELEM_ITEM_48;
 8003d12:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <pack_telem_data+0x6a8>)
 8003d14:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d24:	ee17 3a90 	vmov	r3, s15
 8003d28:	121a      	asrs	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3330      	adds	r3, #48	; 0x30
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
	*(dst + 49) = TELEM_ITEM_49;
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <pack_telem_data+0x6a8>)
 8003d34:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	141a      	asrs	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3331      	adds	r3, #49	; 0x31
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
	*(dst + 50) = TELEM_ITEM_50;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <pack_telem_data+0x6a8>)
 8003d54:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d64:	ee17 3a90 	vmov	r3, s15
 8003d68:	161a      	asrs	r2, r3, #24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
	*(dst + 51) = TELEM_ITEM_51;
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <pack_telem_data+0x6a8>)
 8003d74:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d84:	edc7 7a00 	vstr	s15, [r7]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3333      	adds	r3, #51	; 0x33
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
	*(dst + 52) = TELEM_ITEM_52;
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <pack_telem_data+0x6a8>)
 8003d94:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da4:	ee17 3a90 	vmov	r3, s15
 8003da8:	121a      	asrs	r2, r3, #8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3334      	adds	r3, #52	; 0x34
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
	*(dst + 53) = TELEM_ITEM_53;
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <pack_telem_data+0x6a8>)
 8003db4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003db8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc4:	ee17 3a90 	vmov	r3, s15
 8003dc8:	141a      	asrs	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3335      	adds	r3, #53	; 0x35
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
	*(dst + 54) = TELEM_ITEM_54;
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <pack_telem_data+0x6a8>)
 8003dd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003dd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de4:	ee17 3a90 	vmov	r3, s15
 8003de8:	161a      	asrs	r2, r3, #24
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3336      	adds	r3, #54	; 0x36
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]
	*(dst + 55) = TELEM_ITEM_55;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <pack_telem_data+0x6a8>)
 8003df4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003df8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e04:	edc7 7a00 	vstr	s15, [r7]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3337      	adds	r3, #55	; 0x37
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
	*(dst + 56) = TELEM_ITEM_56;
 8003e12:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <pack_telem_data+0x6a8>)
 8003e14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003e18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e1c:	e002      	b.n	8003e24 <pack_telem_data+0x6ac>
 8003e1e:	bf00      	nop
 8003e20:	20000434 	.word	0x20000434
 8003e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e2c:	ee17 3a90 	vmov	r3, s15
 8003e30:	121a      	asrs	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3338      	adds	r3, #56	; 0x38
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
	*(dst + 57) = TELEM_ITEM_57;
 8003e3a:	4bd4      	ldr	r3, [pc, #848]	; (800418c <pack_telem_data+0xa14>)
 8003e3c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003e40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e4c:	ee17 3a90 	vmov	r3, s15
 8003e50:	141a      	asrs	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3339      	adds	r3, #57	; 0x39
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
	*(dst + 58) = TELEM_ITEM_58;
 8003e5a:	4bcc      	ldr	r3, [pc, #816]	; (800418c <pack_telem_data+0xa14>)
 8003e5c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003e60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e6c:	ee17 3a90 	vmov	r3, s15
 8003e70:	161a      	asrs	r2, r3, #24
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	333a      	adds	r3, #58	; 0x3a
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
	*(dst + 59) = TELEM_ITEM_59;
 8003e7a:	4bc4      	ldr	r3, [pc, #784]	; (800418c <pack_telem_data+0xa14>)
 8003e7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003e80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e8c:	edc7 7a00 	vstr	s15, [r7]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	333b      	adds	r3, #59	; 0x3b
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
	*(dst + 60) = TELEM_ITEM_60;
 8003e9a:	4bbc      	ldr	r3, [pc, #752]	; (800418c <pack_telem_data+0xa14>)
 8003e9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ea0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eac:	ee17 3a90 	vmov	r3, s15
 8003eb0:	121a      	asrs	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	333c      	adds	r3, #60	; 0x3c
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
	*(dst + 61) = TELEM_ITEM_61;
 8003eba:	4bb4      	ldr	r3, [pc, #720]	; (800418c <pack_telem_data+0xa14>)
 8003ebc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ec0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ecc:	ee17 3a90 	vmov	r3, s15
 8003ed0:	141a      	asrs	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	333d      	adds	r3, #61	; 0x3d
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
	*(dst + 62) = TELEM_ITEM_62;
 8003eda:	4bac      	ldr	r3, [pc, #688]	; (800418c <pack_telem_data+0xa14>)
 8003edc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ee0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	161a      	asrs	r2, r3, #24
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	333e      	adds	r3, #62	; 0x3e
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
	*(dst + 63) = TELEM_ITEM_63;
 8003efa:	4ba4      	ldr	r3, [pc, #656]	; (800418c <pack_telem_data+0xa14>)
 8003efc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f0c:	edc7 7a00 	vstr	s15, [r7]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	333f      	adds	r3, #63	; 0x3f
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
	*(dst + 64) = TELEM_ITEM_64;
 8003f1a:	4b9c      	ldr	r3, [pc, #624]	; (800418c <pack_telem_data+0xa14>)
 8003f1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f2c:	ee17 3a90 	vmov	r3, s15
 8003f30:	121a      	asrs	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3340      	adds	r3, #64	; 0x40
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
	*(dst + 65) = TELEM_ITEM_65;
 8003f3a:	4b94      	ldr	r3, [pc, #592]	; (800418c <pack_telem_data+0xa14>)
 8003f3c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f4c:	ee17 3a90 	vmov	r3, s15
 8003f50:	141a      	asrs	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3341      	adds	r3, #65	; 0x41
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
	*(dst + 66) = TELEM_ITEM_66;
 8003f5a:	4b8c      	ldr	r3, [pc, #560]	; (800418c <pack_telem_data+0xa14>)
 8003f5c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6c:	ee17 3a90 	vmov	r3, s15
 8003f70:	161a      	asrs	r2, r3, #24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3342      	adds	r3, #66	; 0x42
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
	*(dst + 67) = TELEM_ITEM_67;
 8003f7a:	4b84      	ldr	r3, [pc, #528]	; (800418c <pack_telem_data+0xa14>)
 8003f7c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8c:	edc7 7a00 	vstr	s15, [r7]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3343      	adds	r3, #67	; 0x43
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]
	*(dst + 68) = TELEM_ITEM_68;
 8003f9a:	4b7c      	ldr	r3, [pc, #496]	; (800418c <pack_telem_data+0xa14>)
 8003f9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003fa0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fac:	ee17 3a90 	vmov	r3, s15
 8003fb0:	121a      	asrs	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3344      	adds	r3, #68	; 0x44
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
	*(dst + 69) = TELEM_ITEM_69;
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <pack_telem_data+0xa14>)
 8003fbc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003fc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	141a      	asrs	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3345      	adds	r3, #69	; 0x45
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
	*(dst + 70) = TELEM_ITEM_70;
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <pack_telem_data+0xa14>)
 8003fdc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003fe0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fec:	ee17 3a90 	vmov	r3, s15
 8003ff0:	161a      	asrs	r2, r3, #24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3346      	adds	r3, #70	; 0x46
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
	*(dst + 71) = TELEM_ITEM_71;
 8003ffa:	4b64      	ldr	r3, [pc, #400]	; (800418c <pack_telem_data+0xa14>)
 8003ffc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004000:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800400c:	edc7 7a00 	vstr	s15, [r7]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3347      	adds	r3, #71	; 0x47
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
	*(dst + 72) = TELEM_ITEM_72;
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <pack_telem_data+0xa14>)
 800401c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004020:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800402c:	ee17 3a90 	vmov	r3, s15
 8004030:	121a      	asrs	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3348      	adds	r3, #72	; 0x48
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
	*(dst + 73) = TELEM_ITEM_73;
 800403a:	4b54      	ldr	r3, [pc, #336]	; (800418c <pack_telem_data+0xa14>)
 800403c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004040:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404c:	ee17 3a90 	vmov	r3, s15
 8004050:	141a      	asrs	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3349      	adds	r3, #73	; 0x49
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
	*(dst + 74) = TELEM_ITEM_74;
 800405a:	4b4c      	ldr	r3, [pc, #304]	; (800418c <pack_telem_data+0xa14>)
 800405c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004060:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	161a      	asrs	r2, r3, #24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	334a      	adds	r3, #74	; 0x4a
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
	*(dst + 75) = TELEM_ITEM_75;
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <pack_telem_data+0xa14>)
 800407c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800408c:	edc7 7a00 	vstr	s15, [r7]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	334b      	adds	r3, #75	; 0x4b
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
	*(dst + 76) = TELEM_ITEM_76;
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <pack_telem_data+0xa14>)
 800409c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80040a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ac:	ee17 3a90 	vmov	r3, s15
 80040b0:	121a      	asrs	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	334c      	adds	r3, #76	; 0x4c
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
	*(dst + 77) = TELEM_ITEM_77;
 80040ba:	4b34      	ldr	r3, [pc, #208]	; (800418c <pack_telem_data+0xa14>)
 80040bc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80040c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040cc:	ee17 3a90 	vmov	r3, s15
 80040d0:	141a      	asrs	r2, r3, #16
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	334d      	adds	r3, #77	; 0x4d
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
	*(dst + 78) = TELEM_ITEM_78;
 80040da:	4b2c      	ldr	r3, [pc, #176]	; (800418c <pack_telem_data+0xa14>)
 80040dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80040e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ec:	ee17 3a90 	vmov	r3, s15
 80040f0:	161a      	asrs	r2, r3, #24
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	334e      	adds	r3, #78	; 0x4e
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
	*(dst + 79) = TELEM_ITEM_79;
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <pack_telem_data+0xa14>)
 80040fc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004100:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800410c:	edc7 7a00 	vstr	s15, [r7]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	334f      	adds	r3, #79	; 0x4f
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
	*(dst + 80) = TELEM_ITEM_80;
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <pack_telem_data+0xa14>)
 800411c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004120:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412c:	ee17 3a90 	vmov	r3, s15
 8004130:	121a      	asrs	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3350      	adds	r3, #80	; 0x50
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
	*(dst + 81) = TELEM_ITEM_81;
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <pack_telem_data+0xa14>)
 800413c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004140:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414c:	ee17 3a90 	vmov	r3, s15
 8004150:	141a      	asrs	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3351      	adds	r3, #81	; 0x51
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
	*(dst + 82) = TELEM_ITEM_82;
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <pack_telem_data+0xa14>)
 800415c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004160:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416c:	ee17 3a90 	vmov	r3, s15
 8004170:	161a      	asrs	r2, r3, #24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3352      	adds	r3, #82	; 0x52
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
	*(dst + 83) = TELEM_ITEM_83;
 800417a:	4b04      	ldr	r3, [pc, #16]	; (800418c <pack_telem_data+0xa14>)
 800417c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004180:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004188:	e002      	b.n	8004190 <pack_telem_data+0xa18>
 800418a:	bf00      	nop
 800418c:	20000434 	.word	0x20000434
 8004190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004194:	edc7 7a00 	vstr	s15, [r7]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3353      	adds	r3, #83	; 0x53
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
	*(dst + 84) = TELEM_ITEM_84;
 80041a2:	4bd0      	ldr	r3, [pc, #832]	; (80044e4 <pack_telem_data+0xd6c>)
 80041a4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80041a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b4:	ee17 3a90 	vmov	r3, s15
 80041b8:	121a      	asrs	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3354      	adds	r3, #84	; 0x54
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
	*(dst + 85) = TELEM_ITEM_85;
 80041c2:	4bc8      	ldr	r3, [pc, #800]	; (80044e4 <pack_telem_data+0xd6c>)
 80041c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80041c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d4:	ee17 3a90 	vmov	r3, s15
 80041d8:	141a      	asrs	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3355      	adds	r3, #85	; 0x55
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
	*(dst + 86) = TELEM_ITEM_86;
 80041e2:	4bc0      	ldr	r3, [pc, #768]	; (80044e4 <pack_telem_data+0xd6c>)
 80041e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80041e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041f4:	ee17 3a90 	vmov	r3, s15
 80041f8:	161a      	asrs	r2, r3, #24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3356      	adds	r3, #86	; 0x56
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
	*(dst + 87) = TELEM_ITEM_87;
 8004202:	4bb8      	ldr	r3, [pc, #736]	; (80044e4 <pack_telem_data+0xd6c>)
 8004204:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004208:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800420c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004214:	edc7 7a00 	vstr	s15, [r7]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3357      	adds	r3, #87	; 0x57
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
	*(dst + 88) = TELEM_ITEM_88;
 8004222:	4bb0      	ldr	r3, [pc, #704]	; (80044e4 <pack_telem_data+0xd6c>)
 8004224:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004228:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800422c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004234:	ee17 3a90 	vmov	r3, s15
 8004238:	121a      	asrs	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3358      	adds	r3, #88	; 0x58
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
	*(dst + 89) = TELEM_ITEM_89;
 8004242:	4ba8      	ldr	r3, [pc, #672]	; (80044e4 <pack_telem_data+0xd6c>)
 8004244:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004248:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800424c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004254:	ee17 3a90 	vmov	r3, s15
 8004258:	141a      	asrs	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3359      	adds	r3, #89	; 0x59
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
	*(dst + 90) = TELEM_ITEM_90;
 8004262:	4ba0      	ldr	r3, [pc, #640]	; (80044e4 <pack_telem_data+0xd6c>)
 8004264:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004268:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800426c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004274:	ee17 3a90 	vmov	r3, s15
 8004278:	161a      	asrs	r2, r3, #24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	335a      	adds	r3, #90	; 0x5a
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
	*(dst + 91) = TELEM_ITEM_91;
 8004282:	4b98      	ldr	r3, [pc, #608]	; (80044e4 <pack_telem_data+0xd6c>)
 8004284:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004288:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800428c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004294:	edc7 7a00 	vstr	s15, [r7]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	335b      	adds	r3, #91	; 0x5b
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
	*(dst + 92) = TELEM_ITEM_92;
 80042a2:	4b90      	ldr	r3, [pc, #576]	; (80044e4 <pack_telem_data+0xd6c>)
 80042a4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80042a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042b4:	ee17 3a90 	vmov	r3, s15
 80042b8:	121a      	asrs	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	335c      	adds	r3, #92	; 0x5c
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
	*(dst + 93) = TELEM_ITEM_93;
 80042c2:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <pack_telem_data+0xd6c>)
 80042c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80042c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d4:	ee17 3a90 	vmov	r3, s15
 80042d8:	141a      	asrs	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	335d      	adds	r3, #93	; 0x5d
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
	*(dst + 94) = TELEM_ITEM_94;
 80042e2:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <pack_telem_data+0xd6c>)
 80042e4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80042e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042f4:	ee17 3a90 	vmov	r3, s15
 80042f8:	161a      	asrs	r2, r3, #24
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	335e      	adds	r3, #94	; 0x5e
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
	*(dst + 95) = TELEM_ITEM_95;
 8004302:	4b78      	ldr	r3, [pc, #480]	; (80044e4 <pack_telem_data+0xd6c>)
 8004304:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004308:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800430c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004314:	edc7 7a00 	vstr	s15, [r7]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	335f      	adds	r3, #95	; 0x5f
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
	*(dst + 96) = TELEM_ITEM_96;
 8004322:	4b70      	ldr	r3, [pc, #448]	; (80044e4 <pack_telem_data+0xd6c>)
 8004324:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004328:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800432c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004334:	ee17 3a90 	vmov	r3, s15
 8004338:	121a      	asrs	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3360      	adds	r3, #96	; 0x60
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
	*(dst + 97) = TELEM_ITEM_97;
 8004342:	4b68      	ldr	r3, [pc, #416]	; (80044e4 <pack_telem_data+0xd6c>)
 8004344:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004348:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800434c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004354:	ee17 3a90 	vmov	r3, s15
 8004358:	141a      	asrs	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3361      	adds	r3, #97	; 0x61
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
	*(dst + 98) = TELEM_ITEM_98;
 8004362:	4b60      	ldr	r3, [pc, #384]	; (80044e4 <pack_telem_data+0xd6c>)
 8004364:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004368:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800436c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004374:	ee17 3a90 	vmov	r3, s15
 8004378:	161a      	asrs	r2, r3, #24
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3362      	adds	r3, #98	; 0x62
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
	*(dst + 99) = TELEM_ITEM_99;
 8004382:	4b59      	ldr	r3, [pc, #356]	; (80044e8 <pack_telem_data+0xd70>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800438c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3363      	adds	r3, #99	; 0x63
 8004394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004398:	edc7 7a00 	vstr	s15, [r7]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
	*(dst + 100) = TELEM_ITEM_100;
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <pack_telem_data+0xd70>)
 80043a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80043a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3364      	adds	r3, #100	; 0x64
 80043b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b8:	edc7 7a00 	vstr	s15, [r7]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
	*(dst + 101) = TELEM_ITEM_101;
 80043c2:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <pack_telem_data+0xd70>)
 80043c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3365      	adds	r3, #101	; 0x65
 80043d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d8:	edc7 7a00 	vstr	s15, [r7]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
	*(dst + 102) = TELEM_ITEM_102;
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <pack_telem_data+0xd70>)
 80043e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80043e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3366      	adds	r3, #102	; 0x66
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	edc7 7a00 	vstr	s15, [r7]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
	*(dst + 103) = TELEM_ITEM_103;
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <pack_telem_data+0xd70>)
 8004404:	edd3 7a04 	vldr	s15, [r3, #16]
 8004408:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800440c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3367      	adds	r3, #103	; 0x67
 8004414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004418:	edc7 7a00 	vstr	s15, [r7]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
	*(dst + 104) = TELEM_ITEM_104;
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <pack_telem_data+0xd70>)
 8004424:	edd3 7a05 	vldr	s15, [r3, #20]
 8004428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800442c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3368      	adds	r3, #104	; 0x68
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	edc7 7a00 	vstr	s15, [r7]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
	*(dst + 105) = TELEM_ITEM_105;
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <pack_telem_data+0xd70>)
 8004444:	edd3 7a06 	vldr	s15, [r3, #24]
 8004448:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800444c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3369      	adds	r3, #105	; 0x69
 8004454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004458:	edc7 7a00 	vstr	s15, [r7]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
	*(dst + 106) = TELEM_ITEM_106;
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <pack_telem_data+0xd70>)
 8004464:	edd3 7a07 	vldr	s15, [r3, #28]
 8004468:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800446c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	336a      	adds	r3, #106	; 0x6a
 8004474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004478:	edc7 7a00 	vstr	s15, [r7]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
	*(dst + 107) = TELEM_ITEM_107;
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <pack_telem_data+0xd70>)
 8004484:	edd3 7a08 	vldr	s15, [r3, #32]
 8004488:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800448c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	336b      	adds	r3, #107	; 0x6b
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	edc7 7a00 	vstr	s15, [r7]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
	*(dst + 108) = TELEM_ITEM_108;
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <pack_telem_data+0xd70>)
 80044a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	336c      	adds	r3, #108	; 0x6c
 80044b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b8:	edc7 7a00 	vstr	s15, [r7]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]
	*(dst + 109) = TELEM_ITEM_109;
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <pack_telem_data+0xd70>)
 80044c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80044c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	336d      	adds	r3, #109	; 0x6d
 80044d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d8:	edc7 7a00 	vstr	s15, [r7]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e003      	b.n	80044ec <pack_telem_data+0xd74>
 80044e4:	20000434 	.word	0x20000434
 80044e8:	20000484 	.word	0x20000484
	*(dst + 110) = TELEM_ITEM_110;
 80044ec:	4bc9      	ldr	r3, [pc, #804]	; (8004814 <pack_telem_data+0x109c>)
 80044ee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	336e      	adds	r3, #110	; 0x6e
 80044fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004502:	edc7 7a00 	vstr	s15, [r7]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
	*(dst + 111) = TELEM_ITEM_111;
 800450c:	4bc1      	ldr	r3, [pc, #772]	; (8004814 <pack_telem_data+0x109c>)
 800450e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004512:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	336f      	adds	r3, #111	; 0x6f
 800451e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004522:	edc7 7a00 	vstr	s15, [r7]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
	*(dst + 112) = TELEM_ITEM_112;
 800452c:	4bb9      	ldr	r3, [pc, #740]	; (8004814 <pack_telem_data+0x109c>)
 800452e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004532:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3370      	adds	r3, #112	; 0x70
 800453e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004542:	edc7 7a00 	vstr	s15, [r7]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
	*(dst + 113) = TELEM_ITEM_113;
 800454c:	4bb2      	ldr	r3, [pc, #712]	; (8004818 <pack_telem_data+0x10a0>)
 800454e:	edd3 7a00 	vldr	s15, [r3]
 8004552:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800481c <pack_telem_data+0x10a4>
 8004556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800455a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455e:	ee17 3a90 	vmov	r3, s15
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3371      	adds	r3, #113	; 0x71
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
	*(dst + 114) = TELEM_ITEM_114;
 800456c:	4baa      	ldr	r3, [pc, #680]	; (8004818 <pack_telem_data+0x10a0>)
 800456e:	edd3 7a00 	vldr	s15, [r3]
 8004572:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800481c <pack_telem_data+0x10a4>
 8004576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 3a90 	vmov	r3, s15
 8004582:	b29b      	uxth	r3, r3
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3372      	adds	r3, #114	; 0x72
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
	*(dst + 115) = TELEM_ITEM_115;
 8004590:	4ba1      	ldr	r3, [pc, #644]	; (8004818 <pack_telem_data+0x10a0>)
 8004592:	edd3 7a01 	vldr	s15, [r3, #4]
 8004596:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800481c <pack_telem_data+0x10a4>
 800459a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800459e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a2:	ee17 3a90 	vmov	r3, s15
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3373      	adds	r3, #115	; 0x73
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
	*(dst + 116) = TELEM_ITEM_116;
 80045b0:	4b99      	ldr	r3, [pc, #612]	; (8004818 <pack_telem_data+0x10a0>)
 80045b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045b6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800481c <pack_telem_data+0x10a4>
 80045ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c2:	ee17 3a90 	vmov	r3, s15
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3374      	adds	r3, #116	; 0x74
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
	*(dst + 117) = TELEM_ITEM_117;
 80045d4:	4b90      	ldr	r3, [pc, #576]	; (8004818 <pack_telem_data+0x10a0>)
 80045d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80045da:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800481c <pack_telem_data+0x10a4>
 80045de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e6:	ee17 3a90 	vmov	r3, s15
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3375      	adds	r3, #117	; 0x75
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
	*(dst + 118) = TELEM_ITEM_118;
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <pack_telem_data+0x10a0>)
 80045f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80045fa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800481c <pack_telem_data+0x10a4>
 80045fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004606:	ee17 3a90 	vmov	r3, s15
 800460a:	b29b      	uxth	r3, r3
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3376      	adds	r3, #118	; 0x76
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
	*(dst + 119) = TELEM_ITEM_119;
 8004618:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <pack_telem_data+0x10a0>)
 800461a:	edd3 7a03 	vldr	s15, [r3, #12]
 800461e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800481c <pack_telem_data+0x10a4>
 8004622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462a:	ee17 3a90 	vmov	r3, s15
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3377      	adds	r3, #119	; 0x77
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
	*(dst + 120) = TELEM_ITEM_120;
 8004638:	4b77      	ldr	r3, [pc, #476]	; (8004818 <pack_telem_data+0x10a0>)
 800463a:	edd3 7a03 	vldr	s15, [r3, #12]
 800463e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800481c <pack_telem_data+0x10a4>
 8004642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800464a:	ee17 3a90 	vmov	r3, s15
 800464e:	b29b      	uxth	r3, r3
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3378      	adds	r3, #120	; 0x78
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]
	*(dst + 121) = TELEM_ITEM_121;
 800465c:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <pack_telem_data+0x10a0>)
 800465e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004662:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800481c <pack_telem_data+0x10a4>
 8004666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800466a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466e:	ee17 3a90 	vmov	r3, s15
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3379      	adds	r3, #121	; 0x79
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
	*(dst + 122) = TELEM_ITEM_122;
 800467c:	4b66      	ldr	r3, [pc, #408]	; (8004818 <pack_telem_data+0x10a0>)
 800467e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004682:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800481c <pack_telem_data+0x10a4>
 8004686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468e:	ee17 3a90 	vmov	r3, s15
 8004692:	b29b      	uxth	r3, r3
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	337a      	adds	r3, #122	; 0x7a
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
	*(dst + 123) = TELEM_ITEM_123;
 80046a0:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <pack_telem_data+0x10a0>)
 80046a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80046a6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800481c <pack_telem_data+0x10a4>
 80046aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b2:	ee17 3a90 	vmov	r3, s15
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	337b      	adds	r3, #123	; 0x7b
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
	*(dst + 124) = TELEM_ITEM_124;
 80046c0:	4b55      	ldr	r3, [pc, #340]	; (8004818 <pack_telem_data+0x10a0>)
 80046c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80046c6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800481c <pack_telem_data+0x10a4>
 80046ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d2:	ee17 3a90 	vmov	r3, s15
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	337c      	adds	r3, #124	; 0x7c
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
	*(dst + 125) = TELEM_ITEM_125;
 80046e4:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <pack_telem_data+0x10a0>)
 80046e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80046ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800481c <pack_telem_data+0x10a4>
 80046ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 3a90 	vmov	r3, s15
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	337d      	adds	r3, #125	; 0x7d
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
	*(dst + 126) = TELEM_ITEM_126;
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <pack_telem_data+0x10a0>)
 8004706:	edd3 7a06 	vldr	s15, [r3, #24]
 800470a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800481c <pack_telem_data+0x10a4>
 800470e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004716:	ee17 3a90 	vmov	r3, s15
 800471a:	b29b      	uxth	r3, r3
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	337e      	adds	r3, #126	; 0x7e
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
	*(dst + 127) = TELEM_ITEM_127;
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <pack_telem_data+0x10a0>)
 800472a:	edd3 7a07 	vldr	s15, [r3, #28]
 800472e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800481c <pack_telem_data+0x10a4>
 8004732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473a:	ee17 3a90 	vmov	r3, s15
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	337f      	adds	r3, #127	; 0x7f
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
	*(dst + 128) = TELEM_ITEM_128;
 8004748:	4b33      	ldr	r3, [pc, #204]	; (8004818 <pack_telem_data+0x10a0>)
 800474a:	edd3 7a07 	vldr	s15, [r3, #28]
 800474e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800481c <pack_telem_data+0x10a4>
 8004752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	ee17 3a90 	vmov	r3, s15
 800475e:	b29b      	uxth	r3, r3
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3380      	adds	r3, #128	; 0x80
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
	*(dst + 129) = TELEM_ITEM_129;
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <pack_telem_data+0x10a0>)
 800476e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004772:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800481c <pack_telem_data+0x10a4>
 8004776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477e:	ee17 3a90 	vmov	r3, s15
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3381      	adds	r3, #129	; 0x81
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
	*(dst + 130) = TELEM_ITEM_130;
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <pack_telem_data+0x10a0>)
 800478e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004792:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800481c <pack_telem_data+0x10a4>
 8004796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800479a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479e:	ee17 3a90 	vmov	r3, s15
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3382      	adds	r3, #130	; 0x82
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
	*(dst + 131) = TELEM_ITEM_131;
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <pack_telem_data+0x10a0>)
 80047b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800481c <pack_telem_data+0x10a4>
 80047ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 3a90 	vmov	r3, s15
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3383      	adds	r3, #131	; 0x83
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
	*(dst + 132) = TELEM_ITEM_132;
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <pack_telem_data+0x10a0>)
 80047d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047d6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800481c <pack_telem_data+0x10a4>
 80047da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 3a90 	vmov	r3, s15
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3384      	adds	r3, #132	; 0x84
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
	*(dst + 133) = TELEM_ITEM_133;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <pack_telem_data+0x10a0>)
 80047f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80047fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800481c <pack_telem_data+0x10a4>
 80047fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004806:	ee17 3a90 	vmov	r3, s15
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3385      	adds	r3, #133	; 0x85
 8004810:	e006      	b.n	8004820 <pack_telem_data+0x10a8>
 8004812:	bf00      	nop
 8004814:	20000484 	.word	0x20000484
 8004818:	200004bc 	.word	0x200004bc
 800481c:	42c80000 	.word	0x42c80000
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
	*(dst + 134) = TELEM_ITEM_134;
 8004824:	4bc7      	ldr	r3, [pc, #796]	; (8004b44 <pack_telem_data+0x13cc>)
 8004826:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800482a:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8004b48 <pack_telem_data+0x13d0>
 800482e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004836:	ee17 3a90 	vmov	r3, s15
 800483a:	b29b      	uxth	r3, r3
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3386      	adds	r3, #134	; 0x86
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
	*(dst + 135) = TELEM_ITEM_135;
 8004848:	4bbe      	ldr	r3, [pc, #760]	; (8004b44 <pack_telem_data+0x13cc>)
 800484a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800484e:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004b48 <pack_telem_data+0x13d0>
 8004852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485a:	ee17 3a90 	vmov	r3, s15
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3387      	adds	r3, #135	; 0x87
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
	*(dst + 136) = TELEM_ITEM_136;
 8004868:	4bb6      	ldr	r3, [pc, #728]	; (8004b44 <pack_telem_data+0x13cc>)
 800486a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800486e:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8004b48 <pack_telem_data+0x13d0>
 8004872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487a:	ee17 3a90 	vmov	r3, s15
 800487e:	b29b      	uxth	r3, r3
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3388      	adds	r3, #136	; 0x88
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
	*(dst + 137) = TELEM_ITEM_137;
 800488c:	4bad      	ldr	r3, [pc, #692]	; (8004b44 <pack_telem_data+0x13cc>)
 800488e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004892:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004b48 <pack_telem_data+0x13d0>
 8004896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489e:	ee17 3a90 	vmov	r3, s15
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3389      	adds	r3, #137	; 0x89
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
	*(dst + 138) = TELEM_ITEM_138;
 80048ac:	4ba5      	ldr	r3, [pc, #660]	; (8004b44 <pack_telem_data+0x13cc>)
 80048ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80048b2:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8004b48 <pack_telem_data+0x13d0>
 80048b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048be:	ee17 3a90 	vmov	r3, s15
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	338a      	adds	r3, #138	; 0x8a
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
	*(dst + 139) = TELEM_ITEM_139;
 80048d0:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <pack_telem_data+0x13d4>)
 80048d2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80048d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80048da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	b21a      	sxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	338b      	adds	r3, #139	; 0x8b
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
	*(dst + 140) = TELEM_ITEM_140;
 80048f0:	4b96      	ldr	r3, [pc, #600]	; (8004b4c <pack_telem_data+0x13d4>)
 80048f2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80048f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80048fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004902:	ee17 3a90 	vmov	r3, s15
 8004906:	b21b      	sxth	r3, r3
 8004908:	121b      	asrs	r3, r3, #8
 800490a:	b21a      	sxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	338c      	adds	r3, #140	; 0x8c
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
	*(dst + 141) = TELEM_ITEM_141;
 8004914:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <pack_telem_data+0x13d4>)
 8004916:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800491a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800491e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004926:	ee17 3a90 	vmov	r3, s15
 800492a:	b21a      	sxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	338d      	adds	r3, #141	; 0x8d
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
	*(dst + 142) = TELEM_ITEM_142;
 8004934:	4b85      	ldr	r3, [pc, #532]	; (8004b4c <pack_telem_data+0x13d4>)
 8004936:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800493a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800493e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004946:	ee17 3a90 	vmov	r3, s15
 800494a:	b21b      	sxth	r3, r3
 800494c:	121b      	asrs	r3, r3, #8
 800494e:	b21a      	sxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	338e      	adds	r3, #142	; 0x8e
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
	*(dst + 143) = TELEM_ITEM_143;
 8004958:	4b7c      	ldr	r3, [pc, #496]	; (8004b4c <pack_telem_data+0x13d4>)
 800495a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800495e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004962:	ee17 3a90 	vmov	r3, s15
 8004966:	b21a      	sxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	338f      	adds	r3, #143	; 0x8f
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
	*(dst + 144) = TELEM_ITEM_144;
 8004970:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <pack_telem_data+0x13d4>)
 8004972:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800497a:	ee17 3a90 	vmov	r3, s15
 800497e:	b21b      	sxth	r3, r3
 8004980:	121b      	asrs	r3, r3, #8
 8004982:	b21a      	sxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3390      	adds	r3, #144	; 0x90
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]
	*(dst + 145) = TELEM_ITEM_145;
 800498c:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <pack_telem_data+0x13d4>)
 800498e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004996:	ee17 3a90 	vmov	r3, s15
 800499a:	b21a      	sxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3391      	adds	r3, #145	; 0x91
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
	*(dst + 146) = TELEM_ITEM_146;
 80049a4:	4b69      	ldr	r3, [pc, #420]	; (8004b4c <pack_telem_data+0x13d4>)
 80049a6:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80049aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ae:	ee17 3a90 	vmov	r3, s15
 80049b2:	b21b      	sxth	r3, r3
 80049b4:	121b      	asrs	r3, r3, #8
 80049b6:	b21a      	sxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3392      	adds	r3, #146	; 0x92
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
	*(dst + 147) = TELEM_ITEM_147;
 80049c0:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <pack_telem_data+0x13d4>)
 80049c2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80049c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d2:	ee17 3a90 	vmov	r3, s15
 80049d6:	b21a      	sxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3393      	adds	r3, #147	; 0x93
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
	*(dst + 148) = TELEM_ITEM_148;
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <pack_telem_data+0x13d4>)
 80049e2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80049e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f2:	ee17 3a90 	vmov	r3, s15
 80049f6:	b21b      	sxth	r3, r3
 80049f8:	121b      	asrs	r3, r3, #8
 80049fa:	b21a      	sxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3394      	adds	r3, #148	; 0x94
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
	*(dst + 149) = TELEM_ITEM_149;
 8004a04:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <pack_telem_data+0x13d4>)
 8004a06:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8004a0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a16:	ee17 3a90 	vmov	r3, s15
 8004a1a:	b21a      	sxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3395      	adds	r3, #149	; 0x95
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]
	*(dst + 150) = TELEM_ITEM_150;
 8004a24:	4b49      	ldr	r3, [pc, #292]	; (8004b4c <pack_telem_data+0x13d4>)
 8004a26:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8004a2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a36:	ee17 3a90 	vmov	r3, s15
 8004a3a:	b21b      	sxth	r3, r3
 8004a3c:	121b      	asrs	r3, r3, #8
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3396      	adds	r3, #150	; 0x96
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
	*(dst + 151) = TELEM_ITEM_151;
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <pack_telem_data+0x13d4>)
 8004a4a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a4e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004b48 <pack_telem_data+0x13d0>
 8004a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5a:	ee17 3a90 	vmov	r3, s15
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3397      	adds	r3, #151	; 0x97
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
	*(dst + 152) = TELEM_ITEM_152;
 8004a68:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <pack_telem_data+0x13d4>)
 8004a6a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a6e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004b48 <pack_telem_data+0x13d0>
 8004a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7a:	ee17 3a90 	vmov	r3, s15
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3398      	adds	r3, #152	; 0x98
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
	*(dst + 153) = TELEM_ITEM_153;
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <pack_telem_data+0x13d4>)
 8004a8e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004a92:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004b48 <pack_telem_data+0x13d0>
 8004a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9e:	ee17 3a90 	vmov	r3, s15
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3399      	adds	r3, #153	; 0x99
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
	*(dst + 154) = TELEM_ITEM_154;
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <pack_telem_data+0x13d4>)
 8004aae:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004ab2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004b48 <pack_telem_data+0x13d0>
 8004ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004abe:	ee17 3a90 	vmov	r3, s15
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	339a      	adds	r3, #154	; 0x9a
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
	*(dst + 155) = TELEM_ITEM_155;
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <pack_telem_data+0x13d4>)
 8004ad2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004ad6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004b48 <pack_telem_data+0x13d0>
 8004ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae2:	ee17 3a90 	vmov	r3, s15
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	339b      	adds	r3, #155	; 0x9b
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
	*(dst + 156) = TELEM_ITEM_156;
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <pack_telem_data+0x13d4>)
 8004af2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004af6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b48 <pack_telem_data+0x13d0>
 8004afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b02:	ee17 3a90 	vmov	r3, s15
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	339c      	adds	r3, #156	; 0x9c
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
	*(dst + 157) = TELEM_ITEM_157;
 8004b14:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <pack_telem_data+0x13d4>)
 8004b16:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8004b1a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004b48 <pack_telem_data+0x13d0>
 8004b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b26:	ee17 3a90 	vmov	r3, s15
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	339d      	adds	r3, #157	; 0x9d
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
	*(dst + 158) = TELEM_ITEM_158;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <pack_telem_data+0x13d4>)
 8004b36:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8004b3a:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004b48 <pack_telem_data+0x13d0>
 8004b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b42:	e005      	b.n	8004b50 <pack_telem_data+0x13d8>
 8004b44:	200004bc 	.word	0x200004bc
 8004b48:	42c80000 	.word	0x42c80000
 8004b4c:	200004fc 	.word	0x200004fc
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	ee17 3a90 	vmov	r3, s15
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	339e      	adds	r3, #158	; 0x9e
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
	*(dst + 159) = TELEM_ITEM_159;
 8004b66:	4bcd      	ldr	r3, [pc, #820]	; (8004e9c <pack_telem_data+0x1724>)
 8004b68:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b6c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004ea0 <pack_telem_data+0x1728>
 8004b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b78:	ee17 3a90 	vmov	r3, s15
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	339f      	adds	r3, #159	; 0x9f
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]
	*(dst + 160) = TELEM_ITEM_160;
 8004b86:	4bc5      	ldr	r3, [pc, #788]	; (8004e9c <pack_telem_data+0x1724>)
 8004b88:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b8c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8004ea0 <pack_telem_data+0x1728>
 8004b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b98:	ee17 3a90 	vmov	r3, s15
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	33a0      	adds	r3, #160	; 0xa0
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
	*(dst + 161) = TELEM_ITEM_161;
 8004baa:	4bbc      	ldr	r3, [pc, #752]	; (8004e9c <pack_telem_data+0x1724>)
 8004bac:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004bb0:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8004ea0 <pack_telem_data+0x1728>
 8004bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbc:	ee17 3a90 	vmov	r3, s15
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	33a1      	adds	r3, #161	; 0xa1
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
	*(dst + 162) = TELEM_ITEM_162;
 8004bca:	4bb4      	ldr	r3, [pc, #720]	; (8004e9c <pack_telem_data+0x1724>)
 8004bcc:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004bd0:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8004ea0 <pack_telem_data+0x1728>
 8004bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bdc:	ee17 3a90 	vmov	r3, s15
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	33a2      	adds	r3, #162	; 0xa2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
	*(dst + 163) = TELEM_ITEM_163;
 8004bee:	4bab      	ldr	r3, [pc, #684]	; (8004e9c <pack_telem_data+0x1724>)
 8004bf0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004bf4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c00:	ee17 3a90 	vmov	r3, s15
 8004c04:	b21a      	sxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	33a3      	adds	r3, #163	; 0xa3
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
	*(dst + 164) = TELEM_ITEM_164;
 8004c0e:	4ba3      	ldr	r3, [pc, #652]	; (8004e9c <pack_telem_data+0x1724>)
 8004c10:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c20:	ee17 3a90 	vmov	r3, s15
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	121b      	asrs	r3, r3, #8
 8004c28:	b21a      	sxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	33a4      	adds	r3, #164	; 0xa4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
	*(dst + 165) = TELEM_ITEM_165;
 8004c32:	4b9a      	ldr	r3, [pc, #616]	; (8004e9c <pack_telem_data+0x1724>)
 8004c34:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8004c38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c44:	ee17 3a90 	vmov	r3, s15
 8004c48:	b21a      	sxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	33a5      	adds	r3, #165	; 0xa5
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
	*(dst + 166) = TELEM_ITEM_166;
 8004c52:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <pack_telem_data+0x1724>)
 8004c54:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8004c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c64:	ee17 3a90 	vmov	r3, s15
 8004c68:	b21b      	sxth	r3, r3
 8004c6a:	121b      	asrs	r3, r3, #8
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	33a6      	adds	r3, #166	; 0xa6
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]
	*(dst + 167) = TELEM_ITEM_167;
 8004c76:	4b89      	ldr	r3, [pc, #548]	; (8004e9c <pack_telem_data+0x1724>)
 8004c78:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004c7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c88:	ee17 3a90 	vmov	r3, s15
 8004c8c:	b21a      	sxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	33a7      	adds	r3, #167	; 0xa7
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
	*(dst + 168) = TELEM_ITEM_168;
 8004c96:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <pack_telem_data+0x1724>)
 8004c98:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004c9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca8:	ee17 3a90 	vmov	r3, s15
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	121b      	asrs	r3, r3, #8
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	33a8      	adds	r3, #168	; 0xa8
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
	*(dst + 169) = TELEM_ITEM_169;
 8004cba:	4b78      	ldr	r3, [pc, #480]	; (8004e9c <pack_telem_data+0x1724>)
 8004cbc:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8004cc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ccc:	ee17 3a90 	vmov	r3, s15
 8004cd0:	b21a      	sxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	33a9      	adds	r3, #169	; 0xa9
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
	*(dst + 170) = TELEM_ITEM_170;
 8004cda:	4b70      	ldr	r3, [pc, #448]	; (8004e9c <pack_telem_data+0x1724>)
 8004cdc:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8004ce0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cec:	ee17 3a90 	vmov	r3, s15
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	121b      	asrs	r3, r3, #8
 8004cf4:	b21a      	sxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	33aa      	adds	r3, #170	; 0xaa
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
	*(dst + 171) = TELEM_ITEM_171;
 8004cfe:	4b67      	ldr	r3, [pc, #412]	; (8004e9c <pack_telem_data+0x1724>)
 8004d00:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004d04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d10:	ee17 3a90 	vmov	r3, s15
 8004d14:	b21a      	sxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	33ab      	adds	r3, #171	; 0xab
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
	*(dst + 172) = TELEM_ITEM_172;
 8004d1e:	4b5f      	ldr	r3, [pc, #380]	; (8004e9c <pack_telem_data+0x1724>)
 8004d20:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004d24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d30:	ee17 3a90 	vmov	r3, s15
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	121b      	asrs	r3, r3, #8
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	33ac      	adds	r3, #172	; 0xac
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
	*(dst + 173) = TELEM_ITEM_173;
 8004d42:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <pack_telem_data+0x1724>)
 8004d44:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8004d48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d54:	ee17 3a90 	vmov	r3, s15
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	33ad      	adds	r3, #173	; 0xad
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
	*(dst + 174) = TELEM_ITEM_174;
 8004d62:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <pack_telem_data+0x1724>)
 8004d64:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8004d68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d74:	ee17 3a90 	vmov	r3, s15
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	121b      	asrs	r3, r3, #8
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	33ae      	adds	r3, #174	; 0xae
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
	*(dst + 175) = TELEM_ITEM_175;
 8004d86:	4b45      	ldr	r3, [pc, #276]	; (8004e9c <pack_telem_data+0x1724>)
 8004d88:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004d8c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004ea0 <pack_telem_data+0x1728>
 8004d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d98:	edc7 7a00 	vstr	s15, [r7]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	33af      	adds	r3, #175	; 0xaf
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
	*(dst + 176) = TELEM_ITEM_176;
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <pack_telem_data+0x1724>)
 8004da8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004dac:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004ea0 <pack_telem_data+0x1728>
 8004db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db8:	ee17 3a90 	vmov	r3, s15
 8004dbc:	121a      	asrs	r2, r3, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	33b0      	adds	r3, #176	; 0xb0
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
	*(dst + 177) = TELEM_ITEM_177;
 8004dc6:	4b35      	ldr	r3, [pc, #212]	; (8004e9c <pack_telem_data+0x1724>)
 8004dc8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004dcc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004ea0 <pack_telem_data+0x1728>
 8004dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd8:	ee17 3a90 	vmov	r3, s15
 8004ddc:	141a      	asrs	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	33b1      	adds	r3, #177	; 0xb1
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
	*(dst + 178) = TELEM_ITEM_178;
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <pack_telem_data+0x1724>)
 8004de8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004dec:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004ea0 <pack_telem_data+0x1728>
 8004df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df8:	ee17 3a90 	vmov	r3, s15
 8004dfc:	161a      	asrs	r2, r3, #24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	33b2      	adds	r3, #178	; 0xb2
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
	*(dst + 179) = TELEM_ITEM_179;
 8004e06:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <pack_telem_data+0x1724>)
 8004e08:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004e0c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004ea0 <pack_telem_data+0x1728>
 8004e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e18:	edc7 7a00 	vstr	s15, [r7]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	33b3      	adds	r3, #179	; 0xb3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
	*(dst + 180) = TELEM_ITEM_180;
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <pack_telem_data+0x1724>)
 8004e28:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004e2c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004ea0 <pack_telem_data+0x1728>
 8004e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e38:	ee17 3a90 	vmov	r3, s15
 8004e3c:	121a      	asrs	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	33b4      	adds	r3, #180	; 0xb4
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
	*(dst + 181) = TELEM_ITEM_181;
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <pack_telem_data+0x1724>)
 8004e48:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004e4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ea0 <pack_telem_data+0x1728>
 8004e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e58:	ee17 3a90 	vmov	r3, s15
 8004e5c:	141a      	asrs	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	33b5      	adds	r3, #181	; 0xb5
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
	*(dst + 182) = TELEM_ITEM_182;
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <pack_telem_data+0x1724>)
 8004e68:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004e6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ea0 <pack_telem_data+0x1728>
 8004e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e78:	ee17 3a90 	vmov	r3, s15
 8004e7c:	161a      	asrs	r2, r3, #24
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	33b6      	adds	r3, #182	; 0xb6
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
	*(dst + 183) = TELEM_ITEM_183;
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <pack_telem_data+0x1724>)
 8004e88:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004e8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e98:	e004      	b.n	8004ea4 <pack_telem_data+0x172c>
 8004e9a:	bf00      	nop
 8004e9c:	200004fc 	.word	0x200004fc
 8004ea0:	42c80000 	.word	0x42c80000
 8004ea4:	ee17 3a90 	vmov	r3, s15
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	33b7      	adds	r3, #183	; 0xb7
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
	*(dst + 184) = TELEM_ITEM_184;
 8004eb2:	4bd0      	ldr	r3, [pc, #832]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004eb4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004eb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec4:	ee17 3a90 	vmov	r3, s15
 8004ec8:	b21b      	sxth	r3, r3
 8004eca:	121b      	asrs	r3, r3, #8
 8004ecc:	b21a      	sxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	33b8      	adds	r3, #184	; 0xb8
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
	*(dst + 185) = TELEM_ITEM_185;
 8004ed6:	4bc7      	ldr	r3, [pc, #796]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004ed8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004edc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee8:	ee17 3a90 	vmov	r3, s15
 8004eec:	b21a      	sxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	33b9      	adds	r3, #185	; 0xb9
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
	*(dst + 186) = TELEM_ITEM_186;
 8004ef6:	4bbf      	ldr	r3, [pc, #764]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004ef8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004efc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f08:	ee17 3a90 	vmov	r3, s15
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	121b      	asrs	r3, r3, #8
 8004f10:	b21a      	sxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	33ba      	adds	r3, #186	; 0xba
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
	*(dst + 187) = TELEM_ITEM_187;
 8004f1a:	4bb6      	ldr	r3, [pc, #728]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004f1c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004f20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f2c:	ee17 3a90 	vmov	r3, s15
 8004f30:	b21a      	sxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	33bb      	adds	r3, #187	; 0xbb
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
	*(dst + 188) = TELEM_ITEM_188;
 8004f3a:	4bae      	ldr	r3, [pc, #696]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004f3c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004f40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f4c:	ee17 3a90 	vmov	r3, s15
 8004f50:	b21b      	sxth	r3, r3
 8004f52:	121b      	asrs	r3, r3, #8
 8004f54:	b21a      	sxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	33bc      	adds	r3, #188	; 0xbc
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
	*(dst + 189) = TELEM_ITEM_189;
 8004f5e:	4ba5      	ldr	r3, [pc, #660]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004f60:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8004f64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f70:	ee17 3a90 	vmov	r3, s15
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	33bd      	adds	r3, #189	; 0xbd
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
	*(dst + 190) = TELEM_ITEM_190;
 8004f7e:	4b9d      	ldr	r3, [pc, #628]	; (80051f4 <pack_telem_data+0x1a7c>)
 8004f80:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8004f84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f90:	ee17 3a90 	vmov	r3, s15
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	121b      	asrs	r3, r3, #8
 8004f98:	b21a      	sxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	33be      	adds	r3, #190	; 0xbe
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
	*(dst + 191) = TELEM_ITEM_191;
 8004fa2:	4b95      	ldr	r3, [pc, #596]	; (80051f8 <pack_telem_data+0x1a80>)
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb4:	edc7 7a00 	vstr	s15, [r7]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	33bf      	adds	r3, #191	; 0xbf
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
	*(dst + 192) = TELEM_ITEM_192;
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	; (80051f8 <pack_telem_data+0x1a80>)
 8004fc4:	edd3 7a00 	vldr	s15, [r3]
 8004fc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd4:	ee17 3a90 	vmov	r3, s15
 8004fd8:	121a      	asrs	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	33c0      	adds	r3, #192	; 0xc0
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
	*(dst + 193) = TELEM_ITEM_193;
 8004fe2:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <pack_telem_data+0x1a80>)
 8004fe4:	edd3 7a00 	vldr	s15, [r3]
 8004fe8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff4:	ee17 3a90 	vmov	r3, s15
 8004ff8:	141a      	asrs	r2, r3, #16
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	33c1      	adds	r3, #193	; 0xc1
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
	*(dst + 194) = TELEM_ITEM_194;
 8005002:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <pack_telem_data+0x1a80>)
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800500c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005014:	ee17 3a90 	vmov	r3, s15
 8005018:	161a      	asrs	r2, r3, #24
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	33c2      	adds	r3, #194	; 0xc2
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
	*(dst + 195) = TELEM_ITEM_195;
 8005022:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <pack_telem_data+0x1a80>)
 8005024:	edd3 7a01 	vldr	s15, [r3, #4]
 8005028:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005034:	edc7 7a00 	vstr	s15, [r7]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	33c3      	adds	r3, #195	; 0xc3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
	*(dst + 196) = TELEM_ITEM_196;
 8005042:	4b6d      	ldr	r3, [pc, #436]	; (80051f8 <pack_telem_data+0x1a80>)
 8005044:	edd3 7a01 	vldr	s15, [r3, #4]
 8005048:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800504c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005054:	ee17 3a90 	vmov	r3, s15
 8005058:	121a      	asrs	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	33c4      	adds	r3, #196	; 0xc4
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
	*(dst + 197) = TELEM_ITEM_197;
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <pack_telem_data+0x1a80>)
 8005064:	edd3 7a01 	vldr	s15, [r3, #4]
 8005068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800506c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005074:	ee17 3a90 	vmov	r3, s15
 8005078:	141a      	asrs	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	33c5      	adds	r3, #197	; 0xc5
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
	*(dst + 198) = TELEM_ITEM_198;
 8005082:	4b5d      	ldr	r3, [pc, #372]	; (80051f8 <pack_telem_data+0x1a80>)
 8005084:	edd3 7a01 	vldr	s15, [r3, #4]
 8005088:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800508c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005094:	ee17 3a90 	vmov	r3, s15
 8005098:	161a      	asrs	r2, r3, #24
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	33c6      	adds	r3, #198	; 0xc6
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
	*(dst + 199) = TELEM_ITEM_199;
 80050a2:	4b56      	ldr	r3, [pc, #344]	; (80051fc <pack_telem_data+0x1a84>)
 80050a4:	edd3 7a00 	vldr	s15, [r3]
 80050a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b4:	edc7 7a00 	vstr	s15, [r7]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	33c7      	adds	r3, #199	; 0xc7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
	*(dst + 200) = TELEM_ITEM_200;
 80050c2:	4b4e      	ldr	r3, [pc, #312]	; (80051fc <pack_telem_data+0x1a84>)
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d4:	ee17 3a90 	vmov	r3, s15
 80050d8:	121a      	asrs	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	33c8      	adds	r3, #200	; 0xc8
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
	*(dst + 201) = TELEM_ITEM_201;
 80050e2:	4b46      	ldr	r3, [pc, #280]	; (80051fc <pack_telem_data+0x1a84>)
 80050e4:	edd3 7a00 	vldr	s15, [r3]
 80050e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f4:	ee17 3a90 	vmov	r3, s15
 80050f8:	141a      	asrs	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	33c9      	adds	r3, #201	; 0xc9
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
	*(dst + 202) = TELEM_ITEM_202;
 8005102:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <pack_telem_data+0x1a84>)
 8005104:	edd3 7a00 	vldr	s15, [r3]
 8005108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800510c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005114:	ee17 3a90 	vmov	r3, s15
 8005118:	161a      	asrs	r2, r3, #24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	33ca      	adds	r3, #202	; 0xca
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
	*(dst + 203) = TELEM_ITEM_203;
 8005122:	4b37      	ldr	r3, [pc, #220]	; (8005200 <pack_telem_data+0x1a88>)
 8005124:	edd3 7a00 	vldr	s15, [r3]
 8005128:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800512c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005134:	edc7 7a00 	vstr	s15, [r7]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	33cb      	adds	r3, #203	; 0xcb
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
	*(dst + 204) = TELEM_ITEM_204;
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <pack_telem_data+0x1a88>)
 8005144:	edd3 7a00 	vldr	s15, [r3]
 8005148:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800514c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005154:	ee17 3a90 	vmov	r3, s15
 8005158:	121a      	asrs	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	33cc      	adds	r3, #204	; 0xcc
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
	*(dst + 205) = TELEM_ITEM_205;
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <pack_telem_data+0x1a88>)
 8005164:	edd3 7a00 	vldr	s15, [r3]
 8005168:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005174:	ee17 3a90 	vmov	r3, s15
 8005178:	141a      	asrs	r2, r3, #16
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	33cd      	adds	r3, #205	; 0xcd
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
	*(dst + 206) = TELEM_ITEM_206;
 8005182:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <pack_telem_data+0x1a88>)
 8005184:	edd3 7a00 	vldr	s15, [r3]
 8005188:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005194:	ee17 3a90 	vmov	r3, s15
 8005198:	161a      	asrs	r2, r3, #24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	33ce      	adds	r3, #206	; 0xce
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
	*(dst + 207) = TELEM_ITEM_207;
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <pack_telem_data+0x1a8c>)
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b4:	edc7 7a00 	vstr	s15, [r7]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	33cf      	adds	r3, #207	; 0xcf
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
	*(dst + 208) = TELEM_ITEM_208;
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <pack_telem_data+0x1a8c>)
 80051c4:	edd3 7a00 	vldr	s15, [r3]
 80051c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d4:	ee17 3a90 	vmov	r3, s15
 80051d8:	121a      	asrs	r2, r3, #8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	33d0      	adds	r3, #208	; 0xd0
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
	*(dst + 209) = TELEM_ITEM_209;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <pack_telem_data+0x1a8c>)
 80051e4:	edd3 7a00 	vldr	s15, [r3]
 80051e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051f0:	e00a      	b.n	8005208 <pack_telem_data+0x1a90>
 80051f2:	bf00      	nop
 80051f4:	200004fc 	.word	0x200004fc
 80051f8:	200004f0 	.word	0x200004f0
 80051fc:	20000414 	.word	0x20000414
 8005200:	20000418 	.word	0x20000418
 8005204:	2000041c 	.word	0x2000041c
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 3a90 	vmov	r3, s15
 8005210:	141a      	asrs	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	33d1      	adds	r3, #209	; 0xd1
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
	*(dst + 210) = TELEM_ITEM_210;
 800521a:	4b84      	ldr	r3, [pc, #528]	; (800542c <pack_telem_data+0x1cb4>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800522c:	ee17 3a90 	vmov	r3, s15
 8005230:	161a      	asrs	r2, r3, #24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	33d2      	adds	r3, #210	; 0xd2
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
	*(dst + 211) = TELEM_ITEM_211;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	33d3      	adds	r3, #211	; 0xd3
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <pack_telem_data+0x1cb8>)
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
	*(dst + 212) = TELEM_ITEM_212;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	33d4      	adds	r3, #212	; 0xd4
 800524a:	4a79      	ldr	r2, [pc, #484]	; (8005430 <pack_telem_data+0x1cb8>)
 800524c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
	*(dst + 213) = TELEM_ITEM_213;
 8005254:	4b77      	ldr	r3, [pc, #476]	; (8005434 <pack_telem_data+0x1cbc>)
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	33d5      	adds	r3, #213	; 0xd5
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
	*(dst + 214) = TELEM_ITEM_214;
 8005260:	4b74      	ldr	r3, [pc, #464]	; (8005434 <pack_telem_data+0x1cbc>)
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	0a1a      	lsrs	r2, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	33d6      	adds	r3, #214	; 0xd6
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
	*(dst + 215) = TELEM_ITEM_215;
 800526e:	4b71      	ldr	r3, [pc, #452]	; (8005434 <pack_telem_data+0x1cbc>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	0c1a      	lsrs	r2, r3, #16
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	33d7      	adds	r3, #215	; 0xd7
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
	*(dst + 216) = TELEM_ITEM_216;
 800527c:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <pack_telem_data+0x1cbc>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	0e1a      	lsrs	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	33d8      	adds	r3, #216	; 0xd8
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
	*(dst + 217) = TELEM_ITEM_217;
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <pack_telem_data+0x1cbc>)
 800528c:	889b      	ldrh	r3, [r3, #4]
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	33d9      	adds	r3, #217	; 0xd9
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
	*(dst + 218) = TELEM_ITEM_218;
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <pack_telem_data+0x1cbc>)
 800529a:	889b      	ldrh	r3, [r3, #4]
 800529c:	b29b      	uxth	r3, r3
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	33da      	adds	r3, #218	; 0xda
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
	*(dst + 219) = TELEM_ITEM_219;
 80052aa:	4b62      	ldr	r3, [pc, #392]	; (8005434 <pack_telem_data+0x1cbc>)
 80052ac:	88db      	ldrh	r3, [r3, #6]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	33db      	adds	r3, #219	; 0xdb
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
	*(dst + 220) = TELEM_ITEM_220;
 80052b8:	4b5e      	ldr	r3, [pc, #376]	; (8005434 <pack_telem_data+0x1cbc>)
 80052ba:	88db      	ldrh	r3, [r3, #6]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	33dc      	adds	r3, #220	; 0xdc
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
	*(dst + 221) = TELEM_ITEM_221;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	33dd      	adds	r3, #221	; 0xdd
 80052ce:	4a59      	ldr	r2, [pc, #356]	; (8005434 <pack_telem_data+0x1cbc>)
 80052d0:	7a12      	ldrb	r2, [r2, #8]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
	*(dst + 222) = TELEM_ITEM_222;
 80052d6:	4b57      	ldr	r3, [pc, #348]	; (8005434 <pack_telem_data+0x1cbc>)
 80052d8:	895b      	ldrh	r3, [r3, #10]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	33de      	adds	r3, #222	; 0xde
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
	*(dst + 223) = TELEM_ITEM_223;
 80052e4:	4b53      	ldr	r3, [pc, #332]	; (8005434 <pack_telem_data+0x1cbc>)
 80052e6:	895b      	ldrh	r3, [r3, #10]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	33df      	adds	r3, #223	; 0xdf
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
	*(dst + 224) = TELEM_ITEM_224;
 80052f6:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <pack_telem_data+0x1cbc>)
 80052f8:	899b      	ldrh	r3, [r3, #12]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	33e0      	adds	r3, #224	; 0xe0
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
	*(dst + 225) = TELEM_ITEM_225;
 8005304:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <pack_telem_data+0x1cbc>)
 8005306:	899b      	ldrh	r3, [r3, #12]
 8005308:	b29b      	uxth	r3, r3
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	33e1      	adds	r3, #225	; 0xe1
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
	*(dst + 226) = TELEM_ITEM_226;
 8005316:	4b48      	ldr	r3, [pc, #288]	; (8005438 <pack_telem_data+0x1cc0>)
 8005318:	edd3 7a00 	vldr	s15, [r3]
 800531c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800543c <pack_telem_data+0x1cc4>
 8005320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005328:	edc7 7a00 	vstr	s15, [r7]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	33e2      	adds	r3, #226	; 0xe2
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
	*(dst + 227) = TELEM_ITEM_227;
 8005336:	4b40      	ldr	r3, [pc, #256]	; (8005438 <pack_telem_data+0x1cc0>)
 8005338:	edd3 7a00 	vldr	s15, [r3]
 800533c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800543c <pack_telem_data+0x1cc4>
 8005340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005348:	ee17 3a90 	vmov	r3, s15
 800534c:	121a      	asrs	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	33e3      	adds	r3, #227	; 0xe3
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
	*(dst + 228) = TELEM_ITEM_228;
 8005356:	4b38      	ldr	r3, [pc, #224]	; (8005438 <pack_telem_data+0x1cc0>)
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800543c <pack_telem_data+0x1cc4>
 8005360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005368:	ee17 3a90 	vmov	r3, s15
 800536c:	141a      	asrs	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	33e4      	adds	r3, #228	; 0xe4
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
	*(dst + 229) = TELEM_ITEM_229;
 8005376:	4b30      	ldr	r3, [pc, #192]	; (8005438 <pack_telem_data+0x1cc0>)
 8005378:	edd3 7a00 	vldr	s15, [r3]
 800537c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800543c <pack_telem_data+0x1cc4>
 8005380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005388:	ee17 3a90 	vmov	r3, s15
 800538c:	161a      	asrs	r2, r3, #24
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	33e5      	adds	r3, #229	; 0xe5
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
	*(dst + 230) = TELEM_ITEM_230;
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <pack_telem_data+0x1cc8>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	33e6      	adds	r3, #230	; 0xe6
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
	*(dst + 231) = TELEM_ITEM_231;
 80053a2:	4b27      	ldr	r3, [pc, #156]	; (8005440 <pack_telem_data+0x1cc8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	121a      	asrs	r2, r3, #8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	33e7      	adds	r3, #231	; 0xe7
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
	*(dst + 232) = TELEM_ITEM_232;
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <pack_telem_data+0x1cc8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	141a      	asrs	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	33e8      	adds	r3, #232	; 0xe8
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
	*(dst + 233) = TELEM_ITEM_233;
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <pack_telem_data+0x1cc8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	161a      	asrs	r2, r3, #24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	33e9      	adds	r3, #233	; 0xe9
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
	*(dst + 234) = TELEM_ITEM_234;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	33ea      	adds	r3, #234	; 0xea
 80053d0:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <pack_telem_data+0x1ccc>)
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
	*(dst + 235) = TELEM_ITEM_235;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	33eb      	adds	r3, #235	; 0xeb
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <pack_telem_data+0x1cd0>)
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
	*(dst + 236) = TELEM_ITEM_236;
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <pack_telem_data+0x1cd4>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	33ec      	adds	r3, #236	; 0xec
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
	*(dst + 237) = TELEM_ITEM_237;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <pack_telem_data+0x1cd4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0a1a      	lsrs	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	33ed      	adds	r3, #237	; 0xed
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
	*(dst + 238) = TELEM_ITEM_238;
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <pack_telem_data+0x1cd4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	0c1a      	lsrs	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	33ee      	adds	r3, #238	; 0xee
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
	*(dst + 239) = TELEM_ITEM_239;
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <pack_telem_data+0x1cd4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	0e1a      	lsrs	r2, r3, #24
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	33ef      	adds	r3, #239	; 0xef
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
	*(dst + 240) = TELEM_ITEM_240;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	33f0      	adds	r3, #240	; 0xf0
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <pack_telem_data+0x1cd8>)
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	2000041c 	.word	0x2000041c
 8005430:	200004fc 	.word	0x200004fc
 8005434:	20000604 	.word	0x20000604
 8005438:	20000420 	.word	0x20000420
 800543c:	461c4000 	.word	0x461c4000
 8005440:	20000424 	.word	0x20000424
 8005444:	20000428 	.word	0x20000428
 8005448:	20000429 	.word	0x20000429
 800544c:	2000042c 	.word	0x2000042c
 8005450:	20000430 	.word	0x20000430

08005454 <init_serial_data>:

/**
 * Initialize the flash struct and chip.
 * Initialize all the DMA rx buffers.
 */
void init_serial_data(DmaBufferInfo* buffer_info) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	// Flash
	init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800545c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <init_serial_data+0x80>)
 8005462:	491d      	ldr	r1, [pc, #116]	; (80054d8 <init_serial_data+0x84>)
 8005464:	481d      	ldr	r0, [pc, #116]	; (80054dc <init_serial_data+0x88>)
 8005466:	f002 ffbc 	bl	80083e2 <init_flash>

	// DMA RX
	buffer_info->curr_circular_buffer_pos = 0;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8a3 29f6 	strh.w	r2, [r3, #2550]	; 0x9f6
	buffer_info->last_telem_packet_pos = 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20

	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	e011      	b.n	80054a4 <init_serial_data+0x50>
		buffer_info->curr_telem_start[i] = 0;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f202 42fc 	addw	r2, r2, #1276	; 0x4fc
 8005488:	2100      	movs	r1, #0
 800548a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer_info->curr_telem_len[i] = 0;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	2200      	movs	r2, #0
 800549c:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	3301      	adds	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d9ea      	bls.n	8005480 <init_serial_data+0x2c>
	}

	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 80054aa:	2300      	movs	r3, #0
 80054ac:	81bb      	strh	r3, [r7, #12]
 80054ae:	e008      	b.n	80054c2 <init_serial_data+0x6e>
		buffer_info->telem_buffer[i] = 0;
 80054b0:	89bb      	ldrh	r3, [r7, #12]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2a22 	strb.w	r2, [r3, #2594]	; 0xa22
	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 80054bc:	89bb      	ldrh	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	81bb      	strh	r3, [r7, #12]
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	2bfe      	cmp	r3, #254	; 0xfe
 80054c6:	d9f3      	bls.n	80054b0 <init_serial_data+0x5c>
	}
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40020800 	.word	0x40020800
 80054d8:	20000ae0 	.word	0x20000ae0
 80054dc:	20000ec8 	.word	0x20000ec8

080054e0 <init_packet_header>:


/**
 * Some info doesn't change between telem and flash packet headers
 */
void init_packet_header(CLB_Packet_Header* header, uint8_t target_addr) {
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
	header->packet_type = 0; // default packet
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
	header->origin_addr = FLIGHT_EC_ADDR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	705a      	strb	r2, [r3, #1]
	header->target_addr = target_addr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	709a      	strb	r2, [r3, #2]
	header->priority = 1; // medium
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	70da      	strb	r2, [r3, #3]
	header->do_cobbs = 1; // enable COBS
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	715a      	strb	r2, [r3, #5]
	header->timestamp = SYS_MICROS;
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <init_packet_header+0x40>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	200006e8 	.word	0x200006e8

08005524 <send_telem_packet>:

void send_telem_packet(uint8_t target_addr) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
	CLB_Packet_Header telem_header;
	init_packet_header(&telem_header, target_addr);
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ffd2 	bl	80054e0 <init_packet_header>
    init_data(NULL, -1, &telem_header);  // Comms library (tx, so no buffer)
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	461a      	mov	r2, r3
 8005542:	f04f 31ff 	mov.w	r1, #4294967295
 8005546:	2000      	movs	r0, #0
 8005548:	f001 ff6a 	bl	8007420 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <send_telem_packet+0x40>)
 800554e:	60bb      	str	r3, [r7, #8]
    send_data(&info, CLB_Telem);
 8005550:	f107 0308 	add.w	r3, r7, #8
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f001 ffa2 	bl	80074a0 <send_data>
}
 800555c:	bf00      	nop
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200008d0 	.word	0x200008d0

08005568 <save_flash_packet>:

void save_flash_packet() {
 8005568:	b580      	push	{r7, lr}
 800556a:	b0c8      	sub	sp, #288	; 0x120
 800556c:	af00      	add	r7, sp, #0

	CLB_Packet_Header flash_header;
	init_packet_header(&flash_header, SERVER_ADDR);
 800556e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005572:	2107      	movs	r1, #7
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ffb3 	bl	80054e0 <init_packet_header>
    init_data(NULL, -1, &flash_header);   // Comms library (tx, so no buffer)
 800557a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 31ff 	mov.w	r1, #4294967295
 8005584:	2000      	movs	r0, #0
 8005586:	f001 ff4b 	bl	8007420 <init_data>

    // packs data to flash
    uint8_t buffer[253] = {0};
 800558a:	f107 0310 	add.w	r3, r7, #16
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	22f9      	movs	r2, #249	; 0xf9
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f006 fc1d 	bl	800bdd8 <memset>
    CLB_send_data_info info;
    info.flash_arr_used = 0;
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	2200      	movs	r2, #0
 80055a2:	80da      	strh	r2, [r3, #6]
    info.flash_arr_sz = 253; // arbitrary
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	22fd      	movs	r2, #253	; 0xfd
 80055a8:	809a      	strh	r2, [r3, #4]
    info.flash_arr = buffer;
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	f107 0210 	add.w	r2, r7, #16
 80055b0:	609a      	str	r2, [r3, #8]
    send_data(&info, CLB_Flash);
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	2101      	movs	r1, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 ff72 	bl	80074a0 <send_data>

    uint8_t buffer_sz = info.flash_arr_used;
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80055c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    // Write to Flash
    write_to_flash(&flash, buffer, buffer_sz);
 80055c6:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80055ca:	f107 0310 	add.w	r3, r7, #16
 80055ce:	4619      	mov	r1, r3
 80055d0:	4803      	ldr	r0, [pc, #12]	; (80055e0 <save_flash_packet+0x78>)
 80055d2:	f002 fff6 	bl	80085c2 <write_to_flash>
}
 80055d6:	bf00      	nop
 80055d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000ec8 	.word	0x20000ec8

080055e4 <transmit_flash_data>:

// Mostly copied from press board
void transmit_flash_data() {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 80055ea:	af00      	add	r7, sp, #0

	// Ensure flash is flushed
	finish_flash_write(&flash);
 80055ec:	481c      	ldr	r0, [pc, #112]	; (8005660 <transmit_flash_data+0x7c>)
 80055ee:	f003 f8b3 	bl	8008758 <finish_flash_write>

	uint32_t page = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	uint32_t end_page = flash.current_page+1;
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <transmit_flash_data+0x7c>)
 80055fa:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80055fe:	3301      	adds	r3, #1
 8005600:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	if (flash.next_free_column == 0) // if the last page is completely empty, ignore it
 8005604:	4b16      	ldr	r3, [pc, #88]	; (8005660 <transmit_flash_data+0x7c>)
 8005606:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <transmit_flash_data+0x34>
		end_page--;
 800560e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8005612:	3b01      	subs	r3, #1
 8005614:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	reset_flash_read_pointer(&flash);
 8005618:	4811      	ldr	r0, [pc, #68]	; (8005660 <transmit_flash_data+0x7c>)
 800561a:	f003 f8e3 	bl	80087e4 <reset_flash_read_pointer>
	while (page < end_page) {
 800561e:	e011      	b.n	8005644 <transmit_flash_data+0x60>
	    read_next_2KB_from_flash(&flash, read_buffer);
 8005620:	463b      	mov	r3, r7
 8005622:	4619      	mov	r1, r3
 8005624:	480e      	ldr	r0, [pc, #56]	; (8005660 <transmit_flash_data+0x7c>)
 8005626:	f003 f8eb 	bl	8008800 <read_next_2KB_from_flash>
	    HAL_UART_Transmit(&COM_UART, read_buffer, W25N01GV_BYTES_PER_PAGE, HAL_MAX_DELAY);
 800562a:	4639      	mov	r1, r7
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005634:	480b      	ldr	r0, [pc, #44]	; (8005664 <transmit_flash_data+0x80>)
 8005636:	f005 fd8a 	bl	800b14e <HAL_UART_Transmit>
	    ++page;
 800563a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800563e:	3301      	adds	r3, #1
 8005640:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	while (page < end_page) {
 8005644:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8005648:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800564c:	429a      	cmp	r2, r3
 800564e:	d3e7      	bcc.n	8005620 <transmit_flash_data+0x3c>
		//HAL_IWDG_Refresh(&hiwdg);  TODO: re enable this
	}
	reset_flash_read_pointer(&flash);
 8005650:	4803      	ldr	r0, [pc, #12]	; (8005660 <transmit_flash_data+0x7c>)
 8005652:	f003 f8c7 	bl	80087e4 <reset_flash_read_pointer>
}
 8005656:	bf00      	nop
 8005658:	f607 0708 	addw	r7, r7, #2056	; 0x808
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000ec8 	.word	0x20000ec8
 8005664:	200008d0 	.word	0x200008d0

08005668 <send_calibration_data>:
        // no idle flag? --> DMA rollover occurred
        RxRollover++;       // increment Rollover Counter
    }
}

void send_calibration_data() {
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
	CLB_Packet_Header cal_header;

	cal_header.packet_type = 2; // calibration packet
 800566e:	2302      	movs	r3, #2
 8005670:	733b      	strb	r3, [r7, #12]
	cal_header.origin_addr = FLIGHT_EC_ADDR;
 8005672:	2302      	movs	r3, #2
 8005674:	737b      	strb	r3, [r7, #13]
	cal_header.target_addr = SERVER_ADDR;
 8005676:	2307      	movs	r3, #7
 8005678:	73bb      	strb	r3, [r7, #14]
	cal_header.priority = 1; // medium
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
	cal_header.do_cobbs = 1; // enable COBS
 800567e:	2301      	movs	r3, #1
 8005680:	747b      	strb	r3, [r7, #17]
	cal_header.timestamp = SYS_MICROS;
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <send_calibration_data+0x48>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	617b      	str	r3, [r7, #20]

    init_data(NULL, -1, &cal_header);  // Comms library (tx, so no buffer)
 800568a:	f107 030c 	add.w	r3, r7, #12
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 31ff 	mov.w	r1, #4294967295
 8005694:	2000      	movs	r0, #0
 8005696:	f001 fec3 	bl	8007420 <init_data>

    CLB_send_data_info info;
    info.uartx = &COM_UART;
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <send_calibration_data+0x4c>)
 800569c:	603b      	str	r3, [r7, #0]
    send_data(&info, CLB_Telem);
 800569e:	463b      	mov	r3, r7
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fefc 	bl	80074a0 <send_data>
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200006e8 	.word	0x200006e8
 80056b4:	200008d0 	.word	0x200008d0

080056b8 <set_status_flag>:
 */


#include "status_flags.h"

void set_status_flag(uint32_t flag) {
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	status_flags |= (1 << flag);  // Set that bit index to 1
 80056c0:	2201      	movs	r2, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <set_status_flag+0x28>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	4a03      	ldr	r2, [pc, #12]	; (80056e0 <set_status_flag+0x28>)
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000410 	.word	0x20000410

080056e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_MspInit+0x4c>)
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <HAL_MspInit+0x4c>)
 80056f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f8:	6453      	str	r3, [r2, #68]	; 0x44
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <HAL_MspInit+0x4c>)
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_MspInit+0x4c>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	4a08      	ldr	r2, [pc, #32]	; (8005730 <HAL_MspInit+0x4c>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6413      	str	r3, [r2, #64]	; 0x40
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_MspInit+0x4c>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800

08005734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b090      	sub	sp, #64	; 0x40
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800573c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_SPI_MspInit+0x1b4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d12c      	bne.n	80057b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
 800575a:	4b64      	ldr	r3, [pc, #400]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005764:	6453      	str	r3, [r2, #68]	; 0x44
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	4a5c      	ldr	r2, [pc, #368]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	6313      	str	r3, [r2, #48]	; 0x30
 8005782:	4b5a      	ldr	r3, [pc, #360]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800578e:	23e0      	movs	r3, #224	; 0xe0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005792:	2302      	movs	r3, #2
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800579a:	2303      	movs	r3, #3
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800579e:	2305      	movs	r3, #5
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057a6:	4619      	mov	r1, r3
 80057a8:	4851      	ldr	r0, [pc, #324]	; (80058f0 <HAL_SPI_MspInit+0x1bc>)
 80057aa:	f003 fb19 	bl	8008de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80057ae:	e096      	b.n	80058de <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a4f      	ldr	r2, [pc, #316]	; (80058f4 <HAL_SPI_MspInit+0x1c0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d12d      	bne.n	8005816 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	4b4b      	ldr	r3, [pc, #300]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	4a4a      	ldr	r2, [pc, #296]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ca:	4b48      	ldr	r3, [pc, #288]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d2:	623b      	str	r3, [r7, #32]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	4b44      	ldr	r3, [pc, #272]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	4a43      	ldr	r2, [pc, #268]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	6313      	str	r3, [r2, #48]	; 0x30
 80057e6:	4b41      	ldr	r3, [pc, #260]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80057f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f8:	2302      	movs	r3, #2
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005800:	2303      	movs	r3, #3
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005804:	2305      	movs	r3, #5
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800580c:	4619      	mov	r1, r3
 800580e:	483a      	ldr	r0, [pc, #232]	; (80058f8 <HAL_SPI_MspInit+0x1c4>)
 8005810:	f003 fae6 	bl	8008de0 <HAL_GPIO_Init>
}
 8005814:	e063      	b.n	80058de <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI3)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_SPI_MspInit+0x1c8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d12d      	bne.n	800587c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	4b31      	ldr	r3, [pc, #196]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	4a30      	ldr	r2, [pc, #192]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 800582a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582e:	6413      	str	r3, [r2, #64]	; 0x40
 8005830:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	4a29      	ldr	r2, [pc, #164]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6313      	str	r3, [r2, #48]	; 0x30
 800584c:	4b27      	ldr	r3, [pc, #156]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005858:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585e:	2302      	movs	r3, #2
 8005860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005862:	2300      	movs	r3, #0
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005866:	2303      	movs	r3, #3
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800586a:	2306      	movs	r3, #6
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800586e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005872:	4619      	mov	r1, r3
 8005874:	4822      	ldr	r0, [pc, #136]	; (8005900 <HAL_SPI_MspInit+0x1cc>)
 8005876:	f003 fab3 	bl	8008de0 <HAL_GPIO_Init>
}
 800587a:	e030      	b.n	80058de <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI4)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <HAL_SPI_MspInit+0x1d0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d12b      	bne.n	80058de <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005894:	6453      	str	r3, [r2, #68]	; 0x44
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	4a10      	ldr	r2, [pc, #64]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80058ac:	f043 0310 	orr.w	r3, r3, #16
 80058b0:	6313      	str	r3, [r2, #48]	; 0x30
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_SPI_MspInit+0x1b8>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80058be:	2364      	movs	r3, #100	; 0x64
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c2:	2302      	movs	r3, #2
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ca:	2303      	movs	r3, #3
 80058cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80058ce:	2305      	movs	r3, #5
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058d6:	4619      	mov	r1, r3
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <HAL_SPI_MspInit+0x1d4>)
 80058da:	f003 fa81 	bl	8008de0 <HAL_GPIO_Init>
}
 80058de:	bf00      	nop
 80058e0:	3740      	adds	r7, #64	; 0x40
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40013000 	.word	0x40013000
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40003800 	.word	0x40003800
 80058f8:	40020400 	.word	0x40020400
 80058fc:	40003c00 	.word	0x40003c00
 8005900:	40020800 	.word	0x40020800
 8005904:	40013400 	.word	0x40013400
 8005908:	40021000 	.word	0x40021000

0800590c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_TIM_Base_MspInit+0xe0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10e      	bne.n	800593c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4a32      	ldr	r2, [pc, #200]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800593a:	e052      	b.n	80059e2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2c      	ldr	r2, [pc, #176]	; (80059f4 <HAL_TIM_Base_MspInit+0xe8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d116      	bne.n	8005974 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	4b29      	ldr	r3, [pc, #164]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	6453      	str	r3, [r2, #68]	; 0x44
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8005962:	2200      	movs	r2, #0
 8005964:	2101      	movs	r1, #1
 8005966:	2019      	movs	r0, #25
 8005968:	f003 f971 	bl	8008c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800596c:	2019      	movs	r0, #25
 800596e:	f003 f98a 	bl	8008c86 <HAL_NVIC_EnableIRQ>
}
 8005972:	e036      	b.n	80059e2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_TIM_Base_MspInit+0xec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d116      	bne.n	80059ac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	4a1a      	ldr	r2, [pc, #104]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800598c:	6453      	str	r3, [r2, #68]	; 0x44
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800599a:	2200      	movs	r2, #0
 800599c:	2101      	movs	r1, #1
 800599e:	201a      	movs	r0, #26
 80059a0:	f003 f955 	bl	8008c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80059a4:	201a      	movs	r0, #26
 80059a6:	f003 f96e 	bl	8008c86 <HAL_NVIC_EnableIRQ>
}
 80059aa:	e01a      	b.n	80059e2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM13)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a12      	ldr	r2, [pc, #72]	; (80059fc <HAL_TIM_Base_MspInit+0xf0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d115      	bne.n	80059e2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 80059c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c4:	6413      	str	r3, [r2, #64]	; 0x40
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <HAL_TIM_Base_MspInit+0xe4>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2101      	movs	r1, #1
 80059d6:	202c      	movs	r0, #44	; 0x2c
 80059d8:	f003 f939 	bl	8008c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80059dc:	202c      	movs	r0, #44	; 0x2c
 80059de:	f003 f952 	bl	8008c86 <HAL_NVIC_EnableIRQ>
}
 80059e2:	bf00      	nop
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	40001c00 	.word	0x40001c00

08005a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <HAL_UART_MspInit+0x94>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d133      	bne.n	8005a8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a2c:	f043 0310 	orr.w	r3, r3, #16
 8005a30:	6453      	str	r3, [r2, #68]	; 0x44
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_UART_MspInit+0x98>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a5a:	23c0      	movs	r3, #192	; 0xc0
 8005a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a66:	2303      	movs	r3, #3
 8005a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a6a:	2307      	movs	r3, #7
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6e:	f107 0314 	add.w	r3, r7, #20
 8005a72:	4619      	mov	r1, r3
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <HAL_UART_MspInit+0x9c>)
 8005a76:	f003 f9b3 	bl	8008de0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	2025      	movs	r0, #37	; 0x25
 8005a80:	f003 f8e5 	bl	8008c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a84:	2025      	movs	r0, #37	; 0x25
 8005a86:	f003 f8fe 	bl	8008c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	; 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40011000 	.word	0x40011000
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40020400 	.word	0x40020400

08005aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005aa4:	e7fe      	b.n	8005aa4 <NMI_Handler+0x4>

08005aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aaa:	e7fe      	b.n	8005aaa <HardFault_Handler+0x4>

08005aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ab0:	e7fe      	b.n	8005ab0 <MemManage_Handler+0x4>

08005ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ab6:	e7fe      	b.n	8005ab6 <BusFault_Handler+0x4>

08005ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005abc:	e7fe      	b.n	8005abc <UsageFault_Handler+0x4>

08005abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aec:	f002 ffb4 	bl	8008a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005af8:	4802      	ldr	r0, [pc, #8]	; (8005b04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005afa:	f004 ff1d 	bl	800a938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	2000069c 	.word	0x2000069c

08005b08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005b0c:	4802      	ldr	r0, [pc, #8]	; (8005b18 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005b0e:	f004 ff13 	bl	800a938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000a14 	.word	0x20000a14

08005b1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b20:	4802      	ldr	r0, [pc, #8]	; (8005b2c <USART1_IRQHandler+0x10>)
 8005b22:	f005 fbd7 	bl	800b2d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200008d0 	.word	0x200008d0

08005b30 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005b36:	f004 feff 	bl	800a938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000888 	.word	0x20000888

08005b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <SystemInit+0x28>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <SystemInit+0x28>)
 8005b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <SystemInit+0x28>)
 8005b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	e000ed00 	.word	0xe000ed00

08005b70 <actuate_tank_motor_pos>:
/**
 * Small wrapper around motor actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_motor_pos(TPC_Info* tank, float motor_pos) {
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	ed87 0a00 	vstr	s0, [r7]
	if (tank->tank_enable) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
		// actuate motor to pos
	}
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <actuate_tank_control_valve>:
/**
 * Small wrapper around control valve actuation, to allow specific
 * tanks to be disabled. Calculations are always run, but actuations
 * are stopped when tank_enable is false.
 */
void actuate_tank_control_valve(TPC_Info* tank, uint8_t state) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
	if (tank->tank_enable) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <actuate_tank_control_valve+0x26>
		set_valve_channel(tank->control_valve_channel, state);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	789b      	ldrb	r3, [r3, #2]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f001 f959 	bl	8006e64 <set_valve_channel>
	}
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <tank_autopress_bang_bang>:
	tank->PID_error_sum = 0;
	tank->PID_prev_step_error = tank->target_pres - *(tank->control_pres);
}


void tank_autopress_bang_bang(TPC_Info* tank) {
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
	if (*(tank->control_pres) < (tank->target_pres
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	ed93 7a00 	vldr	s14, [r3]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
			+ tank->bang_bang_low_pres_diff)) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (*(tank->control_pres) < (tank->target_pres
 8005bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be2:	d504      	bpl.n	8005bee <tank_autopress_bang_bang+0x34>
		actuate_tank_control_valve(tank, 1);
 8005be4:	2101      	movs	r1, #1
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ffd0 	bl	8005b8c <actuate_tank_control_valve>
	}
	else if (*(tank->control_pres) > (tank->target_pres
			+ tank->bang_bang_high_pres_diff)) {
		actuate_tank_control_valve(tank, 0);
	}
}
 8005bec:	e015      	b.n	8005c1a <tank_autopress_bang_bang+0x60>
	else if (*(tank->control_pres) > (tank->target_pres
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	ed93 7a00 	vldr	s14, [r3]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
			+ tank->bang_bang_high_pres_diff)) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
	else if (*(tank->control_pres) > (tank->target_pres
 8005c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	dc00      	bgt.n	8005c12 <tank_autopress_bang_bang+0x58>
}
 8005c10:	e003      	b.n	8005c1a <tank_autopress_bang_bang+0x60>
		actuate_tank_control_valve(tank, 0);
 8005c12:	2100      	movs	r1, #0
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ffb9 	bl	8005b8c <actuate_tank_control_valve>
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <tank_PID_pressure_control>:


void tank_PID_pressure_control(TPC_Info* tank) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	float dt = (tank->PID_ctrl_loop_period_ms)/1000.0;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fa fc2b 	bl	800048c <__aeabi_ui2d>
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	4b4a      	ldr	r3, [pc, #296]	; (8005d64 <tank_PID_pressure_control+0x140>)
 8005c3c:	f7fa fdca 	bl	80007d4 <__aeabi_ddiv>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7fa ff6a 	bl	8000b20 <__aeabi_d2f>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30

	// The missile knows where it is
	float error = tank->target_pres - *(tank->control_pres);  // P
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	edd3 7a00 	vldr	s15, [r3]
 8005c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float next_error_sum = tank->PID_error_sum + error*dt;    // I
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005c70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float slope = (error - tank->PID_prev_step_error) / dt;   // D
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005c86:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	tank->PID_prev_step_error = error;  // store for next D calculation
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9e:	675a      	str	r2, [r3, #116]	; 0x74

	// Apply gains
	float Kp_term = tank->K_p * error;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005ca6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a08 	vstr	s15, [r7, #32]
	float Ki_term = tank->K_i * tank->PID_error_sum;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a07 	vstr	s15, [r7, #28]
	float Kd_term = tank->K_d * slope;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005ccc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a06 	vstr	s15, [r7, #24]
	float PID_total_output = Kp_term + Ki_term + Kd_term;
 8005cd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cec:	edc7 7a05 	vstr	s15, [r7, #20]
	// Limit output
	float motor_delta;
	// TODO: define these 2 motor variables somewhere, probably motor struct
	// TODO: change all these variable names when they get decided
	float motor_pos, max_motor_pos;
	float max_motor_delta = max_motor_pos - motor_pos;
 8005cf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cfc:	edc7 7a02 	vstr	s15, [r7, #8]
	if (PID_total_output < -motor_pos) {  // Lower bound
 8005d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d04:	eef1 7a67 	vneg.f32	s15, s15
 8005d08:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d14:	d506      	bpl.n	8005d24 <tank_PID_pressure_control+0x100>
		motor_delta = -motor_pos;
 8005d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1a:	eef1 7a67 	vneg.f32	s15, s15
 8005d1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8005d22:	e010      	b.n	8005d46 <tank_PID_pressure_control+0x122>
	}
	else if (PID_total_output > max_motor_delta) {  // Upper bound
 8005d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	dd02      	ble.n	8005d3c <tank_PID_pressure_control+0x118>
		motor_delta = max_motor_delta;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3a:	e004      	b.n	8005d46 <tank_PID_pressure_control+0x122>
	}
	else {
		motor_delta = PID_total_output;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
		// Update sum IFF output doesn't saturate, to prevent integrator windup
		tank->PID_error_sum = next_error_sum;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	671a      	str	r2, [r3, #112]	; 0x70
	}

	// Actuate motor to new position
	actuate_tank_motor_pos(tank, motor_pos + motor_delta);
 8005d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d52:	eeb0 0a67 	vmov.f32	s0, s15
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff0a 	bl	8005b70 <actuate_tank_motor_pos>

	// Log data
	// TODO: should this go here, or in a different function?
	// Maybe just update some struct variables and log them later
}
 8005d5c:	bf00      	nop
 8005d5e:	3738      	adds	r7, #56	; 0x38
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	408f4000 	.word	0x408f4000

08005d68 <tank_check_control_valve_threshold>:


// Almost identical to autopress bang bang but it runs in parallel
// with the PID control loop and has different thresholds.
void tank_check_control_valve_threshold(TPC_Info* tank) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    if (*(tank->control_pres) < (tank->PID_ctrl_vlv_low_pres)) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	ed93 7a00 	vldr	s14, [r3]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	d504      	bpl.n	8005d92 <tank_check_control_valve_threshold+0x2a>
    	actuate_tank_control_valve(tank, 1);
 8005d88:	2101      	movs	r1, #1
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fefe 	bl	8005b8c <actuate_tank_control_valve>
    }
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
    	actuate_tank_control_valve(tank, 0);
    }
}
 8005d90:	e010      	b.n	8005db4 <tank_check_control_valve_threshold+0x4c>
    else if (*(tank->control_pres) > (tank->PID_ctrl_vlv_high_pres)) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	ed93 7a00 	vldr	s14, [r3]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	dc00      	bgt.n	8005dac <tank_check_control_valve_threshold+0x44>
}
 8005daa:	e003      	b.n	8005db4 <tank_check_control_valve_threshold+0x4c>
    	actuate_tank_control_valve(tank, 0);
 8005dac:	2100      	movs	r1, #0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff feec 	bl	8005b8c <actuate_tank_control_valve>
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	0000      	movs	r0, r0
	...

08005dc0 <tank_startup_init_motor_position>:


// TODO: refactor this bigly
void tank_startup_init_motor_position(TPC_Info* tank) {
 8005dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dc4:	ed2d 8b02 	vpush	{d8}
 8005dc8:	b09a      	sub	sp, #104	; 0x68
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	static double c2     = 6140;
	static double c3     = 5360;
	static double c4     = 769.8;

	double crit_pr, t_r, valve_cv, t_f, p_rat, t_rat, q_acf, q_scf, vdot;
	double deg = 0;
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double p_i    = (double)(*(tank->COPV_pres));       // cng pressure
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fb75 	bl	80004d0 <__aeabi_f2d>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double p_o    = (double)(*(tank->control_pres));     // tank pressure
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa fb6b 	bl	80004d0 <__aeabi_f2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Avoid divide by zero error
	if (p_i == 0) {
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005e0e:	f7fa fe1f 	bl	8000a50 <__aeabi_dcmpeq>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <tank_startup_init_motor_position+0x62>
		p_i = 0.0000001;
 8005e18:	a397      	add	r3, pc, #604	; (adr r3, 8006078 <tank_startup_init_motor_position+0x2b8>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (p_o == 0) {
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005e2e:	f7fa fe0f 	bl	8000a50 <__aeabi_dcmpeq>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <tank_startup_init_motor_position+0x82>
		p_o = 0.0000001;
 8005e38:	a38f      	add	r3, pc, #572	; (adr r3, 8006078 <tank_startup_init_motor_position+0x2b8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	t_f = 300; // K  TODO: what are these, and why aren't they also static?
 8005e42:	a38f      	add	r3, pc, #572	; (adr r3, 8006080 <tank_startup_init_motor_position+0x2c0>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_std = 288; // K
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	4b85      	ldr	r3, [pc, #532]	; (8006068 <tank_startup_init_motor_position+0x2a8>)
 8005e52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p_std = 14.7; // psi
 8005e56:	a376      	add	r3, pc, #472	; (adr r3, 8006030 <tank_startup_init_motor_position+0x270>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (tank->is_cryogenic) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <tank_startup_init_motor_position+0xb4>
		vdot   = 0.00317;
 8005e68:	a373      	add	r3, pc, #460	; (adr r3, 8006038 <tank_startup_init_motor_position+0x278>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8005e72:	e004      	b.n	8005e7e <tank_startup_init_motor_position+0xbe>
	}
	else {
		vdot   = 0.00361;
 8005e74:	a372      	add	r3, pc, #456	; (adr r3, 8006040 <tank_startup_init_motor_position+0x280>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	// Calculations
	crit_pr = pow(2.0 / (gamma + 1), gamma / (gamma - 1));
 8005e7e:	4b7b      	ldr	r3, [pc, #492]	; (800606c <tank_startup_init_motor_position+0x2ac>)
 8005e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	4b79      	ldr	r3, [pc, #484]	; (8006070 <tank_startup_init_motor_position+0x2b0>)
 8005e8a:	f7fa f9c3 	bl	8000214 <__adddf3>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e9a:	f7fa fc9b 	bl	80007d4 <__aeabi_ddiv>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	ec43 2b18 	vmov	d8, r2, r3
 8005ea6:	4b71      	ldr	r3, [pc, #452]	; (800606c <tank_startup_init_motor_position+0x2ac>)
 8005ea8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005eac:	4b6f      	ldr	r3, [pc, #444]	; (800606c <tank_startup_init_motor_position+0x2ac>)
 8005eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	4b6e      	ldr	r3, [pc, #440]	; (8006070 <tank_startup_init_motor_position+0x2b0>)
 8005eb8:	f7fa f9aa 	bl	8000210 <__aeabi_dsub>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f7fa fc86 	bl	80007d4 <__aeabi_ddiv>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	ec43 2b17 	vmov	d7, r2, r3
 8005ed0:	eeb0 1a47 	vmov.f32	s2, s14
 8005ed4:	eef0 1a67 	vmov.f32	s3, s15
 8005ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8005edc:	eef0 0a68 	vmov.f32	s1, s17
 8005ee0:	f006 f806 	bl	800bef0 <pow>
 8005ee4:	ed87 0b06 	vstr	d0, [r7, #24]
	t_r     = (double)(*(tank->COPV_temp)) * (9.0/5);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa faee 	bl	80004d0 <__aeabi_f2d>
 8005ef4:	a354      	add	r3, pc, #336	; (adr r3, 8006048 <tank_startup_init_motor_position+0x288>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa fb41 	bl	8000580 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	q_acf = vdot*2118.88; // cfm
 8005f06:	a352      	add	r3, pc, #328	; (adr r3, 8006050 <tank_startup_init_motor_position+0x290>)
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f10:	f7fa fb36 	bl	8000580 <__aeabi_dmul>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (tank->is_cryogenic) { // cryogenic liquid case
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <tank_startup_init_motor_position+0x19c>
		q_scf = q_acf*p_o/(p_std)*1.3;
 8005f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f2c:	f7fa fb28 	bl	8000580 <__aeabi_dmul>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3c:	f7fa fc4a 	bl	80007d4 <__aeabi_ddiv>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	a343      	add	r3, pc, #268	; (adr r3, 8006058 <tank_startup_init_motor_position+0x298>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb17 	bl	8000580 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8005f5a:	e021      	b.n	8005fa0 <tank_startup_init_motor_position+0x1e0>
	}
	else {
		q_scf = q_acf*p_o*t_std/(p_std*t_f);
 8005f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f64:	f7fa fb0c 	bl	8000580 <__aeabi_dmul>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f74:	f7fa fb04 	bl	8000580 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	461d      	mov	r5, r3
 8005f80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f88:	f7fa fafa 	bl	8000580 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa fc1e 	bl	80007d4 <__aeabi_ddiv>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	if (crit_pr >= p_o/p_i) { // Critical flows
 8005fa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fa4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005fa8:	f7fa fc14 	bl	80007d4 <__aeabi_ddiv>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005fb4:	f7fa fd6a 	bl	8000a8c <__aeabi_dcmpge>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d064      	beq.n	8006088 <tank_startup_init_motor_position+0x2c8>
		valve_cv = q_scf/13.61/p_i/sqrt(1.0/sg/t_r);
 8005fbe:	a328      	add	r3, pc, #160	; (adr r3, 8006060 <tank_startup_init_motor_position+0x2a0>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005fc8:	f7fa fc04 	bl	80007d4 <__aeabi_ddiv>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fd8:	f7fa fbfc 	bl	80007d4 <__aeabi_ddiv>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4614      	mov	r4, r2
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	4b23      	ldr	r3, [pc, #140]	; (8006074 <tank_startup_init_motor_position+0x2b4>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	4920      	ldr	r1, [pc, #128]	; (8006070 <tank_startup_init_motor_position+0x2b0>)
 8005ff0:	f7fa fbf0 	bl	80007d4 <__aeabi_ddiv>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006000:	f7fa fbe8 	bl	80007d4 <__aeabi_ddiv>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	ec43 2b17 	vmov	d7, r2, r3
 800600c:	eeb0 0a47 	vmov.f32	s0, s14
 8006010:	eef0 0a67 	vmov.f32	s1, s15
 8006014:	f006 f81a 	bl	800c04c <sqrt>
 8006018:	ec53 2b10 	vmov	r2, r3, d0
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa fbd8 	bl	80007d4 <__aeabi_ddiv>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800602c:	e070      	b.n	8006110 <tank_startup_init_motor_position+0x350>
 800602e:	bf00      	nop
 8006030:	66666666 	.word	0x66666666
 8006034:	402d6666 	.word	0x402d6666
 8006038:	ca8198f2 	.word	0xca8198f2
 800603c:	3f69f7f8 	.word	0x3f69f7f8
 8006040:	fe08aefb 	.word	0xfe08aefb
 8006044:	3f6d92b7 	.word	0x3f6d92b7
 8006048:	cccccccd 	.word	0xcccccccd
 800604c:	3ffccccc 	.word	0x3ffccccc
 8006050:	8f5c28f6 	.word	0x8f5c28f6
 8006054:	40a08dc2 	.word	0x40a08dc2
 8006058:	cccccccd 	.word	0xcccccccd
 800605c:	3ff4cccc 	.word	0x3ff4cccc
 8006060:	eb851eb8 	.word	0xeb851eb8
 8006064:	402b3851 	.word	0x402b3851
 8006068:	40720000 	.word	0x40720000
 800606c:	20000198 	.word	0x20000198
 8006070:	3ff00000 	.word	0x3ff00000
 8006074:	200001a0 	.word	0x200001a0
 8006078:	9abcaf48 	.word	0x9abcaf48
 800607c:	3e7ad7f2 	.word	0x3e7ad7f2
 8006080:	00000000 	.word	0x00000000
 8006084:	4072c000 	.word	0x4072c000
	} else {
		valve_cv = q_scf/16.05/sqrt((pow(p_i,2)-pow(p_o,2))/sg/t_r);
 8006088:	a373      	add	r3, pc, #460	; (adr r3, 8006258 <tank_startup_init_motor_position+0x498>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006092:	f7fa fb9f 	bl	80007d4 <__aeabi_ddiv>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4614      	mov	r4, r2
 800609c:	461d      	mov	r5, r3
 800609e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8006220 <tank_startup_init_motor_position+0x460>
 80060a2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80060a6:	f005 ff23 	bl	800bef0 <pow>
 80060aa:	ec59 8b10 	vmov	r8, r9, d0
 80060ae:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8006220 <tank_startup_init_motor_position+0x460>
 80060b2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80060b6:	f005 ff1b 	bl	800bef0 <pow>
 80060ba:	ec53 2b10 	vmov	r2, r3, d0
 80060be:	4640      	mov	r0, r8
 80060c0:	4649      	mov	r1, r9
 80060c2:	f7fa f8a5 	bl	8000210 <__aeabi_dsub>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4b5c      	ldr	r3, [pc, #368]	; (8006240 <tank_startup_init_motor_position+0x480>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa fb7e 	bl	80007d4 <__aeabi_ddiv>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4610      	mov	r0, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060e4:	f7fa fb76 	bl	80007d4 <__aeabi_ddiv>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	ec43 2b17 	vmov	d7, r2, r3
 80060f0:	eeb0 0a47 	vmov.f32	s0, s14
 80060f4:	eef0 0a67 	vmov.f32	s1, s15
 80060f8:	f005 ffa8 	bl	800c04c <sqrt>
 80060fc:	ec53 2b10 	vmov	r2, r3, d0
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa fb66 	bl	80007d4 <__aeabi_ddiv>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 8006110:	4b4c      	ldr	r3, [pc, #304]	; (8006244 <tank_startup_init_motor_position+0x484>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fa f9db 	bl	80004d0 <__aeabi_f2d>
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8006228 <tank_startup_init_motor_position+0x468>
 8006122:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006126:	f005 fee3 	bl	800bef0 <pow>
 800612a:	ec51 0b10 	vmov	r0, r1, d0
 800612e:	4b46      	ldr	r3, [pc, #280]	; (8006248 <tank_startup_init_motor_position+0x488>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fa24 	bl	8000580 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4690      	mov	r8, r2
 800613e:	4699      	mov	r9, r3
		  c2*pow(valve_cv, 3) +
 8006140:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8006230 <tank_startup_init_motor_position+0x470>
 8006144:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006148:	f005 fed2 	bl	800bef0 <pow>
 800614c:	ec51 0b10 	vmov	r0, r1, d0
 8006150:	4b3e      	ldr	r3, [pc, #248]	; (800624c <tank_startup_init_motor_position+0x48c>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa fa13 	bl	8000580 <__aeabi_dmul>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa f857 	bl	8000214 <__adddf3>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
		  c3*pow(valve_cv, 2) +
 800616e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8006220 <tank_startup_init_motor_position+0x460>
 8006172:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8006176:	f005 febb 	bl	800bef0 <pow>
 800617a:	ec51 0b10 	vmov	r0, r1, d0
 800617e:	4b34      	ldr	r3, [pc, #208]	; (8006250 <tank_startup_init_motor_position+0x490>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa f9fc 	bl	8000580 <__aeabi_dmul>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
		  c2*pow(valve_cv, 3) +
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	f7fa f840 	bl	8000214 <__adddf3>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4690      	mov	r8, r2
 800619a:	4699      	mov	r9, r3
		  c4*valve_cv);
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <tank_startup_init_motor_position+0x494>)
 800619e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80061a6:	f7fa f9eb 	bl	8000580 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
		  c3*pow(valve_cv, 2) +
 80061ae:	4640      	mov	r0, r8
 80061b0:	4649      	mov	r1, r9
 80061b2:	f7fa f82f 	bl	8000214 <__adddf3>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
	deg = init_motor_pos_deg_correction_factor * (c1*pow(valve_cv, 4) +
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	f7fa f9df 	bl	8000580 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Output limiting
	if (deg < 0) { deg = 0; }
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061d6:	f7fa fc45 	bl	8000a64 <__aeabi_dcmplt>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <tank_startup_init_motor_position+0x42c>
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (deg > 2460) { deg = 2460; }
 80061ec:	a312      	add	r3, pc, #72	; (adr r3, 8006238 <tank_startup_init_motor_position+0x478>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061f6:	f7fa fc53 	bl	8000aa0 <__aeabi_dcmpgt>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d100      	bne.n	8006202 <tank_startup_init_motor_position+0x442>
		targetPos[tank_num] = deg; // position given in deg
		curDir[tank_num] = (curPos[tank_num] < targetPos[tank_num]) ? 1 : -1; // CCW facing the motor
		mtr_set[tank_num] = deg; // save new motor position setpoint
	}
	*/
}
 8006200:	e004      	b.n	800620c <tank_startup_init_motor_position+0x44c>
	if (deg > 2460) { deg = 2460; }
 8006202:	a30d      	add	r3, pc, #52	; (adr r3, 8006238 <tank_startup_init_motor_position+0x478>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
}
 800620c:	bf00      	nop
 800620e:	3768      	adds	r7, #104	; 0x68
 8006210:	46bd      	mov	sp, r7
 8006212:	ecbd 8b02 	vpop	{d8}
 8006216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800621a:	bf00      	nop
 800621c:	f3af 8000 	nop.w
 8006220:	00000000 	.word	0x00000000
 8006224:	40000000 	.word	0x40000000
 8006228:	00000000 	.word	0x00000000
 800622c:	40100000 	.word	0x40100000
 8006230:	00000000 	.word	0x00000000
 8006234:	40080000 	.word	0x40080000
 8006238:	00000000 	.word	0x00000000
 800623c:	40a33800 	.word	0x40a33800
 8006240:	200001a0 	.word	0x200001a0
 8006244:	20000420 	.word	0x20000420
 8006248:	200001a8 	.word	0x200001a8
 800624c:	200001b0 	.word	0x200001b0
 8006250:	200001b8 	.word	0x200001b8
 8006254:	200001c0 	.word	0x200001c0
 8006258:	cccccccd 	.word	0xcccccccd
 800625c:	40300ccc 	.word	0x40300ccc

08006260 <set_vlv>:

extern TIM_HandleTypeDef TIM_MICROS;

// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

void set_vlv(uint8_t* data, uint8_t* status){
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]

	uint32_t vlv_num = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3303      	adds	r3, #3
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	061a      	lsls	r2, r3, #24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3302      	adds	r3, #2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	041b      	lsls	r3, r3, #16
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4313      	orrs	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
	uint8_t state = (data[4])/1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	72fb      	strb	r3, [r7, #11]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	set_valve_channel(vlv_num, state);
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fde3 	bl	8006e64 <set_valve_channel>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <set_kp>:

void set_kp(uint8_t* data, uint8_t* status){
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3308      	adds	r3, #8
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	2338      	movs	r3, #56	; 0x38
 80062c2:	409a      	lsls	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3307      	adds	r3, #7
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	2330      	movs	r3, #48	; 0x30
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3306      	adds	r3, #6
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	2328      	movs	r3, #40	; 0x28
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3305      	adds	r3, #5
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	2320      	movs	r3, #32
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	061b      	lsls	r3, r3, #24
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3303      	adds	r3, #3
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3302      	adds	r3, #2
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	4313      	orrs	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	3201      	adds	r2, #1
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f8c6 	bl	80004ac <__aeabi_i2d>
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <set_kp+0xb8>)
 8006326:	f7fa fa55 	bl	80007d4 <__aeabi_ddiv>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d80f      	bhi.n	8006358 <set_kp+0xb0>
		tanks[motor_num].K_p = gain;  // control
 8006338:	7dfc      	ldrb	r4, [r7, #23]
 800633a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633e:	f7fa fbef 	bl	8000b20 <__aeabi_d2f>
 8006342:	4602      	mov	r2, r0
 8006344:	4907      	ldr	r1, [pc, #28]	; (8006364 <set_kp+0xbc>)
 8006346:	4623      	mov	r3, r4
 8006348:	015b      	lsls	r3, r3, #5
 800634a:	4423      	add	r3, r4
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3358      	adds	r3, #88	; 0x58
 8006352:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006354:	f7fb fdfa 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	40590000 	.word	0x40590000
 8006364:	200004fc 	.word	0x200004fc

08006368 <set_ki>:

void set_ki(uint8_t* data, uint8_t* status){
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3308      	adds	r3, #8
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	2338      	movs	r3, #56	; 0x38
 8006382:	409a      	lsls	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3307      	adds	r3, #7
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	2330      	movs	r3, #48	; 0x30
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3306      	adds	r3, #6
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	4619      	mov	r1, r3
 800639c:	2328      	movs	r3, #40	; 0x28
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3305      	adds	r3, #5
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	4619      	mov	r1, r3
 80063ac:	2320      	movs	r3, #32
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3303      	adds	r3, #3
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3302      	adds	r3, #2
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	4313      	orrs	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	3201      	adds	r2, #1
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	4313      	orrs	r3, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa f866 	bl	80004ac <__aeabi_i2d>
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <set_ki+0xb8>)
 80063e6:	f7fa f9f5 	bl	80007d4 <__aeabi_ddiv>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d80f      	bhi.n	8006418 <set_ki+0xb0>
		tanks[motor_num].K_i = gain;  // control
 80063f8:	7dfc      	ldrb	r4, [r7, #23]
 80063fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063fe:	f7fa fb8f 	bl	8000b20 <__aeabi_d2f>
 8006402:	4602      	mov	r2, r0
 8006404:	4907      	ldr	r1, [pc, #28]	; (8006424 <set_ki+0xbc>)
 8006406:	4623      	mov	r3, r4
 8006408:	015b      	lsls	r3, r3, #5
 800640a:	4423      	add	r3, r4
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	335c      	adds	r3, #92	; 0x5c
 8006412:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006414:	f7fb fd9a 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}
 8006420:	40590000 	.word	0x40590000
 8006424:	200004fc 	.word	0x200004fc

08006428 <set_kd>:

void set_kd(uint8_t* data, uint8_t* status){
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	75fb      	strb	r3, [r7, #23]
	double gain = (data[8]<<56|data[7]<<48|data[6]<<40|data[5]<<32|data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3308      	adds	r3, #8
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	2338      	movs	r3, #56	; 0x38
 8006442:	409a      	lsls	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3307      	adds	r3, #7
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	2330      	movs	r3, #48	; 0x30
 800644e:	fa01 f303 	lsl.w	r3, r1, r3
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3306      	adds	r3, #6
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	2328      	movs	r3, #40	; 0x28
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3305      	adds	r3, #5
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	4619      	mov	r1, r3
 800646c:	2320      	movs	r3, #32
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	061b      	lsls	r3, r3, #24
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3303      	adds	r3, #3
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3302      	adds	r3, #2
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	4313      	orrs	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	3201      	adds	r2, #1
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fa f806 	bl	80004ac <__aeabi_i2d>
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <set_kd+0xb8>)
 80064a6:	f7fa f995 	bl	80007d4 <__aeabi_ddiv>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d80f      	bhi.n	80064d8 <set_kd+0xb0>
		tanks[motor_num].K_d = gain;
 80064b8:	7dfc      	ldrb	r4, [r7, #23]
 80064ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064be:	f7fa fb2f 	bl	8000b20 <__aeabi_d2f>
 80064c2:	4602      	mov	r2, r0
 80064c4:	4907      	ldr	r1, [pc, #28]	; (80064e4 <set_kd+0xbc>)
 80064c6:	4623      	mov	r3, r4
 80064c8:	015b      	lsls	r3, r3, #5
 80064ca:	4423      	add	r3, r4
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3360      	adds	r3, #96	; 0x60
 80064d2:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80064d4:	f7fb fd3a 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	40590000 	.word	0x40590000
 80064e4:	200004fc 	.word	0x200004fc

080064e8 <set_state>:

void set_state(uint8_t* data, uint8_t* status){
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

	uint8_t next_state = (data[0])/1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	manual_state_transition(next_state);
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa fd54 	bl	8000fa8 <manual_state_transition>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <download_flash>:

void download_flash(uint8_t* data, uint8_t* status){
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	transmit_flash_data();
 8006512:	f7ff f867 	bl	80055e4 <transmit_flash_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <wipe_flash>:

void wipe_flash(uint8_t* data, uint8_t* status){
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	erase_flash(&flash);
 800652a:	4803      	ldr	r0, [pc, #12]	; (8006538 <wipe_flash+0x18>)
 800652c:	f002 f987 	bl	800883e <erase_flash>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000ec8 	.word	0x20000ec8

0800653c <start_logging>:

void start_logging(uint8_t* data, uint8_t* status){
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 1;
 8006546:	4b07      	ldr	r3, [pc, #28]	; (8006564 <start_logging+0x28>)
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_TELEM_PORT, LED_TELEM_PIN, GPIO_PIN_SET);
 800654c:	2201      	movs	r2, #1
 800654e:	2101      	movs	r1, #1
 8006550:	4805      	ldr	r0, [pc, #20]	; (8006568 <start_logging+0x2c>)
 8006552:	f002 fdd9 	bl	8009108 <HAL_GPIO_WritePin>
	add_test_delimiter(&flash);
 8006556:	4805      	ldr	r0, [pc, #20]	; (800656c <start_logging+0x30>)
 8006558:	f002 fa0e 	bl	8008978 <add_test_delimiter>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000430 	.word	0x20000430
 8006568:	40020800 	.word	0x40020800
 800656c:	20000ec8 	.word	0x20000ec8

08006570 <stop_logging>:

void stop_logging(uint8_t* data, uint8_t* status){
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	LOGGING_ACTIVE = 0;
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <stop_logging+0x28>)
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
	finish_flash_write(&flash);
 8006580:	4806      	ldr	r0, [pc, #24]	; (800659c <stop_logging+0x2c>)
 8006582:	f002 f8e9 	bl	8008758 <finish_flash_write>
	HAL_GPIO_WritePin(LED_FLASH_LOGGING_PORT, LED_FLASH_LOGGING_PIN, GPIO_PIN_RESET);
 8006586:	2200      	movs	r2, #0
 8006588:	2102      	movs	r1, #2
 800658a:	4805      	ldr	r0, [pc, #20]	; (80065a0 <stop_logging+0x30>)
 800658c:	f002 fdbc 	bl	8009108 <HAL_GPIO_WritePin>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000430 	.word	0x20000430
 800659c:	20000ec8 	.word	0x20000ec8
 80065a0:	40020800 	.word	0x40020800

080065a4 <set_stepper_pos>:

void set_stepper_pos(uint8_t* data, uint8_t* status){
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	73fb      	strb	r3, [r7, #15]
	float position = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/100.0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	061a      	lsls	r2, r3, #24
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3303      	adds	r3, #3
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3302      	adds	r3, #2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	4313      	orrs	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	3201      	adds	r2, #1
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f7f9 ff67 	bl	80004ac <__aeabi_i2d>
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <set_stepper_pos+0x7c>)
 80065e4:	f7fa f8f6 	bl	80007d4 <__aeabi_ddiv>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	f7fa fa96 	bl	8000b20 <__aeabi_d2f>
 80065f4:	4603      	mov	r3, r0
 80065f6:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d80c      	bhi.n	8006618 <set_stepper_pos+0x74>
		L6470_goto_motor_pos(&(tanks[motor_num].motor), position);
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	4613      	mov	r3, r2
 8006602:	015b      	lsls	r3, r3, #5
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <set_stepper_pos+0x80>)
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe73 	bl	80072fe <L6470_goto_motor_pos>
		// TODO: update packet values
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40590000 	.word	0x40590000
 8006624:	200004fc 	.word	0x200004fc

08006628 <set_stepper_zero>:

void set_stepper_zero(uint8_t* data, uint8_t* status){
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (motor_num < NUM_MOTORS) {
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d80a      	bhi.n	8006654 <set_stepper_zero+0x2c>
		L6470_zero_motor(&(tanks[motor_num].motor));
 800663e:	7bfa      	ldrb	r2, [r7, #15]
 8006640:	4613      	mov	r3, r2
 8006642:	015b      	lsls	r3, r3, #5
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4a04      	ldr	r2, [pc, #16]	; (800665c <set_stepper_zero+0x34>)
 800664a:	4413      	add	r3, r2
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f000 feae 	bl	80073b0 <L6470_zero_motor>
		// TODO: update position + packet values
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200004fc 	.word	0x200004fc

08006660 <set_control_target_pressure>:

void set_control_target_pressure(uint8_t* data, uint8_t* status){
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	73fb      	strb	r3, [r7, #15]
	float target_pressure = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	061a      	lsls	r2, r3, #24
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3303      	adds	r3, #3
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3302      	adds	r3, #2
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	4313      	orrs	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	3201      	adds	r2, #1
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f7f9 ff09 	bl	80004ac <__aeabi_i2d>
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <set_control_target_pressure+0x7c>)
 80066a0:	f7fa f898 	bl	80007d4 <__aeabi_ddiv>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7fa fa38 	bl	8000b20 <__aeabi_d2f>
 80066b0:	4603      	mov	r3, r0
 80066b2:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d80b      	bhi.n	80066d2 <set_control_target_pressure+0x72>
		tanks[tank_num].target_pres = target_pressure;
 80066ba:	7bfa      	ldrb	r2, [r7, #15]
 80066bc:	4908      	ldr	r1, [pc, #32]	; (80066e0 <set_control_target_pressure+0x80>)
 80066be:	4613      	mov	r3, r2
 80066c0:	015b      	lsls	r3, r3, #5
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3340      	adds	r3, #64	; 0x40
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 80066ce:	f7fb fc3d 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	408f4000 	.word	0x408f4000
 80066e0:	200004fc 	.word	0x200004fc

080066e4 <ambientize_pressure_transducers>:

void ambientize_pressure_transducers(uint8_t* data, uint8_t* status){
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	e016      	b.n	8006722 <ambientize_pressure_transducers+0x3e>
		pt_ambients[i] = pressure[i] + pt_ambients[i];
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	4a0f      	ldr	r2, [pc, #60]	; (8006734 <ambientize_pressure_transducers+0x50>)
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	ed93 7a00 	vldr	s14, [r3]
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4a0d      	ldr	r2, [pc, #52]	; (8006738 <ambientize_pressure_transducers+0x54>)
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	edd3 7a00 	vldr	s15, [r3]
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <ambientize_pressure_transducers+0x54>)
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	3301      	adds	r3, #1
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b13      	cmp	r3, #19
 8006726:	d9e5      	bls.n	80066f4 <ambientize_pressure_transducers+0x10>
	}
	save_nonvolatile_variables();
 8006728:	f7fb fc10 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000434 	.word	0x20000434
 8006738:	200002a8 	.word	0x200002a8

0800673c <set_low_toggle_percent>:

void set_low_toggle_percent(uint8_t* data, uint8_t* status){
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	73fb      	strb	r3, [r7, #15]
	float lower_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	061a      	lsls	r2, r3, #24
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3303      	adds	r3, #3
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3302      	adds	r3, #2
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	4313      	orrs	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	3201      	adds	r2, #1
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	4313      	orrs	r3, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f7f9 fe9b 	bl	80004ac <__aeabi_i2d>
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <set_low_toggle_percent+0x98>)
 800677c:	f7fa f82a 	bl	80007d4 <__aeabi_ddiv>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4610      	mov	r0, r2
 8006786:	4619      	mov	r1, r3
 8006788:	f7fa f9ca 	bl	8000b20 <__aeabi_d2f>
 800678c:	4603      	mov	r3, r0
 800678e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d819      	bhi.n	80067ca <set_low_toggle_percent+0x8e>
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	490f      	ldr	r1, [pc, #60]	; (80067d8 <set_low_toggle_percent+0x9c>)
 800679a:	4613      	mov	r3, r2
 800679c:	015b      	lsls	r3, r3, #5
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3340      	adds	r3, #64	; 0x40
 80067a6:	ed93 7a00 	vldr	s14, [r3]
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
				* lower_threshold_pct;
 80067ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_low_pres = tanks[tank_num].target_pres
 80067b4:	4908      	ldr	r1, [pc, #32]	; (80067d8 <set_low_toggle_percent+0x9c>)
 80067b6:	4613      	mov	r3, r2
 80067b8:	015b      	lsls	r3, r3, #5
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	334c      	adds	r3, #76	; 0x4c
 80067c2:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 80067c6:	f7fb fbc1 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	408f4000 	.word	0x408f4000
 80067d8:	200004fc 	.word	0x200004fc

080067dc <set_high_toggle_percent>:

void set_high_toggle_percent(uint8_t* data, uint8_t* status){
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	73fb      	strb	r3, [r7, #15]
	float upper_threshold_pct = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1000.0;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	061a      	lsls	r2, r3, #24
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3303      	adds	r3, #3
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3302      	adds	r3, #2
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	4313      	orrs	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	3201      	adds	r2, #1
 800680c:	7812      	ldrb	r2, [r2, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fe4b 	bl	80004ac <__aeabi_i2d>
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	4b16      	ldr	r3, [pc, #88]	; (8006874 <set_high_toggle_percent+0x98>)
 800681c:	f7f9 ffda 	bl	80007d4 <__aeabi_ddiv>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f7fa f97a 	bl	8000b20 <__aeabi_d2f>
 800682c:	4603      	mov	r3, r0
 800682e:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d819      	bhi.n	800686a <set_high_toggle_percent+0x8e>
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8006836:	7bfa      	ldrb	r2, [r7, #15]
 8006838:	490f      	ldr	r1, [pc, #60]	; (8006878 <set_high_toggle_percent+0x9c>)
 800683a:	4613      	mov	r3, r2
 800683c:	015b      	lsls	r3, r3, #5
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3340      	adds	r3, #64	; 0x40
 8006846:	ed93 7a00 	vldr	s14, [r3]
 800684a:	7bfa      	ldrb	r2, [r7, #15]
				* upper_threshold_pct;
 800684c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006850:	ee67 7a27 	vmul.f32	s15, s14, s15
		tanks[tank_num].PID_ctrl_vlv_high_pres = tanks[tank_num].target_pres
 8006854:	4908      	ldr	r1, [pc, #32]	; (8006878 <set_high_toggle_percent+0x9c>)
 8006856:	4613      	mov	r3, r2
 8006858:	015b      	lsls	r3, r3, #5
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3350      	adds	r3, #80	; 0x50
 8006862:	edc3 7a00 	vstr	s15, [r3]
		save_nonvolatile_variables();
 8006866:	f7fb fb71 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	408f4000 	.word	0x408f4000
 8006878:	200004fc 	.word	0x200004fc

0800687c <set_stepper_speed>:

void set_stepper_speed(uint8_t* data, uint8_t* status){
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]

	uint8_t motor_num = (data[0])/1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	73fb      	strb	r3, [r7, #15]
	uint16_t target_speed = (data[2]<<8|data[1])/1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3302      	adds	r3, #2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	b21a      	sxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3301      	adds	r3, #1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b21b      	sxth	r3, r3
 800689e:	4313      	orrs	r3, r2
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	81bb      	strh	r3, [r7, #12]
		//L6470_set_motor_max_speed(motor, target_speed)
	}

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <set_telem>:

void set_telem(uint8_t* data, uint8_t* status){
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]

	uint8_t state = (data[0])/1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	// Toggle telem on/off
	if (telem_disabled) {
 80068c0:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <set_telem+0x34>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <set_telem+0x20>
		telem_disabled = 0;
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <set_telem+0x34>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
	else {
		telem_disabled = 1;
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80068ce:	e002      	b.n	80068d6 <set_telem+0x26>
		telem_disabled = 1;
 80068d0:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <set_telem+0x34>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	200004fb 	.word	0x200004fb

080068e8 <set_presstank_status>:

void set_presstank_status(uint8_t* data, uint8_t* status){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]

	uint8_t tank_num = (data[0])/1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (tank_num < NUM_TANKS) {
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d80a      	bhi.n	800691a <set_presstank_status+0x32>
		tanks[tank_num].tank_enable = state;
 8006904:	7bfa      	ldrb	r2, [r7, #15]
 8006906:	4907      	ldr	r1, [pc, #28]	; (8006924 <set_presstank_status+0x3c>)
 8006908:	4613      	mov	r3, r2
 800690a:	015b      	lsls	r3, r3, #5
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	7bba      	ldrb	r2, [r7, #14]
 8006914:	701a      	strb	r2, [r3, #0]
		save_nonvolatile_variables();
 8006916:	f7fb fb19 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200004fc 	.word	0x200004fc

08006928 <ambientize_pot>:

void ambientize_pot(uint8_t* data, uint8_t* status){
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]

	uint8_t pot_num = (data[0])/1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
 800693c:	e016      	b.n	800696c <ambientize_pot+0x44>
		// flip pot sign to decouple direction with motor before applying ambient
		pot_ambients[i] = -epot[i]+pot_ambients[i];
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	4a0f      	ldr	r2, [pc, #60]	; (8006980 <ambientize_pot+0x58>)
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	ed93 7a00 	vldr	s14, [r3]
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <ambientize_pot+0x5c>)
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	edd3 7a00 	vldr	s15, [r3]
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800695c:	4a08      	ldr	r2, [pc, #32]	; (8006980 <ambientize_pot+0x58>)
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	3301      	adds	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d9e5      	bls.n	800693e <ambientize_pot+0x16>
	}
	save_nonvolatile_variables();
 8006972:	f7fb faeb 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200002f8 	.word	0x200002f8
 8006984:	200004f0 	.word	0x200004f0

08006988 <led_write>:

void led_write(uint8_t* data, uint8_t* status){
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]

	uint8_t led_num = (data[0])/1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	73fb      	strb	r3, [r7, #15]
	uint8_t state = (data[1])/1;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	73bb      	strb	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	switch(led_num) {
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d827      	bhi.n	80069f4 <led_write+0x6c>
 80069a4:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <led_write+0x24>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069cb 	.word	0x080069cb
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069e7 	.word	0x080069e7
	case 0:
		HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, state);
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	461a      	mov	r2, r3
 80069c0:	2101      	movs	r1, #1
 80069c2:	480f      	ldr	r0, [pc, #60]	; (8006a00 <led_write+0x78>)
 80069c4:	f002 fba0 	bl	8009108 <HAL_GPIO_WritePin>
		break;
 80069c8:	e015      	b.n	80069f6 <led_write+0x6e>
	case 1:
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, state);
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	461a      	mov	r2, r3
 80069ce:	2102      	movs	r1, #2
 80069d0:	480b      	ldr	r0, [pc, #44]	; (8006a00 <led_write+0x78>)
 80069d2:	f002 fb99 	bl	8009108 <HAL_GPIO_WritePin>
		break;
 80069d6:	e00e      	b.n	80069f6 <led_write+0x6e>
	case 2:
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, state);
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	461a      	mov	r2, r3
 80069dc:	2104      	movs	r1, #4
 80069de:	4808      	ldr	r0, [pc, #32]	; (8006a00 <led_write+0x78>)
 80069e0:	f002 fb92 	bl	8009108 <HAL_GPIO_WritePin>
		break;
 80069e4:	e007      	b.n	80069f6 <led_write+0x6e>
	case 3:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, state);
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	461a      	mov	r2, r3
 80069ea:	2108      	movs	r1, #8
 80069ec:	4804      	ldr	r0, [pc, #16]	; (8006a00 <led_write+0x78>)
 80069ee:	f002 fb8b 	bl	8009108 <HAL_GPIO_WritePin>
		break;
 80069f2:	e000      	b.n	80069f6 <led_write+0x6e>
	default:
		break;
 80069f4:	bf00      	nop
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40020800 	.word	0x40020800

08006a04 <set_system_clock>:

void set_system_clock(uint8_t* data, uint8_t* status){
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]

	uint32_t system_time = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3303      	adds	r3, #3
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	061a      	lsls	r2, r3, #24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3302      	adds	r3, #2
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3301      	adds	r3, #1
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	__HAL_TIM_SetCounter(&TIM_MICROS, system_time);
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <set_system_clock+0x44>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	200006e8 	.word	0x200006e8

08006a4c <remove_pressure_ambients>:

void remove_pressure_ambients(uint8_t* data, uint8_t* status){
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	e009      	b.n	8006a70 <remove_pressure_ambients+0x24>
		pt_ambients[i] = 0;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <remove_pressure_ambients+0x38>)
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b13      	cmp	r3, #19
 8006a74:	d9f2      	bls.n	8006a5c <remove_pressure_ambients+0x10>
	}
	save_nonvolatile_variables();
 8006a76:	f7fb fa69 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200002a8 	.word	0x200002a8

08006a88 <set_fuel_mpv_on_delay>:

void set_fuel_mpv_on_delay(uint8_t* data, uint8_t* status){
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]

	uint8_t mpv_delay_ms = (data[0])/1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	73fb      	strb	r3, [r7, #15]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_fuel_mpv_delay_ms = mpv_delay_ms;
 8006a98:	4a04      	ldr	r2, [pc, #16]	; (8006aac <set_fuel_mpv_on_delay+0x24>)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	7213      	strb	r3, [r2, #8]
	save_nonvolatile_variables();
 8006a9e:	f7fb fa55 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000604 	.word	0x20000604

08006ab0 <set_engine_test_duration>:

void set_engine_test_duration(uint8_t* data, uint8_t* status){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

	uint32_t engine_test_duration_ms = (data[3]<<24|data[2]<<16|data[1]<<8|data[0])/1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3303      	adds	r3, #3
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	061a      	lsls	r2, r3, #24
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_test_duration_ms = engine_test_duration_ms;
 8006ade:	4a04      	ldr	r2, [pc, #16]	; (8006af0 <set_engine_test_duration+0x40>)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6153      	str	r3, [r2, #20]
	save_nonvolatile_variables();
 8006ae4:	f7fb fa32 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000604 	.word	0x20000604

08006af4 <set_pid_start_delay>:

void set_pid_start_delay(uint8_t* data, uint8_t* status){
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]

	uint16_t pid_delay_ms = (data[1]<<8|data[0])/1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3301      	adds	r3, #1
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	b21a      	sxth	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b21b      	sxth	r3, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b21b      	sxth	r3, r3
 8006b12:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_pid_start_delay_ms = pid_delay_ms;
 8006b14:	4a04      	ldr	r2, [pc, #16]	; (8006b28 <set_pid_start_delay+0x34>)
 8006b16:	89fb      	ldrh	r3, [r7, #14]
 8006b18:	8193      	strh	r3, [r2, #12]
	save_nonvolatile_variables();
 8006b1a:	f7fb fa17 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000604 	.word	0x20000604

08006b2c <set_ignitor_on_delay>:

void set_ignitor_on_delay(uint8_t* data, uint8_t* status){
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_on_delay_ms = (data[1]<<8|data[0])/1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	b21a      	sxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_on_delay_ms = ignitor_on_delay_ms;
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <set_ignitor_on_delay+0x34>)
 8006b4e:	89fb      	ldrh	r3, [r7, #14]
 8006b50:	8093      	strh	r3, [r2, #4]
	save_nonvolatile_variables();
 8006b52:	f7fb f9fb 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000604 	.word	0x20000604

08006b64 <set_ignitor_high_duration>:

void set_ignitor_high_duration(uint8_t* data, uint8_t* status){
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]

	uint16_t ignitor_high_duration_ms = (data[1]<<8|data[0])/1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3301      	adds	r3, #1
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	b21a      	sxth	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b21b      	sxth	r3, r3
 8006b82:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.ignition_ignitor_high_duration_ms = ignitor_high_duration_ms;
 8006b84:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <set_ignitor_high_duration+0x34>)
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	80d3      	strh	r3, [r2, #6]
	save_nonvolatile_variables();
 8006b8a:	f7fb f9df 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000604 	.word	0x20000604

08006b9c <set_film_cooling_on_delay>:

void set_film_cooling_on_delay(uint8_t* data, uint8_t* status){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]

	uint16_t film_cooling_delay_ms = (data[1]<<8|data[0])/1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b21a      	sxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b21b      	sxth	r3, r3
 8006bba:	81fb      	strh	r3, [r7, #14]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	autosequence.hotfire_film_cooling_on_time_ms = film_cooling_delay_ms;
 8006bbc:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <set_film_cooling_on_delay+0x34>)
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	8153      	strh	r3, [r2, #10]
	save_nonvolatile_variables();
 8006bc2:	f7fb f9c3 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000604 	.word	0x20000604
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <set_init_motor_deg_factor>:

void set_init_motor_deg_factor(uint8_t* data, uint8_t* status){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]

	double deg_correction_factor = (data[7]<<56|data[6]<<48|data[5]<<40|data[4]<<32|data[3]<<24|data[2]<<16|data[1]<<8|data[0])/10000.0;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3307      	adds	r3, #7
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	2338      	movs	r3, #56	; 0x38
 8006bec:	409a      	lsls	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3306      	adds	r3, #6
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2330      	movs	r3, #48	; 0x30
 8006bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3305      	adds	r3, #5
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	2328      	movs	r3, #40	; 0x28
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3304      	adds	r3, #4
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	2320      	movs	r3, #32
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3303      	adds	r3, #3
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	061b      	lsls	r3, r3, #24
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3301      	adds	r3, #1
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	7812      	ldrb	r2, [r2, #0]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7f9 fc32 	bl	80004ac <__aeabi_i2d>
 8006c48:	a30c      	add	r3, pc, #48	; (adr r3, 8006c7c <set_init_motor_deg_factor+0xa4>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	f7f9 fdc1 	bl	80007d4 <__aeabi_ddiv>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	init_motor_pos_deg_correction_factor = deg_correction_factor;
 8006c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c5e:	f7f9 ff5f 	bl	8000b20 <__aeabi_d2f>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <set_init_motor_deg_factor+0xa0>)
 8006c66:	6013      	str	r3, [r2, #0]
	save_nonvolatile_variables();
 8006c68:	f7fb f970 	bl	8001f4c <save_nonvolatile_variables>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	f3af 8000 	nop.w
 8006c78:	20000420 	.word	0x20000420
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	40c38800 	.word	0x40c38800

08006c84 <clear_status_flags>:

void clear_status_flags(uint8_t* data, uint8_t* status){
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	status_flags = 0;
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <clear_status_flags+0x1c>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000410 	.word	0x20000410

08006ca4 <start_simulation>:

void start_simulation(uint8_t* data, uint8_t* status){
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <advance_simulation>:

void advance_simulation(uint8_t* data, uint8_t* status){
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <stop_simulation>:

void stop_simulation(uint8_t* data, uint8_t* status){
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <set_pt_lower_voltage>:

void set_pt_lower_voltage(uint8_t* data, uint8_t* status){
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	73fb      	strb	r3, [r7, #15]
	float lower_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	061a      	lsls	r2, r3, #24
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3303      	adds	r3, #3
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	4313      	orrs	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	3201      	adds	r2, #1
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7f9 fbc5 	bl	80004ac <__aeabi_i2d>
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <set_pt_lower_voltage+0x74>)
 8006d28:	f7f9 fd54 	bl	80007d4 <__aeabi_ddiv>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4610      	mov	r0, r2
 8006d32:	4619      	mov	r1, r3
 8006d34:	f7f9 fef4 	bl	8000b20 <__aeabi_d2f>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b13      	cmp	r3, #19
 8006d40:	d807      	bhi.n	8006d52 <set_pt_lower_voltage+0x6a>
		pt_cal_lower_voltage[pt_num] = lower_voltage;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <set_pt_lower_voltage+0x78>)
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006d4e:	f7fb f8fd 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40240000 	.word	0x40240000
 8006d60:	20000300 	.word	0x20000300

08006d64 <set_pt_upper_voltage>:

void set_pt_upper_voltage(uint8_t* data, uint8_t* status){
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	73fb      	strb	r3, [r7, #15]
	float upper_voltage = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/10.0;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	061a      	lsls	r2, r3, #24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3303      	adds	r3, #3
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	041b      	lsls	r3, r3, #16
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3302      	adds	r3, #2
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	3201      	adds	r2, #1
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7f9 fb87 	bl	80004ac <__aeabi_i2d>
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <set_pt_upper_voltage+0x74>)
 8006da4:	f7f9 fd16 	bl	80007d4 <__aeabi_ddiv>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4610      	mov	r0, r2
 8006dae:	4619      	mov	r1, r3
 8006db0:	f7f9 feb6 	bl	8000b20 <__aeabi_d2f>
 8006db4:	4603      	mov	r3, r0
 8006db6:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b13      	cmp	r3, #19
 8006dbc:	d807      	bhi.n	8006dce <set_pt_upper_voltage+0x6a>
		pt_cal_upper_voltage[pt_num] = upper_voltage;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	4a06      	ldr	r2, [pc, #24]	; (8006ddc <set_pt_upper_voltage+0x78>)
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006dca:	f7fb f8bf 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40240000 	.word	0x40240000
 8006ddc:	20000350 	.word	0x20000350

08006de0 <set_pt_upper_pressure>:

void set_pt_upper_pressure(uint8_t* data, uint8_t* status){
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]

	uint8_t pt_num = (data[0])/1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	73fb      	strb	r3, [r7, #15]
	float pressure_range = (data[4]<<24|data[3]<<16|data[2]<<8|data[1])/1.0;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	061a      	lsls	r2, r3, #24
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3303      	adds	r3, #3
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3302      	adds	r3, #2
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	3201      	adds	r2, #1
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7f9 fb49 	bl	80004ac <__aeabi_i2d>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	f7f9 fe7d 	bl	8000b20 <__aeabi_d2f>
 8006e26:	4603      	mov	r3, r0
 8006e28:	60bb      	str	r3, [r7, #8]
	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	if (pt_num < NUM_PTS) {
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b13      	cmp	r3, #19
 8006e2e:	d807      	bhi.n	8006e40 <set_pt_upper_pressure+0x60>
		pt_cal_upper_pressure[pt_num] = pressure_range;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4a05      	ldr	r2, [pc, #20]	; (8006e48 <set_pt_upper_pressure+0x68>)
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	601a      	str	r2, [r3, #0]
		save_nonvolatile_variables();
 8006e3c:	f7fb f886 	bl	8001f4c <save_nonvolatile_variables>
	}
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200003a0 	.word	0x200003a0

08006e4c <refresh_calibrations>:

void refresh_calibrations(uint8_t* data, uint8_t* status){
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]

	
	// USER CODE BEGIN - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED
	send_calibration_data();
 8006e56:	f7fe fc07 	bl	8005668 <send_calibration_data>
	// USER CODE END - MODIFICATIONS OUTSIDE THIS SECTION WILL BE DELETED

}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <set_valve_channel>:
		en_vlv11_Pin,
		en_vlv12_Pin,
		en_vlv13_Pin
};

void set_valve_channel(uint32_t vlv_num, uint8_t vlv_state) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
	// Error checking
	if (vlv_num >= NUM_VALVES) {
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b0d      	cmp	r3, #13
 8006e74:	d823      	bhi.n	8006ebe <set_valve_channel+0x5a>
		return;
	}

	// Set the correct GPIO pin
	HAL_GPIO_WritePin(VALVE_GPIO_PORTS[vlv_num], VALVE_GPIO_PINS[vlv_num], vlv_state);
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <set_valve_channel+0x64>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006e7e:	4a13      	ldr	r2, [pc, #76]	; (8006ecc <set_valve_channel+0x68>)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f002 f93d 	bl	8009108 <HAL_GPIO_WritePin>

	// Update valve_states accordingly
    uint32_t vlv_bit = 1 << vlv_num;
 8006e8e:	2201      	movs	r2, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	60fb      	str	r3, [r7, #12]
    uint32_t vlv_value = vlv_state << vlv_num;
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	60bb      	str	r3, [r7, #8]
    valve_states &= ~vlv_bit;  // Clear the previous valve state
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	43da      	mvns	r2, r3
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <set_valve_channel+0x6c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <set_valve_channel+0x6c>)
 8006eae:	6013      	str	r3, [r2, #0]
    valve_states |= vlv_value;  // Set the new valve state
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <set_valve_channel+0x6c>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	4a05      	ldr	r2, [pc, #20]	; (8006ed0 <set_valve_channel+0x6c>)
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e000      	b.n	8006ec0 <set_valve_channel+0x5c>
		return;
 8006ebe:	bf00      	nop
}
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200001c8 	.word	0x200001c8
 8006ecc:	20000200 	.word	0x20000200
 8006ed0:	200003fc 	.word	0x200003fc

08006ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006eda:	e003      	b.n	8006ee4 <LoopCopyDataInit>

08006edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006ee2:	3104      	adds	r1, #4

08006ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ee4:	480b      	ldr	r0, [pc, #44]	; (8006f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006eec:	d3f6      	bcc.n	8006edc <CopyDataInit>
  ldr  r2, =_sbss
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006ef0:	e002      	b.n	8006ef8 <LoopFillZerobss>

08006ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ef4:	f842 3b04 	str.w	r3, [r2], #4

08006ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006efc:	d3f9      	bcc.n	8006ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006efe:	f7fe fe21 	bl	8005b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f02:	f004 ff45 	bl	800bd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f06:	f7fa f98b 	bl	8001220 <main>
  bx  lr    
 8006f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006f10:	0800cf50 	.word	0x0800cf50
  ldr  r0, =_sdata
 8006f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006f18:	2000028c 	.word	0x2000028c
  ldr  r2, =_sbss
 8006f1c:	2000028c 	.word	0x2000028c
  ldr  r3, = _ebss
 8006f20:	20002408 	.word	0x20002408

08006f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f24:	e7fe      	b.n	8006f24 <ADC_IRQHandler>

08006f26 <L6470_SPI_CS_delay>:
#define L6470_STATUS_BIT_STEP_LOSS_A   ((uint16_t)0x2000)  // (active low, latched) Stall detected on bridge A
#define L6470_STATUS_BIT_STEP_LOSS_B   ((uint16_t)0x4000)  // (active low, latched) Stall detected on bridge B
#define L6470_STATUS_BIT_SCK_MOD       ((uint16_t)0x8000)  // (unused) step-clock mode


void L6470_SPI_CS_delay(L6470_Motor_IC *motor) {
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
	// Need to keep CS high >= 800ns in between SPI byte transmissions
	// Assume max HCLK=180MHz, 1 cycle=5.5555ns
	// 145 cycles required to delay that much
	// Do 150 cycles

	for (uint8_t i = 0; i < 150; i++) {
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
 8006f32:	e003      	b.n	8006f3c <L6470_SPI_CS_delay+0x16>
		asm("nop"); // Delay next cycle
 8006f34:	bf00      	nop
	for (uint8_t i = 0; i < 150; i++) {
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b95      	cmp	r3, #149	; 0x95
 8006f40:	d9f8      	bls.n	8006f34 <L6470_SPI_CS_delay+0xe>
	}
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <L6470_SPI_transmit_byte>:
/**
 * Send a byte to the motor chip
 *
 * @param tx: Byte to transmit to the motor chip
 */
void L6470_SPI_transmit_byte(L6470_Motor_IC *motor, uint8_t tx) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6858      	ldr	r0, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	891b      	ldrh	r3, [r3, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	4619      	mov	r1, r3
 8006f68:	f002 f8ce 	bl	8009108 <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Transmit(motor->hspi, &tx, 1,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	1cf9      	adds	r1, r7, #3
 8006f72:	23ff      	movs	r3, #255	; 0xff
 8006f74:	2201      	movs	r2, #1
 8006f76:	f002 fe98 	bl	8009caa <HAL_SPI_Transmit>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6858      	ldr	r0, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	891b      	ldrh	r3, [r3, #8]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f002 f8bb 	bl	8009108 <HAL_GPIO_WritePin>
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <L6470_SPI_receive_byte>:

/**
 * Receive a byte from the motor chip and return its value.
 */
uint8_t L6470_SPI_receive_byte(L6470_Motor_IC *motor) {
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
	uint8_t rx;
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6858      	ldr	r0, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	4619      	mov	r1, r3
 8006fae:	f002 f8ab 	bl	8009108 <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Receive(motor->hspi, &rx, 1,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f107 010f 	add.w	r1, r7, #15
 8006fba:	23ff      	movs	r3, #255	; 0xff
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f002 ffb0 	bl	8009f22 <HAL_SPI_Receive>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6858      	ldr	r0, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	891b      	ldrh	r3, [r3, #8]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f002 f897 	bl	8009108 <HAL_GPIO_WritePin>
	return rx;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <L6470_write_register>:
	return return_val;
}


void L6470_write_register(L6470_Motor_IC *motor, uint8_t reg_addr,
		uint32_t reg_val) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	460b      	mov	r3, r1
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	72fb      	strb	r3, [r7, #11]
	// Similar logic as L6470_read_register(), but write instead
	// User handles matching the right length of reg_val to reg_addr
	uint8_t tx = L6470_CMD_SETPARAM | reg_addr;
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	75fb      	strb	r3, [r7, #23]
	uint32_t shifted_byte = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ffa:	b672      	cpsid	i
}
 8006ffc:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff ffa4 	bl	8006f50 <L6470_SPI_transmit_byte>

	// 3 byte registers
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d005      	beq.n	800701a <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	2b03      	cmp	r3, #3
 8007012:	d002      	beq.n	800701a <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_SPEED_ADDR) {
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d10d      	bne.n	8007036 <L6470_write_register+0x52>
		shifted_byte = reg_val;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 16;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff7e 	bl	8006f26 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff ff8d 	bl	8006f50 <L6470_SPI_transmit_byte>
	}

	// Registers >= 2 byte
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d020      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_EL_POS_ADDR
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d01d      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 8007042:	7afb      	ldrb	r3, [r7, #11]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d01a      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_SPEED_ADDR
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b04      	cmp	r3, #4
 800704c:	d017      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_ACC_ADDR
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	2b05      	cmp	r3, #5
 8007052:	d014      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_DEC_ADDR
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	2b06      	cmp	r3, #6
 8007058:	d011      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MAX_SPEED_ADDR
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d00e      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MIN_SPEED_ADDR
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	2b08      	cmp	r3, #8
 8007064:	d00b      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_FS_SPD_ADDR
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	2b15      	cmp	r3, #21
 800706a:	d008      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_INT_SPEED_ADDR
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	2b0d      	cmp	r3, #13
 8007070:	d005      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_CONFIG_ADDR
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b18      	cmp	r3, #24
 8007076:	d002      	beq.n	800707e <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_STATUS_ADDR) {
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	2b19      	cmp	r3, #25
 800707c:	d10d      	bne.n	800709a <L6470_write_register+0xb6>
		shifted_byte = reg_val;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 8;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff ff4c 	bl	8006f26 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff ff5b 	bl	8006f50 <L6470_SPI_transmit_byte>
	}

	// All registers are >= 1 byte
	shifted_byte = reg_val;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	613b      	str	r3, [r7, #16]
	L6470_SPI_CS_delay(motor);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff41 	bl	8006f26 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	4619      	mov	r1, r3
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff ff50 	bl	8006f50 <L6470_SPI_transmit_byte>

	L6470_SPI_CS_delay(motor);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff ff38 	bl	8006f26 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 80070b6:	b662      	cpsie	i
}
 80070b8:	bf00      	nop

	__enable_irq();

	return;
 80070ba:	bf00      	nop
}
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <L6470_get_status>:

/**
 * Read the status register and update the struct's status variables
 * Datasheet pg 55
 */
void L6470_get_status(L6470_Motor_IC *motor) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]

	uint8_t tx = L6470_CMD_GETSTATUS;
 80070cc:	23d0      	movs	r3, #208	; 0xd0
 80070ce:	75fb      	strb	r3, [r7, #23]
	uint8_t rx[2] = {0};
 80070d0:	2300      	movs	r3, #0
 80070d2:	81bb      	strh	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80070d4:	b672      	cpsid	i
}
 80070d6:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff37 	bl	8006f50 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ff1f 	bl	8006f26 <L6470_SPI_CS_delay>
	rx[0] = L6470_SPI_receive_byte(motor);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff56 	bl	8006f9a <L6470_SPI_receive_byte>
 80070ee:	4603      	mov	r3, r0
 80070f0:	733b      	strb	r3, [r7, #12]
	L6470_SPI_CS_delay(motor);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff17 	bl	8006f26 <L6470_SPI_CS_delay>
	rx[1] = L6470_SPI_receive_byte(motor);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ff4e 	bl	8006f9a <L6470_SPI_receive_byte>
 80070fe:	4603      	mov	r3, r0
 8007100:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsie i" : : : "memory");
 8007102:	b662      	cpsie	i
}
 8007104:	bf00      	nop
	__enable_irq();

	uint16_t status_reg = ((uint16_t)rx[0] << 8) | ((uint16_t)rx[1]);
 8007106:	7b3b      	ldrb	r3, [r7, #12]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	b21a      	sxth	r2, r3
 800710c:	7b7b      	ldrb	r3, [r7, #13]
 800710e:	b21b      	sxth	r3, r3
 8007110:	4313      	orrs	r3, r2
 8007112:	b21b      	sxth	r3, r3
 8007114:	82bb      	strh	r3, [r7, #20]

	//uint32_t status_reg_read = L6470_read_register(motor, L6470_PARAM_STATUS_ADDR);

	// 1 bit statuses ("casting as bool" to avoid integer overflow)
	motor->HiZ_status         =  (status_reg & L6470_STATUS_BIT_HiZ);
 8007116:	8abb      	ldrh	r3, [r7, #20]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	76da      	strb	r2, [r3, #27]
	motor->BUSY_status        = 0 != (status_reg & L6470_STATUS_BIT_BUSY);
 8007124:	8abb      	ldrh	r3, [r7, #20]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf14      	ite	ne
 800712e:	2301      	movne	r3, #1
 8007130:	2300      	moveq	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor->SW_F_status        = 0 != (status_reg & L6470_STATUS_BIT_SW_F);
 800713c:	8abb      	ldrh	r3, [r7, #20]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	771a      	strb	r2, [r3, #28]
	motor->SW_EVN_status      = 0 != (status_reg & L6470_STATUS_BIT_SW_EVN);
 8007152:	8abb      	ldrh	r3, [r7, #20]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	775a      	strb	r2, [r3, #29]
	motor->DIR_status         = 0 != (status_reg & L6470_STATUS_BIT_DIR);
 8007168:	8abb      	ldrh	r3, [r7, #20]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	779a      	strb	r2, [r3, #30]
	motor->NOTPERF_CMD_status = 0 != (status_reg & L6470_STATUS_BIT_NOTPERF_CMD);
 800717e:	8abb      	ldrh	r3, [r7, #20]
 8007180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	77da      	strb	r2, [r3, #31]
	motor->WRONG_CMD_status   = 0 != (status_reg & L6470_STATUS_BIT_WRONG_CMD);
 8007194:	8abb      	ldrh	r3, [r7, #20]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	bf14      	ite	ne
 800719e:	2301      	movne	r3, #1
 80071a0:	2300      	moveq	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f883 2020 	strb.w	r2, [r3, #32]
	motor->UVLO_status        = 0 != (status_reg & L6470_STATUS_BIT_UVLO);
 80071ac:	8abb      	ldrh	r3, [r7, #20]
 80071ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor->TH_WRN_status      = 0 != (status_reg & L6470_STATUS_BIT_TH_WRN);
 80071c4:	8abb      	ldrh	r3, [r7, #20]
 80071c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	motor->TH_SD_status       = 0 != (status_reg & L6470_STATUS_BIT_TH_SD);
 80071dc:	8abb      	ldrh	r3, [r7, #20]
 80071de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bf14      	ite	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	2300      	moveq	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	motor->OCD_status         = 0 != (status_reg & L6470_STATUS_BIT_OCD);
 80071f4:	8abb      	ldrh	r3, [r7, #20]
 80071f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf14      	ite	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	2300      	moveq	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	motor->STEP_LOSS_A_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_A);
 800720c:	8abb      	ldrh	r3, [r7, #20]
 800720e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007212:	2b00      	cmp	r3, #0
 8007214:	bf14      	ite	ne
 8007216:	2301      	movne	r3, #1
 8007218:	2300      	moveq	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	motor->STEP_LOSS_B_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_B);
 8007224:	8abb      	ldrh	r3, [r7, #20]
 8007226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	motor->SCK_MOD_status     = 0 != (status_reg & L6470_STATUS_BIT_SCK_MOD);
 800723c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007240:	b29b      	uxth	r3, r3
 8007242:	0bdb      	lsrs	r3, r3, #15
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	// 2 bit motor status
	uint8_t motor_status_1    = status_reg & L6470_STATUS_BIT_MOT_STATUS_1;
 800724e:	8abb      	ldrh	r3, [r7, #20]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	74fb      	strb	r3, [r7, #19]
	uint8_t motor_status_0    = status_reg & L6470_STATUS_BIT_MOT_STATUS_0;
 8007258:	8abb      	ldrh	r3, [r7, #20]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007260:	74bb      	strb	r3, [r7, #18]

	uint8_t motor_status = (motor_status_1 << 1) | (motor_status_0);
 8007262:	7cfb      	ldrb	r3, [r7, #19]
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	b25a      	sxtb	r2, r3
 8007268:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800726c:	4313      	orrs	r3, r2
 800726e:	b25b      	sxtb	r3, r3
 8007270:	747b      	strb	r3, [r7, #17]
	switch(motor_status) {
 8007272:	7c7b      	ldrb	r3, [r7, #17]
 8007274:	2b03      	cmp	r3, #3
 8007276:	d81b      	bhi.n	80072b0 <L6470_get_status+0x1ec>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <L6470_get_status+0x1bc>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	08007291 	.word	0x08007291
 8007284:	08007299 	.word	0x08007299
 8007288:	080072a1 	.word	0x080072a1
 800728c:	080072a9 	.word	0x080072a9
	case 0:
		motor->MOT_status = Stopped;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	769a      	strb	r2, [r3, #26]
		break;
 8007296:	e00c      	b.n	80072b2 <L6470_get_status+0x1ee>
	case 1:
		motor->MOT_status = Acceleration;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	769a      	strb	r2, [r3, #26]
		break;
 800729e:	e008      	b.n	80072b2 <L6470_get_status+0x1ee>
	case 2:
		motor->MOT_status = Deceleration;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	769a      	strb	r2, [r3, #26]
		break;
 80072a6:	e004      	b.n	80072b2 <L6470_get_status+0x1ee>
	case 3:
		motor->MOT_status = Constant_Speed;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2203      	movs	r2, #3
 80072ac:	769a      	strb	r2, [r3, #26]
		break;
 80072ae:	e000      	b.n	80072b2 <L6470_get_status+0x1ee>
	default:
		break;
 80072b0:	bf00      	nop
	}
}
 80072b2:	bf00      	nop
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop

080072bc <L6470_init_motor>:


void L6470_init_motor(L6470_Motor_IC* motor, L6470_Stepping_Mode mode, float step_angle) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	460b      	mov	r3, r1
 80072c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80072ca:	72fb      	strb	r3, [r7, #11]
	// Call L6470_get_status to reset FLAG
	L6470_get_status(motor);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fef9 	bl	80070c4 <L6470_get_status>

	// Configure the stepping mode
	motor->step_mode = mode;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	7afa      	ldrb	r2, [r7, #11]
 80072d6:	765a      	strb	r2, [r3, #25]


	// When the stepping mode is changed, the ABS_POS register is invalidated, so zero it
	L6470_zero_motor(motor);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f869 	bl	80073b0 <L6470_zero_motor>
	L6470_write_register(motor, L6470_PARAM_STEP_MODE_ADDR, mode);
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	461a      	mov	r2, r3
 80072e2:	2116      	movs	r1, #22
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7ff fe7d 	bl	8006fe4 <L6470_write_register>

	// Store the step angle in the struct
	motor->step_angle = step_angle;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c

	// Stop the motor in case it's moving.
	// This happens when the microcontroller resets without losing
	// power while the motor is moving.
	L6470_stop_motor(motor);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f873 	bl	80073dc <L6470_stop_motor>

	return;
 80072f6:	bf00      	nop
}
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <L6470_goto_motor_pos>:

	//uint32_t check = L6470_read_register(motor, L6470_PARAM_DEC_ADDR);
}


void L6470_goto_motor_pos(L6470_Motor_IC* motor, float abs_pos_degree) {
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	ed87 0a00 	vstr	s0, [r7]
	uint32_t abs_pos_step = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]

	//Convert degrees to steps
	if (abs_pos_degree < 0) {
 800730e:	edd7 7a00 	vldr	s15, [r7]
 8007312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731a:	d514      	bpl.n	8007346 <L6470_goto_motor_pos+0x48>
		abs_pos_step = (uint32_t)(abs_pos_degree * -1 / motor->step_angle);
 800731c:	edd7 7a00 	vldr	s15, [r7]
 8007320:	eef1 6a67 	vneg.f32	s13, s15
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800732a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007332:	ee17 3a90 	vmov	r3, s15
 8007336:	60fb      	str	r3, [r7, #12]
		abs_pos_step -= 1;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b01      	subs	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
		abs_pos_step = ~abs_pos_step;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	43db      	mvns	r3, r3
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	e00b      	b.n	800735e <L6470_goto_motor_pos+0x60>
	}
	else { // Positive (forward direction)
		abs_pos_step = (uint32_t)(abs_pos_degree / motor->step_angle);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800734c:	edd7 6a00 	vldr	s13, [r7]
 8007350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007358:	ee17 3a90 	vmov	r3, s15
 800735c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800735e:	b672      	cpsid	i
}
 8007360:	bf00      	nop
	}

	__disable_irq();
	L6470_SPI_transmit_byte(motor, L6470_CMD_GOTO);
 8007362:	2160      	movs	r1, #96	; 0x60
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fdf3 	bl	8006f50 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fddb 	bl	8006f26 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 16));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff fde9 	bl	8006f50 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fdd1 	bl	8006f26 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 8));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff fddf 	bl	8006f50 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fdc7 	bl	8006f26 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)abs_pos_step);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fdd6 	bl	8006f50 <L6470_SPI_transmit_byte>
  __ASM volatile ("cpsie i" : : : "memory");
 80073a4:	b662      	cpsie	i
}
 80073a6:	bf00      	nop
	__enable_irq();

	return;
 80073a8:	bf00      	nop
}
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <L6470_zero_motor>:


void L6470_zero_motor(L6470_Motor_IC* motor) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	uint8_t tx = L6470_CMD_RESETPOS;
 80073b8:	23d8      	movs	r3, #216	; 0xd8
 80073ba:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80073bc:	b672      	cpsid	i
}
 80073be:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fdc3 	bl	8006f50 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fdab 	bl	8006f26 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 80073d0:	b662      	cpsie	i
}
 80073d2:	bf00      	nop
	__enable_irq();

	return;
 80073d4:	bf00      	nop
}
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <L6470_stop_motor>:

	return;
}


void L6470_stop_motor(L6470_Motor_IC* motor) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	L6470_SPI_transmit_byte(motor, L6470_CMD_HARDHIZ);
 80073e4:	21a8      	movs	r1, #168	; 0xa8
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fdb2 	bl	8006f50 <L6470_SPI_transmit_byte>
	return;
 80073ec:	bf00      	nop
}
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <init_board+0x24>)
 8007400:	2200      	movs	r2, #0
 8007402:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 8007404:	4a05      	ldr	r2, [pc, #20]	; (800741c <init_board+0x28>)
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	7013      	strb	r3, [r2, #0]
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20000db4 	.word	0x20000db4
 800741c:	20000887 	.word	0x20000887

08007420 <init_data>:

void init_data(uint8_t *buffer, int16_t buffer_sz, CLB_Packet_Header* header) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	460b      	mov	r3, r1
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	817b      	strh	r3, [r7, #10]
	if (buffer_sz == -1) {	// standard telem
 800742e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d11b      	bne.n	8007470 <init_data+0x50>
	    // repack CLB_telem_data

		if (header->packet_type == 0) {  // Normal telem
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d109      	bne.n	8007454 <init_data+0x34>
			pack_telem_data(CLB_telem_data);
 8007440:	4812      	ldr	r0, [pc, #72]	; (800748c <init_data+0x6c>)
 8007442:	f7fc f999 	bl	8003778 <pack_telem_data>
			CLB_buffer = CLB_telem_data;
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <init_data+0x70>)
 8007448:	4a10      	ldr	r2, [pc, #64]	; (800748c <init_data+0x6c>)
 800744a:	601a      	str	r2, [r3, #0]
			CLB_buffer_sz = CLB_NUM_TELEM_ITEMS;
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <init_data+0x74>)
 800744e:	22f1      	movs	r2, #241	; 0xf1
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	e013      	b.n	800747c <init_data+0x5c>
		}

//#ifdef PACK_CALIBRATION_DEFINES_H
		else if (header->packet_type == 2) {  // Calibration packet
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d10f      	bne.n	800747c <init_data+0x5c>
			pack_calibration_data(CLB_calibration_data);
 800745c:	480e      	ldr	r0, [pc, #56]	; (8007498 <init_data+0x78>)
 800745e:	f7fb f955 	bl	800270c <pack_calibration_data>
			CLB_buffer = CLB_calibration_data;
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <init_data+0x70>)
 8007464:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <init_data+0x78>)
 8007466:	601a      	str	r2, [r3, #0]
			CLB_buffer_sz = CLB_NUM_CALIBRATION_ITEMS;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <init_data+0x74>)
 800746a:	2284      	movs	r2, #132	; 0x84
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e005      	b.n	800747c <init_data+0x5c>
		}
//#endif

	} else {				// custom telem
		CLB_buffer = buffer;
 8007470:	4a07      	ldr	r2, [pc, #28]	; (8007490 <init_data+0x70>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6013      	str	r3, [r2, #0]
		CLB_buffer_sz = buffer_sz;
 8007476:	897a      	ldrh	r2, [r7, #10]
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <init_data+0x74>)
 800747a:	801a      	strh	r2, [r3, #0]
	}
	CLB_header = header;
 800747c:	4a07      	ldr	r2, [pc, #28]	; (800749c <init_data+0x7c>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6013      	str	r3, [r2, #0]
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000b38 	.word	0x20000b38
 8007490:	2000063c 	.word	0x2000063c
 8007494:	20000c2a 	.word	0x20000c2a
 8007498:	20000a5c 	.word	0x20000a5c
 800749c:	20000dc4 	.word	0x20000dc4

080074a0 <send_data>:

uint8_t send_data(CLB_send_data_info* info, uint8_t type) {
 80074a0:	b590      	push	{r4, r7, lr}
 80074a2:	b08d      	sub	sp, #52	; 0x34
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
		2. Stuff packet from buffer
		3. Send packet via UART
		4. Repeats steps 2-3 until buffer is fully transmitted
		5. Return status/errors in transmission if they exist
	*/
	uint8_t status		= CLB_nominal;			// to be used for error codes
 80074ac:	2300      	movs	r3, #0
 80074ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t flash_pos 	= 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t clb_pos 	= 0;					// position in clb buffer
 80074b6:	2300      	movs	r3, #0
 80074b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t clb_sz = CLB_buffer_sz;			// clb buffer sz
 80074ba:	4b6c      	ldr	r3, [pc, #432]	; (800766c <send_data+0x1cc>)
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	83fb      	strh	r3, [r7, #30]
	uint16_t ping_pos = 0;						// position in ping buffer
 80074c0:	2300      	movs	r3, #0
 80074c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t ping_sz = PING_MAX_PACKET_SIZE;	// packet size
 80074c4:	23fd      	movs	r3, #253	; 0xfd
 80074c6:	83bb      	strh	r3, [r7, #28]

	// Note: assumes that header sz is less than 255 bytes
	uint8_t header_buffer[CLB_HEADER_SZ] = {0};
 80074c8:	2300      	movs	r3, #0
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	605a      	str	r2, [r3, #4]
	CLB_header->checksum = compute_checksum();
 80074d6:	4b66      	ldr	r3, [pc, #408]	; (8007670 <send_data+0x1d0>)
 80074d8:	681c      	ldr	r4, [r3, #0]
 80074da:	f000 fa3f 	bl	800795c <compute_checksum>
 80074de:	4603      	mov	r3, r0
 80074e0:	80e3      	strh	r3, [r4, #6]
	CLB_header->num_packets = compute_packet_sz();
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <send_data+0x1d0>)
 80074e4:	681c      	ldr	r4, [r3, #0]
 80074e6:	f000 fa43 	bl	8007970 <compute_packet_sz>
 80074ea:	4603      	mov	r3, r0
 80074ec:	7123      	strb	r3, [r4, #4]
	pack_header(CLB_header, header_buffer);
 80074ee:	4b60      	ldr	r3, [pc, #384]	; (8007670 <send_data+0x1d0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f107 0208 	add.w	r2, r7, #8
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f9b1 	bl	8007860 <pack_header>
	pack_packet(header_buffer, CLB_ping_packet+ping_pos, CLB_HEADER_SZ);
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007500:	4a5c      	ldr	r2, [pc, #368]	; (8007674 <send_data+0x1d4>)
 8007502:	1899      	adds	r1, r3, r2
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	220c      	movs	r2, #12
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f9f9 	bl	8007902 <pack_packet>
	ping_pos += CLB_HEADER_SZ;
 8007510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007512:	330c      	adds	r3, #12
 8007514:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t send_termination_bit = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (clb_pos < CLB_buffer_sz) {
 800751c:	e08c      	b.n	8007638 <send_data+0x198>
		uint16_t clb_sz_left = clb_sz - clb_pos;
 800751e:	8bfa      	ldrh	r2, [r7, #30]
 8007520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	837b      	strh	r3, [r7, #26]
		uint16_t ping_sz_left = ping_sz - ping_pos;
 8007526:	8bba      	ldrh	r2, [r7, #28]
 8007528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	833b      	strh	r3, [r7, #24]
		uint16_t transfer_sz_left = (clb_sz_left > ping_sz_left) ? 
 800752e:	8b7a      	ldrh	r2, [r7, #26]
 8007530:	8b3b      	ldrh	r3, [r7, #24]
 8007532:	4293      	cmp	r3, r2
 8007534:	bf28      	it	cs
 8007536:	4613      	movcs	r3, r2
 8007538:	82fb      	strh	r3, [r7, #22]
										ping_sz_left : clb_sz_left;
		// fill up ping buffer as much as possible
		pack_packet(CLB_buffer+clb_pos, CLB_ping_packet+ping_pos, 
 800753a:	4b4f      	ldr	r3, [pc, #316]	; (8007678 <send_data+0x1d8>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007540:	18d0      	adds	r0, r2, r3
 8007542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007544:	4a4b      	ldr	r2, [pc, #300]	; (8007674 <send_data+0x1d4>)
 8007546:	4413      	add	r3, r2
 8007548:	8afa      	ldrh	r2, [r7, #22]
 800754a:	4619      	mov	r1, r3
 800754c:	f000 f9d9 	bl	8007902 <pack_packet>
													transfer_sz_left);
		
		clb_pos += transfer_sz_left;
 8007550:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007552:	8afb      	ldrh	r3, [r7, #22]
 8007554:	4413      	add	r3, r2
 8007556:	84fb      	strh	r3, [r7, #38]	; 0x26
		ping_pos += transfer_sz_left;
 8007558:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800755a:	8afb      	ldrh	r3, [r7, #22]
 800755c:	4413      	add	r3, r2
 800755e:	84bb      	strh	r3, [r7, #36]	; 0x24

		// cobbs encodes packet if sending over telem
		uint16_t stuffed_packet_sz = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	843b      	strh	r3, [r7, #32]
		if (type == CLB_Telem) {
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d121      	bne.n	80075ae <send_data+0x10e>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 800756a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800756c:	461a      	mov	r2, r3
 800756e:	4943      	ldr	r1, [pc, #268]	; (800767c <send_data+0x1dc>)
 8007570:	4840      	ldr	r0, [pc, #256]	; (8007674 <send_data+0x1d4>)
 8007572:	f000 fa2b 	bl	80079cc <stuff_packet>
 8007576:	4603      	mov	r3, r0
 8007578:	843b      	strh	r3, [r7, #32]
												CLB_pong_packet, ping_pos);
			// add termination character to transmission if possible
			if (clb_pos == clb_sz) {
 800757a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800757c:	8bfb      	ldrh	r3, [r7, #30]
 800757e:	429a      	cmp	r2, r3
 8007580:	d10d      	bne.n	800759e <send_data+0xfe>
				if (stuffed_packet_sz < 255) {
 8007582:	8c3b      	ldrh	r3, [r7, #32]
 8007584:	2bfe      	cmp	r3, #254	; 0xfe
 8007586:	d807      	bhi.n	8007598 <send_data+0xf8>
					CLB_pong_packet[stuffed_packet_sz++] = 0;
 8007588:	8c3b      	ldrh	r3, [r7, #32]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	843a      	strh	r2, [r7, #32]
 800758e:	461a      	mov	r2, r3
 8007590:	4b3a      	ldr	r3, [pc, #232]	; (800767c <send_data+0x1dc>)
 8007592:	2100      	movs	r1, #0
 8007594:	5499      	strb	r1, [r3, r2]
 8007596:	e002      	b.n	800759e <send_data+0xfe>
				} else {
					send_termination_bit = 1;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			transmit_packet(info->uartx, stuffed_packet_sz);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	8c3a      	ldrh	r2, [r7, #32]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f900 	bl	80077ac <transmit_packet>
 80075ac:	e03e      	b.n	800762c <send_data+0x18c>
		} else if (type == CLB_Flash) {
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d13b      	bne.n	800762c <send_data+0x18c>
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
										info->flash_arr+flash_pos, ping_pos);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689a      	ldr	r2, [r3, #8]
			stuffed_packet_sz = stuff_packet(CLB_ping_packet,
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	4413      	add	r3, r2
 80075bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075be:	4619      	mov	r1, r3
 80075c0:	482c      	ldr	r0, [pc, #176]	; (8007674 <send_data+0x1d4>)
 80075c2:	f000 fa03 	bl	80079cc <stuff_packet>
 80075c6:	4603      	mov	r3, r0
 80075c8:	843b      	strh	r3, [r7, #32]
			flash_pos += stuffed_packet_sz;
 80075ca:	8c3b      	ldrh	r3, [r7, #32]
 80075cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ce:	4413      	add	r3, r2
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
			info->flash_arr_used += stuffed_packet_sz;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	8c3b      	ldrh	r3, [r7, #32]
 80075dc:	4413      	add	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	b21a      	sxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	80da      	strh	r2, [r3, #6]
			// handle termination bit for flash
			if (clb_pos == clb_sz) {
 80075e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075e8:	8bfb      	ldrh	r3, [r7, #30]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d115      	bne.n	800761a <send_data+0x17a>
				if (stuffed_packet_sz < 255) {
 80075ee:	8c3b      	ldrh	r3, [r7, #32]
 80075f0:	2bfe      	cmp	r3, #254	; 0xfe
 80075f2:	d80f      	bhi.n	8007614 <send_data+0x174>
					info->flash_arr[info->flash_arr_used++] = 0;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80075fe:	b28a      	uxth	r2, r1
 8007600:	3201      	adds	r2, #1
 8007602:	b292      	uxth	r2, r2
 8007604:	b210      	sxth	r0, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	80d0      	strh	r0, [r2, #6]
 800760a:	460a      	mov	r2, r1
 800760c:	4413      	add	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e002      	b.n	800761a <send_data+0x17a>
				} else {
					send_termination_bit = 1;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}
			if (info->flash_arr_sz < 0) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	da03      	bge.n	800762c <send_data+0x18c>
				status = CLB_flash_buffer_overflow;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800762a:	e00b      	b.n	8007644 <send_data+0x1a4>
			}
		}

		if (ping_pos >= ping_sz) {
 800762c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800762e:	8bbb      	ldrh	r3, [r7, #28]
 8007630:	429a      	cmp	r2, r3
 8007632:	d301      	bcc.n	8007638 <send_data+0x198>
			ping_pos = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	84bb      	strh	r3, [r7, #36]	; 0x24
	while (clb_pos < CLB_buffer_sz) {
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <send_data+0x1cc>)
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800763e:	429a      	cmp	r2, r3
 8007640:	f4ff af6d 	bcc.w	800751e <send_data+0x7e>
		}
	}

	if (send_termination_bit) {
 8007644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <send_data+0x1be>
	    CLB_pong_packet[0] = 0;
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <send_data+0x1dc>)
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
	    transmit_packet(info->uartx, 1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2101      	movs	r1, #1
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f8a7 	bl	80077ac <transmit_packet>
	}

	return status; // TODO: return better error handling
 800765e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007662:	4618      	mov	r0, r3
 8007664:	3734      	adds	r7, #52	; 0x34
 8007666:	46bd      	mov	sp, r7
 8007668:	bd90      	pop	{r4, r7, pc}
 800766a:	bf00      	nop
 800766c:	20000c2a 	.word	0x20000c2a
 8007670:	20000dc4 	.word	0x20000dc4
 8007674:	20000914 	.word	0x20000914
 8007678:	2000063c 	.word	0x2000063c
 800767c:	20000788 	.word	0x20000788

08007680 <receive_data>:

uint8_t receive_data(UART_HandleTypeDef* uartx, uint8_t* buffer, uint16_t buffer_sz) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
	 * 
	 * 	Note: 	The boards only expect to receive data/cmds within 255 bytes
	 * 	       	any custom packet types that require more than 255 bytes will
	 * 			have to be spread out over multiple packet type ids
	 */
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 800768e:	2300      	movs	r3, #0
 8007690:	83fb      	strh	r3, [r7, #30]
 8007692:	e009      	b.n	80076a8 <receive_data+0x28>
		CLB_pong_packet[i] = buffer[i]; // copy items over for uart reception
 8007694:	8bfb      	ldrh	r3, [r7, #30]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	441a      	add	r2, r3
 800769a:	8bfb      	ldrh	r3, [r7, #30]
 800769c:	7811      	ldrb	r1, [r2, #0]
 800769e:	4a2d      	ldr	r2, [pc, #180]	; (8007754 <receive_data+0xd4>)
 80076a0:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < buffer_sz; ++i) {
 80076a2:	8bfb      	ldrh	r3, [r7, #30]
 80076a4:	3301      	adds	r3, #1
 80076a6:	83fb      	strh	r3, [r7, #30]
 80076a8:	8bfa      	ldrh	r2, [r7, #30]
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3f1      	bcc.n	8007694 <receive_data+0x14>
	}

	int16_t data_sz = unstuff_packet(CLB_pong_packet, CLB_ping_packet, buffer_sz);
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	461a      	mov	r2, r3
 80076b4:	4928      	ldr	r1, [pc, #160]	; (8007758 <receive_data+0xd8>)
 80076b6:	4827      	ldr	r0, [pc, #156]	; (8007754 <receive_data+0xd4>)
 80076b8:	f000 f9ee 	bl	8007a98 <unstuff_packet>
 80076bc:	4603      	mov	r3, r0
 80076be:	83bb      	strh	r3, [r7, #28]
    unpack_header(&CLB_receive_header, CLB_ping_packet);
 80076c0:	4925      	ldr	r1, [pc, #148]	; (8007758 <receive_data+0xd8>)
 80076c2:	4826      	ldr	r0, [pc, #152]	; (800775c <receive_data+0xdc>)
 80076c4:	f000 f886 	bl	80077d4 <unpack_header>
    uint8_t checksum_status = verify_checksum(CLB_receive_header.checksum);
 80076c8:	4b24      	ldr	r3, [pc, #144]	; (800775c <receive_data+0xdc>)
 80076ca:	88db      	ldrh	r3, [r3, #6]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f939 	bl	8007944 <verify_checksum>
 80076d2:	4603      	mov	r3, r0
 80076d4:	76fb      	strb	r3, [r7, #27]
    if (checksum_status!=0) {
 80076d6:	7efb      	ldrb	r3, [r7, #27]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <receive_data+0x60>
        return CLB_RECEIVE_CHECKSUM_ERROR; // drop transmission if checksum is bad
 80076dc:	2303      	movs	r3, #3
 80076de:	e034      	b.n	800774a <receive_data+0xca>
    }

	uint8_t cmd_status = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]

	if (CLB_board_addr == CLB_receive_header.target_addr) {
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <receive_data+0xdc>)
 80076e6:	789a      	ldrb	r2, [r3, #2]
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <receive_data+0xe0>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d129      	bne.n	8007744 <receive_data+0xc4>
	    // TODO: handle receiving different packet types besides cmd
		if (CLB_receive_header.packet_type < COMMAND_MAP_SZ) {
 80076f0:	4b1a      	ldr	r3, [pc, #104]	; (800775c <receive_data+0xdc>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b35      	cmp	r3, #53	; 0x35
 80076f6:	d827      	bhi.n	8007748 <receive_data+0xc8>
			int16_t cmd_index = command_map[CLB_receive_header.packet_type];
 80076f8:	4b18      	ldr	r3, [pc, #96]	; (800775c <receive_data+0xdc>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <receive_data+0xe4>)
 8007700:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007704:	833b      	strh	r3, [r7, #24]
			if(cmd_index != -1
 8007706:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d01b      	beq.n	8007748 <receive_data+0xc8>
			   && validate_command(CLB_receive_header.packet_type, data_sz) == CLB_RECEIVE_NOMINAL) {
 8007710:	4b12      	ldr	r3, [pc, #72]	; (800775c <receive_data+0xdc>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b21b      	sxth	r3, r3
 8007716:	8bba      	ldrh	r2, [r7, #28]
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f82a 	bl	8007774 <validate_command>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d110      	bne.n	8007748 <receive_data+0xc8>
				(*cmds_ptr[cmd_index])(CLB_ping_packet+CLB_HEADER_SZ, &cmd_status);
 8007726:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800772a:	4a0f      	ldr	r2, [pc, #60]	; (8007768 <receive_data+0xe8>)
 800772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007730:	480e      	ldr	r0, [pc, #56]	; (800776c <receive_data+0xec>)
 8007732:	f107 0217 	add.w	r2, r7, #23
 8007736:	4611      	mov	r1, r2
 8007738:	4798      	blx	r3
				CLB_last_cmd_received = CLB_receive_header.packet_type;
 800773a:	4b08      	ldr	r3, [pc, #32]	; (800775c <receive_data+0xdc>)
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <receive_data+0xf0>)
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e001      	b.n	8007748 <receive_data+0xc8>
			}
		}
	} else {
	    // Pass on daisy chained telem over uart channel
	    cmd_status = CLB_RECEIVE_DAISY_TELEM;
 8007744:	2302      	movs	r3, #2
 8007746:	75fb      	strb	r3, [r7, #23]
	}

	return cmd_status;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000788 	.word	0x20000788
 8007758:	20000914 	.word	0x20000914
 800775c:	20000db4 	.word	0x20000db4
 8007760:	20000887 	.word	0x20000887
 8007764:	20000004 	.word	0x20000004
 8007768:	200000dc 	.word	0x200000dc
 800776c:	20000920 	.word	0x20000920
 8007770:	20000c29 	.word	0x20000c29

08007774 <validate_command>:

static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz) {
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	460a      	mov	r2, r1
 800777e:	80fb      	strh	r3, [r7, #6]
 8007780:	4613      	mov	r3, r2
 8007782:	80bb      	strh	r3, [r7, #4]
    if (data_sz == command_sz[cmd_index]) {
 8007784:	88bb      	ldrh	r3, [r7, #4]
 8007786:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800778a:	4907      	ldr	r1, [pc, #28]	; (80077a8 <validate_command+0x34>)
 800778c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <validate_command+0x24>
        return CLB_RECEIVE_NOMINAL;
 8007794:	2300      	movs	r3, #0
 8007796:	e000      	b.n	800779a <validate_command+0x26>
    }
    return CLB_RECEIVE_SZ_ERROR;
 8007798:	2301      	movs	r3, #1
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000070 	.word	0x20000070

080077ac <transmit_packet>:
//    __disable_irq();
	HAL_UART_Receive(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
//	__enable_irq();
}

void transmit_packet(UART_HandleTypeDef* uartx, uint16_t sz) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
	// currently abstracted in case we need more transmisison options
	// transmit packet via serial TODO: error handling
//    __disable_irq();
	HAL_UART_Transmit(uartx, CLB_pong_packet, sz, HAL_MAX_DELAY);
 80077b8:	887a      	ldrh	r2, [r7, #2]
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	4904      	ldr	r1, [pc, #16]	; (80077d0 <transmit_packet+0x24>)
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f003 fcc4 	bl	800b14e <HAL_UART_Transmit>
//	__enable_irq();
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000788 	.word	0x20000788

080077d4 <unpack_header>:

void unpack_header(CLB_Packet_Header* header, uint8_t* header_buffer) {
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	header->packet_type = header_buffer[0];
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	701a      	strb	r2, [r3, #0]
	header->origin_addr = header_buffer[1];
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785a      	ldrb	r2, [r3, #1]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	705a      	strb	r2, [r3, #1]
	header->target_addr = header_buffer[2];
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	789a      	ldrb	r2, [r3, #2]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	709a      	strb	r2, [r3, #2]
	header->priority	= header_buffer[3];
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	78da      	ldrb	r2, [r3, #3]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	70da      	strb	r2, [r3, #3]
	header->num_packets = header_buffer[4];
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	791a      	ldrb	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	711a      	strb	r2, [r3, #4]
	header->do_cobbs    = header_buffer[5];
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	795a      	ldrb	r2, [r3, #5]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	715a      	strb	r2, [r3, #5]
	header->checksum	= (header_buffer[6]<<8)|header_buffer[7];
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	3306      	adds	r3, #6
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b21a      	sxth	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	3307      	adds	r3, #7
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b21b      	sxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b21b      	sxth	r3, r3
 8007824:	b29a      	uxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	80da      	strh	r2, [r3, #6]
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	3308      	adds	r3, #8
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3309      	adds	r3, #9
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	431a      	orrs	r2, r3
	                        header_buffer[10]<<8|header_buffer[11];
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	330a      	adds	r3, #10
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	021b      	lsls	r3, r3, #8
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8007844:	4313      	orrs	r3, r2
	                        header_buffer[10]<<8|header_buffer[11];
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	320b      	adds	r2, #11
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	4313      	orrs	r3, r2
 800784e:	461a      	mov	r2, r3
	header->timestamp   = header_buffer[8]<<24|header_buffer[9]<<16|
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <pack_header>:

void pack_header(CLB_Packet_Header* header, uint8_t*header_buffer) {
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	header_buffer[0] = header->packet_type;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	701a      	strb	r2, [r3, #0]
	header_buffer[1] = header->origin_addr;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	7852      	ldrb	r2, [r2, #1]
 800787a:	701a      	strb	r2, [r3, #0]
	header_buffer[2] = header->target_addr;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	3302      	adds	r3, #2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7892      	ldrb	r2, [r2, #2]
 8007884:	701a      	strb	r2, [r3, #0]
	header_buffer[3] = header->priority;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3303      	adds	r3, #3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	78d2      	ldrb	r2, [r2, #3]
 800788e:	701a      	strb	r2, [r3, #0]
	header_buffer[4] = header->num_packets;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	3304      	adds	r3, #4
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7912      	ldrb	r2, [r2, #4]
 8007898:	701a      	strb	r2, [r3, #0]
	header_buffer[5] = header->do_cobbs;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	3305      	adds	r3, #5
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	7952      	ldrb	r2, [r2, #5]
 80078a2:	701a      	strb	r2, [r3, #0]
	header_buffer[6] = 0xff&(header->checksum);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	88da      	ldrh	r2, [r3, #6]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3306      	adds	r3, #6
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
	header_buffer[7] = 0xff&((header->checksum)>>8);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	88db      	ldrh	r3, [r3, #6]
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	3307      	adds	r3, #7
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
	header_buffer[8] = 0xff&(header->timestamp);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
	header_buffer[9] = 0xff&((header->timestamp)>>8);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	0a1a      	lsrs	r2, r3, #8
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	3309      	adds	r3, #9
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]
	header_buffer[10] = 0xff&((header->timestamp)>>16);     // little endian
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	0c1a      	lsrs	r2, r3, #16
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	330a      	adds	r3, #10
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
	header_buffer[11] = 0xff&((header->timestamp)>>24);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	0e1a      	lsrs	r2, r3, #24
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	330b      	adds	r3, #11
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <pack_packet>:

void pack_packet(uint8_t *src, uint8_t *dst, uint16_t sz) {
 8007902:	b480      	push	{r7}
 8007904:	b087      	sub	sp, #28
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
	uint8_t *curr = src;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	617b      	str	r3, [r7, #20]
	uint8_t *end = src + sz;
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
	while (curr != end) {
 800791c:	e007      	b.n	800792e <pack_packet+0x2c>
		*dst++ = *curr++;
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	1c53      	adds	r3, r2, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	701a      	strb	r2, [r3, #0]
	while (curr != end) {
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	429a      	cmp	r2, r3
 8007934:	d1f3      	bne.n	800791e <pack_packet+0x1c>
	}
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <verify_checksum>:

uint8_t verify_checksum(uint16_t checksum) {
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	80fb      	strh	r3, [r7, #6]
	// TODO: Implement checksum checking procedure
	return 0;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <compute_checksum>:

uint16_t compute_checksum() {
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
	// TODO: Implement checksum procedure, use 0 dummy value temporarily
	return 0; 
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	0000      	movs	r0, r0
	...

08007970 <compute_packet_sz>:

uint8_t compute_packet_sz() {
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
    uint16_t bytes = CLB_buffer_sz + CLB_HEADER_SZ + 1; // 1 for termination bit
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <compute_packet_sz+0x58>)
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	330d      	adds	r3, #13
 800797c:	80fb      	strh	r3, [r7, #6]
    uint8_t num_packets = ceil((bytes*1.0)/PONG_MAX_PACKET_SIZE);
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	4618      	mov	r0, r3
 8007982:	f7f8 fd93 	bl	80004ac <__aeabi_i2d>
 8007986:	a30e      	add	r3, pc, #56	; (adr r3, 80079c0 <compute_packet_sz+0x50>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 ff22 	bl	80007d4 <__aeabi_ddiv>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	ec43 2b17 	vmov	d7, r2, r3
 8007998:	eeb0 0a47 	vmov.f32	s0, s14
 800799c:	eef0 0a67 	vmov.f32	s1, s15
 80079a0:	f004 fa22 	bl	800bde8 <ceil>
 80079a4:	ec53 2b10 	vmov	r2, r3, d0
 80079a8:	4610      	mov	r0, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	f7f9 f898 	bl	8000ae0 <__aeabi_d2uiz>
 80079b0:	4603      	mov	r3, r0
 80079b2:	717b      	strb	r3, [r7, #5]
    return num_packets;
 80079b4:	797b      	ldrb	r3, [r7, #5]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	00000000 	.word	0x00000000
 80079c4:	406fe000 	.word	0x406fe000
 80079c8:	20000c2a 	.word	0x20000c2a

080079cc <stuff_packet>:

//This code was shamelessly stolen from wikipedia, docs by me tho
uint16_t stuff_packet(const uint8_t *unstuffed, uint8_t *stuffed, uint16_t length) {
 80079cc:	b480      	push	{r7}
 80079ce:	b089      	sub	sp, #36	; 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]

	//Start just keeps track of the start point
	uint8_t *start = stuffed;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	617b      	str	r3, [r7, #20]
	if (CLB_header->do_cobbs) {
 80079de:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <stuff_packet+0xc8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	795b      	ldrb	r3, [r3, #5]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d038      	beq.n	8007a5a <stuff_packet+0x8e>
		//Code represents the number of positions till the next 0 and code_ptr
        //holds the position of the last zero to be updated when the next 0 is found
        uint8_t *code_ptr = stuffed++; //Note: this sets code_ptr to stuffed, then ++ stuffed
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	60ba      	str	r2, [r7, #8]
 80079ee:	61fb      	str	r3, [r7, #28]
        *code_ptr = 1;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	2201      	movs	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
        while (length--)
 80079f6:	e02a      	b.n	8007a4e <stuff_packet+0x82>
        {
            if (*unstuffed) {
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <stuff_packet+0x52>
                *stuffed++ = *unstuffed++;
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	1c53      	adds	r3, r2, #1
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
                *code_ptr += 1;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e009      	b.n	8007a32 <stuff_packet+0x66>
            } else {
                code_ptr = stuffed++;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	60ba      	str	r2, [r7, #8]
 8007a24:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
                unstuffed++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
            }

            if (*code_ptr == 0xFF && length > 0)
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2bff      	cmp	r3, #255	; 0xff
 8007a38:	d109      	bne.n	8007a4e <stuff_packet+0x82>
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <stuff_packet+0x82>
            {
                code_ptr = stuffed++;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	60ba      	str	r2, [r7, #8]
 8007a46:	61fb      	str	r3, [r7, #28]
                *code_ptr = 1;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
        while (length--)
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	80fa      	strh	r2, [r7, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1cf      	bne.n	80079f8 <stuff_packet+0x2c>
 8007a58:	e011      	b.n	8007a7e <stuff_packet+0xb2>
        }
        //Set the final code
        //*code_ptr = code;
        //Returns length of encoded data
	} else {
		for (uint16_t i = 0; i < length; ++i) {
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	837b      	strh	r3, [r7, #26]
 8007a5e:	e00a      	b.n	8007a76 <stuff_packet+0xaa>
			*stuffed++ = *unstuffed++;
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	1c53      	adds	r3, r2, #1
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	7812      	ldrb	r2, [r2, #0]
 8007a6e:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < length; ++i) {
 8007a70:	8b7b      	ldrh	r3, [r7, #26]
 8007a72:	3301      	adds	r3, #1
 8007a74:	837b      	strh	r3, [r7, #26]
 8007a76:	8b7a      	ldrh	r2, [r7, #26]
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d3f0      	bcc.n	8007a60 <stuff_packet+0x94>
		}
	}

	return stuffed - start;
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	b29b      	uxth	r3, r3
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3724      	adds	r7, #36	; 0x24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000dc4 	.word	0x20000dc4

08007a98 <unstuff_packet>:
 *
 * Returns the length of the decoded data
 * (which is guaranteed to be <= length).
 */
uint16_t unstuff_packet(uint8_t *stuffed, uint8_t *unstuffed, uint16_t length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b089      	sub	sp, #36	; 0x24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80fb      	strh	r3, [r7, #6]
    uint8_t *start = unstuffed, *end = stuffed + length;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF, copy = 0;
 8007ab2:	23ff      	movs	r3, #255	; 0xff
 8007ab4:	77fb      	strb	r3, [r7, #31]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	77bb      	strb	r3, [r7, #30]
	for (; stuffed < end; copy--) {
 8007aba:	e024      	b.n	8007b06 <unstuff_packet+0x6e>
	    if (!*stuffed) break; // early return if zero is encountered
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d025      	beq.n	8007b10 <unstuff_packet+0x78>
		if (copy != 0) {
 8007ac4:	7fbb      	ldrb	r3, [r7, #30]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <unstuff_packet+0x44>
			*unstuffed++ = *stuffed++;
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	1c53      	adds	r3, r2, #1
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	1c59      	adds	r1, r3, #1
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e011      	b.n	8007b00 <unstuff_packet+0x68>
		} else {
			if (code != 0xFF)
 8007adc:	7ffb      	ldrb	r3, [r7, #31]
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	d004      	beq.n	8007aec <unstuff_packet+0x54>
				*unstuffed++ = 0;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	60ba      	str	r2, [r7, #8]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
			copy = code = *stuffed++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	60fa      	str	r2, [r7, #12]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	77fb      	strb	r3, [r7, #31]
 8007af6:	7ffb      	ldrb	r3, [r7, #31]
 8007af8:	77bb      	strb	r3, [r7, #30]
			if (code == 0)
 8007afa:	7ffb      	ldrb	r3, [r7, #31]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <unstuff_packet+0x7c>
	for (; stuffed < end; copy--) {
 8007b00:	7fbb      	ldrb	r3, [r7, #30]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	77bb      	strb	r3, [r7, #30]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d3d6      	bcc.n	8007abc <unstuff_packet+0x24>
 8007b0e:	e002      	b.n	8007b16 <unstuff_packet+0x7e>
	    if (!*stuffed) break; // early return if zero is encountered
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <unstuff_packet+0x7e>
				break; /* Source length too long */
 8007b14:	bf00      	nop
		}
	}
	return unstuffed - start;
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	b29b      	uxth	r3, r3
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3724      	adds	r7, #36	; 0x24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	4613      	mov	r3, r2
 8007b36:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b38:	b672      	cpsid	i
}
 8007b3a:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f001 fadc 	bl	8009108 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	23ff      	movs	r3, #255	; 0xff
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	f002 f8a5 	bl	8009caa <HAL_SPI_Transmit>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007b76:	2201      	movs	r2, #1
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f001 fac5 	bl	8009108 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b7e:	b662      	cpsie	i
}
 8007b80:	bf00      	nop
	__enable_irq();

}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	603b      	str	r3, [r7, #0]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b9a:	b672      	cpsid	i
}
 8007b9c:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007baa:	2200      	movs	r2, #0
 8007bac:	4619      	mov	r1, r3
 8007bae:	f001 faab 	bl	8009108 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	23ff      	movs	r3, #255	; 0xff
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	f002 f874 	bl	8009caa <HAL_SPI_Transmit>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007bd2:	8b3a      	ldrh	r2, [r7, #24]
 8007bd4:	23ff      	movs	r3, #255	; 0xff
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	f002 f9a3 	bl	8009f22 <HAL_SPI_Receive>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f001 fa87 	bl	8009108 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8007bfa:	b662      	cpsie	i
}
 8007bfc:	bf00      	nop
	__enable_irq();

}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af02      	add	r7, sp, #8
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8007c12:	230f      	movs	r3, #15
 8007c14:	733b      	strb	r3, [r7, #12]
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8007c1a:	f107 0308 	add.w	r3, r7, #8
 8007c1e:	f107 010c 	add.w	r1, r7, #12
 8007c22:	2201      	movs	r2, #1
 8007c24:	9200      	str	r2, [sp, #0]
 8007c26:	2202      	movs	r2, #2
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ffae 	bl	8007b8a <spi_transmit_receive>

	return *rx;
 8007c2e:	7a3b      	ldrb	r3, [r7, #8]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8007c40:	21c0      	movs	r1, #192	; 0xc0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ffdf 	bl	8007c06 <read_status_register>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	b2db      	uxtb	r3, r3
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8007c6a:	e002      	b.n	8007c72 <wait_for_operation+0x16>
		++count;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ffe0 	bl	8007c38 <flash_is_busy>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <wait_for_operation+0x34>
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	4413      	add	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d3ed      	bcc.n	8007c6c <wait_for_operation+0x10>
	}
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8007ca8:	231f      	movs	r3, #31
 8007caa:	733b      	strb	r3, [r7, #12]
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	737b      	strb	r3, [r7, #13]
 8007cb0:	78bb      	ldrb	r3, [r7, #2]
 8007cb2:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8007cb4:	f107 030c 	add.w	r3, r7, #12
 8007cb8:	2203      	movs	r2, #3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ff34 	bl	8007b2a <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8007cc2:	2132      	movs	r1, #50	; 0x32
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ffc9 	bl	8007c5c <wait_for_operation>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8007cde:	887b      	ldrh	r3, [r7, #2]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	733b      	strb	r3, [r7, #12]
 8007ce8:	887b      	ldrh	r3, [r7, #2]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8007cee:	2313      	movs	r3, #19
 8007cf0:	723b      	strb	r3, [r7, #8]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	727b      	strb	r3, [r7, #9]
 8007cf6:	7b3b      	ldrb	r3, [r7, #12]
 8007cf8:	72bb      	strb	r3, [r7, #10]
 8007cfa:	7b7b      	ldrb	r3, [r7, #13]
 8007cfc:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8007cfe:	f107 0308 	add.w	r3, r7, #8
 8007d02:	2204      	movs	r2, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff0f 	bl	8007b2a <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8007d0c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff ffa3 	bl	8007c5c <wait_for_operation>
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8007d26:	21a0      	movs	r1, #160	; 0xa0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff6c 	bl	8007c06 <read_status_register>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8007d38:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	21a0      	movs	r1, #160	; 0xa0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ffa9 	bl	8007c98 <write_status_register>
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8007d56:	21a0      	movs	r1, #160	; 0xa0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff54 	bl	8007c06 <read_status_register>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8007d68:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d70:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	461a      	mov	r2, r3
 8007d76:	21a0      	movs	r1, #160	; 0xa0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff ff8d 	bl	8007c98 <write_status_register>
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8007d8e:	2306      	movs	r3, #6
 8007d90:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8007d92:	f107 030c 	add.w	r3, r7, #12
 8007d96:	2201      	movs	r2, #1
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fec5 	bl	8007b2a <spi_transmit>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8007db0:	2304      	movs	r3, #4
 8007db2:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	2201      	movs	r2, #1
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff feb4 	bl	8007b2a <spi_transmit>
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	460b      	mov	r3, r1
 8007dda:	80fb      	strh	r3, [r7, #6]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8007de0:	88bb      	ldrh	r3, [r7, #4]
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	753b      	strb	r3, [r7, #20]
 8007dea:	88bb      	ldrh	r3, [r7, #4]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8007df0:	2302      	movs	r3, #2
 8007df2:	743b      	strb	r3, [r7, #16]
 8007df4:	7d3b      	ldrb	r3, [r7, #20]
 8007df6:	747b      	strb	r3, [r7, #17]
 8007df8:	7d7b      	ldrb	r3, [r7, #21]
 8007dfa:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e02:	d902      	bls.n	8007e0a <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8007e04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e08:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e0a:	b672      	cpsid	i
}
 8007e0c:	bf00      	nop

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f001 f973 	bl	8009108 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007e28:	f107 0110 	add.w	r1, r7, #16
 8007e2c:	23ff      	movs	r3, #255	; 0xff
 8007e2e:	2203      	movs	r2, #3
 8007e30:	f001 ff3b 	bl	8009caa <HAL_SPI_Transmit>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	23ff      	movs	r3, #255	; 0xff
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	f001 ff2e 	bl	8009caa <HAL_SPI_Transmit>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	461a      	mov	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007e64:	2201      	movs	r2, #1
 8007e66:	4619      	mov	r1, r3
 8007e68:	f001 f94e 	bl	8009108 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e6c:	b662      	cpsie	i
}
 8007e6e:	bf00      	nop
	__enable_irq();
}
 8007e70:	bf00      	nop
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	0a1b      	lsrs	r3, r3, #8
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	733b      	strb	r3, [r7, #12]
 8007e8e:	887b      	ldrh	r3, [r7, #2]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8007e94:	2310      	movs	r3, #16
 8007e96:	723b      	strb	r3, [r7, #8]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	727b      	strb	r3, [r7, #9]
 8007e9c:	7b3b      	ldrb	r3, [r7, #12]
 8007e9e:	72bb      	strb	r3, [r7, #10]
 8007ea0:	7b7b      	ldrb	r3, [r7, #13]
 8007ea2:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8007ea4:	f107 0308 	add.w	r3, r7, #8
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fe3c 	bl	8007b2a <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8007eb2:	4904      	ldr	r1, [pc, #16]	; (8007ec4 <program_buffer_to_memory+0x4c>)
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fed1 	bl	8007c5c <wait_for_operation>
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	000aae60 	.word	0x000aae60

08007ec8 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fabd 	bl	8008450 <ping_flash>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00d      	beq.n	8007ef8 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8007edc:	21c0      	movs	r1, #192	; 0xc0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff fe91 	bl	8007c06 <read_status_register>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8007ef6:	e003      	b.n	8007f00 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2208      	movs	r2, #8
 8007efc:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa9a 	bl	8008450 <ping_flash>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8007f22:	21c0      	movs	r1, #192	; 0xc0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fe6e 	bl	8007c06 <read_status_register>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8007f3c:	e003      	b.n	8007f46 <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff10 	bl	8007d86 <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	733b      	strb	r3, [r7, #12]
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8007f76:	23d8      	movs	r3, #216	; 0xd8
 8007f78:	723b      	strb	r3, [r7, #8]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	727b      	strb	r3, [r7, #9]
 8007f7e:	7b3b      	ldrb	r3, [r7, #12]
 8007f80:	72bb      	strb	r3, [r7, #10]
 8007f82:	7b7b      	ldrb	r3, [r7, #13]
 8007f84:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff fdcb 	bl	8007b2a <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ff07 	bl	8007da8 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 8007f9a:	4905      	ldr	r1, [pc, #20]	; (8007fb0 <erase_block+0x5c>)
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fe5d 	bl	8007c5c <wait_for_operation>

	get_erase_failure_status(flash);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ffb3 	bl	8007f0e <get_erase_failure_status>
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	003d0900 	.word	0x003d0900

08007fb4 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa47 	bl	8008450 <ping_flash>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d033      	beq.n	8008030 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8007fc8:	21c0      	movs	r1, #192	; 0xc0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fe1b 	bl	8007c06 <read_status_register>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d107      	bne.n	8007ffa <get_ECC_status+0x46>
 8007fea:	7b7b      	ldrb	r3, [r7, #13]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8007ff8:	e01f      	b.n	800803a <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <get_ECC_status+0x5c>
 8008000:	7b7b      	ldrb	r3, [r7, #13]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 800800e:	e014      	b.n	800803a <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <get_ECC_status+0x72>
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8008024:	e009      	b.n	800803a <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2203      	movs	r2, #3
 800802a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 800802e:	e004      	b.n	800803a <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2204      	movs	r2, #4
 8008034:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 8008038:	e7ff      	b.n	800803a <get_ECC_status+0x86>
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8008042:	b580      	push	{r7, lr}
 8008044:	b088      	sub	sp, #32
 8008046:	af02      	add	r7, sp, #8
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	4611      	mov	r1, r2
 800804e:	461a      	mov	r2, r3
 8008050:	460b      	mov	r3, r1
 8008052:	80fb      	strh	r3, [r7, #6]
 8008054:	4613      	mov	r3, r2
 8008056:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8008058:	88bb      	ldrh	r3, [r7, #4]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	b29b      	uxth	r3, r3
 800805e:	b2db      	uxtb	r3, r3
 8008060:	753b      	strb	r3, [r7, #20]
 8008062:	88bb      	ldrh	r3, [r7, #4]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8008068:	2303      	movs	r3, #3
 800806a:	743b      	strb	r3, [r7, #16]
 800806c:	7d3b      	ldrb	r3, [r7, #20]
 800806e:	747b      	strb	r3, [r7, #17]
 8008070:	7d7b      	ldrb	r3, [r7, #21]
 8008072:	74bb      	strb	r3, [r7, #18]
 8008074:	2300      	movs	r3, #0
 8008076:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8008078:	f107 0110 	add.w	r1, r7, #16
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2204      	movs	r2, #4
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fd80 	bl	8007b8a <spi_transmit_receive>
}
 800808a:	bf00      	nop
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4611      	mov	r1, r2
 800809e:	461a      	mov	r2, r3
 80080a0:	460b      	mov	r3, r1
 80080a2:	80fb      	strh	r3, [r7, #6]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 80080a8:	88bb      	ldrh	r3, [r7, #4]
 80080aa:	4619      	mov	r1, r3
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff fe10 	bl	8007cd2 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 80080b2:	8b3b      	ldrh	r3, [r7, #24]
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ffc2 	bl	8008042 <read_flash_buffer>

	get_ECC_status(flash);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff ff78 	bl	8007fb4 <get_ECC_status>
}
 80080c4:	bf00      	nop
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4611      	mov	r1, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	460b      	mov	r3, r1
 80080dc:	80fb      	strh	r3, [r7, #6]
 80080de:	4613      	mov	r3, r2
 80080e0:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fe4f 	bl	8007d86 <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 80080e8:	8b3b      	ldrh	r3, [r7, #24]
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff fe6b 	bl	8007dca <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 80080f4:	88bb      	ldrh	r3, [r7, #4]
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff febd 	bl	8007e78 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fe52 	bl	8007da8 <disable_write>

	get_write_failure_status(flash);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff fedf 	bl	8007ec8 <get_write_failure_status>
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800811a:	21b0      	movs	r1, #176	; 0xb0
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fd72 	bl	8007c06 <read_status_register>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	f043 0310 	orr.w	r3, r3, #16
 800812c:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 800812e:	7bba      	ldrb	r2, [r7, #14]
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	429a      	cmp	r2, r3
 8008134:	d005      	beq.n	8008142 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	461a      	mov	r2, r3
 800813a:	21b0      	movs	r1, #176	; 0xb0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fdab 	bl	8007c98 <write_status_register>
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8008152:	21b0      	movs	r1, #176	; 0xb0
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fd56 	bl	8007c06 <read_status_register>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	f043 0308 	orr.w	r3, r3, #8
 8008164:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8008166:	7bba      	ldrb	r2, [r7, #14]
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	429a      	cmp	r2, r3
 800816c:	d005      	beq.n	800817a <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	461a      	mov	r2, r3
 8008172:	21b0      	movs	r1, #176	; 0xb0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fd8f 	bl	8007c98 <write_status_register>
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8008182:	b580      	push	{r7, lr}
 8008184:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8008188:	af02      	add	r7, sp, #8
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 800818e:	f107 0108 	add.w	r1, r7, #8
 8008192:	1d38      	adds	r0, r7, #4
 8008194:	2300      	movs	r3, #0
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	2300      	movs	r3, #0
 800819a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800819e:	6800      	ldr	r0, [r0, #0]
 80081a0:	f7ff ff77 	bl	8008092 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80081b0:	e00e      	b.n	80081d0 <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 80081b2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80081b6:	f107 0208 	add.w	r2, r7, #8
 80081ba:	5cd3      	ldrb	r3, [r2, r3]
 80081bc:	2bff      	cmp	r3, #255	; 0xff
 80081be:	d002      	beq.n	80081c6 <find_write_ptr+0x44>
			first_page_empty = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80081c6:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80081ca:	3301      	adds	r3, #1
 80081cc:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80081d0:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80081d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d8:	d3eb      	bcc.n	80081b2 <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 80081da:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <find_write_ptr+0x76>
		flash->current_page = 0;
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 80081ec:	1d3b      	adds	r3, r7, #4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 80081f6:	e0f0      	b.n	80083da <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 80081fe:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8008202:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8008206:	e041      	b.n	800828c <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 8008208:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800820c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800821a:	b29b      	uxth	r3, r3
 800821c:	4413      	add	r3, r2
 800821e:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8008222:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8008226:	f107 0108 	add.w	r1, r7, #8
 800822a:	1d38      	adds	r0, r7, #4
 800822c:	2200      	movs	r2, #0
 800822e:	9200      	str	r2, [sp, #0]
 8008230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008234:	6800      	ldr	r0, [r0, #0]
 8008236:	f7ff ff2c 	bl	8008092 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8008240:	2300      	movs	r3, #0
 8008242:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8008246:	e00f      	b.n	8008268 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8008248:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800824c:	f107 0208 	add.w	r2, r7, #8
 8008250:	5cd3      	ldrb	r3, [r2, r3]
 8008252:	2bff      	cmp	r3, #255	; 0xff
 8008254:	d003      	beq.n	800825e <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 800825c:	e009      	b.n	8008272 <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 800825e:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8008262:	3301      	adds	r3, #1
 8008264:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8008268:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800826c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008270:	d3ea      	bcc.n	8008248 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8008272:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <find_write_ptr+0x102>
			max = cur_search_page;
 800827a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800827e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8008282:	e003      	b.n	800828c <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8008284:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8008288:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 800828c:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8008290:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d8b6      	bhi.n	8008208 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 800829a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800829e:	b29a      	uxth	r2, r3
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	1d38      	adds	r0, r7, #4
 80082b6:	2200      	movs	r2, #0
 80082b8:	9200      	str	r2, [sp, #0]
 80082ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082be:	6800      	ldr	r0, [r0, #0]
 80082c0:	f7ff fee7 	bl	8008092 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 80082c4:	f107 0308 	add.w	r3, r7, #8
 80082c8:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 80082cc:	2bff      	cmp	r3, #255	; 0xff
 80082ce:	d01e      	beq.n	800830e <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 80082d0:	1d3b      	adds	r3, r7, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80082d8:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80082dc:	4293      	cmp	r3, r2
 80082de:	d106      	bne.n	80082ee <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082e8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 80082ec:	e075      	b.n	80083da <find_write_ptr+0x258>
			flash->current_page++;
 80082ee:	1d3b      	adds	r3, r7, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80082f6:	3301      	adds	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2200      	movs	r2, #0
 8008308:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 800830c:	e065      	b.n	80083da <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8008314:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008318:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 800831c:	e019      	b.n	8008352 <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 800831e:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8008322:	f107 0208 	add.w	r2, r7, #8
 8008326:	5cd3      	ldrb	r3, [r2, r3]
 8008328:	2bff      	cmp	r3, #255	; 0xff
 800832a:	d00b      	beq.n	8008344 <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 800832c:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8008330:	3301      	adds	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	1d3b      	adds	r3, r7, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8008342:	e00a      	b.n	800835a <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8008344:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8008352:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8008356:	2b00      	cmp	r3, #0
 8008358:	dae1      	bge.n	800831e <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 800835a:	1d3b      	adds	r3, r7, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008366:	d806      	bhi.n	8008376 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8008368:	1d3b      	adds	r3, r7, #4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008370:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008374:	e031      	b.n	80083da <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8008376:	1d3b      	adds	r3, r7, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800837e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008382:	d806      	bhi.n	8008392 <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8008384:	1d3b      	adds	r3, r7, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800838c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008390:	e023      	b.n	80083da <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800839a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800839e:	d806      	bhi.n	80083ae <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80083a8:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 80083ac:	e015      	b.n	80083da <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80083b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ba:	d20e      	bcs.n	80083da <find_write_ptr+0x258>
		flash->next_free_column = 0;
 80083bc:	1d3b      	adds	r3, r7, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 80083c6:	1d3b      	adds	r3, r7, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	1d3b      	adds	r3, r7, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 80083da:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	887a      	ldrh	r2, [r7, #2]
 8008404:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f837 	bl	80084a4 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff fe6b 	bl	8008112 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff fe84 	bl	800814a <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7ff fe9d 	bl	8008182 <find_write_ptr>
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8008458:	239f      	movs	r3, #159	; 0x9f
 800845a:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 800845c:	f107 030c 	add.w	r3, r7, #12
 8008460:	f107 0110 	add.w	r1, r7, #16
 8008464:	2203      	movs	r2, #3
 8008466:	9200      	str	r2, [sp, #0]
 8008468:	2202      	movs	r2, #2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fb8d 	bl	8007b8a <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8008470:	7b3b      	ldrb	r3, [r7, #12]
 8008472:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8008474:	7b7b      	ldrb	r3, [r7, #13]
 8008476:	b29b      	uxth	r3, r3
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	b29a      	uxth	r2, r3
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	b29b      	uxth	r3, r3
 8008480:	4413      	add	r3, r2
 8008482:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2bef      	cmp	r3, #239	; 0xef
 8008488:	d106      	bne.n	8008498 <ping_flash+0x48>
 800848a:	8abb      	ldrh	r3, [r7, #20]
 800848c:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8008490:	4293      	cmp	r3, r2
 8008492:	d101      	bne.n	8008498 <ping_flash+0x48>
		return 1;
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <ping_flash+0x4a>
	else
		return 0;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fbc3 	bl	8007c38 <flash_is_busy>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <reset_flash+0x18>
		return 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	e00d      	b.n	80084d8 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 80084bc:	23ff      	movs	r3, #255	; 0xff
 80084be:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	2201      	movs	r2, #1
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fb2e 	bl	8007b2a <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 80084ce:	4904      	ldr	r1, [pc, #16]	; (80084e0 <reset_flash+0x3c>)
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff fbc3 	bl	8007c5c <wait_for_operation>

	return 1;
 80084d6:	2301      	movs	r3, #1
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	0007a120 	.word	0x0007a120

080084e4 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 80084f4:	2300      	movs	r3, #0
 80084f6:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 80084f8:	e05a      	b.n	80085b0 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	b29b      	uxth	r3, r3
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8008506:	8a3a      	ldrh	r2, [r7, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800850e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008512:	429a      	cmp	r2, r3
 8008514:	dd05      	ble.n	8008522 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800851c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008520:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	18d1      	adds	r1, r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8008534:	8a3a      	ldrh	r2, [r7, #16]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff fdc6 	bl	80080cc <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <write_to_flash_contiguous+0x6c>
			write_failures++;
 800854a:	8a7b      	ldrh	r3, [r7, #18]
 800854c:	3301      	adds	r3, #1
 800854e:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8008550:	8a3b      	ldrh	r3, [r7, #16]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4413      	add	r3, r2
 8008556:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 800855e:	461a      	mov	r2, r3
 8008560:	8a3b      	ldrh	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008568:	da09      	bge.n	800857e <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8008570:	8a3b      	ldrh	r3, [r7, #16]
 8008572:	4413      	add	r3, r2
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800857c:	e018      	b.n	80085b0 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8008584:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8008588:	4293      	cmp	r3, r2
 800858a:	d105      	bne.n	8008598 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008592:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8008596:	e00b      	b.n	80085b0 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80085a6:	3301      	adds	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3a0      	bcc.n	80084fa <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b08c      	sub	sp, #48	; 0x30
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f967 	bl	80088a2 <get_bytes_remaining>
 80085d4:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d901      	bls.n	80085e2 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 80085e2:	2300      	movs	r3, #0
 80085e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 80085e6:	2300      	movs	r3, #0
 80085e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d035      	beq.n	8008662 <write_to_flash+0xa0>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008606:	d32c      	bcc.n	8008662 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800860e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008612:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8008614:	2300      	movs	r3, #0
 8008616:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008618:	e00e      	b.n	8008638 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 800861a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	441a      	add	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008626:	4619      	mov	r1, r3
 8008628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800862a:	440b      	add	r3, r1
 800862c:	7811      	ldrb	r1, [r2, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8008632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008634:	3301      	adds	r3, #1
 8008636:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008638:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800863a:	8bfb      	ldrh	r3, [r7, #30]
 800863c:	429a      	cmp	r2, r3
 800863e:	d3ec      	bcc.n	800861a <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8008650:	8bfb      	ldrh	r3, [r7, #30]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4413      	add	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8008658:	8bfb      	ldrh	r3, [r7, #30]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8008660:	e02a      	b.n	80086b8 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008668:	461a      	mov	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008672:	d221      	bcs.n	80086b8 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8008674:	2300      	movs	r3, #0
 8008676:	853b      	strh	r3, [r7, #40]	; 0x28
 8008678:	e00e      	b.n	8008698 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 800867a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	441a      	add	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008686:	4619      	mov	r1, r3
 8008688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800868a:	440b      	add	r3, r1
 800868c:	7811      	ldrb	r1, [r2, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8008692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008694:	3301      	adds	r3, #1
 8008696:	853b      	strh	r3, [r7, #40]	; 0x28
 8008698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d8ec      	bhi.n	800867a <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e04b      	b.n	8008750 <write_to_flash+0x18e>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	4413      	add	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fb21 	bl	8007d1e <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 80086dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00f      	beq.n	8008704 <write_to_flash+0x142>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ea:	4619      	mov	r1, r3
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fef9 	bl	80084e4 <write_to_flash_contiguous>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086f8:	4413      	add	r3, r2
 80086fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d009      	beq.n	800871e <write_to_flash+0x15c>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fee8 	bl	80084e4 <write_to_flash_contiguous>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800871a:	4413      	add	r3, r2
 800871c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fb15 	bl	8007d4e <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 8008724:	2300      	movs	r3, #0
 8008726:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008728:	e009      	b.n	800873e <write_to_flash+0x17c>
		flash->write_buffer[i] = end_arr[i];
 800872a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	441a      	add	r2, r3
 8008730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008732:	7811      	ldrb	r1, [r2, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8008738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800873a:	3301      	adds	r3, #1
 800873c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800873e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008740:	8afb      	ldrh	r3, [r7, #22]
 8008742:	429a      	cmp	r2, r3
 8008744:	d3f1      	bcc.n	800872a <write_to_flash+0x168>
	}
	flash->write_buffer_size = end_size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8afa      	ldrh	r2, [r7, #22]
 800874a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 800874e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8008750:	4618      	mov	r0, r3
 8008752:	3730      	adds	r7, #48	; 0x30
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <finish_flash_write>:

uint16_t finish_flash_write(W25N01GV_Flash *flash) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	// Ignore this function if there's nothing in the write buffer
	if (flash->write_buffer_size == 0) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10d      	bne.n	8008786 <finish_flash_write+0x2e>
		return 0;
 800876a:	2300      	movs	r3, #0
 800876c:	e036      	b.n	80087dc <finish_flash_write+0x84>

	// Fill the rest of write_buffer with 0x00 to prevent
	// any future accidental calls to write_to_flash() don't
	// mess up the 512-byte framing
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
		flash->write_buffer[flash->write_buffer_size++] = 0x00;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	b291      	uxth	r1, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2100      	movs	r1, #0
 8008784:	5499      	strb	r1, [r3, r2]
	while (flash->write_buffer_size < W25N01GV_SECTOR_SIZE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008790:	d3ed      	bcc.n	800876e <finish_flash_write+0x16>

	// If there's not enough space, truncate the data.
	// This should never happen, but just in case.
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f885 	bl	80088a2 <get_bytes_remaining>
 8008798:	60f8      	str	r0, [r7, #12]
	if (flash->write_buffer_size > bytes_remaining)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80087a0:	461a      	mov	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d204      	bcs.n	80087b2 <finish_flash_write+0x5a>
		flash->write_buffer_size = bytes_remaining;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	unlock_flash(flash);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fab3 	bl	8007d1e <unlock_flash>

	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80087b8:	6879      	ldr	r1, [r7, #4]
			flash->write_buffer_size);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
	uint16_t write_failures = write_to_flash_contiguous(flash, flash->write_buffer,
 80087c0:	461a      	mov	r2, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fe8e 	bl	80084e4 <write_to_flash_contiguous>
 80087c8:	4603      	mov	r3, r0
 80087ca:	817b      	strh	r3, [r7, #10]
	flash->write_buffer_size = 0;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	lock_flash(flash);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff faba 	bl	8007d4e <lock_flash>

	return write_failures;
 80087da:	897b      	ldrh	r3, [r7, #10]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <reset_flash_read_pointer>:

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af02      	add	r7, sp, #8
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008810:	b29b      	uxth	r3, r3
 8008812:	2200      	movs	r2, #0
 8008814:	9200      	str	r2, [sp, #0]
 8008816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fc38 	bl	8008092 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fbbf 	bl	8007fb4 <get_ECC_status>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fa67 	bl	8007d1e <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8008850:	2300      	movs	r3, #0
 8008852:	81bb      	strh	r3, [r7, #12]
 8008854:	e011      	b.n	800887a <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 8008856:	89bb      	ldrh	r3, [r7, #12]
 8008858:	019b      	lsls	r3, r3, #6
 800885a:	b29b      	uxth	r3, r3
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fb78 	bl	8007f54 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <erase_flash+0x36>
			erase_failures++;
 800886e:	89fb      	ldrh	r3, [r7, #14]
 8008870:	3301      	adds	r3, #1
 8008872:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8008874:	89bb      	ldrh	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	81bb      	strh	r3, [r7, #12]
 800887a:	89bb      	ldrh	r3, [r7, #12]
 800887c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008880:	4293      	cmp	r3, r2
 8008882:	d9e8      	bls.n	8008856 <erase_flash+0x18>
	}

	lock_flash(flash);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff fa62 	bl	8007d4e <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fc79 	bl	8008182 <find_write_ptr>
	flash->write_buffer_size = 0;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 8008898:	89fb      	ldrh	r3, [r7, #14]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80088b0:	02db      	lsls	r3, r3, #11
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 80088b8:	4413      	add	r3, r2
 80088ba:	f1c3 63ff 	rsb	r3, r3, #133693440	; 0x7f80000
 80088be:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
			- flash->write_buffer_size;
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 80088c8:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <write_reserved_flash_page>:

uint8_t write_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* data, uint16_t data_sz) {
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b086      	sub	sp, #24
 80088da:	af02      	add	r7, sp, #8
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	461a      	mov	r2, r3
 80088e2:	460b      	mov	r3, r1
 80088e4:	72fb      	strb	r3, [r7, #11]
 80088e6:	4613      	mov	r3, r2
 80088e8:	813b      	strh	r3, [r7, #8]
	// Write to the nth page of the last block of flash
	unlock_flash(flash);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff fa17 	bl	8007d1e <unlock_flash>
	write_bytes_to_page(flash, data, data_sz,
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	3b40      	subs	r3, #64	; 0x40
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	893a      	ldrh	r2, [r7, #8]
 80088fa:	2100      	movs	r1, #0
 80088fc:	9100      	str	r1, [sp, #0]
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff fbe3 	bl	80080cc <write_bytes_to_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
	lock_flash(flash);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fa21 	bl	8007d4e <lock_flash>

	return flash->last_write_failure_status;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <read_reserved_flash_page>:

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af02      	add	r7, sp, #8
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	461a      	mov	r2, r3
 8008926:	460b      	mov	r3, r1
 8008928:	72fb      	strb	r3, [r7, #11]
 800892a:	4613      	mov	r3, r2
 800892c:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b40      	subs	r3, #64	; 0x40
 8008934:	b29b      	uxth	r3, r3
 8008936:	893a      	ldrh	r2, [r7, #8]
 8008938:	2100      	movs	r1, #0
 800893a:	9100      	str	r1, [sp, #0]
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff fba7 	bl	8008092 <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <erase_reserved_flash_pages>:

uint8_t erase_reserved_flash_pages(W25N01GV_Flash *flash) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	// Erase the last block only
	unlock_flash(flash);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff f9e2 	bl	8007d1e <unlock_flash>
	erase_block(flash, W25N01GV_PAGES_PER_BLOCK * (W25N01GV_NUM_BLOCKS - 1));
 800895a:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff faf8 	bl	8007f54 <erase_block>
	lock_flash(flash);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff f9f2 	bl	8007d4e <lock_flash>
	return flash->last_erase_failure_status;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8008978:	b580      	push	{r7, lr}
 800897a:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800897e:	af00      	add	r7, sp, #0
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	3304      	adds	r3, #4
 800898e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f003 fa1f 	bl	800bdd8 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 800899a:	f107 0108 	add.w	r1, r7, #8
 800899e:	1d3b      	adds	r3, r7, #4
 80089a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f7ff fe0c 	bl	80085c2 <write_to_flash>
}
 80089aa:	bf00      	nop
 80089ac:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089b8:	4b0e      	ldr	r3, [pc, #56]	; (80089f4 <HAL_Init+0x40>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0d      	ldr	r2, [pc, #52]	; (80089f4 <HAL_Init+0x40>)
 80089be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089c4:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <HAL_Init+0x40>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <HAL_Init+0x40>)
 80089ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <HAL_Init+0x40>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <HAL_Init+0x40>)
 80089d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089dc:	2003      	movs	r0, #3
 80089de:	f000 f92b 	bl	8008c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089e2:	2000      	movs	r0, #0
 80089e4:	f000 f808 	bl	80089f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089e8:	f7fc fe7c 	bl	80056e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	40023c00 	.word	0x40023c00

080089f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a00:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <HAL_InitTick+0x54>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <HAL_InitTick+0x58>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f943 	bl	8008ca2 <HAL_SYSTICK_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e00e      	b.n	8008a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b0f      	cmp	r3, #15
 8008a2a:	d80a      	bhi.n	8008a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	f000 f90b 	bl	8008c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a38:	4a06      	ldr	r2, [pc, #24]	; (8008a54 <HAL_InitTick+0x5c>)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e000      	b.n	8008a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000194 	.word	0x20000194
 8008a50:	20000220 	.word	0x20000220
 8008a54:	2000021c 	.word	0x2000021c

08008a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <HAL_IncTick+0x20>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <HAL_IncTick+0x24>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4413      	add	r3, r2
 8008a68:	4a04      	ldr	r2, [pc, #16]	; (8008a7c <HAL_IncTick+0x24>)
 8008a6a:	6013      	str	r3, [r2, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	20000220 	.word	0x20000220
 8008a7c:	20002404 	.word	0x20002404

08008a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  return uwTick;
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <HAL_GetTick+0x14>)
 8008a86:	681b      	ldr	r3, [r3, #0]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20002404 	.word	0x20002404

08008a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa8:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <__NVIC_SetPriorityGrouping+0x44>)
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008aca:	4a04      	ldr	r2, [pc, #16]	; (8008adc <__NVIC_SetPriorityGrouping+0x44>)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	60d3      	str	r3, [r2, #12]
}
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	e000ed00 	.word	0xe000ed00

08008ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	f003 0307 	and.w	r3, r3, #7
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	db0b      	blt.n	8008b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	f003 021f 	and.w	r2, r3, #31
 8008b14:	4907      	ldr	r1, [pc, #28]	; (8008b34 <__NVIC_EnableIRQ+0x38>)
 8008b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8008b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	e000e100 	.word	0xe000e100

08008b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db0a      	blt.n	8008b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	490c      	ldr	r1, [pc, #48]	; (8008b84 <__NVIC_SetPriority+0x4c>)
 8008b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b56:	0112      	lsls	r2, r2, #4
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b60:	e00a      	b.n	8008b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	4908      	ldr	r1, [pc, #32]	; (8008b88 <__NVIC_SetPriority+0x50>)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	3b04      	subs	r3, #4
 8008b70:	0112      	lsls	r2, r2, #4
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	440b      	add	r3, r1
 8008b76:	761a      	strb	r2, [r3, #24]
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	e000e100 	.word	0xe000e100
 8008b88:	e000ed00 	.word	0xe000ed00

08008b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b089      	sub	sp, #36	; 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f1c3 0307 	rsb	r3, r3, #7
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	bf28      	it	cs
 8008baa:	2304      	movcs	r3, #4
 8008bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d902      	bls.n	8008bbc <NVIC_EncodePriority+0x30>
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3b03      	subs	r3, #3
 8008bba:	e000      	b.n	8008bbe <NVIC_EncodePriority+0x32>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43da      	mvns	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	401a      	ands	r2, r3
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	fa01 f303 	lsl.w	r3, r1, r3
 8008bde:	43d9      	mvns	r1, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008be4:	4313      	orrs	r3, r2
         );
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3724      	adds	r7, #36	; 0x24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
	...

08008bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c04:	d301      	bcc.n	8008c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c06:	2301      	movs	r3, #1
 8008c08:	e00f      	b.n	8008c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	; (8008c34 <SysTick_Config+0x40>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c12:	210f      	movs	r1, #15
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	f7ff ff8e 	bl	8008b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <SysTick_Config+0x40>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c22:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <SysTick_Config+0x40>)
 8008c24:	2207      	movs	r2, #7
 8008c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	e000e010 	.word	0xe000e010

08008c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ff29 	bl	8008a98 <__NVIC_SetPriorityGrouping>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	4603      	mov	r3, r0
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c60:	f7ff ff3e 	bl	8008ae0 <__NVIC_GetPriorityGrouping>
 8008c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff ff8e 	bl	8008b8c <NVIC_EncodePriority>
 8008c70:	4602      	mov	r2, r0
 8008c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff ff5d 	bl	8008b38 <__NVIC_SetPriority>
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff ff31 	bl	8008afc <__NVIC_EnableIRQ>
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff ffa2 	bl	8008bf4 <SysTick_Config>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008cc8:	f7ff feda 	bl	8008a80 <HAL_GetTick>
 8008ccc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d008      	beq.n	8008cec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2280      	movs	r2, #128	; 0x80
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e052      	b.n	8008d92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0216 	bic.w	r2, r2, #22
 8008cfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <HAL_DMA_Abort+0x62>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d007      	beq.n	8008d2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0208 	bic.w	r2, r2, #8
 8008d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0201 	bic.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d3c:	e013      	b.n	8008d66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d3e:	f7ff fe9f 	bl	8008a80 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d90c      	bls.n	8008d66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e015      	b.n	8008d92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e4      	bne.n	8008d3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	223f      	movs	r2, #63	; 0x3f
 8008d7a:	409a      	lsls	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d004      	beq.n	8008db8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2280      	movs	r2, #128	; 0x80
 8008db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e00c      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2205      	movs	r2, #5
 8008dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b089      	sub	sp, #36	; 0x24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e165      	b.n	80090c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	f040 8154 	bne.w	80090c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d005      	beq.n	8008e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d130      	bne.n	8008e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	43db      	mvns	r3, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	4013      	ands	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	fa02 f303 	lsl.w	r3, r2, r3
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008e68:	2201      	movs	r2, #1
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e70:	43db      	mvns	r3, r3
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	4013      	ands	r3, r2
 8008e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	f003 0201 	and.w	r2, r3, #1
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f003 0303 	and.w	r3, r3, #3
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d017      	beq.n	8008ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	2203      	movs	r2, #3
 8008eac:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d123      	bne.n	8008f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	08da      	lsrs	r2, r3, #3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3208      	adds	r2, #8
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	220f      	movs	r2, #15
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	08da      	lsrs	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3208      	adds	r2, #8
 8008f1e:	69b9      	ldr	r1, [r7, #24]
 8008f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	2203      	movs	r2, #3
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f003 0203 	and.w	r2, r3, #3
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 80ae 	beq.w	80090c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	4b5d      	ldr	r3, [pc, #372]	; (80090e0 <HAL_GPIO_Init+0x300>)
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6e:	4a5c      	ldr	r2, [pc, #368]	; (80090e0 <HAL_GPIO_Init+0x300>)
 8008f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f74:	6453      	str	r3, [r2, #68]	; 0x44
 8008f76:	4b5a      	ldr	r3, [pc, #360]	; (80090e0 <HAL_GPIO_Init+0x300>)
 8008f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f82:	4a58      	ldr	r2, [pc, #352]	; (80090e4 <HAL_GPIO_Init+0x304>)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	089b      	lsrs	r3, r3, #2
 8008f88:	3302      	adds	r3, #2
 8008f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	220f      	movs	r2, #15
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a4f      	ldr	r2, [pc, #316]	; (80090e8 <HAL_GPIO_Init+0x308>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d025      	beq.n	8008ffa <HAL_GPIO_Init+0x21a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a4e      	ldr	r2, [pc, #312]	; (80090ec <HAL_GPIO_Init+0x30c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01f      	beq.n	8008ff6 <HAL_GPIO_Init+0x216>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a4d      	ldr	r2, [pc, #308]	; (80090f0 <HAL_GPIO_Init+0x310>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d019      	beq.n	8008ff2 <HAL_GPIO_Init+0x212>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a4c      	ldr	r2, [pc, #304]	; (80090f4 <HAL_GPIO_Init+0x314>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_GPIO_Init+0x20e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a4b      	ldr	r2, [pc, #300]	; (80090f8 <HAL_GPIO_Init+0x318>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00d      	beq.n	8008fea <HAL_GPIO_Init+0x20a>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a4a      	ldr	r2, [pc, #296]	; (80090fc <HAL_GPIO_Init+0x31c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d007      	beq.n	8008fe6 <HAL_GPIO_Init+0x206>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a49      	ldr	r2, [pc, #292]	; (8009100 <HAL_GPIO_Init+0x320>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d101      	bne.n	8008fe2 <HAL_GPIO_Init+0x202>
 8008fde:	2306      	movs	r3, #6
 8008fe0:	e00c      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008fe2:	2307      	movs	r3, #7
 8008fe4:	e00a      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008fe6:	2305      	movs	r3, #5
 8008fe8:	e008      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008fea:	2304      	movs	r3, #4
 8008fec:	e006      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e004      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e002      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <HAL_GPIO_Init+0x21c>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	f002 0203 	and.w	r2, r2, #3
 8009002:	0092      	lsls	r2, r2, #2
 8009004:	4093      	lsls	r3, r2
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	4313      	orrs	r3, r2
 800900a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800900c:	4935      	ldr	r1, [pc, #212]	; (80090e4 <HAL_GPIO_Init+0x304>)
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	089b      	lsrs	r3, r3, #2
 8009012:	3302      	adds	r3, #2
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800901a:	4b3a      	ldr	r3, [pc, #232]	; (8009104 <HAL_GPIO_Init+0x324>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	43db      	mvns	r3, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4013      	ands	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	4313      	orrs	r3, r2
 800903c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800903e:	4a31      	ldr	r2, [pc, #196]	; (8009104 <HAL_GPIO_Init+0x324>)
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009044:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <HAL_GPIO_Init+0x324>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	43db      	mvns	r3, r3
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	4013      	ands	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009068:	4a26      	ldr	r2, [pc, #152]	; (8009104 <HAL_GPIO_Init+0x324>)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800906e:	4b25      	ldr	r3, [pc, #148]	; (8009104 <HAL_GPIO_Init+0x324>)
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	43db      	mvns	r3, r3
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	4013      	ands	r3, r2
 800907c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009092:	4a1c      	ldr	r2, [pc, #112]	; (8009104 <HAL_GPIO_Init+0x324>)
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009098:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <HAL_GPIO_Init+0x324>)
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4013      	ands	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80090bc:	4a11      	ldr	r2, [pc, #68]	; (8009104 <HAL_GPIO_Init+0x324>)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3301      	adds	r3, #1
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	f67f ae96 	bls.w	8008dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	3724      	adds	r7, #36	; 0x24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	40023800 	.word	0x40023800
 80090e4:	40013800 	.word	0x40013800
 80090e8:	40020000 	.word	0x40020000
 80090ec:	40020400 	.word	0x40020400
 80090f0:	40020800 	.word	0x40020800
 80090f4:	40020c00 	.word	0x40020c00
 80090f8:	40021000 	.word	0x40021000
 80090fc:	40021400 	.word	0x40021400
 8009100:	40021800 	.word	0x40021800
 8009104:	40013c00 	.word	0x40013c00

08009108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	807b      	strh	r3, [r7, #2]
 8009114:	4613      	mov	r3, r2
 8009116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009118:	787b      	ldrb	r3, [r7, #1]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800911e:	887a      	ldrh	r2, [r7, #2]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009124:	e003      	b.n	800912e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009126:	887b      	ldrh	r3, [r7, #2]
 8009128:	041a      	lsls	r2, r3, #16
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	619a      	str	r2, [r3, #24]
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800914c:	887a      	ldrh	r2, [r7, #2]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4013      	ands	r3, r2
 8009152:	041a      	lsls	r2, r3, #16
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	43d9      	mvns	r1, r3
 8009158:	887b      	ldrh	r3, [r7, #2]
 800915a:	400b      	ands	r3, r1
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	619a      	str	r2, [r3, #24]
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e0cc      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009184:	4b68      	ldr	r3, [pc, #416]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d90c      	bls.n	80091ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009192:	4b65      	ldr	r3, [pc, #404]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800919a:	4b63      	ldr	r3, [pc, #396]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d001      	beq.n	80091ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0b8      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d020      	beq.n	80091fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c4:	4b59      	ldr	r3, [pc, #356]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	4a58      	ldr	r2, [pc, #352]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091dc:	4b53      	ldr	r3, [pc, #332]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	4a52      	ldr	r2, [pc, #328]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e8:	4b50      	ldr	r3, [pc, #320]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	494d      	ldr	r1, [pc, #308]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d044      	beq.n	8009290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d107      	bne.n	800921e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920e:	4b47      	ldr	r3, [pc, #284]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d119      	bne.n	800924e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e07f      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d003      	beq.n	800922e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800922a:	2b03      	cmp	r3, #3
 800922c:	d107      	bne.n	800923e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800922e:	4b3f      	ldr	r3, [pc, #252]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e06f      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800923e:	4b3b      	ldr	r3, [pc, #236]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0302 	and.w	r3, r3, #2
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e067      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800924e:	4b37      	ldr	r3, [pc, #220]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f023 0203 	bic.w	r2, r3, #3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	4934      	ldr	r1, [pc, #208]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 800925c:	4313      	orrs	r3, r2
 800925e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009260:	f7ff fc0e 	bl	8008a80 <HAL_GetTick>
 8009264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009266:	e00a      	b.n	800927e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009268:	f7ff fc0a 	bl	8008a80 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	f241 3288 	movw	r2, #5000	; 0x1388
 8009276:	4293      	cmp	r3, r2
 8009278:	d901      	bls.n	800927e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e04f      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927e:	4b2b      	ldr	r3, [pc, #172]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 020c 	and.w	r2, r3, #12
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	429a      	cmp	r2, r3
 800928e:	d1eb      	bne.n	8009268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009290:	4b25      	ldr	r3, [pc, #148]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d20c      	bcs.n	80092b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800929e:	4b22      	ldr	r3, [pc, #136]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a6:	4b20      	ldr	r3, [pc, #128]	; (8009328 <HAL_RCC_ClockConfig+0x1b8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d001      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e032      	b.n	800931e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d008      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	4916      	ldr	r1, [pc, #88]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	490e      	ldr	r1, [pc, #56]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092f6:	f000 f855 	bl	80093a4 <HAL_RCC_GetSysClockFreq>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4b0b      	ldr	r3, [pc, #44]	; (800932c <HAL_RCC_ClockConfig+0x1bc>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	091b      	lsrs	r3, r3, #4
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	490a      	ldr	r1, [pc, #40]	; (8009330 <HAL_RCC_ClockConfig+0x1c0>)
 8009308:	5ccb      	ldrb	r3, [r1, r3]
 800930a:	fa22 f303 	lsr.w	r3, r2, r3
 800930e:	4a09      	ldr	r2, [pc, #36]	; (8009334 <HAL_RCC_ClockConfig+0x1c4>)
 8009310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <HAL_RCC_ClockConfig+0x1c8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fb6e 	bl	80089f8 <HAL_InitTick>

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	40023c00 	.word	0x40023c00
 800932c:	40023800 	.word	0x40023800
 8009330:	0800cee0 	.word	0x0800cee0
 8009334:	20000194 	.word	0x20000194
 8009338:	2000021c 	.word	0x2000021c

0800933c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009340:	4b03      	ldr	r3, [pc, #12]	; (8009350 <HAL_RCC_GetHCLKFreq+0x14>)
 8009342:	681b      	ldr	r3, [r3, #0]
}
 8009344:	4618      	mov	r0, r3
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000194 	.word	0x20000194

08009354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009358:	f7ff fff0 	bl	800933c <HAL_RCC_GetHCLKFreq>
 800935c:	4602      	mov	r2, r0
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	0a9b      	lsrs	r3, r3, #10
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	4903      	ldr	r1, [pc, #12]	; (8009378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800936a:	5ccb      	ldrb	r3, [r1, r3]
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009370:	4618      	mov	r0, r3
 8009372:	bd80      	pop	{r7, pc}
 8009374:	40023800 	.word	0x40023800
 8009378:	0800cef0 	.word	0x0800cef0

0800937c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009380:	f7ff ffdc 	bl	800933c <HAL_RCC_GetHCLKFreq>
 8009384:	4602      	mov	r2, r0
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	0b5b      	lsrs	r3, r3, #13
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	4903      	ldr	r1, [pc, #12]	; (80093a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009392:	5ccb      	ldrb	r3, [r1, r3]
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009398:	4618      	mov	r0, r3
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	0800cef0 	.word	0x0800cef0

080093a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093a8:	b087      	sub	sp, #28
 80093aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80093ac:	2600      	movs	r6, #0
 80093ae:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80093b0:	2600      	movs	r6, #0
 80093b2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80093b4:	2600      	movs	r6, #0
 80093b6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80093b8:	2600      	movs	r6, #0
 80093ba:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80093bc:	2600      	movs	r6, #0
 80093be:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093c0:	4ea3      	ldr	r6, [pc, #652]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80093c2:	68b6      	ldr	r6, [r6, #8]
 80093c4:	f006 060c 	and.w	r6, r6, #12
 80093c8:	2e0c      	cmp	r6, #12
 80093ca:	f200 8137 	bhi.w	800963c <HAL_RCC_GetSysClockFreq+0x298>
 80093ce:	f20f 0c08 	addw	ip, pc, #8
 80093d2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	0800940d 	.word	0x0800940d
 80093dc:	0800963d 	.word	0x0800963d
 80093e0:	0800963d 	.word	0x0800963d
 80093e4:	0800963d 	.word	0x0800963d
 80093e8:	08009413 	.word	0x08009413
 80093ec:	0800963d 	.word	0x0800963d
 80093f0:	0800963d 	.word	0x0800963d
 80093f4:	0800963d 	.word	0x0800963d
 80093f8:	08009419 	.word	0x08009419
 80093fc:	0800963d 	.word	0x0800963d
 8009400:	0800963d 	.word	0x0800963d
 8009404:	0800963d 	.word	0x0800963d
 8009408:	0800952f 	.word	0x0800952f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800940c:	4b91      	ldr	r3, [pc, #580]	; (8009654 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800940e:	613b      	str	r3, [r7, #16]
       break;
 8009410:	e117      	b.n	8009642 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009412:	4b91      	ldr	r3, [pc, #580]	; (8009658 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8009414:	613b      	str	r3, [r7, #16]
      break;
 8009416:	e114      	b.n	8009642 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009418:	4b8d      	ldr	r3, [pc, #564]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009420:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009422:	4b8b      	ldr	r3, [pc, #556]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d024      	beq.n	8009478 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800942e:	4b88      	ldr	r3, [pc, #544]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	099b      	lsrs	r3, r3, #6
 8009434:	461a      	mov	r2, r3
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800943e:	f04f 0500 	mov.w	r5, #0
 8009442:	ea02 0004 	and.w	r0, r2, r4
 8009446:	ea03 0105 	and.w	r1, r3, r5
 800944a:	4b83      	ldr	r3, [pc, #524]	; (8009658 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800944c:	fb03 f201 	mul.w	r2, r3, r1
 8009450:	2300      	movs	r3, #0
 8009452:	fb03 f300 	mul.w	r3, r3, r0
 8009456:	4413      	add	r3, r2
 8009458:	4a7f      	ldr	r2, [pc, #508]	; (8009658 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800945a:	fba0 0102 	umull	r0, r1, r0, r2
 800945e:	440b      	add	r3, r1
 8009460:	4619      	mov	r1, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	461a      	mov	r2, r3
 8009466:	f04f 0300 	mov.w	r3, #0
 800946a:	f7f7 fba9 	bl	8000bc0 <__aeabi_uldivmod>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4613      	mov	r3, r2
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	e04c      	b.n	8009512 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009478:	4b75      	ldr	r3, [pc, #468]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	099b      	lsrs	r3, r3, #6
 800947e:	461a      	mov	r2, r3
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009488:	f04f 0100 	mov.w	r1, #0
 800948c:	ea02 0800 	and.w	r8, r2, r0
 8009490:	ea03 0901 	and.w	r9, r3, r1
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	014b      	lsls	r3, r1, #5
 80094a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80094a6:	0142      	lsls	r2, r0, #5
 80094a8:	4610      	mov	r0, r2
 80094aa:	4619      	mov	r1, r3
 80094ac:	ebb0 0008 	subs.w	r0, r0, r8
 80094b0:	eb61 0109 	sbc.w	r1, r1, r9
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	018b      	lsls	r3, r1, #6
 80094be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80094c2:	0182      	lsls	r2, r0, #6
 80094c4:	1a12      	subs	r2, r2, r0
 80094c6:	eb63 0301 	sbc.w	r3, r3, r1
 80094ca:	f04f 0000 	mov.w	r0, #0
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	00d9      	lsls	r1, r3, #3
 80094d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094d8:	00d0      	lsls	r0, r2, #3
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	eb12 0208 	adds.w	r2, r2, r8
 80094e2:	eb43 0309 	adc.w	r3, r3, r9
 80094e6:	f04f 0000 	mov.w	r0, #0
 80094ea:	f04f 0100 	mov.w	r1, #0
 80094ee:	0299      	lsls	r1, r3, #10
 80094f0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80094f4:	0290      	lsls	r0, r2, #10
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4610      	mov	r0, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	461a      	mov	r2, r3
 8009502:	f04f 0300 	mov.w	r3, #0
 8009506:	f7f7 fb5b 	bl	8000bc0 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4613      	mov	r3, r2
 8009510:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009512:	4b4f      	ldr	r3, [pc, #316]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	0c1b      	lsrs	r3, r3, #16
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	3301      	adds	r3, #1
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	613b      	str	r3, [r7, #16]
      break;
 800952c:	e089      	b.n	8009642 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800952e:	4948      	ldr	r1, [pc, #288]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009530:	6849      	ldr	r1, [r1, #4]
 8009532:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009536:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009538:	4945      	ldr	r1, [pc, #276]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800953a:	6849      	ldr	r1, [r1, #4]
 800953c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009540:	2900      	cmp	r1, #0
 8009542:	d024      	beq.n	800958e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009544:	4942      	ldr	r1, [pc, #264]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009546:	6849      	ldr	r1, [r1, #4]
 8009548:	0989      	lsrs	r1, r1, #6
 800954a:	4608      	mov	r0, r1
 800954c:	f04f 0100 	mov.w	r1, #0
 8009550:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009554:	f04f 0500 	mov.w	r5, #0
 8009558:	ea00 0204 	and.w	r2, r0, r4
 800955c:	ea01 0305 	and.w	r3, r1, r5
 8009560:	493d      	ldr	r1, [pc, #244]	; (8009658 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8009562:	fb01 f003 	mul.w	r0, r1, r3
 8009566:	2100      	movs	r1, #0
 8009568:	fb01 f102 	mul.w	r1, r1, r2
 800956c:	1844      	adds	r4, r0, r1
 800956e:	493a      	ldr	r1, [pc, #232]	; (8009658 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8009570:	fba2 0101 	umull	r0, r1, r2, r1
 8009574:	1863      	adds	r3, r4, r1
 8009576:	4619      	mov	r1, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	461a      	mov	r2, r3
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	f7f7 fb1e 	bl	8000bc0 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4613      	mov	r3, r2
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e04a      	b.n	8009624 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800958e:	4b30      	ldr	r3, [pc, #192]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	099b      	lsrs	r3, r3, #6
 8009594:	461a      	mov	r2, r3
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800959e:	f04f 0100 	mov.w	r1, #0
 80095a2:	ea02 0400 	and.w	r4, r2, r0
 80095a6:	ea03 0501 	and.w	r5, r3, r1
 80095aa:	4620      	mov	r0, r4
 80095ac:	4629      	mov	r1, r5
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	014b      	lsls	r3, r1, #5
 80095b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80095bc:	0142      	lsls	r2, r0, #5
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	1b00      	subs	r0, r0, r4
 80095c4:	eb61 0105 	sbc.w	r1, r1, r5
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	018b      	lsls	r3, r1, #6
 80095d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80095d6:	0182      	lsls	r2, r0, #6
 80095d8:	1a12      	subs	r2, r2, r0
 80095da:	eb63 0301 	sbc.w	r3, r3, r1
 80095de:	f04f 0000 	mov.w	r0, #0
 80095e2:	f04f 0100 	mov.w	r1, #0
 80095e6:	00d9      	lsls	r1, r3, #3
 80095e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095ec:	00d0      	lsls	r0, r2, #3
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	1912      	adds	r2, r2, r4
 80095f4:	eb45 0303 	adc.w	r3, r5, r3
 80095f8:	f04f 0000 	mov.w	r0, #0
 80095fc:	f04f 0100 	mov.w	r1, #0
 8009600:	0299      	lsls	r1, r3, #10
 8009602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009606:	0290      	lsls	r0, r2, #10
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4610      	mov	r0, r2
 800960e:	4619      	mov	r1, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	461a      	mov	r2, r3
 8009614:	f04f 0300 	mov.w	r3, #0
 8009618:	f7f7 fad2 	bl	8000bc0 <__aeabi_uldivmod>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4613      	mov	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009624:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	0f1b      	lsrs	r3, r3, #28
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	fbb2 f3f3 	udiv	r3, r2, r3
 8009638:	613b      	str	r3, [r7, #16]
      break;
 800963a:	e002      	b.n	8009642 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800963e:	613b      	str	r3, [r7, #16]
      break;
 8009640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009642:	693b      	ldr	r3, [r7, #16]
}
 8009644:	4618      	mov	r0, r3
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800964e:	bf00      	nop
 8009650:	40023800 	.word	0x40023800
 8009654:	00f42400 	.word	0x00f42400
 8009658:	017d7840 	.word	0x017d7840

0800965c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e28d      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8083 	beq.w	8009782 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800967c:	4b94      	ldr	r3, [pc, #592]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f003 030c 	and.w	r3, r3, #12
 8009684:	2b04      	cmp	r3, #4
 8009686:	d019      	beq.n	80096bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009688:	4b91      	ldr	r3, [pc, #580]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009690:	2b08      	cmp	r3, #8
 8009692:	d106      	bne.n	80096a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009694:	4b8e      	ldr	r3, [pc, #568]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800969c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096a0:	d00c      	beq.n	80096bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096a2:	4b8b      	ldr	r3, [pc, #556]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80096aa:	2b0c      	cmp	r3, #12
 80096ac:	d112      	bne.n	80096d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096ae:	4b88      	ldr	r3, [pc, #544]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ba:	d10b      	bne.n	80096d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096bc:	4b84      	ldr	r3, [pc, #528]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05b      	beq.n	8009780 <HAL_RCC_OscConfig+0x124>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d157      	bne.n	8009780 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e25a      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096dc:	d106      	bne.n	80096ec <HAL_RCC_OscConfig+0x90>
 80096de:	4b7c      	ldr	r3, [pc, #496]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a7b      	ldr	r2, [pc, #492]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e01d      	b.n	8009728 <HAL_RCC_OscConfig+0xcc>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f4:	d10c      	bne.n	8009710 <HAL_RCC_OscConfig+0xb4>
 80096f6:	4b76      	ldr	r3, [pc, #472]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a75      	ldr	r2, [pc, #468]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80096fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	4b73      	ldr	r3, [pc, #460]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a72      	ldr	r2, [pc, #456]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e00b      	b.n	8009728 <HAL_RCC_OscConfig+0xcc>
 8009710:	4b6f      	ldr	r3, [pc, #444]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a6e      	ldr	r2, [pc, #440]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	4b6c      	ldr	r3, [pc, #432]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a6b      	ldr	r2, [pc, #428]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d013      	beq.n	8009758 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009730:	f7ff f9a6 	bl	8008a80 <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009738:	f7ff f9a2 	bl	8008a80 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b64      	cmp	r3, #100	; 0x64
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e21f      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800974a:	4b61      	ldr	r3, [pc, #388]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <HAL_RCC_OscConfig+0xdc>
 8009756:	e014      	b.n	8009782 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009758:	f7ff f992 	bl	8008a80 <HAL_GetTick>
 800975c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800975e:	e008      	b.n	8009772 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009760:	f7ff f98e 	bl	8008a80 <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b64      	cmp	r3, #100	; 0x64
 800976c:	d901      	bls.n	8009772 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e20b      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009772:	4b57      	ldr	r3, [pc, #348]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1f0      	bne.n	8009760 <HAL_RCC_OscConfig+0x104>
 800977e:	e000      	b.n	8009782 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d06f      	beq.n	800986e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800978e:	4b50      	ldr	r3, [pc, #320]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800979a:	4b4d      	ldr	r3, [pc, #308]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d105      	bne.n	80097b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80097a6:	4b4a      	ldr	r3, [pc, #296]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097b2:	4b47      	ldr	r3, [pc, #284]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80097ba:	2b0c      	cmp	r3, #12
 80097bc:	d11c      	bne.n	80097f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097be:	4b44      	ldr	r3, [pc, #272]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d116      	bne.n	80097f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ca:	4b41      	ldr	r3, [pc, #260]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <HAL_RCC_OscConfig+0x186>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d001      	beq.n	80097e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e1d3      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e2:	4b3b      	ldr	r3, [pc, #236]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4937      	ldr	r1, [pc, #220]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097f6:	e03a      	b.n	800986e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d020      	beq.n	8009842 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009800:	4b34      	ldr	r3, [pc, #208]	; (80098d4 <HAL_RCC_OscConfig+0x278>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009806:	f7ff f93b 	bl	8008a80 <HAL_GetTick>
 800980a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800980c:	e008      	b.n	8009820 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800980e:	f7ff f937 	bl	8008a80 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d901      	bls.n	8009820 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e1b4      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009820:	4b2b      	ldr	r3, [pc, #172]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0f0      	beq.n	800980e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800982c:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	4925      	ldr	r1, [pc, #148]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 800983c:	4313      	orrs	r3, r2
 800983e:	600b      	str	r3, [r1, #0]
 8009840:	e015      	b.n	800986e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009842:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <HAL_RCC_OscConfig+0x278>)
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009848:	f7ff f91a 	bl	8008a80 <HAL_GetTick>
 800984c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009850:	f7ff f916 	bl	8008a80 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e193      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009862:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d036      	beq.n	80098e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <HAL_RCC_OscConfig+0x27c>)
 8009884:	2201      	movs	r2, #1
 8009886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009888:	f7ff f8fa 	bl	8008a80 <HAL_GetTick>
 800988c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800988e:	e008      	b.n	80098a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009890:	f7ff f8f6 	bl	8008a80 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e173      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <HAL_RCC_OscConfig+0x274>)
 80098a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0f0      	beq.n	8009890 <HAL_RCC_OscConfig+0x234>
 80098ae:	e01b      	b.n	80098e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <HAL_RCC_OscConfig+0x27c>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098b6:	f7ff f8e3 	bl	8008a80 <HAL_GetTick>
 80098ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098bc:	e00e      	b.n	80098dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098be:	f7ff f8df 	bl	8008a80 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d907      	bls.n	80098dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e15c      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
 80098d0:	40023800 	.word	0x40023800
 80098d4:	42470000 	.word	0x42470000
 80098d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098dc:	4b8a      	ldr	r3, [pc, #552]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80098de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1ea      	bne.n	80098be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 8097 	beq.w	8009a24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098fa:	4b83      	ldr	r3, [pc, #524]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10f      	bne.n	8009926 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009906:	2300      	movs	r3, #0
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	4b7f      	ldr	r3, [pc, #508]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	4a7e      	ldr	r2, [pc, #504]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009914:	6413      	str	r3, [r2, #64]	; 0x40
 8009916:	4b7c      	ldr	r3, [pc, #496]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800991e:	60bb      	str	r3, [r7, #8]
 8009920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009922:	2301      	movs	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009926:	4b79      	ldr	r3, [pc, #484]	; (8009b0c <HAL_RCC_OscConfig+0x4b0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992e:	2b00      	cmp	r3, #0
 8009930:	d118      	bne.n	8009964 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009932:	4b76      	ldr	r3, [pc, #472]	; (8009b0c <HAL_RCC_OscConfig+0x4b0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a75      	ldr	r2, [pc, #468]	; (8009b0c <HAL_RCC_OscConfig+0x4b0>)
 8009938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800993e:	f7ff f89f 	bl	8008a80 <HAL_GetTick>
 8009942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009944:	e008      	b.n	8009958 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009946:	f7ff f89b 	bl	8008a80 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d901      	bls.n	8009958 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e118      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009958:	4b6c      	ldr	r3, [pc, #432]	; (8009b0c <HAL_RCC_OscConfig+0x4b0>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0f0      	beq.n	8009946 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d106      	bne.n	800997a <HAL_RCC_OscConfig+0x31e>
 800996c:	4b66      	ldr	r3, [pc, #408]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 800996e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009970:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009972:	f043 0301 	orr.w	r3, r3, #1
 8009976:	6713      	str	r3, [r2, #112]	; 0x70
 8009978:	e01c      	b.n	80099b4 <HAL_RCC_OscConfig+0x358>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b05      	cmp	r3, #5
 8009980:	d10c      	bne.n	800999c <HAL_RCC_OscConfig+0x340>
 8009982:	4b61      	ldr	r3, [pc, #388]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009986:	4a60      	ldr	r2, [pc, #384]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009988:	f043 0304 	orr.w	r3, r3, #4
 800998c:	6713      	str	r3, [r2, #112]	; 0x70
 800998e:	4b5e      	ldr	r3, [pc, #376]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009992:	4a5d      	ldr	r2, [pc, #372]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009994:	f043 0301 	orr.w	r3, r3, #1
 8009998:	6713      	str	r3, [r2, #112]	; 0x70
 800999a:	e00b      	b.n	80099b4 <HAL_RCC_OscConfig+0x358>
 800999c:	4b5a      	ldr	r3, [pc, #360]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 800999e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a0:	4a59      	ldr	r2, [pc, #356]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80099a2:	f023 0301 	bic.w	r3, r3, #1
 80099a6:	6713      	str	r3, [r2, #112]	; 0x70
 80099a8:	4b57      	ldr	r3, [pc, #348]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	4a56      	ldr	r2, [pc, #344]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80099ae:	f023 0304 	bic.w	r3, r3, #4
 80099b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099bc:	f7ff f860 	bl	8008a80 <HAL_GetTick>
 80099c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c2:	e00a      	b.n	80099da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099c4:	f7ff f85c 	bl	8008a80 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e0d7      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099da:	4b4b      	ldr	r3, [pc, #300]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 80099dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0ee      	beq.n	80099c4 <HAL_RCC_OscConfig+0x368>
 80099e6:	e014      	b.n	8009a12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099e8:	f7ff f84a 	bl	8008a80 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ee:	e00a      	b.n	8009a06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099f0:	f7ff f846 	bl	8008a80 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d901      	bls.n	8009a06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e0c1      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a06:	4b40      	ldr	r3, [pc, #256]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1ee      	bne.n	80099f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d105      	bne.n	8009a24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a18:	4b3b      	ldr	r3, [pc, #236]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	4a3a      	ldr	r2, [pc, #232]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80ad 	beq.w	8009b88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a2e:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f003 030c 	and.w	r3, r3, #12
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d060      	beq.n	8009afc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d145      	bne.n	8009ace <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a42:	4b33      	ldr	r3, [pc, #204]	; (8009b10 <HAL_RCC_OscConfig+0x4b4>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a48:	f7ff f81a 	bl	8008a80 <HAL_GetTick>
 8009a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a4e:	e008      	b.n	8009a62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a50:	f7ff f816 	bl	8008a80 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e093      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a62:	4b29      	ldr	r3, [pc, #164]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1f0      	bne.n	8009a50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69da      	ldr	r2, [r3, #28]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	019b      	lsls	r3, r3, #6
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	3b01      	subs	r3, #1
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	061b      	lsls	r3, r3, #24
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a98:	071b      	lsls	r3, r3, #28
 8009a9a:	491b      	ldr	r1, [pc, #108]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009aa0:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <HAL_RCC_OscConfig+0x4b4>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa6:	f7fe ffeb 	bl	8008a80 <HAL_GetTick>
 8009aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009aae:	f7fe ffe7 	bl	8008a80 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e064      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ac0:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0f0      	beq.n	8009aae <HAL_RCC_OscConfig+0x452>
 8009acc:	e05c      	b.n	8009b88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ace:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <HAL_RCC_OscConfig+0x4b4>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad4:	f7fe ffd4 	bl	8008a80 <HAL_GetTick>
 8009ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009adc:	f7fe ffd0 	bl	8008a80 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e04d      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <HAL_RCC_OscConfig+0x4ac>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f0      	bne.n	8009adc <HAL_RCC_OscConfig+0x480>
 8009afa:	e045      	b.n	8009b88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d107      	bne.n	8009b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e040      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
 8009b08:	40023800 	.word	0x40023800
 8009b0c:	40007000 	.word	0x40007000
 8009b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b14:	4b1f      	ldr	r3, [pc, #124]	; (8009b94 <HAL_RCC_OscConfig+0x538>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d030      	beq.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d129      	bne.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d122      	bne.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b44:	4013      	ands	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d119      	bne.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	085b      	lsrs	r3, r3, #1
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d10f      	bne.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d107      	bne.n	8009b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d001      	beq.n	8009b88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	40023800 	.word	0x40023800

08009b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e07b      	b.n	8009ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d108      	bne.n	8009bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bba:	d009      	beq.n	8009bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	61da      	str	r2, [r3, #28]
 8009bc2:	e005      	b.n	8009bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fb fda2 	bl	8005734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c22:	431a      	orrs	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c40:	431a      	orrs	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c54:	ea42 0103 	orr.w	r1, r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	0c1b      	lsrs	r3, r3, #16
 8009c6e:	f003 0104 	and.w	r1, r3, #4
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	f003 0210 	and.w	r2, r3, #16
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69da      	ldr	r2, [r3, #28]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b088      	sub	sp, #32
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	603b      	str	r3, [r7, #0]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_SPI_Transmit+0x22>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e126      	b.n	8009f1a <HAL_SPI_Transmit+0x270>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cd4:	f7fe fed4 	bl	8008a80 <HAL_GetTick>
 8009cd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d002      	beq.n	8009cf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
 8009cec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cee:	e10b      	b.n	8009f08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_SPI_Transmit+0x52>
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d00:	e102      	b.n	8009f08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2203      	movs	r2, #3
 8009d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	88fa      	ldrh	r2, [r7, #6]
 8009d1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d48:	d10f      	bne.n	8009d6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b40      	cmp	r3, #64	; 0x40
 8009d76:	d007      	beq.n	8009d88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d90:	d14b      	bne.n	8009e2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <HAL_SPI_Transmit+0xf6>
 8009d9a:	8afb      	ldrh	r3, [r7, #22]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d13e      	bne.n	8009e1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da4:	881a      	ldrh	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	1c9a      	adds	r2, r3, #2
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009dc4:	e02b      	b.n	8009e1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d112      	bne.n	8009dfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	881a      	ldrh	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de4:	1c9a      	adds	r2, r3, #2
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	86da      	strh	r2, [r3, #54]	; 0x36
 8009df8:	e011      	b.n	8009e1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dfa:	f7fe fe41 	bl	8008a80 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d803      	bhi.n	8009e12 <HAL_SPI_Transmit+0x168>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d102      	bne.n	8009e18 <HAL_SPI_Transmit+0x16e>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e1c:	e074      	b.n	8009f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1ce      	bne.n	8009dc6 <HAL_SPI_Transmit+0x11c>
 8009e28:	e04c      	b.n	8009ec4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <HAL_SPI_Transmit+0x18e>
 8009e32:	8afb      	ldrh	r3, [r7, #22]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d140      	bne.n	8009eba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	7812      	ldrb	r2, [r2, #0]
 8009e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	3b01      	subs	r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009e5e:	e02c      	b.n	8009eba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d113      	bne.n	8009e96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	330c      	adds	r3, #12
 8009e78:	7812      	ldrb	r2, [r2, #0]
 8009e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e94:	e011      	b.n	8009eba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e96:	f7fe fdf3 	bl	8008a80 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d803      	bhi.n	8009eae <HAL_SPI_Transmit+0x204>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d102      	bne.n	8009eb4 <HAL_SPI_Transmit+0x20a>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009eb8:	e026      	b.n	8009f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1cd      	bne.n	8009e60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fbcb 	bl	800a664 <SPI_EndRxTxTransaction>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10a      	bne.n	8009ef8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	77fb      	strb	r3, [r7, #31]
 8009f04:	e000      	b.n	8009f08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b088      	sub	sp, #32
 8009f26:	af02      	add	r7, sp, #8
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	603b      	str	r3, [r7, #0]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f3e:	d112      	bne.n	8009f66 <HAL_SPI_Receive+0x44>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10e      	bne.n	8009f66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4613      	mov	r3, r2
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f8f1 	bl	800a144 <HAL_SPI_TransmitReceive>
 8009f62:	4603      	mov	r3, r0
 8009f64:	e0ea      	b.n	800a13c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <HAL_SPI_Receive+0x52>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e0e3      	b.n	800a13c <HAL_SPI_Receive+0x21a>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f7c:	f7fe fd80 	bl	8008a80 <HAL_GetTick>
 8009f80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d002      	beq.n	8009f94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f92:	e0ca      	b.n	800a12a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <HAL_SPI_Receive+0x7e>
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009fa4:	e0c1      	b.n	800a12a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2204      	movs	r2, #4
 8009faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	88fa      	ldrh	r2, [r7, #6]
 8009fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	88fa      	ldrh	r2, [r7, #6]
 8009fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fec:	d10f      	bne.n	800a00e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a00c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a018:	2b40      	cmp	r3, #64	; 0x40
 800a01a:	d007      	beq.n	800a02c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a02a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d162      	bne.n	800a0fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a034:	e02e      	b.n	800a094 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b01      	cmp	r3, #1
 800a042:	d115      	bne.n	800a070 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f103 020c 	add.w	r2, r3, #12
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a064:	b29b      	uxth	r3, r3
 800a066:	3b01      	subs	r3, #1
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a06e:	e011      	b.n	800a094 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a070:	f7fe fd06 	bl	8008a80 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d803      	bhi.n	800a088 <HAL_SPI_Receive+0x166>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d102      	bne.n	800a08e <HAL_SPI_Receive+0x16c>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a092:	e04a      	b.n	800a12a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1cb      	bne.n	800a036 <HAL_SPI_Receive+0x114>
 800a09e:	e031      	b.n	800a104 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d113      	bne.n	800a0d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	b292      	uxth	r2, r2
 800a0ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	1c9a      	adds	r2, r3, #2
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0d4:	e011      	b.n	800a0fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0d6:	f7fe fcd3 	bl	8008a80 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d803      	bhi.n	800a0ee <HAL_SPI_Receive+0x1cc>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d102      	bne.n	800a0f4 <HAL_SPI_Receive+0x1d2>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a0f8:	e017      	b.n	800a12a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1cd      	bne.n	800a0a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fa45 	bl	800a598 <SPI_EndRxTransaction>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2220      	movs	r2, #32
 800a118:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
 800a126:	e000      	b.n	800a12a <HAL_SPI_Receive+0x208>
  }

error :
 800a128:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08c      	sub	sp, #48	; 0x30
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a152:	2301      	movs	r3, #1
 800a154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a162:	2b01      	cmp	r3, #1
 800a164:	d101      	bne.n	800a16a <HAL_SPI_TransmitReceive+0x26>
 800a166:	2302      	movs	r3, #2
 800a168:	e18a      	b.n	800a480 <HAL_SPI_TransmitReceive+0x33c>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a172:	f7fe fc85 	bl	8008a80 <HAL_GetTick>
 800a176:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a188:	887b      	ldrh	r3, [r7, #2]
 800a18a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a18c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a190:	2b01      	cmp	r3, #1
 800a192:	d00f      	beq.n	800a1b4 <HAL_SPI_TransmitReceive+0x70>
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a19a:	d107      	bne.n	800a1ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <HAL_SPI_TransmitReceive+0x68>
 800a1a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d003      	beq.n	800a1b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1b2:	e15b      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <HAL_SPI_TransmitReceive+0x82>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <HAL_SPI_TransmitReceive+0x82>
 800a1c0:	887b      	ldrh	r3, [r7, #2]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1cc:	e14e      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d003      	beq.n	800a1e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2205      	movs	r2, #5
 800a1de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	887a      	ldrh	r2, [r7, #2]
 800a1f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	887a      	ldrh	r2, [r7, #2]
 800a1f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	887a      	ldrh	r2, [r7, #2]
 800a204:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	887a      	ldrh	r2, [r7, #2]
 800a20a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	d007      	beq.n	800a236 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a234:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23e:	d178      	bne.n	800a332 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_SPI_TransmitReceive+0x10a>
 800a248:	8b7b      	ldrh	r3, [r7, #26]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d166      	bne.n	800a31c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	881a      	ldrh	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	1c9a      	adds	r2, r3, #2
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a272:	e053      	b.n	800a31c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d11b      	bne.n	800a2ba <HAL_SPI_TransmitReceive+0x176>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <HAL_SPI_TransmitReceive+0x176>
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d113      	bne.n	800a2ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	881a      	ldrh	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	1c9a      	adds	r2, r3, #2
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d119      	bne.n	800a2fc <HAL_SPI_TransmitReceive+0x1b8>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d014      	beq.n	800a2fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	b292      	uxth	r2, r2
 800a2de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	1c9a      	adds	r2, r3, #2
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2fc:	f7fe fbc0 	bl	8008a80 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a308:	429a      	cmp	r2, r3
 800a30a:	d807      	bhi.n	800a31c <HAL_SPI_TransmitReceive+0x1d8>
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a312:	d003      	beq.n	800a31c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a31a:	e0a7      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a320:	b29b      	uxth	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1a6      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x130>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1a1      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x130>
 800a330:	e07c      	b.n	800a42c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_SPI_TransmitReceive+0x1fc>
 800a33a:	8b7b      	ldrh	r3, [r7, #26]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d16b      	bne.n	800a418 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	330c      	adds	r3, #12
 800a34a:	7812      	ldrb	r2, [r2, #0]
 800a34c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a366:	e057      	b.n	800a418 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d11c      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x26c>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x26c>
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d114      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	330c      	adds	r3, #12
 800a390:	7812      	ldrb	r2, [r2, #0]
 800a392:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d119      	bne.n	800a3f2 <HAL_SPI_TransmitReceive+0x2ae>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d014      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3f2:	f7fe fb45 	bl	8008a80 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d803      	bhi.n	800a40a <HAL_SPI_TransmitReceive+0x2c6>
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a408:	d102      	bne.n	800a410 <HAL_SPI_TransmitReceive+0x2cc>
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a416:	e029      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1a2      	bne.n	800a368 <HAL_SPI_TransmitReceive+0x224>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d19d      	bne.n	800a368 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f917 	bl	800a664 <SPI_EndRxTxTransaction>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d006      	beq.n	800a44a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2220      	movs	r2, #32
 800a446:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a448:	e010      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a452:	2300      	movs	r3, #0
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	e000      	b.n	800a46c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a46a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a47c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a480:	4618      	mov	r0, r3
 800a482:	3730      	adds	r7, #48	; 0x30
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	4613      	mov	r3, r2
 800a496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a498:	f7fe faf2 	bl	8008a80 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4a8:	f7fe faea 	bl	8008a80 <HAL_GetTick>
 800a4ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4ae:	4b39      	ldr	r3, [pc, #228]	; (800a594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	015b      	lsls	r3, r3, #5
 800a4b4:	0d1b      	lsrs	r3, r3, #20
 800a4b6:	69fa      	ldr	r2, [r7, #28]
 800a4b8:	fb02 f303 	mul.w	r3, r2, r3
 800a4bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4be:	e054      	b.n	800a56a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c6:	d050      	beq.n	800a56a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4c8:	f7fe fada 	bl	8008a80 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d902      	bls.n	800a4de <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d13d      	bne.n	800a55a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4f6:	d111      	bne.n	800a51c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a500:	d004      	beq.n	800a50c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a50a:	d107      	bne.n	800a51c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a51a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a524:	d10f      	bne.n	800a546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e017      	b.n	800a58a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	3b01      	subs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4013      	ands	r3, r2
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	461a      	mov	r2, r3
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	429a      	cmp	r2, r3
 800a586:	d19b      	bne.n	800a4c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3720      	adds	r7, #32
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000194 	.word	0x20000194

0800a598 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5ac:	d111      	bne.n	800a5d2 <SPI_EndRxTransaction+0x3a>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b6:	d004      	beq.n	800a5c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5c0:	d107      	bne.n	800a5d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5da:	d12a      	bne.n	800a632 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5e4:	d012      	beq.n	800a60c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2180      	movs	r1, #128	; 0x80
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff ff49 	bl	800a488 <SPI_WaitFlagStateUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d02d      	beq.n	800a658 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a600:	f043 0220 	orr.w	r2, r3, #32
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e026      	b.n	800a65a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	2101      	movs	r1, #1
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff ff36 	bl	800a488 <SPI_WaitFlagStateUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01a      	beq.n	800a658 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a626:	f043 0220 	orr.w	r2, r3, #32
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e013      	b.n	800a65a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2200      	movs	r2, #0
 800a63a:	2101      	movs	r1, #1
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7ff ff23 	bl	800a488 <SPI_WaitFlagStateUntilTimeout>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d007      	beq.n	800a658 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64c:	f043 0220 	orr.w	r2, r3, #32
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e000      	b.n	800a65a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a670:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <SPI_EndRxTxTransaction+0x7c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a1b      	ldr	r2, [pc, #108]	; (800a6e4 <SPI_EndRxTxTransaction+0x80>)
 800a676:	fba2 2303 	umull	r2, r3, r2, r3
 800a67a:	0d5b      	lsrs	r3, r3, #21
 800a67c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a680:	fb02 f303 	mul.w	r3, r2, r3
 800a684:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a68e:	d112      	bne.n	800a6b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fef4 	bl	800a488 <SPI_WaitFlagStateUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d016      	beq.n	800a6d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6aa:	f043 0220 	orr.w	r2, r3, #32
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e00f      	b.n	800a6d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6cc:	2b80      	cmp	r3, #128	; 0x80
 800a6ce:	d0f2      	beq.n	800a6b6 <SPI_EndRxTxTransaction+0x52>
 800a6d0:	e000      	b.n	800a6d4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a6d2:	bf00      	nop
  }

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000194 	.word	0x20000194
 800a6e4:	165e9f81 	.word	0x165e9f81

0800a6e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e041      	b.n	800a77e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fb f8fc 	bl	800590c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f000 fafa 	bl	800ad20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d001      	beq.n	800a7a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e046      	b.n	800a82e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a23      	ldr	r2, [pc, #140]	; (800a83c <HAL_TIM_Base_Start+0xb4>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d022      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ba:	d01d      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1f      	ldr	r2, [pc, #124]	; (800a840 <HAL_TIM_Base_Start+0xb8>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d018      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a1e      	ldr	r2, [pc, #120]	; (800a844 <HAL_TIM_Base_Start+0xbc>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d013      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a1c      	ldr	r2, [pc, #112]	; (800a848 <HAL_TIM_Base_Start+0xc0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00e      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <HAL_TIM_Base_Start+0xc4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d009      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a19      	ldr	r2, [pc, #100]	; (800a850 <HAL_TIM_Base_Start+0xc8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d004      	beq.n	800a7f8 <HAL_TIM_Base_Start+0x70>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a18      	ldr	r2, [pc, #96]	; (800a854 <HAL_TIM_Base_Start+0xcc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d111      	bne.n	800a81c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b06      	cmp	r3, #6
 800a808:	d010      	beq.n	800a82c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0201 	orr.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81a:	e007      	b.n	800a82c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40010000 	.word	0x40010000
 800a840:	40000400 	.word	0x40000400
 800a844:	40000800 	.word	0x40000800
 800a848:	40000c00 	.word	0x40000c00
 800a84c:	40010400 	.word	0x40010400
 800a850:	40014000 	.word	0x40014000
 800a854:	40001800 	.word	0x40001800

0800a858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d001      	beq.n	800a870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e04e      	b.n	800a90e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0201 	orr.w	r2, r2, #1
 800a886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a23      	ldr	r2, [pc, #140]	; (800a91c <HAL_TIM_Base_Start_IT+0xc4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d022      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89a:	d01d      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a1f      	ldr	r2, [pc, #124]	; (800a920 <HAL_TIM_Base_Start_IT+0xc8>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d018      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <HAL_TIM_Base_Start_IT+0xcc>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d013      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a1c      	ldr	r2, [pc, #112]	; (800a928 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00e      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <HAL_TIM_Base_Start_IT+0xd4>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d009      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a19      	ldr	r2, [pc, #100]	; (800a930 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d004      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0x80>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a18      	ldr	r2, [pc, #96]	; (800a934 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d111      	bne.n	800a8fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f003 0307 	and.w	r3, r3, #7
 800a8e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b06      	cmp	r3, #6
 800a8e8:	d010      	beq.n	800a90c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f042 0201 	orr.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fa:	e007      	b.n	800a90c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0201 	orr.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	40010000 	.word	0x40010000
 800a920:	40000400 	.word	0x40000400
 800a924:	40000800 	.word	0x40000800
 800a928:	40000c00 	.word	0x40000c00
 800a92c:	40010400 	.word	0x40010400
 800a930:	40014000 	.word	0x40014000
 800a934:	40001800 	.word	0x40001800

0800a938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d122      	bne.n	800a994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d11b      	bne.n	800a994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0202 	mvn.w	r2, #2
 800a964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9b2 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f9a4 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f9b5 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	d122      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d11b      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0204 	mvn.w	r2, #4
 800a9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f988 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800a9d4:	e005      	b.n	800a9e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f97a 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f98b 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	d122      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0308 	and.w	r3, r3, #8
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d11b      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0208 	mvn.w	r2, #8
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2204      	movs	r2, #4
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f95e 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f950 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f961 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	2b10      	cmp	r3, #16
 800aa48:	d122      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d11b      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f06f 0210 	mvn.w	r2, #16
 800aa60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2208      	movs	r2, #8
 800aa66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f934 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800aa7c:	e005      	b.n	800aa8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f926 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f937 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d10e      	bne.n	800aabc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d107      	bne.n	800aabc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f06f 0201 	mvn.w	r2, #1
 800aab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7f6 fb56 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac6:	2b80      	cmp	r3, #128	; 0x80
 800aac8:	d10e      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad4:	2b80      	cmp	r3, #128	; 0x80
 800aad6:	d107      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fadc 	bl	800b0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d10e      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	d107      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f8fc 	bl	800ad0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b20      	cmp	r3, #32
 800ab20:	d10e      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d107      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0220 	mvn.w	r2, #32
 800ab38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 faa6 	bl	800b08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIM_ConfigClockSource+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0b3      	b.n	800acc8 <HAL_TIM_ConfigClockSource+0x180>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab98:	d03e      	beq.n	800ac18 <HAL_TIM_ConfigClockSource+0xd0>
 800ab9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab9e:	f200 8087 	bhi.w	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800aba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aba6:	f000 8085 	beq.w	800acb4 <HAL_TIM_ConfigClockSource+0x16c>
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abae:	d87f      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abb0:	2b70      	cmp	r3, #112	; 0x70
 800abb2:	d01a      	beq.n	800abea <HAL_TIM_ConfigClockSource+0xa2>
 800abb4:	2b70      	cmp	r3, #112	; 0x70
 800abb6:	d87b      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abb8:	2b60      	cmp	r3, #96	; 0x60
 800abba:	d050      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x116>
 800abbc:	2b60      	cmp	r3, #96	; 0x60
 800abbe:	d877      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abc0:	2b50      	cmp	r3, #80	; 0x50
 800abc2:	d03c      	beq.n	800ac3e <HAL_TIM_ConfigClockSource+0xf6>
 800abc4:	2b50      	cmp	r3, #80	; 0x50
 800abc6:	d873      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abc8:	2b40      	cmp	r3, #64	; 0x40
 800abca:	d058      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x136>
 800abcc:	2b40      	cmp	r3, #64	; 0x40
 800abce:	d86f      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abd0:	2b30      	cmp	r3, #48	; 0x30
 800abd2:	d064      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x156>
 800abd4:	2b30      	cmp	r3, #48	; 0x30
 800abd6:	d86b      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d060      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x156>
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d867      	bhi.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d05c      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x156>
 800abe4:	2b10      	cmp	r3, #16
 800abe6:	d05a      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800abe8:	e062      	b.n	800acb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6899      	ldr	r1, [r3, #8]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f000 f9ab 	bl	800af54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	609a      	str	r2, [r3, #8]
      break;
 800ac16:	e04e      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	6899      	ldr	r1, [r3, #8]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f000 f994 	bl	800af54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac3a:	609a      	str	r2, [r3, #8]
      break;
 800ac3c:	e03b      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6859      	ldr	r1, [r3, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f000 f908 	bl	800ae60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2150      	movs	r1, #80	; 0x50
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f961 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800ac5c:	e02b      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6859      	ldr	r1, [r3, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f000 f927 	bl	800aebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2160      	movs	r1, #96	; 0x60
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 f951 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800ac7c:	e01b      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6859      	ldr	r1, [r3, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f000 f8e8 	bl	800ae60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2140      	movs	r1, #64	; 0x40
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f941 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800ac9c:	e00b      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f000 f938 	bl	800af1e <TIM_ITRx_SetConfig>
        break;
 800acae:	e002      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800acb0:	bf00      	nop
 800acb2:	e000      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800acb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a40      	ldr	r2, [pc, #256]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d013      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3e:	d00f      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a3d      	ldr	r2, [pc, #244]	; (800ae38 <TIM_Base_SetConfig+0x118>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d00b      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a3c      	ldr	r2, [pc, #240]	; (800ae3c <TIM_Base_SetConfig+0x11c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d007      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a3b      	ldr	r2, [pc, #236]	; (800ae40 <TIM_Base_SetConfig+0x120>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d003      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a3a      	ldr	r2, [pc, #232]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d108      	bne.n	800ad72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a2f      	ldr	r2, [pc, #188]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d02b      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad80:	d027      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2c      	ldr	r2, [pc, #176]	; (800ae38 <TIM_Base_SetConfig+0x118>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d023      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2b      	ldr	r2, [pc, #172]	; (800ae3c <TIM_Base_SetConfig+0x11c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d01f      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2a      	ldr	r2, [pc, #168]	; (800ae40 <TIM_Base_SetConfig+0x120>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d01b      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a29      	ldr	r2, [pc, #164]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d017      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a28      	ldr	r2, [pc, #160]	; (800ae48 <TIM_Base_SetConfig+0x128>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d013      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a27      	ldr	r2, [pc, #156]	; (800ae4c <TIM_Base_SetConfig+0x12c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00f      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a26      	ldr	r2, [pc, #152]	; (800ae50 <TIM_Base_SetConfig+0x130>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d00b      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a25      	ldr	r2, [pc, #148]	; (800ae54 <TIM_Base_SetConfig+0x134>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d007      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a24      	ldr	r2, [pc, #144]	; (800ae58 <TIM_Base_SetConfig+0x138>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d003      	beq.n	800add2 <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a23      	ldr	r2, [pc, #140]	; (800ae5c <TIM_Base_SetConfig+0x13c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d108      	bne.n	800ade4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800add8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <TIM_Base_SetConfig+0xf8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a0c      	ldr	r2, [pc, #48]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d103      	bne.n	800ae20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	691a      	ldr	r2, [r3, #16]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	615a      	str	r2, [r3, #20]
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40010000 	.word	0x40010000
 800ae38:	40000400 	.word	0x40000400
 800ae3c:	40000800 	.word	0x40000800
 800ae40:	40000c00 	.word	0x40000c00
 800ae44:	40010400 	.word	0x40010400
 800ae48:	40014000 	.word	0x40014000
 800ae4c:	40014400 	.word	0x40014400
 800ae50:	40014800 	.word	0x40014800
 800ae54:	40001800 	.word	0x40001800
 800ae58:	40001c00 	.word	0x40001c00
 800ae5c:	40002000 	.word	0x40002000

0800ae60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f023 0201 	bic.w	r2, r3, #1
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f023 030a 	bic.w	r3, r3, #10
 800ae9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	621a      	str	r2, [r3, #32]
}
 800aeb2:	bf00      	nop
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b087      	sub	sp, #28
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0210 	bic.w	r2, r3, #16
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	031b      	lsls	r3, r3, #12
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aefa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4313      	orrs	r3, r2
 800af04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	621a      	str	r2, [r3, #32]
}
 800af12:	bf00      	nop
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f043 0307 	orr.w	r3, r3, #7
 800af40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	609a      	str	r2, [r3, #8]
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	021a      	lsls	r2, r3, #8
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	431a      	orrs	r2, r3
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	609a      	str	r2, [r3, #8]
}
 800af88:	bf00      	nop
 800af8a:	371c      	adds	r7, #28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e05a      	b.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a21      	ldr	r2, [pc, #132]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d022      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff8:	d01d      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d018      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a1b      	ldr	r2, [pc, #108]	; (800b078 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d013      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00e      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a18      	ldr	r2, [pc, #96]	; (800b080 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d009      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a17      	ldr	r2, [pc, #92]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d004      	beq.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a15      	ldr	r2, [pc, #84]	; (800b088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d10c      	bne.n	800b050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b03c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	4313      	orrs	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	40010000 	.word	0x40010000
 800b074:	40000400 	.word	0x40000400
 800b078:	40000800 	.word	0x40000800
 800b07c:	40000c00 	.word	0x40000c00
 800b080:	40010400 	.word	0x40010400
 800b084:	40014000 	.word	0x40014000
 800b088:	40001800 	.word	0x40001800

0800b08c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e03f      	b.n	800b146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fa fc90 	bl	8005a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2224      	movs	r2, #36	; 0x24
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc7b 	bl	800b9f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	691a      	ldr	r2, [r3, #16]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b10c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	695a      	ldr	r2, [r3, #20]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b11c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b12c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2220      	movs	r2, #32
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b08a      	sub	sp, #40	; 0x28
 800b152:	af02      	add	r7, sp, #8
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	603b      	str	r3, [r7, #0]
 800b15a:	4613      	mov	r3, r2
 800b15c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b20      	cmp	r3, #32
 800b16c:	d17c      	bne.n	800b268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <HAL_UART_Transmit+0x2c>
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e075      	b.n	800b26a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <HAL_UART_Transmit+0x3e>
 800b188:	2302      	movs	r3, #2
 800b18a:	e06e      	b.n	800b26a <HAL_UART_Transmit+0x11c>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2221      	movs	r2, #33	; 0x21
 800b19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1a2:	f7fd fc6d 	bl	8008a80 <HAL_GetTick>
 800b1a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1bc:	d108      	bne.n	800b1d0 <HAL_UART_Transmit+0x82>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e003      	b.n	800b1d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b1e0:	e02a      	b.n	800b238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2180      	movs	r1, #128	; 0x80
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 fa3d 	bl	800b66c <UART_WaitOnFlagUntilTimeout>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e036      	b.n	800b26a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	3302      	adds	r3, #2
 800b216:	61bb      	str	r3, [r7, #24]
 800b218:	e007      	b.n	800b22a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	781a      	ldrb	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3301      	adds	r3, #1
 800b228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b22e:	b29b      	uxth	r3, r3
 800b230:	3b01      	subs	r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1cf      	bne.n	800b1e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2200      	movs	r2, #0
 800b24a:	2140      	movs	r1, #64	; 0x40
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 fa0d 	bl	800b66c <UART_WaitOnFlagUntilTimeout>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e006      	b.n	800b26a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2220      	movs	r2, #32
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	e000      	b.n	800b26a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b268:	2302      	movs	r3, #2
  }
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	4613      	mov	r3, r2
 800b27e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d11d      	bne.n	800b2c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <HAL_UART_Receive_IT+0x26>
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e016      	b.n	800b2ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_UART_Receive_IT+0x38>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e00f      	b.n	800b2ca <HAL_UART_Receive_IT+0x58>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 fa1e 	bl	800b700 <UART_Start_Receive_IT>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	e000      	b.n	800b2ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b2c8:	2302      	movs	r3, #2
  }
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
	...

0800b2d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	; 0x28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10d      	bne.n	800b326 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	f003 0320 	and.w	r3, r3, #32
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <HAL_UART_IRQHandler+0x52>
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fad1 	bl	800b8c6 <UART_Receive_IT>
      return;
 800b324:	e17c      	b.n	800b620 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80b1 	beq.w	800b490 <HAL_UART_IRQHandler+0x1bc>
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d105      	bne.n	800b344 <HAL_UART_IRQHandler+0x70>
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 80a6 	beq.w	800b490 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <HAL_UART_IRQHandler+0x90>
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	f043 0201 	orr.w	r2, r3, #1
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <HAL_UART_IRQHandler+0xb0>
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	f043 0202 	orr.w	r2, r3, #2
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <HAL_UART_IRQHandler+0xd0>
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	f003 0301 	and.w	r3, r3, #1
 800b394:	2b00      	cmp	r3, #0
 800b396:	d005      	beq.n	800b3a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39c:	f043 0204 	orr.w	r2, r3, #4
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	f003 0308 	and.w	r3, r3, #8
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00f      	beq.n	800b3ce <HAL_UART_IRQHandler+0xfa>
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	f003 0320 	and.w	r3, r3, #32
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <HAL_UART_IRQHandler+0xee>
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d005      	beq.n	800b3ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	f043 0208 	orr.w	r2, r3, #8
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 811f 	beq.w	800b616 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d007      	beq.n	800b3f2 <HAL_UART_IRQHandler+0x11e>
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fa6a 	bl	800b8c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	bf0c      	ite	eq
 800b400:	2301      	moveq	r3, #1
 800b402:	2300      	movne	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40c:	f003 0308 	and.w	r3, r3, #8
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <HAL_UART_IRQHandler+0x146>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d031      	beq.n	800b47e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f9aa 	bl	800b774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42a:	2b40      	cmp	r3, #64	; 0x40
 800b42c:	d123      	bne.n	800b476 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695a      	ldr	r2, [r3, #20]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b43c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	2b00      	cmp	r3, #0
 800b444:	d013      	beq.n	800b46e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	4a77      	ldr	r2, [pc, #476]	; (800b628 <HAL_UART_IRQHandler+0x354>)
 800b44c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	4618      	mov	r0, r3
 800b454:	f7fd fca1 	bl	8008d9a <HAL_DMA_Abort_IT>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d016      	beq.n	800b48c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46c:	e00e      	b.n	800b48c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f8e6 	bl	800b640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b474:	e00a      	b.n	800b48c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f8e2 	bl	800b640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47c:	e006      	b.n	800b48c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f8de 	bl	800b640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b48a:	e0c4      	b.n	800b616 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b48c:	bf00      	nop
    return;
 800b48e:	e0c2      	b.n	800b616 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	2b01      	cmp	r3, #1
 800b496:	f040 80a2 	bne.w	800b5de <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 809c 	beq.w	800b5de <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 8096 	beq.w	800b5de <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d2:	2b40      	cmp	r3, #64	; 0x40
 800b4d4:	d14f      	bne.n	800b576 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b4e0:	8a3b      	ldrh	r3, [r7, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8099 	beq.w	800b61a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4ec:	8a3a      	ldrh	r2, [r7, #16]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	f080 8093 	bcs.w	800b61a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8a3a      	ldrh	r2, [r7, #16]
 800b4f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b504:	d02b      	beq.n	800b55e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b514:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695a      	ldr	r2, [r3, #20]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0201 	bic.w	r2, r2, #1
 800b524:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	695a      	ldr	r2, [r3, #20]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b534:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2220      	movs	r2, #32
 800b53a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 0210 	bic.w	r2, r2, #16
 800b552:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fd fbae 	bl	8008cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b566:	b29b      	uxth	r3, r3
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f870 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b574:	e051      	b.n	800b61a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b57e:	b29b      	uxth	r3, r3
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b588:	b29b      	uxth	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d047      	beq.n	800b61e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b58e:	8a7b      	ldrh	r3, [r7, #18]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d044      	beq.n	800b61e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b5a2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695a      	ldr	r2, [r3, #20]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0201 	bic.w	r2, r2, #1
 800b5b2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f022 0210 	bic.w	r2, r2, #16
 800b5d0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5d2:	8a7b      	ldrh	r3, [r7, #18]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f83c 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b5dc:	e01f      	b.n	800b61e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d008      	beq.n	800b5fa <HAL_UART_IRQHandler+0x326>
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f8ff 	bl	800b7f6 <UART_Transmit_IT>
    return;
 800b5f8:	e012      	b.n	800b620 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00d      	beq.n	800b620 <HAL_UART_IRQHandler+0x34c>
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d008      	beq.n	800b620 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f941 	bl	800b896 <UART_EndTransmit_IT>
    return;
 800b614:	e004      	b.n	800b620 <HAL_UART_IRQHandler+0x34c>
    return;
 800b616:	bf00      	nop
 800b618:	e002      	b.n	800b620 <HAL_UART_IRQHandler+0x34c>
      return;
 800b61a:	bf00      	nop
 800b61c:	e000      	b.n	800b620 <HAL_UART_IRQHandler+0x34c>
      return;
 800b61e:	bf00      	nop
  }
}
 800b620:	3728      	adds	r7, #40	; 0x28
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0800b7cf 	.word	0x0800b7cf

0800b62c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	4613      	mov	r3, r2
 800b67a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b67c:	e02c      	b.n	800b6d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b684:	d028      	beq.n	800b6d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d007      	beq.n	800b69c <UART_WaitOnFlagUntilTimeout+0x30>
 800b68c:	f7fd f9f8 	bl	8008a80 <HAL_GetTick>
 800b690:	4602      	mov	r2, r0
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d21d      	bcs.n	800b6d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b6aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	695a      	ldr	r2, [r3, #20]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0201 	bic.w	r2, r2, #1
 800b6ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e00f      	b.n	800b6f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	bf0c      	ite	eq
 800b6e8:	2301      	moveq	r3, #1
 800b6ea:	2300      	movne	r3, #0
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d0c3      	beq.n	800b67e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	88fa      	ldrh	r2, [r7, #6]
 800b718:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	88fa      	ldrh	r2, [r7, #6]
 800b71e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2222      	movs	r2, #34	; 0x22
 800b72a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b744:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0201 	orr.w	r2, r2, #1
 800b754:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f042 0220 	orr.w	r2, r2, #32
 800b764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b78a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	695a      	ldr	r2, [r3, #20]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0201 	bic.w	r2, r2, #1
 800b79a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d107      	bne.n	800b7b4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f022 0210 	bic.w	r2, r2, #16
 800b7b2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff ff29 	bl	800b640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b21      	cmp	r3, #33	; 0x21
 800b808:	d13e      	bne.n	800b888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b812:	d114      	bne.n	800b83e <UART_Transmit_IT+0x48>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d110      	bne.n	800b83e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	1c9a      	adds	r2, r3, #2
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	621a      	str	r2, [r3, #32]
 800b83c:	e008      	b.n	800b850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	1c59      	adds	r1, r3, #1
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	6211      	str	r1, [r2, #32]
 800b848:	781a      	ldrb	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29b      	uxth	r3, r3
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	4619      	mov	r1, r3
 800b85e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10f      	bne.n	800b884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68da      	ldr	r2, [r3, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	e000      	b.n	800b88a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b888:	2302      	movs	r3, #2
  }
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff feb8 	bl	800b62c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b22      	cmp	r3, #34	; 0x22
 800b8d8:	f040 8087 	bne.w	800b9ea <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e4:	d117      	bne.n	800b916 <UART_Receive_IT+0x50>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d113      	bne.n	800b916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b904:	b29a      	uxth	r2, r3
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	1c9a      	adds	r2, r3, #2
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	629a      	str	r2, [r3, #40]	; 0x28
 800b914:	e026      	b.n	800b964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b928:	d007      	beq.n	800b93a <UART_Receive_IT+0x74>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <UART_Receive_IT+0x82>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	b2da      	uxtb	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	e008      	b.n	800b95a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b954:	b2da      	uxtb	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4619      	mov	r1, r3
 800b972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b974:	2b00      	cmp	r3, #0
 800b976:	d136      	bne.n	800b9e6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0220 	bic.w	r2, r2, #32
 800b986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	695a      	ldr	r2, [r3, #20]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0201 	bic.w	r2, r2, #1
 800b9a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d10e      	bne.n	800b9d6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0210 	bic.w	r2, r2, #16
 800b9c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fe40 	bl	800b654 <HAL_UARTEx_RxEventCallback>
 800b9d4:	e002      	b.n	800b9dc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7f5 fbf4 	bl	80011c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e002      	b.n	800b9ec <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e000      	b.n	800b9ec <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b9ea:	2302      	movs	r3, #2
  }
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	b09f      	sub	sp, #124	; 0x7c
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba0a:	68d9      	ldr	r1, [r3, #12]
 800ba0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	ea40 0301 	orr.w	r3, r0, r1
 800ba14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba18:	689a      	ldr	r2, [r3, #8]
 800ba1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	431a      	orrs	r2, r3
 800ba26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ba2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba38:	f021 010c 	bic.w	r1, r1, #12
 800ba3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba42:	430b      	orrs	r3, r1
 800ba44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba52:	6999      	ldr	r1, [r3, #24]
 800ba54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	ea40 0301 	orr.w	r3, r0, r1
 800ba5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	4bc5      	ldr	r3, [pc, #788]	; (800bd78 <UART_SetConfig+0x384>)
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d004      	beq.n	800ba72 <UART_SetConfig+0x7e>
 800ba68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	4bc3      	ldr	r3, [pc, #780]	; (800bd7c <UART_SetConfig+0x388>)
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d103      	bne.n	800ba7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba72:	f7fd fc83 	bl	800937c <HAL_RCC_GetPCLK2Freq>
 800ba76:	6778      	str	r0, [r7, #116]	; 0x74
 800ba78:	e002      	b.n	800ba80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba7a:	f7fd fc6b 	bl	8009354 <HAL_RCC_GetPCLK1Freq>
 800ba7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba88:	f040 80b6 	bne.w	800bbf8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba8e:	461c      	mov	r4, r3
 800ba90:	f04f 0500 	mov.w	r5, #0
 800ba94:	4622      	mov	r2, r4
 800ba96:	462b      	mov	r3, r5
 800ba98:	1891      	adds	r1, r2, r2
 800ba9a:	6439      	str	r1, [r7, #64]	; 0x40
 800ba9c:	415b      	adcs	r3, r3
 800ba9e:	647b      	str	r3, [r7, #68]	; 0x44
 800baa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800baa4:	1912      	adds	r2, r2, r4
 800baa6:	eb45 0303 	adc.w	r3, r5, r3
 800baaa:	f04f 0000 	mov.w	r0, #0
 800baae:	f04f 0100 	mov.w	r1, #0
 800bab2:	00d9      	lsls	r1, r3, #3
 800bab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bab8:	00d0      	lsls	r0, r2, #3
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	1911      	adds	r1, r2, r4
 800bac0:	6639      	str	r1, [r7, #96]	; 0x60
 800bac2:	416b      	adcs	r3, r5
 800bac4:	667b      	str	r3, [r7, #100]	; 0x64
 800bac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	461a      	mov	r2, r3
 800bacc:	f04f 0300 	mov.w	r3, #0
 800bad0:	1891      	adds	r1, r2, r2
 800bad2:	63b9      	str	r1, [r7, #56]	; 0x38
 800bad4:	415b      	adcs	r3, r3
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800badc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bae0:	f7f5 f86e 	bl	8000bc0 <__aeabi_uldivmod>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4ba5      	ldr	r3, [pc, #660]	; (800bd80 <UART_SetConfig+0x38c>)
 800baea:	fba3 2302 	umull	r2, r3, r3, r2
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	011e      	lsls	r6, r3, #4
 800baf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf4:	461c      	mov	r4, r3
 800baf6:	f04f 0500 	mov.w	r5, #0
 800bafa:	4622      	mov	r2, r4
 800bafc:	462b      	mov	r3, r5
 800bafe:	1891      	adds	r1, r2, r2
 800bb00:	6339      	str	r1, [r7, #48]	; 0x30
 800bb02:	415b      	adcs	r3, r3
 800bb04:	637b      	str	r3, [r7, #52]	; 0x34
 800bb06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bb0a:	1912      	adds	r2, r2, r4
 800bb0c:	eb45 0303 	adc.w	r3, r5, r3
 800bb10:	f04f 0000 	mov.w	r0, #0
 800bb14:	f04f 0100 	mov.w	r1, #0
 800bb18:	00d9      	lsls	r1, r3, #3
 800bb1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb1e:	00d0      	lsls	r0, r2, #3
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	1911      	adds	r1, r2, r4
 800bb26:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb28:	416b      	adcs	r3, r5
 800bb2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	461a      	mov	r2, r3
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	1891      	adds	r1, r2, r2
 800bb38:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb3a:	415b      	adcs	r3, r3
 800bb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bb46:	f7f5 f83b 	bl	8000bc0 <__aeabi_uldivmod>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4b8c      	ldr	r3, [pc, #560]	; (800bd80 <UART_SetConfig+0x38c>)
 800bb50:	fba3 1302 	umull	r1, r3, r3, r2
 800bb54:	095b      	lsrs	r3, r3, #5
 800bb56:	2164      	movs	r1, #100	; 0x64
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	3332      	adds	r3, #50	; 0x32
 800bb62:	4a87      	ldr	r2, [pc, #540]	; (800bd80 <UART_SetConfig+0x38c>)
 800bb64:	fba2 2303 	umull	r2, r3, r2, r3
 800bb68:	095b      	lsrs	r3, r3, #5
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb70:	441e      	add	r6, r3
 800bb72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb74:	4618      	mov	r0, r3
 800bb76:	f04f 0100 	mov.w	r1, #0
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	1894      	adds	r4, r2, r2
 800bb80:	623c      	str	r4, [r7, #32]
 800bb82:	415b      	adcs	r3, r3
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
 800bb86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb8a:	1812      	adds	r2, r2, r0
 800bb8c:	eb41 0303 	adc.w	r3, r1, r3
 800bb90:	f04f 0400 	mov.w	r4, #0
 800bb94:	f04f 0500 	mov.w	r5, #0
 800bb98:	00dd      	lsls	r5, r3, #3
 800bb9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb9e:	00d4      	lsls	r4, r2, #3
 800bba0:	4622      	mov	r2, r4
 800bba2:	462b      	mov	r3, r5
 800bba4:	1814      	adds	r4, r2, r0
 800bba6:	653c      	str	r4, [r7, #80]	; 0x50
 800bba8:	414b      	adcs	r3, r1
 800bbaa:	657b      	str	r3, [r7, #84]	; 0x54
 800bbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f04f 0300 	mov.w	r3, #0
 800bbb6:	1891      	adds	r1, r2, r2
 800bbb8:	61b9      	str	r1, [r7, #24]
 800bbba:	415b      	adcs	r3, r3
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bbc6:	f7f4 fffb 	bl	8000bc0 <__aeabi_uldivmod>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4b6c      	ldr	r3, [pc, #432]	; (800bd80 <UART_SetConfig+0x38c>)
 800bbd0:	fba3 1302 	umull	r1, r3, r3, r2
 800bbd4:	095b      	lsrs	r3, r3, #5
 800bbd6:	2164      	movs	r1, #100	; 0x64
 800bbd8:	fb01 f303 	mul.w	r3, r1, r3
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	3332      	adds	r3, #50	; 0x32
 800bbe2:	4a67      	ldr	r2, [pc, #412]	; (800bd80 <UART_SetConfig+0x38c>)
 800bbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe8:	095b      	lsrs	r3, r3, #5
 800bbea:	f003 0207 	and.w	r2, r3, #7
 800bbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4432      	add	r2, r6
 800bbf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbf6:	e0b9      	b.n	800bd6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbfa:	461c      	mov	r4, r3
 800bbfc:	f04f 0500 	mov.w	r5, #0
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	1891      	adds	r1, r2, r2
 800bc06:	6139      	str	r1, [r7, #16]
 800bc08:	415b      	adcs	r3, r3
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc10:	1912      	adds	r2, r2, r4
 800bc12:	eb45 0303 	adc.w	r3, r5, r3
 800bc16:	f04f 0000 	mov.w	r0, #0
 800bc1a:	f04f 0100 	mov.w	r1, #0
 800bc1e:	00d9      	lsls	r1, r3, #3
 800bc20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc24:	00d0      	lsls	r0, r2, #3
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	eb12 0804 	adds.w	r8, r2, r4
 800bc2e:	eb43 0905 	adc.w	r9, r3, r5
 800bc32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f04f 0100 	mov.w	r1, #0
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	008b      	lsls	r3, r1, #2
 800bc46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc4a:	0082      	lsls	r2, r0, #2
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	4649      	mov	r1, r9
 800bc50:	f7f4 ffb6 	bl	8000bc0 <__aeabi_uldivmod>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4b49      	ldr	r3, [pc, #292]	; (800bd80 <UART_SetConfig+0x38c>)
 800bc5a:	fba3 2302 	umull	r2, r3, r3, r2
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	011e      	lsls	r6, r3, #4
 800bc62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc64:	4618      	mov	r0, r3
 800bc66:	f04f 0100 	mov.w	r1, #0
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	1894      	adds	r4, r2, r2
 800bc70:	60bc      	str	r4, [r7, #8]
 800bc72:	415b      	adcs	r3, r3
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc7a:	1812      	adds	r2, r2, r0
 800bc7c:	eb41 0303 	adc.w	r3, r1, r3
 800bc80:	f04f 0400 	mov.w	r4, #0
 800bc84:	f04f 0500 	mov.w	r5, #0
 800bc88:	00dd      	lsls	r5, r3, #3
 800bc8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bc8e:	00d4      	lsls	r4, r2, #3
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	1814      	adds	r4, r2, r0
 800bc96:	64bc      	str	r4, [r7, #72]	; 0x48
 800bc98:	414b      	adcs	r3, r1
 800bc9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f04f 0100 	mov.w	r1, #0
 800bca6:	f04f 0200 	mov.w	r2, #0
 800bcaa:	f04f 0300 	mov.w	r3, #0
 800bcae:	008b      	lsls	r3, r1, #2
 800bcb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bcb4:	0082      	lsls	r2, r0, #2
 800bcb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bcba:	f7f4 ff81 	bl	8000bc0 <__aeabi_uldivmod>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4b2f      	ldr	r3, [pc, #188]	; (800bd80 <UART_SetConfig+0x38c>)
 800bcc4:	fba3 1302 	umull	r1, r3, r3, r2
 800bcc8:	095b      	lsrs	r3, r3, #5
 800bcca:	2164      	movs	r1, #100	; 0x64
 800bccc:	fb01 f303 	mul.w	r3, r1, r3
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	011b      	lsls	r3, r3, #4
 800bcd4:	3332      	adds	r3, #50	; 0x32
 800bcd6:	4a2a      	ldr	r2, [pc, #168]	; (800bd80 <UART_SetConfig+0x38c>)
 800bcd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcdc:	095b      	lsrs	r3, r3, #5
 800bcde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bce2:	441e      	add	r6, r3
 800bce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bce6:	4618      	mov	r0, r3
 800bce8:	f04f 0100 	mov.w	r1, #0
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	1894      	adds	r4, r2, r2
 800bcf2:	603c      	str	r4, [r7, #0]
 800bcf4:	415b      	adcs	r3, r3
 800bcf6:	607b      	str	r3, [r7, #4]
 800bcf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcfc:	1812      	adds	r2, r2, r0
 800bcfe:	eb41 0303 	adc.w	r3, r1, r3
 800bd02:	f04f 0400 	mov.w	r4, #0
 800bd06:	f04f 0500 	mov.w	r5, #0
 800bd0a:	00dd      	lsls	r5, r3, #3
 800bd0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd10:	00d4      	lsls	r4, r2, #3
 800bd12:	4622      	mov	r2, r4
 800bd14:	462b      	mov	r3, r5
 800bd16:	eb12 0a00 	adds.w	sl, r2, r0
 800bd1a:	eb43 0b01 	adc.w	fp, r3, r1
 800bd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f04f 0100 	mov.w	r1, #0
 800bd28:	f04f 0200 	mov.w	r2, #0
 800bd2c:	f04f 0300 	mov.w	r3, #0
 800bd30:	008b      	lsls	r3, r1, #2
 800bd32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd36:	0082      	lsls	r2, r0, #2
 800bd38:	4650      	mov	r0, sl
 800bd3a:	4659      	mov	r1, fp
 800bd3c:	f7f4 ff40 	bl	8000bc0 <__aeabi_uldivmod>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4b0e      	ldr	r3, [pc, #56]	; (800bd80 <UART_SetConfig+0x38c>)
 800bd46:	fba3 1302 	umull	r1, r3, r3, r2
 800bd4a:	095b      	lsrs	r3, r3, #5
 800bd4c:	2164      	movs	r1, #100	; 0x64
 800bd4e:	fb01 f303 	mul.w	r3, r1, r3
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	011b      	lsls	r3, r3, #4
 800bd56:	3332      	adds	r3, #50	; 0x32
 800bd58:	4a09      	ldr	r2, [pc, #36]	; (800bd80 <UART_SetConfig+0x38c>)
 800bd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	f003 020f 	and.w	r2, r3, #15
 800bd64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4432      	add	r2, r6
 800bd6a:	609a      	str	r2, [r3, #8]
}
 800bd6c:	bf00      	nop
 800bd6e:	377c      	adds	r7, #124	; 0x7c
 800bd70:	46bd      	mov	sp, r7
 800bd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd76:	bf00      	nop
 800bd78:	40011000 	.word	0x40011000
 800bd7c:	40011400 	.word	0x40011400
 800bd80:	51eb851f 	.word	0x51eb851f

0800bd84 <__errno>:
 800bd84:	4b01      	ldr	r3, [pc, #4]	; (800bd8c <__errno+0x8>)
 800bd86:	6818      	ldr	r0, [r3, #0]
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	20000224 	.word	0x20000224

0800bd90 <__libc_init_array>:
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	4d0d      	ldr	r5, [pc, #52]	; (800bdc8 <__libc_init_array+0x38>)
 800bd94:	4c0d      	ldr	r4, [pc, #52]	; (800bdcc <__libc_init_array+0x3c>)
 800bd96:	1b64      	subs	r4, r4, r5
 800bd98:	10a4      	asrs	r4, r4, #2
 800bd9a:	2600      	movs	r6, #0
 800bd9c:	42a6      	cmp	r6, r4
 800bd9e:	d109      	bne.n	800bdb4 <__libc_init_array+0x24>
 800bda0:	4d0b      	ldr	r5, [pc, #44]	; (800bdd0 <__libc_init_array+0x40>)
 800bda2:	4c0c      	ldr	r4, [pc, #48]	; (800bdd4 <__libc_init_array+0x44>)
 800bda4:	f001 f88e 	bl	800cec4 <_init>
 800bda8:	1b64      	subs	r4, r4, r5
 800bdaa:	10a4      	asrs	r4, r4, #2
 800bdac:	2600      	movs	r6, #0
 800bdae:	42a6      	cmp	r6, r4
 800bdb0:	d105      	bne.n	800bdbe <__libc_init_array+0x2e>
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb8:	4798      	blx	r3
 800bdba:	3601      	adds	r6, #1
 800bdbc:	e7ee      	b.n	800bd9c <__libc_init_array+0xc>
 800bdbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdc2:	4798      	blx	r3
 800bdc4:	3601      	adds	r6, #1
 800bdc6:	e7f2      	b.n	800bdae <__libc_init_array+0x1e>
 800bdc8:	0800cf48 	.word	0x0800cf48
 800bdcc:	0800cf48 	.word	0x0800cf48
 800bdd0:	0800cf48 	.word	0x0800cf48
 800bdd4:	0800cf4c 	.word	0x0800cf4c

0800bdd8 <memset>:
 800bdd8:	4402      	add	r2, r0
 800bdda:	4603      	mov	r3, r0
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d100      	bne.n	800bde2 <memset+0xa>
 800bde0:	4770      	bx	lr
 800bde2:	f803 1b01 	strb.w	r1, [r3], #1
 800bde6:	e7f9      	b.n	800bddc <memset+0x4>

0800bde8 <ceil>:
 800bde8:	ec51 0b10 	vmov	r0, r1, d0
 800bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bdf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bdf8:	2e13      	cmp	r6, #19
 800bdfa:	ee10 5a10 	vmov	r5, s0
 800bdfe:	ee10 8a10 	vmov	r8, s0
 800be02:	460c      	mov	r4, r1
 800be04:	dc30      	bgt.n	800be68 <ceil+0x80>
 800be06:	2e00      	cmp	r6, #0
 800be08:	da12      	bge.n	800be30 <ceil+0x48>
 800be0a:	a335      	add	r3, pc, #212	; (adr r3, 800bee0 <ceil+0xf8>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fa00 	bl	8000214 <__adddf3>
 800be14:	2200      	movs	r2, #0
 800be16:	2300      	movs	r3, #0
 800be18:	f7f4 fe42 	bl	8000aa0 <__aeabi_dcmpgt>
 800be1c:	b128      	cbz	r0, 800be2a <ceil+0x42>
 800be1e:	2c00      	cmp	r4, #0
 800be20:	db55      	blt.n	800bece <ceil+0xe6>
 800be22:	432c      	orrs	r4, r5
 800be24:	d057      	beq.n	800bed6 <ceil+0xee>
 800be26:	4c30      	ldr	r4, [pc, #192]	; (800bee8 <ceil+0x100>)
 800be28:	2500      	movs	r5, #0
 800be2a:	4621      	mov	r1, r4
 800be2c:	4628      	mov	r0, r5
 800be2e:	e025      	b.n	800be7c <ceil+0x94>
 800be30:	4f2e      	ldr	r7, [pc, #184]	; (800beec <ceil+0x104>)
 800be32:	4137      	asrs	r7, r6
 800be34:	ea01 0307 	and.w	r3, r1, r7
 800be38:	4303      	orrs	r3, r0
 800be3a:	d01f      	beq.n	800be7c <ceil+0x94>
 800be3c:	a328      	add	r3, pc, #160	; (adr r3, 800bee0 <ceil+0xf8>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 f9e7 	bl	8000214 <__adddf3>
 800be46:	2200      	movs	r2, #0
 800be48:	2300      	movs	r3, #0
 800be4a:	f7f4 fe29 	bl	8000aa0 <__aeabi_dcmpgt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0eb      	beq.n	800be2a <ceil+0x42>
 800be52:	2c00      	cmp	r4, #0
 800be54:	bfc2      	ittt	gt
 800be56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800be5a:	fa43 f606 	asrgt.w	r6, r3, r6
 800be5e:	19a4      	addgt	r4, r4, r6
 800be60:	ea24 0407 	bic.w	r4, r4, r7
 800be64:	2500      	movs	r5, #0
 800be66:	e7e0      	b.n	800be2a <ceil+0x42>
 800be68:	2e33      	cmp	r6, #51	; 0x33
 800be6a:	dd0b      	ble.n	800be84 <ceil+0x9c>
 800be6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be70:	d104      	bne.n	800be7c <ceil+0x94>
 800be72:	ee10 2a10 	vmov	r2, s0
 800be76:	460b      	mov	r3, r1
 800be78:	f7f4 f9cc 	bl	8000214 <__adddf3>
 800be7c:	ec41 0b10 	vmov	d0, r0, r1
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	fa23 f707 	lsr.w	r7, r3, r7
 800be90:	4207      	tst	r7, r0
 800be92:	d0f3      	beq.n	800be7c <ceil+0x94>
 800be94:	a312      	add	r3, pc, #72	; (adr r3, 800bee0 <ceil+0xf8>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f9bb 	bl	8000214 <__adddf3>
 800be9e:	2200      	movs	r2, #0
 800bea0:	2300      	movs	r3, #0
 800bea2:	f7f4 fdfd 	bl	8000aa0 <__aeabi_dcmpgt>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d0bf      	beq.n	800be2a <ceil+0x42>
 800beaa:	2c00      	cmp	r4, #0
 800beac:	dd02      	ble.n	800beb4 <ceil+0xcc>
 800beae:	2e14      	cmp	r6, #20
 800beb0:	d103      	bne.n	800beba <ceil+0xd2>
 800beb2:	3401      	adds	r4, #1
 800beb4:	ea25 0507 	bic.w	r5, r5, r7
 800beb8:	e7b7      	b.n	800be2a <ceil+0x42>
 800beba:	2301      	movs	r3, #1
 800bebc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bec0:	fa03 f606 	lsl.w	r6, r3, r6
 800bec4:	4435      	add	r5, r6
 800bec6:	4545      	cmp	r5, r8
 800bec8:	bf38      	it	cc
 800beca:	18e4      	addcc	r4, r4, r3
 800becc:	e7f2      	b.n	800beb4 <ceil+0xcc>
 800bece:	2500      	movs	r5, #0
 800bed0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bed4:	e7a9      	b.n	800be2a <ceil+0x42>
 800bed6:	4625      	mov	r5, r4
 800bed8:	e7a7      	b.n	800be2a <ceil+0x42>
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w
 800bee0:	8800759c 	.word	0x8800759c
 800bee4:	7e37e43c 	.word	0x7e37e43c
 800bee8:	3ff00000 	.word	0x3ff00000
 800beec:	000fffff 	.word	0x000fffff

0800bef0 <pow>:
 800bef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef4:	ec59 8b10 	vmov	r8, r9, d0
 800bef8:	ec57 6b11 	vmov	r6, r7, d1
 800befc:	f000 f8dc 	bl	800c0b8 <__ieee754_pow>
 800bf00:	4b4e      	ldr	r3, [pc, #312]	; (800c03c <pow+0x14c>)
 800bf02:	f993 3000 	ldrsb.w	r3, [r3]
 800bf06:	3301      	adds	r3, #1
 800bf08:	ec55 4b10 	vmov	r4, r5, d0
 800bf0c:	d015      	beq.n	800bf3a <pow+0x4a>
 800bf0e:	4632      	mov	r2, r6
 800bf10:	463b      	mov	r3, r7
 800bf12:	4630      	mov	r0, r6
 800bf14:	4639      	mov	r1, r7
 800bf16:	f7f4 fdcd 	bl	8000ab4 <__aeabi_dcmpun>
 800bf1a:	b970      	cbnz	r0, 800bf3a <pow+0x4a>
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	464b      	mov	r3, r9
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fdc6 	bl	8000ab4 <__aeabi_dcmpun>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	b148      	cbz	r0, 800bf42 <pow+0x52>
 800bf2e:	4630      	mov	r0, r6
 800bf30:	4639      	mov	r1, r7
 800bf32:	f7f4 fd8d 	bl	8000a50 <__aeabi_dcmpeq>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d17d      	bne.n	800c036 <pow+0x146>
 800bf3a:	ec45 4b10 	vmov	d0, r4, r5
 800bf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf42:	4640      	mov	r0, r8
 800bf44:	4649      	mov	r1, r9
 800bf46:	f7f4 fd83 	bl	8000a50 <__aeabi_dcmpeq>
 800bf4a:	b1e0      	cbz	r0, 800bf86 <pow+0x96>
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2300      	movs	r3, #0
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 fd7c 	bl	8000a50 <__aeabi_dcmpeq>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d16c      	bne.n	800c036 <pow+0x146>
 800bf5c:	ec47 6b10 	vmov	d0, r6, r7
 800bf60:	f000 fe89 	bl	800cc76 <finite>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d0e8      	beq.n	800bf3a <pow+0x4a>
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	4639      	mov	r1, r7
 800bf70:	f7f4 fd78 	bl	8000a64 <__aeabi_dcmplt>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d0e0      	beq.n	800bf3a <pow+0x4a>
 800bf78:	f7ff ff04 	bl	800bd84 <__errno>
 800bf7c:	2321      	movs	r3, #33	; 0x21
 800bf7e:	6003      	str	r3, [r0, #0]
 800bf80:	2400      	movs	r4, #0
 800bf82:	4d2f      	ldr	r5, [pc, #188]	; (800c040 <pow+0x150>)
 800bf84:	e7d9      	b.n	800bf3a <pow+0x4a>
 800bf86:	ec45 4b10 	vmov	d0, r4, r5
 800bf8a:	f000 fe74 	bl	800cc76 <finite>
 800bf8e:	bbb8      	cbnz	r0, 800c000 <pow+0x110>
 800bf90:	ec49 8b10 	vmov	d0, r8, r9
 800bf94:	f000 fe6f 	bl	800cc76 <finite>
 800bf98:	b390      	cbz	r0, 800c000 <pow+0x110>
 800bf9a:	ec47 6b10 	vmov	d0, r6, r7
 800bf9e:	f000 fe6a 	bl	800cc76 <finite>
 800bfa2:	b368      	cbz	r0, 800c000 <pow+0x110>
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	462b      	mov	r3, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f7f4 fd82 	bl	8000ab4 <__aeabi_dcmpun>
 800bfb0:	b160      	cbz	r0, 800bfcc <pow+0xdc>
 800bfb2:	f7ff fee7 	bl	800bd84 <__errno>
 800bfb6:	2321      	movs	r3, #33	; 0x21
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	f7f4 fc07 	bl	80007d4 <__aeabi_ddiv>
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460d      	mov	r5, r1
 800bfca:	e7b6      	b.n	800bf3a <pow+0x4a>
 800bfcc:	f7ff feda 	bl	800bd84 <__errno>
 800bfd0:	2322      	movs	r3, #34	; 0x22
 800bfd2:	6003      	str	r3, [r0, #0]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fd42 	bl	8000a64 <__aeabi_dcmplt>
 800bfe0:	2400      	movs	r4, #0
 800bfe2:	b158      	cbz	r0, 800bffc <pow+0x10c>
 800bfe4:	ec47 6b10 	vmov	d0, r6, r7
 800bfe8:	f000 fe5a 	bl	800cca0 <rint>
 800bfec:	4632      	mov	r2, r6
 800bfee:	ec51 0b10 	vmov	r0, r1, d0
 800bff2:	463b      	mov	r3, r7
 800bff4:	f7f4 fd2c 	bl	8000a50 <__aeabi_dcmpeq>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d0c2      	beq.n	800bf82 <pow+0x92>
 800bffc:	4d11      	ldr	r5, [pc, #68]	; (800c044 <pow+0x154>)
 800bffe:	e79c      	b.n	800bf3a <pow+0x4a>
 800c000:	2200      	movs	r2, #0
 800c002:	2300      	movs	r3, #0
 800c004:	4620      	mov	r0, r4
 800c006:	4629      	mov	r1, r5
 800c008:	f7f4 fd22 	bl	8000a50 <__aeabi_dcmpeq>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d094      	beq.n	800bf3a <pow+0x4a>
 800c010:	ec49 8b10 	vmov	d0, r8, r9
 800c014:	f000 fe2f 	bl	800cc76 <finite>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d08e      	beq.n	800bf3a <pow+0x4a>
 800c01c:	ec47 6b10 	vmov	d0, r6, r7
 800c020:	f000 fe29 	bl	800cc76 <finite>
 800c024:	2800      	cmp	r0, #0
 800c026:	d088      	beq.n	800bf3a <pow+0x4a>
 800c028:	f7ff feac 	bl	800bd84 <__errno>
 800c02c:	2322      	movs	r3, #34	; 0x22
 800c02e:	6003      	str	r3, [r0, #0]
 800c030:	2400      	movs	r4, #0
 800c032:	2500      	movs	r5, #0
 800c034:	e781      	b.n	800bf3a <pow+0x4a>
 800c036:	4d04      	ldr	r5, [pc, #16]	; (800c048 <pow+0x158>)
 800c038:	2400      	movs	r4, #0
 800c03a:	e77e      	b.n	800bf3a <pow+0x4a>
 800c03c:	20000288 	.word	0x20000288
 800c040:	fff00000 	.word	0xfff00000
 800c044:	7ff00000 	.word	0x7ff00000
 800c048:	3ff00000 	.word	0x3ff00000

0800c04c <sqrt>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	ed2d 8b02 	vpush	{d8}
 800c052:	ec55 4b10 	vmov	r4, r5, d0
 800c056:	f000 fd51 	bl	800cafc <__ieee754_sqrt>
 800c05a:	4b15      	ldr	r3, [pc, #84]	; (800c0b0 <sqrt+0x64>)
 800c05c:	eeb0 8a40 	vmov.f32	s16, s0
 800c060:	eef0 8a60 	vmov.f32	s17, s1
 800c064:	f993 3000 	ldrsb.w	r3, [r3]
 800c068:	3301      	adds	r3, #1
 800c06a:	d019      	beq.n	800c0a0 <sqrt+0x54>
 800c06c:	4622      	mov	r2, r4
 800c06e:	462b      	mov	r3, r5
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 fd1e 	bl	8000ab4 <__aeabi_dcmpun>
 800c078:	b990      	cbnz	r0, 800c0a0 <sqrt+0x54>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fcef 	bl	8000a64 <__aeabi_dcmplt>
 800c086:	b158      	cbz	r0, 800c0a0 <sqrt+0x54>
 800c088:	f7ff fe7c 	bl	800bd84 <__errno>
 800c08c:	2321      	movs	r3, #33	; 0x21
 800c08e:	6003      	str	r3, [r0, #0]
 800c090:	2200      	movs	r2, #0
 800c092:	2300      	movs	r3, #0
 800c094:	4610      	mov	r0, r2
 800c096:	4619      	mov	r1, r3
 800c098:	f7f4 fb9c 	bl	80007d4 <__aeabi_ddiv>
 800c09c:	ec41 0b18 	vmov	d8, r0, r1
 800c0a0:	eeb0 0a48 	vmov.f32	s0, s16
 800c0a4:	eef0 0a68 	vmov.f32	s1, s17
 800c0a8:	ecbd 8b02 	vpop	{d8}
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000288 	.word	0x20000288
 800c0b4:	00000000 	.word	0x00000000

0800c0b8 <__ieee754_pow>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	ed2d 8b06 	vpush	{d8-d10}
 800c0c0:	b08d      	sub	sp, #52	; 0x34
 800c0c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c0c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c0ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c0ce:	ea56 0100 	orrs.w	r1, r6, r0
 800c0d2:	ec53 2b10 	vmov	r2, r3, d0
 800c0d6:	f000 84d1 	beq.w	800ca7c <__ieee754_pow+0x9c4>
 800c0da:	497f      	ldr	r1, [pc, #508]	; (800c2d8 <__ieee754_pow+0x220>)
 800c0dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c0e0:	428c      	cmp	r4, r1
 800c0e2:	ee10 8a10 	vmov	r8, s0
 800c0e6:	4699      	mov	r9, r3
 800c0e8:	dc09      	bgt.n	800c0fe <__ieee754_pow+0x46>
 800c0ea:	d103      	bne.n	800c0f4 <__ieee754_pow+0x3c>
 800c0ec:	b97a      	cbnz	r2, 800c10e <__ieee754_pow+0x56>
 800c0ee:	42a6      	cmp	r6, r4
 800c0f0:	dd02      	ble.n	800c0f8 <__ieee754_pow+0x40>
 800c0f2:	e00c      	b.n	800c10e <__ieee754_pow+0x56>
 800c0f4:	428e      	cmp	r6, r1
 800c0f6:	dc02      	bgt.n	800c0fe <__ieee754_pow+0x46>
 800c0f8:	428e      	cmp	r6, r1
 800c0fa:	d110      	bne.n	800c11e <__ieee754_pow+0x66>
 800c0fc:	b178      	cbz	r0, 800c11e <__ieee754_pow+0x66>
 800c0fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c102:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c106:	ea54 0308 	orrs.w	r3, r4, r8
 800c10a:	f000 84b7 	beq.w	800ca7c <__ieee754_pow+0x9c4>
 800c10e:	4873      	ldr	r0, [pc, #460]	; (800c2dc <__ieee754_pow+0x224>)
 800c110:	b00d      	add	sp, #52	; 0x34
 800c112:	ecbd 8b06 	vpop	{d8-d10}
 800c116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11a:	f000 bdb9 	b.w	800cc90 <nan>
 800c11e:	f1b9 0f00 	cmp.w	r9, #0
 800c122:	da36      	bge.n	800c192 <__ieee754_pow+0xda>
 800c124:	496e      	ldr	r1, [pc, #440]	; (800c2e0 <__ieee754_pow+0x228>)
 800c126:	428e      	cmp	r6, r1
 800c128:	dc51      	bgt.n	800c1ce <__ieee754_pow+0x116>
 800c12a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c12e:	428e      	cmp	r6, r1
 800c130:	f340 84af 	ble.w	800ca92 <__ieee754_pow+0x9da>
 800c134:	1531      	asrs	r1, r6, #20
 800c136:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c13a:	2914      	cmp	r1, #20
 800c13c:	dd0f      	ble.n	800c15e <__ieee754_pow+0xa6>
 800c13e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c142:	fa20 fc01 	lsr.w	ip, r0, r1
 800c146:	fa0c f101 	lsl.w	r1, ip, r1
 800c14a:	4281      	cmp	r1, r0
 800c14c:	f040 84a1 	bne.w	800ca92 <__ieee754_pow+0x9da>
 800c150:	f00c 0c01 	and.w	ip, ip, #1
 800c154:	f1cc 0102 	rsb	r1, ip, #2
 800c158:	9100      	str	r1, [sp, #0]
 800c15a:	b180      	cbz	r0, 800c17e <__ieee754_pow+0xc6>
 800c15c:	e059      	b.n	800c212 <__ieee754_pow+0x15a>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d155      	bne.n	800c20e <__ieee754_pow+0x156>
 800c162:	f1c1 0114 	rsb	r1, r1, #20
 800c166:	fa46 fc01 	asr.w	ip, r6, r1
 800c16a:	fa0c f101 	lsl.w	r1, ip, r1
 800c16e:	42b1      	cmp	r1, r6
 800c170:	f040 848c 	bne.w	800ca8c <__ieee754_pow+0x9d4>
 800c174:	f00c 0c01 	and.w	ip, ip, #1
 800c178:	f1cc 0102 	rsb	r1, ip, #2
 800c17c:	9100      	str	r1, [sp, #0]
 800c17e:	4959      	ldr	r1, [pc, #356]	; (800c2e4 <__ieee754_pow+0x22c>)
 800c180:	428e      	cmp	r6, r1
 800c182:	d12d      	bne.n	800c1e0 <__ieee754_pow+0x128>
 800c184:	2f00      	cmp	r7, #0
 800c186:	da79      	bge.n	800c27c <__ieee754_pow+0x1c4>
 800c188:	4956      	ldr	r1, [pc, #344]	; (800c2e4 <__ieee754_pow+0x22c>)
 800c18a:	2000      	movs	r0, #0
 800c18c:	f7f4 fb22 	bl	80007d4 <__aeabi_ddiv>
 800c190:	e016      	b.n	800c1c0 <__ieee754_pow+0x108>
 800c192:	2100      	movs	r1, #0
 800c194:	9100      	str	r1, [sp, #0]
 800c196:	2800      	cmp	r0, #0
 800c198:	d13b      	bne.n	800c212 <__ieee754_pow+0x15a>
 800c19a:	494f      	ldr	r1, [pc, #316]	; (800c2d8 <__ieee754_pow+0x220>)
 800c19c:	428e      	cmp	r6, r1
 800c19e:	d1ee      	bne.n	800c17e <__ieee754_pow+0xc6>
 800c1a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c1ac:	f000 8466 	beq.w	800ca7c <__ieee754_pow+0x9c4>
 800c1b0:	4b4d      	ldr	r3, [pc, #308]	; (800c2e8 <__ieee754_pow+0x230>)
 800c1b2:	429c      	cmp	r4, r3
 800c1b4:	dd0d      	ble.n	800c1d2 <__ieee754_pow+0x11a>
 800c1b6:	2f00      	cmp	r7, #0
 800c1b8:	f280 8464 	bge.w	800ca84 <__ieee754_pow+0x9cc>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	2100      	movs	r1, #0
 800c1c0:	ec41 0b10 	vmov	d0, r0, r1
 800c1c4:	b00d      	add	sp, #52	; 0x34
 800c1c6:	ecbd 8b06 	vpop	{d8-d10}
 800c1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ce:	2102      	movs	r1, #2
 800c1d0:	e7e0      	b.n	800c194 <__ieee754_pow+0xdc>
 800c1d2:	2f00      	cmp	r7, #0
 800c1d4:	daf2      	bge.n	800c1bc <__ieee754_pow+0x104>
 800c1d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c1da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1de:	e7ef      	b.n	800c1c0 <__ieee754_pow+0x108>
 800c1e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c1e4:	d104      	bne.n	800c1f0 <__ieee754_pow+0x138>
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7f4 f9c9 	bl	8000580 <__aeabi_dmul>
 800c1ee:	e7e7      	b.n	800c1c0 <__ieee754_pow+0x108>
 800c1f0:	493e      	ldr	r1, [pc, #248]	; (800c2ec <__ieee754_pow+0x234>)
 800c1f2:	428f      	cmp	r7, r1
 800c1f4:	d10d      	bne.n	800c212 <__ieee754_pow+0x15a>
 800c1f6:	f1b9 0f00 	cmp.w	r9, #0
 800c1fa:	db0a      	blt.n	800c212 <__ieee754_pow+0x15a>
 800c1fc:	ec43 2b10 	vmov	d0, r2, r3
 800c200:	b00d      	add	sp, #52	; 0x34
 800c202:	ecbd 8b06 	vpop	{d8-d10}
 800c206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	f000 bc77 	b.w	800cafc <__ieee754_sqrt>
 800c20e:	2100      	movs	r1, #0
 800c210:	9100      	str	r1, [sp, #0]
 800c212:	ec43 2b10 	vmov	d0, r2, r3
 800c216:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c21a:	f000 fd23 	bl	800cc64 <fabs>
 800c21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c222:	ec51 0b10 	vmov	r0, r1, d0
 800c226:	f1b8 0f00 	cmp.w	r8, #0
 800c22a:	d12a      	bne.n	800c282 <__ieee754_pow+0x1ca>
 800c22c:	b12c      	cbz	r4, 800c23a <__ieee754_pow+0x182>
 800c22e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c2e4 <__ieee754_pow+0x22c>
 800c232:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c236:	45e6      	cmp	lr, ip
 800c238:	d123      	bne.n	800c282 <__ieee754_pow+0x1ca>
 800c23a:	2f00      	cmp	r7, #0
 800c23c:	da05      	bge.n	800c24a <__ieee754_pow+0x192>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	2000      	movs	r0, #0
 800c244:	4927      	ldr	r1, [pc, #156]	; (800c2e4 <__ieee754_pow+0x22c>)
 800c246:	f7f4 fac5 	bl	80007d4 <__aeabi_ddiv>
 800c24a:	f1b9 0f00 	cmp.w	r9, #0
 800c24e:	dab7      	bge.n	800c1c0 <__ieee754_pow+0x108>
 800c250:	9b00      	ldr	r3, [sp, #0]
 800c252:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c256:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c25a:	4323      	orrs	r3, r4
 800c25c:	d108      	bne.n	800c270 <__ieee754_pow+0x1b8>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4610      	mov	r0, r2
 800c264:	4619      	mov	r1, r3
 800c266:	f7f3 ffd3 	bl	8000210 <__aeabi_dsub>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	e78d      	b.n	800c18c <__ieee754_pow+0xd4>
 800c270:	9b00      	ldr	r3, [sp, #0]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d1a4      	bne.n	800c1c0 <__ieee754_pow+0x108>
 800c276:	4602      	mov	r2, r0
 800c278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c27c:	4610      	mov	r0, r2
 800c27e:	4619      	mov	r1, r3
 800c280:	e79e      	b.n	800c1c0 <__ieee754_pow+0x108>
 800c282:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c286:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c28a:	950a      	str	r5, [sp, #40]	; 0x28
 800c28c:	9d00      	ldr	r5, [sp, #0]
 800c28e:	46ac      	mov	ip, r5
 800c290:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c292:	ea5c 0505 	orrs.w	r5, ip, r5
 800c296:	d0e4      	beq.n	800c262 <__ieee754_pow+0x1aa>
 800c298:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <__ieee754_pow+0x238>)
 800c29a:	429e      	cmp	r6, r3
 800c29c:	f340 80fc 	ble.w	800c498 <__ieee754_pow+0x3e0>
 800c2a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2a4:	429e      	cmp	r6, r3
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <__ieee754_pow+0x230>)
 800c2a8:	dd07      	ble.n	800c2ba <__ieee754_pow+0x202>
 800c2aa:	429c      	cmp	r4, r3
 800c2ac:	dc0a      	bgt.n	800c2c4 <__ieee754_pow+0x20c>
 800c2ae:	2f00      	cmp	r7, #0
 800c2b0:	da84      	bge.n	800c1bc <__ieee754_pow+0x104>
 800c2b2:	a307      	add	r3, pc, #28	; (adr r3, 800c2d0 <__ieee754_pow+0x218>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	e795      	b.n	800c1e6 <__ieee754_pow+0x12e>
 800c2ba:	429c      	cmp	r4, r3
 800c2bc:	dbf7      	blt.n	800c2ae <__ieee754_pow+0x1f6>
 800c2be:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <__ieee754_pow+0x22c>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	dd17      	ble.n	800c2f4 <__ieee754_pow+0x23c>
 800c2c4:	2f00      	cmp	r7, #0
 800c2c6:	dcf4      	bgt.n	800c2b2 <__ieee754_pow+0x1fa>
 800c2c8:	e778      	b.n	800c1bc <__ieee754_pow+0x104>
 800c2ca:	bf00      	nop
 800c2cc:	f3af 8000 	nop.w
 800c2d0:	8800759c 	.word	0x8800759c
 800c2d4:	7e37e43c 	.word	0x7e37e43c
 800c2d8:	7ff00000 	.word	0x7ff00000
 800c2dc:	0800cef8 	.word	0x0800cef8
 800c2e0:	433fffff 	.word	0x433fffff
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	3fefffff 	.word	0x3fefffff
 800c2ec:	3fe00000 	.word	0x3fe00000
 800c2f0:	41e00000 	.word	0x41e00000
 800c2f4:	4b64      	ldr	r3, [pc, #400]	; (800c488 <__ieee754_pow+0x3d0>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f7f3 ff8a 	bl	8000210 <__aeabi_dsub>
 800c2fc:	a356      	add	r3, pc, #344	; (adr r3, 800c458 <__ieee754_pow+0x3a0>)
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	4604      	mov	r4, r0
 800c304:	460d      	mov	r5, r1
 800c306:	f7f4 f93b 	bl	8000580 <__aeabi_dmul>
 800c30a:	a355      	add	r3, pc, #340	; (adr r3, 800c460 <__ieee754_pow+0x3a8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f7f4 f932 	bl	8000580 <__aeabi_dmul>
 800c31c:	4b5b      	ldr	r3, [pc, #364]	; (800c48c <__ieee754_pow+0x3d4>)
 800c31e:	4682      	mov	sl, r0
 800c320:	468b      	mov	fp, r1
 800c322:	2200      	movs	r2, #0
 800c324:	4620      	mov	r0, r4
 800c326:	4629      	mov	r1, r5
 800c328:	f7f4 f92a 	bl	8000580 <__aeabi_dmul>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	a14d      	add	r1, pc, #308	; (adr r1, 800c468 <__ieee754_pow+0x3b0>)
 800c332:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c336:	f7f3 ff6b 	bl	8000210 <__aeabi_dsub>
 800c33a:	4622      	mov	r2, r4
 800c33c:	462b      	mov	r3, r5
 800c33e:	f7f4 f91f 	bl	8000580 <__aeabi_dmul>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	2000      	movs	r0, #0
 800c348:	4951      	ldr	r1, [pc, #324]	; (800c490 <__ieee754_pow+0x3d8>)
 800c34a:	f7f3 ff61 	bl	8000210 <__aeabi_dsub>
 800c34e:	4622      	mov	r2, r4
 800c350:	4680      	mov	r8, r0
 800c352:	4689      	mov	r9, r1
 800c354:	462b      	mov	r3, r5
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 f911 	bl	8000580 <__aeabi_dmul>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f4 f90b 	bl	8000580 <__aeabi_dmul>
 800c36a:	a341      	add	r3, pc, #260	; (adr r3, 800c470 <__ieee754_pow+0x3b8>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	f7f4 f906 	bl	8000580 <__aeabi_dmul>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	4650      	mov	r0, sl
 800c37a:	4659      	mov	r1, fp
 800c37c:	f7f3 ff48 	bl	8000210 <__aeabi_dsub>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4680      	mov	r8, r0
 800c386:	4689      	mov	r9, r1
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f3 ff42 	bl	8000214 <__adddf3>
 800c390:	2400      	movs	r4, #0
 800c392:	4632      	mov	r2, r6
 800c394:	463b      	mov	r3, r7
 800c396:	4620      	mov	r0, r4
 800c398:	460d      	mov	r5, r1
 800c39a:	f7f3 ff39 	bl	8000210 <__aeabi_dsub>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	f7f3 ff33 	bl	8000210 <__aeabi_dsub>
 800c3aa:	9b00      	ldr	r3, [sp, #0]
 800c3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	468b      	mov	fp, r1
 800c3b6:	f040 81f1 	bne.w	800c79c <__ieee754_pow+0x6e4>
 800c3ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c478 <__ieee754_pow+0x3c0>
 800c3be:	eeb0 8a47 	vmov.f32	s16, s14
 800c3c2:	eef0 8a67 	vmov.f32	s17, s15
 800c3c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3ca:	2600      	movs	r6, #0
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	463b      	mov	r3, r7
 800c3d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d4:	f7f3 ff1c 	bl	8000210 <__aeabi_dsub>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	f7f4 f8d0 	bl	8000580 <__aeabi_dmul>
 800c3e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	4689      	mov	r9, r1
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	4659      	mov	r1, fp
 800c3ec:	f7f4 f8c8 	bl	8000580 <__aeabi_dmul>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	f7f3 ff0c 	bl	8000214 <__adddf3>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	4680      	mov	r8, r0
 800c402:	4689      	mov	r9, r1
 800c404:	4620      	mov	r0, r4
 800c406:	4629      	mov	r1, r5
 800c408:	f7f4 f8ba 	bl	8000580 <__aeabi_dmul>
 800c40c:	460b      	mov	r3, r1
 800c40e:	4604      	mov	r4, r0
 800c410:	460d      	mov	r5, r1
 800c412:	4602      	mov	r2, r0
 800c414:	4649      	mov	r1, r9
 800c416:	4640      	mov	r0, r8
 800c418:	f7f3 fefc 	bl	8000214 <__adddf3>
 800c41c:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <__ieee754_pow+0x3dc>)
 800c41e:	4299      	cmp	r1, r3
 800c420:	ec45 4b19 	vmov	d9, r4, r5
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	468b      	mov	fp, r1
 800c42a:	f340 82fe 	ble.w	800ca2a <__ieee754_pow+0x972>
 800c42e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c432:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c436:	4303      	orrs	r3, r0
 800c438:	f000 81f0 	beq.w	800c81c <__ieee754_pow+0x764>
 800c43c:	a310      	add	r3, pc, #64	; (adr r3, 800c480 <__ieee754_pow+0x3c8>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	ec51 0b18 	vmov	r0, r1, d8
 800c446:	f7f4 f89b 	bl	8000580 <__aeabi_dmul>
 800c44a:	a30d      	add	r3, pc, #52	; (adr r3, 800c480 <__ieee754_pow+0x3c8>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	e6cb      	b.n	800c1ea <__ieee754_pow+0x132>
 800c452:	bf00      	nop
 800c454:	f3af 8000 	nop.w
 800c458:	60000000 	.word	0x60000000
 800c45c:	3ff71547 	.word	0x3ff71547
 800c460:	f85ddf44 	.word	0xf85ddf44
 800c464:	3e54ae0b 	.word	0x3e54ae0b
 800c468:	55555555 	.word	0x55555555
 800c46c:	3fd55555 	.word	0x3fd55555
 800c470:	652b82fe 	.word	0x652b82fe
 800c474:	3ff71547 	.word	0x3ff71547
 800c478:	00000000 	.word	0x00000000
 800c47c:	bff00000 	.word	0xbff00000
 800c480:	8800759c 	.word	0x8800759c
 800c484:	7e37e43c 	.word	0x7e37e43c
 800c488:	3ff00000 	.word	0x3ff00000
 800c48c:	3fd00000 	.word	0x3fd00000
 800c490:	3fe00000 	.word	0x3fe00000
 800c494:	408fffff 	.word	0x408fffff
 800c498:	4bd7      	ldr	r3, [pc, #860]	; (800c7f8 <__ieee754_pow+0x740>)
 800c49a:	ea03 0309 	and.w	r3, r3, r9
 800c49e:	2200      	movs	r2, #0
 800c4a0:	b92b      	cbnz	r3, 800c4ae <__ieee754_pow+0x3f6>
 800c4a2:	4bd6      	ldr	r3, [pc, #856]	; (800c7fc <__ieee754_pow+0x744>)
 800c4a4:	f7f4 f86c 	bl	8000580 <__aeabi_dmul>
 800c4a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	1523      	asrs	r3, r4, #20
 800c4b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4b4:	4413      	add	r3, r2
 800c4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b8:	4bd1      	ldr	r3, [pc, #836]	; (800c800 <__ieee754_pow+0x748>)
 800c4ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4c2:	429c      	cmp	r4, r3
 800c4c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4c8:	dd08      	ble.n	800c4dc <__ieee754_pow+0x424>
 800c4ca:	4bce      	ldr	r3, [pc, #824]	; (800c804 <__ieee754_pow+0x74c>)
 800c4cc:	429c      	cmp	r4, r3
 800c4ce:	f340 8163 	ble.w	800c798 <__ieee754_pow+0x6e0>
 800c4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c4dc:	2400      	movs	r4, #0
 800c4de:	00e3      	lsls	r3, r4, #3
 800c4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e2:	4bc9      	ldr	r3, [pc, #804]	; (800c808 <__ieee754_pow+0x750>)
 800c4e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4e8:	ed93 7b00 	vldr	d7, [r3]
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	ec53 2b17 	vmov	r2, r3, d7
 800c4f2:	eeb0 8a47 	vmov.f32	s16, s14
 800c4f6:	eef0 8a67 	vmov.f32	s17, s15
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	f7f3 fe88 	bl	8000210 <__aeabi_dsub>
 800c500:	4652      	mov	r2, sl
 800c502:	4606      	mov	r6, r0
 800c504:	460f      	mov	r7, r1
 800c506:	462b      	mov	r3, r5
 800c508:	ec51 0b18 	vmov	r0, r1, d8
 800c50c:	f7f3 fe82 	bl	8000214 <__adddf3>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	2000      	movs	r0, #0
 800c516:	49bd      	ldr	r1, [pc, #756]	; (800c80c <__ieee754_pow+0x754>)
 800c518:	f7f4 f95c 	bl	80007d4 <__aeabi_ddiv>
 800c51c:	ec41 0b19 	vmov	d9, r0, r1
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f4 f82a 	bl	8000580 <__aeabi_dmul>
 800c52c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c538:	2300      	movs	r3, #0
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c540:	46ab      	mov	fp, r5
 800c542:	106d      	asrs	r5, r5, #1
 800c544:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c548:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c54c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c550:	2200      	movs	r2, #0
 800c552:	4640      	mov	r0, r8
 800c554:	4649      	mov	r1, r9
 800c556:	4614      	mov	r4, r2
 800c558:	461d      	mov	r5, r3
 800c55a:	f7f4 f811 	bl	8000580 <__aeabi_dmul>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	f7f3 fe53 	bl	8000210 <__aeabi_dsub>
 800c56a:	ec53 2b18 	vmov	r2, r3, d8
 800c56e:	4606      	mov	r6, r0
 800c570:	460f      	mov	r7, r1
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	f7f3 fe4b 	bl	8000210 <__aeabi_dsub>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4650      	mov	r0, sl
 800c580:	4659      	mov	r1, fp
 800c582:	f7f3 fe45 	bl	8000210 <__aeabi_dsub>
 800c586:	4642      	mov	r2, r8
 800c588:	464b      	mov	r3, r9
 800c58a:	f7f3 fff9 	bl	8000580 <__aeabi_dmul>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4630      	mov	r0, r6
 800c594:	4639      	mov	r1, r7
 800c596:	f7f3 fe3b 	bl	8000210 <__aeabi_dsub>
 800c59a:	ec53 2b19 	vmov	r2, r3, d9
 800c59e:	f7f3 ffef 	bl	8000580 <__aeabi_dmul>
 800c5a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5a6:	ec41 0b18 	vmov	d8, r0, r1
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	f7f3 ffe7 	bl	8000580 <__aeabi_dmul>
 800c5b2:	a37d      	add	r3, pc, #500	; (adr r3, 800c7a8 <__ieee754_pow+0x6f0>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	460d      	mov	r5, r1
 800c5bc:	f7f3 ffe0 	bl	8000580 <__aeabi_dmul>
 800c5c0:	a37b      	add	r3, pc, #492	; (adr r3, 800c7b0 <__ieee754_pow+0x6f8>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe25 	bl	8000214 <__adddf3>
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	f7f3 ffd7 	bl	8000580 <__aeabi_dmul>
 800c5d2:	a379      	add	r3, pc, #484	; (adr r3, 800c7b8 <__ieee754_pow+0x700>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe1c 	bl	8000214 <__adddf3>
 800c5dc:	4622      	mov	r2, r4
 800c5de:	462b      	mov	r3, r5
 800c5e0:	f7f3 ffce 	bl	8000580 <__aeabi_dmul>
 800c5e4:	a376      	add	r3, pc, #472	; (adr r3, 800c7c0 <__ieee754_pow+0x708>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fe13 	bl	8000214 <__adddf3>
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	f7f3 ffc5 	bl	8000580 <__aeabi_dmul>
 800c5f6:	a374      	add	r3, pc, #464	; (adr r3, 800c7c8 <__ieee754_pow+0x710>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f3 fe0a 	bl	8000214 <__adddf3>
 800c600:	4622      	mov	r2, r4
 800c602:	462b      	mov	r3, r5
 800c604:	f7f3 ffbc 	bl	8000580 <__aeabi_dmul>
 800c608:	a371      	add	r3, pc, #452	; (adr r3, 800c7d0 <__ieee754_pow+0x718>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f7f3 fe01 	bl	8000214 <__adddf3>
 800c612:	4622      	mov	r2, r4
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	462b      	mov	r3, r5
 800c61a:	4620      	mov	r0, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	f7f3 ffaf 	bl	8000580 <__aeabi_dmul>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4630      	mov	r0, r6
 800c628:	4639      	mov	r1, r7
 800c62a:	f7f3 ffa9 	bl	8000580 <__aeabi_dmul>
 800c62e:	4642      	mov	r2, r8
 800c630:	4604      	mov	r4, r0
 800c632:	460d      	mov	r5, r1
 800c634:	464b      	mov	r3, r9
 800c636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c63a:	f7f3 fdeb 	bl	8000214 <__adddf3>
 800c63e:	ec53 2b18 	vmov	r2, r3, d8
 800c642:	f7f3 ff9d 	bl	8000580 <__aeabi_dmul>
 800c646:	4622      	mov	r2, r4
 800c648:	462b      	mov	r3, r5
 800c64a:	f7f3 fde3 	bl	8000214 <__adddf3>
 800c64e:	4642      	mov	r2, r8
 800c650:	4682      	mov	sl, r0
 800c652:	468b      	mov	fp, r1
 800c654:	464b      	mov	r3, r9
 800c656:	4640      	mov	r0, r8
 800c658:	4649      	mov	r1, r9
 800c65a:	f7f3 ff91 	bl	8000580 <__aeabi_dmul>
 800c65e:	4b6c      	ldr	r3, [pc, #432]	; (800c810 <__ieee754_pow+0x758>)
 800c660:	2200      	movs	r2, #0
 800c662:	4606      	mov	r6, r0
 800c664:	460f      	mov	r7, r1
 800c666:	f7f3 fdd5 	bl	8000214 <__adddf3>
 800c66a:	4652      	mov	r2, sl
 800c66c:	465b      	mov	r3, fp
 800c66e:	f7f3 fdd1 	bl	8000214 <__adddf3>
 800c672:	9c04      	ldr	r4, [sp, #16]
 800c674:	460d      	mov	r5, r1
 800c676:	4622      	mov	r2, r4
 800c678:	460b      	mov	r3, r1
 800c67a:	4640      	mov	r0, r8
 800c67c:	4649      	mov	r1, r9
 800c67e:	f7f3 ff7f 	bl	8000580 <__aeabi_dmul>
 800c682:	4b63      	ldr	r3, [pc, #396]	; (800c810 <__ieee754_pow+0x758>)
 800c684:	4680      	mov	r8, r0
 800c686:	4689      	mov	r9, r1
 800c688:	2200      	movs	r2, #0
 800c68a:	4620      	mov	r0, r4
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7f3 fdbf 	bl	8000210 <__aeabi_dsub>
 800c692:	4632      	mov	r2, r6
 800c694:	463b      	mov	r3, r7
 800c696:	f7f3 fdbb 	bl	8000210 <__aeabi_dsub>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4650      	mov	r0, sl
 800c6a0:	4659      	mov	r1, fp
 800c6a2:	f7f3 fdb5 	bl	8000210 <__aeabi_dsub>
 800c6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6aa:	f7f3 ff69 	bl	8000580 <__aeabi_dmul>
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	462b      	mov	r3, r5
 800c6b6:	ec51 0b18 	vmov	r0, r1, d8
 800c6ba:	f7f3 ff61 	bl	8000580 <__aeabi_dmul>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	4639      	mov	r1, r7
 800c6c6:	f7f3 fda5 	bl	8000214 <__adddf3>
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460f      	mov	r7, r1
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	f7f3 fd9d 	bl	8000214 <__adddf3>
 800c6da:	9c04      	ldr	r4, [sp, #16]
 800c6dc:	a33e      	add	r3, pc, #248	; (adr r3, 800c7d8 <__ieee754_pow+0x720>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	f7f3 ff4b 	bl	8000580 <__aeabi_dmul>
 800c6ea:	4642      	mov	r2, r8
 800c6ec:	ec41 0b18 	vmov	d8, r0, r1
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f3 fd8b 	bl	8000210 <__aeabi_dsub>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4630      	mov	r0, r6
 800c700:	4639      	mov	r1, r7
 800c702:	f7f3 fd85 	bl	8000210 <__aeabi_dsub>
 800c706:	a336      	add	r3, pc, #216	; (adr r3, 800c7e0 <__ieee754_pow+0x728>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	f7f3 ff38 	bl	8000580 <__aeabi_dmul>
 800c710:	a335      	add	r3, pc, #212	; (adr r3, 800c7e8 <__ieee754_pow+0x730>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7f3 ff2f 	bl	8000580 <__aeabi_dmul>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f3 fd73 	bl	8000214 <__adddf3>
 800c72e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c730:	4b38      	ldr	r3, [pc, #224]	; (800c814 <__ieee754_pow+0x75c>)
 800c732:	4413      	add	r3, r2
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fd6c 	bl	8000214 <__adddf3>
 800c73c:	4682      	mov	sl, r0
 800c73e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c740:	468b      	mov	fp, r1
 800c742:	f7f3 feb3 	bl	80004ac <__aeabi_i2d>
 800c746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c748:	4b33      	ldr	r3, [pc, #204]	; (800c818 <__ieee754_pow+0x760>)
 800c74a:	4413      	add	r3, r2
 800c74c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c750:	4606      	mov	r6, r0
 800c752:	460f      	mov	r7, r1
 800c754:	4652      	mov	r2, sl
 800c756:	465b      	mov	r3, fp
 800c758:	ec51 0b18 	vmov	r0, r1, d8
 800c75c:	f7f3 fd5a 	bl	8000214 <__adddf3>
 800c760:	4642      	mov	r2, r8
 800c762:	464b      	mov	r3, r9
 800c764:	f7f3 fd56 	bl	8000214 <__adddf3>
 800c768:	4632      	mov	r2, r6
 800c76a:	463b      	mov	r3, r7
 800c76c:	f7f3 fd52 	bl	8000214 <__adddf3>
 800c770:	9c04      	ldr	r4, [sp, #16]
 800c772:	4632      	mov	r2, r6
 800c774:	463b      	mov	r3, r7
 800c776:	4620      	mov	r0, r4
 800c778:	460d      	mov	r5, r1
 800c77a:	f7f3 fd49 	bl	8000210 <__aeabi_dsub>
 800c77e:	4642      	mov	r2, r8
 800c780:	464b      	mov	r3, r9
 800c782:	f7f3 fd45 	bl	8000210 <__aeabi_dsub>
 800c786:	ec53 2b18 	vmov	r2, r3, d8
 800c78a:	f7f3 fd41 	bl	8000210 <__aeabi_dsub>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4650      	mov	r0, sl
 800c794:	4659      	mov	r1, fp
 800c796:	e606      	b.n	800c3a6 <__ieee754_pow+0x2ee>
 800c798:	2401      	movs	r4, #1
 800c79a:	e6a0      	b.n	800c4de <__ieee754_pow+0x426>
 800c79c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c7f0 <__ieee754_pow+0x738>
 800c7a0:	e60d      	b.n	800c3be <__ieee754_pow+0x306>
 800c7a2:	bf00      	nop
 800c7a4:	f3af 8000 	nop.w
 800c7a8:	4a454eef 	.word	0x4a454eef
 800c7ac:	3fca7e28 	.word	0x3fca7e28
 800c7b0:	93c9db65 	.word	0x93c9db65
 800c7b4:	3fcd864a 	.word	0x3fcd864a
 800c7b8:	a91d4101 	.word	0xa91d4101
 800c7bc:	3fd17460 	.word	0x3fd17460
 800c7c0:	518f264d 	.word	0x518f264d
 800c7c4:	3fd55555 	.word	0x3fd55555
 800c7c8:	db6fabff 	.word	0xdb6fabff
 800c7cc:	3fdb6db6 	.word	0x3fdb6db6
 800c7d0:	33333303 	.word	0x33333303
 800c7d4:	3fe33333 	.word	0x3fe33333
 800c7d8:	e0000000 	.word	0xe0000000
 800c7dc:	3feec709 	.word	0x3feec709
 800c7e0:	dc3a03fd 	.word	0xdc3a03fd
 800c7e4:	3feec709 	.word	0x3feec709
 800c7e8:	145b01f5 	.word	0x145b01f5
 800c7ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c7f0:	00000000 	.word	0x00000000
 800c7f4:	3ff00000 	.word	0x3ff00000
 800c7f8:	7ff00000 	.word	0x7ff00000
 800c7fc:	43400000 	.word	0x43400000
 800c800:	0003988e 	.word	0x0003988e
 800c804:	000bb679 	.word	0x000bb679
 800c808:	0800cf00 	.word	0x0800cf00
 800c80c:	3ff00000 	.word	0x3ff00000
 800c810:	40080000 	.word	0x40080000
 800c814:	0800cf20 	.word	0x0800cf20
 800c818:	0800cf10 	.word	0x0800cf10
 800c81c:	a3b5      	add	r3, pc, #724	; (adr r3, 800caf4 <__ieee754_pow+0xa3c>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 fcf5 	bl	8000214 <__adddf3>
 800c82a:	4622      	mov	r2, r4
 800c82c:	ec41 0b1a 	vmov	d10, r0, r1
 800c830:	462b      	mov	r3, r5
 800c832:	4630      	mov	r0, r6
 800c834:	4639      	mov	r1, r7
 800c836:	f7f3 fceb 	bl	8000210 <__aeabi_dsub>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	ec51 0b1a 	vmov	r0, r1, d10
 800c842:	f7f4 f92d 	bl	8000aa0 <__aeabi_dcmpgt>
 800c846:	2800      	cmp	r0, #0
 800c848:	f47f adf8 	bne.w	800c43c <__ieee754_pow+0x384>
 800c84c:	4aa4      	ldr	r2, [pc, #656]	; (800cae0 <__ieee754_pow+0xa28>)
 800c84e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c852:	4293      	cmp	r3, r2
 800c854:	f340 810b 	ble.w	800ca6e <__ieee754_pow+0x9b6>
 800c858:	151b      	asrs	r3, r3, #20
 800c85a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c85e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c862:	fa4a f303 	asr.w	r3, sl, r3
 800c866:	445b      	add	r3, fp
 800c868:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c86c:	4e9d      	ldr	r6, [pc, #628]	; (800cae4 <__ieee754_pow+0xa2c>)
 800c86e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c872:	4116      	asrs	r6, r2
 800c874:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c878:	2000      	movs	r0, #0
 800c87a:	ea23 0106 	bic.w	r1, r3, r6
 800c87e:	f1c2 0214 	rsb	r2, r2, #20
 800c882:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c886:	fa4a fa02 	asr.w	sl, sl, r2
 800c88a:	f1bb 0f00 	cmp.w	fp, #0
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	bfb8      	it	lt
 800c898:	f1ca 0a00 	rsblt	sl, sl, #0
 800c89c:	f7f3 fcb8 	bl	8000210 <__aeabi_dsub>
 800c8a0:	ec41 0b19 	vmov	d9, r0, r1
 800c8a4:	4642      	mov	r2, r8
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	ec51 0b19 	vmov	r0, r1, d9
 800c8ac:	f7f3 fcb2 	bl	8000214 <__adddf3>
 800c8b0:	2400      	movs	r4, #0
 800c8b2:	a379      	add	r3, pc, #484	; (adr r3, 800ca98 <__ieee754_pow+0x9e0>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	f7f3 fe60 	bl	8000580 <__aeabi_dmul>
 800c8c0:	ec53 2b19 	vmov	r2, r3, d9
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	460f      	mov	r7, r1
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7f3 fca0 	bl	8000210 <__aeabi_dsub>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	f7f3 fc9a 	bl	8000210 <__aeabi_dsub>
 800c8dc:	a370      	add	r3, pc, #448	; (adr r3, 800caa0 <__ieee754_pow+0x9e8>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fe4d 	bl	8000580 <__aeabi_dmul>
 800c8e6:	a370      	add	r3, pc, #448	; (adr r3, 800caa8 <__ieee754_pow+0x9f0>)
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fe44 	bl	8000580 <__aeabi_dmul>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f3 fc88 	bl	8000214 <__adddf3>
 800c904:	4604      	mov	r4, r0
 800c906:	460d      	mov	r5, r1
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	f7f3 fc80 	bl	8000214 <__adddf3>
 800c914:	4632      	mov	r2, r6
 800c916:	463b      	mov	r3, r7
 800c918:	4680      	mov	r8, r0
 800c91a:	4689      	mov	r9, r1
 800c91c:	f7f3 fc78 	bl	8000210 <__aeabi_dsub>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fc72 	bl	8000210 <__aeabi_dsub>
 800c92c:	4642      	mov	r2, r8
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	464b      	mov	r3, r9
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	f7f3 fe22 	bl	8000580 <__aeabi_dmul>
 800c93c:	a35c      	add	r3, pc, #368	; (adr r3, 800cab0 <__ieee754_pow+0x9f8>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	4604      	mov	r4, r0
 800c944:	460d      	mov	r5, r1
 800c946:	f7f3 fe1b 	bl	8000580 <__aeabi_dmul>
 800c94a:	a35b      	add	r3, pc, #364	; (adr r3, 800cab8 <__ieee754_pow+0xa00>)
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	f7f3 fc5e 	bl	8000210 <__aeabi_dsub>
 800c954:	4622      	mov	r2, r4
 800c956:	462b      	mov	r3, r5
 800c958:	f7f3 fe12 	bl	8000580 <__aeabi_dmul>
 800c95c:	a358      	add	r3, pc, #352	; (adr r3, 800cac0 <__ieee754_pow+0xa08>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fc57 	bl	8000214 <__adddf3>
 800c966:	4622      	mov	r2, r4
 800c968:	462b      	mov	r3, r5
 800c96a:	f7f3 fe09 	bl	8000580 <__aeabi_dmul>
 800c96e:	a356      	add	r3, pc, #344	; (adr r3, 800cac8 <__ieee754_pow+0xa10>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f7f3 fc4c 	bl	8000210 <__aeabi_dsub>
 800c978:	4622      	mov	r2, r4
 800c97a:	462b      	mov	r3, r5
 800c97c:	f7f3 fe00 	bl	8000580 <__aeabi_dmul>
 800c980:	a353      	add	r3, pc, #332	; (adr r3, 800cad0 <__ieee754_pow+0xa18>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fc45 	bl	8000214 <__adddf3>
 800c98a:	4622      	mov	r2, r4
 800c98c:	462b      	mov	r3, r5
 800c98e:	f7f3 fdf7 	bl	8000580 <__aeabi_dmul>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f3 fc39 	bl	8000210 <__aeabi_dsub>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f3 fde9 	bl	8000580 <__aeabi_dmul>
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	ec41 0b19 	vmov	d9, r0, r1
 800c9b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f7f3 fc28 	bl	8000210 <__aeabi_dsub>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	ec51 0b19 	vmov	r0, r1, d9
 800c9c8:	f7f3 ff04 	bl	80007d4 <__aeabi_ddiv>
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	f7f3 fdd2 	bl	8000580 <__aeabi_dmul>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	f7f3 fc18 	bl	8000214 <__adddf3>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f3 fc10 	bl	8000210 <__aeabi_dsub>
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	f7f3 fc0c 	bl	8000210 <__aeabi_dsub>
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	493a      	ldr	r1, [pc, #232]	; (800cae8 <__ieee754_pow+0xa30>)
 800c9fe:	2000      	movs	r0, #0
 800ca00:	f7f3 fc06 	bl	8000210 <__aeabi_dsub>
 800ca04:	e9cd 0100 	strd	r0, r1, [sp]
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca12:	da2f      	bge.n	800ca74 <__ieee754_pow+0x9bc>
 800ca14:	4650      	mov	r0, sl
 800ca16:	ed9d 0b00 	vldr	d0, [sp]
 800ca1a:	f000 f9cd 	bl	800cdb8 <scalbn>
 800ca1e:	ec51 0b10 	vmov	r0, r1, d0
 800ca22:	ec53 2b18 	vmov	r2, r3, d8
 800ca26:	f7ff bbe0 	b.w	800c1ea <__ieee754_pow+0x132>
 800ca2a:	4b30      	ldr	r3, [pc, #192]	; (800caec <__ieee754_pow+0xa34>)
 800ca2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca30:	429e      	cmp	r6, r3
 800ca32:	f77f af0b 	ble.w	800c84c <__ieee754_pow+0x794>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <__ieee754_pow+0xa38>)
 800ca38:	440b      	add	r3, r1
 800ca3a:	4303      	orrs	r3, r0
 800ca3c:	d00b      	beq.n	800ca56 <__ieee754_pow+0x99e>
 800ca3e:	a326      	add	r3, pc, #152	; (adr r3, 800cad8 <__ieee754_pow+0xa20>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	ec51 0b18 	vmov	r0, r1, d8
 800ca48:	f7f3 fd9a 	bl	8000580 <__aeabi_dmul>
 800ca4c:	a322      	add	r3, pc, #136	; (adr r3, 800cad8 <__ieee754_pow+0xa20>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f7ff bbca 	b.w	800c1ea <__ieee754_pow+0x132>
 800ca56:	4622      	mov	r2, r4
 800ca58:	462b      	mov	r3, r5
 800ca5a:	f7f3 fbd9 	bl	8000210 <__aeabi_dsub>
 800ca5e:	4642      	mov	r2, r8
 800ca60:	464b      	mov	r3, r9
 800ca62:	f7f4 f813 	bl	8000a8c <__aeabi_dcmpge>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f aef0 	beq.w	800c84c <__ieee754_pow+0x794>
 800ca6c:	e7e7      	b.n	800ca3e <__ieee754_pow+0x986>
 800ca6e:	f04f 0a00 	mov.w	sl, #0
 800ca72:	e717      	b.n	800c8a4 <__ieee754_pow+0x7ec>
 800ca74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	e7d2      	b.n	800ca22 <__ieee754_pow+0x96a>
 800ca7c:	491a      	ldr	r1, [pc, #104]	; (800cae8 <__ieee754_pow+0xa30>)
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7ff bb9e 	b.w	800c1c0 <__ieee754_pow+0x108>
 800ca84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca88:	f7ff bb9a 	b.w	800c1c0 <__ieee754_pow+0x108>
 800ca8c:	9000      	str	r0, [sp, #0]
 800ca8e:	f7ff bb76 	b.w	800c17e <__ieee754_pow+0xc6>
 800ca92:	2100      	movs	r1, #0
 800ca94:	f7ff bb60 	b.w	800c158 <__ieee754_pow+0xa0>
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	3fe62e43 	.word	0x3fe62e43
 800caa0:	fefa39ef 	.word	0xfefa39ef
 800caa4:	3fe62e42 	.word	0x3fe62e42
 800caa8:	0ca86c39 	.word	0x0ca86c39
 800caac:	be205c61 	.word	0xbe205c61
 800cab0:	72bea4d0 	.word	0x72bea4d0
 800cab4:	3e663769 	.word	0x3e663769
 800cab8:	c5d26bf1 	.word	0xc5d26bf1
 800cabc:	3ebbbd41 	.word	0x3ebbbd41
 800cac0:	af25de2c 	.word	0xaf25de2c
 800cac4:	3f11566a 	.word	0x3f11566a
 800cac8:	16bebd93 	.word	0x16bebd93
 800cacc:	3f66c16c 	.word	0x3f66c16c
 800cad0:	5555553e 	.word	0x5555553e
 800cad4:	3fc55555 	.word	0x3fc55555
 800cad8:	c2f8f359 	.word	0xc2f8f359
 800cadc:	01a56e1f 	.word	0x01a56e1f
 800cae0:	3fe00000 	.word	0x3fe00000
 800cae4:	000fffff 	.word	0x000fffff
 800cae8:	3ff00000 	.word	0x3ff00000
 800caec:	4090cbff 	.word	0x4090cbff
 800caf0:	3f6f3400 	.word	0x3f6f3400
 800caf4:	652b82fe 	.word	0x652b82fe
 800caf8:	3c971547 	.word	0x3c971547

0800cafc <__ieee754_sqrt>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	ec55 4b10 	vmov	r4, r5, d0
 800cb04:	4e56      	ldr	r6, [pc, #344]	; (800cc60 <__ieee754_sqrt+0x164>)
 800cb06:	43ae      	bics	r6, r5
 800cb08:	ee10 0a10 	vmov	r0, s0
 800cb0c:	ee10 3a10 	vmov	r3, s0
 800cb10:	4629      	mov	r1, r5
 800cb12:	462a      	mov	r2, r5
 800cb14:	d110      	bne.n	800cb38 <__ieee754_sqrt+0x3c>
 800cb16:	ee10 2a10 	vmov	r2, s0
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	f7f3 fd30 	bl	8000580 <__aeabi_dmul>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4620      	mov	r0, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	f7f3 fb74 	bl	8000214 <__adddf3>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	ec45 4b10 	vmov	d0, r4, r5
 800cb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	dc10      	bgt.n	800cb5e <__ieee754_sqrt+0x62>
 800cb3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb40:	4330      	orrs	r0, r6
 800cb42:	d0f5      	beq.n	800cb30 <__ieee754_sqrt+0x34>
 800cb44:	b15d      	cbz	r5, 800cb5e <__ieee754_sqrt+0x62>
 800cb46:	ee10 2a10 	vmov	r2, s0
 800cb4a:	462b      	mov	r3, r5
 800cb4c:	ee10 0a10 	vmov	r0, s0
 800cb50:	f7f3 fb5e 	bl	8000210 <__aeabi_dsub>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	f7f3 fe3c 	bl	80007d4 <__aeabi_ddiv>
 800cb5c:	e7e6      	b.n	800cb2c <__ieee754_sqrt+0x30>
 800cb5e:	1509      	asrs	r1, r1, #20
 800cb60:	d076      	beq.n	800cc50 <__ieee754_sqrt+0x154>
 800cb62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cb66:	07ce      	lsls	r6, r1, #31
 800cb68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cb6c:	bf5e      	ittt	pl
 800cb6e:	0fda      	lsrpl	r2, r3, #31
 800cb70:	005b      	lslpl	r3, r3, #1
 800cb72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cb76:	0fda      	lsrs	r2, r3, #31
 800cb78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cb7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cb80:	2000      	movs	r0, #0
 800cb82:	106d      	asrs	r5, r5, #1
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	f04f 0e16 	mov.w	lr, #22
 800cb8a:	4684      	mov	ip, r0
 800cb8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb90:	eb0c 0401 	add.w	r4, ip, r1
 800cb94:	4294      	cmp	r4, r2
 800cb96:	bfde      	ittt	le
 800cb98:	1b12      	suble	r2, r2, r4
 800cb9a:	eb04 0c01 	addle.w	ip, r4, r1
 800cb9e:	1840      	addle	r0, r0, r1
 800cba0:	0052      	lsls	r2, r2, #1
 800cba2:	f1be 0e01 	subs.w	lr, lr, #1
 800cba6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cbae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbb2:	d1ed      	bne.n	800cb90 <__ieee754_sqrt+0x94>
 800cbb4:	4671      	mov	r1, lr
 800cbb6:	2720      	movs	r7, #32
 800cbb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cbbc:	4562      	cmp	r2, ip
 800cbbe:	eb04 060e 	add.w	r6, r4, lr
 800cbc2:	dc02      	bgt.n	800cbca <__ieee754_sqrt+0xce>
 800cbc4:	d113      	bne.n	800cbee <__ieee754_sqrt+0xf2>
 800cbc6:	429e      	cmp	r6, r3
 800cbc8:	d811      	bhi.n	800cbee <__ieee754_sqrt+0xf2>
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	eb06 0e04 	add.w	lr, r6, r4
 800cbd0:	da43      	bge.n	800cc5a <__ieee754_sqrt+0x15e>
 800cbd2:	f1be 0f00 	cmp.w	lr, #0
 800cbd6:	db40      	blt.n	800cc5a <__ieee754_sqrt+0x15e>
 800cbd8:	f10c 0801 	add.w	r8, ip, #1
 800cbdc:	eba2 020c 	sub.w	r2, r2, ip
 800cbe0:	429e      	cmp	r6, r3
 800cbe2:	bf88      	it	hi
 800cbe4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cbe8:	1b9b      	subs	r3, r3, r6
 800cbea:	4421      	add	r1, r4
 800cbec:	46c4      	mov	ip, r8
 800cbee:	0052      	lsls	r2, r2, #1
 800cbf0:	3f01      	subs	r7, #1
 800cbf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cbfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbfe:	d1dd      	bne.n	800cbbc <__ieee754_sqrt+0xc0>
 800cc00:	4313      	orrs	r3, r2
 800cc02:	d006      	beq.n	800cc12 <__ieee754_sqrt+0x116>
 800cc04:	1c4c      	adds	r4, r1, #1
 800cc06:	bf13      	iteet	ne
 800cc08:	3101      	addne	r1, #1
 800cc0a:	3001      	addeq	r0, #1
 800cc0c:	4639      	moveq	r1, r7
 800cc0e:	f021 0101 	bicne.w	r1, r1, #1
 800cc12:	1043      	asrs	r3, r0, #1
 800cc14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc18:	0849      	lsrs	r1, r1, #1
 800cc1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc1e:	07c2      	lsls	r2, r0, #31
 800cc20:	bf48      	it	mi
 800cc22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	463d      	mov	r5, r7
 800cc2e:	e77f      	b.n	800cb30 <__ieee754_sqrt+0x34>
 800cc30:	0ada      	lsrs	r2, r3, #11
 800cc32:	3815      	subs	r0, #21
 800cc34:	055b      	lsls	r3, r3, #21
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	d0fa      	beq.n	800cc30 <__ieee754_sqrt+0x134>
 800cc3a:	02d7      	lsls	r7, r2, #11
 800cc3c:	d50a      	bpl.n	800cc54 <__ieee754_sqrt+0x158>
 800cc3e:	f1c1 0420 	rsb	r4, r1, #32
 800cc42:	fa23 f404 	lsr.w	r4, r3, r4
 800cc46:	1e4d      	subs	r5, r1, #1
 800cc48:	408b      	lsls	r3, r1
 800cc4a:	4322      	orrs	r2, r4
 800cc4c:	1b41      	subs	r1, r0, r5
 800cc4e:	e788      	b.n	800cb62 <__ieee754_sqrt+0x66>
 800cc50:	4608      	mov	r0, r1
 800cc52:	e7f0      	b.n	800cc36 <__ieee754_sqrt+0x13a>
 800cc54:	0052      	lsls	r2, r2, #1
 800cc56:	3101      	adds	r1, #1
 800cc58:	e7ef      	b.n	800cc3a <__ieee754_sqrt+0x13e>
 800cc5a:	46e0      	mov	r8, ip
 800cc5c:	e7be      	b.n	800cbdc <__ieee754_sqrt+0xe0>
 800cc5e:	bf00      	nop
 800cc60:	7ff00000 	.word	0x7ff00000

0800cc64 <fabs>:
 800cc64:	ec51 0b10 	vmov	r0, r1, d0
 800cc68:	ee10 2a10 	vmov	r2, s0
 800cc6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc70:	ec43 2b10 	vmov	d0, r2, r3
 800cc74:	4770      	bx	lr

0800cc76 <finite>:
 800cc76:	b082      	sub	sp, #8
 800cc78:	ed8d 0b00 	vstr	d0, [sp]
 800cc7c:	9801      	ldr	r0, [sp, #4]
 800cc7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cc82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc86:	0fc0      	lsrs	r0, r0, #31
 800cc88:	b002      	add	sp, #8
 800cc8a:	4770      	bx	lr
 800cc8c:	0000      	movs	r0, r0
	...

0800cc90 <nan>:
 800cc90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc98 <nan+0x8>
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	00000000 	.word	0x00000000
 800cc9c:	7ff80000 	.word	0x7ff80000

0800cca0 <rint>:
 800cca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cca2:	ec51 0b10 	vmov	r0, r1, d0
 800cca6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ccae:	2e13      	cmp	r6, #19
 800ccb0:	ee10 4a10 	vmov	r4, s0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ccba:	dc58      	bgt.n	800cd6e <rint+0xce>
 800ccbc:	2e00      	cmp	r6, #0
 800ccbe:	da2b      	bge.n	800cd18 <rint+0x78>
 800ccc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccc4:	4302      	orrs	r2, r0
 800ccc6:	d023      	beq.n	800cd10 <rint+0x70>
 800ccc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cccc:	4302      	orrs	r2, r0
 800ccce:	4254      	negs	r4, r2
 800ccd0:	4314      	orrs	r4, r2
 800ccd2:	0c4b      	lsrs	r3, r1, #17
 800ccd4:	0b24      	lsrs	r4, r4, #12
 800ccd6:	045b      	lsls	r3, r3, #17
 800ccd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ccdc:	ea44 0103 	orr.w	r1, r4, r3
 800cce0:	4b32      	ldr	r3, [pc, #200]	; (800cdac <rint+0x10c>)
 800cce2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cce6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	f7f3 fa8f 	bl	8000214 <__adddf3>
 800ccf6:	e9cd 0100 	strd	r0, r1, [sp]
 800ccfa:	463b      	mov	r3, r7
 800ccfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd00:	4632      	mov	r2, r6
 800cd02:	f7f3 fa85 	bl	8000210 <__aeabi_dsub>
 800cd06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cd0e:	4639      	mov	r1, r7
 800cd10:	ec41 0b10 	vmov	d0, r0, r1
 800cd14:	b003      	add	sp, #12
 800cd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd18:	4a25      	ldr	r2, [pc, #148]	; (800cdb0 <rint+0x110>)
 800cd1a:	4132      	asrs	r2, r6
 800cd1c:	ea01 0702 	and.w	r7, r1, r2
 800cd20:	4307      	orrs	r7, r0
 800cd22:	d0f5      	beq.n	800cd10 <rint+0x70>
 800cd24:	0851      	lsrs	r1, r2, #1
 800cd26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cd2a:	4314      	orrs	r4, r2
 800cd2c:	d00c      	beq.n	800cd48 <rint+0xa8>
 800cd2e:	ea23 0201 	bic.w	r2, r3, r1
 800cd32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd36:	2e13      	cmp	r6, #19
 800cd38:	fa43 f606 	asr.w	r6, r3, r6
 800cd3c:	bf0c      	ite	eq
 800cd3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cd42:	2400      	movne	r4, #0
 800cd44:	ea42 0306 	orr.w	r3, r2, r6
 800cd48:	4918      	ldr	r1, [pc, #96]	; (800cdac <rint+0x10c>)
 800cd4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cd4e:	4622      	mov	r2, r4
 800cd50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd54:	4620      	mov	r0, r4
 800cd56:	4629      	mov	r1, r5
 800cd58:	f7f3 fa5c 	bl	8000214 <__adddf3>
 800cd5c:	e9cd 0100 	strd	r0, r1, [sp]
 800cd60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd64:	4622      	mov	r2, r4
 800cd66:	462b      	mov	r3, r5
 800cd68:	f7f3 fa52 	bl	8000210 <__aeabi_dsub>
 800cd6c:	e7d0      	b.n	800cd10 <rint+0x70>
 800cd6e:	2e33      	cmp	r6, #51	; 0x33
 800cd70:	dd07      	ble.n	800cd82 <rint+0xe2>
 800cd72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd76:	d1cb      	bne.n	800cd10 <rint+0x70>
 800cd78:	ee10 2a10 	vmov	r2, s0
 800cd7c:	f7f3 fa4a 	bl	8000214 <__adddf3>
 800cd80:	e7c6      	b.n	800cd10 <rint+0x70>
 800cd82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cd86:	f04f 36ff 	mov.w	r6, #4294967295
 800cd8a:	40d6      	lsrs	r6, r2
 800cd8c:	4230      	tst	r0, r6
 800cd8e:	d0bf      	beq.n	800cd10 <rint+0x70>
 800cd90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cd94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cd98:	bf1f      	itttt	ne
 800cd9a:	ea24 0101 	bicne.w	r1, r4, r1
 800cd9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cda2:	fa44 f202 	asrne.w	r2, r4, r2
 800cda6:	ea41 0402 	orrne.w	r4, r1, r2
 800cdaa:	e7cd      	b.n	800cd48 <rint+0xa8>
 800cdac:	0800cf30 	.word	0x0800cf30
 800cdb0:	000fffff 	.word	0x000fffff
 800cdb4:	00000000 	.word	0x00000000

0800cdb8 <scalbn>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	ec55 4b10 	vmov	r4, r5, d0
 800cdbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	462b      	mov	r3, r5
 800cdc6:	b99a      	cbnz	r2, 800cdf0 <scalbn+0x38>
 800cdc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdcc:	4323      	orrs	r3, r4
 800cdce:	d036      	beq.n	800ce3e <scalbn+0x86>
 800cdd0:	4b39      	ldr	r3, [pc, #228]	; (800ceb8 <scalbn+0x100>)
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	ee10 0a10 	vmov	r0, s0
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fbd1 	bl	8000580 <__aeabi_dmul>
 800cdde:	4b37      	ldr	r3, [pc, #220]	; (800cebc <scalbn+0x104>)
 800cde0:	429e      	cmp	r6, r3
 800cde2:	4604      	mov	r4, r0
 800cde4:	460d      	mov	r5, r1
 800cde6:	da10      	bge.n	800ce0a <scalbn+0x52>
 800cde8:	a32b      	add	r3, pc, #172	; (adr r3, 800ce98 <scalbn+0xe0>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	e03a      	b.n	800ce66 <scalbn+0xae>
 800cdf0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cdf4:	428a      	cmp	r2, r1
 800cdf6:	d10c      	bne.n	800ce12 <scalbn+0x5a>
 800cdf8:	ee10 2a10 	vmov	r2, s0
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7f3 fa08 	bl	8000214 <__adddf3>
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	e019      	b.n	800ce3e <scalbn+0x86>
 800ce0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce0e:	460b      	mov	r3, r1
 800ce10:	3a36      	subs	r2, #54	; 0x36
 800ce12:	4432      	add	r2, r6
 800ce14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce18:	428a      	cmp	r2, r1
 800ce1a:	dd08      	ble.n	800ce2e <scalbn+0x76>
 800ce1c:	2d00      	cmp	r5, #0
 800ce1e:	a120      	add	r1, pc, #128	; (adr r1, 800cea0 <scalbn+0xe8>)
 800ce20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce24:	da1c      	bge.n	800ce60 <scalbn+0xa8>
 800ce26:	a120      	add	r1, pc, #128	; (adr r1, 800cea8 <scalbn+0xf0>)
 800ce28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce2c:	e018      	b.n	800ce60 <scalbn+0xa8>
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	dd08      	ble.n	800ce44 <scalbn+0x8c>
 800ce32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce3e:	ec45 4b10 	vmov	d0, r4, r5
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce48:	da19      	bge.n	800ce7e <scalbn+0xc6>
 800ce4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce4e:	429e      	cmp	r6, r3
 800ce50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce54:	dd0a      	ble.n	800ce6c <scalbn+0xb4>
 800ce56:	a112      	add	r1, pc, #72	; (adr r1, 800cea0 <scalbn+0xe8>)
 800ce58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1e2      	bne.n	800ce26 <scalbn+0x6e>
 800ce60:	a30f      	add	r3, pc, #60	; (adr r3, 800cea0 <scalbn+0xe8>)
 800ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce66:	f7f3 fb8b 	bl	8000580 <__aeabi_dmul>
 800ce6a:	e7cb      	b.n	800ce04 <scalbn+0x4c>
 800ce6c:	a10a      	add	r1, pc, #40	; (adr r1, 800ce98 <scalbn+0xe0>)
 800ce6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0b8      	beq.n	800cde8 <scalbn+0x30>
 800ce76:	a10e      	add	r1, pc, #56	; (adr r1, 800ceb0 <scalbn+0xf8>)
 800ce78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7c:	e7b4      	b.n	800cde8 <scalbn+0x30>
 800ce7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce82:	3236      	adds	r2, #54	; 0x36
 800ce84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	4b0c      	ldr	r3, [pc, #48]	; (800cec0 <scalbn+0x108>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	e7e8      	b.n	800ce66 <scalbn+0xae>
 800ce94:	f3af 8000 	nop.w
 800ce98:	c2f8f359 	.word	0xc2f8f359
 800ce9c:	01a56e1f 	.word	0x01a56e1f
 800cea0:	8800759c 	.word	0x8800759c
 800cea4:	7e37e43c 	.word	0x7e37e43c
 800cea8:	8800759c 	.word	0x8800759c
 800ceac:	fe37e43c 	.word	0xfe37e43c
 800ceb0:	c2f8f359 	.word	0xc2f8f359
 800ceb4:	81a56e1f 	.word	0x81a56e1f
 800ceb8:	43500000 	.word	0x43500000
 800cebc:	ffff3cb0 	.word	0xffff3cb0
 800cec0:	3c900000 	.word	0x3c900000

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
