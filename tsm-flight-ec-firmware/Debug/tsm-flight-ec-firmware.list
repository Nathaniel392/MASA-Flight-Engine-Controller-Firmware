
tsm-flight-ec-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e14  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000207c  20000010  08006014  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000208c  08006014  0002208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a77d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032df  00000000  00000000  0003a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0003daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a47  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a77  00000000  00000000  0006488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba5e  00000000  00000000  0007a306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d60  00000000  00000000  00155db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005fc4 	.word	0x08005fc4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08005fc4 	.word	0x08005fc4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96e 	b.w	8000cd8 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468c      	mov	ip, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8083 	bne.w	8000b2a <__udivmoddi4+0x116>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4617      	mov	r7, r2
 8000a28:	d947      	bls.n	8000aba <__udivmoddi4+0xa6>
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	b142      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a30:	f1c2 0020 	rsb	r0, r2, #32
 8000a34:	fa24 f000 	lsr.w	r0, r4, r0
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4097      	lsls	r7, r2
 8000a3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a40:	4094      	lsls	r4, r2
 8000a42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a46:	0c23      	lsrs	r3, r4, #16
 8000a48:	fbbc f6f8 	udiv	r6, ip, r8
 8000a4c:	fa1f fe87 	uxth.w	lr, r7
 8000a50:	fb08 c116 	mls	r1, r8, r6, ip
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f10e 	mul.w	r1, r6, lr
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x60>
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 8119 	bcs.w	8000c9c <__udivmoddi4+0x288>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 8116 	bls.w	8000c9c <__udivmoddi4+0x288>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	443b      	add	r3, r7
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x8c>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a92:	f080 8105 	bcs.w	8000ca0 <__udivmoddi4+0x28c>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f240 8102 	bls.w	8000ca0 <__udivmoddi4+0x28c>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	443c      	add	r4, r7
 8000aa0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa4:	eba4 040e 	sub.w	r4, r4, lr
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa0>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	b902      	cbnz	r2, 8000abe <__udivmoddi4+0xaa>
 8000abc:	deff      	udf	#255	; 0xff
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d150      	bne.n	8000b68 <__udivmoddi4+0x154>
 8000ac6:	1bcb      	subs	r3, r1, r7
 8000ac8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000acc:	fa1f f887 	uxth.w	r8, r7
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad6:	0c21      	lsrs	r1, r4, #16
 8000ad8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000adc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0xe4>
 8000ae8:	1879      	adds	r1, r7, r1
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0xe2>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	f200 80e9 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1ac9      	subs	r1, r1, r3
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x10c>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x10a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80d9 	bhi.w	8000cd0 <__udivmoddi4+0x2bc>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e7bf      	b.n	8000aaa <__udivmoddi4+0x96>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0x12e>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	f000 80b1 	beq.w	8000c96 <__udivmoddi4+0x282>
 8000b34:	2600      	movs	r6, #0
 8000b36:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f683 	clz	r6, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d14a      	bne.n	8000be0 <__udivmoddi4+0x1cc>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0x140>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80b8 	bhi.w	8000cc4 <__udivmoddi4+0x2b0>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0103 	sbc.w	r1, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	468c      	mov	ip, r1
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0a8      	beq.n	8000ab4 <__udivmoddi4+0xa0>
 8000b62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b66:	e7a5      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000b68:	f1c2 0320 	rsb	r3, r2, #32
 8000b6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b70:	4097      	lsls	r7, r2
 8000b72:	fa01 f002 	lsl.w	r0, r1, r2
 8000b76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b7a:	40d9      	lsrs	r1, r3
 8000b7c:	4330      	orrs	r0, r6
 8000b7e:	0c03      	lsrs	r3, r0, #16
 8000b80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f108 	mul.w	r1, r6, r8
 8000b94:	4299      	cmp	r1, r3
 8000b96:	fa04 f402 	lsl.w	r4, r4, r2
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x19c>
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ba2:	f080 808d 	bcs.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 808a 	bls.w	8000cc0 <__udivmoddi4+0x2ac>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	443b      	add	r3, r7
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b281      	uxth	r1, r0
 8000bb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc0:	fb00 f308 	mul.w	r3, r0, r8
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x1c4>
 8000bc8:	1879      	adds	r1, r7, r1
 8000bca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bce:	d273      	bcs.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d971      	bls.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4439      	add	r1, r7
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bde:	e778      	b.n	8000ad2 <__udivmoddi4+0xbe>
 8000be0:	f1c6 0c20 	rsb	ip, r6, #32
 8000be4:	fa03 f406 	lsl.w	r4, r3, r6
 8000be8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bec:	431c      	orrs	r4, r3
 8000bee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	0c3b      	lsrs	r3, r7, #16
 8000c02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c06:	fa1f f884 	uxth.w	r8, r4
 8000c0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c12:	fb09 fa08 	mul.w	sl, r9, r8
 8000c16:	458a      	cmp	sl, r1
 8000c18:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x220>
 8000c22:	1861      	adds	r1, r4, r1
 8000c24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c28:	d248      	bcs.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2a:	458a      	cmp	sl, r1
 8000c2c:	d946      	bls.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4421      	add	r1, r4
 8000c34:	eba1 010a 	sub.w	r1, r1, sl
 8000c38:	b2bf      	uxth	r7, r7
 8000c3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c46:	fb00 f808 	mul.w	r8, r0, r8
 8000c4a:	45b8      	cmp	r8, r7
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x24a>
 8000c4e:	19e7      	adds	r7, r4, r7
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d22e      	bcs.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c56:	45b8      	cmp	r8, r7
 8000c58:	d92c      	bls.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4427      	add	r7, r4
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	eba7 0708 	sub.w	r7, r7, r8
 8000c66:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6a:	454f      	cmp	r7, r9
 8000c6c:	46c6      	mov	lr, r8
 8000c6e:	4649      	mov	r1, r9
 8000c70:	d31a      	bcc.n	8000ca8 <__udivmoddi4+0x294>
 8000c72:	d017      	beq.n	8000ca4 <__udivmoddi4+0x290>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x27a>
 8000c76:	ebb3 020e 	subs.w	r2, r3, lr
 8000c7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c82:	40f2      	lsrs	r2, r6
 8000c84:	ea4c 0202 	orr.w	r2, ip, r2
 8000c88:	40f7      	lsrs	r7, r6
 8000c8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	462e      	mov	r6, r5
 8000c98:	4628      	mov	r0, r5
 8000c9a:	e70b      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0x60>
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	e6fd      	b.n	8000aa0 <__udivmoddi4+0x8c>
 8000ca4:	4543      	cmp	r3, r8
 8000ca6:	d2e5      	bcs.n	8000c74 <__udivmoddi4+0x260>
 8000ca8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cac:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	e7df      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e7d2      	b.n	8000c5e <__udivmoddi4+0x24a>
 8000cb8:	4660      	mov	r0, ip
 8000cba:	e78d      	b.n	8000bd8 <__udivmoddi4+0x1c4>
 8000cbc:	4681      	mov	r9, r0
 8000cbe:	e7b9      	b.n	8000c34 <__udivmoddi4+0x220>
 8000cc0:	4666      	mov	r6, ip
 8000cc2:	e775      	b.n	8000bb0 <__udivmoddi4+0x19c>
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0x14a>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	4439      	add	r1, r7
 8000cce:	e713      	b.n	8000af8 <__udivmoddi4+0xe4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	e724      	b.n	8000b20 <__udivmoddi4+0x10c>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <init_autosequence_timings>:
Autosequence_Info autosequence;

/**
 * This function must be called AFTER variables are read from flash
 */
void init_autosequence_timings() {
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	// Valve timings read from flash
	// PID start delay read from flash
	// Film cooling start time read from flash
	// hotfire duration read from flash

	autosequence.startup_motor_start_delay_ms = 500;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <init_autosequence_timings+0x30>)
 8000ce2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ce6:	601a      	str	r2, [r3, #0]

	autosequence.post_vent_on_time_ms = 1000;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <init_autosequence_timings+0x30>)
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	619a      	str	r2, [r3, #24]
	autosequence.post_vent_off_time_ms = 6000;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <init_autosequence_timings+0x30>)
 8000cf2:	f241 7270 	movw	r2, #6000	; 0x1770
 8000cf6:	61da      	str	r2, [r3, #28]
	autosequence.post_purge_off_time_ms = 10000;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <init_autosequence_timings+0x30>)
 8000cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cfe:	621a      	str	r2, [r3, #32]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000284 	.word	0x20000284

08000d10 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

/**
 * Timer interrupt flag handling
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_5MS) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d103      	bne.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x18>
		periodic_flag_5ms = 1;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
		periodic_flag_50ms = 1;
	}
	else if (htim == &TIM_100MS) {
		periodic_flag_100ms = 1;
	}
}
 8000d26:	e00e      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_50MS) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d103      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x28>
		periodic_flag_50ms = 1;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
}
 8000d36:	e006      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &TIM_100MS) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d102      	bne.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x36>
		periodic_flag_100ms = 1;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000508 	.word	0x20000508
 8000d58:	200002c0 	.word	0x200002c0
 8000d5c:	2000031c 	.word	0x2000031c
 8000d60:	20000a44 	.word	0x20000a44
 8000d64:	20000694 	.word	0x20000694
 8000d68:	20000364 	.word	0x20000364

08000d6c <HAL_UART_RxCpltCallback>:
volatile uint16_t telem_buffer_sz = 0;
uint8_t telem_buffer[255];
uint8_t eof_received = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if (huart == &COM_UART) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_UART_RxCpltCallback+0x48>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d117      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x40>
		HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <HAL_UART_RxCpltCallback+0x4c>)
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_UART_RxCpltCallback+0x48>)
 8000d82:	f004 fbb4 	bl	80054ee <HAL_UART_Receive_IT>
		telem_buffer[telem_buffer_sz++] = last_byte_uart;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_UART_RxCpltCallback+0x50>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_UART_RxCpltCallback+0x50>)
 8000d92:	8011      	strh	r1, [r2, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_UART_RxCpltCallback+0x4c>)
 8000d98:	7819      	ldrb	r1, [r3, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_UART_RxCpltCallback+0x54>)
 8000d9c:	5499      	strb	r1, [r3, r2]
		if (last_byte_uart == 0) {
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_UART_RxCpltCallback+0x4c>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x40>
			eof_received = 1;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_UART_RxCpltCallback+0x58>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000550 	.word	0x20000550
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000178 	.word	0x20000178
 8000dc0:	20000938 	.word	0x20000938
 8000dc4:	2000017a 	.word	0x2000017a

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f001 ffb8 	bl	8002d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f8a2 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 fac8 	bl	8001368 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dd8:	f000 f90a 	bl	8000ff0 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000ddc:	f000 f9aa 	bl	8001134 <MX_SPI4_Init>
  MX_SPI2_Init();
 8000de0:	f000 f93c 	bl	800105c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000de4:	f000 f970 	bl	80010c8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000de8:	f000 fa94 	bl	8001314 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8000dec:	f000 f9d8 	bl	80011a0 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000df0:	f000 fa24 	bl	800123c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000df4:	f000 fa46 	bl	8001284 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000df8:	f000 fa68 	bl	80012cc <MX_TIM13_Init>

  // Initialize everything

  /* Initialize HAL stuff */
  // Timers
  HAL_TIM_Base_Start(&TIM_MICROS);
 8000dfc:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <main+0x108>)
 8000dfe:	f003 fe93 	bl	8004b28 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&TIM_5MS);
 8000e02:	4834      	ldr	r0, [pc, #208]	; (8000ed4 <main+0x10c>)
 8000e04:	f003 fef8 	bl	8004bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_50MS);
 8000e08:	4833      	ldr	r0, [pc, #204]	; (8000ed8 <main+0x110>)
 8000e0a:	f003 fef5 	bl	8004bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&TIM_100MS);
 8000e0e:	4833      	ldr	r0, [pc, #204]	; (8000edc <main+0x114>)
 8000e10:	f003 fef2 	bl	8004bf8 <HAL_TIM_Base_Start_IT>

  // UART DMA
  HAL_UART_Receive_IT(&COM_UART, &last_byte_uart, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	4932      	ldr	r1, [pc, #200]	; (8000ee0 <main+0x118>)
 8000e18:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <main+0x11c>)
 8000e1a:	f004 fb68 	bl	80054ee <HAL_UART_Receive_IT>


  // Watchdog

  // Read variables from flash: this must be called very early in initialization!
  init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <main+0x120>)
 8000e24:	4931      	ldr	r1, [pc, #196]	; (8000eec <main+0x124>)
 8000e26:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <main+0x128>)
 8000e28:	f001 fef0 	bl	8002c0c <init_flash>
  read_nonvolatile_variables();
 8000e2c:	f000 fba0 	bl	8001570 <read_nonvolatile_variables>
  // Board-specific hardware
  //init_spi_peripherals();  // Set chip selects high and initialize

  //init_adcs();
  //init_thermocouples();
  init_serial_data(&buffer_info);
 8000e30:	4830      	ldr	r0, [pc, #192]	; (8000ef4 <main+0x12c>)
 8000e32:	f000 fdf3 	bl	8001a1c <init_serial_data>

  init_board(FLIGHT_EC_ADDR);  // Comms
 8000e36:	2002      	movs	r0, #2
 8000e38:	f001 fbe4 	bl	8002604 <init_board>

  init_autosequence_timings();
 8000e3c:	f7ff ff4e 	bl	8000cdc <init_autosequence_timings>


  // This is done to set each of the pins or spi comm structs for the motor:
  motor.hspi = &SPI_MOTOR;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <main+0x130>)
 8000e42:	4a2e      	ldr	r2, [pc, #184]	; (8000efc <main+0x134>)
 8000e44:	601a      	str	r2, [r3, #0]
  motor.cs_base = MTR0_CS_GPIO_Port;
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <main+0x130>)
 8000e48:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <main+0x138>)
 8000e4a:	605a      	str	r2, [r3, #4]
  motor.cs_pin = MTR0_CS_Pin;
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <main+0x130>)
 8000e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e52:	811a      	strh	r2, [r3, #8]
  motor.busy_base = MTR0_BUSY_GPIO_Port;
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <main+0x130>)
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <main+0x138>)
 8000e58:	60da      	str	r2, [r3, #12]
  motor.busy_pin = MTR0_BUSY_Pin;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <main+0x130>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	821a      	strh	r2, [r3, #16]

  L6470_set_motor_max_speed(&motor, 50);
 8000e62:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8000f04 <main+0x13c>
 8000e66:	4824      	ldr	r0, [pc, #144]	; (8000ef8 <main+0x130>)
 8000e68:	f001 faee 	bl	8002448 <L6470_set_motor_max_speed>
  L6470_init_motor(&motor, L6470_FULL_STEP_MODE, 1.8);
 8000e6c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000f08 <main+0x140>
 8000e70:	2100      	movs	r1, #0
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <main+0x130>)
 8000e74:	f001 fac4 	bl	8002400 <L6470_init_motor>
  while (1)
  {

	  // Verify motor Connections:
	  // Need to move motor to a specific position, i.e. 90 degrees
	  L6470_goto_motor_pos(&motor, 90);
 8000e78:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8000f0c <main+0x144>
 8000e7c:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <main+0x130>)
 8000e7e:	f001 fb23 	bl	80024c8 <L6470_goto_motor_pos>
	  L6470_get_status(&motor);
 8000e82:	481d      	ldr	r0, [pc, #116]	; (8000ef8 <main+0x130>)
 8000e84:	f001 f9c0 	bl	8002208 <L6470_get_status>
	  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <main+0x120>)
 8000e8e:	f002 fb25 	bl	80034dc <HAL_GPIO_WritePin>
	  // Now have the motor wait:
	  HAL_Delay(2000);	// Wait 5 seconds for the motor to turn and stop and wait
 8000e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e96:	f001 ffc5 	bl	8002e24 <HAL_Delay>
	  var = L6470_get_position_deg(&motor);
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <main+0x130>)
 8000e9c:	f001 fb8f 	bl	80025be <L6470_get_position_deg>
 8000ea0:	eef0 7a40 	vmov.f32	s15, s0
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <main+0x148>)
 8000ea6:	edc3 7a00 	vstr	s15, [r3]
	  // Now we move back to the 0 position:
	  L6470_goto_motor_pos(&motor, 0);
 8000eaa:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000f14 <main+0x14c>
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <main+0x130>)
 8000eb0:	f001 fb0a 	bl	80024c8 <L6470_goto_motor_pos>
	  L6470_get_status(&motor);
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <main+0x130>)
 8000eb6:	f001 f9a7 	bl	8002208 <L6470_get_status>
	  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <main+0x120>)
 8000ec0:	f002 fb0c 	bl	80034dc <HAL_GPIO_WritePin>
	  // Now have the motor wait:
	  HAL_Delay(2000);	// Wait 5 seconds for the motor to turn and stop and wait
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f001 ffac 	bl	8002e24 <HAL_Delay>
	  L6470_goto_motor_pos(&motor, 90);
 8000ecc:	e7d4      	b.n	8000e78 <main+0xb0>
 8000ece:	bf00      	nop
 8000ed0:	20000368 	.word	0x20000368
 8000ed4:	20000508 	.word	0x20000508
 8000ed8:	2000031c 	.word	0x2000031c
 8000edc:	20000694 	.word	0x20000694
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000550 	.word	0x20000550
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	20000760 	.word	0x20000760
 8000ef0:	20000b4c 	.word	0x20000b4c
 8000ef4:	20000d64 	.word	0x20000d64
 8000ef8:	20000908 	.word	0x20000908
 8000efc:	200003b0 	.word	0x200003b0
 8000f00:	40020000 	.word	0x40020000
 8000f04:	42480000 	.word	0x42480000
 8000f08:	3fe66666 	.word	0x3fe66666
 8000f0c:	42b40000 	.word	0x42b40000
 8000f10:	200008ac 	.word	0x200008ac
 8000f14:	00000000 	.word	0x00000000

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2234      	movs	r2, #52	; 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 f844 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <SystemClock_Config+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <SystemClock_Config+0xd4>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <SystemClock_Config+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000f90:	235a      	movs	r3, #90	; 0x5a
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fd29 	bl	80039fc <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fb0:	f000 fad8 	bl	8001564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fa9e 	bl	8003510 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fda:	f000 fac3 	bl	8001564 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3750      	adds	r7, #80	; 0x50
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_SPI1_Init+0x64>)
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <MX_SPI1_Init+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI1_Init+0x64>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0x64>)
 8001024:	2218      	movs	r2, #24
 8001026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SPI1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0x64>)
 800103c:	220a      	movs	r2, #10
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_SPI1_Init+0x64>)
 8001042:	f002 ff79 	bl	8003f38 <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800104c:	f000 fa8a 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200008b0 	.word	0x200008b0
 8001058:	40013000 	.word	0x40013000

0800105c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI2_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI2_Init+0x64>)
 800107c:	2202      	movs	r2, #2
 800107e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001090:	2218      	movs	r2, #24
 8001092:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI2_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI2_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI2_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_SPI2_Init+0x64>)
 80010ae:	f002 ff43 	bl	8003f38 <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 fa54 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	40003800 	.word	0x40003800

080010c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI3_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_SPI3_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI3_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI3_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI3_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI3_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI3_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI3_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI3_Init+0x64>)
 80010fc:	2218      	movs	r2, #24
 80010fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI3_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI3_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI3_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI3_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI3_Init+0x64>)
 800111a:	f002 ff0d 	bl	8003f38 <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001124:	f000 fa1e 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200003b0 	.word	0x200003b0
 8001130:	40003c00 	.word	0x40003c00

08001134 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI4_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI4_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI4_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI4_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI4_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI4_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI4_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI4_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI4_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI4_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI4_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI4_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI4_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI4_Init+0x64>)
 8001186:	f002 fed7 	bl	8003f38 <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001190:	f000 f9e8 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000760 	.word	0x20000760
 800119c:	40013400 	.word	0x40013400

080011a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_TIM5_Init+0x94>)
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <MX_TIM5_Init+0x98>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45 - 1;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_TIM5_Init+0x94>)
 80011c4:	222c      	movs	r2, #44	; 0x2c
 80011c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_TIM5_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_TIM5_Init+0x94>)
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_TIM5_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM5_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011e2:	4814      	ldr	r0, [pc, #80]	; (8001234 <MX_TIM5_Init+0x94>)
 80011e4:	f003 fc50 	bl	8004a88 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f9b9 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_TIM5_Init+0x94>)
 8001200:	f003 fe72 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 f9ab 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_TIM5_Init+0x94>)
 800121c:	f004 f88a 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 f99d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000368 	.word	0x20000368
 8001238:	40000c00 	.word	0x40000c00

0800123c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_TIM10_Init+0x40>)
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <MX_TIM10_Init+0x44>)
 8001244:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000 - 1;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_TIM10_Init+0x40>)
 8001248:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800124c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_TIM10_Init+0x40>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50 - 1;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_TIM10_Init+0x40>)
 8001256:	2231      	movs	r2, #49	; 0x31
 8001258:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_TIM10_Init+0x40>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_TIM10_Init+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM10_Init+0x40>)
 8001268:	f003 fc0e 	bl	8004a88 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001272:	f000 f977 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000031c 	.word	0x2000031c
 8001280:	40014400 	.word	0x40014400

08001284 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_TIM11_Init+0x40>)
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_TIM11_Init+0x44>)
 800128c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 45000 - 1;
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_TIM11_Init+0x40>)
 8001290:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001294:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_TIM11_Init+0x40>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100 - 1;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_TIM11_Init+0x40>)
 800129e:	2263      	movs	r2, #99	; 0x63
 80012a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_TIM11_Init+0x40>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_TIM11_Init+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_TIM11_Init+0x40>)
 80012b0:	f003 fbea 	bl	8004a88 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80012ba:	f000 f953 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000694 	.word	0x20000694
 80012c8:	40014800 	.word	0x40014800

080012cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_TIM13_Init+0x40>)
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_TIM13_Init+0x44>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000 - 1;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_TIM13_Init+0x40>)
 80012d8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80012dc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_TIM13_Init+0x40>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5 - 1;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_TIM13_Init+0x40>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_TIM13_Init+0x40>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_TIM13_Init+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_TIM13_Init+0x40>)
 80012f8:	f003 fbc6 	bl	8004a88 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001302:	f000 f92f 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000508 	.word	0x20000508
 8001310:	40001c00 	.word	0x40001c00

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART1_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800134c:	f004 f882 	bl	8005454 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f905 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000550 	.word	0x20000550
 8001364:	40011000 	.word	0x40011000

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	4b6b      	ldr	r3, [pc, #428]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a6a      	ldr	r2, [pc, #424]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a5c      	ldr	r2, [pc, #368]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a55      	ldr	r2, [pc, #340]	; (800154c <MX_GPIO_Init+0x1e4>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <MX_GPIO_Init+0x1e4>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <MX_GPIO_Init+0x1e4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f24e 0110 	movw	r1, #57360	; 0xe010
 800142c:	4848      	ldr	r0, [pc, #288]	; (8001550 <MX_GPIO_Init+0x1e8>)
 800142e:	f002 f855 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001432:	2200      	movs	r2, #0
 8001434:	f246 31ff 	movw	r1, #25599	; 0x63ff
 8001438:	4846      	ldr	r0, [pc, #280]	; (8001554 <MX_GPIO_Init+0x1ec>)
 800143a:	f002 f84f 	bl	80034dc <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f241 5104 	movw	r1, #5380	; 0x1504
 8001444:	4844      	ldr	r0, [pc, #272]	; (8001558 <MX_GPIO_Init+0x1f0>)
 8001446:	f002 f849 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 800144a:	2200      	movs	r2, #0
 800144c:	f241 4107 	movw	r1, #5127	; 0x1407
 8001450:	4842      	ldr	r0, [pc, #264]	; (800155c <MX_GPIO_Init+0x1f4>)
 8001452:	f002 f843 	bl	80034dc <HAL_GPIO_WritePin>
                          |en_vlv4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 41be 	mov.w	r1, #24320	; 0x5f00
 800145c:	4840      	ldr	r0, [pc, #256]	; (8001560 <MX_GPIO_Init+0x1f8>)
 800145e:	f002 f83d 	bl	80034dc <HAL_GPIO_WritePin>
                          |en_vlv9_Pin|ADC0_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC2_EOC_Pin */
  GPIO_InitStruct.Pin = ADC2_EOC_Pin;
 8001462:	2308      	movs	r3, #8
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC2_EOC_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4836      	ldr	r0, [pc, #216]	; (8001550 <MX_GPIO_Init+0x1e8>)
 8001476:	f001 fe9d 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_CS_Pin en_vlv0_Pin en_vlv1_Pin en_vlv2_Pin */
  GPIO_InitStruct.Pin = ADC2_CS_Pin|en_vlv0_Pin|en_vlv1_Pin|en_vlv2_Pin;
 800147a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	482f      	ldr	r0, [pc, #188]	; (8001550 <MX_GPIO_Init+0x1e8>)
 8001494:	f001 fe8e 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin EEPROM_CS_Pin LED_0_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin TC_MUX_EN_Pin TC_MUX_A3_Pin
                           ADC1_CS_Pin en_vlv10_Pin en_vlv11_Pin en_vlv12_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|EEPROM_CS_Pin|LED_0_Pin|LED_1_Pin
 8001498:	f246 33ff 	movw	r3, #25599	; 0x63ff
 800149c:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_3_Pin|TC_MUX_EN_Pin|TC_MUX_A3_Pin
                          |ADC1_CS_Pin|en_vlv10_Pin|en_vlv11_Pin|en_vlv12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4828      	ldr	r0, [pc, #160]	; (8001554 <MX_GPIO_Init+0x1ec>)
 80014b2:	f001 fe7f 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_EOC_Pin MTR0_BUSY_Pin MTR1_BUSY_Pin */
  GPIO_InitStruct.Pin = ADC3_EOC_Pin|MTR0_BUSY_Pin|MTR1_BUSY_Pin;
 80014b6:	f640 2302 	movw	r3, #2562	; 0xa02
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4823      	ldr	r0, [pc, #140]	; (8001558 <MX_GPIO_Init+0x1f0>)
 80014cc:	f001 fe72 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_CS_Pin en_vlv13_Pin MTR0_CS_Pin MTR1_CS_Pin */
  GPIO_InitStruct.Pin = ADC3_CS_Pin|en_vlv13_Pin|MTR0_CS_Pin|MTR1_CS_Pin;
 80014d0:	f241 5304 	movw	r3, #5380	; 0x1504
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	481b      	ldr	r0, [pc, #108]	; (8001558 <MX_GPIO_Init+0x1f0>)
 80014ea:	f001 fe63 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_MUX_A2_Pin TC_MUX_A1_Pin TC_MUX_A0_Pin en_vlv3_Pin
                           en_vlv4_Pin */
  GPIO_InitStruct.Pin = TC_MUX_A2_Pin|TC_MUX_A1_Pin|TC_MUX_A0_Pin|en_vlv3_Pin
 80014ee:	f241 4307 	movw	r3, #5127	; 0x1407
 80014f2:	61fb      	str	r3, [r7, #28]
                          |en_vlv4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <MX_GPIO_Init+0x1f4>)
 8001508:	f001 fe54 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : en_vlv5_Pin en_vlv6_Pin en_vlv7_Pin en_vlv8_Pin
                           en_vlv9_Pin ADC0_CS_Pin */
  GPIO_InitStruct.Pin = en_vlv5_Pin|en_vlv6_Pin|en_vlv7_Pin|en_vlv8_Pin
 800150c:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 8001510:	61fb      	str	r3, [r7, #28]
                          |en_vlv9_Pin|ADC0_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <MX_GPIO_Init+0x1f8>)
 8001526:	f001 fe45 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC0_EOC_Pin ADC1_EOC_Pin */
  GPIO_InitStruct.Pin = ADC0_EOC_Pin|ADC1_EOC_Pin;
 800152a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <MX_GPIO_Init+0x1f8>)
 8001540:	f001 fe38 	bl	80031b4 <HAL_GPIO_Init>

}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40021000 	.word	0x40021000
 8001554:	40020800 	.word	0x40020800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020c00 	.word	0x40020c00

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <read_nonvolatile_variables>:
extern float init_motor_pos_deg_correction_factor;

uint8_t nonvolatile_memory_buffer[NVM_BUFFER_SZ];


uint8_t read_nonvolatile_variables() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	// Read nonvolatile memory buffer from flash
	read_reserved_flash_page(&flash, NVM_FLASH_PAGE_NUM, nonvolatile_memory_buffer,
 8001576:	23fe      	movs	r3, #254	; 0xfe
 8001578:	4a94      	ldr	r2, [pc, #592]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800157a:	2100      	movs	r1, #0
 800157c:	4894      	ldr	r0, [pc, #592]	; (80017d0 <read_nonvolatile_variables+0x260>)
 800157e:	f001 fbc5 	bl	8002d0c <read_reserved_flash_page>
			NVM_BUFFER_SZ);

	// save_nonvolatile_variables() always writes a 0 in the first byte
	// because the flash default byte is nonzero. If this function reads
	// a nonzero number, then all other variables are invalid.
	if (nonvolatile_memory_buffer[NVM_PARITY_BIT_ADDR] != 0) {
 8001582:	4b92      	ldr	r3, [pc, #584]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <read_nonvolatile_variables+0x1e>
		return 0;
 800158a:	2300      	movs	r3, #0
 800158c:	e22f      	b.n	80019ee <read_nonvolatile_variables+0x47e>
	}

	// Read in all variables
	// PID gains
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 800158e:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 8001594:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	021b      	lsls	r3, r3, #8
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 800159a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 1] << 8)) / 100.0F;
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a4:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80017d4 <read_nonvolatile_variables+0x264>
 80015a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 0] << 0) |
 80015ac:	4b8a      	ldr	r3, [pc, #552]	; (80017d8 <read_nonvolatile_variables+0x268>)
 80015ae:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80015b2:	4b86      	ldr	r3, [pc, #536]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80015b8:	4b84      	ldr	r3, [pc, #528]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	021b      	lsls	r3, r3, #8
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80015be:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 3] << 8)) / 100.0F;
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c8:	eddf 6a82 	vldr	s13, [pc, #520]	; 80017d4 <read_nonvolatile_variables+0x264>
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 2] << 0) |
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <read_nonvolatile_variables+0x268>)
 80015d2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80015d6:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80015d8:	795b      	ldrb	r3, [r3, #5]
 80015da:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80015dc:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80015de:	799b      	ldrb	r3, [r3, #6]
 80015e0:	021b      	lsls	r3, r3, #8
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80015e2:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 5] << 8)) / 100.0F;
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	eddf 6a79 	vldr	s13, [pc, #484]	; 80017d4 <read_nonvolatile_variables+0x264>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 4] << 0) |
 80015f4:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <read_nonvolatile_variables+0x268>)
 80015f6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80015fc:	79db      	ldrb	r3, [r3, #7]
 80015fe:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8001600:	4b72      	ldr	r3, [pc, #456]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001602:	7a1b      	ldrb	r3, [r3, #8]
 8001604:	021b      	lsls	r3, r3, #8
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001606:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 7] << 8)) / 100.0F;
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	eddf 6a70 	vldr	s13, [pc, #448]	; 80017d4 <read_nonvolatile_variables+0x264>
 8001614:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_p = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 6] << 0) |
 8001618:	4b6f      	ldr	r3, [pc, #444]	; (80017d8 <read_nonvolatile_variables+0x268>)
 800161a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800161e:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001620:	7a5b      	ldrb	r3, [r3, #9]
 8001622:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001626:	7a9b      	ldrb	r3, [r3, #10]
 8001628:	021b      	lsls	r3, r3, #8
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800162a:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 9] << 8)) / 100.0F;
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a67 	vldr	s13, [pc, #412]	; 80017d4 <read_nonvolatile_variables+0x264>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_i = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 8] << 0) |
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <read_nonvolatile_variables+0x268>)
 800163e:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001642:	4b62      	ldr	r3, [pc, #392]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001644:	7adb      	ldrb	r3, [r3, #11]
 8001646:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001648:	4b60      	ldr	r3, [pc, #384]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	021b      	lsls	r3, r3, #8
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 800164e:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 11] << 8)) / 100.0F;
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80017d4 <read_nonvolatile_variables+0x264>
 800165c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].K_d = ((nonvolatile_memory_buffer[NVM_PID_GAINS_ADDR + 10] << 0) |
 8001660:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <read_nonvolatile_variables+0x268>)
 8001662:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

	// Target pressure setpoints
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001668:	7b5b      	ldrb	r3, [r3, #13]
 800166a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 800166c:	4b57      	ldr	r3, [pc, #348]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800166e:	7b9b      	ldrb	r3, [r3, #14]
 8001670:	021b      	lsls	r3, r3, #8
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001672:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001676:	7bdb      	ldrb	r3, [r3, #15]
 8001678:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 1] << 8) |
 800167a:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800167e:	7c1b      	ldrb	r3, [r3, #16]
 8001680:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 2] << 16) |
 8001682:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 3] << 24)) / 100.0F;
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80017d4 <read_nonvolatile_variables+0x264>
 8001690:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 0] << 0) |
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <read_nonvolatile_variables+0x268>)
 8001696:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800169c:	7c5b      	ldrb	r3, [r3, #17]
 800169e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016a2:	7c9b      	ldrb	r3, [r3, #18]
 80016a4:	021b      	lsls	r3, r3, #8
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80016a6:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 80016a8:	4b48      	ldr	r3, [pc, #288]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016aa:	7cdb      	ldrb	r3, [r3, #19]
 80016ac:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 5] << 8) |
 80016ae:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016b2:	7d1b      	ldrb	r3, [r3, #20]
 80016b4:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 6] << 16) |
 80016b6:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 7] << 24)) / 100.0F;
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80017d4 <read_nonvolatile_variables+0x264>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].target_pres = ((nonvolatile_memory_buffer[NVM_TPC_TARGET_PRES_ADDR + 4] << 0) |
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <read_nonvolatile_variables+0x268>)
 80016ca:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	// Control valve pressure thresholds
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016d0:	7d5b      	ldrb	r3, [r3, #21]
 80016d2:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016d6:	7d9b      	ldrb	r3, [r3, #22]
 80016d8:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80016da:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 1] << 8)) / 10.0F;
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 0] << 0) |
 80016ec:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <read_nonvolatile_variables+0x268>)
 80016ee:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016f4:	7ddb      	ldrb	r3, [r3, #23]
 80016f6:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <read_nonvolatile_variables+0x25c>)
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 80016fe:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 3] << 8)) / 10.0F;
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001708:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800170c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_high_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_HIGH_PRES_ADDR + 2] << 0) |
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <read_nonvolatile_variables+0x268>)
 8001712:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001716:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001718:	7f5b      	ldrb	r3, [r3, #29]
 800171a:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800171e:	7f9b      	ldrb	r3, [r3, #30]
 8001720:	021b      	lsls	r3, r3, #8
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001722:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 1] << 8)) / 10.0F;
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[0].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 0] << 0) |
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <read_nonvolatile_variables+0x268>)
 8001736:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800173c:	7fdb      	ldrb	r3, [r3, #31]
 800173e:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001746:	021b      	lsls	r3, r3, #8
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 8001748:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 3] << 8)) / 10.0F;
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001756:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tanks[1].PID_ctrl_vlv_low_pres = ((nonvolatile_memory_buffer[NVM_CTRL_VLV_LOW_PRES_ADDR + 2] << 0) |
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <read_nonvolatile_variables+0x268>)
 800175c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	// Ambient pressures
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	e02c      	b.n	80017c0 <read_nonvolatile_variables+0x250>
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	3325      	adds	r3, #37	; 0x25
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	3326      	adds	r3, #38	; 0x26
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	021b      	lsls	r3, r3, #8
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800177e:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3327      	adds	r3, #39	; 0x27
 8001788:	4910      	ldr	r1, [pc, #64]	; (80017cc <read_nonvolatile_variables+0x25c>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 800178e:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	330a      	adds	r3, #10
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <read_nonvolatile_variables+0x25c>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 800179c:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80017a6:	79fb      	ldrb	r3, [r7, #7]
				(nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 80017a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_ambients[i] = ((nonvolatile_memory_buffer[NVM_PT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <read_nonvolatile_variables+0x26c>)
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3301      	adds	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b13      	cmp	r3, #19
 80017c4:	d9cf      	bls.n	8001766 <read_nonvolatile_variables+0x1f6>
	}

	// Potentiometer ambients
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	e036      	b.n	800183a <read_nonvolatile_variables+0x2ca>
 80017cc:	20000a4c 	.word	0x20000a4c
 80017d0:	20000b4c 	.word	0x20000b4c
 80017d4:	42c80000 	.word	0x42c80000
 80017d8:	2000017c 	.word	0x2000017c
 80017dc:	2000002c 	.word	0x2000002c
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	3375      	adds	r3, #117	; 0x75
 80017e6:	4a84      	ldr	r2, [pc, #528]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3376      	adds	r3, #118	; 0x76
 80017f2:	4a81      	ldr	r2, [pc, #516]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	021b      	lsls	r3, r3, #8
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 80017f8:	ea41 0203 	orr.w	r2, r1, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	3377      	adds	r3, #119	; 0x77
 8001802:	497d      	ldr	r1, [pc, #500]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	041b      	lsls	r3, r3, #16
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 1] << 8) |
 8001808:	431a      	orrs	r2, r3
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	331e      	adds	r3, #30
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4979      	ldr	r1, [pc, #484]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	061b      	lsls	r3, r3, #24
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 2] << 16) |
 8001816:	4313      	orrs	r3, r2
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 8001820:	79bb      	ldrb	r3, [r7, #6]
				(nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 3] << 24)) / 10.0F;
 8001822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pot_ambients[i] = ((nonvolatile_memory_buffer[NVM_POT_AMBIENTS_ADDR + 4*i + 0] << 0) |
 800182a:	4a74      	ldr	r2, [pc, #464]	; (80019fc <read_nonvolatile_variables+0x48c>)
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_POTS; i++) {
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	3301      	adds	r3, #1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d9cf      	bls.n	80017e0 <read_nonvolatile_variables+0x270>
	}

	// Tank enable flags
	tanks[0].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 0];
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001842:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8001846:	4b6e      	ldr	r3, [pc, #440]	; (8001a00 <read_nonvolatile_variables+0x490>)
 8001848:	701a      	strb	r2, [r3, #0]
	tanks[1].tank_enable = nonvolatile_memory_buffer[NVM_TANK_ENABLE_ADDR + 1];
 800184a:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800184c:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <read_nonvolatile_variables+0x490>)
 8001852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// Autosequence timings
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001856:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001858:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800185c:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 800185e:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001864:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 8001866:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 8001868:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800186a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800186e:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 1] << 8) |
 8001870:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 3] << 24));
 8001872:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001874:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001878:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 2] << 16) |
 800187a:	4313      	orrs	r3, r2
 800187c:	461a      	mov	r2, r3
	autosequence.hotfire_test_duration_ms = ((nonvolatile_memory_buffer[NVM_TEST_DURATION_ADDR + 0] << 0) |
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <read_nonvolatile_variables+0x494>)
 8001880:	615a      	str	r2, [r3, #20]

	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001884:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001888:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 1] << 8));
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800188c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001890:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_on_delay_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_ON_DELAY_ADDR + 0] << 0) |
 8001892:	b21b      	sxth	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b21b      	sxth	r3, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <read_nonvolatile_variables+0x494>)
 800189c:	809a      	strh	r2, [r3, #4]

	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 800189e:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018a0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80018a4:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 1] << 8));
 80018a6:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018a8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80018ac:	021b      	lsls	r3, r3, #8
	autosequence.ignition_ignitor_high_duration_ms = ((nonvolatile_memory_buffer[NVM_IGNITOR_HIGH_DURATION_ADDR + 0] << 0) |
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <read_nonvolatile_variables+0x494>)
 80018b8:	80da      	strh	r2, [r3, #6]

	autosequence.hotfire_fuel_mpv_delay_ms = nonvolatile_memory_buffer[NVM_FUEL_MPV_OPENING_DELAY_ADDR];
 80018ba:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018bc:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <read_nonvolatile_variables+0x494>)
 80018c2:	721a      	strb	r2, [r3, #8]

	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 80018c4:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80018ca:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 1] << 8));
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018ce:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80018d2:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_film_cooling_on_time_ms = ((nonvolatile_memory_buffer[NVM_FILM_COOLING_ON_TIME_ADDR + 0] << 0) |
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21b      	sxth	r3, r3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <read_nonvolatile_variables+0x494>)
 80018de:	815a      	strh	r2, [r3, #10]

	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018e2:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80018e6:	b21a      	sxth	r2, r3
			(nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 1] << 8));
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018ea:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80018ee:	021b      	lsls	r3, r3, #8
	autosequence.hotfire_pid_start_delay_ms = ((nonvolatile_memory_buffer[NVM_PID_DELAY_ADDR + 0] << 0) |
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <read_nonvolatile_variables+0x494>)
 80018fa:	819a      	strh	r2, [r3, #12]

	// Initial motor position factor
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 80018fc:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80018fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001902:	461a      	mov	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001904:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001906:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800190a:	021b      	lsls	r3, r3, #8
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 800190c:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001910:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001914:	041b      	lsls	r3, r3, #16
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 1] << 8) |
 8001916:	431a      	orrs	r2, r3
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800191a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800191e:	061b      	lsls	r3, r3, #24
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 2] << 16) |
 8001920:	4313      	orrs	r3, r2
			(nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 3] << 24)) / 10000.0F;
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001a08 <read_nonvolatile_variables+0x498>
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	init_motor_pos_deg_correction_factor = ((nonvolatile_memory_buffer[NVM_INIT_POS_DEG_CORR_FAC_ADDR + 0] << 0) |
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <read_nonvolatile_variables+0x49c>)
 8001934:	edc3 7a00 	vstr	s15, [r3]

	// Pressure transducer calibrations
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	717b      	strb	r3, [r7, #5]
 800193c:	e053      	b.n	80019e6 <read_nonvolatile_variables+0x476>
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 800193e:	797b      	ldrb	r3, [r7, #5]
 8001940:	335c      	adds	r3, #92	; 0x5c
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 800194a:	797b      	ldrb	r3, [r7, #5]
 800194c:	335c      	adds	r3, #92	; 0x5c
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	3301      	adds	r3, #1
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <read_nonvolatile_variables+0x488>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	021b      	lsls	r3, r3, #8
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001958:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001962:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001964:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_lower_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_LOWER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 800196c:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <read_nonvolatile_variables+0x4a0>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001976:	797b      	ldrb	r3, [r7, #5]
 8001978:	3348      	adds	r3, #72	; 0x48
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001982:	797b      	ldrb	r3, [r7, #5]
 8001984:	3348      	adds	r3, #72	; 0x48
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	3301      	adds	r3, #1
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <read_nonvolatile_variables+0x488>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	021b      	lsls	r3, r3, #8
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 8001990:	430b      	orrs	r3, r1
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 800199a:	797b      	ldrb	r3, [r7, #5]
				(nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 1] << 8)) / 10.0F;
 800199c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pt_cal_upper_voltage[i] = ((nonvolatile_memory_buffer[NVM_PT_UPPER_VOLTAGE_ADDR + 2*i + 0] << 0) |
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <read_nonvolatile_variables+0x4a4>)
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	edc3 7a00 	vstr	s15, [r3]
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	3370      	adds	r3, #112	; 0x70
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	4619      	mov	r1, r3
				(nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 1] << 8));
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	3370      	adds	r3, #112	; 0x70
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <read_nonvolatile_variables+0x488>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	021b      	lsls	r3, r3, #8
		pt_cal_upper_pressure[i] = ((nonvolatile_memory_buffer[NVM_PT_PRESSURE_RANGE_ADDR + 2*i + 0] << 0) |
 80019c8:	ea41 0203 	orr.w	r2, r1, r3
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	ee07 2a90 	vmov	s15, r2
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <read_nonvolatile_variables+0x4a8>)
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < NUM_PTS; i++) {
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	3301      	adds	r3, #1
 80019e4:	717b      	strb	r3, [r7, #5]
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	2b13      	cmp	r3, #19
 80019ea:	d9a8      	bls.n	800193e <read_nonvolatile_variables+0x3ce>
	}

	// Successful read
	return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000a4c 	.word	0x20000a4c
 80019fc:	2000007c 	.word	0x2000007c
 8001a00:	2000017c 	.word	0x2000017c
 8001a04:	20000284 	.word	0x20000284
 8001a08:	461c4000 	.word	0x461c4000
 8001a0c:	20000174 	.word	0x20000174
 8001a10:	20000084 	.word	0x20000084
 8001a14:	200000d4 	.word	0x200000d4
 8001a18:	20000124 	.word	0x20000124

08001a1c <init_serial_data>:

/**
 * Initialize the flash struct and chip.
 * Initialize all the DMA rx buffers.
 */
void init_serial_data(DmaBufferInfo* buffer_info) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	// Flash
	init_flash(&flash, &SPI_MEM, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <init_serial_data+0x80>)
 8001a2a:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <init_serial_data+0x84>)
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <init_serial_data+0x88>)
 8001a2e:	f001 f8ed 	bl	8002c0c <init_flash>

	// DMA RX
	buffer_info->curr_circular_buffer_pos = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f8a3 29f6 	strh.w	r2, [r3, #2550]	; 0x9f6
	buffer_info->last_telem_packet_pos = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20

	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e011      	b.n	8001a6c <init_serial_data+0x50>
		buffer_info->curr_telem_start[i] = 0;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f202 42fc 	addw	r2, r2, #1276	; 0x4fc
 8001a50:	2100      	movs	r1, #0
 8001a52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer_info->curr_telem_len[i] = 0;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_BUFFER_PACKETS; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d9ea      	bls.n	8001a48 <init_serial_data+0x2c>
	}

	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	81bb      	strh	r3, [r7, #12]
 8001a76:	e008      	b.n	8001a8a <init_serial_data+0x6e>
		buffer_info->telem_buffer[i] = 0;
 8001a78:	89bb      	ldrh	r3, [r7, #12]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2a22 	strb.w	r2, [r3, #2594]	; 0xa22
	for (uint16_t i = 0; i < PONG_MAX_PACKET_SIZE; i++) {
 8001a84:	89bb      	ldrh	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	81bb      	strh	r3, [r7, #12]
 8001a8a:	89bb      	ldrh	r3, [r7, #12]
 8001a8c:	2bfe      	cmp	r3, #254	; 0xfe
 8001a8e:	d9f3      	bls.n	8001a78 <init_serial_data+0x5c>
	}
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	20000760 	.word	0x20000760
 8001aa4:	20000b4c 	.word	0x20000b4c

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_SPI_MspInit+0x1b4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12c      	bne.n	8001b74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b52:	23e0      	movs	r3, #224	; 0xe0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b62:	2305      	movs	r3, #5
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4851      	ldr	r0, [pc, #324]	; (8001cb4 <HAL_SPI_MspInit+0x1bc>)
 8001b6e:	f001 fb21 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001b72:	e096      	b.n	8001ca2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	; (8001cb8 <HAL_SPI_MspInit+0x1c0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12d      	bne.n	8001bda <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	483a      	ldr	r0, [pc, #232]	; (8001cbc <HAL_SPI_MspInit+0x1c4>)
 8001bd4:	f001 faee 	bl	80031b4 <HAL_GPIO_Init>
}
 8001bd8:	e063      	b.n	8001ca2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_SPI_MspInit+0x1c8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d12d      	bne.n	8001c40 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c36:	4619      	mov	r1, r3
 8001c38:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <HAL_SPI_MspInit+0x1cc>)
 8001c3a:	f001 fabb 	bl	80031b4 <HAL_GPIO_Init>
}
 8001c3e:	e030      	b.n	8001ca2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_SPI_MspInit+0x1d0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12b      	bne.n	8001ca2 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c70:	f043 0310 	orr.w	r3, r3, #16
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_SPI_MspInit+0x1b8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c92:	2305      	movs	r3, #5
 8001c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_SPI_MspInit+0x1d4>)
 8001c9e:	f001 fa89 	bl	80031b4 <HAL_GPIO_Init>
}
 8001ca2:	bf00      	nop
 8001ca4:	3740      	adds	r7, #64	; 0x40
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40013000 	.word	0x40013000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40003800 	.word	0x40003800
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40003c00 	.word	0x40003c00
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40013400 	.word	0x40013400
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <HAL_TIM_Base_MspInit+0xe0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10e      	bne.n	8001d00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001cfe:	e052      	b.n	8001da6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2c      	ldr	r2, [pc, #176]	; (8001db8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d116      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2019      	movs	r0, #25
 8001d2c:	f001 f979 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d30:	2019      	movs	r0, #25
 8001d32:	f001 f992 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 8001d36:	e036      	b.n	8001da6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_TIM_Base_MspInit+0xec>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d116      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	201a      	movs	r0, #26
 8001d64:	f001 f95d 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d68:	201a      	movs	r0, #26
 8001d6a:	f001 f976 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e01a      	b.n	8001da6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM13)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_TIM_Base_MspInit+0xf0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d115      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_TIM_Base_MspInit+0xe4>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2101      	movs	r1, #1
 8001d9a:	202c      	movs	r0, #44	; 0x2c
 8001d9c:	f001 f941 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001da0:	202c      	movs	r0, #44	; 0x2c
 8001da2:	f001 f95a 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40000c00 	.word	0x40000c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800
 8001dc0:	40001c00 	.word	0x40001c00

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_UART_MspInit+0x94>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d133      	bne.n	8001e4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_UART_MspInit+0x98>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <HAL_UART_MspInit+0x9c>)
 8001e3a:	f001 f9bb 	bl	80031b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2025      	movs	r0, #37	; 0x25
 8001e44:	f001 f8ed 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e48:	2025      	movs	r0, #37	; 0x25
 8001e4a:	f001 f906 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020400 	.word	0x40020400

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 ff98 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ebe:	f002 ff0b 	bl	8004cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000031c 	.word	0x2000031c

08001ecc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ed2:	f002 ff01 	bl	8004cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000694 	.word	0x20000694

08001ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <USART1_IRQHandler+0x10>)
 8001ee6:	f003 fb33 	bl	8005550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000550 	.word	0x20000550

08001ef4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001efa:	f002 feed 	bl	8004cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000508 	.word	0x20000508

08001f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <SystemInit+0x28>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <SystemInit+0x28>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SystemInit+0x28>)
 8001f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f22:	609a      	str	r2, [r3, #8]
#endif
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f3a:	e003      	b.n	8001f44 <LoopCopyDataInit>

08001f3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f42:	3104      	adds	r1, #4

08001f44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f4c:	d3f6      	bcc.n	8001f3c <CopyDataInit>
  ldr  r2, =_sbss
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f50:	e002      	b.n	8001f58 <LoopFillZerobss>

08001f52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f54:	f842 3b04 	str.w	r3, [r2], #4

08001f58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f5c:	d3f9      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f5e:	f7ff ffd3 	bl	8001f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f004 f803 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7fe ff2f 	bl	8000dc8 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f70:	08006004 	.word	0x08006004
  ldr  r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f78:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001f7c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001f80:	2000208c 	.word	0x2000208c

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>

08001f86 <L6470_SPI_CS_delay>:
#define L6470_STATUS_BIT_STEP_LOSS_A   ((uint16_t)0x2000)  // (active low, latched) Stall detected on bridge A
#define L6470_STATUS_BIT_STEP_LOSS_B   ((uint16_t)0x4000)  // (active low, latched) Stall detected on bridge B
#define L6470_STATUS_BIT_SCK_MOD       ((uint16_t)0x8000)  // (unused) step-clock mode


void L6470_SPI_CS_delay(L6470_Motor_IC *motor) {
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	// Need to keep CS high >= 800ns in between SPI byte transmissions
	// Assume max HCLK=180MHz, 1 cycle=5.5555ns
	// 145 cycles required to delay that much
	// Do 150 cycles

	for (uint8_t i = 0; i < 150; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e003      	b.n	8001f9c <L6470_SPI_CS_delay+0x16>
		asm("nop"); // Delay next cycle
 8001f94:	bf00      	nop
	for (uint8_t i = 0; i < 150; i++) {
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b95      	cmp	r3, #149	; 0x95
 8001fa0:	d9f8      	bls.n	8001f94 <L6470_SPI_CS_delay+0xe>
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <L6470_SPI_transmit_byte>:
/**
 * Send a byte to the motor chip
 *
 * @param tx: Byte to transmit to the motor chip
 */
void L6470_SPI_transmit_byte(L6470_Motor_IC *motor, uint8_t tx) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6858      	ldr	r0, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	891b      	ldrh	r3, [r3, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f001 fa88 	bl	80034dc <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Transmit(motor->hspi, &tx, 1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	1cf9      	adds	r1, r7, #3
 8001fd2:	23ff      	movs	r3, #255	; 0xff
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f002 f838 	bl	800404a <HAL_SPI_Transmit>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6858      	ldr	r0, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	891b      	ldrh	r3, [r3, #8]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	f001 fa75 	bl	80034dc <HAL_GPIO_WritePin>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <L6470_SPI_receive_byte>:

/**
 * Receive a byte from the motor chip and return its value.
 */
uint8_t L6470_SPI_receive_byte(L6470_Motor_IC *motor) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	uint8_t rx;
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_RESET);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6858      	ldr	r0, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	891b      	ldrh	r3, [r3, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	f001 fa65 	bl	80034dc <HAL_GPIO_WritePin>
	motor->HAL_SPI_Status = HAL_SPI_Receive(motor->hspi, &rx, 1,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 010f 	add.w	r1, r7, #15
 800201a:	23ff      	movs	r3, #255	; 0xff
 800201c:	2201      	movs	r2, #1
 800201e:	f002 f950 	bl	80042c2 <HAL_SPI_Receive>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	761a      	strb	r2, [r3, #24]
			L6470_SPI_TIMEOUT);
	HAL_GPIO_WritePin(motor->cs_base, motor->cs_pin, GPIO_PIN_SET);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6858      	ldr	r0, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	891b      	ldrh	r3, [r3, #8]
 8002032:	2201      	movs	r2, #1
 8002034:	4619      	mov	r1, r3
 8002036:	f001 fa51 	bl	80034dc <HAL_GPIO_WritePin>
	return rx;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <L6470_read_register>:

//---------------------End of Helper Functions----------------------

uint32_t L6470_read_register(L6470_Motor_IC *motor, uint8_t reg_addr) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
	uint8_t tx = L6470_CMD_GETPARAM | reg_addr;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	74fb      	strb	r3, [r7, #19]
	uint8_t rx[4] = {0};
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
	uint32_t return_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffa1 	bl	8001fb0 <L6470_SPI_transmit_byte>

	// All registers are >= 1 byte
	L6470_SPI_CS_delay(motor);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff89 	bl	8001f86 <L6470_SPI_CS_delay>
	rx[0] = L6470_SPI_receive_byte(motor);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffc0 	bl	8001ffa <L6470_SPI_receive_byte>
 800207a:	4603      	mov	r3, r0
 800207c:	733b      	strb	r3, [r7, #12]
	return_val = (uint32_t)rx[0];
 800207e:	7b3b      	ldrb	r3, [r7, #12]
 8002080:	617b      	str	r3, [r7, #20]

	// Registers >= 2 byte
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d020      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_EL_POS_ADDR
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d01d      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d01a      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_SPEED_ADDR
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b04      	cmp	r3, #4
 8002098:	d017      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_ACC_ADDR
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d014      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_DEC_ADDR
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d011      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_MAX_SPEED_ADDR
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	d00e      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_MIN_SPEED_ADDR
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d00b      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_FS_SPD_ADDR
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	2b15      	cmp	r3, #21
 80020b6:	d008      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_INT_SPEED_ADDR
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	2b0d      	cmp	r3, #13
 80020bc:	d005      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_CONFIG_ADDR
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	2b18      	cmp	r3, #24
 80020c2:	d002      	beq.n	80020ca <L6470_read_register+0x86>
			|| reg_addr == L6470_PARAM_STATUS_ADDR) {
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b19      	cmp	r3, #25
 80020c8:	d10f      	bne.n	80020ea <L6470_read_register+0xa6>
		L6470_SPI_CS_delay(motor);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff5b 	bl	8001f86 <L6470_SPI_CS_delay>
		rx[1] = L6470_SPI_receive_byte(motor);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff92 	bl	8001ffa <L6470_SPI_receive_byte>
 80020d6:	4603      	mov	r3, r0
 80020d8:	737b      	strb	r3, [r7, #13]
		return_val <<= 8;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	617b      	str	r3, [r7, #20]
		return_val |= (uint32_t)rx[1];
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	461a      	mov	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
	}

	// 3 byte registers
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d005      	beq.n	80020fc <L6470_read_register+0xb8>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d002      	beq.n	80020fc <L6470_read_register+0xb8>
			|| reg_addr == L6470_PARAM_SPEED_ADDR) {
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d10f      	bne.n	800211c <L6470_read_register+0xd8>
		L6470_SPI_CS_delay(motor);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff42 	bl	8001f86 <L6470_SPI_CS_delay>
		rx[2] = L6470_SPI_receive_byte(motor);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff79 	bl	8001ffa <L6470_SPI_receive_byte>
 8002108:	4603      	mov	r3, r0
 800210a:	73bb      	strb	r3, [r7, #14]
		return_val <<= 8;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	617b      	str	r3, [r7, #20]
		return_val |= (uint32_t)rx[2];
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	461a      	mov	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 800211c:	b662      	cpsie	i
}
 800211e:	bf00      	nop
	}

	__enable_irq();

	return return_val;
 8002120:	697b      	ldr	r3, [r7, #20]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <L6470_write_register>:


void L6470_write_register(L6470_Motor_IC *motor, uint8_t reg_addr,
		uint32_t reg_val) {
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	460b      	mov	r3, r1
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	72fb      	strb	r3, [r7, #11]
	// Similar logic as L6470_read_register(), but write instead
	// User handles matching the right length of reg_val to reg_addr
	uint8_t tx = L6470_CMD_SETPARAM | reg_addr;
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	75fb      	strb	r3, [r7, #23]
	uint32_t shifted_byte = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ff31 	bl	8001fb0 <L6470_SPI_transmit_byte>

	// 3 byte registers
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d002      	beq.n	8002160 <L6470_write_register+0x36>
			|| reg_addr == L6470_PARAM_SPEED_ADDR) {
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d10d      	bne.n	800217c <L6470_write_register+0x52>
		shifted_byte = reg_val;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 16;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	0c1b      	lsrs	r3, r3, #16
 8002168:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff0b 	bl	8001f86 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff ff1a 	bl	8001fb0 <L6470_SPI_transmit_byte>
	}

	// Registers >= 2 byte
	if (reg_addr == L6470_PARAM_ABS_POS_ADDR
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d020      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_EL_POS_ADDR
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d01d      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MARK_ADDR
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d01a      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_SPEED_ADDR
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d017      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_ACC_ADDR
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d014      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_DEC_ADDR
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d011      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MAX_SPEED_ADDR
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	2b07      	cmp	r3, #7
 80021a4:	d00e      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_MIN_SPEED_ADDR
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d00b      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_FS_SPD_ADDR
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	2b15      	cmp	r3, #21
 80021b0:	d008      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_INT_SPEED_ADDR
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	2b0d      	cmp	r3, #13
 80021b6:	d005      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_CONFIG_ADDR
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	2b18      	cmp	r3, #24
 80021bc:	d002      	beq.n	80021c4 <L6470_write_register+0x9a>
			|| reg_addr == L6470_PARAM_STATUS_ADDR) {
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	2b19      	cmp	r3, #25
 80021c2:	d10d      	bne.n	80021e0 <L6470_write_register+0xb6>
		shifted_byte = reg_val;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	613b      	str	r3, [r7, #16]
		shifted_byte >>= 8;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	613b      	str	r3, [r7, #16]
		L6470_SPI_CS_delay(motor);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff fed9 	bl	8001f86 <L6470_SPI_CS_delay>
		L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4619      	mov	r1, r3
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff fee8 	bl	8001fb0 <L6470_SPI_transmit_byte>
	}

	// All registers are >= 1 byte
	shifted_byte = reg_val;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	613b      	str	r3, [r7, #16]
	L6470_SPI_CS_delay(motor);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff fece 	bl	8001f86 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)shifted_byte);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff fedd 	bl	8001fb0 <L6470_SPI_transmit_byte>

	L6470_SPI_CS_delay(motor);
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7ff fec5 	bl	8001f86 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 80021fc:	b662      	cpsie	i
}
 80021fe:	bf00      	nop

	__enable_irq();

	return;
 8002200:	bf00      	nop
}
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <L6470_get_status>:

/**
 * Read the status register and update the struct's status variables
 * Datasheet pg 55
 */
void L6470_get_status(L6470_Motor_IC *motor) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

	uint8_t tx = L6470_CMD_GETSTATUS;
 8002210:	23d0      	movs	r3, #208	; 0xd0
 8002212:	75fb      	strb	r3, [r7, #23]
	uint8_t rx[2] = {0};
 8002214:	2300      	movs	r3, #0
 8002216:	81bb      	strh	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fec5 	bl	8001fb0 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fead 	bl	8001f86 <L6470_SPI_CS_delay>
	rx[0] = L6470_SPI_receive_byte(motor);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fee4 	bl	8001ffa <L6470_SPI_receive_byte>
 8002232:	4603      	mov	r3, r0
 8002234:	733b      	strb	r3, [r7, #12]
	L6470_SPI_CS_delay(motor);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fea5 	bl	8001f86 <L6470_SPI_CS_delay>
	rx[1] = L6470_SPI_receive_byte(motor);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fedc 	bl	8001ffa <L6470_SPI_receive_byte>
 8002242:	4603      	mov	r3, r0
 8002244:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsie i" : : : "memory");
 8002246:	b662      	cpsie	i
}
 8002248:	bf00      	nop
	__enable_irq();

	uint16_t status_reg = ((uint16_t)rx[0] << 8) | ((uint16_t)rx[1]);
 800224a:	7b3b      	ldrb	r3, [r7, #12]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b21a      	sxth	r2, r3
 8002250:	7b7b      	ldrb	r3, [r7, #13]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b21b      	sxth	r3, r3
 8002258:	82bb      	strh	r3, [r7, #20]

	//uint32_t status_reg_read = L6470_read_register(motor, L6470_PARAM_STATUS_ADDR);

	// 1 bit statuses ("casting as bool" to avoid integer overflow)
	motor->HiZ_status         =  (status_reg & L6470_STATUS_BIT_HiZ);
 800225a:	8abb      	ldrh	r3, [r7, #20]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	76da      	strb	r2, [r3, #27]
	motor->BUSY_status        = 0 != (status_reg & L6470_STATUS_BIT_BUSY);
 8002268:	8abb      	ldrh	r3, [r7, #20]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor->SW_F_status        = 0 != (status_reg & L6470_STATUS_BIT_SW_F);
 8002280:	8abb      	ldrh	r3, [r7, #20]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	771a      	strb	r2, [r3, #28]
	motor->SW_EVN_status      = 0 != (status_reg & L6470_STATUS_BIT_SW_EVN);
 8002296:	8abb      	ldrh	r3, [r7, #20]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	775a      	strb	r2, [r3, #29]
	motor->DIR_status         = 0 != (status_reg & L6470_STATUS_BIT_DIR);
 80022ac:	8abb      	ldrh	r3, [r7, #20]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	779a      	strb	r2, [r3, #30]
	motor->NOTPERF_CMD_status = 0 != (status_reg & L6470_STATUS_BIT_NOTPERF_CMD);
 80022c2:	8abb      	ldrh	r3, [r7, #20]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	77da      	strb	r2, [r3, #31]
	motor->WRONG_CMD_status   = 0 != (status_reg & L6470_STATUS_BIT_WRONG_CMD);
 80022d8:	8abb      	ldrh	r3, [r7, #20]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]
	motor->UVLO_status        = 0 != (status_reg & L6470_STATUS_BIT_UVLO);
 80022f0:	8abb      	ldrh	r3, [r7, #20]
 80022f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor->TH_WRN_status      = 0 != (status_reg & L6470_STATUS_BIT_TH_WRN);
 8002308:	8abb      	ldrh	r3, [r7, #20]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	motor->TH_SD_status       = 0 != (status_reg & L6470_STATUS_BIT_TH_SD);
 8002320:	8abb      	ldrh	r3, [r7, #20]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	motor->OCD_status         = 0 != (status_reg & L6470_STATUS_BIT_OCD);
 8002338:	8abb      	ldrh	r3, [r7, #20]
 800233a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	motor->STEP_LOSS_A_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_A);
 8002350:	8abb      	ldrh	r3, [r7, #20]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	motor->STEP_LOSS_B_status = 0 != (status_reg & L6470_STATUS_BIT_STEP_LOSS_B);
 8002368:	8abb      	ldrh	r3, [r7, #20]
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	motor->SCK_MOD_status     = 0 != (status_reg & L6470_STATUS_BIT_SCK_MOD);
 8002380:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	0bdb      	lsrs	r3, r3, #15
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	// 2 bit motor status
	uint8_t motor_status_1    = status_reg & L6470_STATUS_BIT_MOT_STATUS_1;
 8002392:	8abb      	ldrh	r3, [r7, #20]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	74fb      	strb	r3, [r7, #19]
	uint8_t motor_status_0    = status_reg & L6470_STATUS_BIT_MOT_STATUS_0;
 800239c:	8abb      	ldrh	r3, [r7, #20]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	74bb      	strb	r3, [r7, #18]

	uint8_t motor_status = (motor_status_1 << 1) | (motor_status_0);
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	b25a      	sxtb	r2, r3
 80023ac:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	747b      	strb	r3, [r7, #17]
	switch(motor_status) {
 80023b6:	7c7b      	ldrb	r3, [r7, #17]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d81b      	bhi.n	80023f4 <L6470_get_status+0x1ec>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <L6470_get_status+0x1bc>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023dd 	.word	0x080023dd
 80023cc:	080023e5 	.word	0x080023e5
 80023d0:	080023ed 	.word	0x080023ed
	case 0:
		motor->MOT_status = Stopped;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	769a      	strb	r2, [r3, #26]
		break;
 80023da:	e00c      	b.n	80023f6 <L6470_get_status+0x1ee>
	case 1:
		motor->MOT_status = Acceleration;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	769a      	strb	r2, [r3, #26]
		break;
 80023e2:	e008      	b.n	80023f6 <L6470_get_status+0x1ee>
	case 2:
		motor->MOT_status = Deceleration;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	769a      	strb	r2, [r3, #26]
		break;
 80023ea:	e004      	b.n	80023f6 <L6470_get_status+0x1ee>
	case 3:
		motor->MOT_status = Constant_Speed;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	769a      	strb	r2, [r3, #26]
		break;
 80023f2:	e000      	b.n	80023f6 <L6470_get_status+0x1ee>
	default:
		break;
 80023f4:	bf00      	nop
	}
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <L6470_init_motor>:


void L6470_init_motor(L6470_Motor_IC* motor, L6470_Stepping_Mode mode, float step_angle) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	460b      	mov	r3, r1
 800240a:	ed87 0a01 	vstr	s0, [r7, #4]
 800240e:	72fb      	strb	r3, [r7, #11]
	// Call L6470_get_status to reset FLAG
	L6470_get_status(motor);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff fef9 	bl	8002208 <L6470_get_status>

	// Configure the stepping mode
	motor->step_mode = mode;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	7afa      	ldrb	r2, [r7, #11]
 800241a:	765a      	strb	r2, [r3, #25]


	// When the stepping mode is changed, the ABS_POS register is invalidated, so zero it
	L6470_zero_motor(motor);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8ac 	bl	800257a <L6470_zero_motor>
	L6470_write_register(motor, L6470_PARAM_STEP_MODE_ADDR, mode);
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	461a      	mov	r2, r3
 8002426:	2116      	movs	r1, #22
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fe7e 	bl	800212a <L6470_write_register>

	// Store the step angle in the struct
	motor->step_angle = step_angle;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

	// Stop the motor in case it's moving.
	// This happens when the microcontroller resets without losing
	// power while the motor is moving.
	L6470_stop_motor(motor);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8b6 	bl	80025a6 <L6470_stop_motor>

	return;
 800243a:	bf00      	nop
}
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	0000      	movs	r0, r0
 8002444:	0000      	movs	r0, r0
	...

08002448 <L6470_set_motor_max_speed>:


void L6470_set_motor_max_speed(L6470_Motor_IC* motor, float degree_per_sec) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	ed87 0a00 	vstr	s0, [r7]
//	// Check register h07; default should be h41
	uint32_t max_speed = L6470_read_register(motor, L6470_PARAM_MAX_SPEED_ADDR);
 8002454:	2107      	movs	r1, #7
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fdf4 	bl	8002044 <L6470_read_register>
 800245c:	60f8      	str	r0, [r7, #12]

	// Convert; datasheet pg 43
	// Max is 1023 step/tick = 15610 step/s = 28098 degree/s;
	// CAUTION: Because we want to compensate for this division so that the motor can run() at a speed close to max,
	// I added this +1, but this does mean that goto() runs at a faster speed than the degree_per_sec here
	uint32_t step_per_tick = (uint32_t)((degree_per_sec / 1.8 / 15.25) + 1);
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f7fe f836 	bl	80004d0 <__aeabi_f2d>
 8002464:	a316      	add	r3, pc, #88	; (adr r3, 80024c0 <L6470_set_motor_max_speed+0x78>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f9b3 	bl	80007d4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <L6470_set_motor_max_speed+0x70>)
 800247c:	f7fe f9aa 	bl	80007d4 <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <L6470_set_motor_max_speed+0x74>)
 800248e:	f7fd fec1 	bl	8000214 <__adddf3>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fa83 	bl	80009a4 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	60bb      	str	r3, [r7, #8]
	L6470_write_register(motor, L6470_PARAM_MAX_SPEED_ADDR, step_per_tick);
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	2107      	movs	r1, #7
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe3f 	bl	800212a <L6470_write_register>

	//check register
	//max_speed = L6470_read_register(motor, L6470_PARAM_MAX_SPEED_ADDR);

	return;
 80024ac:	bf00      	nop
}
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	f3af 8000 	nop.w
 80024b8:	402e8000 	.word	0x402e8000
 80024bc:	3ff00000 	.word	0x3ff00000
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	3ffccccc 	.word	0x3ffccccc

080024c8 <L6470_goto_motor_pos>:

	//uint32_t check = L6470_read_register(motor, L6470_PARAM_DEC_ADDR);
}


void L6470_goto_motor_pos(L6470_Motor_IC* motor, float abs_pos_degree) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t abs_pos_step = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]

	//Convert degrees to steps
	if (abs_pos_degree < 0) {
 80024d8:	edd7 7a00 	vldr	s15, [r7]
 80024dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d514      	bpl.n	8002510 <L6470_goto_motor_pos+0x48>
		abs_pos_step = (uint32_t)(abs_pos_degree * -1 / motor->step_angle);
 80024e6:	edd7 7a00 	vldr	s15, [r7]
 80024ea:	eef1 6a67 	vneg.f32	s13, s15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80024f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fc:	ee17 3a90 	vmov	r3, s15
 8002500:	60fb      	str	r3, [r7, #12]
		abs_pos_step -= 1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3b01      	subs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
		abs_pos_step = ~abs_pos_step;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e00b      	b.n	8002528 <L6470_goto_motor_pos+0x60>
	}
	else { // Positive (forward direction)
		abs_pos_step = (uint32_t)(abs_pos_degree / motor->step_angle);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002516:	edd7 6a00 	vldr	s13, [r7]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
	}

	__disable_irq();
	L6470_SPI_transmit_byte(motor, L6470_CMD_GOTO);
 800252c:	2160      	movs	r1, #96	; 0x60
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fd3e 	bl	8001fb0 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fd26 	bl	8001f86 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 16));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fd34 	bl	8001fb0 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fd1c 	bl	8001f86 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)(abs_pos_step >> 8));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fd2a 	bl	8001fb0 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff fd12 	bl	8001f86 <L6470_SPI_CS_delay>
	L6470_SPI_transmit_byte(motor, (uint8_t)abs_pos_step);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fd21 	bl	8001fb0 <L6470_SPI_transmit_byte>
  __ASM volatile ("cpsie i" : : : "memory");
 800256e:	b662      	cpsie	i
}
 8002570:	bf00      	nop
	__enable_irq();

	return;
 8002572:	bf00      	nop
}
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <L6470_zero_motor>:


void L6470_zero_motor(L6470_Motor_IC* motor) {
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	uint8_t tx = L6470_CMD_RESETPOS;
 8002582:	23d8      	movs	r3, #216	; 0xd8
 8002584:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop

	__disable_irq();
	L6470_SPI_transmit_byte(motor, tx);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fd0e 	bl	8001fb0 <L6470_SPI_transmit_byte>
	L6470_SPI_CS_delay(motor);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fcf6 	bl	8001f86 <L6470_SPI_CS_delay>
  __ASM volatile ("cpsie i" : : : "memory");
 800259a:	b662      	cpsie	i
}
 800259c:	bf00      	nop
	__enable_irq();

	return;
 800259e:	bf00      	nop
}
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <L6470_stop_motor>:

	return;
}


void L6470_stop_motor(L6470_Motor_IC* motor) {
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	L6470_SPI_transmit_byte(motor, L6470_CMD_HARDHIZ);
 80025ae:	21a8      	movs	r1, #168	; 0xa8
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fcfd 	bl	8001fb0 <L6470_SPI_transmit_byte>
	return;
 80025b6:	bf00      	nop
}
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <L6470_get_position_deg>:
	L6470_SPI_transmit_byte(motor, L6470_CMD_HARDSTOP);
	return;
}


float L6470_get_position_deg(L6470_Motor_IC* motor) {
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	float pos = 0;
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
	pos = (float)L6470_read_register(motor, L6470_PARAM_ABS_POS_ADDR);
 80025cc:	2101      	movs	r1, #1
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd38 	bl	8002044 <L6470_read_register>
 80025d4:	ee07 0a90 	vmov	s15, r0
 80025d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025dc:	edc7 7a03 	vstr	s15, [r7, #12]

	// Converting
	pos *= motor->step_angle;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	edc7 7a03 	vstr	s15, [r7, #12]

	//update struct

	return pos;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	ee07 3a90 	vmov	s15, r3
}
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <init_board>:
// Prviate function prototypes here
static inline uint8_t validate_command(int16_t cmd_index, uint16_t data_sz);

// Private function prototypes end

void init_board(uint8_t board_addr) {
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
    CLB_receive_header.num_packets = 0;
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <init_board+0x24>)
 8002610:	2200      	movs	r2, #0
 8002612:	711a      	strb	r2, [r3, #4]
	CLB_board_addr = board_addr;
 8002614:	4a05      	ldr	r2, [pc, #20]	; (800262c <init_board+0x28>)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	7013      	strb	r3, [r2, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000a38 	.word	0x20000a38
 800262c:	20000507 	.word	0x20000507

08002630 <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800263e:	b672      	cpsid	i
}
 8002640:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800264e:	2200      	movs	r2, #0
 8002650:	4619      	mov	r1, r3
 8002652:	f000 ff43 	bl	80034dc <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	23ff      	movs	r3, #255	; 0xff
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	f001 fcf2 	bl	800404a <HAL_SPI_Transmit>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800267c:	2201      	movs	r2, #1
 800267e:	4619      	mov	r1, r3
 8002680:	f000 ff2c 	bl	80034dc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8002684:	b662      	cpsie	i
}
 8002686:	bf00      	nop
	__enable_irq();

}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	f000 ff12 	bl	80034dc <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	23ff      	movs	r3, #255	; 0xff
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	f001 fcc1 	bl	800404a <HAL_SPI_Transmit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80026d8:	8b3a      	ldrh	r2, [r7, #24]
 80026da:	23ff      	movs	r3, #255	; 0xff
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	f001 fdf0 	bl	80042c2 <HAL_SPI_Receive>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80026f8:	2201      	movs	r2, #1
 80026fa:	4619      	mov	r1, r3
 80026fc:	f000 feee 	bl	80034dc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8002700:	b662      	cpsie	i
}
 8002702:	bf00      	nop
	__enable_irq();

}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8002718:	230f      	movs	r3, #15
 800271a:	733b      	strb	r3, [r7, #12]
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	f107 010c 	add.w	r1, r7, #12
 8002728:	2201      	movs	r2, #1
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffae 	bl	8002690 <spi_transmit_receive>

	return *rx;
 8002734:	7a3b      	ldrb	r3, [r7, #8]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8002746:	21c0      	movs	r1, #192	; 0xc0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ffdf 	bl	800270c <read_status_register>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8002770:	e002      	b.n	8002778 <wait_for_operation+0x16>
		++count;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffe0 	bl	800273e <flash_is_busy>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <wait_for_operation+0x34>
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4293      	cmp	r3, r2
 8002794:	d3ed      	bcc.n	8002772 <wait_for_operation+0x10>
	}
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
 80027aa:	4613      	mov	r3, r2
 80027ac:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 80027ae:	231f      	movs	r3, #31
 80027b0:	733b      	strb	r3, [r7, #12]
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	737b      	strb	r3, [r7, #13]
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	2203      	movs	r2, #3
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff34 	bl	8002630 <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 80027c8:	2132      	movs	r1, #50	; 0x32
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffc9 	bl	8002762 <wait_for_operation>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	733b      	strb	r3, [r7, #12]
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 80027f4:	2313      	movs	r3, #19
 80027f6:	723b      	strb	r3, [r7, #8]
 80027f8:	2300      	movs	r3, #0
 80027fa:	727b      	strb	r3, [r7, #9]
 80027fc:	7b3b      	ldrb	r3, [r7, #12]
 80027fe:	72bb      	strb	r3, [r7, #10]
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	2204      	movs	r2, #4
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff0f 	bl	8002630 <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8002812:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffa3 	bl	8002762 <wait_for_operation>
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fa24 	bl	8002c7a <ping_flash>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d033      	beq.n	80028a0 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8002838:	21c0      	movs	r1, #192	; 0xc0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff66 	bl	800270c <read_status_register>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8002854:	7bbb      	ldrb	r3, [r7, #14]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <get_ECC_status+0x46>
 800285a:	7b7b      	ldrb	r3, [r7, #13]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8002868:	e01f      	b.n	80028aa <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <get_ECC_status+0x5c>
 8002870:	7b7b      	ldrb	r3, [r7, #13]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 800287e:	e014      	b.n	80028aa <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <get_ECC_status+0x72>
 8002886:	7b7b      	ldrb	r3, [r7, #13]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8002894:	e009      	b.n	80028aa <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 800289e:	e004      	b.n	80028aa <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 80028a8:	e7ff      	b.n	80028aa <get_ECC_status+0x86>
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b088      	sub	sp, #32
 80028b6:	af02      	add	r7, sp, #8
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	4611      	mov	r1, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	80fb      	strh	r3, [r7, #6]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	753b      	strb	r3, [r7, #20]
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 80028d8:	2303      	movs	r3, #3
 80028da:	743b      	strb	r3, [r7, #16]
 80028dc:	7d3b      	ldrb	r3, [r7, #20]
 80028de:	747b      	strb	r3, [r7, #17]
 80028e0:	7d7b      	ldrb	r3, [r7, #21]
 80028e2:	74bb      	strb	r3, [r7, #18]
 80028e4:	2300      	movs	r3, #0
 80028e6:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 80028e8:	f107 0110 	add.w	r1, r7, #16
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2204      	movs	r2, #4
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fecb 	bl	8002690 <spi_transmit_receive>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	460b      	mov	r3, r1
 8002912:	80fb      	strh	r3, [r7, #6]
 8002914:	4613      	mov	r3, r2
 8002916:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8002918:	88bb      	ldrh	r3, [r7, #4]
 800291a:	4619      	mov	r1, r3
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff ff5b 	bl	80027d8 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8002922:	8b3b      	ldrh	r3, [r7, #24]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff ffc2 	bl	80028b2 <read_flash_buffer>

	get_ECC_status(flash);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ff78 	bl	8002824 <get_ECC_status>
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8002944:	21b0      	movs	r1, #176	; 0xb0
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fee0 	bl	800270c <read_status_register>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	f043 0310 	orr.w	r3, r3, #16
 8002956:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8002958:	7bba      	ldrb	r2, [r7, #14]
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	429a      	cmp	r2, r3
 800295e:	d005      	beq.n	800296c <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	461a      	mov	r2, r3
 8002964:	21b0      	movs	r1, #176	; 0xb0
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff19 	bl	800279e <write_status_register>
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800297c:	21b0      	movs	r1, #176	; 0xb0
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fec4 	bl	800270c <read_status_register>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8002990:	7bba      	ldrb	r2, [r7, #14]
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	429a      	cmp	r2, r3
 8002996:	d005      	beq.n	80029a4 <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	461a      	mov	r2, r3
 800299c:	21b0      	movs	r1, #176	; 0xb0
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fefd 	bl	800279e <write_status_register>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 80029b2:	af02      	add	r7, sp, #8
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 80029b8:	f107 0108 	add.w	r1, r7, #8
 80029bc:	1d38      	adds	r0, r7, #4
 80029be:	2300      	movs	r3, #0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	f7ff ff9a 	bl	8002902 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80029da:	e00e      	b.n	80029fa <find_write_ptr+0x4e>
		if (read_buffer[b] != 0xFF) {
 80029dc:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80029e0:	f107 0208 	add.w	r2, r7, #8
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d002      	beq.n	80029f0 <find_write_ptr+0x44>
			first_page_empty = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80029f0:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80029f4:	3301      	adds	r3, #1
 80029f6:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80029fa:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80029fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a02:	d3eb      	bcc.n	80029dc <find_write_ptr+0x30>
		}
	}
	if (first_page_empty) {
 8002a04:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <find_write_ptr+0x76>
		flash->current_page = 0;
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8002a20:	e0f0      	b.n	8002c04 <find_write_ptr+0x258>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 8002a28:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8002a2c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8002a30:	e041      	b.n	8002ab6 <find_write_ptr+0x10a>
		cur_search_page = min + (max-min) / 2;
 8002a32:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8002a36:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8002a4c:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8002a50:	f107 0108 	add.w	r1, r7, #8
 8002a54:	1d38      	adds	r0, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	9200      	str	r2, [sp, #0]
 8002a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5e:	6800      	ldr	r0, [r0, #0]
 8002a60:	f7ff ff4f 	bl	8002902 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8002a70:	e00f      	b.n	8002a92 <find_write_ptr+0xe6>
			if (read_buffer[b] != 0xFF) {
 8002a72:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	2bff      	cmp	r3, #255	; 0xff
 8002a7e:	d003      	beq.n	8002a88 <find_write_ptr+0xdc>
				cur_page_empty = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 8002a86:	e009      	b.n	8002a9c <find_write_ptr+0xf0>
		for (uint16_t b = 0; b < 2048; b++) {
 8002a88:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8002a92:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8002a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9a:	d3ea      	bcc.n	8002a72 <find_write_ptr+0xc6>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8002a9c:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <find_write_ptr+0x102>
			max = cur_search_page;
 8002aa4:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8002aa8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8002aac:	e003      	b.n	8002ab6 <find_write_ptr+0x10a>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 8002aae:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8002ab2:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8002ab6:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8002aba:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d8b6      	bhi.n	8002a32 <find_write_ptr+0x86>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 8002ac4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002ada:	f107 0108 	add.w	r1, r7, #8
 8002ade:	1d38      	adds	r0, r7, #4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae8:	6800      	ldr	r0, [r0, #0]
 8002aea:	f7ff ff0a 	bl	8002902 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 8002af6:	2bff      	cmp	r3, #255	; 0xff
 8002af8:	d01e      	beq.n	8002b38 <find_write_ptr+0x18c>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002b02:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d106      	bne.n	8002b18 <find_write_ptr+0x16c>
			flash->next_free_column = 2048;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b12:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 8002b16:	e075      	b.n	8002c04 <find_write_ptr+0x258>
			flash->current_page++;
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8002b36:	e065      	b.n	8002c04 <find_write_ptr+0x258>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8002b3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b42:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8002b46:	e019      	b.n	8002b7c <find_write_ptr+0x1d0>
			if (read_buffer[b] != 0xFF) {
 8002b48:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8002b4c:	f107 0208 	add.w	r2, r7, #8
 8002b50:	5cd3      	ldrb	r3, [r2, r3]
 8002b52:	2bff      	cmp	r3, #255	; 0xff
 8002b54:	d00b      	beq.n	8002b6e <find_write_ptr+0x1c2>
				flash->next_free_column = b+1;
 8002b56:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 8002b6c:	e00a      	b.n	8002b84 <find_write_ptr+0x1d8>
		for (int16_t b = 2047; b >= 0; b--) {
 8002b6e:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8002b7c:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dae1      	bge.n	8002b48 <find_write_ptr+0x19c>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d806      	bhi.n	8002ba0 <find_write_ptr+0x1f4>
		flash->next_free_column = 512;
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8002b9e:	e031      	b.n	8002c04 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1024)
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d806      	bhi.n	8002bbc <find_write_ptr+0x210>
		flash->next_free_column = 1024;
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb6:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8002bba:	e023      	b.n	8002c04 <find_write_ptr+0x258>
	else if (flash->next_free_column <= 1536)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8002bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bc8:	d806      	bhi.n	8002bd8 <find_write_ptr+0x22c>
		flash->next_free_column = 1536;
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002bd2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8002bd6:	e015      	b.n	8002c04 <find_write_ptr+0x258>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8002be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be4:	d20e      	bcs.n	8002c04 <find_write_ptr+0x258>
		flash->next_free_column = 0;
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 8002c04:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	887a      	ldrh	r2, [r7, #2]
 8002c2e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f836 	bl	8002ccc <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fe6b 	bl	800293c <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff fe84 	bl	8002974 <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff fe9d 	bl	80029ac <find_write_ptr>
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b088      	sub	sp, #32
 8002c7e:	af02      	add	r7, sp, #8
 8002c80:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8002c82:	239f      	movs	r3, #159	; 0x9f
 8002c84:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	f107 0110 	add.w	r1, r7, #16
 8002c8e:	2203      	movs	r2, #3
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	2202      	movs	r2, #2
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fcfb 	bl	8002690 <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8002c9a:	7b3b      	ldrb	r3, [r7, #12]
 8002c9c:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8002c9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2bef      	cmp	r3, #239	; 0xef
 8002cb2:	d106      	bne.n	8002cc2 <ping_flash+0x48>
 8002cb4:	8abb      	ldrh	r3, [r7, #20]
 8002cb6:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <ping_flash+0x48>
		return 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <ping_flash+0x4a>
	else
		return 0;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff fd32 	bl	800273e <flash_is_busy>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <reset_flash+0x18>
		return 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e00d      	b.n	8002d00 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8002ce4:	23ff      	movs	r3, #255	; 0xff
 8002ce6:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fc9d 	bl	8002630 <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <reset_flash+0x3c>)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fd32 	bl	8002762 <wait_for_operation>

	return 1;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	0007a120 	.word	0x0007a120

08002d0c <read_reserved_flash_page>:
	lock_flash(flash);

	return flash->last_write_failure_status;
}

void read_reserved_flash_page(W25N01GV_Flash *flash, uint8_t page_num, uint8_t* buffer, uint16_t buffer_sz) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	461a      	mov	r2, r3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	72fb      	strb	r3, [r7, #11]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	813b      	strh	r3, [r7, #8]
	// Grab the nth page of the last block of flash
	read_bytes_from_page(flash, buffer, buffer_sz,
 8002d20:	7afb      	ldrb	r3, [r7, #11]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b40      	subs	r3, #64	; 0x40
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fde6 	bl	8002902 <read_bytes_from_page>
			(W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK + page_num, 0);
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_Init+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_Init+0x40>)
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_Init+0x40>)
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x40>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 f94f 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f808 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7fe fe98 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x54>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_InitTick+0x58>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f967 	bl	8003076 <HAL_SYSTICK_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00e      	b.n	8002dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d80a      	bhi.n	8002dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f000 f92f 	bl	8003022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_InitTick+0x5c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000008 	.word	0x20000008

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	20002088 	.word	0x20002088

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20002088 	.word	0x20002088

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff3e 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff31 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa2 	bl	8002fc8 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff feb6 	bl	8002e0c <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e052      	b.n	8003166 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0216 	bic.w	r2, r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <HAL_DMA_Abort+0x62>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0208 	bic.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003110:	e013      	b.n	800313a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003112:	f7ff fe7b 	bl	8002e0c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b05      	cmp	r3, #5
 800311e:	d90c      	bls.n	800313a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e015      	b.n	8003166 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e4      	bne.n	8003112 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	223f      	movs	r2, #63	; 0x3f
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d004      	beq.n	800318c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e00c      	b.n	80031a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2205      	movs	r2, #5
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e165      	b.n	800349c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f040 8154 	bne.w	8003496 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d005      	beq.n	8003206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003202:	2b02      	cmp	r3, #2
 8003204:	d130      	bne.n	8003268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2203      	movs	r2, #3
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 0201 	and.w	r2, r3, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b03      	cmp	r3, #3
 8003272:	d017      	beq.n	80032a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d123      	bne.n	80032f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80ae 	beq.w	8003496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_GPIO_Init+0x300>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_GPIO_Init+0x300>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b5a      	ldr	r3, [pc, #360]	; (80034b4 <HAL_GPIO_Init+0x300>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003356:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_GPIO_Init+0x304>)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4f      	ldr	r2, [pc, #316]	; (80034bc <HAL_GPIO_Init+0x308>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x21a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_GPIO_Init+0x30c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x216>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_GPIO_Init+0x310>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x212>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x314>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x20e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_GPIO_Init+0x318>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x20a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_GPIO_Init+0x31c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x206>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_GPIO_Init+0x320>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x202>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x21c>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x304>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ee:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_GPIO_Init+0x324>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003412:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_GPIO_Init+0x324>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x324>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_GPIO_Init+0x324>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_GPIO_Init+0x324>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_GPIO_Init+0x324>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_GPIO_Init+0x324>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_GPIO_Init+0x324>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f ae96 	bls.w	80031d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40021400 	.word	0x40021400
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7ff fc04 	bl	8002e0c <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7ff fc00 	bl	8002e0c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f855 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fb64 	bl	8002d84 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08005fdc 	.word	0x08005fdc
 80036d4:	20000004 	.word	0x20000004
 80036d8:	20000008 	.word	0x20000008

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08005fec 	.word	0x08005fec

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003720:	f7ff ffdc 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08005fec 	.word	0x08005fec

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003748:	b087      	sub	sp, #28
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800374c:	2600      	movs	r6, #0
 800374e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003750:	2600      	movs	r6, #0
 8003752:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003754:	2600      	movs	r6, #0
 8003756:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003758:	2600      	movs	r6, #0
 800375a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800375c:	2600      	movs	r6, #0
 800375e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003760:	4ea3      	ldr	r6, [pc, #652]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003762:	68b6      	ldr	r6, [r6, #8]
 8003764:	f006 060c 	and.w	r6, r6, #12
 8003768:	2e0c      	cmp	r6, #12
 800376a:	f200 8137 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x298>
 800376e:	f20f 0c08 	addw	ip, pc, #8
 8003772:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080039dd 	.word	0x080039dd
 8003780:	080039dd 	.word	0x080039dd
 8003784:	080039dd 	.word	0x080039dd
 8003788:	080037b3 	.word	0x080037b3
 800378c:	080039dd 	.word	0x080039dd
 8003790:	080039dd 	.word	0x080039dd
 8003794:	080039dd 	.word	0x080039dd
 8003798:	080037b9 	.word	0x080037b9
 800379c:	080039dd 	.word	0x080039dd
 80037a0:	080039dd 	.word	0x080039dd
 80037a4:	080039dd 	.word	0x080039dd
 80037a8:	080038cf 	.word	0x080038cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80037ae:	613b      	str	r3, [r7, #16]
       break;
 80037b0:	e117      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b2:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80037b4:	613b      	str	r3, [r7, #16]
      break;
 80037b6:	e114      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b8:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c2:	4b8b      	ldr	r3, [pc, #556]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d024      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037de:	f04f 0500 	mov.w	r5, #0
 80037e2:	ea02 0004 	and.w	r0, r2, r4
 80037e6:	ea03 0105 	and.w	r1, r3, r5
 80037ea:	4b83      	ldr	r3, [pc, #524]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80037ec:	fb03 f201 	mul.w	r2, r3, r1
 80037f0:	2300      	movs	r3, #0
 80037f2:	fb03 f300 	mul.w	r3, r3, r0
 80037f6:	4413      	add	r3, r2
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80037fa:	fba0 0102 	umull	r0, r1, r0, r2
 80037fe:	440b      	add	r3, r1
 8003800:	4619      	mov	r1, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	461a      	mov	r2, r3
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	f7fd f8eb 	bl	80009e4 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4613      	mov	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e04c      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	461a      	mov	r2, r3
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	ea02 0800 	and.w	r8, r2, r0
 8003830:	ea03 0901 	and.w	r9, r3, r1
 8003834:	4640      	mov	r0, r8
 8003836:	4649      	mov	r1, r9
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	014b      	lsls	r3, r1, #5
 8003842:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003846:	0142      	lsls	r2, r0, #5
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	ebb0 0008 	subs.w	r0, r0, r8
 8003850:	eb61 0109 	sbc.w	r1, r1, r9
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	018b      	lsls	r3, r1, #6
 800385e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003862:	0182      	lsls	r2, r0, #6
 8003864:	1a12      	subs	r2, r2, r0
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	00d9      	lsls	r1, r3, #3
 8003874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003878:	00d0      	lsls	r0, r2, #3
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	eb12 0208 	adds.w	r2, r2, r8
 8003882:	eb43 0309 	adc.w	r3, r3, r9
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0299      	lsls	r1, r3, #10
 8003890:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003894:	0290      	lsls	r0, r2, #10
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f7fd f89d 	bl	80009e4 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4613      	mov	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b2:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	3301      	adds	r3, #1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e089      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ce:	4948      	ldr	r1, [pc, #288]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038d0:	6849      	ldr	r1, [r1, #4]
 80038d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038d6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d8:	4945      	ldr	r1, [pc, #276]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038da:	6849      	ldr	r1, [r1, #4]
 80038dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d024      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e4:	4942      	ldr	r1, [pc, #264]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038e6:	6849      	ldr	r1, [r1, #4]
 80038e8:	0989      	lsrs	r1, r1, #6
 80038ea:	4608      	mov	r0, r1
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038f4:	f04f 0500 	mov.w	r5, #0
 80038f8:	ea00 0204 	and.w	r2, r0, r4
 80038fc:	ea01 0305 	and.w	r3, r1, r5
 8003900:	493d      	ldr	r1, [pc, #244]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003902:	fb01 f003 	mul.w	r0, r1, r3
 8003906:	2100      	movs	r1, #0
 8003908:	fb01 f102 	mul.w	r1, r1, r2
 800390c:	1844      	adds	r4, r0, r1
 800390e:	493a      	ldr	r1, [pc, #232]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003910:	fba2 0101 	umull	r0, r1, r2, r1
 8003914:	1863      	adds	r3, r4, r1
 8003916:	4619      	mov	r1, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f7fd f860 	bl	80009e4 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4613      	mov	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e04a      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392e:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	461a      	mov	r2, r3
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	ea02 0400 	and.w	r4, r2, r0
 8003946:	ea03 0501 	and.w	r5, r3, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	014b      	lsls	r3, r1, #5
 8003958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800395c:	0142      	lsls	r2, r0, #5
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	1b00      	subs	r0, r0, r4
 8003964:	eb61 0105 	sbc.w	r1, r1, r5
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	018b      	lsls	r3, r1, #6
 8003972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003976:	0182      	lsls	r2, r0, #6
 8003978:	1a12      	subs	r2, r2, r0
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	00d9      	lsls	r1, r3, #3
 8003988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800398c:	00d0      	lsls	r0, r2, #3
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	1912      	adds	r2, r2, r4
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	0299      	lsls	r1, r3, #10
 80039a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039a6:	0290      	lsls	r0, r2, #10
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f7fd f814 	bl	80009e4 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0f1b      	lsrs	r3, r3, #28
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	693b      	ldr	r3, [r7, #16]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	017d7840 	.word	0x017d7840

080039fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e28d      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8083 	beq.w	8003b22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a1c:	4b94      	ldr	r3, [pc, #592]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d019      	beq.n	8003a5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a28:	4b91      	ldr	r3, [pc, #580]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a34:	4b8e      	ldr	r3, [pc, #568]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a40:	d00c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d112      	bne.n	8003a74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b84      	ldr	r3, [pc, #528]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x124>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e25a      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x90>
 8003a7e:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7b      	ldr	r2, [pc, #492]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xcc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xb4>
 8003a96:	4b76      	ldr	r3, [pc, #472]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a75      	ldr	r2, [pc, #468]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xcc>
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6b      	ldr	r2, [pc, #428]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f99c 	bl	8002e0c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7ff f998 	bl	8002e0c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e21f      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xdc>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7ff f988 	bl	8002e0c <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7ff f984 	bl	8002e0c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e20b      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b57      	ldr	r3, [pc, #348]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x104>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d06f      	beq.n	8003c0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b2e:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b3a:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b46:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d11c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b44      	ldr	r3, [pc, #272]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x186>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e1d3      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4937      	ldr	r1, [pc, #220]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b96:	e03a      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba0:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <HAL_RCC_OscConfig+0x278>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7ff f931 	bl	8002e0c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bae:	f7ff f92d 	bl	8002e0c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1b4      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4925      	ldr	r1, [pc, #148]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
 8003be0:	e015      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_OscConfig+0x278>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7ff f910 	bl	8002e0c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7ff f90c 	bl	8002e0c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e193      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d036      	beq.n	8003c88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7ff f8f0 	bl	8002e0c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c30:	f7ff f8ec 	bl	8002e0c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e173      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x234>
 8003c4e:	e01b      	b.n	8003c88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7ff f8d9 	bl	8002e0c <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5e:	f7ff f8d5 	bl	8002e0c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d907      	bls.n	8003c7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e15c      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	42470000 	.word	0x42470000
 8003c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ea      	bne.n	8003c5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8097 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a7e      	ldr	r2, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b79      	ldr	r3, [pc, #484]	; (8003eac <HAL_RCC_OscConfig+0x4b0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b76      	ldr	r3, [pc, #472]	; (8003eac <HAL_RCC_OscConfig+0x4b0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a75      	ldr	r2, [pc, #468]	; (8003eac <HAL_RCC_OscConfig+0x4b0>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7ff f895 	bl	8002e0c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7ff f891 	bl	8002e0c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e118      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b6c      	ldr	r3, [pc, #432]	; (8003eac <HAL_RCC_OscConfig+0x4b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x31e>
 8003d0c:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a65      	ldr	r2, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6713      	str	r3, [r2, #112]	; 0x70
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x358>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x340>
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a60      	ldr	r2, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a5d      	ldr	r2, [pc, #372]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x358>
 8003d3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a59      	ldr	r2, [pc, #356]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
 8003d48:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d4e:	f023 0304 	bic.w	r3, r3, #4
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7ff f856 	bl	8002e0c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7ff f852 	bl	8002e0c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0d7      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ee      	beq.n	8003d64 <HAL_RCC_OscConfig+0x368>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7ff f840 	bl	8002e0c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7ff f83c 	bl	8002e0c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0c1      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ee      	bne.n	8003d90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	4a3a      	ldr	r2, [pc, #232]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80ad 	beq.w	8003f28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d060      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d145      	bne.n	8003e6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <HAL_RCC_OscConfig+0x4b4>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7ff f810 	bl	8002e0c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df0:	f7ff f80c 	bl	8002e0c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e093      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	019b      	lsls	r3, r3, #6
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	3b01      	subs	r3, #1
 8003e28:	041b      	lsls	r3, r3, #16
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	491b      	ldr	r1, [pc, #108]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_OscConfig+0x4b4>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe ffe1 	bl	8002e0c <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fe ffdd 	bl	8002e0c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e064      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x452>
 8003e6c:	e05c      	b.n	8003f28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCC_OscConfig+0x4b4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe ffca 	bl	8002e0c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe ffc6 	bl	8002e0c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04d      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x480>
 8003e9a:	e045      	b.n	8003f28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e040      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40007000 	.word	0x40007000
 8003eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <HAL_RCC_OscConfig+0x538>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d030      	beq.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d129      	bne.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d122      	bne.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d119      	bne.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d10f      	bne.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07b      	b.n	8004042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5a:	d009      	beq.n	8003f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fdb4 	bl	8001af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0104 	and.w	r1, r3, #4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0210 	and.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_SPI_Transmit+0x22>
 8004068:	2302      	movs	r3, #2
 800406a:	e126      	b.n	80042ba <HAL_SPI_Transmit+0x270>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004074:	f7fe feca 	bl	8002e0c <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800408e:	e10b      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_Transmit+0x52>
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a0:	e102      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2203      	movs	r2, #3
 80040a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d10f      	bne.n	800410a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004108:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d007      	beq.n	8004128 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	d14b      	bne.n	80041ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_SPI_Transmit+0xf6>
 800413a:	8afb      	ldrh	r3, [r7, #22]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d13e      	bne.n	80041be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	881a      	ldrh	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004164:	e02b      	b.n	80041be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d112      	bne.n	800419a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	86da      	strh	r2, [r3, #54]	; 0x36
 8004198:	e011      	b.n	80041be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419a:	f7fe fe37 	bl	8002e0c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d803      	bhi.n	80041b2 <HAL_SPI_Transmit+0x168>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d102      	bne.n	80041b8 <HAL_SPI_Transmit+0x16e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041bc:	e074      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ce      	bne.n	8004166 <HAL_SPI_Transmit+0x11c>
 80041c8:	e04c      	b.n	8004264 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Transmit+0x18e>
 80041d2:	8afb      	ldrh	r3, [r7, #22]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d140      	bne.n	800425a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041fe:	e02c      	b.n	800425a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d113      	bne.n	8004236 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	86da      	strh	r2, [r3, #54]	; 0x36
 8004234:	e011      	b.n	800425a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004236:	f7fe fde9 	bl	8002e0c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d803      	bhi.n	800424e <HAL_SPI_Transmit+0x204>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d102      	bne.n	8004254 <HAL_SPI_Transmit+0x20a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004258:	e026      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1cd      	bne.n	8004200 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fbcb 	bl	8004a04 <SPI_EndRxTxTransaction>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e000      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b088      	sub	sp, #32
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d112      	bne.n	8004306 <HAL_SPI_Receive+0x44>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10e      	bne.n	8004306 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f8f1 	bl	80044e4 <HAL_SPI_TransmitReceive>
 8004302:	4603      	mov	r3, r0
 8004304:	e0ea      	b.n	80044dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_SPI_Receive+0x52>
 8004310:	2302      	movs	r3, #2
 8004312:	e0e3      	b.n	80044dc <HAL_SPI_Receive+0x21a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800431c:	f7fe fd76 	bl	8002e0c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800432e:	2302      	movs	r3, #2
 8004330:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004332:	e0ca      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_SPI_Receive+0x7e>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004344:	e0c1      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2204      	movs	r2, #4
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	d10f      	bne.n	80043ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d007      	beq.n	80043cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d162      	bne.n	800449a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043d4:	e02e      	b.n	8004434 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d115      	bne.n	8004410 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f103 020c 	add.w	r2, r3, #12
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800440e:	e011      	b.n	8004434 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004410:	f7fe fcfc 	bl	8002e0c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d803      	bhi.n	8004428 <HAL_SPI_Receive+0x166>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d102      	bne.n	800442e <HAL_SPI_Receive+0x16c>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004432:	e04a      	b.n	80044ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cb      	bne.n	80043d6 <HAL_SPI_Receive+0x114>
 800443e:	e031      	b.n	80044a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d113      	bne.n	8004476 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	b292      	uxth	r2, r2
 800445a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004474:	e011      	b.n	800449a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004476:	f7fe fcc9 	bl	8002e0c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d803      	bhi.n	800448e <HAL_SPI_Receive+0x1cc>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d102      	bne.n	8004494 <HAL_SPI_Receive+0x1d2>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004498:	e017      	b.n	80044ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1cd      	bne.n	8004440 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa45 	bl	8004938 <SPI_EndRxTransaction>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
 80044c6:	e000      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

error :
 80044c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	; 0x30
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f2:	2301      	movs	r3, #1
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_SPI_TransmitReceive+0x26>
 8004506:	2302      	movs	r3, #2
 8004508:	e18a      	b.n	8004820 <HAL_SPI_TransmitReceive+0x33c>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004512:	f7fe fc7b 	bl	8002e0c <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004528:	887b      	ldrh	r3, [r7, #2]
 800452a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004530:	2b01      	cmp	r3, #1
 8004532:	d00f      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x70>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453a:	d107      	bne.n	800454c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_SPI_TransmitReceive+0x68>
 8004544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004548:	2b04      	cmp	r3, #4
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004552:	e15b      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x82>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x82>
 8004560:	887b      	ldrh	r3, [r7, #2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800456c:	e14e      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2205      	movs	r2, #5
 800457e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d007      	beq.n	80045d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d178      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x10a>
 80045e8:	8b7b      	ldrh	r3, [r7, #26]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d166      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004612:	e053      	b.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d11b      	bne.n	800465a <HAL_SPI_TransmitReceive+0x176>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_SPI_TransmitReceive+0x176>
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d113      	bne.n	800465a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b01      	cmp	r3, #1
 8004666:	d119      	bne.n	800469c <HAL_SPI_TransmitReceive+0x1b8>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d014      	beq.n	800469c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	b292      	uxth	r2, r2
 800467e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800469c:	f7fe fbb6 	bl	8002e0c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d807      	bhi.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d003      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ba:	e0a7      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1a6      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x130>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1a1      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x130>
 80046d0:	e07c      	b.n	80047cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x1fc>
 80046da:	8b7b      	ldrh	r3, [r7, #26]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d16b      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	e057      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d11c      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d017      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d114      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d119      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x2ae>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478e:	2301      	movs	r3, #1
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004792:	f7fe fb3b 	bl	8002e0c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479e:	429a      	cmp	r2, r3
 80047a0:	d803      	bhi.n	80047aa <HAL_SPI_TransmitReceive+0x2c6>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d102      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x2cc>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047b6:	e029      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a2      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x224>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d19d      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f917 	bl	8004a04 <SPI_EndRxTxTransaction>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d006      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047e8:	e010      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	e000      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800480a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800481c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004820:	4618      	mov	r0, r3
 8004822:	3730      	adds	r7, #48	; 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004838:	f7fe fae8 	bl	8002e0c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004848:	f7fe fae0 	bl	8002e0c <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	e054      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d050      	beq.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004868:	f7fe fad0 	bl	8002e0c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d902      	bls.n	800487e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13d      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800488c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d111      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	d004      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d10f      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e017      	b.n	800492a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3b01      	subs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d19b      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000004 	.word	0x20000004

08004938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494c:	d111      	bne.n	8004972 <SPI_EndRxTransaction+0x3a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d004      	beq.n	8004962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d107      	bne.n	8004972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d12a      	bne.n	80049d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d012      	beq.n	80049ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff ff49 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02d      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e026      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	2101      	movs	r1, #1
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ff36 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01a      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e013      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	2101      	movs	r1, #1
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ff23 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e000      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <SPI_EndRxTxTransaction+0x7c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <SPI_EndRxTxTransaction+0x80>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0d5b      	lsrs	r3, r3, #21
 8004a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d112      	bne.n	8004a56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fef4 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d0f2      	beq.n	8004a56 <SPI_EndRxTxTransaction+0x52>
 8004a70:	e000      	b.n	8004a74 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a72:	bf00      	nop
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000004 	.word	0x20000004
 8004a84:	165e9f81 	.word	0x165e9f81

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd f90e 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 fafa 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e046      	b.n	8004bce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_TIM_Base_Start+0xb4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_TIM_Base_Start+0xb8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_Base_Start+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_Base_Start+0xc0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIM_Base_Start+0xc4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_TIM_Base_Start+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_Base_Start+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d001      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e04e      	b.n	8004cae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d01d      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d010      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	e007      	b.n	8004cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40001800 	.word	0x40001800

08004cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0202 	mvn.w	r2, #2
 8004d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9b2 	bl	8005084 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9a4 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9b5 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0204 	mvn.w	r2, #4
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f988 	bl	8005084 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f97a 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f98b 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d122      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0208 	mvn.w	r2, #8
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2204      	movs	r2, #4
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f95e 	bl	8005084 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f950 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f961 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0210 	mvn.w	r2, #16
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2208      	movs	r2, #8
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f934 	bl	8005084 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f926 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f937 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0201 	mvn.w	r2, #1
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fb ff5a 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e66:	2b80      	cmp	r3, #128	; 0x80
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fadc 	bl	8005440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8fc 	bl	80050ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0220 	mvn.w	r2, #32
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 faa6 	bl	800542c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_TIM_ConfigClockSource+0x18>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0b3      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x180>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d03e      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0xd0>
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	f200 8087 	bhi.w	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f46:	f000 8085 	beq.w	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d87f      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f50:	2b70      	cmp	r3, #112	; 0x70
 8004f52:	d01a      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0xa2>
 8004f54:	2b70      	cmp	r3, #112	; 0x70
 8004f56:	d87b      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f58:	2b60      	cmp	r3, #96	; 0x60
 8004f5a:	d050      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x116>
 8004f5c:	2b60      	cmp	r3, #96	; 0x60
 8004f5e:	d877      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f60:	2b50      	cmp	r3, #80	; 0x50
 8004f62:	d03c      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0xf6>
 8004f64:	2b50      	cmp	r3, #80	; 0x50
 8004f66:	d873      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d058      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x136>
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d86f      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f70:	2b30      	cmp	r3, #48	; 0x30
 8004f72:	d064      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x156>
 8004f74:	2b30      	cmp	r3, #48	; 0x30
 8004f76:	d86b      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d060      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x156>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d867      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05c      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x156>
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d05a      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f88:	e062      	b.n	8005050 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6899      	ldr	r1, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f000 f9ab 	bl	80052f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	609a      	str	r2, [r3, #8]
      break;
 8004fb6:	e04e      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6899      	ldr	r1, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f000 f994 	bl	80052f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fda:	609a      	str	r2, [r3, #8]
      break;
 8004fdc:	e03b      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 f908 	bl	8005200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2150      	movs	r1, #80	; 0x50
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f961 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e02b      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	461a      	mov	r2, r3
 800500c:	f000 f927 	bl	800525e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2160      	movs	r1, #96	; 0x60
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f951 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800501c:	e01b      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	461a      	mov	r2, r3
 800502c:	f000 f8e8 	bl	8005200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f941 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800503c:	e00b      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f000 f938 	bl	80052be <TIM_ITRx_SetConfig>
        break;
 800504e:	e002      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005054:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d00f      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3d      	ldr	r2, [pc, #244]	; (80051d8 <TIM_Base_SetConfig+0x118>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3c      	ldr	r2, [pc, #240]	; (80051dc <TIM_Base_SetConfig+0x11c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <TIM_Base_SetConfig+0x120>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d108      	bne.n	8005112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d027      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <TIM_Base_SetConfig+0x118>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d023      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2b      	ldr	r2, [pc, #172]	; (80051dc <TIM_Base_SetConfig+0x11c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <TIM_Base_SetConfig+0x120>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d017      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a28      	ldr	r2, [pc, #160]	; (80051e8 <TIM_Base_SetConfig+0x128>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <TIM_Base_SetConfig+0x12c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <TIM_Base_SetConfig+0x130>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <TIM_Base_SetConfig+0x134>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <TIM_Base_SetConfig+0x138>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <TIM_Base_SetConfig+0x13c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_Base_SetConfig+0xf8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40001800 	.word	0x40001800
 80051f8:	40001c00 	.word	0x40001c00
 80051fc:	40002000 	.word	0x40002000

08005200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 030a 	bic.w	r3, r3, #10
 800523c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525e:	b480      	push	{r7}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800529a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f043 0307 	orr.w	r3, r3, #7
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e05a      	b.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d01d      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a17      	ldr	r2, [pc, #92]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10c      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40010400 	.word	0x40010400
 8005424:	40014000 	.word	0x40014000
 8005428:	40001800 	.word	0x40001800

0800542c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e03f      	b.n	80054e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc fca2 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb9f 	bl	8005bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	4613      	mov	r3, r2
 80054fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	d11d      	bne.n	8005544 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Receive_IT+0x26>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e016      	b.n	8005546 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_UART_Receive_IT+0x38>
 8005522:	2302      	movs	r3, #2
 8005524:	e00f      	b.n	8005546 <HAL_UART_Receive_IT+0x58>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	461a      	mov	r2, r3
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f9d4 	bl	80058e8 <UART_Start_Receive_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	e000      	b.n	8005546 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005544:	2302      	movs	r3, #2
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10d      	bne.n	80055a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_UART_IRQHandler+0x52>
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa87 	bl	8005aae <UART_Receive_IT>
      return;
 80055a0:	e17c      	b.n	800589c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80b1 	beq.w	800570c <HAL_UART_IRQHandler+0x1bc>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <HAL_UART_IRQHandler+0x70>
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80a6 	beq.w	800570c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_UART_IRQHandler+0x90>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_UART_IRQHandler+0xb0>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	f043 0202 	orr.w	r2, r3, #2
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_UART_IRQHandler+0xd0>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <HAL_UART_IRQHandler+0xfa>
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <HAL_UART_IRQHandler+0xee>
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 811f 	beq.w	8005892 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_UART_IRQHandler+0x11e>
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fa20 	bl	8005aae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <HAL_UART_IRQHandler+0x146>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d031      	beq.n	80056fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f960 	bl	800595c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d123      	bne.n	80056f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d013      	beq.n	80056ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4a77      	ldr	r2, [pc, #476]	; (80058a4 <HAL_UART_IRQHandler+0x354>)
 80056c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd fd4d 	bl	800316e <HAL_DMA_Abort_IT>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d016      	beq.n	8005708 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e4:	4610      	mov	r0, r2
 80056e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e00e      	b.n	8005708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8e6 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e00a      	b.n	8005708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8e2 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	e006      	b.n	8005708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8de 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005706:	e0c4      	b.n	8005892 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	bf00      	nop
    return;
 800570a:	e0c2      	b.n	8005892 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	f040 80a2 	bne.w	800585a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 809c 	beq.w	800585a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8096 	beq.w	800585a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d14f      	bne.n	80057f2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800575c:	8a3b      	ldrh	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8099 	beq.w	8005896 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005768:	8a3a      	ldrh	r2, [r7, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	f080 8093 	bcs.w	8005896 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8a3a      	ldrh	r2, [r7, #16]
 8005774:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d02b      	beq.n	80057da <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005790:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0210 	bic.w	r2, r2, #16
 80057ce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd fc5a 	bl	800308e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f870 	bl	80058d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057f0:	e051      	b.n	8005896 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d047      	beq.n	800589a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800580a:	8a7b      	ldrh	r3, [r7, #18]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d044      	beq.n	800589a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800581e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0210 	bic.w	r2, r2, #16
 800584c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800584e:	8a7b      	ldrh	r3, [r7, #18]
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f83c 	bl	80058d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005858:	e01f      	b.n	800589a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x326>
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8b5 	bl	80059de <UART_Transmit_IT>
    return;
 8005874:	e012      	b.n	800589c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <HAL_UART_IRQHandler+0x34c>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f8f7 	bl	8005a7e <UART_EndTransmit_IT>
    return;
 8005890:	e004      	b.n	800589c <HAL_UART_IRQHandler+0x34c>
    return;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_UART_IRQHandler+0x34c>
      return;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_UART_IRQHandler+0x34c>
      return;
 800589a:	bf00      	nop
  }
}
 800589c:	3728      	adds	r7, #40	; 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	080059b7 	.word	0x080059b7

080058a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2222      	movs	r2, #34	; 0x22
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0220 	orr.w	r2, r2, #32
 800594c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005972:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0210 	bic.w	r2, r2, #16
 800599a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff73 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b21      	cmp	r3, #33	; 0x21
 80059f0:	d13e      	bne.n	8005a70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	d114      	bne.n	8005a26 <UART_Transmit_IT+0x48>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d110      	bne.n	8005a26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	1c9a      	adds	r2, r3, #2
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]
 8005a24:	e008      	b.n	8005a38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6211      	str	r1, [r2, #32]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4619      	mov	r1, r3
 8005a46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10f      	bne.n	8005a6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ff02 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b22      	cmp	r3, #34	; 0x22
 8005ac0:	f040 8087 	bne.w	8005bd2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005acc:	d117      	bne.n	8005afe <UART_Receive_IT+0x50>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d113      	bne.n	8005afe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28
 8005afc:	e026      	b.n	8005b4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d007      	beq.n	8005b22 <UART_Receive_IT+0x74>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <UART_Receive_IT+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	e008      	b.n	8005b42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d136      	bne.n	8005bce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0220 	bic.w	r2, r2, #32
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10e      	bne.n	8005bbe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0210 	bic.w	r2, r2, #16
 8005bae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fe8a 	bl	80058d0 <HAL_UARTEx_RxEventCallback>
 8005bbc:	e002      	b.n	8005bc4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb f8d4 	bl	8000d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e002      	b.n	8005bd4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e000      	b.n	8005bd4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005bd2:	2302      	movs	r3, #2
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	b09f      	sub	sp, #124	; 0x7c
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf2:	68d9      	ldr	r1, [r3, #12]
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	ea40 0301 	orr.w	r3, r0, r1
 8005bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c20:	f021 010c 	bic.w	r1, r1, #12
 8005c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	6999      	ldr	r1, [r3, #24]
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	ea40 0301 	orr.w	r3, r0, r1
 8005c44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4bc5      	ldr	r3, [pc, #788]	; (8005f60 <UART_SetConfig+0x384>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d004      	beq.n	8005c5a <UART_SetConfig+0x7e>
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4bc3      	ldr	r3, [pc, #780]	; (8005f64 <UART_SetConfig+0x388>)
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d103      	bne.n	8005c62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c5a:	f7fd fd5f 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8005c5e:	6778      	str	r0, [r7, #116]	; 0x74
 8005c60:	e002      	b.n	8005c68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c62:	f7fd fd47 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8005c66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c70:	f040 80b6 	bne.w	8005de0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c76:	461c      	mov	r4, r3
 8005c78:	f04f 0500 	mov.w	r5, #0
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	462b      	mov	r3, r5
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	6439      	str	r1, [r7, #64]	; 0x40
 8005c84:	415b      	adcs	r3, r3
 8005c86:	647b      	str	r3, [r7, #68]	; 0x44
 8005c88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c8c:	1912      	adds	r2, r2, r4
 8005c8e:	eb45 0303 	adc.w	r3, r5, r3
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f04f 0100 	mov.w	r1, #0
 8005c9a:	00d9      	lsls	r1, r3, #3
 8005c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ca0:	00d0      	lsls	r0, r2, #3
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	1911      	adds	r1, r2, r4
 8005ca8:	6639      	str	r1, [r7, #96]	; 0x60
 8005caa:	416b      	adcs	r3, r5
 8005cac:	667b      	str	r3, [r7, #100]	; 0x64
 8005cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cc8:	f7fa fe8c 	bl	80009e4 <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4ba5      	ldr	r3, [pc, #660]	; (8005f68 <UART_SetConfig+0x38c>)
 8005cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	011e      	lsls	r6, r3, #4
 8005cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cdc:	461c      	mov	r4, r3
 8005cde:	f04f 0500 	mov.w	r5, #0
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	1891      	adds	r1, r2, r2
 8005ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cea:	415b      	adcs	r3, r3
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
 8005cee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cf2:	1912      	adds	r2, r2, r4
 8005cf4:	eb45 0303 	adc.w	r3, r5, r3
 8005cf8:	f04f 0000 	mov.w	r0, #0
 8005cfc:	f04f 0100 	mov.w	r1, #0
 8005d00:	00d9      	lsls	r1, r3, #3
 8005d02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d06:	00d0      	lsls	r0, r2, #3
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	1911      	adds	r1, r2, r4
 8005d0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d10:	416b      	adcs	r3, r5
 8005d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	1891      	adds	r1, r2, r2
 8005d20:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d22:	415b      	adcs	r3, r3
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d2e:	f7fa fe59 	bl	80009e4 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4b8c      	ldr	r3, [pc, #560]	; (8005f68 <UART_SetConfig+0x38c>)
 8005d38:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	2164      	movs	r1, #100	; 0x64
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	3332      	adds	r3, #50	; 0x32
 8005d4a:	4a87      	ldr	r2, [pc, #540]	; (8005f68 <UART_SetConfig+0x38c>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d58:	441e      	add	r6, r3
 8005d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f04f 0100 	mov.w	r1, #0
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	1894      	adds	r4, r2, r2
 8005d68:	623c      	str	r4, [r7, #32]
 8005d6a:	415b      	adcs	r3, r3
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d72:	1812      	adds	r2, r2, r0
 8005d74:	eb41 0303 	adc.w	r3, r1, r3
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	f04f 0500 	mov.w	r5, #0
 8005d80:	00dd      	lsls	r5, r3, #3
 8005d82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d86:	00d4      	lsls	r4, r2, #3
 8005d88:	4622      	mov	r2, r4
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	1814      	adds	r4, r2, r0
 8005d8e:	653c      	str	r4, [r7, #80]	; 0x50
 8005d90:	414b      	adcs	r3, r1
 8005d92:	657b      	str	r3, [r7, #84]	; 0x54
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	1891      	adds	r1, r2, r2
 8005da0:	61b9      	str	r1, [r7, #24]
 8005da2:	415b      	adcs	r3, r3
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005daa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005dae:	f7fa fe19 	bl	80009e4 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <UART_SetConfig+0x38c>)
 8005db8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	2164      	movs	r1, #100	; 0x64
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	3332      	adds	r3, #50	; 0x32
 8005dca:	4a67      	ldr	r2, [pc, #412]	; (8005f68 <UART_SetConfig+0x38c>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f003 0207 	and.w	r2, r3, #7
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4432      	add	r2, r6
 8005ddc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dde:	e0b9      	b.n	8005f54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de2:	461c      	mov	r4, r3
 8005de4:	f04f 0500 	mov.w	r5, #0
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	1891      	adds	r1, r2, r2
 8005dee:	6139      	str	r1, [r7, #16]
 8005df0:	415b      	adcs	r3, r3
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005df8:	1912      	adds	r2, r2, r4
 8005dfa:	eb45 0303 	adc.w	r3, r5, r3
 8005dfe:	f04f 0000 	mov.w	r0, #0
 8005e02:	f04f 0100 	mov.w	r1, #0
 8005e06:	00d9      	lsls	r1, r3, #3
 8005e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e0c:	00d0      	lsls	r0, r2, #3
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	eb12 0804 	adds.w	r8, r2, r4
 8005e16:	eb43 0905 	adc.w	r9, r3, r5
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	008b      	lsls	r3, r1, #2
 8005e2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e32:	0082      	lsls	r2, r0, #2
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fdd4 	bl	80009e4 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <UART_SetConfig+0x38c>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011e      	lsls	r6, r3, #4
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	1894      	adds	r4, r2, r2
 8005e58:	60bc      	str	r4, [r7, #8]
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e62:	1812      	adds	r2, r2, r0
 8005e64:	eb41 0303 	adc.w	r3, r1, r3
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	f04f 0500 	mov.w	r5, #0
 8005e70:	00dd      	lsls	r5, r3, #3
 8005e72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e76:	00d4      	lsls	r4, r2, #3
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	1814      	adds	r4, r2, r0
 8005e7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e80:	414b      	adcs	r3, r1
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	008b      	lsls	r3, r1, #2
 8005e98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e9c:	0082      	lsls	r2, r0, #2
 8005e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ea2:	f7fa fd9f 	bl	80009e4 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <UART_SetConfig+0x38c>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	; 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <UART_SetConfig+0x38c>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eca:	441e      	add	r6, r3
 8005ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	1894      	adds	r4, r2, r2
 8005eda:	603c      	str	r4, [r7, #0]
 8005edc:	415b      	adcs	r3, r3
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee4:	1812      	adds	r2, r2, r0
 8005ee6:	eb41 0303 	adc.w	r3, r1, r3
 8005eea:	f04f 0400 	mov.w	r4, #0
 8005eee:	f04f 0500 	mov.w	r5, #0
 8005ef2:	00dd      	lsls	r5, r3, #3
 8005ef4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ef8:	00d4      	lsls	r4, r2, #3
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	eb12 0a00 	adds.w	sl, r2, r0
 8005f02:	eb43 0b01 	adc.w	fp, r3, r1
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	008b      	lsls	r3, r1, #2
 8005f1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f1e:	0082      	lsls	r2, r0, #2
 8005f20:	4650      	mov	r0, sl
 8005f22:	4659      	mov	r1, fp
 8005f24:	f7fa fd5e 	bl	80009e4 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <UART_SetConfig+0x38c>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <UART_SetConfig+0x38c>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4432      	add	r2, r6
 8005f52:	609a      	str	r2, [r3, #8]
}
 8005f54:	bf00      	nop
 8005f56:	377c      	adds	r7, #124	; 0x7c
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	bf00      	nop
 8005f60:	40011000 	.word	0x40011000
 8005f64:	40011400 	.word	0x40011400
 8005f68:	51eb851f 	.word	0x51eb851f

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f000 f820 	bl	8005fc4 <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08005ffc 	.word	0x08005ffc
 8005fa8:	08005ffc 	.word	0x08005ffc
 8005fac:	08005ffc 	.word	0x08005ffc
 8005fb0:	08006000 	.word	0x08006000

08005fb4 <memset>:
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <_init>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr

08005fd0 <_fini>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr
